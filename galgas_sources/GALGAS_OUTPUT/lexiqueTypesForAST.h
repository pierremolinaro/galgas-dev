//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'lexiqueTypesForAST.h'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 6th, 2010, at 15h41'35"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef lexiqueTypesForAST_DEFINED
#define lexiqueTypesForAST_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/GGS__header.h"

//---------------------------------------------------------------------------*

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalExpressionAST ;
class cPtr_lexicalExpressionAST ;
class GGS_lexicalInstructionAST ;
class cPtr_lexicalInstructionAST ;
class GGS_lexicalInstructionListAST ;
class GGS_metamodelTemplateDelimitorListAST ;
class GGS_templateReplacementListAST ;
class GGS_abstractLexicalRuleAST ;
class cPtr_abstractLexicalRuleAST ;
class GGS_lexicalRuleListAST ;
class GGS_lexicalImplicitRuleAST ;
class cPtr_lexicalImplicitRuleAST ;
class GGS_lexicalExplicitRuleAST ;
class cPtr_lexicalExplicitRuleAST ;
class GGS_lexicalMessageDeclarationListAST ;
class GGS_lexicalAttributeListAST ;
class GGS_lexicalStyleListAST ;
class GGS_terminalDeclarationListAST ;
class GGS_lexicalListEntryListAST ;
class GGS_lexicalListDeclarationListAST ;
class GGS_lexicalOrExpressionAST ;
class cPtr_lexicalOrExpressionAST ;
class GGS_lexicalCharacterSetMatchAST ;
class cPtr_lexicalCharacterSetMatchAST ;
class GGS_lexicalCharacterMatchAST ;
class cPtr_lexicalCharacterMatchAST ;
class GGS_lexicalCharacterIntervalMatchAST ;
class cPtr_lexicalCharacterIntervalMatchAST ;
class GGS_lexicalStringMatchAST ;
class cPtr_lexicalStringMatchAST ;
class GGS_lexicalStringNotMatchAST ;
class cPtr_lexicalStringNotMatchAST ;
class GGS_lexicalSendSearchListAST ;
class GGS_lexicalSendDefaultActionAST ;
class cPtr_lexicalSendDefaultActionAST ;
class GGS_lexicalStructuredSendInstructionAST ;
class cPtr_lexicalStructuredSendInstructionAST ;
class GGS_lexicalSimpleSendInstructionAST ;
class cPtr_lexicalSimpleSendInstructionAST ;
class GGS_lexicalSendTerminalByDefaultAST ;
class cPtr_lexicalSendTerminalByDefaultAST ;
class GGS_lexicalErrorByDefaultAST ;
class cPtr_lexicalErrorByDefaultAST ;
class GGS_lexicalWhileBranchListAST ;
class GGS_lexicalRepeatInstructionAST ;
class cPtr_lexicalRepeatInstructionAST ;
class GGS_lexicalSelectBranchListAST ;
class GGS_lexicalSelectInstructionAST ;
class cPtr_lexicalSelectInstructionAST ;
class GGS_abstractLexicalRoutineActualArgumentAST ;
class cPtr_abstractLexicalRoutineActualArgumentAST ;
class GGS_lexicalRoutineCallActualArgumentListAST ;
class GGS_lexicalRoutineInstructionAST ;
class cPtr_lexicalRoutineInstructionAST ;
class GGS_lexicalAttributeInputOutputArgumentAST ;
class cPtr_lexicalAttributeInputOutputArgumentAST ;
class GGS_lexicalRoutineOrFunctionFormalInputArgumentAST ;
class cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST ;
class GGS_lexicalFormalInputArgumentAST ;
class cPtr_lexicalFormalInputArgumentAST ;
class GGS_lexicalFunctionCallActualArgumentListAST ;
class GGS_lexicalAttributeInputArgumentAST ;
class cPtr_lexicalAttributeInputArgumentAST ;
class GGS_lexicalCharacterInputArgumentAST ;
class cPtr_lexicalCharacterInputArgumentAST ;
class GGS_lexicalUnsignedInputArgumentAST ;
class cPtr_lexicalUnsignedInputArgumentAST ;
class GGS_lexicalCurrentCharacterInputArgumentAST ;
class cPtr_lexicalCurrentCharacterInputArgumentAST ;
class GGS_lexicalFunctionInputArgumentAST ;
class cPtr_lexicalFunctionInputArgumentAST ;
class GGS_lexicalDropInstructionAST ;
class cPtr_lexicalDropInstructionAST ;
class GGS_lexicalErrorInstructionAST ;
class cPtr_lexicalErrorInstructionAST ;
class GGS_lexicalWarningInstructionAST ;
class cPtr_lexicalWarningInstructionAST ;
class GGS_lexicalTagInstructionAST ;
class cPtr_lexicalTagInstructionAST ;
class GGS_lexicalRewindInstructionAST ;
class cPtr_lexicalRewindInstructionAST ;
class GGS_lexicalLogInstructionAST ;
class cPtr_lexicalLogInstructionAST ;
class GGS_lexicalArgumentModeAST ;
class GGS_lexicalExternRoutineFormalArgumentListAST ;
class GGS_externRoutineListAST ;
class GGS_lexicalExternFunctionFormalArgumentListAST ;
class GGS_externFunctionListAST ;
class GGS_lexiqueComponentAST ;
class cPtr_lexiqueComponentAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_lexicalExpressionAST'                   *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalExpressionAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalExpressionAST : public AC_GGS_class {
//--- Default constructor
  public : inline GGS_lexicalExpressionAST (void) :
  AC_GGS_class () {}

//--- Pointer assignment constructor
  public : GGS_lexicalExpressionAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalExpressionAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalExpressionAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalExpressionAST * getPtr (void) const {
    return (cPtr_lexicalExpressionAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalExpressionAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalExpressionAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalExpressionAST *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformationEX * galgasObjectRunTimeInfo (void) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalExpressionAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformationEX gClassInfoFor__lexicalExpressionAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_lexicalInstructionAST'                  *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalInstructionAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalInstructionAST : public AC_GGS_class {
//--- Default constructor
  public : inline GGS_lexicalInstructionAST (void) :
  AC_GGS_class () {}

//--- Pointer assignment constructor
  public : GGS_lexicalInstructionAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalInstructionAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalInstructionAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalInstructionAST * getPtr (void) const {
    return (cPtr_lexicalInstructionAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalInstructionAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalInstructionAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalInstructionAST *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformationEX * galgasObjectRunTimeInfo (void) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalInstructionAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformationEX gClassInfoFor__lexicalInstructionAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@lexicalInstructionListAST'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalInstructionListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalInstructionListAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalInstructionListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_lexicalInstructionListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_lexicalInstructionListAST constructor_emptyList (void) ;
  public : static GGS_lexicalInstructionListAST constructor_listWithValue (const GGS_lexicalInstructionAST & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_lexicalInstructionListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_lexicalInstructionListAST
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_lexicalInstructionListAST
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_lexicalInstructionListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lexicalInstructionAST & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lexicalInstructionAST & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lexicalInstructionAST & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lexicalInstructionAST & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_lexicalInstructionListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lexicalInstructionAST & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_lexicalInstructionListAST operator_concat (const GGS_lexicalInstructionListAST & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lexicalInstructionAST & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lexicalInstructionAST & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lexicalInstructionAST & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lexicalInstructionAST 
  reader_mInstructionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMInstructionAtIndex (C_Compiler & inLexique,
                              const GGS_lexicalInstructionAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalInstructionListAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_lexicalInstructionListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lexicalInstructionAST   & _mInstruction (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                list '@metamodelTemplateDelimitorListAST'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_metamodelTemplateDelimitorListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_metamodelTemplateDelimitorListAST ;

//---------------------------------------------------------------------------*

class GGS_metamodelTemplateDelimitorListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_metamodelTemplateDelimitorListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_metamodelTemplateDelimitorListAST constructor_emptyList (void) ;
  public : static GGS_metamodelTemplateDelimitorListAST constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_lstringlist & argument_1,
                                const GGS_lstring & argument_2) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_metamodelTemplateDelimitorListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_metamodelTemplateDelimitorListAST
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_metamodelTemplateDelimitorListAST
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_metamodelTemplateDelimitorListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_lstringlist & _out_1,
                              GGS_lstring & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_lstringlist & _out_1,
                             GGS_lstring & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_lstringlist & _out_1,
                                GGS_lstring & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lstringlist & _out_1,
                                 GGS_lstring & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_metamodelTemplateDelimitorListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstringlist & argument_1,
                                const GGS_lstring & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_metamodelTemplateDelimitorListAST operator_concat (const GGS_metamodelTemplateDelimitorListAST & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstringlist & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstringlist & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstringlist & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mStartStringAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist 
  reader_mOptionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mEndStringAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMStartStringAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMOptionListAtIndex (C_Compiler & inLexique,
                              const GGS_lstringlist  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMEndStringAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_metamodelTemplateDelimitorListAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_metamodelTemplateDelimitorListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mStartString (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstringlist   & _mOptionList (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mEndString (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@templateReplacementListAST'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_templateReplacementListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_templateReplacementListAST ;

//---------------------------------------------------------------------------*

class GGS_templateReplacementListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_templateReplacementListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_templateReplacementListAST constructor_emptyList (void) ;
  public : static GGS_templateReplacementListAST constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_templateReplacementListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_templateReplacementListAST
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_templateReplacementListAST
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_templateReplacementListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_lstring & _out_1,
                              GGS_lstring & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_lstring & _out_1,
                             GGS_lstring & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_lstring & _out_1,
                                GGS_lstring & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lstring & _out_1,
                                 GGS_lstring & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_templateReplacementListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_templateReplacementListAST operator_concat (const GGS_templateReplacementListAST & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mMatchStringAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mReplacementStringAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mReplacementFunctionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMMatchStringAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMReplacementStringAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMReplacementFunctionAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_templateReplacementListAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_templateReplacementListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mMatchString (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mReplacementString (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mReplacementFunction (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_abstractLexicalRuleAST'                  *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_abstractLexicalRuleAST ;

//---------------------------------------------------------------------------*

class GGS_abstractLexicalRuleAST : public AC_GGS_class {
//--- Default constructor
  public : inline GGS_abstractLexicalRuleAST (void) :
  AC_GGS_class () {}

//--- Pointer assignment constructor
  public : GGS_abstractLexicalRuleAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_abstractLexicalRuleAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_abstractLexicalRuleAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_abstractLexicalRuleAST * getPtr (void) const {
    return (cPtr_abstractLexicalRuleAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_abstractLexicalRuleAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_abstractLexicalRuleAST * operator () (LOCATION_ARGS) const {
      return (cPtr_abstractLexicalRuleAST *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformationEX * galgasObjectRunTimeInfo (void) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_abstractLexicalRuleAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformationEX gClassInfoFor__abstractLexicalRuleAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@lexicalRuleListAST'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalRuleListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalRuleListAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalRuleListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_lexicalRuleListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_lexicalRuleListAST constructor_emptyList (void) ;
  public : static GGS_lexicalRuleListAST constructor_listWithValue (const GGS_abstractLexicalRuleAST & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_lexicalRuleListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_lexicalRuleListAST
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_lexicalRuleListAST
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_lexicalRuleListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_abstractLexicalRuleAST & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_abstractLexicalRuleAST & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_abstractLexicalRuleAST & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_abstractLexicalRuleAST & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_lexicalRuleListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_abstractLexicalRuleAST & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_lexicalRuleListAST operator_concat (const GGS_lexicalRuleListAST & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_abstractLexicalRuleAST & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_abstractLexicalRuleAST & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_abstractLexicalRuleAST & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_abstractLexicalRuleAST 
  reader_mLexicalRuleAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMLexicalRuleAtIndex (C_Compiler & inLexique,
                              const GGS_abstractLexicalRuleAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalRuleListAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_lexicalRuleListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_abstractLexicalRuleAST   & _mLexicalRule (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_lexicalImplicitRuleAST'                  *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalImplicitRuleAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalImplicitRuleAST : public GGS_abstractLexicalRuleAST {
//--- Default constructor
  public : inline GGS_lexicalImplicitRuleAST (void) :
  GGS_abstractLexicalRuleAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalImplicitRuleAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalImplicitRuleAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalImplicitRuleAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalImplicitRuleAST constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalImplicitRuleAST * getPtr (void) const {
    return (cPtr_lexicalImplicitRuleAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mListName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalImplicitRuleAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalImplicitRuleAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalImplicitRuleAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalImplicitRuleAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalImplicitRuleAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_lexicalExplicitRuleAST'                  *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalExplicitRuleAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalExplicitRuleAST : public GGS_abstractLexicalRuleAST {
//--- Default constructor
  public : inline GGS_lexicalExplicitRuleAST (void) :
  GGS_abstractLexicalRuleAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalExplicitRuleAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalExplicitRuleAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalExplicitRuleAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalExplicitRuleAST constructor_new (C_Compiler & inLexique,
                                const GGS_lexicalExpressionAST & argument_0,
                                const GGS_lexicalInstructionListAST & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalExplicitRuleAST * getPtr (void) const {
    return (cPtr_lexicalExplicitRuleAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lexicalExpressionAST  reader_mLexicalRuleExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lexicalInstructionListAST  reader_mInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalExplicitRuleAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalExplicitRuleAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalExplicitRuleAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalExplicitRuleAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalExplicitRuleAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 list '@lexicalMessageDeclarationListAST'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalMessageDeclarationListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalMessageDeclarationListAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalMessageDeclarationListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_lexicalMessageDeclarationListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_lexicalMessageDeclarationListAST constructor_emptyList (void) ;
  public : static GGS_lexicalMessageDeclarationListAST constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_lexicalMessageDeclarationListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_lexicalMessageDeclarationListAST
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_lexicalMessageDeclarationListAST
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_lexicalMessageDeclarationListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_lstring & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_lstring & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_lstring & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lstring & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_lexicalMessageDeclarationListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_lexicalMessageDeclarationListAST operator_concat (const GGS_lexicalMessageDeclarationListAST & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mMessageNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mMessageValueAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMMessageNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMMessageValueAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalMessageDeclarationListAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_lexicalMessageDeclarationListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mMessageName (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mMessageValue (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     list '@lexicalAttributeListAST'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalAttributeListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalAttributeListAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalAttributeListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_lexicalAttributeListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_lexicalAttributeListAST constructor_emptyList (void) ;
  public : static GGS_lexicalAttributeListAST constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_lexicalAttributeListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_lexicalAttributeListAST
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_lexicalAttributeListAST
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_lexicalAttributeListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_lstring & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_lstring & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_lstring & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lstring & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_lexicalAttributeListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_lexicalAttributeListAST operator_concat (const GGS_lexicalAttributeListAST & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mTypeNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMTypeNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalAttributeListAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_lexicalAttributeListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mTypeName (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mName (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@lexicalStyleListAST'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalStyleListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalStyleListAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalStyleListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_lexicalStyleListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_lexicalStyleListAST constructor_emptyList (void) ;
  public : static GGS_lexicalStyleListAST constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_lexicalStyleListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_lexicalStyleListAST
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_lexicalStyleListAST
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_lexicalStyleListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_lstring & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_lstring & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_lstring & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lstring & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_lexicalStyleListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_lexicalStyleListAST operator_concat (const GGS_lexicalStyleListAST & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mCommentAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMCommentAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalStyleListAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_lexicalStyleListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mName (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mComment (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@terminalDeclarationListAST'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_terminalDeclarationListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_terminalDeclarationListAST ;

//---------------------------------------------------------------------------*

class GGS_terminalDeclarationListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_terminalDeclarationListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_terminalDeclarationListAST constructor_emptyList (void) ;
  public : static GGS_terminalDeclarationListAST constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_lstringlist & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_lstringlist & argument_4) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_terminalDeclarationListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_terminalDeclarationListAST
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_terminalDeclarationListAST
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_terminalDeclarationListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_lstringlist & _out_1,
                              GGS_lstring & _out_2,
                              GGS_lstring & _out_3,
                              GGS_lstringlist & _out_4
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_lstringlist & _out_1,
                             GGS_lstring & _out_2,
                             GGS_lstring & _out_3,
                             GGS_lstringlist & _out_4
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_lstringlist & _out_1,
                                GGS_lstring & _out_2,
                                GGS_lstring & _out_3,
                                GGS_lstringlist & _out_4
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lstringlist & _out_1,
                                 GGS_lstring & _out_2,
                                 GGS_lstring & _out_3,
                                 GGS_lstringlist & _out_4
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_terminalDeclarationListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstringlist & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_lstringlist & argument_4) ;
//--- Handling '.' GALGAS operator
  public : GGS_terminalDeclarationListAST operator_concat (const GGS_terminalDeclarationListAST & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstringlist & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_lstringlist & argument_4
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstringlist & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_lstringlist & argument_4
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstringlist & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_lstringlist & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist 
  reader_mSentAttributeListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mSyntaxErrorMessageAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mStyleAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist 
  reader_mOptionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMSentAttributeListAtIndex (C_Compiler & inLexique,
                              const GGS_lstringlist  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMSyntaxErrorMessageAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMStyleAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMOptionListAtIndex (C_Compiler & inLexique,
                              const GGS_lstringlist  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_terminalDeclarationListAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_terminalDeclarationListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mName (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstringlist   & _mSentAttributeList (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mSyntaxErrorMessage (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mStyle (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstringlist   & _mOptionList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     list '@lexicalListEntryListAST'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalListEntryListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalListEntryListAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalListEntryListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_lexicalListEntryListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_lexicalListEntryListAST constructor_emptyList (void) ;
  public : static GGS_lexicalListEntryListAST constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstringlist & argument_2) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_lexicalListEntryListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_lexicalListEntryListAST
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_lexicalListEntryListAST
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_lexicalListEntryListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_lstring & _out_1,
                              GGS_lstringlist & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_lstring & _out_1,
                             GGS_lstringlist & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_lstring & _out_1,
                                GGS_lstringlist & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lstring & _out_1,
                                 GGS_lstringlist & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_lexicalListEntryListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstringlist & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_lexicalListEntryListAST operator_concat (const GGS_lexicalListEntryListAST & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstringlist & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstringlist & argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstringlist & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mEntrySpellingAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mTerminalSpellingAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist 
  reader_mFeatureListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMEntrySpellingAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMTerminalSpellingAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMFeatureListAtIndex (C_Compiler & inLexique,
                              const GGS_lstringlist  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalListEntryListAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_lexicalListEntryListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mEntrySpelling (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mTerminalSpelling (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstringlist   & _mFeatureList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  list '@lexicalListDeclarationListAST'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalListDeclarationListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalListDeclarationListAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalListDeclarationListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_lexicalListDeclarationListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_lexicalListDeclarationListAST constructor_emptyList (void) ;
  public : static GGS_lexicalListDeclarationListAST constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstringlist & argument_3,
                                const GGS_lexicalListEntryListAST & argument_4) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_lexicalListDeclarationListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_lexicalListDeclarationListAST
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_lexicalListDeclarationListAST
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_lexicalListDeclarationListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_lstring & _out_1,
                              GGS_lstring & _out_2,
                              GGS_lstringlist & _out_3,
                              GGS_lexicalListEntryListAST & _out_4
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_lstring & _out_1,
                             GGS_lstring & _out_2,
                             GGS_lstringlist & _out_3,
                             GGS_lexicalListEntryListAST & _out_4
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_lstring & _out_1,
                                GGS_lstring & _out_2,
                                GGS_lstringlist & _out_3,
                                GGS_lexicalListEntryListAST & _out_4
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lstring & _out_1,
                                 GGS_lstring & _out_2,
                                 GGS_lstringlist & _out_3,
                                 GGS_lexicalListEntryListAST & _out_4
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_lexicalListDeclarationListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstringlist & argument_3,
                                const GGS_lexicalListEntryListAST & argument_4) ;
//--- Handling '.' GALGAS operator
  public : GGS_lexicalListDeclarationListAST operator_concat (const GGS_lexicalListDeclarationListAST & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstringlist & argument_3,
                                const GGS_lexicalListEntryListAST & argument_4
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstringlist & argument_3,
                                const GGS_lexicalListEntryListAST & argument_4
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstringlist & argument_3,
                                const GGS_lexicalListEntryListAST & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mStyleAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mSyntaxErrorMessageAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist 
  reader_mSentAttributeListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lexicalListEntryListAST 
  reader_mEntryListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMStyleAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMSyntaxErrorMessageAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMSentAttributeListAtIndex (C_Compiler & inLexique,
                              const GGS_lstringlist  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMEntryListAtIndex (C_Compiler & inLexique,
                              const GGS_lexicalListEntryListAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalListDeclarationListAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_lexicalListDeclarationListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mName (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mStyle (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mSyntaxErrorMessage (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstringlist   & _mSentAttributeList (LOCATION_ARGS) const ;
    public : /* const */ GGS_lexicalListEntryListAST   & _mEntryList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_lexicalOrExpressionAST'                  *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalOrExpressionAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalOrExpressionAST : public GGS_lexicalExpressionAST {
//--- Default constructor
  public : inline GGS_lexicalOrExpressionAST (void) :
  GGS_lexicalExpressionAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalOrExpressionAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalOrExpressionAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalOrExpressionAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalOrExpressionAST constructor_new (C_Compiler & inLexique,
                                const GGS_lexicalExpressionAST & argument_0,
                                const GGS_lexicalExpressionAST & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalOrExpressionAST * getPtr (void) const {
    return (cPtr_lexicalOrExpressionAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lexicalExpressionAST  reader_mLeftOperand (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lexicalExpressionAST  reader_mRightOperand (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalOrExpressionAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalOrExpressionAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalOrExpressionAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalOrExpressionAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalOrExpressionAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_lexicalCharacterSetMatchAST'               *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalCharacterSetMatchAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalCharacterSetMatchAST : public GGS_lexicalExpressionAST {
//--- Default constructor
  public : inline GGS_lexicalCharacterSetMatchAST (void) :
  GGS_lexicalExpressionAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalCharacterSetMatchAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalCharacterSetMatchAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalCharacterSetMatchAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalCharacterSetMatchAST constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalCharacterSetMatchAST * getPtr (void) const {
    return (cPtr_lexicalCharacterSetMatchAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mCharacterSetName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalCharacterSetMatchAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalCharacterSetMatchAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalCharacterSetMatchAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalCharacterSetMatchAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalCharacterSetMatchAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_lexicalCharacterMatchAST'                 *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalCharacterMatchAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalCharacterMatchAST : public GGS_lexicalExpressionAST {
//--- Default constructor
  public : inline GGS_lexicalCharacterMatchAST (void) :
  GGS_lexicalExpressionAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalCharacterMatchAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalCharacterMatchAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalCharacterMatchAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalCharacterMatchAST constructor_new (C_Compiler & inLexique,
                                const GGS_lchar & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalCharacterMatchAST * getPtr (void) const {
    return (cPtr_lexicalCharacterMatchAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lchar  reader_mCharacter (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalCharacterMatchAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalCharacterMatchAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalCharacterMatchAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalCharacterMatchAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalCharacterMatchAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//           GALGAS class 'GGS_lexicalCharacterIntervalMatchAST'             *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalCharacterIntervalMatchAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalCharacterIntervalMatchAST : public GGS_lexicalExpressionAST {
//--- Default constructor
  public : inline GGS_lexicalCharacterIntervalMatchAST (void) :
  GGS_lexicalExpressionAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalCharacterIntervalMatchAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalCharacterIntervalMatchAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalCharacterIntervalMatchAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalCharacterIntervalMatchAST constructor_new (C_Compiler & inLexique,
                                const GGS_lchar & argument_0,
                                const GGS_lchar & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalCharacterIntervalMatchAST * getPtr (void) const {
    return (cPtr_lexicalCharacterIntervalMatchAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lchar  reader_mLowerBound (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lchar  reader_mUpperBound (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalCharacterIntervalMatchAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalCharacterIntervalMatchAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalCharacterIntervalMatchAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalCharacterIntervalMatchAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalCharacterIntervalMatchAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_lexicalStringMatchAST'                  *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalStringMatchAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalStringMatchAST : public GGS_lexicalExpressionAST {
//--- Default constructor
  public : inline GGS_lexicalStringMatchAST (void) :
  GGS_lexicalExpressionAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalStringMatchAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalStringMatchAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalStringMatchAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalStringMatchAST constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalStringMatchAST * getPtr (void) const {
    return (cPtr_lexicalStringMatchAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mString (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalStringMatchAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalStringMatchAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalStringMatchAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalStringMatchAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalStringMatchAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_lexicalStringNotMatchAST'                 *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalStringNotMatchAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalStringNotMatchAST : public GGS_lexicalExpressionAST {
//--- Default constructor
  public : inline GGS_lexicalStringNotMatchAST (void) :
  GGS_lexicalExpressionAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalStringNotMatchAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalStringNotMatchAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalStringNotMatchAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalStringNotMatchAST constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalStringNotMatchAST * getPtr (void) const {
    return (cPtr_lexicalStringNotMatchAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mString (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mErrorMessage (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalStringNotMatchAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalStringNotMatchAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalStringNotMatchAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalStringNotMatchAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalStringNotMatchAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     list '@lexicalSendSearchListAST'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalSendSearchListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalSendSearchListAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalSendSearchListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_lexicalSendSearchListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_lexicalSendSearchListAST constructor_emptyList (void) ;
  public : static GGS_lexicalSendSearchListAST constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_lexicalSendSearchListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_lexicalSendSearchListAST
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_lexicalSendSearchListAST
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_lexicalSendSearchListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_lstring & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_lstring & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_lstring & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lstring & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_lexicalSendSearchListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_lexicalSendSearchListAST operator_concat (const GGS_lexicalSendSearchListAST & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mAttributeNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mSearchListNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMAttributeNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMSearchListNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalSendSearchListAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_lexicalSendSearchListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mAttributeName (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mSearchListName (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_lexicalSendDefaultActionAST'               *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalSendDefaultActionAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalSendDefaultActionAST : public AC_GGS_class {
//--- Default constructor
  public : inline GGS_lexicalSendDefaultActionAST (void) :
  AC_GGS_class () {}

//--- Pointer assignment constructor
  public : GGS_lexicalSendDefaultActionAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalSendDefaultActionAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalSendDefaultActionAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalSendDefaultActionAST * getPtr (void) const {
    return (cPtr_lexicalSendDefaultActionAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalSendDefaultActionAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalSendDefaultActionAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalSendDefaultActionAST *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformationEX * galgasObjectRunTimeInfo (void) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalSendDefaultActionAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformationEX gClassInfoFor__lexicalSendDefaultActionAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//          GALGAS class 'GGS_lexicalStructuredSendInstructionAST'           *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalStructuredSendInstructionAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalStructuredSendInstructionAST : public GGS_lexicalInstructionAST {
//--- Default constructor
  public : inline GGS_lexicalStructuredSendInstructionAST (void) :
  GGS_lexicalInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalStructuredSendInstructionAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalStructuredSendInstructionAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalStructuredSendInstructionAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalStructuredSendInstructionAST constructor_new (C_Compiler & inLexique,
                                const GGS_lexicalSendSearchListAST & argument_0,
                                const GGS_lexicalSendDefaultActionAST & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalStructuredSendInstructionAST * getPtr (void) const {
    return (cPtr_lexicalStructuredSendInstructionAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lexicalSendSearchListAST  reader_mLexicalSendSearchList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lexicalSendDefaultActionAST  reader_mLexicalSendDefaultAction (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalStructuredSendInstructionAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalStructuredSendInstructionAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalStructuredSendInstructionAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalStructuredSendInstructionAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalStructuredSendInstructionAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_lexicalSimpleSendInstructionAST'             *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalSimpleSendInstructionAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalSimpleSendInstructionAST : public GGS_lexicalInstructionAST {
//--- Default constructor
  public : inline GGS_lexicalSimpleSendInstructionAST (void) :
  GGS_lexicalInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalSimpleSendInstructionAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalSimpleSendInstructionAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalSimpleSendInstructionAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalSimpleSendInstructionAST constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalSimpleSendInstructionAST * getPtr (void) const {
    return (cPtr_lexicalSimpleSendInstructionAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mSentTerminal (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalSimpleSendInstructionAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalSimpleSendInstructionAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalSimpleSendInstructionAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalSimpleSendInstructionAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalSimpleSendInstructionAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_lexicalSendTerminalByDefaultAST'             *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalSendTerminalByDefaultAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalSendTerminalByDefaultAST : public GGS_lexicalSendDefaultActionAST {
//--- Default constructor
  public : inline GGS_lexicalSendTerminalByDefaultAST (void) :
  GGS_lexicalSendDefaultActionAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalSendTerminalByDefaultAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalSendTerminalByDefaultAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalSendTerminalByDefaultAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalSendTerminalByDefaultAST constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalSendTerminalByDefaultAST * getPtr (void) const {
    return (cPtr_lexicalSendTerminalByDefaultAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mDefaultSentTerminal (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalSendTerminalByDefaultAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalSendTerminalByDefaultAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalSendTerminalByDefaultAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalSendTerminalByDefaultAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalSendTerminalByDefaultAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_lexicalErrorByDefaultAST'                 *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalErrorByDefaultAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalErrorByDefaultAST : public GGS_lexicalSendDefaultActionAST {
//--- Default constructor
  public : inline GGS_lexicalErrorByDefaultAST (void) :
  GGS_lexicalSendDefaultActionAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalErrorByDefaultAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalErrorByDefaultAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalErrorByDefaultAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalErrorByDefaultAST constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalErrorByDefaultAST * getPtr (void) const {
    return (cPtr_lexicalErrorByDefaultAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mDefaultErrorMessageName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalErrorByDefaultAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalErrorByDefaultAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalErrorByDefaultAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalErrorByDefaultAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalErrorByDefaultAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@lexicalWhileBranchListAST'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalWhileBranchListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalWhileBranchListAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalWhileBranchListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_lexicalWhileBranchListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_lexicalWhileBranchListAST constructor_emptyList (void) ;
  public : static GGS_lexicalWhileBranchListAST constructor_listWithValue (const GGS_lexicalExpressionAST & argument_0,
                                const GGS_lexicalInstructionListAST & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_lexicalWhileBranchListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_lexicalWhileBranchListAST
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_lexicalWhileBranchListAST
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_lexicalWhileBranchListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lexicalExpressionAST & _out_0,
                              GGS_lexicalInstructionListAST & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lexicalExpressionAST & _out_0,
                             GGS_lexicalInstructionListAST & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lexicalExpressionAST & _out_0,
                                GGS_lexicalInstructionListAST & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lexicalExpressionAST & _out_0,
                                 GGS_lexicalInstructionListAST & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_lexicalWhileBranchListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lexicalExpressionAST & argument_0,
                                const GGS_lexicalInstructionListAST & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_lexicalWhileBranchListAST operator_concat (const GGS_lexicalWhileBranchListAST & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lexicalExpressionAST & argument_0,
                                const GGS_lexicalInstructionListAST & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lexicalExpressionAST & argument_0,
                                const GGS_lexicalInstructionListAST & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lexicalExpressionAST & argument_0,
                                const GGS_lexicalInstructionListAST & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lexicalExpressionAST 
  reader_mWhileExpressionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lexicalInstructionListAST 
  reader_mWhileInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMWhileExpressionAtIndex (C_Compiler & inLexique,
                              const GGS_lexicalExpressionAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMWhileInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_lexicalInstructionListAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalWhileBranchListAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_lexicalWhileBranchListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lexicalExpressionAST   & _mWhileExpression (LOCATION_ARGS) const ;
    public : /* const */ GGS_lexicalInstructionListAST   & _mWhileInstructionList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_lexicalRepeatInstructionAST'               *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalRepeatInstructionAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalRepeatInstructionAST : public GGS_lexicalInstructionAST {
//--- Default constructor
  public : inline GGS_lexicalRepeatInstructionAST (void) :
  GGS_lexicalInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalRepeatInstructionAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalRepeatInstructionAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalRepeatInstructionAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalRepeatInstructionAST constructor_new (C_Compiler & inLexique,
                                const GGS_lexicalInstructionListAST & argument_0,
                                const GGS_lexicalWhileBranchListAST & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalRepeatInstructionAST * getPtr (void) const {
    return (cPtr_lexicalRepeatInstructionAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lexicalInstructionListAST  reader_mRepeatedInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lexicalWhileBranchListAST  reader_mLexicalWhileBranchList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalRepeatInstructionAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalRepeatInstructionAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalRepeatInstructionAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalRepeatInstructionAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalRepeatInstructionAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@lexicalSelectBranchListAST'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalSelectBranchListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalSelectBranchListAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalSelectBranchListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_lexicalSelectBranchListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_lexicalSelectBranchListAST constructor_emptyList (void) ;
  public : static GGS_lexicalSelectBranchListAST constructor_listWithValue (const GGS_lexicalExpressionAST & argument_0,
                                const GGS_lexicalInstructionListAST & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_lexicalSelectBranchListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_lexicalSelectBranchListAST
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_lexicalSelectBranchListAST
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_lexicalSelectBranchListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lexicalExpressionAST & _out_0,
                              GGS_lexicalInstructionListAST & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lexicalExpressionAST & _out_0,
                             GGS_lexicalInstructionListAST & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lexicalExpressionAST & _out_0,
                                GGS_lexicalInstructionListAST & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lexicalExpressionAST & _out_0,
                                 GGS_lexicalInstructionListAST & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_lexicalSelectBranchListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lexicalExpressionAST & argument_0,
                                const GGS_lexicalInstructionListAST & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_lexicalSelectBranchListAST operator_concat (const GGS_lexicalSelectBranchListAST & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lexicalExpressionAST & argument_0,
                                const GGS_lexicalInstructionListAST & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lexicalExpressionAST & argument_0,
                                const GGS_lexicalInstructionListAST & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lexicalExpressionAST & argument_0,
                                const GGS_lexicalInstructionListAST & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lexicalExpressionAST 
  reader_mSelectExpressionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lexicalInstructionListAST 
  reader_mSelectInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMSelectExpressionAtIndex (C_Compiler & inLexique,
                              const GGS_lexicalExpressionAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMSelectInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_lexicalInstructionListAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalSelectBranchListAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_lexicalSelectBranchListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lexicalExpressionAST   & _mSelectExpression (LOCATION_ARGS) const ;
    public : /* const */ GGS_lexicalInstructionListAST   & _mSelectInstructionList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_lexicalSelectInstructionAST'               *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalSelectInstructionAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalSelectInstructionAST : public GGS_lexicalInstructionAST {
//--- Default constructor
  public : inline GGS_lexicalSelectInstructionAST (void) :
  GGS_lexicalInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalSelectInstructionAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalSelectInstructionAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalSelectInstructionAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalSelectInstructionAST constructor_new (C_Compiler & inLexique,
                                const GGS_lexicalSelectBranchListAST & argument_0,
                                const GGS_lexicalInstructionListAST & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalSelectInstructionAST * getPtr (void) const {
    return (cPtr_lexicalSelectInstructionAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lexicalSelectBranchListAST  reader_mLexicalSelectBranchList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lexicalInstructionListAST  reader_mDefaultInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalSelectInstructionAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalSelectInstructionAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalSelectInstructionAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalSelectInstructionAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalSelectInstructionAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//        GALGAS class 'GGS_abstractLexicalRoutineActualArgumentAST'         *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_abstractLexicalRoutineActualArgumentAST ;

//---------------------------------------------------------------------------*

class GGS_abstractLexicalRoutineActualArgumentAST : public AC_GGS_class {
//--- Default constructor
  public : inline GGS_abstractLexicalRoutineActualArgumentAST (void) :
  AC_GGS_class () {}

//--- Pointer assignment constructor
  public : GGS_abstractLexicalRoutineActualArgumentAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_abstractLexicalRoutineActualArgumentAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_abstractLexicalRoutineActualArgumentAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_abstractLexicalRoutineActualArgumentAST * getPtr (void) const {
    return (cPtr_abstractLexicalRoutineActualArgumentAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mActualPassingModeLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_abstractLexicalRoutineActualArgumentAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_abstractLexicalRoutineActualArgumentAST * operator () (LOCATION_ARGS) const {
      return (cPtr_abstractLexicalRoutineActualArgumentAST *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformationEX * galgasObjectRunTimeInfo (void) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_abstractLexicalRoutineActualArgumentAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformationEX gClassInfoFor__abstractLexicalRoutineActualArgumentAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//             list '@lexicalRoutineCallActualArgumentListAST'               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalRoutineCallActualArgumentListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalRoutineCallActualArgumentListAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalRoutineCallActualArgumentListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_lexicalRoutineCallActualArgumentListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_lexicalRoutineCallActualArgumentListAST constructor_emptyList (void) ;
  public : static GGS_lexicalRoutineCallActualArgumentListAST constructor_listWithValue (const GGS_abstractLexicalRoutineActualArgumentAST & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_lexicalRoutineCallActualArgumentListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_lexicalRoutineCallActualArgumentListAST
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_lexicalRoutineCallActualArgumentListAST
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_lexicalRoutineCallActualArgumentListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_abstractLexicalRoutineActualArgumentAST & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_abstractLexicalRoutineActualArgumentAST & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_abstractLexicalRoutineActualArgumentAST & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_abstractLexicalRoutineActualArgumentAST & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_lexicalRoutineCallActualArgumentListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_abstractLexicalRoutineActualArgumentAST & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_lexicalRoutineCallActualArgumentListAST operator_concat (const GGS_lexicalRoutineCallActualArgumentListAST & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_abstractLexicalRoutineActualArgumentAST & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_abstractLexicalRoutineActualArgumentAST & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_abstractLexicalRoutineActualArgumentAST & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_abstractLexicalRoutineActualArgumentAST 
  reader_mLexicalRoutineActualArgumentAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMLexicalRoutineActualArgumentAtIndex (C_Compiler & inLexique,
                              const GGS_abstractLexicalRoutineActualArgumentAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalRoutineCallActualArgumentListAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_lexicalRoutineCallActualArgumentListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_abstractLexicalRoutineActualArgumentAST   & _mLexicalRoutineActualArgument (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_lexicalRoutineInstructionAST'               *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalRoutineInstructionAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalRoutineInstructionAST : public GGS_lexicalInstructionAST {
//--- Default constructor
  public : inline GGS_lexicalRoutineInstructionAST (void) :
  GGS_lexicalInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalRoutineInstructionAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalRoutineInstructionAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalRoutineInstructionAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalRoutineInstructionAST constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lexicalRoutineCallActualArgumentListAST & argument_1,
                                const GGS_lstringlist & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalRoutineInstructionAST * getPtr (void) const {
    return (cPtr_lexicalRoutineInstructionAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mRoutineName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lexicalRoutineCallActualArgumentListAST  reader_mActualArgumentList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_mErrorMessageList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalRoutineInstructionAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalRoutineInstructionAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalRoutineInstructionAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalRoutineInstructionAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalRoutineInstructionAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//        GALGAS class 'GGS_lexicalAttributeInputOutputArgumentAST'          *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalAttributeInputOutputArgumentAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalAttributeInputOutputArgumentAST : public GGS_abstractLexicalRoutineActualArgumentAST {
//--- Default constructor
  public : inline GGS_lexicalAttributeInputOutputArgumentAST (void) :
  GGS_abstractLexicalRoutineActualArgumentAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalAttributeInputOutputArgumentAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalAttributeInputOutputArgumentAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalAttributeInputOutputArgumentAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalAttributeInputOutputArgumentAST constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalAttributeInputOutputArgumentAST * getPtr (void) const {
    return (cPtr_lexicalAttributeInputOutputArgumentAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mAttributeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalAttributeInputOutputArgumentAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalAttributeInputOutputArgumentAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalAttributeInputOutputArgumentAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalAttributeInputOutputArgumentAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalAttributeInputOutputArgumentAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//    GALGAS class 'GGS_lexicalRoutineOrFunctionFormalInputArgumentAST'      *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalRoutineOrFunctionFormalInputArgumentAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalRoutineOrFunctionFormalInputArgumentAST : public AC_GGS_class {
//--- Default constructor
  public : inline GGS_lexicalRoutineOrFunctionFormalInputArgumentAST (void) :
  AC_GGS_class () {}

//--- Pointer assignment constructor
  public : GGS_lexicalRoutineOrFunctionFormalInputArgumentAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalRoutineOrFunctionFormalInputArgumentAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalRoutineOrFunctionFormalInputArgumentAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * getPtr (void) const {
    return (cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformationEX * galgasObjectRunTimeInfo (void) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalRoutineOrFunctionFormalInputArgumentAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformationEX gClassInfoFor__lexicalRoutineOrFunctionFormalInputArgumentAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_lexicalFormalInputArgumentAST'              *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalFormalInputArgumentAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalFormalInputArgumentAST : public GGS_abstractLexicalRoutineActualArgumentAST {
//--- Default constructor
  public : inline GGS_lexicalFormalInputArgumentAST (void) :
  GGS_abstractLexicalRoutineActualArgumentAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalFormalInputArgumentAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalFormalInputArgumentAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalFormalInputArgumentAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalFormalInputArgumentAST constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lexicalRoutineOrFunctionFormalInputArgumentAST & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalFormalInputArgumentAST * getPtr (void) const {
    return (cPtr_lexicalFormalInputArgumentAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lexicalRoutineOrFunctionFormalInputArgumentAST  reader_mRoutineOrFunctionFormalInputArgument (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalFormalInputArgumentAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalFormalInputArgumentAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalFormalInputArgumentAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalFormalInputArgumentAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalFormalInputArgumentAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//             list '@lexicalFunctionCallActualArgumentListAST'              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalFunctionCallActualArgumentListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalFunctionCallActualArgumentListAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalFunctionCallActualArgumentListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_lexicalFunctionCallActualArgumentListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_lexicalFunctionCallActualArgumentListAST constructor_emptyList (void) ;
  public : static GGS_lexicalFunctionCallActualArgumentListAST constructor_listWithValue (const GGS_lexicalRoutineOrFunctionFormalInputArgumentAST & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_lexicalFunctionCallActualArgumentListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_lexicalFunctionCallActualArgumentListAST
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_lexicalFunctionCallActualArgumentListAST
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_lexicalFunctionCallActualArgumentListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lexicalRoutineOrFunctionFormalInputArgumentAST & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lexicalRoutineOrFunctionFormalInputArgumentAST & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lexicalRoutineOrFunctionFormalInputArgumentAST & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lexicalRoutineOrFunctionFormalInputArgumentAST & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_lexicalFunctionCallActualArgumentListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lexicalRoutineOrFunctionFormalInputArgumentAST & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_lexicalFunctionCallActualArgumentListAST operator_concat (const GGS_lexicalFunctionCallActualArgumentListAST & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lexicalRoutineOrFunctionFormalInputArgumentAST & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lexicalRoutineOrFunctionFormalInputArgumentAST & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lexicalRoutineOrFunctionFormalInputArgumentAST & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lexicalRoutineOrFunctionFormalInputArgumentAST 
  reader_mLexicalActualInputArgumentAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMLexicalActualInputArgumentAtIndex (C_Compiler & inLexique,
                              const GGS_lexicalRoutineOrFunctionFormalInputArgumentAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalFunctionCallActualArgumentListAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_lexicalFunctionCallActualArgumentListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lexicalRoutineOrFunctionFormalInputArgumentAST   & _mLexicalActualInputArgument (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//           GALGAS class 'GGS_lexicalAttributeInputArgumentAST'             *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalAttributeInputArgumentAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalAttributeInputArgumentAST : public GGS_lexicalRoutineOrFunctionFormalInputArgumentAST {
//--- Default constructor
  public : inline GGS_lexicalAttributeInputArgumentAST (void) :
  GGS_lexicalRoutineOrFunctionFormalInputArgumentAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalAttributeInputArgumentAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalAttributeInputArgumentAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalAttributeInputArgumentAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalAttributeInputArgumentAST constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalAttributeInputArgumentAST * getPtr (void) const {
    return (cPtr_lexicalAttributeInputArgumentAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mAttributeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalAttributeInputArgumentAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalAttributeInputArgumentAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalAttributeInputArgumentAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalAttributeInputArgumentAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalAttributeInputArgumentAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//           GALGAS class 'GGS_lexicalCharacterInputArgumentAST'             *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalCharacterInputArgumentAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalCharacterInputArgumentAST : public GGS_lexicalRoutineOrFunctionFormalInputArgumentAST {
//--- Default constructor
  public : inline GGS_lexicalCharacterInputArgumentAST (void) :
  GGS_lexicalRoutineOrFunctionFormalInputArgumentAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalCharacterInputArgumentAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalCharacterInputArgumentAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalCharacterInputArgumentAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalCharacterInputArgumentAST constructor_new (C_Compiler & inLexique,
                                const GGS_lchar & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalCharacterInputArgumentAST * getPtr (void) const {
    return (cPtr_lexicalCharacterInputArgumentAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lchar  reader_mCharacter (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalCharacterInputArgumentAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalCharacterInputArgumentAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalCharacterInputArgumentAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalCharacterInputArgumentAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalCharacterInputArgumentAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_lexicalUnsignedInputArgumentAST'             *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalUnsignedInputArgumentAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalUnsignedInputArgumentAST : public GGS_lexicalRoutineOrFunctionFormalInputArgumentAST {
//--- Default constructor
  public : inline GGS_lexicalUnsignedInputArgumentAST (void) :
  GGS_lexicalRoutineOrFunctionFormalInputArgumentAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalUnsignedInputArgumentAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalUnsignedInputArgumentAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalUnsignedInputArgumentAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalUnsignedInputArgumentAST constructor_new (C_Compiler & inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalUnsignedInputArgumentAST * getPtr (void) const {
    return (cPtr_lexicalUnsignedInputArgumentAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint  reader_mUnsigned (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalUnsignedInputArgumentAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalUnsignedInputArgumentAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalUnsignedInputArgumentAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalUnsignedInputArgumentAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalUnsignedInputArgumentAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//        GALGAS class 'GGS_lexicalCurrentCharacterInputArgumentAST'         *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalCurrentCharacterInputArgumentAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalCurrentCharacterInputArgumentAST : public GGS_lexicalRoutineOrFunctionFormalInputArgumentAST {
//--- Default constructor
  public : inline GGS_lexicalCurrentCharacterInputArgumentAST (void) :
  GGS_lexicalRoutineOrFunctionFormalInputArgumentAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalCurrentCharacterInputArgumentAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalCurrentCharacterInputArgumentAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalCurrentCharacterInputArgumentAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalCurrentCharacterInputArgumentAST constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalCurrentCharacterInputArgumentAST * getPtr (void) const {
    return (cPtr_lexicalCurrentCharacterInputArgumentAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalCurrentCharacterInputArgumentAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalCurrentCharacterInputArgumentAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalCurrentCharacterInputArgumentAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalCurrentCharacterInputArgumentAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalCurrentCharacterInputArgumentAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_lexicalFunctionInputArgumentAST'             *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalFunctionInputArgumentAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalFunctionInputArgumentAST : public GGS_lexicalRoutineOrFunctionFormalInputArgumentAST {
//--- Default constructor
  public : inline GGS_lexicalFunctionInputArgumentAST (void) :
  GGS_lexicalRoutineOrFunctionFormalInputArgumentAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalFunctionInputArgumentAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalFunctionInputArgumentAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalFunctionInputArgumentAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalFunctionInputArgumentAST constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lexicalFunctionCallActualArgumentListAST & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalFunctionInputArgumentAST * getPtr (void) const {
    return (cPtr_lexicalFunctionInputArgumentAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mFunctionName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lexicalFunctionCallActualArgumentListAST  reader_mFunctionActualArgumentList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalFunctionInputArgumentAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalFunctionInputArgumentAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalFunctionInputArgumentAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalFunctionInputArgumentAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalFunctionInputArgumentAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_lexicalDropInstructionAST'                *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalDropInstructionAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalDropInstructionAST : public GGS_lexicalInstructionAST {
//--- Default constructor
  public : inline GGS_lexicalDropInstructionAST (void) :
  GGS_lexicalInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalDropInstructionAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalDropInstructionAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalDropInstructionAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalDropInstructionAST constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalDropInstructionAST * getPtr (void) const {
    return (cPtr_lexicalDropInstructionAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTerminalName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalDropInstructionAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalDropInstructionAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalDropInstructionAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalDropInstructionAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalDropInstructionAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_lexicalErrorInstructionAST'                *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalErrorInstructionAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalErrorInstructionAST : public GGS_lexicalInstructionAST {
//--- Default constructor
  public : inline GGS_lexicalErrorInstructionAST (void) :
  GGS_lexicalInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalErrorInstructionAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalErrorInstructionAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalErrorInstructionAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalErrorInstructionAST constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalErrorInstructionAST * getPtr (void) const {
    return (cPtr_lexicalErrorInstructionAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mErrorMessageName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalErrorInstructionAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalErrorInstructionAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalErrorInstructionAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalErrorInstructionAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalErrorInstructionAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_lexicalWarningInstructionAST'               *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalWarningInstructionAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalWarningInstructionAST : public GGS_lexicalInstructionAST {
//--- Default constructor
  public : inline GGS_lexicalWarningInstructionAST (void) :
  GGS_lexicalInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalWarningInstructionAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalWarningInstructionAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalWarningInstructionAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalWarningInstructionAST constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalWarningInstructionAST * getPtr (void) const {
    return (cPtr_lexicalWarningInstructionAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mWarningMessageName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalWarningInstructionAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalWarningInstructionAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalWarningInstructionAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalWarningInstructionAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalWarningInstructionAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_lexicalTagInstructionAST'                 *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalTagInstructionAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalTagInstructionAST : public GGS_lexicalInstructionAST {
//--- Default constructor
  public : inline GGS_lexicalTagInstructionAST (void) :
  GGS_lexicalInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalTagInstructionAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalTagInstructionAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalTagInstructionAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalTagInstructionAST constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalTagInstructionAST * getPtr (void) const {
    return (cPtr_lexicalTagInstructionAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mLexicalTagName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalTagInstructionAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalTagInstructionAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalTagInstructionAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalTagInstructionAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalTagInstructionAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_lexicalRewindInstructionAST'               *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalRewindInstructionAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalRewindInstructionAST : public GGS_lexicalInstructionAST {
//--- Default constructor
  public : inline GGS_lexicalRewindInstructionAST (void) :
  GGS_lexicalInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalRewindInstructionAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalRewindInstructionAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalRewindInstructionAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalRewindInstructionAST constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalRewindInstructionAST * getPtr (void) const {
    return (cPtr_lexicalRewindInstructionAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mLexicalTagName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mTerminalName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalRewindInstructionAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalRewindInstructionAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalRewindInstructionAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalRewindInstructionAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalRewindInstructionAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_lexicalLogInstructionAST'                 *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalLogInstructionAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalLogInstructionAST : public GGS_lexicalInstructionAST {
//--- Default constructor
  public : inline GGS_lexicalLogInstructionAST (void) :
  GGS_lexicalInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_lexicalLogInstructionAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexicalLogInstructionAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexicalLogInstructionAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexicalLogInstructionAST constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexicalLogInstructionAST * getPtr (void) const {
    return (cPtr_lexicalLogInstructionAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalLogInstructionAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalLogInstructionAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexicalLogInstructionAST *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalLogInstructionAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__lexicalLogInstructionAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Class for 'lexicalArgumentModeAST' Enumeration               *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalArgumentModeAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalArgumentModeAST : public GGS__root {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_lexicalInputMode, enum_lexicalInputOutputMode} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_lexicalArgumentModeAST (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_lexicalArgumentModeAST (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline PMUInt16 bitCount (void) { return 2 ; }

//--- Is built ?
  public : bool isBuilt (void) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalArgumentModeAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--- Construction from GALGAS constructor
  public : static inline GGS_lexicalArgumentModeAST  constructor_lexicalInputMode (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_lexicalArgumentModeAST (enum_lexicalInputMode) ;
  }
  public : static inline GGS_lexicalArgumentModeAST  constructor_lexicalInputOutputMode (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_lexicalArgumentModeAST (enum_lexicalInputOutputMode) ;
  }

//--- Readers
  public : GGS_string reader_lexicalFormalModeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_cppConstInFormalArgument (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_cppReferenceInFormalArgument (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_cocoaPointerInFormalArgument (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- 'description' reader
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void drop (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool operator_isEqual (const GGS_lexicalArgumentModeAST inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_lexicalArgumentModeAST inOperand) const ;
  public : GGS_bool operator_infOrEqual (const GGS_lexicalArgumentModeAST inOperand) const ;
  public : GGS_bool operator_supOrEqual (const GGS_lexicalArgumentModeAST inOperand) const ;
  public : GGS_bool operator_strictInf (const GGS_lexicalArgumentModeAST inOperand) const ;
  public : GGS_bool operator_strictSup (const GGS_lexicalArgumentModeAST inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            list '@lexicalExternRoutineFormalArgumentListAST'              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalExternRoutineFormalArgumentListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalExternRoutineFormalArgumentListAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalExternRoutineFormalArgumentListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_lexicalExternRoutineFormalArgumentListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_lexicalExternRoutineFormalArgumentListAST constructor_emptyList (void) ;
  public : static GGS_lexicalExternRoutineFormalArgumentListAST constructor_listWithValue (const GGS_lexicalArgumentModeAST& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_lexicalExternRoutineFormalArgumentListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_lexicalExternRoutineFormalArgumentListAST
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_lexicalExternRoutineFormalArgumentListAST
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_lexicalExternRoutineFormalArgumentListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lexicalArgumentModeAST& _out_0,
                              GGS_lstring & _out_1,
                              GGS_lstring & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lexicalArgumentModeAST& _out_0,
                             GGS_lstring & _out_1,
                             GGS_lstring & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lexicalArgumentModeAST& _out_0,
                                GGS_lstring & _out_1,
                                GGS_lstring & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lexicalArgumentModeAST& _out_0,
                                 GGS_lstring & _out_1,
                                 GGS_lstring & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_lexicalExternRoutineFormalArgumentListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lexicalArgumentModeAST& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_lexicalExternRoutineFormalArgumentListAST operator_concat (const GGS_lexicalExternRoutineFormalArgumentListAST & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lexicalArgumentModeAST& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lexicalArgumentModeAST& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lexicalArgumentModeAST& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lexicalArgumentModeAST
  reader_mPassingModeAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mLexicalTypeNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mFormalArgumentNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMPassingModeAtIndex (C_Compiler & inLexique,
                              const GGS_lexicalArgumentModeAST & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMLexicalTypeNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMFormalArgumentNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalExternRoutineFormalArgumentListAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_lexicalExternRoutineFormalArgumentListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lexicalArgumentModeAST  & _mPassingMode (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mLexicalTypeName (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mFormalArgumentName (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@externRoutineListAST'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_externRoutineListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_externRoutineListAST ;

//---------------------------------------------------------------------------*

class GGS_externRoutineListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_externRoutineListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_externRoutineListAST constructor_emptyList (void) ;
  public : static GGS_externRoutineListAST constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_lexicalExternRoutineFormalArgumentListAST & argument_1,
                                const GGS_stringlist & argument_2) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_externRoutineListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_externRoutineListAST
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_externRoutineListAST
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_externRoutineListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_lexicalExternRoutineFormalArgumentListAST & _out_1,
                              GGS_stringlist & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_lexicalExternRoutineFormalArgumentListAST & _out_1,
                             GGS_stringlist & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_lexicalExternRoutineFormalArgumentListAST & _out_1,
                                GGS_stringlist & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lexicalExternRoutineFormalArgumentListAST & _out_1,
                                 GGS_stringlist & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_externRoutineListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lexicalExternRoutineFormalArgumentListAST & argument_1,
                                const GGS_stringlist & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_externRoutineListAST operator_concat (const GGS_externRoutineListAST & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lexicalExternRoutineFormalArgumentListAST & argument_1,
                                const GGS_stringlist & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lexicalExternRoutineFormalArgumentListAST & argument_1,
                                const GGS_stringlist & argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lexicalExternRoutineFormalArgumentListAST & argument_1,
                                const GGS_stringlist & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mRoutineNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lexicalExternRoutineFormalArgumentListAST 
  reader_mLexicalRoutineFormalArgumentListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_stringlist 
  reader_mErrorMessageListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMRoutineNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMLexicalRoutineFormalArgumentListAtIndex (C_Compiler & inLexique,
                              const GGS_lexicalExternRoutineFormalArgumentListAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMErrorMessageListAtIndex (C_Compiler & inLexique,
                              const GGS_stringlist  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_externRoutineListAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_externRoutineListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mRoutineName (LOCATION_ARGS) const ;
    public : /* const */ GGS_lexicalExternRoutineFormalArgumentListAST   & _mLexicalRoutineFormalArgumentList (LOCATION_ARGS) const ;
    public : /* const */ GGS_stringlist   & _mErrorMessageList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            list '@lexicalExternFunctionFormalArgumentListAST'             *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalExternFunctionFormalArgumentListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexicalExternFunctionFormalArgumentListAST ;

//---------------------------------------------------------------------------*

class GGS_lexicalExternFunctionFormalArgumentListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_lexicalExternFunctionFormalArgumentListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_lexicalExternFunctionFormalArgumentListAST constructor_emptyList (void) ;
  public : static GGS_lexicalExternFunctionFormalArgumentListAST constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_lexicalExternFunctionFormalArgumentListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_lexicalExternFunctionFormalArgumentListAST
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_lexicalExternFunctionFormalArgumentListAST
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_lexicalExternFunctionFormalArgumentListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_lstring & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_lstring & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_lstring & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lstring & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_lexicalExternFunctionFormalArgumentListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_lexicalExternFunctionFormalArgumentListAST operator_concat (const GGS_lexicalExternFunctionFormalArgumentListAST & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mLexicalTypeNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mFormalArgumentNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMLexicalTypeNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMFormalArgumentNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexicalExternFunctionFormalArgumentListAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_lexicalExternFunctionFormalArgumentListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mLexicalTypeName (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mFormalArgumentName (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@externFunctionListAST'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_externFunctionListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_externFunctionListAST ;

//---------------------------------------------------------------------------*

class GGS_externFunctionListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_externFunctionListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_externFunctionListAST constructor_emptyList (void) ;
  public : static GGS_externFunctionListAST constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_lexicalExternFunctionFormalArgumentListAST & argument_1,
                                const GGS_lstring & argument_2) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_externFunctionListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_externFunctionListAST
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_externFunctionListAST
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_externFunctionListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_lexicalExternFunctionFormalArgumentListAST & _out_1,
                              GGS_lstring & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_lexicalExternFunctionFormalArgumentListAST & _out_1,
                             GGS_lstring & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_lexicalExternFunctionFormalArgumentListAST & _out_1,
                                GGS_lstring & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lexicalExternFunctionFormalArgumentListAST & _out_1,
                                 GGS_lstring & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_externFunctionListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lexicalExternFunctionFormalArgumentListAST & argument_1,
                                const GGS_lstring & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_externFunctionListAST operator_concat (const GGS_externFunctionListAST & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lexicalExternFunctionFormalArgumentListAST & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lexicalExternFunctionFormalArgumentListAST & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lexicalExternFunctionFormalArgumentListAST & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mFunctionNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lexicalExternFunctionFormalArgumentListAST 
  reader_mLexicalFunctionFormalArgumentListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mReturnedTypeNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMFunctionNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMLexicalFunctionFormalArgumentListAtIndex (C_Compiler & inLexique,
                              const GGS_lexicalExternFunctionFormalArgumentListAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMReturnedTypeNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_externFunctionListAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_externFunctionListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mFunctionName (LOCATION_ARGS) const ;
    public : /* const */ GGS_lexicalExternFunctionFormalArgumentListAST   & _mLexicalFunctionFormalArgumentList (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mReturnedTypeName (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_lexiqueComponentAST'                   *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_lexiqueComponentAST ;

//---------------------------------------------------------------------------*

class GGS_lexiqueComponentAST : public AC_GGS_class {
//--- Default constructor
  public : inline GGS_lexiqueComponentAST (void) :
  AC_GGS_class () {}

//--- Pointer assignment constructor
  public : GGS_lexiqueComponentAST (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lexiqueComponentAST (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lexiqueComponentAST
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lexiqueComponentAST constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_bool& argument_1,
                                const GGS_metamodelTemplateDelimitorListAST & argument_2,
                                const GGS_templateReplacementListAST & argument_3,
                                const GGS_lexicalAttributeListAST & argument_4,
                                const GGS_lexicalStyleListAST & argument_5,
                                const GGS_terminalDeclarationListAST & argument_6,
                                const GGS_lexicalMessageDeclarationListAST & argument_7,
                                const GGS_lexicalListDeclarationListAST & argument_8,
                                const GGS_lexicalRuleListAST & argument_9,
                                const GGS_externRoutineListAST & argument_10,
                                const GGS_externFunctionListAST & argument_11
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lexiqueComponentAST * getPtr (void) const {
    return (cPtr_lexiqueComponentAST *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mLexiqueComponentName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_metamodelTemplateDelimitorListAST  reader_mTemplateDelimitorList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_templateReplacementListAST  reader_mTemplateReplacementList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lexicalAttributeListAST  reader_mLexicalAttributeList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lexicalStyleListAST  reader_mLexicalStyleList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_terminalDeclarationListAST  reader_mTerminalDeclarationList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lexicalMessageDeclarationListAST  reader_mLexicalMessageDeclarationList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lexicalListDeclarationListAST  reader_mLexicalListDeclarationList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lexicalRuleListAST  reader_mLexicalRuleList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_externRoutineListAST  reader_mExternRoutineList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_externFunctionListAST  reader_mExternFunctionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexiqueComponentAST * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexiqueComponentAST * operator () (LOCATION_ARGS) const {
      return (cPtr_lexiqueComponentAST *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformationEX * galgasObjectRunTimeInfo (void) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_lexiqueComponentAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformationEX gClassInfoFor__lexiqueComponentAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_lexicalExpressionAST'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalExpressionAST : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_lexicalExpressionAST (LOCATION_ARGS) ;

//--- Attributes
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_lexicalInstructionAST'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalInstructionAST : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_lexicalInstructionAST (LOCATION_ARGS) ;

//--- Attributes
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@lexicalInstructionListAST'                *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalInstructionListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lexicalInstructionAST  mInstruction ;
//--- Constructor
  public : elementOf_GGS_lexicalInstructionListAST (const GGS_lexicalInstructionAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_lexicalInstructionListAST * nextObject (void) const { return (elementOf_GGS_lexicalInstructionListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_lexicalInstructionListAST * previousObject (void) const { return (elementOf_GGS_lexicalInstructionListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_lexicalInstructionListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Element of list '@metamodelTemplateDelimitorListAST'            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_metamodelTemplateDelimitorListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lstring  mStartString ;
  public : GGS_lstringlist  mOptionList ;
  public : GGS_lstring  mEndString ;
//--- Constructor
  public : elementOf_GGS_metamodelTemplateDelimitorListAST (const GGS_lstring & ,
                                const GGS_lstringlist & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_metamodelTemplateDelimitorListAST * nextObject (void) const { return (elementOf_GGS_metamodelTemplateDelimitorListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_metamodelTemplateDelimitorListAST * previousObject (void) const { return (elementOf_GGS_metamodelTemplateDelimitorListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_metamodelTemplateDelimitorListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@templateReplacementListAST'                *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_templateReplacementListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lstring  mMatchString ;
  public : GGS_lstring  mReplacementString ;
  public : GGS_lstring  mReplacementFunction ;
//--- Constructor
  public : elementOf_GGS_templateReplacementListAST (const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_templateReplacementListAST * nextObject (void) const { return (elementOf_GGS_templateReplacementListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_templateReplacementListAST * previousObject (void) const { return (elementOf_GGS_templateReplacementListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_templateReplacementListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_abstractLexicalRuleAST'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_abstractLexicalRuleAST : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_abstractLexicalRuleAST (LOCATION_ARGS) ;

//--- Attributes
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@lexicalRuleListAST'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalRuleListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_abstractLexicalRuleAST  mLexicalRule ;
//--- Constructor
  public : elementOf_GGS_lexicalRuleListAST (const GGS_abstractLexicalRuleAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_lexicalRuleListAST * nextObject (void) const { return (elementOf_GGS_lexicalRuleListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_lexicalRuleListAST * previousObject (void) const { return (elementOf_GGS_lexicalRuleListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_lexicalRuleListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_lexicalImplicitRuleAST'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalImplicitRuleAST : public cPtr_abstractLexicalRuleAST {
  private : typedef cPtr_abstractLexicalRuleAST inherited ;
//--- Constructor
  public : cPtr_lexicalImplicitRuleAST (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mListName ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_lexicalExplicitRuleAST'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalExplicitRuleAST : public cPtr_abstractLexicalRuleAST {
  private : typedef cPtr_abstractLexicalRuleAST inherited ;
//--- Constructor
  public : cPtr_lexicalExplicitRuleAST (const GGS_lexicalExpressionAST & ,
                                const GGS_lexicalInstructionListAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lexicalExpressionAST  mLexicalRuleExpression ;
  public : GGS_lexicalInstructionListAST  mInstructionList ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Element of list '@lexicalMessageDeclarationListAST'             *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalMessageDeclarationListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lstring  mMessageName ;
  public : GGS_lstring  mMessageValue ;
//--- Constructor
  public : elementOf_GGS_lexicalMessageDeclarationListAST (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_lexicalMessageDeclarationListAST * nextObject (void) const { return (elementOf_GGS_lexicalMessageDeclarationListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_lexicalMessageDeclarationListAST * previousObject (void) const { return (elementOf_GGS_lexicalMessageDeclarationListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_lexicalMessageDeclarationListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@lexicalAttributeListAST'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalAttributeListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lstring  mTypeName ;
  public : GGS_lstring  mName ;
//--- Constructor
  public : elementOf_GGS_lexicalAttributeListAST (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_lexicalAttributeListAST * nextObject (void) const { return (elementOf_GGS_lexicalAttributeListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_lexicalAttributeListAST * previousObject (void) const { return (elementOf_GGS_lexicalAttributeListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_lexicalAttributeListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@lexicalStyleListAST'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalStyleListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lstring  mName ;
  public : GGS_lstring  mComment ;
//--- Constructor
  public : elementOf_GGS_lexicalStyleListAST (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_lexicalStyleListAST * nextObject (void) const { return (elementOf_GGS_lexicalStyleListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_lexicalStyleListAST * previousObject (void) const { return (elementOf_GGS_lexicalStyleListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_lexicalStyleListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@terminalDeclarationListAST'                *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_terminalDeclarationListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lstring  mName ;
  public : GGS_lstringlist  mSentAttributeList ;
  public : GGS_lstring  mSyntaxErrorMessage ;
  public : GGS_lstring  mStyle ;
  public : GGS_lstringlist  mOptionList ;
//--- Constructor
  public : elementOf_GGS_terminalDeclarationListAST (const GGS_lstring & ,
                                const GGS_lstringlist & ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_lstringlist & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_terminalDeclarationListAST * nextObject (void) const { return (elementOf_GGS_terminalDeclarationListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_terminalDeclarationListAST * previousObject (void) const { return (elementOf_GGS_terminalDeclarationListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_terminalDeclarationListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@lexicalListEntryListAST'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalListEntryListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lstring  mEntrySpelling ;
  public : GGS_lstring  mTerminalSpelling ;
  public : GGS_lstringlist  mFeatureList ;
//--- Constructor
  public : elementOf_GGS_lexicalListEntryListAST (const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_lstringlist & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_lexicalListEntryListAST * nextObject (void) const { return (elementOf_GGS_lexicalListEntryListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_lexicalListEntryListAST * previousObject (void) const { return (elementOf_GGS_lexicalListEntryListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_lexicalListEntryListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@lexicalListDeclarationListAST'              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalListDeclarationListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lstring  mName ;
  public : GGS_lstring  mStyle ;
  public : GGS_lstring  mSyntaxErrorMessage ;
  public : GGS_lstringlist  mSentAttributeList ;
  public : GGS_lexicalListEntryListAST  mEntryList ;
//--- Constructor
  public : elementOf_GGS_lexicalListDeclarationListAST (const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_lstringlist & ,
                                const GGS_lexicalListEntryListAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_lexicalListDeclarationListAST * nextObject (void) const { return (elementOf_GGS_lexicalListDeclarationListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_lexicalListDeclarationListAST * previousObject (void) const { return (elementOf_GGS_lexicalListDeclarationListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_lexicalListDeclarationListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_lexicalOrExpressionAST'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalOrExpressionAST : public cPtr_lexicalExpressionAST {
  private : typedef cPtr_lexicalExpressionAST inherited ;
//--- Constructor
  public : cPtr_lexicalOrExpressionAST (const GGS_lexicalExpressionAST & ,
                                const GGS_lexicalExpressionAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lexicalExpressionAST  mLeftOperand ;
  public : GGS_lexicalExpressionAST  mRightOperand ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            abstract class 'cPtr_lexicalCharacterSetMatchAST'              *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalCharacterSetMatchAST : public cPtr_lexicalExpressionAST {
  private : typedef cPtr_lexicalExpressionAST inherited ;
//--- Constructor
  public : cPtr_lexicalCharacterSetMatchAST (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mCharacterSetName ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_lexicalCharacterMatchAST'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalCharacterMatchAST : public cPtr_lexicalExpressionAST {
  private : typedef cPtr_lexicalExpressionAST inherited ;
//--- Constructor
  public : cPtr_lexicalCharacterMatchAST (const GGS_lchar & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lchar  mCharacter ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          abstract class 'cPtr_lexicalCharacterIntervalMatchAST'           *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalCharacterIntervalMatchAST : public cPtr_lexicalExpressionAST {
  private : typedef cPtr_lexicalExpressionAST inherited ;
//--- Constructor
  public : cPtr_lexicalCharacterIntervalMatchAST (const GGS_lchar & ,
                                const GGS_lchar & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lchar  mLowerBound ;
  public : GGS_lchar  mUpperBound ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_lexicalStringMatchAST'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalStringMatchAST : public cPtr_lexicalExpressionAST {
  private : typedef cPtr_lexicalExpressionAST inherited ;
//--- Constructor
  public : cPtr_lexicalStringMatchAST (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mString ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_lexicalStringNotMatchAST'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalStringNotMatchAST : public cPtr_lexicalExpressionAST {
  private : typedef cPtr_lexicalExpressionAST inherited ;
//--- Constructor
  public : cPtr_lexicalStringNotMatchAST (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mString ;
  public : GGS_lstring  mErrorMessage ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@lexicalSendSearchListAST'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalSendSearchListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lstring  mAttributeName ;
  public : GGS_lstring  mSearchListName ;
//--- Constructor
  public : elementOf_GGS_lexicalSendSearchListAST (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_lexicalSendSearchListAST * nextObject (void) const { return (elementOf_GGS_lexicalSendSearchListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_lexicalSendSearchListAST * previousObject (void) const { return (elementOf_GGS_lexicalSendSearchListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_lexicalSendSearchListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            abstract class 'cPtr_lexicalSendDefaultActionAST'              *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalSendDefaultActionAST : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_lexicalSendDefaultActionAST (LOCATION_ARGS) ;

//--- Attributes
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//        abstract class 'cPtr_lexicalStructuredSendInstructionAST'          *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalStructuredSendInstructionAST : public cPtr_lexicalInstructionAST {
  private : typedef cPtr_lexicalInstructionAST inherited ;
//--- Constructor
  public : cPtr_lexicalStructuredSendInstructionAST (const GGS_lexicalSendSearchListAST & ,
                                const GGS_lexicalSendDefaultActionAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lexicalSendSearchListAST  mLexicalSendSearchList ;
  public : GGS_lexicalSendDefaultActionAST  mLexicalSendDefaultAction ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          abstract class 'cPtr_lexicalSimpleSendInstructionAST'            *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalSimpleSendInstructionAST : public cPtr_lexicalInstructionAST {
  private : typedef cPtr_lexicalInstructionAST inherited ;
//--- Constructor
  public : cPtr_lexicalSimpleSendInstructionAST (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mSentTerminal ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          abstract class 'cPtr_lexicalSendTerminalByDefaultAST'            *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalSendTerminalByDefaultAST : public cPtr_lexicalSendDefaultActionAST {
  private : typedef cPtr_lexicalSendDefaultActionAST inherited ;
//--- Constructor
  public : cPtr_lexicalSendTerminalByDefaultAST (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mDefaultSentTerminal ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_lexicalErrorByDefaultAST'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalErrorByDefaultAST : public cPtr_lexicalSendDefaultActionAST {
  private : typedef cPtr_lexicalSendDefaultActionAST inherited ;
//--- Constructor
  public : cPtr_lexicalErrorByDefaultAST (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mDefaultErrorMessageName ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@lexicalWhileBranchListAST'                *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalWhileBranchListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lexicalExpressionAST  mWhileExpression ;
  public : GGS_lexicalInstructionListAST  mWhileInstructionList ;
//--- Constructor
  public : elementOf_GGS_lexicalWhileBranchListAST (const GGS_lexicalExpressionAST & ,
                                const GGS_lexicalInstructionListAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_lexicalWhileBranchListAST * nextObject (void) const { return (elementOf_GGS_lexicalWhileBranchListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_lexicalWhileBranchListAST * previousObject (void) const { return (elementOf_GGS_lexicalWhileBranchListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_lexicalWhileBranchListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            abstract class 'cPtr_lexicalRepeatInstructionAST'              *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalRepeatInstructionAST : public cPtr_lexicalInstructionAST {
  private : typedef cPtr_lexicalInstructionAST inherited ;
//--- Constructor
  public : cPtr_lexicalRepeatInstructionAST (const GGS_lexicalInstructionListAST & ,
                                const GGS_lexicalWhileBranchListAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lexicalInstructionListAST  mRepeatedInstructionList ;
  public : GGS_lexicalWhileBranchListAST  mLexicalWhileBranchList ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@lexicalSelectBranchListAST'                *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalSelectBranchListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lexicalExpressionAST  mSelectExpression ;
  public : GGS_lexicalInstructionListAST  mSelectInstructionList ;
//--- Constructor
  public : elementOf_GGS_lexicalSelectBranchListAST (const GGS_lexicalExpressionAST & ,
                                const GGS_lexicalInstructionListAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_lexicalSelectBranchListAST * nextObject (void) const { return (elementOf_GGS_lexicalSelectBranchListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_lexicalSelectBranchListAST * previousObject (void) const { return (elementOf_GGS_lexicalSelectBranchListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_lexicalSelectBranchListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            abstract class 'cPtr_lexicalSelectInstructionAST'              *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalSelectInstructionAST : public cPtr_lexicalInstructionAST {
  private : typedef cPtr_lexicalInstructionAST inherited ;
//--- Constructor
  public : cPtr_lexicalSelectInstructionAST (const GGS_lexicalSelectBranchListAST & ,
                                const GGS_lexicalInstructionListAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lexicalSelectBranchListAST  mLexicalSelectBranchList ;
  public : GGS_lexicalInstructionListAST  mDefaultInstructionList ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//      abstract class 'cPtr_abstractLexicalRoutineActualArgumentAST'        *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_abstractLexicalRoutineActualArgumentAST : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_abstractLexicalRoutineActualArgumentAST (const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_location  mActualPassingModeLocation ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//        Element of list '@lexicalRoutineCallActualArgumentListAST'         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalRoutineCallActualArgumentListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_abstractLexicalRoutineActualArgumentAST  mLexicalRoutineActualArgument ;
//--- Constructor
  public : elementOf_GGS_lexicalRoutineCallActualArgumentListAST (const GGS_abstractLexicalRoutineActualArgumentAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_lexicalRoutineCallActualArgumentListAST * nextObject (void) const { return (elementOf_GGS_lexicalRoutineCallActualArgumentListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_lexicalRoutineCallActualArgumentListAST * previousObject (void) const { return (elementOf_GGS_lexicalRoutineCallActualArgumentListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_lexicalRoutineCallActualArgumentListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            abstract class 'cPtr_lexicalRoutineInstructionAST'             *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalRoutineInstructionAST : public cPtr_lexicalInstructionAST {
  private : typedef cPtr_lexicalInstructionAST inherited ;
//--- Constructor
  public : cPtr_lexicalRoutineInstructionAST (const GGS_lstring & ,
                                const GGS_lexicalRoutineCallActualArgumentListAST & ,
                                const GGS_lstringlist & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mRoutineName ;
  public : GGS_lexicalRoutineCallActualArgumentListAST  mActualArgumentList ;
  public : GGS_lstringlist  mErrorMessageList ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//       abstract class 'cPtr_lexicalAttributeInputOutputArgumentAST'        *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalAttributeInputOutputArgumentAST : public cPtr_abstractLexicalRoutineActualArgumentAST {
  private : typedef cPtr_abstractLexicalRoutineActualArgumentAST inherited ;
//--- Constructor
  public : cPtr_lexicalAttributeInputOutputArgumentAST (const GGS_location & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mAttributeName ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//   abstract class 'cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST'    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST (LOCATION_ARGS) ;

//--- Attributes
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//           abstract class 'cPtr_lexicalFormalInputArgumentAST'             *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalFormalInputArgumentAST : public cPtr_abstractLexicalRoutineActualArgumentAST {
  private : typedef cPtr_abstractLexicalRoutineActualArgumentAST inherited ;
//--- Constructor
  public : cPtr_lexicalFormalInputArgumentAST (const GGS_location & ,
                                const GGS_lexicalRoutineOrFunctionFormalInputArgumentAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lexicalRoutineOrFunctionFormalInputArgumentAST  mRoutineOrFunctionFormalInputArgument ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//       Element of list '@lexicalFunctionCallActualArgumentListAST'         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalFunctionCallActualArgumentListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lexicalRoutineOrFunctionFormalInputArgumentAST  mLexicalActualInputArgument ;
//--- Constructor
  public : elementOf_GGS_lexicalFunctionCallActualArgumentListAST (const GGS_lexicalRoutineOrFunctionFormalInputArgumentAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_lexicalFunctionCallActualArgumentListAST * nextObject (void) const { return (elementOf_GGS_lexicalFunctionCallActualArgumentListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_lexicalFunctionCallActualArgumentListAST * previousObject (void) const { return (elementOf_GGS_lexicalFunctionCallActualArgumentListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_lexicalFunctionCallActualArgumentListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          abstract class 'cPtr_lexicalAttributeInputArgumentAST'           *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalAttributeInputArgumentAST : public cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST {
  private : typedef cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST inherited ;
//--- Constructor
  public : cPtr_lexicalAttributeInputArgumentAST (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mAttributeName ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          abstract class 'cPtr_lexicalCharacterInputArgumentAST'           *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalCharacterInputArgumentAST : public cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST {
  private : typedef cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST inherited ;
//--- Constructor
  public : cPtr_lexicalCharacterInputArgumentAST (const GGS_lchar & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lchar  mCharacter ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          abstract class 'cPtr_lexicalUnsignedInputArgumentAST'            *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalUnsignedInputArgumentAST : public cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST {
  private : typedef cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST inherited ;
//--- Constructor
  public : cPtr_lexicalUnsignedInputArgumentAST (const GGS_luint & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_luint  mUnsigned ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//      abstract class 'cPtr_lexicalCurrentCharacterInputArgumentAST'        *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalCurrentCharacterInputArgumentAST : public cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST {
  private : typedef cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST inherited ;
//--- Constructor
  public : cPtr_lexicalCurrentCharacterInputArgumentAST (const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_location  mLocation ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          abstract class 'cPtr_lexicalFunctionInputArgumentAST'            *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalFunctionInputArgumentAST : public cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST {
  private : typedef cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST inherited ;
//--- Constructor
  public : cPtr_lexicalFunctionInputArgumentAST (const GGS_lstring & ,
                                const GGS_lexicalFunctionCallActualArgumentListAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mFunctionName ;
  public : GGS_lexicalFunctionCallActualArgumentListAST  mFunctionActualArgumentList ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             abstract class 'cPtr_lexicalDropInstructionAST'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalDropInstructionAST : public cPtr_lexicalInstructionAST {
  private : typedef cPtr_lexicalInstructionAST inherited ;
//--- Constructor
  public : cPtr_lexicalDropInstructionAST (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mTerminalName ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             abstract class 'cPtr_lexicalErrorInstructionAST'              *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalErrorInstructionAST : public cPtr_lexicalInstructionAST {
  private : typedef cPtr_lexicalInstructionAST inherited ;
//--- Constructor
  public : cPtr_lexicalErrorInstructionAST (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mErrorMessageName ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            abstract class 'cPtr_lexicalWarningInstructionAST'             *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalWarningInstructionAST : public cPtr_lexicalInstructionAST {
  private : typedef cPtr_lexicalInstructionAST inherited ;
//--- Constructor
  public : cPtr_lexicalWarningInstructionAST (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mWarningMessageName ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_lexicalTagInstructionAST'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalTagInstructionAST : public cPtr_lexicalInstructionAST {
  private : typedef cPtr_lexicalInstructionAST inherited ;
//--- Constructor
  public : cPtr_lexicalTagInstructionAST (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mLexicalTagName ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            abstract class 'cPtr_lexicalRewindInstructionAST'              *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalRewindInstructionAST : public cPtr_lexicalInstructionAST {
  private : typedef cPtr_lexicalInstructionAST inherited ;
//--- Constructor
  public : cPtr_lexicalRewindInstructionAST (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mLexicalTagName ;
  public : GGS_lstring  mTerminalName ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_lexicalLogInstructionAST'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalLogInstructionAST : public cPtr_lexicalInstructionAST {
  private : typedef cPtr_lexicalInstructionAST inherited ;
//--- Constructor
  public : cPtr_lexicalLogInstructionAST (LOCATION_ARGS) ;

//--- Attributes
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//       Element of list '@lexicalExternRoutineFormalArgumentListAST'        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalExternRoutineFormalArgumentListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lexicalArgumentModeAST mPassingMode ;
  public : GGS_lstring  mLexicalTypeName ;
  public : GGS_lstring  mFormalArgumentName ;
//--- Constructor
  public : elementOf_GGS_lexicalExternRoutineFormalArgumentListAST (const GGS_lexicalArgumentModeAST& ,
                                const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_lexicalExternRoutineFormalArgumentListAST * nextObject (void) const { return (elementOf_GGS_lexicalExternRoutineFormalArgumentListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_lexicalExternRoutineFormalArgumentListAST * previousObject (void) const { return (elementOf_GGS_lexicalExternRoutineFormalArgumentListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_lexicalExternRoutineFormalArgumentListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@externRoutineListAST'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_externRoutineListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lstring  mRoutineName ;
  public : GGS_lexicalExternRoutineFormalArgumentListAST  mLexicalRoutineFormalArgumentList ;
  public : GGS_stringlist  mErrorMessageList ;
//--- Constructor
  public : elementOf_GGS_externRoutineListAST (const GGS_lstring & ,
                                const GGS_lexicalExternRoutineFormalArgumentListAST & ,
                                const GGS_stringlist & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_externRoutineListAST * nextObject (void) const { return (elementOf_GGS_externRoutineListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_externRoutineListAST * previousObject (void) const { return (elementOf_GGS_externRoutineListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_externRoutineListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//      Element of list '@lexicalExternFunctionFormalArgumentListAST'        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalExternFunctionFormalArgumentListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lstring  mLexicalTypeName ;
  public : GGS_lstring  mFormalArgumentName ;
//--- Constructor
  public : elementOf_GGS_lexicalExternFunctionFormalArgumentListAST (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_lexicalExternFunctionFormalArgumentListAST * nextObject (void) const { return (elementOf_GGS_lexicalExternFunctionFormalArgumentListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_lexicalExternFunctionFormalArgumentListAST * previousObject (void) const { return (elementOf_GGS_lexicalExternFunctionFormalArgumentListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_lexicalExternFunctionFormalArgumentListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@externFunctionListAST'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_externFunctionListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lstring  mFunctionName ;
  public : GGS_lexicalExternFunctionFormalArgumentListAST  mLexicalFunctionFormalArgumentList ;
  public : GGS_lstring  mReturnedTypeName ;
//--- Constructor
  public : elementOf_GGS_externFunctionListAST (const GGS_lstring & ,
                                const GGS_lexicalExternFunctionFormalArgumentListAST & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_externFunctionListAST * nextObject (void) const { return (elementOf_GGS_externFunctionListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_externFunctionListAST * previousObject (void) const { return (elementOf_GGS_externFunctionListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_externFunctionListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_lexiqueComponentAST'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexiqueComponentAST : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_lexiqueComponentAST (const GGS_lstring & ,
                                const GGS_bool& ,
                                const GGS_metamodelTemplateDelimitorListAST & ,
                                const GGS_templateReplacementListAST & ,
                                const GGS_lexicalAttributeListAST & ,
                                const GGS_lexicalStyleListAST & ,
                                const GGS_terminalDeclarationListAST & ,
                                const GGS_lexicalMessageDeclarationListAST & ,
                                const GGS_lexicalListDeclarationListAST & ,
                                const GGS_lexicalRuleListAST & ,
                                const GGS_externRoutineListAST & ,
                                const GGS_externFunctionListAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mLexiqueComponentName ;
  public : GGS_bool mIsTemplate ;
  public : GGS_metamodelTemplateDelimitorListAST  mTemplateDelimitorList ;
  public : GGS_templateReplacementListAST  mTemplateReplacementList ;
  public : GGS_lexicalAttributeListAST  mLexicalAttributeList ;
  public : GGS_lexicalStyleListAST  mLexicalStyleList ;
  public : GGS_terminalDeclarationListAST  mTerminalDeclarationList ;
  public : GGS_lexicalMessageDeclarationListAST  mLexicalMessageDeclarationList ;
  public : GGS_lexicalListDeclarationListAST  mLexicalListDeclarationList ;
  public : GGS_lexicalRuleListAST  mLexicalRuleList ;
  public : GGS_externRoutineListAST  mExternRoutineList ;
  public : GGS_externFunctionListAST  mExternFunctionList ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*

#endif
