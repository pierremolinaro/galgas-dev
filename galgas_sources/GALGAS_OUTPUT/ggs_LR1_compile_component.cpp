//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'ggs_LR1_compile_component.cpp'                    *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      march 7th, 2007, at 16h38'48"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "ggs_LR1_compile_component.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  static const char gGGSsourceFile [] = "ggs_LR1_compile_component.ggs" ;
  #define SOURCE_FILE_AT_LINE(line) , gGGSsourceFile, line
#else
  #define SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "galgas_LR1_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LR1_compile_component::
ggs_LR1_compile_component::
pr_galgas_component_ggs_LR1_compile_component_102_6_ (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */,
                                GGS_M_treewalkingComponents  &/* var_cas_ioTreewalkingComponentMap */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  GGS_lstring  var_cas_fileName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_fileName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" SOURCE_FILE_AT_LINE (115)))).isBuiltAndTrue ()) {
    _inLexique.printMessage (((((GGS_string (true, "------ Compile file '")) + (var_cas_fileName.reader_string (_inLexique SOURCE_FILE_AT_LINE (116))))) + (GGS_string (true, "'\n"))) SOURCE_FILE_AT_LINE (116)) ;
  }
  { galgas_scanner * scanner_ = NULL ;
    macroMyNew (scanner_, galgas_scanner (_inLexique.ioParametersPtr () COMMA_HERE)) ;
    scanner_->mPerformGeneration = _inLexique.mPerformGeneration ;
    galgas_LR1_grammar grammar_ ;
    const C_String sourceFileName = _inLexique.sourceFileName ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (var_cas_fileName) ;
    try{
      scanner_->resetAndLoadSourceFromFile (sourceFileName) ;
      grammar_.startParsing_compileFile (*scanner_) ;
    }catch (const C_TextReadException & inFileReadError) {
      var_cas_fileName.signalSemanticError (_inLexique, inFileReadError.what () SOURCE_FILE_AT_LINE (118)) ;
    }
    macroDetachPointer (scanner_, galgas_scanner) ;
  }
}

//---------------------------------------------------------------------------*

void ggs_LR1_compile_component::
ggs_LR1_compile_component::
pr_galgas_component_ggs_LR1_compile_component_102_6_importLexique (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LR1_compile_component::
ggs_LR1_compile_component::
pr_galgas_component_ggs_LR1_compile_component_102_6_importSyntax (galgas_scanner & _inLexique,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */,
                                GGS_M_treewalkingComponents  &/* var_cas_ioTreewalkingComponentMap */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LR1_compile_component::
ggs_LR1_compile_component::
pr_galgas_component_ggs_LR1_compile_component_102_6_importSemantics (galgas_scanner & _inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */,
                                GGS_M_treewalkingComponents  &/* var_cas_ioTreewalkingComponentMap */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LR1_compile_component::
ggs_LR1_compile_component::
pr_galgas_component_ggs_LR1_compile_component_102_6_importGrammarForSemantics (galgas_scanner & _inLexique,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_M_treewalkingComponents  &/* var_cas_ioTreewalkingComponentMap */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LR1_compile_component::
ggs_LR1_compile_component::
pr_galgas_component_ggs_LR1_compile_component_102_6_importOptions (galgas_scanner & _inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'parse_lexique_for_importing'       *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LR1_compile_component::
ggs_LR1_compile_component::
pr_parse_lexique_for_importing_ggs_LR1_compile_component_164_6_ (galgas_scanner & _inLexique,
                                const GGS_lstring  &var_cas_inFileName,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse) {
  { galgas_scanner * scanner_ = NULL ;
    macroMyNew (scanner_, galgas_scanner (_inLexique.ioParametersPtr () COMMA_HERE)) ;
    scanner_->mPerformGeneration = _inLexique.mPerformGeneration ;
    galgas_LR1_grammar grammar_ ;
    const C_String sourceFileName = _inLexique.sourceFileName ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (var_cas_inFileName) ;
    try{
      scanner_->resetAndLoadSourceFromFile (sourceFileName) ;
      grammar_.startParsing_importLexique (*scanner_,
                                  var_cas_ioLexiqueMapForUse) ;
    }catch (const C_TextReadException & inFileReadError) {
      var_cas_inFileName.signalSemanticError (_inLexique, inFileReadError.what () SOURCE_FILE_AT_LINE (168)) ;
    }
    macroDetachPointer (scanner_, galgas_scanner) ;
  }
}

//---------------------------------------------------------------------------*

void ggs_LR1_compile_component::
pr_parse_lexique_for_importing_ggs_LR1_compile_component_164_6_parse (galgas_scanner & /* _inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'parse_syntax_for_importing'       *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LR1_compile_component::
ggs_LR1_compile_component::
pr_parse_syntax_for_importing_ggs_LR1_compile_component_179_6_ (galgas_scanner & _inLexique,
                                const GGS_lstring  &var_cas_inFileName,
                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,
                                GGS_M_metamodelsComponents  &var_cas_ioMetamodelComponentMap,
                                GGS_M_treewalkingComponents  &var_cas_ioTreewalkingComponentMap) {
  { galgas_scanner * scanner_ = NULL ;
    macroMyNew (scanner_, galgas_scanner (_inLexique.ioParametersPtr () COMMA_HERE)) ;
    scanner_->mPerformGeneration = _inLexique.mPerformGeneration ;
    galgas_LR1_grammar grammar_ ;
    const C_String sourceFileName = _inLexique.sourceFileName ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (var_cas_inFileName) ;
    try{
      scanner_->resetAndLoadSourceFromFile (sourceFileName) ;
      grammar_.startParsing_importSyntax (*scanner_,
                                  var_cas_ioSyntaxComponentsMap,
                                  var_cas_ioMetamodelComponentMap,
                                  var_cas_ioTreewalkingComponentMap) ;
    }catch (const C_TextReadException & inFileReadError) {
      var_cas_inFileName.signalSemanticError (_inLexique, inFileReadError.what () SOURCE_FILE_AT_LINE (185)) ;
    }
    macroDetachPointer (scanner_, galgas_scanner) ;
  }
}

//---------------------------------------------------------------------------*

void ggs_LR1_compile_component::
pr_parse_syntax_for_importing_ggs_LR1_compile_component_179_6_parse (galgas_scanner & /* _inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'parse_semantics_component_for_importing'*
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LR1_compile_component::
ggs_LR1_compile_component::
pr_parse_semantics_component_for_importing_ggs_LR1_compile_component_198_6_ (galgas_scanner & _inLexique,
                                const GGS_lstring  &var_cas_inFileName,
                                GGS_M_semanticsComponents  &var_cas_ioSemanticsMapForUse,
                                GGS_M_metamodelsComponents  &var_cas_ioMetamodelComponentMap,
                                GGS_M_treewalkingComponents  &var_cas_ioTreewalkingComponentMap) {
  { galgas_scanner * scanner_ = NULL ;
    macroMyNew (scanner_, galgas_scanner (_inLexique.ioParametersPtr () COMMA_HERE)) ;
    scanner_->mPerformGeneration = _inLexique.mPerformGeneration ;
    galgas_LR1_grammar grammar_ ;
    const C_String sourceFileName = _inLexique.sourceFileName ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (var_cas_inFileName) ;
    try{
      scanner_->resetAndLoadSourceFromFile (sourceFileName) ;
      grammar_.startParsing_importSemantics (*scanner_,
                                  var_cas_ioSemanticsMapForUse,
                                  var_cas_ioMetamodelComponentMap,
                                  var_cas_ioTreewalkingComponentMap) ;
    }catch (const C_TextReadException & inFileReadError) {
      var_cas_inFileName.signalSemanticError (_inLexique, inFileReadError.what () SOURCE_FILE_AT_LINE (204)) ;
    }
    macroDetachPointer (scanner_, galgas_scanner) ;
  }
}

//---------------------------------------------------------------------------*

void ggs_LR1_compile_component::
pr_parse_semantics_component_for_importing_ggs_LR1_compile_component_198_6_parse (galgas_scanner & /* _inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'parse_grammar_component_for_importing'  *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LR1_compile_component::
ggs_LR1_compile_component::
pr_parse_grammar_component_for_importing_ggs_LR1_compile_component_217_6_ (galgas_scanner & _inLexique,
                                const GGS_lstring  &var_cas_inFileName,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_metamodelsComponents  &var_cas_ioMetamodelComponentMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_M_treewalkingComponents  &var_cas_ioTreewalkingComponentMap) {
  { galgas_scanner * scanner_ = NULL ;
    macroMyNew (scanner_, galgas_scanner (_inLexique.ioParametersPtr () COMMA_HERE)) ;
    scanner_->mPerformGeneration = _inLexique.mPerformGeneration ;
    galgas_LR1_grammar grammar_ ;
    const C_String sourceFileName = _inLexique.sourceFileName ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (var_cas_inFileName) ;
    try{
      scanner_->resetAndLoadSourceFromFile (sourceFileName) ;
      grammar_.startParsing_importGrammarForSemantics (*scanner_,
                                  var_cas_ioGrammarComponentsMap,
                                  var_cas_ioMetamodelComponentMap,
                                  var_cas_ioOptionsComponentsMapForUse,
                                  var_cas_ioTreewalkingComponentMap) ;
    }catch (const C_TextReadException & inFileReadError) {
      var_cas_inFileName.signalSemanticError (_inLexique, inFileReadError.what () SOURCE_FILE_AT_LINE (224)) ;
    }
    macroDetachPointer (scanner_, galgas_scanner) ;
  }
}

//---------------------------------------------------------------------------*

void ggs_LR1_compile_component::
pr_parse_grammar_component_for_importing_ggs_LR1_compile_component_217_6_parse (galgas_scanner & /* _inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
// Implementation of production rule 'parse_option_component_for_importing'  *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LR1_compile_component::
ggs_LR1_compile_component::
pr_parse_option_component_for_importing_ggs_LR1_compile_component_238_6_ (galgas_scanner & _inLexique,
                                const GGS_lstring  &var_cas_inFileName,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap) {
  { galgas_scanner * scanner_ = NULL ;
    macroMyNew (scanner_, galgas_scanner (_inLexique.ioParametersPtr () COMMA_HERE)) ;
    scanner_->mPerformGeneration = _inLexique.mPerformGeneration ;
    galgas_LR1_grammar grammar_ ;
    const C_String sourceFileName = _inLexique.sourceFileName ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (var_cas_inFileName) ;
    try{
      scanner_->resetAndLoadSourceFromFile (sourceFileName) ;
      grammar_.startParsing_importOptions (*scanner_,
                                  var_cas_ioOptionsComponentsMap) ;
    }catch (const C_TextReadException & inFileReadError) {
      var_cas_inFileName.signalSemanticError (_inLexique, inFileReadError.what () SOURCE_FILE_AT_LINE (242)) ;
    }
    macroDetachPointer (scanner_, galgas_scanner) ;
  }
}

//---------------------------------------------------------------------------*

void ggs_LR1_compile_component::
pr_parse_option_component_for_importing_ggs_LR1_compile_component_238_6_parse (galgas_scanner & /* _inLexique */) {
}

//---------------------------------------------------------------------------*

