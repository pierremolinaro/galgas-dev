//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'semanticsModelBuilder.cpp'                      *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      april 1st, 2007, at 19h40'53"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "semanticsModelBuilder.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticsModelBuilder.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//   Implementation of production rule 'semantics_component_start_symbol'    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_semanticsComponentRoot semanticsModelBuilder::
semanticsModelBuilder::
pr_semantics_component_start_symbol_semanticsModelBuilder_36_6_ (galgas_scanner & _inLexique) {
  GGS_lstring  var_cas_mSemanticsComponentName ;
  GGS_lstringlist  var_cas_mImportedComponentFileNameList ;
  GGS_semanticDeclarationList  var_cas_mSemanticDeclarationList ;
  var_cas_mSemanticDeclarationList = GGS_semanticDeclarationList::constructor_emptyList (_inLexique COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  _inLexique._assignFromAttribute_tokenString (var_cas_mSemanticsComponentName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  var_cas_mImportedComponentFileNameList = GGS_lstringlist::constructor_emptyList (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_semanticsModelBuilder_0 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
          switch (select_semanticsModelBuilder_1 (_inLexique)) {
            case 1 : {
              GGS_lstring  var_cas_importedComponentFileName ;
              _inLexique._assignFromAttribute_tokenString (var_cas_importedComponentFileName) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
              var_cas_mImportedComponentFileNameList._addAssign_operation (var_cas_importedComponentFileName) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 3 : {
          var_cas_mSemanticDeclarationList._addModel (nt_semantic_declaration_ (_inLexique)) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  GGS_semanticsComponentRoot _entityInstance = GGS_semanticsComponentRoot::constructor_new (_inLexique, var_cas_mSemanticsComponentName, var_cas_mImportedComponentFileNameList, var_cas_mSemanticDeclarationList COMMA_HERE) ;
  return _entityInstance ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'attribute_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_structuredTypeAttribute semanticsModelBuilder::
semanticsModelBuilder::
pr_attribute_declaration_semanticsModelBuilder_72_6_ (galgas_scanner & _inLexique) {
  GGS_lstring  var_cas_mAttributeTypeName ;
  GGS_lstring  var_cas_mAttributeName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_mAttributeTypeName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
  _inLexique._assignFromAttribute_tokenString (var_cas_mAttributeName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  GGS_structuredTypeAttribute _entityInstance = GGS_structuredTypeAttribute::constructor_new (_inLexique, var_cas_mAttributeTypeName, var_cas_mAttributeName COMMA_HERE) ;
  return _entityInstance ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_mapDeclaration semanticsModelBuilder::
semanticsModelBuilder::
pr_semantic_declaration_semanticsModelBuilder_84_6_ (galgas_scanner & _inLexique) {
  GGS_lstring  var_cas_mMapTypeName ;
  GGS_structuredTypeAttributeList  var_cas_mAttributeList ;
  var_cas_mAttributeList = GGS_structuredTypeAttributeList::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_mapMethodList  var_cas_mInsertMethodList ;
  var_cas_mInsertMethodList = GGS_mapMethodList::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_mapMethodList  var_cas_mSearchMethodList ;
  var_cas_mSearchMethodList = GGS_mapMethodList::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_mapMethodList  var_cas_mRemoveMethodList ;
  var_cas_mRemoveMethodList = GGS_mapMethodList::constructor_emptyList (_inLexique COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_map) COMMA_HERE) ;
  _inLexique._assignFromAttribute_tokenString (var_cas_mMapTypeName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B) COMMA_HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_semanticsModelBuilder_2 (_inLexique)) {
        case 2 : {
          var_cas_mAttributeList._addModel (nt_attribute_declaration_ (_inLexique)) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_insert) COMMA_HERE) ;
          var_cas_mInsertMethodList._addModel (nt_map_method_declaration_ (_inLexique)) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
          var_cas_mSearchMethodList._addModel (nt_map_method_declaration_ (_inLexique)) ;
          } break ;
        case 5 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_remove) COMMA_HERE) ;
          var_cas_mRemoveMethodList._addModel (nt_map_method_declaration_ (_inLexique)) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D) COMMA_HERE) ;
  GGS_mapDeclaration _entityInstance = GGS_mapDeclaration::constructor_new (_inLexique, var_cas_mMapTypeName, var_cas_mAttributeList, var_cas_mInsertMethodList, var_cas_mSearchMethodList, var_cas_mRemoveMethodList COMMA_HERE) ;
  return _entityInstance ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'map_method_declaration'         *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_mapMethod semanticsModelBuilder::
semanticsModelBuilder::
pr_map_method_declaration_semanticsModelBuilder_108_6_ (galgas_scanner & _inLexique) {
  GGS_lstring  var_cas_mMethodName ;
  GGS_lstring  var_cas_mErrorMessage ;
  _inLexique._assignFromAttribute_tokenString (var_cas_mMethodName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  _inLexique._assignFromAttribute_tokenString (var_cas_mErrorMessage) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  GGS_mapMethod _entityInstance = GGS_mapMethod::constructor_new (_inLexique, var_cas_mMethodName, var_cas_mErrorMessage COMMA_HERE) ;
  return _entityInstance ;
}

//---------------------------------------------------------------------------*

