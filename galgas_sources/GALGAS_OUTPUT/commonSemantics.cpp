//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'commonSemantics.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 6th, 2008, at 20h46'59"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "commonSemantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "commonSemantics.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//            Class for 'actualParameterPassingMode' Enumeration             *
//                                                                           *
//---------------------------------------------------------------------------*

bool GGS_actualParameterPassingMode::
_isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_actualParameterPassingMode::
_operator_isEqual (const GGS_actualParameterPassingMode inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_actualParameterPassingMode::
_operator_isNotEqual (const GGS_actualParameterPassingMode inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_actualParameterPassingMode::
_operator_infOrEqual (const GGS_actualParameterPassingMode inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_actualParameterPassingMode::
_operator_supOrEqual (const GGS_actualParameterPassingMode inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_actualParameterPassingMode::
_operator_strictInf (const GGS_actualParameterPassingMode inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_actualParameterPassingMode::
_operator_strictSup (const GGS_actualParameterPassingMode inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_actualParameterPassingMode::
reader_actualArgumentMessage (C_Compiler & /* _inLexique */
                       COMMA_UNUSED_LOCATION_ARGS) const {
  const char * kMessages [4] = {"",
    "an input (\?) actual parameter",
    "an output (!) actual parameter",
    "an output/input (!\?) actual parameter"
  } ;
  return GGS_string (mValue > 0, kMessages [mValue]) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_actualParameterPassingMode::
reader_description (C_Compiler & /* _inLexique */
                    COMMA_UNUSED_LOCATION_ARGS,
                    const sint32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @actualParameterPassingMode" ;
  switch (mValue) {
  case enum_parameterOut:
    s << " parameterOut>" ;
    break ;
  case enum_parameterOutIn:
    s << " parameterOutIn>" ;
    break ;
  case enum_parameterIn:
    s << " parameterIn>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Class for 'formalArgumentPassingMode' Enumeration              *
//                                                                           *
//---------------------------------------------------------------------------*

bool GGS_formalArgumentPassingMode::
_isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_formalArgumentPassingMode::
_operator_isEqual (const GGS_formalArgumentPassingMode inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_formalArgumentPassingMode::
_operator_isNotEqual (const GGS_formalArgumentPassingMode inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_formalArgumentPassingMode::
_operator_infOrEqual (const GGS_formalArgumentPassingMode inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_formalArgumentPassingMode::
_operator_supOrEqual (const GGS_formalArgumentPassingMode inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_formalArgumentPassingMode::
_operator_strictInf (const GGS_formalArgumentPassingMode inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_formalArgumentPassingMode::
_operator_strictSup (const GGS_formalArgumentPassingMode inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_formalArgumentPassingMode::
reader_formalArgumentMessage (C_Compiler & /* _inLexique */
                       COMMA_UNUSED_LOCATION_ARGS) const {
  const char * kMessages [5] = {"",
    "a constant input (\?\?) formal argument",
    "an input (\?) formal argument",
    "an input/output (\?!) argument",
    "an output (!) formal argument"
  } ;
  return GGS_string (mValue > 0, kMessages [mValue]) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_formalArgumentPassingMode::
reader_description (C_Compiler & /* _inLexique */
                    COMMA_UNUSED_LOCATION_ARGS,
                    const sint32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @formalArgumentPassingMode" ;
  switch (mValue) {
  case enum_argumentIn:
    s << " argumentIn>" ;
    break ;
  case enum_argumentOut:
    s << " argumentOut>" ;
    break ;
  case enum_argumentInOut:
    s << " argumentInOut>" ;
    break ;
  case enum_argumentConstantIn:
    s << " argumentConstantIn>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Class for 'variableStateAutomaton' Enumeration               *
//                                                                           *
//---------------------------------------------------------------------------*

bool GGS_variableStateAutomaton::
_isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_variableStateAutomaton::
_operator_isEqual (const GGS_variableStateAutomaton inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_variableStateAutomaton::
_operator_isNotEqual (const GGS_variableStateAutomaton inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_variableStateAutomaton::
_operator_infOrEqual (const GGS_variableStateAutomaton inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_variableStateAutomaton::
_operator_supOrEqual (const GGS_variableStateAutomaton inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_variableStateAutomaton::
_operator_strictInf (const GGS_variableStateAutomaton inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_variableStateAutomaton::
_operator_strictSup (const GGS_variableStateAutomaton inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

void GGS_variableStateAutomaton::
modifier_writeAccess (C_Compiler & _inLexique,
                                const GGS_location   var_cas_inErrorLocation
                                COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER GGS_variableStateAutomaton::modifier_writeAccess at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  switch (mValue) {
  case enum_localVariableDeclared:
    mValue = enum_localVariableUsed ;
    break ;
  case enum_localVariableUsed:
    mValue = enum_localVariableUsed ;
    break ;
  case enum_localVariableDropped:
    mValue = enum_localVariableUsed ;
    break ;
  case enum_localConstantDeclared:
    mValue = enum_localConstantDefined ;
    break ;
  case enum_localConstantDefined:
    mValue = enum_localConstantDefined ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the local constant cannot be written, it is is already defined") COMMA_SOURCE_FILE_AT_LINE (87)) ;
    break ;
  case enum_localContantUsed:
    mValue = enum_localContantUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the local constant cannot be written, it is is already defined") COMMA_SOURCE_FILE_AT_LINE (88)) ;
    break ;
  case enum_inputFormalParameterDefined:
    mValue = enum_inputFormalParameterDefined ;
    break ;
  case enum_inputFormalParameterUsed:
    mValue = enum_inputFormalParameterUsed ;
    break ;
  case enum_inputFormalParameterDropped:
    mValue = enum_inputFormalParameterUsed ;
    break ;
  case enum_constantInputFormalParameterDefined:
    mValue = enum_constantInputFormalParameterUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the input parameter cannot be written, it is a constant") COMMA_SOURCE_FILE_AT_LINE (94)) ;
    break ;
  case enum_constantInputFormalParameterUsed:
    mValue = enum_constantInputFormalParameterUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the input parameter cannot be written, it is a constant") COMMA_SOURCE_FILE_AT_LINE (95)) ;
    break ;
  default : break ;
  }
}

//---------------------------------------------------------------------------*

void GGS_variableStateAutomaton::
modifier_readAccess (C_Compiler & _inLexique,
                                const GGS_location   var_cas_inErrorLocation
                                COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER GGS_variableStateAutomaton::modifier_readAccess at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  switch (mValue) {
  case enum_localVariableDeclared:
    mValue = enum_localVariableUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the local variable cannot be read, it has no value") COMMA_SOURCE_FILE_AT_LINE (101)) ;
    break ;
  case enum_localVariableUsed:
    mValue = enum_localVariableUsed ;
    break ;
  case enum_localVariableDropped:
    mValue = enum_localVariableUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the local variable cannot be read, it is dropped") COMMA_SOURCE_FILE_AT_LINE (103)) ;
    break ;
  case enum_localConstantDeclared:
    mValue = enum_localConstantDefined ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the local constant cannot be read, it has no value") COMMA_SOURCE_FILE_AT_LINE (105)) ;
    break ;
  case enum_localConstantDefined:
    mValue = enum_localContantUsed ;
    break ;
  case enum_localContantUsed:
    mValue = enum_localContantUsed ;
    break ;
  case enum_inputFormalParameterDefined:
    mValue = enum_inputFormalParameterUsed ;
    break ;
  case enum_inputFormalParameterUsed:
    mValue = enum_inputFormalParameterUsed ;
    break ;
  case enum_inputFormalParameterDropped:
    mValue = enum_inputFormalParameterDefined ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the input parameter cannot be read, it is dropped") COMMA_SOURCE_FILE_AT_LINE (111)) ;
    break ;
  case enum_constantInputFormalParameterDefined:
    mValue = enum_constantInputFormalParameterUsed ;
    break ;
  case enum_constantInputFormalParameterUsed:
    mValue = enum_constantInputFormalParameterUsed ;
    break ;
  default : break ;
  }
}

//---------------------------------------------------------------------------*

void GGS_variableStateAutomaton::
modifier_readWriteAccess (C_Compiler & _inLexique,
                                const GGS_location   var_cas_inErrorLocation
                                COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER GGS_variableStateAutomaton::modifier_readWriteAccess at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  switch (mValue) {
  case enum_localVariableDeclared:
    mValue = enum_localVariableUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the local variable cannot be modified, has no value") COMMA_SOURCE_FILE_AT_LINE (120)) ;
    break ;
  case enum_localVariableUsed:
    mValue = enum_localVariableUsed ;
    break ;
  case enum_localVariableDropped:
    mValue = enum_localVariableUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the local variable cannot be modified, it is dropped") COMMA_SOURCE_FILE_AT_LINE (122)) ;
    break ;
  case enum_localConstantDeclared:
    mValue = enum_localContantUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a local constant cannot be modified") COMMA_SOURCE_FILE_AT_LINE (124)) ;
    break ;
  case enum_localConstantDefined:
    mValue = enum_localContantUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a local constant cannot be modified") COMMA_SOURCE_FILE_AT_LINE (125)) ;
    break ;
  case enum_localContantUsed:
    mValue = enum_localContantUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a local constant cannot be modified") COMMA_SOURCE_FILE_AT_LINE (126)) ;
    break ;
  case enum_inputFormalParameterDefined:
    mValue = enum_inputFormalParameterUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the input parameter cannot be modified, has no value") COMMA_SOURCE_FILE_AT_LINE (128)) ;
    break ;
  case enum_inputFormalParameterUsed:
    mValue = enum_inputFormalParameterUsed ;
    break ;
  case enum_inputFormalParameterDropped:
    mValue = enum_inputFormalParameterDefined ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the input parameter cannot be modified, it is dropped") COMMA_SOURCE_FILE_AT_LINE (130)) ;
    break ;
  case enum_constantInputFormalParameterDefined:
    mValue = enum_constantInputFormalParameterUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an input parameter cannot be modified") COMMA_SOURCE_FILE_AT_LINE (132)) ;
    break ;
  case enum_constantInputFormalParameterUsed:
    mValue = enum_constantInputFormalParameterUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "an input parameter cannot be modified") COMMA_SOURCE_FILE_AT_LINE (133)) ;
    break ;
  default : break ;
  }
}

//---------------------------------------------------------------------------*

void GGS_variableStateAutomaton::
modifier_dropAccess (C_Compiler & _inLexique,
                                const GGS_location   var_cas_inErrorLocation
                                COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER GGS_variableStateAutomaton::modifier_dropAccess at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  switch (mValue) {
  case enum_localVariableDeclared:
    mValue = enum_localVariableDropped ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the local variable cannot be dropped, has no value") COMMA_SOURCE_FILE_AT_LINE (139)) ;
    break ;
  case enum_localVariableUsed:
    mValue = enum_localVariableDropped ;
    break ;
  case enum_localVariableDropped:
    mValue = enum_localVariableDropped ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the local variable is already dropped") COMMA_SOURCE_FILE_AT_LINE (141)) ;
    break ;
  case enum_localConstantDeclared:
    mValue = enum_localContantUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a local constant cannot be dropped") COMMA_SOURCE_FILE_AT_LINE (143)) ;
    break ;
  case enum_localConstantDefined:
    mValue = enum_localContantUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a local constant cannot be dropped") COMMA_SOURCE_FILE_AT_LINE (144)) ;
    break ;
  case enum_localContantUsed:
    mValue = enum_localContantUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a local constant cannot be dropped") COMMA_SOURCE_FILE_AT_LINE (145)) ;
    break ;
  case enum_inputFormalParameterDefined:
    mValue = enum_inputFormalParameterUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the input parameter cannot be dropped, has no value") COMMA_SOURCE_FILE_AT_LINE (147)) ;
    break ;
  case enum_inputFormalParameterUsed:
    mValue = enum_inputFormalParameterDropped ;
    break ;
  case enum_inputFormalParameterDropped:
    mValue = enum_inputFormalParameterDropped ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the input parameter is already dropped") COMMA_SOURCE_FILE_AT_LINE (149)) ;
    break ;
  case enum_constantInputFormalParameterDefined:
    mValue = enum_constantInputFormalParameterUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a constant input parameter cannot be dropped") COMMA_SOURCE_FILE_AT_LINE (151)) ;
    break ;
  case enum_constantInputFormalParameterUsed:
    mValue = enum_constantInputFormalParameterUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a constant input parameter cannot be dropped") COMMA_SOURCE_FILE_AT_LINE (152)) ;
    break ;
  default : break ;
  }
}

//---------------------------------------------------------------------------*

static const GGS_variableStateAutomaton::enumeration kResultForvariableStateAutomaton_endOfRepeatedBranch [121] = {
  GGS_variableStateAutomaton::enum_localVariableDeclared, /* enum_localVariableDeclared, enum_localVariableDeclared */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableDeclared, enum_localVariableUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableDeclared, enum_localVariableDropped */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableDeclared, enum_localConstantDeclared */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableDeclared, enum_localConstantDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableDeclared, enum_localContantUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableDeclared, enum_inputFormalParameterDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableDeclared, enum_inputFormalParameterUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableDeclared, enum_inputFormalParameterDropped */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableDeclared, enum_constantInputFormalParameterDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableDeclared, enum_constantInputFormalParameterUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableUsed, enum_localVariableDeclared */
  GGS_variableStateAutomaton::enum_localVariableUsed, /* enum_localVariableUsed, enum_localVariableUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableUsed, enum_localVariableDropped */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableUsed, enum_localConstantDeclared */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableUsed, enum_localConstantDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableUsed, enum_localContantUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableUsed, enum_inputFormalParameterDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableUsed, enum_inputFormalParameterUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableUsed, enum_inputFormalParameterDropped */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableUsed, enum_constantInputFormalParameterDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableUsed, enum_constantInputFormalParameterUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableDropped, enum_localVariableDeclared */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableDropped, enum_localVariableUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableDropped, enum_localVariableDropped */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableDropped, enum_localConstantDeclared */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableDropped, enum_localConstantDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableDropped, enum_localContantUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableDropped, enum_inputFormalParameterDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableDropped, enum_inputFormalParameterUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableDropped, enum_inputFormalParameterDropped */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableDropped, enum_constantInputFormalParameterDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localVariableDropped, enum_constantInputFormalParameterUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localConstantDeclared, enum_localVariableDeclared */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localConstantDeclared, enum_localVariableUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localConstantDeclared, enum_localVariableDropped */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localConstantDeclared, enum_localConstantDeclared */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localConstantDeclared, enum_localConstantDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localConstantDeclared, enum_localContantUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localConstantDeclared, enum_inputFormalParameterDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localConstantDeclared, enum_inputFormalParameterUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localConstantDeclared, enum_inputFormalParameterDropped */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localConstantDeclared, enum_constantInputFormalParameterDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localConstantDeclared, enum_constantInputFormalParameterUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localConstantDefined, enum_localVariableDeclared */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localConstantDefined, enum_localVariableUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localConstantDefined, enum_localVariableDropped */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localConstantDefined, enum_localConstantDeclared */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localConstantDefined, enum_localConstantDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localConstantDefined, enum_localContantUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localConstantDefined, enum_inputFormalParameterDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localConstantDefined, enum_inputFormalParameterUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localConstantDefined, enum_inputFormalParameterDropped */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localConstantDefined, enum_constantInputFormalParameterDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localConstantDefined, enum_constantInputFormalParameterUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localContantUsed, enum_localVariableDeclared */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localContantUsed, enum_localVariableUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localContantUsed, enum_localVariableDropped */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localContantUsed, enum_localConstantDeclared */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localContantUsed, enum_localConstantDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localContantUsed, enum_localContantUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localContantUsed, enum_inputFormalParameterDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localContantUsed, enum_inputFormalParameterUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localContantUsed, enum_inputFormalParameterDropped */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localContantUsed, enum_constantInputFormalParameterDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_localContantUsed, enum_constantInputFormalParameterUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterDefined, enum_localVariableDeclared */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterDefined, enum_localVariableUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterDefined, enum_localVariableDropped */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterDefined, enum_localConstantDeclared */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterDefined, enum_localConstantDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterDefined, enum_localContantUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterDefined, enum_inputFormalParameterDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterDefined, enum_inputFormalParameterUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterDefined, enum_inputFormalParameterDropped */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterDefined, enum_constantInputFormalParameterDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterDefined, enum_constantInputFormalParameterUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterUsed, enum_localVariableDeclared */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterUsed, enum_localVariableUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterUsed, enum_localVariableDropped */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterUsed, enum_localConstantDeclared */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterUsed, enum_localConstantDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterUsed, enum_localContantUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterUsed, enum_inputFormalParameterDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterUsed, enum_inputFormalParameterUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterUsed, enum_inputFormalParameterDropped */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterUsed, enum_constantInputFormalParameterDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterUsed, enum_constantInputFormalParameterUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterDropped, enum_localVariableDeclared */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterDropped, enum_localVariableUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterDropped, enum_localVariableDropped */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterDropped, enum_localConstantDeclared */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterDropped, enum_localConstantDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterDropped, enum_localContantUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterDropped, enum_inputFormalParameterDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterDropped, enum_inputFormalParameterUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterDropped, enum_inputFormalParameterDropped */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterDropped, enum_constantInputFormalParameterDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_inputFormalParameterDropped, enum_constantInputFormalParameterUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_constantInputFormalParameterDefined, enum_localVariableDeclared */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_constantInputFormalParameterDefined, enum_localVariableUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_constantInputFormalParameterDefined, enum_localVariableDropped */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_constantInputFormalParameterDefined, enum_localConstantDeclared */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_constantInputFormalParameterDefined, enum_localConstantDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_constantInputFormalParameterDefined, enum_localContantUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_constantInputFormalParameterDefined, enum_inputFormalParameterDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_constantInputFormalParameterDefined, enum_inputFormalParameterUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_constantInputFormalParameterDefined, enum_inputFormalParameterDropped */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_constantInputFormalParameterDefined, enum_constantInputFormalParameterDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_constantInputFormalParameterDefined, enum_constantInputFormalParameterUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_constantInputFormalParameterUsed, enum_localVariableDeclared */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_constantInputFormalParameterUsed, enum_localVariableUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_constantInputFormalParameterUsed, enum_localVariableDropped */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_constantInputFormalParameterUsed, enum_localConstantDeclared */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_constantInputFormalParameterUsed, enum_localConstantDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_constantInputFormalParameterUsed, enum_localContantUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_constantInputFormalParameterUsed, enum_inputFormalParameterDefined */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_constantInputFormalParameterUsed, enum_inputFormalParameterUsed */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_constantInputFormalParameterUsed, enum_inputFormalParameterDropped */
  GGS_variableStateAutomaton::kNotBuilt, /* enum_constantInputFormalParameterUsed, enum_constantInputFormalParameterDefined */
  GGS_variableStateAutomaton::kNotBuilt /* enum_constantInputFormalParameterUsed, enum_constantInputFormalParameterUsed */
} ;

//---------------------------------------------------------------------------*

static const sint32 kErrorForvariableStateAutomaton_endOfRepeatedBranch [121] = {
  1, /* enum_localVariableDeclared, enum_localVariableDeclared */
  -1, /* enum_localVariableDeclared, enum_localVariableUsed */
  -1, /* enum_localVariableDeclared, enum_localVariableDropped */
  -1, /* enum_localVariableDeclared, enum_localConstantDeclared */
  -1, /* enum_localVariableDeclared, enum_localConstantDefined */
  -1, /* enum_localVariableDeclared, enum_localContantUsed */
  -1, /* enum_localVariableDeclared, enum_inputFormalParameterDefined */
  -1, /* enum_localVariableDeclared, enum_inputFormalParameterUsed */
  -1, /* enum_localVariableDeclared, enum_inputFormalParameterDropped */
  -1, /* enum_localVariableDeclared, enum_constantInputFormalParameterDefined */
  -1, /* enum_localVariableDeclared, enum_constantInputFormalParameterUsed */
  -1, /* enum_localVariableUsed, enum_localVariableDeclared */
  2, /* enum_localVariableUsed, enum_localVariableUsed */
  -1, /* enum_localVariableUsed, enum_localVariableDropped */
  -1, /* enum_localVariableUsed, enum_localConstantDeclared */
  -1, /* enum_localVariableUsed, enum_localConstantDefined */
  -1, /* enum_localVariableUsed, enum_localContantUsed */
  -1, /* enum_localVariableUsed, enum_inputFormalParameterDefined */
  -1, /* enum_localVariableUsed, enum_inputFormalParameterUsed */
  -1, /* enum_localVariableUsed, enum_inputFormalParameterDropped */
  -1, /* enum_localVariableUsed, enum_constantInputFormalParameterDefined */
  -1, /* enum_localVariableUsed, enum_constantInputFormalParameterUsed */
  -1, /* enum_localVariableDropped, enum_localVariableDeclared */
  -1, /* enum_localVariableDropped, enum_localVariableUsed */
  -1, /* enum_localVariableDropped, enum_localVariableDropped */
  -1, /* enum_localVariableDropped, enum_localConstantDeclared */
  -1, /* enum_localVariableDropped, enum_localConstantDefined */
  -1, /* enum_localVariableDropped, enum_localContantUsed */
  -1, /* enum_localVariableDropped, enum_inputFormalParameterDefined */
  -1, /* enum_localVariableDropped, enum_inputFormalParameterUsed */
  -1, /* enum_localVariableDropped, enum_inputFormalParameterDropped */
  -1, /* enum_localVariableDropped, enum_constantInputFormalParameterDefined */
  -1, /* enum_localVariableDropped, enum_constantInputFormalParameterUsed */
  -1, /* enum_localConstantDeclared, enum_localVariableDeclared */
  -1, /* enum_localConstantDeclared, enum_localVariableUsed */
  -1, /* enum_localConstantDeclared, enum_localVariableDropped */
  -1, /* enum_localConstantDeclared, enum_localConstantDeclared */
  -1, /* enum_localConstantDeclared, enum_localConstantDefined */
  -1, /* enum_localConstantDeclared, enum_localContantUsed */
  -1, /* enum_localConstantDeclared, enum_inputFormalParameterDefined */
  -1, /* enum_localConstantDeclared, enum_inputFormalParameterUsed */
  -1, /* enum_localConstantDeclared, enum_inputFormalParameterDropped */
  -1, /* enum_localConstantDeclared, enum_constantInputFormalParameterDefined */
  -1, /* enum_localConstantDeclared, enum_constantInputFormalParameterUsed */
  -1, /* enum_localConstantDefined, enum_localVariableDeclared */
  -1, /* enum_localConstantDefined, enum_localVariableUsed */
  -1, /* enum_localConstantDefined, enum_localVariableDropped */
  -1, /* enum_localConstantDefined, enum_localConstantDeclared */
  -1, /* enum_localConstantDefined, enum_localConstantDefined */
  -1, /* enum_localConstantDefined, enum_localContantUsed */
  -1, /* enum_localConstantDefined, enum_inputFormalParameterDefined */
  -1, /* enum_localConstantDefined, enum_inputFormalParameterUsed */
  -1, /* enum_localConstantDefined, enum_inputFormalParameterDropped */
  -1, /* enum_localConstantDefined, enum_constantInputFormalParameterDefined */
  -1, /* enum_localConstantDefined, enum_constantInputFormalParameterUsed */
  -1, /* enum_localContantUsed, enum_localVariableDeclared */
  -1, /* enum_localContantUsed, enum_localVariableUsed */
  -1, /* enum_localContantUsed, enum_localVariableDropped */
  -1, /* enum_localContantUsed, enum_localConstantDeclared */
  -1, /* enum_localContantUsed, enum_localConstantDefined */
  -1, /* enum_localContantUsed, enum_localContantUsed */
  -1, /* enum_localContantUsed, enum_inputFormalParameterDefined */
  -1, /* enum_localContantUsed, enum_inputFormalParameterUsed */
  -1, /* enum_localContantUsed, enum_inputFormalParameterDropped */
  -1, /* enum_localContantUsed, enum_constantInputFormalParameterDefined */
  -1, /* enum_localContantUsed, enum_constantInputFormalParameterUsed */
  -1, /* enum_inputFormalParameterDefined, enum_localVariableDeclared */
  -1, /* enum_inputFormalParameterDefined, enum_localVariableUsed */
  -1, /* enum_inputFormalParameterDefined, enum_localVariableDropped */
  -1, /* enum_inputFormalParameterDefined, enum_localConstantDeclared */
  -1, /* enum_inputFormalParameterDefined, enum_localConstantDefined */
  -1, /* enum_inputFormalParameterDefined, enum_localContantUsed */
  -1, /* enum_inputFormalParameterDefined, enum_inputFormalParameterDefined */
  -1, /* enum_inputFormalParameterDefined, enum_inputFormalParameterUsed */
  -1, /* enum_inputFormalParameterDefined, enum_inputFormalParameterDropped */
  -1, /* enum_inputFormalParameterDefined, enum_constantInputFormalParameterDefined */
  -1, /* enum_inputFormalParameterDefined, enum_constantInputFormalParameterUsed */
  -1, /* enum_inputFormalParameterUsed, enum_localVariableDeclared */
  -1, /* enum_inputFormalParameterUsed, enum_localVariableUsed */
  -1, /* enum_inputFormalParameterUsed, enum_localVariableDropped */
  -1, /* enum_inputFormalParameterUsed, enum_localConstantDeclared */
  -1, /* enum_inputFormalParameterUsed, enum_localConstantDefined */
  -1, /* enum_inputFormalParameterUsed, enum_localContantUsed */
  -1, /* enum_inputFormalParameterUsed, enum_inputFormalParameterDefined */
  -1, /* enum_inputFormalParameterUsed, enum_inputFormalParameterUsed */
  -1, /* enum_inputFormalParameterUsed, enum_inputFormalParameterDropped */
  -1, /* enum_inputFormalParameterUsed, enum_constantInputFormalParameterDefined */
  -1, /* enum_inputFormalParameterUsed, enum_constantInputFormalParameterUsed */
  -1, /* enum_inputFormalParameterDropped, enum_localVariableDeclared */
  -1, /* enum_inputFormalParameterDropped, enum_localVariableUsed */
  -1, /* enum_inputFormalParameterDropped, enum_localVariableDropped */
  -1, /* enum_inputFormalParameterDropped, enum_localConstantDeclared */
  -1, /* enum_inputFormalParameterDropped, enum_localConstantDefined */
  -1, /* enum_inputFormalParameterDropped, enum_localContantUsed */
  -1, /* enum_inputFormalParameterDropped, enum_inputFormalParameterDefined */
  -1, /* enum_inputFormalParameterDropped, enum_inputFormalParameterUsed */
  -1, /* enum_inputFormalParameterDropped, enum_inputFormalParameterDropped */
  -1, /* enum_inputFormalParameterDropped, enum_constantInputFormalParameterDefined */
  -1, /* enum_inputFormalParameterDropped, enum_constantInputFormalParameterUsed */
  -1, /* enum_constantInputFormalParameterDefined, enum_localVariableDeclared */
  -1, /* enum_constantInputFormalParameterDefined, enum_localVariableUsed */
  -1, /* enum_constantInputFormalParameterDefined, enum_localVariableDropped */
  -1, /* enum_constantInputFormalParameterDefined, enum_localConstantDeclared */
  -1, /* enum_constantInputFormalParameterDefined, enum_localConstantDefined */
  -1, /* enum_constantInputFormalParameterDefined, enum_localContantUsed */
  -1, /* enum_constantInputFormalParameterDefined, enum_inputFormalParameterDefined */
  -1, /* enum_constantInputFormalParameterDefined, enum_inputFormalParameterUsed */
  -1, /* enum_constantInputFormalParameterDefined, enum_inputFormalParameterDropped */
  -1, /* enum_constantInputFormalParameterDefined, enum_constantInputFormalParameterDefined */
  -1, /* enum_constantInputFormalParameterDefined, enum_constantInputFormalParameterUsed */
  -1, /* enum_constantInputFormalParameterUsed, enum_localVariableDeclared */
  -1, /* enum_constantInputFormalParameterUsed, enum_localVariableUsed */
  -1, /* enum_constantInputFormalParameterUsed, enum_localVariableDropped */
  -1, /* enum_constantInputFormalParameterUsed, enum_localConstantDeclared */
  -1, /* enum_constantInputFormalParameterUsed, enum_localConstantDefined */
  -1, /* enum_constantInputFormalParameterUsed, enum_localContantUsed */
  -1, /* enum_constantInputFormalParameterUsed, enum_inputFormalParameterDefined */
  -1, /* enum_constantInputFormalParameterUsed, enum_inputFormalParameterUsed */
  -1, /* enum_constantInputFormalParameterUsed, enum_inputFormalParameterDropped */
  -1, /* enum_constantInputFormalParameterUsed, enum_constantInputFormalParameterDefined */
  -1 /* enum_constantInputFormalParameterUsed, enum_constantInputFormalParameterUsed */
} ;

//---------------------------------------------------------------------------*

GGS_variableStateAutomaton GGS_variableStateAutomaton::
operator_endOfRepeatedBranch (C_Compiler & _inLexique,
                                const GGS_variableStateAutomaton & inOperand,
                                const GGS_location   var_cas_inErrorLocation
                                COMMA_UNUSED_LOCATION_ARGS) const {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER GGS_variableStateAutomaton::operator_endOfRepeatedBranch at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  enumeration result = kNotBuilt ;
  if ((mValue > 0) && (inOperand.mValue > 0)) {
    const sint32 kIndex = (mValue - 1) * 11 + inOperand.mValue - 1 ;
    result = kResultForvariableStateAutomaton_endOfRepeatedBranch [kIndex] ;
    const sint32 error = kErrorForvariableStateAutomaton_endOfRepeatedBranch [kIndex] ;
    if (error != 0) {
      switch (error) {
      case 1:
        var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "error 1") COMMA_SOURCE_FILE_AT_LINE (157)) ;
      break ;
      case 2:
        var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "warning 1") COMMA_SOURCE_FILE_AT_LINE (158)) ;
      break ;
      default: // error == -1
        { C_String errorMessage ;
          errorMessage << "Unhandled configuration in enum operator" ;
          _inLexique.onTheFlySemanticError (errorMessage COMMA_HERE) ;
        }
      break ;
      }
    }
  }
  return GGS_variableStateAutomaton (result) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_variableStateAutomaton::
reader_description (C_Compiler & /* _inLexique */
                    COMMA_UNUSED_LOCATION_ARGS,
                    const sint32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @variableStateAutomaton" ;
  switch (mValue) {
  case enum_localVariableDeclared:
    s << " localVariableDeclared>" ;
    break ;
  case enum_localVariableUsed:
    s << " localVariableUsed>" ;
    break ;
  case enum_localVariableDropped:
    s << " localVariableDropped>" ;
    break ;
  case enum_localConstantDeclared:
    s << " localConstantDeclared>" ;
    break ;
  case enum_localConstantDefined:
    s << " localConstantDefined>" ;
    break ;
  case enum_localContantUsed:
    s << " localContantUsed>" ;
    break ;
  case enum_inputFormalParameterDefined:
    s << " inputFormalParameterDefined>" ;
    break ;
  case enum_inputFormalParameterUsed:
    s << " inputFormalParameterUsed>" ;
    break ;
  case enum_inputFormalParameterDropped:
    s << " inputFormalParameterDropped>" ;
    break ;
  case enum_constantInputFormalParameterDefined:
    s << " constantInputFormalParameterDefined>" ;
    break ;
  case enum_constantInputFormalParameterUsed:
    s << " constantInputFormalParameterUsed>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Class for 'localVariableStateAutomaton' Enumeration             *
//                                                                           *
//---------------------------------------------------------------------------*

bool GGS_localVariableStateAutomaton::
_isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_localVariableStateAutomaton::
_operator_isEqual (const GGS_localVariableStateAutomaton inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_localVariableStateAutomaton::
_operator_isNotEqual (const GGS_localVariableStateAutomaton inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_localVariableStateAutomaton::
_operator_infOrEqual (const GGS_localVariableStateAutomaton inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_localVariableStateAutomaton::
_operator_supOrEqual (const GGS_localVariableStateAutomaton inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_localVariableStateAutomaton::
_operator_strictInf (const GGS_localVariableStateAutomaton inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_localVariableStateAutomaton::
_operator_strictSup (const GGS_localVariableStateAutomaton inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

void GGS_localVariableStateAutomaton::
modifier_writeAccess (C_Compiler &,
                                const GGS_location   /* var_cas_inErrorLocation */
                                COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER GGS_localVariableStateAutomaton::modifier_writeAccess at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  switch (mValue) {
  case enum_localVariableDeclared:
    mValue = enum_localVariableUsed ;
    break ;
  case enum_localVariableUsed:
    mValue = enum_localVariableUsed ;
    break ;
  case enum_localVariableDropped:
    mValue = enum_localVariableUsed ;
    break ;
  default : break ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localVariableStateAutomaton::
modifier_readAccess (C_Compiler & _inLexique,
                                const GGS_location   var_cas_inErrorLocation
                                COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER GGS_localVariableStateAutomaton::modifier_readAccess at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  switch (mValue) {
  case enum_localVariableDeclared:
    mValue = enum_localVariableUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the local variable cannot be read, it has no value") COMMA_SOURCE_FILE_AT_LINE (178)) ;
    break ;
  case enum_localVariableUsed:
    mValue = enum_localVariableUsed ;
    break ;
  case enum_localVariableDropped:
    mValue = enum_localVariableUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the local variable cannot be read, it is dropped") COMMA_SOURCE_FILE_AT_LINE (180)) ;
    break ;
  default : break ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localVariableStateAutomaton::
modifier_readWriteAccess (C_Compiler & _inLexique,
                                const GGS_location   var_cas_inErrorLocation
                                COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER GGS_localVariableStateAutomaton::modifier_readWriteAccess at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  switch (mValue) {
  case enum_localVariableDeclared:
    mValue = enum_localVariableUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the local variable cannot be modified, has no value") COMMA_SOURCE_FILE_AT_LINE (185)) ;
    break ;
  case enum_localVariableUsed:
    mValue = enum_localVariableUsed ;
    break ;
  case enum_localVariableDropped:
    mValue = enum_localVariableUsed ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the local variable cannot be modified, it is dropped") COMMA_SOURCE_FILE_AT_LINE (187)) ;
    break ;
  default : break ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localVariableStateAutomaton::
modifier_dropAccess (C_Compiler & _inLexique,
                                const GGS_location   var_cas_inErrorLocation
                                COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER GGS_localVariableStateAutomaton::modifier_dropAccess at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  switch (mValue) {
  case enum_localVariableDeclared:
    mValue = enum_localVariableDropped ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the local variable cannot be dropped, has no value") COMMA_SOURCE_FILE_AT_LINE (192)) ;
    break ;
  case enum_localVariableUsed:
    mValue = enum_localVariableDropped ;
    break ;
  case enum_localVariableDropped:
    mValue = enum_localVariableDropped ;
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the local variable is already dropped") COMMA_SOURCE_FILE_AT_LINE (194)) ;
    break ;
  default : break ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localVariableStateAutomaton::
method_checkFinalState (C_Compiler & _inLexique,
                                const GGS_location   var_cas_inErrorLocation
                                COMMA_UNUSED_LOCATION_ARGS) const {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER GGS_localVariableStateAutomaton::modifier_checkFinalState at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  switch (mValue) {
  case enum_localVariableDeclared:
    var_cas_inErrorLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "the local variable is unused") COMMA_SOURCE_FILE_AT_LINE (199)) ;
    break ;
  case enum_localVariableUsed:
    break ;
  case enum_localVariableDropped:
    break ;
  default : break ;
  }
}

//---------------------------------------------------------------------------*

GGS_string GGS_localVariableStateAutomaton::
reader_description (C_Compiler & /* _inLexique */
                    COMMA_UNUSED_LOCATION_ARGS,
                    const sint32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @localVariableStateAutomaton" ;
  switch (mValue) {
  case enum_localVariableDeclared:
    s << " localVariableDeclared>" ;
    break ;
  case enum_localVariableUsed:
    s << " localVariableUsed>" ;
    break ;
  case enum_localVariableDropped:
    s << " localVariableDropped>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

