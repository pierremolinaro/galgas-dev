//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'projectCreation.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 19th, 2009, at 11h7'56"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "projectCreation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "projectCreation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of wrapper 'projectCreationFileWrapper'           *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of 'galgas_sources' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_1 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'galgas_sources' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_1 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'galgas_sources'

const cDirectoryWrapper gWrapperDirectory_1_projectCreationFileWrapper = {
  "galgas_sources",
  0,
  gWrapperAllFiles_projectCreationFileWrapper_1,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_1
} ;

//---------------------------------------------------------------------------*

//--- All files of 'hand_coded_sources' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_2 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'hand_coded_sources' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_2 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'hand_coded_sources'

const cDirectoryWrapper gWrapperDirectory_2_projectCreationFileWrapper = {
  "hand_coded_sources",
  0,
  gWrapperAllFiles_projectCreationFileWrapper_2,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_2
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx/build.command'

const char * gWrapperFileContent_0_projectCreationFileWrapper = // 71 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all\n"
;

static const cRegularFileWrapper gWrapperFile_0_projectCreationFileWrapper = {
  "build.command",
  "command",
  gWrapperFileContent_0_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx/build64.command'

const char * gWrapperFileContent_1_projectCreationFileWrapper = // 85 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all\n"
;

static const cRegularFileWrapper gWrapperFile_1_projectCreationFileWrapper = {
  "build64.command",
  "command",
  gWrapperFileContent_1_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx/clean.command'

const char * gWrapperFileContent_2_projectCreationFileWrapper = // 73 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n"
;

static const cRegularFileWrapper gWrapperFile_2_projectCreationFileWrapper = {
  "clean.command",
  "command",
  gWrapperFileContent_2_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx/clean64.command'

const char * gWrapperFileContent_3_projectCreationFileWrapper = // 87 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n"
;

static const cRegularFileWrapper gWrapperFile_3_projectCreationFileWrapper = {
  "clean64.command",
  "command",
  gWrapperFileContent_3_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile_macosx' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_3 [5] = {
  & gWrapperFile_0_projectCreationFileWrapper,
  & gWrapperFile_1_projectCreationFileWrapper,
  & gWrapperFile_2_projectCreationFileWrapper,
  & gWrapperFile_3_projectCreationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile_macosx' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_3 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile_macosx'

const cDirectoryWrapper gWrapperDirectory_3_projectCreationFileWrapper = {
  "makefile_macosx",
  4,
  gWrapperAllFiles_projectCreationFileWrapper_3,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_3
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_i386/build.command'

const char * gWrapperFileContent_4_projectCreationFileWrapper = // 71 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all\n"
;

static const cRegularFileWrapper gWrapperFile_4_projectCreationFileWrapper = {
  "build.command",
  "command",
  gWrapperFileContent_4_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_i386/build64.command'

const char * gWrapperFileContent_5_projectCreationFileWrapper = // 85 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all\n"
;

static const cRegularFileWrapper gWrapperFile_5_projectCreationFileWrapper = {
  "build64.command",
  "command",
  gWrapperFileContent_5_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_i386/clean.command'

const char * gWrapperFileContent_6_projectCreationFileWrapper = // 73 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n"
;

static const cRegularFileWrapper gWrapperFile_6_projectCreationFileWrapper = {
  "clean.command",
  "command",
  gWrapperFileContent_6_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_i386/clean64.command'

const char * gWrapperFileContent_7_projectCreationFileWrapper = // 87 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n"
;

static const cRegularFileWrapper gWrapperFile_7_projectCreationFileWrapper = {
  "clean64.command",
  "command",
  gWrapperFileContent_7_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile_macosx_i386' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_4 [5] = {
  & gWrapperFile_4_projectCreationFileWrapper,
  & gWrapperFile_5_projectCreationFileWrapper,
  & gWrapperFile_6_projectCreationFileWrapper,
  & gWrapperFile_7_projectCreationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile_macosx_i386' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_4 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile_macosx_i386'

const cDirectoryWrapper gWrapperDirectory_4_projectCreationFileWrapper = {
  "makefile_macosx_i386",
  4,
  gWrapperAllFiles_projectCreationFileWrapper_4,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_4
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_ppc/build.command'

const char * gWrapperFileContent_8_projectCreationFileWrapper = // 71 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all\n"
;

static const cRegularFileWrapper gWrapperFile_8_projectCreationFileWrapper = {
  "build.command",
  "command",
  gWrapperFileContent_8_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_ppc/build64.command'

const char * gWrapperFileContent_9_projectCreationFileWrapper = // 85 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all\n"
;

static const cRegularFileWrapper gWrapperFile_9_projectCreationFileWrapper = {
  "build64.command",
  "command",
  gWrapperFileContent_9_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_ppc/clean.command'

const char * gWrapperFileContent_10_projectCreationFileWrapper = // 73 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n"
;

static const cRegularFileWrapper gWrapperFile_10_projectCreationFileWrapper = {
  "clean.command",
  "command",
  gWrapperFileContent_10_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_ppc/clean64.command'

const char * gWrapperFileContent_11_projectCreationFileWrapper = // 87 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n"
;

static const cRegularFileWrapper gWrapperFile_11_projectCreationFileWrapper = {
  "clean64.command",
  "command",
  gWrapperFileContent_11_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile_macosx_ppc' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_5 [5] = {
  & gWrapperFile_8_projectCreationFileWrapper,
  & gWrapperFile_9_projectCreationFileWrapper,
  & gWrapperFile_10_projectCreationFileWrapper,
  & gWrapperFile_11_projectCreationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile_macosx_ppc' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_5 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile_macosx_ppc'

const cDirectoryWrapper gWrapperDirectory_5_projectCreationFileWrapper = {
  "makefile_macosx_ppc",
  4,
  gWrapperAllFiles_projectCreationFileWrapper_5,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_5
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_universal/build.command'

const char * gWrapperFileContent_12_projectCreationFileWrapper = // 71 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all\n"
;

static const cRegularFileWrapper gWrapperFile_12_projectCreationFileWrapper = {
  "build.command",
  "command",
  gWrapperFileContent_12_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_universal/build64.command'

const char * gWrapperFileContent_13_projectCreationFileWrapper = // 85 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all\n"
;

static const cRegularFileWrapper gWrapperFile_13_projectCreationFileWrapper = {
  "build64.command",
  "command",
  gWrapperFileContent_13_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_universal/clean.command'

const char * gWrapperFileContent_14_projectCreationFileWrapper = // 73 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n"
;

static const cRegularFileWrapper gWrapperFile_14_projectCreationFileWrapper = {
  "clean.command",
  "command",
  gWrapperFileContent_14_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_universal/clean64.command'

const char * gWrapperFileContent_15_projectCreationFileWrapper = // 87 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n"
;

static const cRegularFileWrapper gWrapperFile_15_projectCreationFileWrapper = {
  "clean64.command",
  "command",
  gWrapperFileContent_15_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile_macosx_universal' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_6 [5] = {
  & gWrapperFile_12_projectCreationFileWrapper,
  & gWrapperFile_13_projectCreationFileWrapper,
  & gWrapperFile_14_projectCreationFileWrapper,
  & gWrapperFile_15_projectCreationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile_macosx_universal' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_6 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile_macosx_universal'

const cDirectoryWrapper gWrapperDirectory_6_projectCreationFileWrapper = {
  "makefile_macosx_universal",
  4,
  gWrapperAllFiles_projectCreationFileWrapper_6,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_6
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_mingw_on_macosx/build.command'

const char * gWrapperFileContent_16_projectCreationFileWrapper = // 71 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all\n"
;

static const cRegularFileWrapper gWrapperFile_16_projectCreationFileWrapper = {
  "build.command",
  "command",
  gWrapperFileContent_16_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_mingw_on_macosx/clean.command'

const char * gWrapperFileContent_17_projectCreationFileWrapper = // 73 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n"
;

static const cRegularFileWrapper gWrapperFile_17_projectCreationFileWrapper = {
  "clean.command",
  "command",
  gWrapperFileContent_17_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile_mingw_on_macosx' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_7 [3] = {
  & gWrapperFile_16_projectCreationFileWrapper,
  & gWrapperFile_17_projectCreationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile_mingw_on_macosx' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_7 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile_mingw_on_macosx'

const cDirectoryWrapper gWrapperDirectory_7_projectCreationFileWrapper = {
  "makefile_mingw_on_macosx",
  2,
  gWrapperAllFiles_projectCreationFileWrapper_7,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_7
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_msys_on_win32/build.bat'

const char * gWrapperFileContent_18_projectCreationFileWrapper = // 88 bytes
  "PATH=C:\\msys\\1.0\\bin;C:\\MinGW\\bin;%PATH%\n"
  "sh -c \"make --warn-undefined-variables\"\n"
  "pause\n"
;

static const cRegularFileWrapper gWrapperFile_18_projectCreationFileWrapper = {
  "build.bat",
  "bat",
  gWrapperFileContent_18_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_msys_on_win32/clean.bat'

const char * gWrapperFileContent_19_projectCreationFileWrapper = // 94 bytes
  "PATH=C:\\msys\\1.0\\bin;C:\\MinGW\\bin;%PATH%\n"
  "sh -c \"make clean --warn-undefined-variables\"\n"
  "pause\n"
;

static const cRegularFileWrapper gWrapperFile_19_projectCreationFileWrapper = {
  "clean.bat",
  "bat",
  gWrapperFileContent_19_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_msys_on_win32/install.bat'

const char * gWrapperFileContent_20_projectCreationFileWrapper = // 96 bytes
  "PATH=C:\\msys\\1.0\\bin;C:\\MinGW\\bin;%PATH%\n"
  "sh -c \"make install --warn-undefined-variables\"\n"
  "pause\n"
;

static const cRegularFileWrapper gWrapperFile_20_projectCreationFileWrapper = {
  "install.bat",
  "bat",
  gWrapperFileContent_20_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile_msys_on_win32' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_8 [4] = {
  & gWrapperFile_18_projectCreationFileWrapper,
  & gWrapperFile_19_projectCreationFileWrapper,
  & gWrapperFile_20_projectCreationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile_msys_on_win32' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_8 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile_msys_on_win32'

const cDirectoryWrapper gWrapperDirectory_8_projectCreationFileWrapper = {
  "makefile_msys_on_win32",
  3,
  gWrapperAllFiles_projectCreationFileWrapper_8,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_8
} ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile_unix' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_9 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile_unix' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_9 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile_unix'

const cDirectoryWrapper gWrapperDirectory_9_projectCreationFileWrapper = {
  "makefile_unix",
  0,
  gWrapperAllFiles_projectCreationFileWrapper_9,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_9
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_x86linux_on_macosx/build.command'

const char * gWrapperFileContent_21_projectCreationFileWrapper = // 71 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all\n"
;

static const cRegularFileWrapper gWrapperFile_21_projectCreationFileWrapper = {
  "build.command",
  "command",
  gWrapperFileContent_21_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_x86linux_on_macosx/clean.command'

const char * gWrapperFileContent_22_projectCreationFileWrapper = // 73 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n"
;

static const cRegularFileWrapper gWrapperFile_22_projectCreationFileWrapper = {
  "clean.command",
  "command",
  gWrapperFileContent_22_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile_x86linux_on_macosx' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_10 [3] = {
  & gWrapperFile_21_projectCreationFileWrapper,
  & gWrapperFile_22_projectCreationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile_x86linux_on_macosx' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_10 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile_x86linux_on_macosx'

const cDirectoryWrapper gWrapperDirectory_10_projectCreationFileWrapper = {
  "makefile_x86linux_on_macosx",
  2,
  gWrapperAllFiles_projectCreationFileWrapper_10,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_10
} ;

//---------------------------------------------------------------------------*

//--- File 'English.lproj/Credits.rtf'

const char * gWrapperFileContent_23_projectCreationFileWrapper = // 311 bytes
  "{\\rtf1\\mac\\ansicpg10000\\cocoartf824\\cocoasubrtf380\n"
  "{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n"
  "{\\colortbl;\\red255\\green255\\blue255;}\n"
  "\\vieww9000\\viewh8400\\viewkind0\n"
  "\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\ql\\qnatural\n"
  "\n"
  "\\f0\\b\\fs24 \\cf0 GALGAS Cocoa Project\\\n"
  "}\n"
;

static const cRegularFileWrapper gWrapperFile_23_projectCreationFileWrapper = {
  "Credits.rtf",
  "rtf",
  gWrapperFileContent_23_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'English.lproj/InfoPlist.strings'

const char * gWrapperFileContent_24_projectCreationFileWrapper = // 308 bytes
  "/* Localized versions of Info.plist keys */\n"
  "CFBundleName = \"cocoa%PROJECT_NAME%\";\n"
  "CFBundleShortVersionString = \"1.0.0\";\n"
  "CFBundleGetInfoString = \"Cocoa %PROJECT_NAME% version 1.0.0, Copyright __MyCompanyName__.\";\n"
  "NSHumanReadableCopyright = \"Copyright __MyCompanyName__.\";\n"
  "LSMinimumSystemVersion = \"10.3.9\";\n"
  "\n"
;

static const cRegularFileWrapper gWrapperFile_24_projectCreationFileWrapper = {
  "InfoPlist.strings",
  "strings",
  gWrapperFileContent_24_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- All files of 'English.lproj' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_12 [3] = {
  & gWrapperFile_23_projectCreationFileWrapper,
  & gWrapperFile_24_projectCreationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'English.lproj' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_12 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'English.lproj'

const cDirectoryWrapper gWrapperDirectory_12_projectCreationFileWrapper = {
  "English.lproj",
  2,
  gWrapperAllFiles_projectCreationFileWrapper_12,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_12
} ;

//---------------------------------------------------------------------------*

//--- All files of 'project_xcode' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_11 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'project_xcode' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_11 [2] = {
  & gWrapperDirectory_12_projectCreationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'project_xcode'

const cDirectoryWrapper gWrapperDirectory_11_projectCreationFileWrapper = {
  "project_xcode",
  0,
  gWrapperAllFiles_projectCreationFileWrapper_11,
  1,
  gWrapperAllDirectories_projectCreationFileWrapper_11
} ;

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_0 [12] = {
  & gWrapperDirectory_1_projectCreationFileWrapper,
  & gWrapperDirectory_2_projectCreationFileWrapper,
  & gWrapperDirectory_3_projectCreationFileWrapper,
  & gWrapperDirectory_4_projectCreationFileWrapper,
  & gWrapperDirectory_5_projectCreationFileWrapper,
  & gWrapperDirectory_6_projectCreationFileWrapper,
  & gWrapperDirectory_7_projectCreationFileWrapper,
  & gWrapperDirectory_8_projectCreationFileWrapper,
  & gWrapperDirectory_9_projectCreationFileWrapper,
  & gWrapperDirectory_10_projectCreationFileWrapper,
  & gWrapperDirectory_11_projectCreationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_projectCreationFileWrapper = {
  "",
  0,
  gWrapperAllFiles_projectCreationFileWrapper_0,
  11,
  gWrapperAllDirectories_projectCreationFileWrapper_0
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//     'build_bat' template of 'projectCreationFileWrapper' filewrapper      *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_build_bat (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "galgas -v all_" ;
    _result << var_cas_PROJECT_NAME ;
    _result << ".ggs\n"
    "pause\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      'all_ggs' template of 'projectCreationFileWrapper' filewrapper       *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_all_ggs (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "project all_" ;
    _result << var_cas_PROJECT_NAME ;
    _result << " :\n"
    "  lexique \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_lexique.ggs\" : makefile, xcode_tool, xcode_app ;\n"
    "  option \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_options.ggs\" : makefile, xcode_tool, xcode_app ;\n"
    "  semantics \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_semantics.ggs\" : makefile, xcode_tool ;\n"
    "  syntax \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_syntax.ggs\" : makefile, xcode_tool ;\n"
    "  grammar \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_grammar.ggs\" : makefile, xcode_tool ;\n"
    "  gui \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_cocoa.ggs\" : xcode_tool, xcode_app ;\n"
    "  program \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_program.ggs\" : makefile, xcode_tool ;\n"
    "  extern \"../hand_coded_sources/" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_computations.cpp\" : makefile, xcode_tool ;\n"
    "end project ;\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   'PROJECT_cocoa' template of 'projectCreationFileWrapper' filewrapper    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_PROJECT_cocoa (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "gui " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_cocoa \"cocoa\" :\n"
    "import grammar " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_grammar in \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_grammar.ggs\" ;\n"
    "end gui ;\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'PROJECT_grammar' template of 'projectCreationFileWrapper' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_PROJECT_grammar (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "grammar " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_grammar \"LL1\":\n"
    "import lexique " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_lexique in \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_lexique.ggs\" ;\n"
    "import option " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_options in \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_options.ggs\" ;\n"
    "import syntax " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_syntax in \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_syntax.ggs\" ;\n"
    "\n"
    "root <start_symbol> ;\n"
    "\n"
    "end grammar ;\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'PROJECT_lexique' template of 'projectCreationFileWrapper' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_PROJECT_lexique (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "lexique " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_lexique :\n"
    "\n"
    "# ADD YOUR CODE HERE\n"
    "\n"
    "end lexique ;\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'PROJECT_options' template of 'projectCreationFileWrapper' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_PROJECT_options (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "option " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_options :\n"
    "\n"
    "# ADD YOUR CODE HERE\n"
    "\n"
    "end option ;\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'PROJECT_program' template of 'projectCreationFileWrapper' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_PROJECT_program (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "program " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_program \"version 1.0.0\":\n"
    "\n"
    "#--- Import clauses\n"
    "import semantics " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_semantics in \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_semantics.ggs\" ;\n"
    "import grammar " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_grammar in \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_grammar.ggs\" ;\n"
    "\n"
    "#--- Prologue routine\n"
    "before {\n"
    "}\n"
    "\n"
    "#--- 'when' clauses\n"
    "when . \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "\"\n"
    "message \"a source text file with the ." ;
    _result << var_cas_PROJECT_NAME ;
    _result << " extension\"\n"
    "\?\?@lstring inSourceFile {\n"
    "  grammar " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_grammar in inSourceFile ;\n"
    "}\n"
    "\n"
    "#--- Epilogue routine\n"
    "after {\n"
    "}\n"
    "\n"
    "#---\n"
    "\n"
    "end program ;\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// 'PROJECT_semantics' template of 'projectCreationFileWrapper' filewrapper  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_PROJECT_semantics (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "semantics " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_semantics :\n"
    "  import option " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_options in \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_options.ggs\" ;\n"
    "\n"
    "# ADD YOUR CODE HERE\n"
    "\n"
    "end semantics ;\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'PROJECT_syntax' template of 'projectCreationFileWrapper' filewrapper    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_PROJECT_syntax (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "syntax " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_syntax :\n"
    "import lexique " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_lexique in \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_lexique.ggs\" ;\n"
    "import option " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_options in \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_options.ggs\" ;\n"
    "import semantics " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_semantics in \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_semantics.ggs\" ;\n"
    "\n"
    "# ADD YOUR CODE HERE\n"
    "\n"
    "nonterminal <start_symbol> ;\n"
    "\n"
    "rule <start_symbol> :\n"
    "# ADD YOUR CODE HERE\n"
    "end rule ;\n"
    "\n"
    "end syntax ;\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'PROJECT_computations' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_PROJECT_computations (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                             " ;
    _result << var_cas_PROJECT_NAME ;
    _result << " Project                               *\n"
    "//                   Generated by GALGAS Project Creation                    *\n"
    "//                      march 29th, 2008, at 21h55'21\"                       *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "#include \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_semantics.h\"\n"
    "#include \"utilities/MF_MemoryControl.h\"\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "// ADD YOUR CODE HERE\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_makefile' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_makefile_macosx_makefile (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "# MAKEFILE for building \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "\" 32-bits command line tools for Mac OS X   *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                               Executables                                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "EXECUTABLE := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "\n"
    "EXECUTABLE_DEBUG := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_debug\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                         Object files directories                          *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "OBJECTS_DIR       := objects\n"
    "DEBUG_OBJECTS_DIR := debug_objects\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                  Install directory (for \"install\" goal)                   *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "INSTALL_DIR := /usr/local/bin\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                       Linker Options for Mac OS X                         *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "PLATFORM_LINKER_OPTIONS :=\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                        Include Common Definitions                         *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                      Include gcc tools for MAC OS X                       *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/macosx_gcc_tools_32.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                Include makefile that performs actual work                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_makefile64' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_makefile_macosx_makefile64 (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "# MAKEFILE for building \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "\" 64-bits command line tools for Mac OS X   *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                               Executables                                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "EXECUTABLE := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "64\n"
    "EXECUTABLE_DEBUG := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "64_debug\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                         Object files directories                          *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "OBJECTS_DIR       := objects64\n"
    "DEBUG_OBJECTS_DIR := debug_objects64\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                  Install directory (for \"install\" goal)                   *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "INSTALL_DIR := /usr/local/bin\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                       Linker Options for Mac OS X                         *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "PLATFORM_LINKER_OPTIONS :=\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                        Include Common Definitions                         *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                      Include gcc tools for MAC OS X                       *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/macosx_gcc_tools_64.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                Include makefile that performs actual work                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_ppc_makefile' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_makefile_macosx_ppc_makefile (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "# MAKEFILE for building \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "\" 32-bits command line tools for Mac OS X   *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                               Executables                                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "EXECUTABLE := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "\n"
    "EXECUTABLE_DEBUG := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_debug\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                         Object files directories                          *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "OBJECTS_DIR       := objects\n"
    "DEBUG_OBJECTS_DIR := debug_objects\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                  Install directory (for \"install\" goal)                   *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "INSTALL_DIR := /usr/local/bin\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                       Linker Options for Mac OS X                         *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "PLATFORM_LINKER_OPTIONS :=\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                        Include Common Definitions                         *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                      Include gcc tools for MAC OS X                       *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/macosx_ppc_gcc_tools_32.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                Include makefile that performs actual work                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_ppc_makefile64' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_makefile_macosx_ppc_makefile64 (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "# MAKEFILE for building \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "\" 64-bits command line tools for Mac OS X   *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                               Executables                                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "EXECUTABLE := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "64\n"
    "EXECUTABLE_DEBUG := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "64_debug\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                         Object files directories                          *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "OBJECTS_DIR       := objects64\n"
    "DEBUG_OBJECTS_DIR := debug_objects64\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                  Install directory (for \"install\" goal)                   *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "INSTALL_DIR := /usr/local/bin\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                       Linker Options for Mac OS X                         *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "PLATFORM_LINKER_OPTIONS :=\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                        Include Common Definitions                         *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                      Include gcc tools for MAC OS X                       *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/macosx_ppc_gcc_tools_64.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                Include makefile that performs actual work                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_i386_makefile' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_makefile_macosx_i386_makefile (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "# MAKEFILE for building \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "\" 32-bits command line tools for Mac OS X   *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                               Executables                                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "EXECUTABLE := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "\n"
    "EXECUTABLE_DEBUG := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_debug\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                         Object files directories                          *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "OBJECTS_DIR       := objects\n"
    "DEBUG_OBJECTS_DIR := debug_objects\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                  Install directory (for \"install\" goal)                   *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "INSTALL_DIR := /usr/local/bin\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                       Linker Options for Mac OS X                         *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "PLATFORM_LINKER_OPTIONS :=\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                        Include Common Definitions                         *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                      Include gcc tools for MAC OS X                       *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/macosx_i386_gcc_tools_32.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                Include makefile that performs actual work                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_i386_makefile64' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_makefile_macosx_i386_makefile64 (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "# MAKEFILE for building \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "\" 64-bits command line tools for Mac OS X   *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                               Executables                                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "EXECUTABLE := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "64\n"
    "EXECUTABLE_DEBUG := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "64_debug\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                         Object files directories                          *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "OBJECTS_DIR       := objects64\n"
    "DEBUG_OBJECTS_DIR := debug_objects64\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                  Install directory (for \"install\" goal)                   *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "INSTALL_DIR := /usr/local/bin\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                       Linker Options for Mac OS X                         *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "PLATFORM_LINKER_OPTIONS :=\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                        Include Common Definitions                         *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                      Include gcc tools for MAC OS X                       *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/macosx_i386_gcc_tools_64.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                Include makefile that performs actual work                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_universal_makefile' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_makefile_macosx_universal_makefile (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "# MAKEFILE for building \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "\" 32-bits command line tools for Mac OS X   *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                               Executables                                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "EXECUTABLE := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "\n"
    "EXECUTABLE_DEBUG := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_debug\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                  Install directory (for \"install\" goal)                   *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "INSTALL_DIR := /usr/local/bin\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                        'all' goal                                         *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "all:$(EXECUTABLE) $(EXECUTABLE_DEBUG)\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                        'clean' goal                                       *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "clean:\n"
    "\trm -f $(EXECUTABLE) $(EXECUTABLE_DEBUG)\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                      Build ppc executable                                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "../makefile_macosx_ppc/%:\n"
    "\t$(MAKE) -C ../makefile_macosx_ppc $<\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                      Build i386 executable                                *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "../makefile_macosx_i386/%:\n"
    "\t$(MAKE) -C ../makefile_macosx_i386 $<\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                      Build EXECUTABLES                                    *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "$(EXECUTABLE):../makefile_macosx_ppc/$(EXECUTABLE) ../makefile_macosx_i386/$(EXECUTABLE)\n"
    "\tlipo -create ../makefile_macosx_ppc/$(EXECUTABLE) ../makefile_macosx_i386/$(EXECUTABLE) -output $(EXECUTABLE)\n"
    "\tlipo -info $(EXECUTABLE)\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "$(EXECUTABLE_DEBUG):../makefile_macosx_ppc/$(EXECUTABLE_DEBUG) ../makefile_macosx_i386/$(EXECUTABLE_DEBUG)\n"
    "\tlipo -create ../makefile_macosx_ppc/$(EXECUTABLE_DEBUG) ../makefile_macosx_i386/$(EXECUTABLE_DEBUG) -output $(EXECUTABLE_DEBUG)\n"
    "\tlipo -info $(EXECUTABLE_DEBUG)\n"
    "\n"
    "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_universal_makefile64' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_makefile_macosx_universal_makefile64 (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "# MAKEFILE for building \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "\" 64-bits command line tools for Mac OS X   *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                               Executables                                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "EXECUTABLE := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "64\n"
    "EXECUTABLE_DEBUG := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "64_debug\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                  Install directory (for \"install\" goal)                   *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "INSTALL_DIR := /usr/local/bin\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                        'all' goal                                         *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "all:$(EXECUTABLE) $(EXECUTABLE_DEBUG)\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                        'clean' goal                                       *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "clean:\n"
    "\trm -f $(EXECUTABLE) $(EXECUTABLE_DEBUG)\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                      Build ppc executable                                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "../makefile_macosx_ppc/%:\n"
    "\t$(MAKE) -C ../makefile_macosx_ppc -f makefile64 $<\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                      Build i386 executable                                *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "../makefile_macosx_i386/%:\n"
    "\t$(MAKE) -C ../makefile_macosx_i386 -f makefile64 $<\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                      Build EXECUTABLES                                    *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "$(EXECUTABLE):../makefile_macosx_ppc/$(EXECUTABLE) ../makefile_macosx_i386/$(EXECUTABLE)\n"
    "\tlipo -create ../makefile_macosx_ppc/$(EXECUTABLE) ../makefile_macosx_i386/$(EXECUTABLE) -output $(EXECUTABLE)\n"
    "\tlipo -info $(EXECUTABLE)\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "$(EXECUTABLE_DEBUG):../makefile_macosx_ppc/$(EXECUTABLE_DEBUG) ../makefile_macosx_i386/$(EXECUTABLE_DEBUG)\n"
    "\tlipo -create ../makefile_macosx_ppc/$(EXECUTABLE_DEBUG) ../makefile_macosx_i386/$(EXECUTABLE_DEBUG) -output $(EXECUTABLE_DEBUG)\n"
    "\tlipo -info $(EXECUTABLE_DEBUG)\n"
    "\n"
    "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_mingw_on_macosx_makefile' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_makefile_mingw_on_macosx_makefile (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#MAKEFILE for building \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "\" command line tools for Win32, built on Mac OS X*\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                               Executables                                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "EXECUTABLE := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << ".exe\n"
    "EXECUTABLE_DEBUG := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_debug.exe\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                         Object files directories                          *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "OBJECTS_DIR       := objects\n"
    "DEBUG_OBJECTS_DIR := debug_objects\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                         Linker Options for Win32                          *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "PLATFORM_LINKER_OPTIONS := -lcomdlg32\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                        Include Common Definitions                         *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                     Include MinGW tools for MAC OS X                      *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/mingw_on_macosx_gcc_tools_32.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                Include makefile that performs actual work                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_msys_on_win32_makefile' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_makefile_msys_on_win32_makefile (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#MAKEFILE for building \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "\" command line tools for Win32, built with MSYS*\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                               Executables                                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "EXECUTABLE := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << ".exe\n"
    "EXECUTABLE_DEBUG := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_debug.exe\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#              Install directory (for \"install\" goal)                       *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "INSTALL_DIR := /C/WINDOWS/system32\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                         Object files directories                          *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "OBJECTS_DIR       := objects\n"
    "DEBUG_OBJECTS_DIR := debug_objects\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                         Linker Options for Win32                          *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "PLATFORM_LINKER_OPTIONS := -lcomdlg32\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                        Include Common Definitions                         *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                       Include MinGW tools for MSYS                        *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/msys_on_win32.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                Include makefile that performs actual work                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_unix_makefile' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_makefile_unix_makefile (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#    MAKEFILE for building \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "\" 32-bit command line tools for Unix     *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                               Executables                                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "EXECUTABLE := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "\n"
    "EXECUTABLE_DEBUG := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_debug\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                         Object files directories                          *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "OBJECTS_DIR       := objects\n"
    "DEBUG_OBJECTS_DIR := debug_objects\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                         Linker Options for Unix                           *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "PLATFORM_LINKER_OPTIONS := \n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                        Include Common Definitions                         *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                            Include Unix tools                             *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/unix_gcc_tools_32.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                Include makefile that performs actual work                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_unix_makefile64' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_makefile_unix_makefile64 (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#    MAKEFILE for building \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "\" 64-bit command line tools for Unix     *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                               Executables                                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "EXECUTABLE := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "64\n"
    "EXECUTABLE_DEBUG := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "64_debug\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                         Object files directories                          *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "OBJECTS_DIR       := objects64\n"
    "DEBUG_OBJECTS_DIR := debug_objects64\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                         Linker Options for Unix                           *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "PLATFORM_LINKER_OPTIONS := \n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                        Include Common Definitions                         *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                            Include Unix tools                             *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/unix_gcc_tools_64.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                Include makefile that performs actual work                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_x86linux_on_macosx_makefile' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_makefile_x86linux_on_macosx_makefile (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#MAKEFILE for building \"" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "\" 32-bit command line tools for x86 Linux, built on Mac OS X*\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                               Executables                                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "EXECUTABLE := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "\n"
    "EXECUTABLE_DEBUG := " ;
    _result << var_cas_PROJECT_NAME ;
    _result << "_debug\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                         Object files directories                          *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "OBJECTS_DIR       := objects\n"
    "DEBUG_OBJECTS_DIR := debug_objects\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                  Install directory (for \"install\" goal)                   *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "INSTALL_DIR := /usr/local/bin\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                       Link Options for i386 Linux                         *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "PLATFORM_LINKER_OPTIONS :=\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                        Include Common Definitions                         *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                  Include i386 Linux tools for MAC OS X                    *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/x86linux_on_macosx_gcc_tools_32.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n"
    "#                                                                           *\n"
    "#                Include makefile that performs actual work                 *\n"
    "#                                                                           *\n"
    "#---------------------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
    "\n"
    "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    'info_plist' template of 'projectCreationFileWrapper' filewrapper      *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_info_plist (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "<\?xml version=\"1.0\" encoding=\"UTF-8\"\?>\n"
    "<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n"
    "<plist version=\"1.0\">\n"
    "<dict>\n"
    "     <key>CFBundleDevelopmentRegion</key>\n"
    "     <string>English</string>\n"
    "     <key>CFBundleExecutable</key>\n"
    "     <string>${EXECUTABLE_NAME}</string>\n"
    "     <key>CFBundleIconFile</key>\n"
    "     <string></string>\n"
    "     <key>CFBundleIdentifier</key>\n"
    "     <string>com.yourcompany." ;
    _result << var_cas_PROJECT_NAME ;
    _result << "</string>\n"
    "     <key>CFBundleInfoDictionaryVersion</key>\n"
    "     <string>6.0</string>\n"
    "     <key>CFBundleName</key>\n"
    "     <string>${PRODUCT_NAME}</string>\n"
    "     <key>CFBundlePackageType</key>\n"
    "     <string>APPL</string>\n"
    "     <key>CFBundleSignature</key>\n"
    "     <string>\?\?\?\?</string>\n"
    "     <key>CFBundleVersion</key>\n"
    "     <string>1.0</string>\n"
    "     <key>NSMainNibFile</key>\n"
    "     <string>MainMenu</string>\n"
    "     <key>NSPrincipalClass</key>\n"
    "     <string>NSApplication</string>\n"
    "    <key>CFBundleDocumentTypes</key>\n"
    "    <array>\n"
    "        <dict>\n"
    "            <key>CFBundleTypeExtensions</key>\n"
    "            <array>\n"
    "                <string>" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "</string>\n"
    "            </array>\n"
    "            <key>CFBundleTypeName</key>\n"
    "            <string>" ;
    _result << var_cas_PROJECT_NAME ;
    _result << " Source</string>\n"
    "            <key>CFBundleTypeOSTypes</key>\n"
    "            <array>\n"
    "                <string>TEXT</string>\n"
    "            </array>\n"
    "            <key>CFBundleTypeRole</key>\n"
    "            <string>Editor</string>\n"
    "            <key>LSTypeIsPackage</key>\n"
    "            <false/>\n"
    "            <key>NSDocumentClass</key>\n"
    "            <string>OC_GGS_Document</string>\n"
    "        </dict>\n"
    "    </array>\n"
    "</dict>\n"
    "</plist>\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'cocoa_infoPlist_strings' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_projectCreationFileWrapper_cocoa_infoPlist_strings (const GGS_string& var_cas_PROJECT_NAME) {
  C_String _result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    _result << "/* Localized versions of Info.plist keys */\n"
    "CFBundleName = \"cocoa" ;
    _result << var_cas_PROJECT_NAME ;
    _result << "\";\n"
    "CFBundleShortVersionString = \"1.0.0\";\n"
    "CFBundleGetInfoString = \"Cocoa " ;
    _result << var_cas_PROJECT_NAME ;
    _result << " version 1.0.0, Copyright __MyCompanyName__.\";\n"
    "NSHumanReadableCopyright = \"Copyright __MyCompanyName__.\";\n"
    "LSMinimumSystemVersion = \"10.3.9\";\n"
    "\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "performProjectCreation"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performProjectCreation (C_Compiler & inLexique,
                                const GGS_string  var_cas_inProjectName COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_performProjectCreation at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_common_files_for_make_DIR ;
  var_cas_common_files_for_make_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/common_files_for_make")) ;
  GGS_string var_cas_galgas_sources_DIR ;
  var_cas_galgas_sources_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/galgas_sources")) ;
  const GGS_string _temp_4695 = var_cas_galgas_sources_DIR ;
  if (_temp_4695.isBuilt ()) {
    _temp_4695 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (67)) ;
  }
  const GGS_string _temp_4777 = _template_filewrapper_projectCreationFileWrapper_all_ggs (var_cas_inProjectName) ;
  if (_temp_4777.isBuilt ()) {
    _temp_4777 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/all_"))).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string (".ggs")) COMMA_SOURCE_FILE_AT_LINE (68)) ;
  }
  const GGS_string _temp_4917 = _template_filewrapper_projectCreationFileWrapper_PROJECT_cocoa (var_cas_inProjectName) ;
  if (_temp_4917.isBuilt ()) {
    _temp_4917 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string ("_cocoa.ggs")) COMMA_SOURCE_FILE_AT_LINE (69)) ;
  }
  const GGS_string _temp_5061 = _template_filewrapper_projectCreationFileWrapper_PROJECT_grammar (var_cas_inProjectName) ;
  if (_temp_5061.isBuilt ()) {
    _temp_5061 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string ("_grammar.ggs")) COMMA_SOURCE_FILE_AT_LINE (70)) ;
  }
  const GGS_string _temp_5207 = _template_filewrapper_projectCreationFileWrapper_PROJECT_lexique (var_cas_inProjectName) ;
  if (_temp_5207.isBuilt ()) {
    _temp_5207 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string ("_lexique.ggs")) COMMA_SOURCE_FILE_AT_LINE (71)) ;
  }
  const GGS_string _temp_5353 = _template_filewrapper_projectCreationFileWrapper_PROJECT_options (var_cas_inProjectName) ;
  if (_temp_5353.isBuilt ()) {
    _temp_5353 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string ("_options.ggs")) COMMA_SOURCE_FILE_AT_LINE (72)) ;
  }
  const GGS_string _temp_5499 = _template_filewrapper_projectCreationFileWrapper_PROJECT_program (var_cas_inProjectName) ;
  if (_temp_5499.isBuilt ()) {
    _temp_5499 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string ("_program.ggs")) COMMA_SOURCE_FILE_AT_LINE (73)) ;
  }
  const GGS_string _temp_5647 = _template_filewrapper_projectCreationFileWrapper_PROJECT_semantics (var_cas_inProjectName) ;
  if (_temp_5647.isBuilt ()) {
    _temp_5647 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string ("_semantics.ggs")) COMMA_SOURCE_FILE_AT_LINE (74)) ;
  }
  const GGS_string _temp_5794 = _template_filewrapper_projectCreationFileWrapper_PROJECT_syntax (var_cas_inProjectName) ;
  if (_temp_5794.isBuilt ()) {
    _temp_5794 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string ("_syntax.ggs")) COMMA_SOURCE_FILE_AT_LINE (75)) ;
  }
  const GGS_string _temp_5933 = _template_filewrapper_projectCreationFileWrapper_build_bat (var_cas_inProjectName) ;
  if (_temp_5933.isBuilt ()) {
    _temp_5933 (HERE)->method_writeToFile (inLexique, (var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/build.bat")) COMMA_SOURCE_FILE_AT_LINE (76)) ;
  }
  GGS_string var_cas_hand_coded_sources_DIR ;
  var_cas_hand_coded_sources_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/hand_coded_sources")) ;
  const GGS_string _temp_6109 = var_cas_hand_coded_sources_DIR ;
  if (_temp_6109.isBuilt ()) {
    _temp_6109 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (79)) ;
  }
  const GGS_string _temp_6204 = _template_filewrapper_projectCreationFileWrapper_PROJECT_computations (var_cas_inProjectName) ;
  if (_temp_6204.isBuilt ()) {
    _temp_6204 (HERE)->method_writeToFile (inLexique, (((var_cas_hand_coded_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string ("_computations.cpp")) COMMA_SOURCE_FILE_AT_LINE (80)) ;
  }
  GGS_string var_cas_makefile_macosx_DIR ;
  var_cas_makefile_macosx_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/makefile_macosx")) ;
  const GGS_string _temp_6399 = var_cas_makefile_macosx_DIR ;
  if (_temp_6399.isBuilt ()) {
    _temp_6399 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (83)) ;
  }
  const GGS_string _temp_6501 = GGS_string (gWrapperFileContent_0_projectCreationFileWrapper) ;
  if (_temp_6501.isBuilt ()) {
    _temp_6501 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_DIR).operator_concat (GGS_string ("/build.command")) COMMA_SOURCE_FILE_AT_LINE (84)) ;
  }
  const GGS_string _temp_6642 = GGS_string (gWrapperFileContent_2_projectCreationFileWrapper) ;
  if (_temp_6642.isBuilt ()) {
    _temp_6642 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_DIR).operator_concat (GGS_string ("/clean.command")) COMMA_SOURCE_FILE_AT_LINE (85)) ;
  }
  const GGS_string _temp_6785 = GGS_string (gWrapperFileContent_1_projectCreationFileWrapper) ;
  if (_temp_6785.isBuilt ()) {
    _temp_6785 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_DIR).operator_concat (GGS_string ("/build64.command")) COMMA_SOURCE_FILE_AT_LINE (86)) ;
  }
  const GGS_string _temp_6930 = GGS_string (gWrapperFileContent_3_projectCreationFileWrapper) ;
  if (_temp_6930.isBuilt ()) {
    _temp_6930 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_DIR).operator_concat (GGS_string ("/clean64.command")) COMMA_SOURCE_FILE_AT_LINE (87)) ;
  }
  const GGS_string _temp_7070 = _template_filewrapper_projectCreationFileWrapper_makefile_macosx_makefile (var_cas_inProjectName) ;
  if (_temp_7070.isBuilt ()) {
    _temp_7070 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_macosx_DIR).operator_concat (GGS_string ("/makefile")) COMMA_SOURCE_FILE_AT_LINE (88)) ;
  }
  const GGS_string _temp_7205 = _template_filewrapper_projectCreationFileWrapper_makefile_macosx_makefile64 (var_cas_inProjectName) ;
  if (_temp_7205.isBuilt ()) {
    _temp_7205 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_macosx_DIR).operator_concat (GGS_string ("/makefile64")) COMMA_SOURCE_FILE_AT_LINE (89)) ;
  }
  GGS_string var_cas_makefile_macosx_ppc_DIR ;
  var_cas_makefile_macosx_ppc_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/makefile_macosx_ppc")) ;
  const GGS_string _temp_7387 = var_cas_makefile_macosx_ppc_DIR ;
  if (_temp_7387.isBuilt ()) {
    _temp_7387 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (92)) ;
  }
  const GGS_string _temp_7493 = GGS_string (gWrapperFileContent_8_projectCreationFileWrapper) ;
  if (_temp_7493.isBuilt ()) {
    _temp_7493 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_ppc_DIR).operator_concat (GGS_string ("/build.command")) COMMA_SOURCE_FILE_AT_LINE (93)) ;
  }
  const GGS_string _temp_7642 = GGS_string (gWrapperFileContent_10_projectCreationFileWrapper) ;
  if (_temp_7642.isBuilt ()) {
    _temp_7642 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_ppc_DIR).operator_concat (GGS_string ("/clean.command")) COMMA_SOURCE_FILE_AT_LINE (94)) ;
  }
  const GGS_string _temp_7793 = GGS_string (gWrapperFileContent_9_projectCreationFileWrapper) ;
  if (_temp_7793.isBuilt ()) {
    _temp_7793 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_ppc_DIR).operator_concat (GGS_string ("/build64.command")) COMMA_SOURCE_FILE_AT_LINE (95)) ;
  }
  const GGS_string _temp_7946 = GGS_string (gWrapperFileContent_11_projectCreationFileWrapper) ;
  if (_temp_7946.isBuilt ()) {
    _temp_7946 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_ppc_DIR).operator_concat (GGS_string ("/clean64.command")) COMMA_SOURCE_FILE_AT_LINE (96)) ;
  }
  const GGS_string _temp_8094 = _template_filewrapper_projectCreationFileWrapper_makefile_macosx_ppc_makefile (var_cas_inProjectName) ;
  if (_temp_8094.isBuilt ()) {
    _temp_8094 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_macosx_ppc_DIR).operator_concat (GGS_string ("/makefile")) COMMA_SOURCE_FILE_AT_LINE (97)) ;
  }
  const GGS_string _temp_8237 = _template_filewrapper_projectCreationFileWrapper_makefile_macosx_ppc_makefile64 (var_cas_inProjectName) ;
  if (_temp_8237.isBuilt ()) {
    _temp_8237 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_macosx_ppc_DIR).operator_concat (GGS_string ("/makefile64")) COMMA_SOURCE_FILE_AT_LINE (98)) ;
  }
  GGS_string var_cas_makefile_macosx_i386_DIR ;
  var_cas_makefile_macosx_i386_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/makefile_macosx_i386")) ;
  const GGS_string _temp_8427 = var_cas_makefile_macosx_i386_DIR ;
  if (_temp_8427.isBuilt ()) {
    _temp_8427 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (101)) ;
  }
  const GGS_string _temp_8534 = GGS_string (gWrapperFileContent_4_projectCreationFileWrapper) ;
  if (_temp_8534.isBuilt ()) {
    _temp_8534 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_i386_DIR).operator_concat (GGS_string ("/build.command")) COMMA_SOURCE_FILE_AT_LINE (102)) ;
  }
  const GGS_string _temp_8685 = GGS_string (gWrapperFileContent_6_projectCreationFileWrapper) ;
  if (_temp_8685.isBuilt ()) {
    _temp_8685 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_i386_DIR).operator_concat (GGS_string ("/clean.command")) COMMA_SOURCE_FILE_AT_LINE (103)) ;
  }
  const GGS_string _temp_8838 = GGS_string (gWrapperFileContent_5_projectCreationFileWrapper) ;
  if (_temp_8838.isBuilt ()) {
    _temp_8838 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_i386_DIR).operator_concat (GGS_string ("/build64.command")) COMMA_SOURCE_FILE_AT_LINE (104)) ;
  }
  const GGS_string _temp_8993 = GGS_string (gWrapperFileContent_7_projectCreationFileWrapper) ;
  if (_temp_8993.isBuilt ()) {
    _temp_8993 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_i386_DIR).operator_concat (GGS_string ("/clean64.command")) COMMA_SOURCE_FILE_AT_LINE (105)) ;
  }
  const GGS_string _temp_9143 = _template_filewrapper_projectCreationFileWrapper_makefile_macosx_i386_makefile (var_cas_inProjectName) ;
  if (_temp_9143.isBuilt ()) {
    _temp_9143 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_macosx_i386_DIR).operator_concat (GGS_string ("/makefile")) COMMA_SOURCE_FILE_AT_LINE (106)) ;
  }
  const GGS_string _temp_9288 = _template_filewrapper_projectCreationFileWrapper_makefile_macosx_i386_makefile64 (var_cas_inProjectName) ;
  if (_temp_9288.isBuilt ()) {
    _temp_9288 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_macosx_i386_DIR).operator_concat (GGS_string ("/makefile64")) COMMA_SOURCE_FILE_AT_LINE (107)) ;
  }
  GGS_string var_cas_makefile_macosx_universal_DIR ;
  var_cas_makefile_macosx_universal_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/makefile_macosx_universal")) ;
  const GGS_string _temp_9499 = var_cas_makefile_macosx_universal_DIR ;
  if (_temp_9499.isBuilt ()) {
    _temp_9499 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (110)) ;
  }
  const GGS_string _temp_9611 = GGS_string (gWrapperFileContent_12_projectCreationFileWrapper) ;
  if (_temp_9611.isBuilt ()) {
    _temp_9611 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_universal_DIR).operator_concat (GGS_string ("/build.command")) COMMA_SOURCE_FILE_AT_LINE (111)) ;
  }
  const GGS_string _temp_9773 = GGS_string (gWrapperFileContent_14_projectCreationFileWrapper) ;
  if (_temp_9773.isBuilt ()) {
    _temp_9773 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_universal_DIR).operator_concat (GGS_string ("/clean.command")) COMMA_SOURCE_FILE_AT_LINE (112)) ;
  }
  const GGS_string _temp_9937 = GGS_string (gWrapperFileContent_13_projectCreationFileWrapper) ;
  if (_temp_9937.isBuilt ()) {
    _temp_9937 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_universal_DIR).operator_concat (GGS_string ("/build64.command")) COMMA_SOURCE_FILE_AT_LINE (113)) ;
  }
  const GGS_string _temp_10102 = GGS_string (gWrapperFileContent_15_projectCreationFileWrapper) ;
  if (_temp_10102.isBuilt ()) {
    _temp_10102 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_universal_DIR).operator_concat (GGS_string ("/clean64.command")) COMMA_SOURCE_FILE_AT_LINE (114)) ;
  }
  const GGS_string _temp_10263 = _template_filewrapper_projectCreationFileWrapper_makefile_macosx_universal_makefile (var_cas_inProjectName) ;
  if (_temp_10263.isBuilt ()) {
    _temp_10263 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_macosx_universal_DIR).operator_concat (GGS_string ("/makefile")) COMMA_SOURCE_FILE_AT_LINE (115)) ;
  }
  const GGS_string _temp_10419 = _template_filewrapper_projectCreationFileWrapper_makefile_macosx_universal_makefile64 (var_cas_inProjectName) ;
  if (_temp_10419.isBuilt ()) {
    _temp_10419 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_macosx_universal_DIR).operator_concat (GGS_string ("/makefile64")) COMMA_SOURCE_FILE_AT_LINE (116)) ;
  }
  GGS_string var_cas_makefile_mingw_on_macosx_DIR ;
  var_cas_makefile_mingw_on_macosx_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/makefile_mingw_on_macosx")) ;
  const GGS_string _temp_10632 = var_cas_makefile_mingw_on_macosx_DIR ;
  if (_temp_10632.isBuilt ()) {
    _temp_10632 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (119)) ;
  }
  const GGS_string _temp_10743 = GGS_string (gWrapperFileContent_16_projectCreationFileWrapper) ;
  if (_temp_10743.isBuilt ()) {
    _temp_10743 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_mingw_on_macosx_DIR).operator_concat (GGS_string ("/build.command")) COMMA_SOURCE_FILE_AT_LINE (120)) ;
  }
  const GGS_string _temp_10902 = GGS_string (gWrapperFileContent_17_projectCreationFileWrapper) ;
  if (_temp_10902.isBuilt ()) {
    _temp_10902 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_mingw_on_macosx_DIR).operator_concat (GGS_string ("/clean.command")) COMMA_SOURCE_FILE_AT_LINE (121)) ;
  }
  const GGS_string _temp_11058 = _template_filewrapper_projectCreationFileWrapper_makefile_mingw_on_macosx_makefile (var_cas_inProjectName) ;
  if (_temp_11058.isBuilt ()) {
    _temp_11058 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_mingw_on_macosx_DIR).operator_concat (GGS_string ("/makefile")) COMMA_SOURCE_FILE_AT_LINE (122)) ;
  }
  GGS_string var_cas_makefile_mingw_on_win32_DIR ;
  var_cas_makefile_mingw_on_win32_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/makefile_msys_on_win32")) ;
  const GGS_string _temp_11261 = var_cas_makefile_mingw_on_win32_DIR ;
  if (_temp_11261.isBuilt ()) {
    _temp_11261 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (125)) ;
  }
  const GGS_string _temp_11356 = GGS_string (gWrapperFileContent_18_projectCreationFileWrapper) ;
  if (_temp_11356.isBuilt ()) {
    _temp_11356 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_mingw_on_win32_DIR).operator_concat (GGS_string ("/build.bat")) COMMA_SOURCE_FILE_AT_LINE (126)) ;
  }
  const GGS_string _temp_11494 = GGS_string (gWrapperFileContent_19_projectCreationFileWrapper) ;
  if (_temp_11494.isBuilt ()) {
    _temp_11494 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_mingw_on_win32_DIR).operator_concat (GGS_string ("/clean.bat")) COMMA_SOURCE_FILE_AT_LINE (127)) ;
  }
  const GGS_string _temp_11634 = GGS_string (gWrapperFileContent_20_projectCreationFileWrapper) ;
  if (_temp_11634.isBuilt ()) {
    _temp_11634 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_mingw_on_win32_DIR).operator_concat (GGS_string ("/install.bat")) COMMA_SOURCE_FILE_AT_LINE (128)) ;
  }
  const GGS_string _temp_11785 = _template_filewrapper_projectCreationFileWrapper_makefile_msys_on_win32_makefile (var_cas_inProjectName) ;
  if (_temp_11785.isBuilt ()) {
    _temp_11785 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_mingw_on_win32_DIR).operator_concat (GGS_string ("/makefile")) COMMA_SOURCE_FILE_AT_LINE (129)) ;
  }
  GGS_string var_cas_makefile_unix_DIR ;
  var_cas_makefile_unix_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/makefile_unix")) ;
  const GGS_string _temp_11949 = var_cas_makefile_unix_DIR ;
  if (_temp_11949.isBuilt ()) {
    _temp_11949 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (132)) ;
  }
  const GGS_string _temp_12046 = _template_filewrapper_projectCreationFileWrapper_makefile_unix_makefile (var_cas_inProjectName) ;
  if (_temp_12046.isBuilt ()) {
    _temp_12046 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_unix_DIR).operator_concat (GGS_string ("/makefile")) COMMA_SOURCE_FILE_AT_LINE (133)) ;
  }
  const GGS_string _temp_12177 = _template_filewrapper_projectCreationFileWrapper_makefile_unix_makefile64 (var_cas_inProjectName) ;
  if (_temp_12177.isBuilt ()) {
    _temp_12177 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_unix_DIR).operator_concat (GGS_string ("/makefile64")) COMMA_SOURCE_FILE_AT_LINE (134)) ;
  }
  GGS_string var_cas_makefile_x86linux_on_macosx_DIR ;
  var_cas_makefile_x86linux_on_macosx_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/makefile_x86linux_on_macosx")) ;
  const GGS_string _temp_12393 = var_cas_makefile_x86linux_on_macosx_DIR ;
  if (_temp_12393.isBuilt ()) {
    _temp_12393 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (137)) ;
  }
  const GGS_string _temp_12507 = GGS_string (gWrapperFileContent_21_projectCreationFileWrapper) ;
  if (_temp_12507.isBuilt ()) {
    _temp_12507 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_x86linux_on_macosx_DIR).operator_concat (GGS_string ("/build.command")) COMMA_SOURCE_FILE_AT_LINE (138)) ;
  }
  const GGS_string _temp_12673 = GGS_string (gWrapperFileContent_22_projectCreationFileWrapper) ;
  if (_temp_12673.isBuilt ()) {
    _temp_12673 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_x86linux_on_macosx_DIR).operator_concat (GGS_string ("/clean.command")) COMMA_SOURCE_FILE_AT_LINE (139)) ;
  }
  const GGS_string _temp_12836 = _template_filewrapper_projectCreationFileWrapper_makefile_x86linux_on_macosx_makefile (var_cas_inProjectName) ;
  if (_temp_12836.isBuilt ()) {
    _temp_12836 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_x86linux_on_macosx_DIR).operator_concat (GGS_string ("/makefile")) COMMA_SOURCE_FILE_AT_LINE (140)) ;
  }
  GGS_string var_cas_projectxcode_DIR ;
  var_cas_projectxcode_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/project_xcode")) ;
  const GGS_string _temp_13036 = (((var_cas_projectxcode_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string (".xcodeproj")) ;
  if (_temp_13036.isBuilt ()) {
    _temp_13036 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (143)) ;
  }
  const GGS_string _temp_13121 = _template_filewrapper_projectCreationFileWrapper_info_plist (var_cas_inProjectName) ;
  if (_temp_13121.isBuilt ()) {
    _temp_13121 (HERE)->method_writeToFile (inLexique, (var_cas_projectxcode_DIR).operator_concat (GGS_string ("/Info.plist")) COMMA_SOURCE_FILE_AT_LINE (144)) ;
  }
  const GGS_string _temp_13209 = (var_cas_projectxcode_DIR).operator_concat (GGS_string ("/English.lproj")) ;
  if (_temp_13209.isBuilt ()) {
    _temp_13209 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (145)) ;
  }
  const GGS_string _temp_13311 = GGS_string (gWrapperFileContent_23_projectCreationFileWrapper) ;
  if (_temp_13311.isBuilt ()) {
    _temp_13311 (HERE)->method_writeToFile (inLexique, (var_cas_projectxcode_DIR).operator_concat (GGS_string ("/English.lproj/Credits.rtf")) COMMA_SOURCE_FILE_AT_LINE (146)) ;
  }
  const GGS_string _temp_13457 = _template_filewrapper_projectCreationFileWrapper_cocoa_infoPlist_strings (var_cas_inProjectName) ;
  if (_temp_13457.isBuilt ()) {
    _temp_13457 (HERE)->method_writeToFile (inLexique, (var_cas_projectxcode_DIR).operator_concat (GGS_string ("/English.lproj/InfoPlist.strings")) COMMA_SOURCE_FILE_AT_LINE (147)) ;
  }
  inLexique.printMessage (GGS_string ("*** DONE ***\n") COMMA_SOURCE_FILE_AT_LINE (149)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_performProjectCreation\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "projectCreation"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_projectCreation (C_Compiler & inLexique,
                                const GGS_string  var_cas_inProjectName COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_projectCreation at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (((var_cas_inProjectName.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (157))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
    inLexique.printMessage (((GGS_string ("*** PERFORM PROJECT CREATION (--create-project=")).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string (" option) ***\n")) COMMA_SOURCE_FILE_AT_LINE (158)) ;
    GGS_bool var_cas_ok ;
    var_cas_ok = var_cas_inProjectName.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (160)).reader_isalpha (inLexique COMMA_SOURCE_FILE_AT_LINE (160)) ;
    GGS_uint  var_cas_index ;
    var_cas_index = GGS_uint (1U) ;
    GGS_uint _variant_14209 = var_cas_inProjectName.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (162)) ;
    GGS_bool _condition_14209 (_variant_14209.isBuilt (), true) ;
    while (_condition_14209.isBuiltAndTrue ()) {
      _condition_14209 = ((var_cas_index).operator_strictInf (var_cas_inProjectName.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (163)))).operator_and (var_cas_ok) ;
      if (_condition_14209.isBuiltAndTrue ()) {
        if (_variant_14209.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (167)) ;
          _condition_14209 = GGS_bool (false) ;
        }else{
          _variant_14209.decrement_operation (inLexique COMMA_HERE) ;
          GGS_char var_cas_c ;
          var_cas_c = var_cas_inProjectName.reader_characterAtIndex (inLexique, var_cas_index COMMA_SOURCE_FILE_AT_LINE (164)) ;
          var_cas_ok = (var_cas_c.reader_isalnum (inLexique COMMA_SOURCE_FILE_AT_LINE (165))).operator_or ((var_cas_c).operator_isEqual (GGS_char (TO_UNICODE ('_')))) ;
          var_cas_index.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (166)) ;
        }
      }
    }
    if (((var_cas_ok).operator_not ()).isBuiltAndTrue ()) {
      inLexique.printMessage (((GGS_string ("** Cannot create GALGAS project: the project name '")).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string ("' should begin by a letter followed by zero, one or more letters, digits and underscore character.\n")) COMMA_SOURCE_FILE_AT_LINE (169)) ;
    }
    if ((var_cas_ok).isBuiltAndTrue ()) {
      var_cas_ok = (var_cas_inProjectName.reader_directoryExists (inLexique COMMA_SOURCE_FILE_AT_LINE (175))).operator_not () ;
      if (((var_cas_ok).operator_not ()).isBuiltAndTrue ()) {
        inLexique.printMessage (((GGS_string ("*** Cannot create GALGAS project: '")).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string ("' directory already exists.***\n")) COMMA_SOURCE_FILE_AT_LINE (177)) ;
      }
    }
    if ((var_cas_ok).isBuiltAndTrue ()) {
      ::routine_performProjectCreation (inLexique,  var_cas_inProjectName COMMA_SOURCE_FILE_AT_LINE (181)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_projectCreation\n") ;
  #endif
}

//---------------------------------------------------------------------------*

