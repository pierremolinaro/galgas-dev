//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'projectCreation.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 11th, 2009, at 11h25'53"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "projectCreation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "projectCreation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of wrapper 'projectCreationFileWrapper'           *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of 'galgas_sources' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_1 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'galgas_sources' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_1 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'galgas_sources'

const cDirectoryWrapper gWrapperDirectory_1_projectCreationFileWrapper = {
  "galgas_sources",
  0,
  gWrapperAllFiles_projectCreationFileWrapper_1,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_1
} ;

//---------------------------------------------------------------------------*

//--- All files of 'hand_coded_sources' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_2 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'hand_coded_sources' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_2 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'hand_coded_sources'

const cDirectoryWrapper gWrapperDirectory_2_projectCreationFileWrapper = {
  "hand_coded_sources",
  0,
  gWrapperAllFiles_projectCreationFileWrapper_2,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_2
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx/build.command'

const char * gWrapperFileContent_0_projectCreationFileWrapper = // 71 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all\n"
;

static const cRegularFileWrapper gWrapperFile_0_projectCreationFileWrapper = {
  "build.command",
  "command",
  gWrapperFileContent_0_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx/build64.command'

const char * gWrapperFileContent_1_projectCreationFileWrapper = // 85 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all\n"
;

static const cRegularFileWrapper gWrapperFile_1_projectCreationFileWrapper = {
  "build64.command",
  "command",
  gWrapperFileContent_1_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx/clean.command'

const char * gWrapperFileContent_2_projectCreationFileWrapper = // 73 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n"
;

static const cRegularFileWrapper gWrapperFile_2_projectCreationFileWrapper = {
  "clean.command",
  "command",
  gWrapperFileContent_2_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx/clean64.command'

const char * gWrapperFileContent_3_projectCreationFileWrapper = // 87 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n"
;

static const cRegularFileWrapper gWrapperFile_3_projectCreationFileWrapper = {
  "clean64.command",
  "command",
  gWrapperFileContent_3_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile_macosx' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_3 [5] = {
  & gWrapperFile_0_projectCreationFileWrapper,
  & gWrapperFile_1_projectCreationFileWrapper,
  & gWrapperFile_2_projectCreationFileWrapper,
  & gWrapperFile_3_projectCreationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile_macosx' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_3 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile_macosx'

const cDirectoryWrapper gWrapperDirectory_3_projectCreationFileWrapper = {
  "makefile_macosx",
  4,
  gWrapperAllFiles_projectCreationFileWrapper_3,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_3
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_i386/build.command'

const char * gWrapperFileContent_4_projectCreationFileWrapper = // 71 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all\n"
;

static const cRegularFileWrapper gWrapperFile_4_projectCreationFileWrapper = {
  "build.command",
  "command",
  gWrapperFileContent_4_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_i386/build64.command'

const char * gWrapperFileContent_5_projectCreationFileWrapper = // 85 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all\n"
;

static const cRegularFileWrapper gWrapperFile_5_projectCreationFileWrapper = {
  "build64.command",
  "command",
  gWrapperFileContent_5_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_i386/clean.command'

const char * gWrapperFileContent_6_projectCreationFileWrapper = // 73 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n"
;

static const cRegularFileWrapper gWrapperFile_6_projectCreationFileWrapper = {
  "clean.command",
  "command",
  gWrapperFileContent_6_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_i386/clean64.command'

const char * gWrapperFileContent_7_projectCreationFileWrapper = // 87 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n"
;

static const cRegularFileWrapper gWrapperFile_7_projectCreationFileWrapper = {
  "clean64.command",
  "command",
  gWrapperFileContent_7_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile_macosx_i386' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_4 [5] = {
  & gWrapperFile_4_projectCreationFileWrapper,
  & gWrapperFile_5_projectCreationFileWrapper,
  & gWrapperFile_6_projectCreationFileWrapper,
  & gWrapperFile_7_projectCreationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile_macosx_i386' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_4 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile_macosx_i386'

const cDirectoryWrapper gWrapperDirectory_4_projectCreationFileWrapper = {
  "makefile_macosx_i386",
  4,
  gWrapperAllFiles_projectCreationFileWrapper_4,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_4
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_ppc/build.command'

const char * gWrapperFileContent_8_projectCreationFileWrapper = // 71 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all\n"
;

static const cRegularFileWrapper gWrapperFile_8_projectCreationFileWrapper = {
  "build.command",
  "command",
  gWrapperFileContent_8_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_ppc/build64.command'

const char * gWrapperFileContent_9_projectCreationFileWrapper = // 85 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all\n"
;

static const cRegularFileWrapper gWrapperFile_9_projectCreationFileWrapper = {
  "build64.command",
  "command",
  gWrapperFileContent_9_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_ppc/clean.command'

const char * gWrapperFileContent_10_projectCreationFileWrapper = // 73 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n"
;

static const cRegularFileWrapper gWrapperFile_10_projectCreationFileWrapper = {
  "clean.command",
  "command",
  gWrapperFileContent_10_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_ppc/clean64.command'

const char * gWrapperFileContent_11_projectCreationFileWrapper = // 87 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n"
;

static const cRegularFileWrapper gWrapperFile_11_projectCreationFileWrapper = {
  "clean64.command",
  "command",
  gWrapperFileContent_11_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile_macosx_ppc' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_5 [5] = {
  & gWrapperFile_8_projectCreationFileWrapper,
  & gWrapperFile_9_projectCreationFileWrapper,
  & gWrapperFile_10_projectCreationFileWrapper,
  & gWrapperFile_11_projectCreationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile_macosx_ppc' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_5 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile_macosx_ppc'

const cDirectoryWrapper gWrapperDirectory_5_projectCreationFileWrapper = {
  "makefile_macosx_ppc",
  4,
  gWrapperAllFiles_projectCreationFileWrapper_5,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_5
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_universal/build.command'

const char * gWrapperFileContent_12_projectCreationFileWrapper = // 71 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all\n"
;

static const cRegularFileWrapper gWrapperFile_12_projectCreationFileWrapper = {
  "build.command",
  "command",
  gWrapperFileContent_12_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_universal/build64.command'

const char * gWrapperFileContent_13_projectCreationFileWrapper = // 85 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all\n"
;

static const cRegularFileWrapper gWrapperFile_13_projectCreationFileWrapper = {
  "build64.command",
  "command",
  gWrapperFileContent_13_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_universal/clean.command'

const char * gWrapperFileContent_14_projectCreationFileWrapper = // 73 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n"
;

static const cRegularFileWrapper gWrapperFile_14_projectCreationFileWrapper = {
  "clean.command",
  "command",
  gWrapperFileContent_14_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_macosx_universal/clean64.command'

const char * gWrapperFileContent_15_projectCreationFileWrapper = // 87 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n"
;

static const cRegularFileWrapper gWrapperFile_15_projectCreationFileWrapper = {
  "clean64.command",
  "command",
  gWrapperFileContent_15_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile_macosx_universal' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_6 [5] = {
  & gWrapperFile_12_projectCreationFileWrapper,
  & gWrapperFile_13_projectCreationFileWrapper,
  & gWrapperFile_14_projectCreationFileWrapper,
  & gWrapperFile_15_projectCreationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile_macosx_universal' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_6 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile_macosx_universal'

const cDirectoryWrapper gWrapperDirectory_6_projectCreationFileWrapper = {
  "makefile_macosx_universal",
  4,
  gWrapperAllFiles_projectCreationFileWrapper_6,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_6
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_mingw_on_macosx/build.command'

const char * gWrapperFileContent_16_projectCreationFileWrapper = // 71 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all\n"
;

static const cRegularFileWrapper gWrapperFile_16_projectCreationFileWrapper = {
  "build.command",
  "command",
  gWrapperFileContent_16_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_mingw_on_macosx/clean.command'

const char * gWrapperFileContent_17_projectCreationFileWrapper = // 73 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n"
;

static const cRegularFileWrapper gWrapperFile_17_projectCreationFileWrapper = {
  "clean.command",
  "command",
  gWrapperFileContent_17_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile_mingw_on_macosx' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_7 [3] = {
  & gWrapperFile_16_projectCreationFileWrapper,
  & gWrapperFile_17_projectCreationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile_mingw_on_macosx' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_7 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile_mingw_on_macosx'

const cDirectoryWrapper gWrapperDirectory_7_projectCreationFileWrapper = {
  "makefile_mingw_on_macosx",
  2,
  gWrapperAllFiles_projectCreationFileWrapper_7,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_7
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_msys_on_win32/build.bat'

const char * gWrapperFileContent_18_projectCreationFileWrapper = // 88 bytes
  "PATH=C:\\msys\\1.0\\bin;C:\\MinGW\\bin;%PATH%\n"
  "sh -c \"make --warn-undefined-variables\"\n"
  "pause\n"
;

static const cRegularFileWrapper gWrapperFile_18_projectCreationFileWrapper = {
  "build.bat",
  "bat",
  gWrapperFileContent_18_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_msys_on_win32/clean.bat'

const char * gWrapperFileContent_19_projectCreationFileWrapper = // 94 bytes
  "PATH=C:\\msys\\1.0\\bin;C:\\MinGW\\bin;%PATH%\n"
  "sh -c \"make clean --warn-undefined-variables\"\n"
  "pause\n"
;

static const cRegularFileWrapper gWrapperFile_19_projectCreationFileWrapper = {
  "clean.bat",
  "bat",
  gWrapperFileContent_19_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_msys_on_win32/install.bat'

const char * gWrapperFileContent_20_projectCreationFileWrapper = // 96 bytes
  "PATH=C:\\msys\\1.0\\bin;C:\\MinGW\\bin;%PATH%\n"
  "sh -c \"make install --warn-undefined-variables\"\n"
  "pause\n"
;

static const cRegularFileWrapper gWrapperFile_20_projectCreationFileWrapper = {
  "install.bat",
  "bat",
  gWrapperFileContent_20_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile_msys_on_win32' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_8 [4] = {
  & gWrapperFile_18_projectCreationFileWrapper,
  & gWrapperFile_19_projectCreationFileWrapper,
  & gWrapperFile_20_projectCreationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile_msys_on_win32' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_8 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile_msys_on_win32'

const cDirectoryWrapper gWrapperDirectory_8_projectCreationFileWrapper = {
  "makefile_msys_on_win32",
  3,
  gWrapperAllFiles_projectCreationFileWrapper_8,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_8
} ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile_unix' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_9 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile_unix' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_9 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile_unix'

const cDirectoryWrapper gWrapperDirectory_9_projectCreationFileWrapper = {
  "makefile_unix",
  0,
  gWrapperAllFiles_projectCreationFileWrapper_9,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_9
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_x86linux_on_macosx/build.command'

const char * gWrapperFileContent_21_projectCreationFileWrapper = // 71 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all\n"
;

static const cRegularFileWrapper gWrapperFile_21_projectCreationFileWrapper = {
  "build.command",
  "command",
  gWrapperFileContent_21_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'makefile_x86linux_on_macosx/clean.command'

const char * gWrapperFileContent_22_projectCreationFileWrapper = // 73 bytes
  "#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n"
;

static const cRegularFileWrapper gWrapperFile_22_projectCreationFileWrapper = {
  "clean.command",
  "command",
  gWrapperFileContent_22_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile_x86linux_on_macosx' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_10 [3] = {
  & gWrapperFile_21_projectCreationFileWrapper,
  & gWrapperFile_22_projectCreationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile_x86linux_on_macosx' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_10 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile_x86linux_on_macosx'

const cDirectoryWrapper gWrapperDirectory_10_projectCreationFileWrapper = {
  "makefile_x86linux_on_macosx",
  2,
  gWrapperAllFiles_projectCreationFileWrapper_10,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_10
} ;

//---------------------------------------------------------------------------*

//--- File 'English.lproj/Credits.rtf'

const char * gWrapperFileContent_23_projectCreationFileWrapper = // 311 bytes
  "{\\rtf1\\mac\\ansicpg10000\\cocoartf824\\cocoasubrtf380\n"
  "{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n"
  "{\\colortbl;\\red255\\green255\\blue255;}\n"
  "\\vieww9000\\viewh8400\\viewkind0\n"
  "\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\ql\\qnatural\n"
  "\n"
  "\\f0\\b\\fs24 \\cf0 GALGAS Cocoa Project\\\n"
  "}\n"
;

static const cRegularFileWrapper gWrapperFile_23_projectCreationFileWrapper = {
  "Credits.rtf",
  "rtf",
  gWrapperFileContent_23_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- File 'English.lproj/InfoPlist.strings'

const char * gWrapperFileContent_24_projectCreationFileWrapper = // 310 bytes
  "/* Localized versions of Info.plist keys */\n"
  "CFBundleName = \"cocoa%!PROJECT_NAME%\";\n"
  "CFBundleShortVersionString = \"1.0.0\";\n"
  "CFBundleGetInfoString = \"Cocoa %!PROJECT_NAME% version 1.0.0, Copyright __MyCompanyName__.\";\n"
  "NSHumanReadableCopyright = \"Copyright __MyCompanyName__.\";\n"
  "LSMinimumSystemVersion = \"10.5.0\";\n"
  "\n"
;

static const cRegularFileWrapper gWrapperFile_24_projectCreationFileWrapper = {
  "InfoPlist.strings",
  "strings",
  gWrapperFileContent_24_projectCreationFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- All files of 'English.lproj' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_12 [3] = {
  & gWrapperFile_23_projectCreationFileWrapper,
  & gWrapperFile_24_projectCreationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'English.lproj' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_12 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'English.lproj'

const cDirectoryWrapper gWrapperDirectory_12_projectCreationFileWrapper = {
  "English.lproj",
  2,
  gWrapperAllFiles_projectCreationFileWrapper_12,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_12
} ;

//---------------------------------------------------------------------------*

//--- All files of 'project_xcode' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_11 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'project_xcode' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_11 [2] = {
  & gWrapperDirectory_12_projectCreationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'project_xcode'

const cDirectoryWrapper gWrapperDirectory_11_projectCreationFileWrapper = {
  "project_xcode",
  0,
  gWrapperAllFiles_projectCreationFileWrapper_11,
  1,
  gWrapperAllDirectories_projectCreationFileWrapper_11
} ;

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_0 [12] = {
  & gWrapperDirectory_1_projectCreationFileWrapper,
  & gWrapperDirectory_2_projectCreationFileWrapper,
  & gWrapperDirectory_3_projectCreationFileWrapper,
  & gWrapperDirectory_4_projectCreationFileWrapper,
  & gWrapperDirectory_5_projectCreationFileWrapper,
  & gWrapperDirectory_6_projectCreationFileWrapper,
  & gWrapperDirectory_7_projectCreationFileWrapper,
  & gWrapperDirectory_8_projectCreationFileWrapper,
  & gWrapperDirectory_9_projectCreationFileWrapper,
  & gWrapperDirectory_10_projectCreationFileWrapper,
  & gWrapperDirectory_11_projectCreationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_projectCreationFileWrapper = {
  "",
  0,
  gWrapperAllFiles_projectCreationFileWrapper_0,
  11,
  gWrapperAllDirectories_projectCreationFileWrapper_0
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//     'build_bat' template of 'projectCreationFileWrapper' filewrapper      *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_build_bat (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "galgas -v all_" ;
    result << var_cas_PROJECT_NAME ;
    result << ".ggs\n"
      "pause\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      'all_ggs' template of 'projectCreationFileWrapper' filewrapper       *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_all_ggs (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "project all_" ;
    result << var_cas_PROJECT_NAME ;
    result << " :\n"
      "  lexique \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_lexique.gLexique\" : makefile, xcode_tool, xcode_app ;\n"
      "  option \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_options.gOption\" : makefile, xcode_tool, xcode_app ;\n"
      "  semantics \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_semantics.ggs\" : makefile, xcode_tool ;\n"
      "  syntax \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_syntax.ggs\" : makefile, xcode_tool ;\n"
      "  grammar \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_grammar.ggs\" : makefile, xcode_tool ;\n"
      "  gui \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_cocoa.gGui\" : xcode_tool, xcode_app ;\n"
      "  program \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_program.ggs\" : makefile, xcode_tool ;\n"
      "  extern \"../hand_coded_sources/" ;
    result << var_cas_PROJECT_NAME ;
    result << "_computations.cpp\" : makefile, xcode_tool ;\n"
      "end project ;\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   'PROJECT_cocoa' template of 'projectCreationFileWrapper' filewrapper    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_PROJECT_cocoa (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "gui " ;
    result << var_cas_PROJECT_NAME ;
    result << "_cocoa \"cocoa\" :\n"
      "\n"
      "with option \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_options.gOption\" ;\n"
      "\n"
      "with lexique \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_lexique.gLexique\" {\n"
      "  fileExtension: \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" ;\n"
      "  title: \"Source\" ;\n"
      "}\n"
      "\n"
      "end gui ;\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'PROJECT_grammar' template of 'projectCreationFileWrapper' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_PROJECT_grammar (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "grammar " ;
    result << var_cas_PROJECT_NAME ;
    result << "_grammar \"LL1\":\n"
      "import lexique " ;
    result << var_cas_PROJECT_NAME ;
    result << "_lexique in \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_lexique.gLexique\" ;\n"
      "import option " ;
    result << var_cas_PROJECT_NAME ;
    result << "_options in \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_options.gOption\" ;\n"
      "import syntax " ;
    result << var_cas_PROJECT_NAME ;
    result << "_syntax in \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_syntax.ggs\" ;\n"
      "\n"
      "root <start_symbol> ;\n"
      "\n"
      "end grammar ;\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'PROJECT_lexique' template of 'projectCreationFileWrapper' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_PROJECT_lexique (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "lexique " ;
    result << var_cas_PROJECT_NAME ;
    result << "_lexique :\n"
      "\n"
      "# ADD YOUR CODE HERE\n"
      "\n"
      "end lexique ;\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'PROJECT_options' template of 'projectCreationFileWrapper' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_PROJECT_options (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "option " ;
    result << var_cas_PROJECT_NAME ;
    result << "_options :\n"
      "\n"
      "# ADD YOUR CODE HERE\n"
      "\n"
      "end option ;\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'PROJECT_program' template of 'projectCreationFileWrapper' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_PROJECT_program (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "program " ;
    result << var_cas_PROJECT_NAME ;
    result << "_program \"version 1.0.0\":\n"
      "\n"
      "#--- Import clauses\n"
      "import semantics " ;
    result << var_cas_PROJECT_NAME ;
    result << "_semantics in \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_semantics.ggs\" ;\n"
      "import grammar " ;
    result << var_cas_PROJECT_NAME ;
    result << "_grammar in \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_grammar.ggs\" ;\n"
      "\n"
      "#--- Prologue routine\n"
      "before {\n"
      "}\n"
      "\n"
      "#--- 'when' clauses\n"
      "when . \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\"\n"
      "message \"a source text file with the ." ;
    result << var_cas_PROJECT_NAME ;
    result << " extension\"\n"
      "\?\?@lstring inSourceFile {\n"
      "  grammar " ;
    result << var_cas_PROJECT_NAME ;
    result << "_grammar in inSourceFile ;\n"
      "}\n"
      "\n"
      "#--- Epilogue routine\n"
      "after {\n"
      "}\n"
      "\n"
      "#---\n"
      "\n"
      "end program ;\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// 'PROJECT_semantics' template of 'projectCreationFileWrapper' filewrapper  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_PROJECT_semantics (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "semantics " ;
    result << var_cas_PROJECT_NAME ;
    result << "_semantics :\n"
      "  import option " ;
    result << var_cas_PROJECT_NAME ;
    result << "_options in \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_options.gOption\" ;\n"
      "\n"
      "# ADD YOUR CODE HERE\n"
      "\n"
      "end semantics ;\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'PROJECT_syntax' template of 'projectCreationFileWrapper' filewrapper    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_PROJECT_syntax (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "syntax " ;
    result << var_cas_PROJECT_NAME ;
    result << "_syntax :\n"
      "import lexique " ;
    result << var_cas_PROJECT_NAME ;
    result << "_lexique in \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_lexique.gLexique\" ;\n"
      "import option " ;
    result << var_cas_PROJECT_NAME ;
    result << "_options in \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_options.gOption\" ;\n"
      "import semantics " ;
    result << var_cas_PROJECT_NAME ;
    result << "_semantics in \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_semantics.ggs\" ;\n"
      "\n"
      "# ADD YOUR CODE HERE\n"
      "\n"
      "nonterminal <start_symbol> ;\n"
      "\n"
      "rule <start_symbol> :\n"
      "# ADD YOUR CODE HERE\n"
      "end rule ;\n"
      "\n"
      "end syntax ;\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'PROJECT_computations' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_PROJECT_computations (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                             " ;
    result << var_cas_PROJECT_NAME ;
    result << " Project                               *\n"
      "//                   Generated by GALGAS Project Creation                    *\n"
      "//                      march 29th, 2008, at 21h55'21\"                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_semantics.h\"\n"
      "#include \"utilities/MF_MemoryControl.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "// ADD YOUR CODE HERE\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_makefile' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_makefile_macosx_makefile (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/macosx_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_makefile64' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_makefile_macosx_makefile64 (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 64-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects64\n"
      "DEBUG_OBJECTS_DIR := debug_objects64\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/macosx_gcc_tools_64.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_ppc_makefile' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_makefile_macosx_ppc_makefile (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/macosx_ppc_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_ppc_makefile64' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_makefile_macosx_ppc_makefile64 (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 64-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects64\n"
      "DEBUG_OBJECTS_DIR := debug_objects64\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/macosx_ppc_gcc_tools_64.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_i386_makefile' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_makefile_macosx_i386_makefile (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/macosx_i386_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_i386_makefile64' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_makefile_macosx_i386_makefile64 (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 64-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects64\n"
      "DEBUG_OBJECTS_DIR := debug_objects64\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/macosx_i386_gcc_tools_64.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_universal_makefile' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_makefile_macosx_universal_makefile (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        'all' goal                                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "all:$(EXECUTABLE) $(EXECUTABLE_DEBUG)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        'clean' goal                                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "clean:\n"
      "\trm -f $(EXECUTABLE) $(EXECUTABLE_DEBUG)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Build ppc executable                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "../makefile_macosx_ppc/%:\n"
      "\t$(MAKE) -C ../makefile_macosx_ppc $<\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Build i386 executable                                *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "../makefile_macosx_i386/%:\n"
      "\t$(MAKE) -C ../makefile_macosx_i386 $<\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Build EXECUTABLES                                    *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "$(EXECUTABLE):../makefile_macosx_ppc/$(EXECUTABLE) ../makefile_macosx_i386/$(EXECUTABLE)\n"
      "\tlipo -create ../makefile_macosx_ppc/$(EXECUTABLE) ../makefile_macosx_i386/$(EXECUTABLE) -output $(EXECUTABLE)\n"
      "\tlipo -info $(EXECUTABLE)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "$(EXECUTABLE_DEBUG):../makefile_macosx_ppc/$(EXECUTABLE_DEBUG) ../makefile_macosx_i386/$(EXECUTABLE_DEBUG)\n"
      "\tlipo -create ../makefile_macosx_ppc/$(EXECUTABLE_DEBUG) ../makefile_macosx_i386/$(EXECUTABLE_DEBUG) -output $(EXECUTABLE_DEBUG)\n"
      "\tlipo -info $(EXECUTABLE_DEBUG)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_universal_makefile64' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_makefile_macosx_universal_makefile64 (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 64-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        'all' goal                                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "all:$(EXECUTABLE) $(EXECUTABLE_DEBUG)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        'clean' goal                                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "clean:\n"
      "\trm -f $(EXECUTABLE) $(EXECUTABLE_DEBUG)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Build ppc executable                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "../makefile_macosx_ppc/%:\n"
      "\t$(MAKE) -C ../makefile_macosx_ppc -f makefile64 $<\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Build i386 executable                                *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "../makefile_macosx_i386/%:\n"
      "\t$(MAKE) -C ../makefile_macosx_i386 -f makefile64 $<\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Build EXECUTABLES                                    *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "$(EXECUTABLE):../makefile_macosx_ppc/$(EXECUTABLE) ../makefile_macosx_i386/$(EXECUTABLE)\n"
      "\tlipo -create ../makefile_macosx_ppc/$(EXECUTABLE) ../makefile_macosx_i386/$(EXECUTABLE) -output $(EXECUTABLE)\n"
      "\tlipo -info $(EXECUTABLE)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "$(EXECUTABLE_DEBUG):../makefile_macosx_ppc/$(EXECUTABLE_DEBUG) ../makefile_macosx_i386/$(EXECUTABLE_DEBUG)\n"
      "\tlipo -create ../makefile_macosx_ppc/$(EXECUTABLE_DEBUG) ../makefile_macosx_i386/$(EXECUTABLE_DEBUG) -output $(EXECUTABLE_DEBUG)\n"
      "\tlipo -info $(EXECUTABLE_DEBUG)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_mingw_on_macosx_makefile' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_makefile_mingw_on_macosx_makefile (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" command line tools for Win32, built on Mac OS X*\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << ".exe\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug.exe\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Linker Options for Win32                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS := -lcomdlg32\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                     Include MinGW tools for MAC OS X                      *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/mingw_on_macosx_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_msys_on_win32_makefile' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_makefile_msys_on_win32_makefile (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" command line tools for Win32, built with MSYS*\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << ".exe\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug.exe\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#              Install directory (for \"install\" goal)                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /C/WINDOWS/system32\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Linker Options for Win32                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS := -lcomdlg32\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Include MinGW tools for MSYS                        *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/msys_on_win32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_unix_makefile' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_makefile_unix_makefile (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#    MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bit command line tools for Unix     *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Linker Options for Unix                           *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS := \n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                            Include Unix tools                             *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/unix_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_unix_makefile64' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_makefile_unix_makefile64 (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#    MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 64-bit command line tools for Unix     *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects64\n"
      "DEBUG_OBJECTS_DIR := debug_objects64\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Linker Options for Unix                           *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS := \n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                            Include Unix tools                             *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/unix_gcc_tools_64.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_x86linux_on_macosx_makefile' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_makefile_x86linux_on_macosx_makefile (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bit command line tools for x86 Linux, built on Mac OS X*\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Link Options for i386 Linux                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Include i386 Linux tools for MAC OS X                    *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/x86linux_on_macosx_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    'info_plist' template of 'projectCreationFileWrapper' filewrapper      *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_info_plist (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "<\?xml version=\"1.0\" encoding=\"UTF-8\"\?>\n"
      "<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n"
      "<plist version=\"1.0\">\n"
      "<dict>\n"
      "\t<key>CFBundleDevelopmentRegion</key>\n"
      "\t<string>English</string>\n"
      "\t<key>CFBundleExecutable</key>\n"
      "\t<string>${EXECUTABLE_NAME}</string>\n"
      "\t<key>CFBundleIconFile</key>\n"
      "\t<string></string>\n"
      "\t<key>CFBundleIdentifier</key>\n"
      "\t<string>com.yourcompany." ;
    result << var_cas_PROJECT_NAME ;
    result << "</string>\n"
      "\t<key>CFBundleInfoDictionaryVersion</key>\n"
      "\t<string>6.0</string>\n"
      "\t<key>CFBundleName</key>\n"
      "\t<string>${PRODUCT_NAME}</string>\n"
      "\t<key>CFBundlePackageType</key>\n"
      "\t<string>APPL</string>\n"
      "\t<key>CFBundleSignature</key>\n"
      "\t<string>\?\?\?\?</string>\n"
      "\t<key>CFBundleVersion</key>\n"
      "\t<string>1.0</string>\n"
      "\t<key>NSMainNibFile</key>\n"
      "\t<string>MainMenu</string>\n"
      "\t<key>NSPrincipalClass</key>\n"
      "\t<string>NSApplication</string>\n"
      "\t<key>CFBundleDocumentTypes</key>\n"
      "\t<array>\n"
      "\t\t<dict>\n"
      "\t\t\t<key>CFBundleTypeExtensions</key>\n"
      "\t\t\t<array>\n"
      "\t\t\t\t<string>" ;
    result << var_cas_PROJECT_NAME ;
    result << "</string>\n"
      "\t\t\t</array>\n"
      "\t\t\t<key>CFBundleTypeName</key>\n"
      "\t\t\t<string>" ;
    result << var_cas_PROJECT_NAME ;
    result << " Source</string>\n"
      "\t\t\t<key>CFBundleTypeOSTypes</key>\n"
      "\t\t\t<array>\n"
      "\t\t\t\t<string>TEXT</string>\n"
      "\t\t\t</array>\n"
      "\t\t\t<key>CFBundleTypeRole</key>\n"
      "\t\t\t<string>Editor</string>\n"
      "\t\t\t<key>LSTypeIsPackage</key>\n"
      "\t\t\t<false/>\n"
      "\t\t\t<key>NSDocumentClass</key>\n"
      "\t\t\t<string>OC_GGS_Document</string>\n"
      "\t\t</dict>\n"
      "\t</array>\n"
      "</dict>\n"
      "</plist>\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'cocoa_infoPlist_strings' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_cocoa_infoPlist_strings (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "/* Localized versions of Info.plist keys */\n"
      "CFBundleName = \"cocoa" ;
    result << var_cas_PROJECT_NAME ;
    result << "\";\n"
      "CFBundleShortVersionString = \"1.0.0\";\n"
      "CFBundleGetInfoString = \"Cocoa " ;
    result << var_cas_PROJECT_NAME ;
    result << " version 1.0.0, Copyright __MyCompanyName__.\";\n"
      "NSHumanReadableCopyright = \"Copyright __MyCompanyName__.\";\n"
      "LSMinimumSystemVersion = \"10.5.0\";\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "performProjectCreation"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performProjectCreation (C_Compiler & inLexique,
                                const GGS_string  var_cas_inProjectName COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_performProjectCreation at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_common_files_for_make_DIR ;
  var_cas_common_files_for_make_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/common_files_for_make")) ;
  GGS_string var_cas_galgas_sources_DIR ;
  var_cas_galgas_sources_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/galgas_sources")) ;
  const GGS_string temp_4594 = var_cas_galgas_sources_DIR ;
  if (temp_4594.isBuilt ()) {
    temp_4594 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (65)) ;
  }
  const GGS_string temp_4676 = template_filewrapper_projectCreationFileWrapper_all_ggs (inLexique, var_cas_inProjectName) ;
  if (temp_4676.isBuilt ()) {
    temp_4676 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/all_"))).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string (".ggs")) COMMA_SOURCE_FILE_AT_LINE (66)) ;
  }
  const GGS_string temp_4816 = template_filewrapper_projectCreationFileWrapper_PROJECT_cocoa (inLexique, var_cas_inProjectName) ;
  if (temp_4816.isBuilt ()) {
    temp_4816 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string ("_cocoa.gGui")) COMMA_SOURCE_FILE_AT_LINE (67)) ;
  }
  const GGS_string temp_4961 = template_filewrapper_projectCreationFileWrapper_PROJECT_grammar (inLexique, var_cas_inProjectName) ;
  if (temp_4961.isBuilt ()) {
    temp_4961 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string ("_grammar.ggs")) COMMA_SOURCE_FILE_AT_LINE (68)) ;
  }
  const GGS_string temp_5107 = template_filewrapper_projectCreationFileWrapper_PROJECT_lexique (inLexique, var_cas_inProjectName) ;
  if (temp_5107.isBuilt ()) {
    temp_5107 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string ("_lexique.gLexique")) COMMA_SOURCE_FILE_AT_LINE (69)) ;
  }
  const GGS_string temp_5258 = template_filewrapper_projectCreationFileWrapper_PROJECT_options (inLexique, var_cas_inProjectName) ;
  if (temp_5258.isBuilt ()) {
    temp_5258 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string ("_options.gOption")) COMMA_SOURCE_FILE_AT_LINE (70)) ;
  }
  const GGS_string temp_5408 = template_filewrapper_projectCreationFileWrapper_PROJECT_program (inLexique, var_cas_inProjectName) ;
  if (temp_5408.isBuilt ()) {
    temp_5408 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string ("_program.ggs")) COMMA_SOURCE_FILE_AT_LINE (71)) ;
  }
  const GGS_string temp_5556 = template_filewrapper_projectCreationFileWrapper_PROJECT_semantics (inLexique, var_cas_inProjectName) ;
  if (temp_5556.isBuilt ()) {
    temp_5556 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string ("_semantics.ggs")) COMMA_SOURCE_FILE_AT_LINE (72)) ;
  }
  const GGS_string temp_5703 = template_filewrapper_projectCreationFileWrapper_PROJECT_syntax (inLexique, var_cas_inProjectName) ;
  if (temp_5703.isBuilt ()) {
    temp_5703 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string ("_syntax.ggs")) COMMA_SOURCE_FILE_AT_LINE (73)) ;
  }
  const GGS_string temp_5842 = template_filewrapper_projectCreationFileWrapper_build_bat (inLexique, var_cas_inProjectName) ;
  if (temp_5842.isBuilt ()) {
    temp_5842 (HERE)->method_writeToFile (inLexique, (var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/build.bat")) COMMA_SOURCE_FILE_AT_LINE (74)) ;
  }
  GGS_string var_cas_hand_coded_sources_DIR ;
  var_cas_hand_coded_sources_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/hand_coded_sources")) ;
  const GGS_string temp_6018 = var_cas_hand_coded_sources_DIR ;
  if (temp_6018.isBuilt ()) {
    temp_6018 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (77)) ;
  }
  const GGS_string temp_6113 = template_filewrapper_projectCreationFileWrapper_PROJECT_computations (inLexique, var_cas_inProjectName) ;
  if (temp_6113.isBuilt ()) {
    temp_6113 (HERE)->method_writeToFile (inLexique, (((var_cas_hand_coded_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string ("_computations.cpp")) COMMA_SOURCE_FILE_AT_LINE (78)) ;
  }
  GGS_string var_cas_makefile_macosx_DIR ;
  var_cas_makefile_macosx_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/makefile_macosx")) ;
  const GGS_string temp_6308 = var_cas_makefile_macosx_DIR ;
  if (temp_6308.isBuilt ()) {
    temp_6308 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (81)) ;
  }
  const GGS_string temp_6410 = GGS_string (gWrapperFileContent_0_projectCreationFileWrapper) ;
  if (temp_6410.isBuilt ()) {
    temp_6410 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_DIR).operator_concat (GGS_string ("/build.command")) COMMA_SOURCE_FILE_AT_LINE (82)) ;
  }
  const GGS_string temp_6551 = GGS_string (gWrapperFileContent_2_projectCreationFileWrapper) ;
  if (temp_6551.isBuilt ()) {
    temp_6551 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_DIR).operator_concat (GGS_string ("/clean.command")) COMMA_SOURCE_FILE_AT_LINE (83)) ;
  }
  const GGS_string temp_6694 = GGS_string (gWrapperFileContent_1_projectCreationFileWrapper) ;
  if (temp_6694.isBuilt ()) {
    temp_6694 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_DIR).operator_concat (GGS_string ("/build64.command")) COMMA_SOURCE_FILE_AT_LINE (84)) ;
  }
  const GGS_string temp_6839 = GGS_string (gWrapperFileContent_3_projectCreationFileWrapper) ;
  if (temp_6839.isBuilt ()) {
    temp_6839 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_DIR).operator_concat (GGS_string ("/clean64.command")) COMMA_SOURCE_FILE_AT_LINE (85)) ;
  }
  const GGS_string temp_6979 = template_filewrapper_projectCreationFileWrapper_makefile_macosx_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_6979.isBuilt ()) {
    temp_6979 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_macosx_DIR).operator_concat (GGS_string ("/makefile")) COMMA_SOURCE_FILE_AT_LINE (86)) ;
  }
  const GGS_string temp_7114 = template_filewrapper_projectCreationFileWrapper_makefile_macosx_makefile64 (inLexique, var_cas_inProjectName) ;
  if (temp_7114.isBuilt ()) {
    temp_7114 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_macosx_DIR).operator_concat (GGS_string ("/makefile64")) COMMA_SOURCE_FILE_AT_LINE (87)) ;
  }
  GGS_string var_cas_makefile_macosx_ppc_DIR ;
  var_cas_makefile_macosx_ppc_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/makefile_macosx_ppc")) ;
  const GGS_string temp_7296 = var_cas_makefile_macosx_ppc_DIR ;
  if (temp_7296.isBuilt ()) {
    temp_7296 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (90)) ;
  }
  const GGS_string temp_7402 = GGS_string (gWrapperFileContent_8_projectCreationFileWrapper) ;
  if (temp_7402.isBuilt ()) {
    temp_7402 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_ppc_DIR).operator_concat (GGS_string ("/build.command")) COMMA_SOURCE_FILE_AT_LINE (91)) ;
  }
  const GGS_string temp_7551 = GGS_string (gWrapperFileContent_10_projectCreationFileWrapper) ;
  if (temp_7551.isBuilt ()) {
    temp_7551 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_ppc_DIR).operator_concat (GGS_string ("/clean.command")) COMMA_SOURCE_FILE_AT_LINE (92)) ;
  }
  const GGS_string temp_7702 = GGS_string (gWrapperFileContent_9_projectCreationFileWrapper) ;
  if (temp_7702.isBuilt ()) {
    temp_7702 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_ppc_DIR).operator_concat (GGS_string ("/build64.command")) COMMA_SOURCE_FILE_AT_LINE (93)) ;
  }
  const GGS_string temp_7855 = GGS_string (gWrapperFileContent_11_projectCreationFileWrapper) ;
  if (temp_7855.isBuilt ()) {
    temp_7855 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_ppc_DIR).operator_concat (GGS_string ("/clean64.command")) COMMA_SOURCE_FILE_AT_LINE (94)) ;
  }
  const GGS_string temp_8003 = template_filewrapper_projectCreationFileWrapper_makefile_macosx_ppc_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_8003.isBuilt ()) {
    temp_8003 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_macosx_ppc_DIR).operator_concat (GGS_string ("/makefile")) COMMA_SOURCE_FILE_AT_LINE (95)) ;
  }
  const GGS_string temp_8146 = template_filewrapper_projectCreationFileWrapper_makefile_macosx_ppc_makefile64 (inLexique, var_cas_inProjectName) ;
  if (temp_8146.isBuilt ()) {
    temp_8146 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_macosx_ppc_DIR).operator_concat (GGS_string ("/makefile64")) COMMA_SOURCE_FILE_AT_LINE (96)) ;
  }
  GGS_string var_cas_makefile_macosx_i386_DIR ;
  var_cas_makefile_macosx_i386_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/makefile_macosx_i386")) ;
  const GGS_string temp_8336 = var_cas_makefile_macosx_i386_DIR ;
  if (temp_8336.isBuilt ()) {
    temp_8336 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (99)) ;
  }
  const GGS_string temp_8443 = GGS_string (gWrapperFileContent_4_projectCreationFileWrapper) ;
  if (temp_8443.isBuilt ()) {
    temp_8443 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_i386_DIR).operator_concat (GGS_string ("/build.command")) COMMA_SOURCE_FILE_AT_LINE (100)) ;
  }
  const GGS_string temp_8594 = GGS_string (gWrapperFileContent_6_projectCreationFileWrapper) ;
  if (temp_8594.isBuilt ()) {
    temp_8594 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_i386_DIR).operator_concat (GGS_string ("/clean.command")) COMMA_SOURCE_FILE_AT_LINE (101)) ;
  }
  const GGS_string temp_8747 = GGS_string (gWrapperFileContent_5_projectCreationFileWrapper) ;
  if (temp_8747.isBuilt ()) {
    temp_8747 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_i386_DIR).operator_concat (GGS_string ("/build64.command")) COMMA_SOURCE_FILE_AT_LINE (102)) ;
  }
  const GGS_string temp_8902 = GGS_string (gWrapperFileContent_7_projectCreationFileWrapper) ;
  if (temp_8902.isBuilt ()) {
    temp_8902 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_i386_DIR).operator_concat (GGS_string ("/clean64.command")) COMMA_SOURCE_FILE_AT_LINE (103)) ;
  }
  const GGS_string temp_9052 = template_filewrapper_projectCreationFileWrapper_makefile_macosx_i386_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_9052.isBuilt ()) {
    temp_9052 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_macosx_i386_DIR).operator_concat (GGS_string ("/makefile")) COMMA_SOURCE_FILE_AT_LINE (104)) ;
  }
  const GGS_string temp_9197 = template_filewrapper_projectCreationFileWrapper_makefile_macosx_i386_makefile64 (inLexique, var_cas_inProjectName) ;
  if (temp_9197.isBuilt ()) {
    temp_9197 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_macosx_i386_DIR).operator_concat (GGS_string ("/makefile64")) COMMA_SOURCE_FILE_AT_LINE (105)) ;
  }
  GGS_string var_cas_makefile_macosx_universal_DIR ;
  var_cas_makefile_macosx_universal_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/makefile_macosx_universal")) ;
  const GGS_string temp_9408 = var_cas_makefile_macosx_universal_DIR ;
  if (temp_9408.isBuilt ()) {
    temp_9408 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (108)) ;
  }
  const GGS_string temp_9520 = GGS_string (gWrapperFileContent_12_projectCreationFileWrapper) ;
  if (temp_9520.isBuilt ()) {
    temp_9520 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_universal_DIR).operator_concat (GGS_string ("/build.command")) COMMA_SOURCE_FILE_AT_LINE (109)) ;
  }
  const GGS_string temp_9682 = GGS_string (gWrapperFileContent_14_projectCreationFileWrapper) ;
  if (temp_9682.isBuilt ()) {
    temp_9682 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_universal_DIR).operator_concat (GGS_string ("/clean.command")) COMMA_SOURCE_FILE_AT_LINE (110)) ;
  }
  const GGS_string temp_9846 = GGS_string (gWrapperFileContent_13_projectCreationFileWrapper) ;
  if (temp_9846.isBuilt ()) {
    temp_9846 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_universal_DIR).operator_concat (GGS_string ("/build64.command")) COMMA_SOURCE_FILE_AT_LINE (111)) ;
  }
  const GGS_string temp_10011 = GGS_string (gWrapperFileContent_15_projectCreationFileWrapper) ;
  if (temp_10011.isBuilt ()) {
    temp_10011 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_macosx_universal_DIR).operator_concat (GGS_string ("/clean64.command")) COMMA_SOURCE_FILE_AT_LINE (112)) ;
  }
  const GGS_string temp_10172 = template_filewrapper_projectCreationFileWrapper_makefile_macosx_universal_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_10172.isBuilt ()) {
    temp_10172 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_macosx_universal_DIR).operator_concat (GGS_string ("/makefile")) COMMA_SOURCE_FILE_AT_LINE (113)) ;
  }
  const GGS_string temp_10328 = template_filewrapper_projectCreationFileWrapper_makefile_macosx_universal_makefile64 (inLexique, var_cas_inProjectName) ;
  if (temp_10328.isBuilt ()) {
    temp_10328 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_macosx_universal_DIR).operator_concat (GGS_string ("/makefile64")) COMMA_SOURCE_FILE_AT_LINE (114)) ;
  }
  GGS_string var_cas_makefile_mingw_on_macosx_DIR ;
  var_cas_makefile_mingw_on_macosx_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/makefile_mingw_on_macosx")) ;
  const GGS_string temp_10541 = var_cas_makefile_mingw_on_macosx_DIR ;
  if (temp_10541.isBuilt ()) {
    temp_10541 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (117)) ;
  }
  const GGS_string temp_10652 = GGS_string (gWrapperFileContent_16_projectCreationFileWrapper) ;
  if (temp_10652.isBuilt ()) {
    temp_10652 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_mingw_on_macosx_DIR).operator_concat (GGS_string ("/build.command")) COMMA_SOURCE_FILE_AT_LINE (118)) ;
  }
  const GGS_string temp_10811 = GGS_string (gWrapperFileContent_17_projectCreationFileWrapper) ;
  if (temp_10811.isBuilt ()) {
    temp_10811 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_mingw_on_macosx_DIR).operator_concat (GGS_string ("/clean.command")) COMMA_SOURCE_FILE_AT_LINE (119)) ;
  }
  const GGS_string temp_10967 = template_filewrapper_projectCreationFileWrapper_makefile_mingw_on_macosx_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_10967.isBuilt ()) {
    temp_10967 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_mingw_on_macosx_DIR).operator_concat (GGS_string ("/makefile")) COMMA_SOURCE_FILE_AT_LINE (120)) ;
  }
  GGS_string var_cas_makefile_mingw_on_win32_DIR ;
  var_cas_makefile_mingw_on_win32_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/makefile_msys_on_win32")) ;
  const GGS_string temp_11170 = var_cas_makefile_mingw_on_win32_DIR ;
  if (temp_11170.isBuilt ()) {
    temp_11170 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (123)) ;
  }
  const GGS_string temp_11265 = GGS_string (gWrapperFileContent_18_projectCreationFileWrapper) ;
  if (temp_11265.isBuilt ()) {
    temp_11265 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_mingw_on_win32_DIR).operator_concat (GGS_string ("/build.bat")) COMMA_SOURCE_FILE_AT_LINE (124)) ;
  }
  const GGS_string temp_11403 = GGS_string (gWrapperFileContent_19_projectCreationFileWrapper) ;
  if (temp_11403.isBuilt ()) {
    temp_11403 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_mingw_on_win32_DIR).operator_concat (GGS_string ("/clean.bat")) COMMA_SOURCE_FILE_AT_LINE (125)) ;
  }
  const GGS_string temp_11543 = GGS_string (gWrapperFileContent_20_projectCreationFileWrapper) ;
  if (temp_11543.isBuilt ()) {
    temp_11543 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_mingw_on_win32_DIR).operator_concat (GGS_string ("/install.bat")) COMMA_SOURCE_FILE_AT_LINE (126)) ;
  }
  const GGS_string temp_11694 = template_filewrapper_projectCreationFileWrapper_makefile_msys_on_win32_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_11694.isBuilt ()) {
    temp_11694 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_mingw_on_win32_DIR).operator_concat (GGS_string ("/makefile")) COMMA_SOURCE_FILE_AT_LINE (127)) ;
  }
  GGS_string var_cas_makefile_unix_DIR ;
  var_cas_makefile_unix_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/makefile_unix")) ;
  const GGS_string temp_11858 = var_cas_makefile_unix_DIR ;
  if (temp_11858.isBuilt ()) {
    temp_11858 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (130)) ;
  }
  const GGS_string temp_11955 = template_filewrapper_projectCreationFileWrapper_makefile_unix_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_11955.isBuilt ()) {
    temp_11955 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_unix_DIR).operator_concat (GGS_string ("/makefile")) COMMA_SOURCE_FILE_AT_LINE (131)) ;
  }
  const GGS_string temp_12086 = template_filewrapper_projectCreationFileWrapper_makefile_unix_makefile64 (inLexique, var_cas_inProjectName) ;
  if (temp_12086.isBuilt ()) {
    temp_12086 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_unix_DIR).operator_concat (GGS_string ("/makefile64")) COMMA_SOURCE_FILE_AT_LINE (132)) ;
  }
  GGS_string var_cas_makefile_x86linux_on_macosx_DIR ;
  var_cas_makefile_x86linux_on_macosx_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/makefile_x86linux_on_macosx")) ;
  const GGS_string temp_12302 = var_cas_makefile_x86linux_on_macosx_DIR ;
  if (temp_12302.isBuilt ()) {
    temp_12302 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (135)) ;
  }
  const GGS_string temp_12416 = GGS_string (gWrapperFileContent_21_projectCreationFileWrapper) ;
  if (temp_12416.isBuilt ()) {
    temp_12416 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_x86linux_on_macosx_DIR).operator_concat (GGS_string ("/build.command")) COMMA_SOURCE_FILE_AT_LINE (136)) ;
  }
  const GGS_string temp_12582 = GGS_string (gWrapperFileContent_22_projectCreationFileWrapper) ;
  if (temp_12582.isBuilt ()) {
    temp_12582 (HERE)->method_writeToExecutableFile (inLexique, (var_cas_makefile_x86linux_on_macosx_DIR).operator_concat (GGS_string ("/clean.command")) COMMA_SOURCE_FILE_AT_LINE (137)) ;
  }
  const GGS_string temp_12745 = template_filewrapper_projectCreationFileWrapper_makefile_x86linux_on_macosx_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_12745.isBuilt ()) {
    temp_12745 (HERE)->method_writeToFile (inLexique, (var_cas_makefile_x86linux_on_macosx_DIR).operator_concat (GGS_string ("/makefile")) COMMA_SOURCE_FILE_AT_LINE (138)) ;
  }
  GGS_string var_cas_projectxcode_DIR ;
  var_cas_projectxcode_DIR = (var_cas_inProjectName).operator_concat (GGS_string ("/project_xcode")) ;
  const GGS_string temp_12945 = (((var_cas_projectxcode_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string (".xcodeproj")) ;
  if (temp_12945.isBuilt ()) {
    temp_12945 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (141)) ;
  }
  const GGS_string temp_13030 = template_filewrapper_projectCreationFileWrapper_info_plist (inLexique, var_cas_inProjectName) ;
  if (temp_13030.isBuilt ()) {
    temp_13030 (HERE)->method_writeToFile (inLexique, (var_cas_projectxcode_DIR).operator_concat (GGS_string ("/Info.plist")) COMMA_SOURCE_FILE_AT_LINE (142)) ;
  }
  const GGS_string temp_13118 = (var_cas_projectxcode_DIR).operator_concat (GGS_string ("/English.lproj")) ;
  if (temp_13118.isBuilt ()) {
    temp_13118 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (143)) ;
  }
  const GGS_string temp_13220 = GGS_string (gWrapperFileContent_23_projectCreationFileWrapper) ;
  if (temp_13220.isBuilt ()) {
    temp_13220 (HERE)->method_writeToFile (inLexique, (var_cas_projectxcode_DIR).operator_concat (GGS_string ("/English.lproj/Credits.rtf")) COMMA_SOURCE_FILE_AT_LINE (144)) ;
  }
  const GGS_string temp_13366 = template_filewrapper_projectCreationFileWrapper_cocoa_infoPlist_strings (inLexique, var_cas_inProjectName) ;
  if (temp_13366.isBuilt ()) {
    temp_13366 (HERE)->method_writeToFile (inLexique, (var_cas_projectxcode_DIR).operator_concat (GGS_string ("/English.lproj/InfoPlist.strings")) COMMA_SOURCE_FILE_AT_LINE (145)) ;
  }
  inLexique.printMessage (GGS_string ("*** DONE ***\n") COMMA_SOURCE_FILE_AT_LINE (147)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_performProjectCreation\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "projectCreation"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_projectCreation (C_Compiler & inLexique,
                                const GGS_string  var_cas_inProjectName COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_projectCreation at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (((var_cas_inProjectName.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (155))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
    inLexique.printMessage (((GGS_string ("*** PERFORM PROJECT CREATION (--create-project=")).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string (" option) ***\n")) COMMA_SOURCE_FILE_AT_LINE (156)) ;
    GGS_bool var_cas_ok ;
    var_cas_ok = var_cas_inProjectName.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (158)).reader_isalpha (inLexique COMMA_SOURCE_FILE_AT_LINE (158)) ;
    GGS_uint  var_cas_index ;
    var_cas_index = GGS_uint (1U) ;
    GGS_uint _variant_14118 = var_cas_inProjectName.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (160)) ;
    GGS_bool _condition_14118 (_variant_14118.isBuilt (), true) ;
    while (_condition_14118.isBuiltAndTrue ()) {
      _condition_14118 = ((var_cas_index).operator_strictInf (var_cas_inProjectName.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (161)))).operator_and (var_cas_ok) ;
      if (_condition_14118.isBuiltAndTrue ()) {
        if (_variant_14118.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (165)) ;
          _condition_14118 = GGS_bool (false) ;
        }else{
          _variant_14118.decrement_operation (inLexique COMMA_HERE) ;
          GGS_char var_cas_c ;
          var_cas_c = var_cas_inProjectName.reader_characterAtIndex (inLexique, var_cas_index COMMA_SOURCE_FILE_AT_LINE (162)) ;
          var_cas_ok = (var_cas_c.reader_isalnum (inLexique COMMA_SOURCE_FILE_AT_LINE (163))).operator_or ((var_cas_c).operator_isEqual (GGS_char (TO_UNICODE ('_')))) ;
          var_cas_index.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (164)) ;
        }
      }
    }
    if (((var_cas_ok).operator_not ()).isBuiltAndTrue ()) {
      inLexique.printMessage (((GGS_string ("** Cannot create GALGAS project: the project name '")).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string ("' should begin by a letter followed by zero, one or more letters, digits and underscore character.\n")) COMMA_SOURCE_FILE_AT_LINE (167)) ;
    }
    if ((var_cas_ok).isBuiltAndTrue ()) {
      var_cas_ok = (var_cas_inProjectName.reader_directoryExists (inLexique COMMA_SOURCE_FILE_AT_LINE (173))).operator_not () ;
      if (((var_cas_ok).operator_not ()).isBuiltAndTrue ()) {
        inLexique.printMessage (((GGS_string ("*** Cannot create GALGAS project: '")).operator_concat (var_cas_inProjectName)).operator_concat (GGS_string ("' directory already exists.***\n")) COMMA_SOURCE_FILE_AT_LINE (175)) ;
      }
    }
    if ((var_cas_ok).isBuiltAndTrue ()) {
      ::routine_performProjectCreation (inLexique,  var_cas_inProjectName COMMA_SOURCE_FILE_AT_LINE (179)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_projectCreation\n") ;
  #endif
}

//---------------------------------------------------------------------------*

