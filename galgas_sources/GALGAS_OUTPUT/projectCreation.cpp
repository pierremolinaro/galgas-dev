//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'projectCreation.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     november 1st, 2010, at 21h23'7"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "projectCreation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "projectCreation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of wrapper 'projectCreationFileWrapper'           *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_projectCreationFileWrapper_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_projectCreationFileWrapper_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapperEx gWrapperDirectory_0_projectCreationFileWrapper (
  "",
  0,
  gWrapperAllFiles_projectCreationFileWrapper_0,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_0
) ;

//---------------------------------------------------------------------------*
//                                                                           *
//  'PROJECT_project' template of 'projectCreationFileWrapper' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_PROJECT_project (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "project all_" ;
    result << var_cas_PROJECT_NAME ;
    result << " -> " ;
    result << var_cas_PROJECT_NAME.reader_utf8Representation () ;
    result << ":\n"
      "#--- Targets\n"
      "  feature \"makefile-macosx\" ;\n"
      "  feature \"makefile-macosx-intel\" ;\n"
      "  feature \"makefile-macosx-ppc\" ;\n"
      "  feature \"makefile-macosx-universal\" ;\n"
      "  feature \"makefile-unix\" ;\n"
      "  feature \"makefile-i386-linux-on-macosx\" ;\n"
      "  feature \"makefile-mingw-on-macosx\" ;\n"
      "  feature \"makefile-msys-on-win32\" ;\n"
      "  feature \"xcode-project\" ;\n"
      "  feature \"xcode-arch:i386\" ;\n"
      "  feature \"xcode-arch:x86_64\" ;\n"
      "  feature \"xcode-arch:ppc\" ;\n"
      "  feature \"xcode-arch:ppc64\" ;\n"
      "\n"
      "#--- Source files (relative path from 'galgas_sources' directory)\n"
      "  lexique \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_lexique.gLexique\" ;\n"
      "  option \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_options.gOption\" ;\n"
      "  semantics \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_semantics.gSemantics\" ;\n"
      "  syntax \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_syntax.gSyntax\" ;\n"
      "  grammar \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_grammar.gGrammar\" ;\n"
      "  gui \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_cocoa.gGui\" ;\n"
      "  program \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_program.gProgram\" ;\n"
      "\n"
      "#--- Extern source file (relative path from 'hand_coded_sources' directory)\n"
      "  extern \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_computations.cpp\" ;\n"
      "end project ;\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   'PROJECT_cocoa' template of 'projectCreationFileWrapper' filewrapper    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_PROJECT_cocoa (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "gui " ;
    result << var_cas_PROJECT_NAME ;
    result << "_cocoa \"cocoa\" :\n"
      "\n"
      "with option \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_options.gOption\" ;\n"
      "\n"
      "with lexique \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_lexique.gLexique\" {\n"
      "  fileExtension: \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" ;\n"
      "  title: \"Source\" ;\n"
      "}\n"
      "\n"
      "end gui ;\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'PROJECT_grammar' template of 'projectCreationFileWrapper' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_PROJECT_grammar (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "grammar " ;
    result << var_cas_PROJECT_NAME ;
    result << "_grammar \"LL1\":\n"
      "with \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_syntax.gSyntax\" ;\n"
      "import lexique " ;
    result << var_cas_PROJECT_NAME ;
    result << "_lexique in \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_lexique.gLexique\" ;\n"
      "import option " ;
    result << var_cas_PROJECT_NAME ;
    result << "_options in \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_options.gOption\" ;\n"
      "import syntax " ;
    result << var_cas_PROJECT_NAME ;
    result << "_syntax in \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_syntax.gSyntax\" ;\n"
      "\n"
      "root <start_symbol> ;\n"
      "\n"
      "end grammar ;\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'PROJECT_lexique' template of 'projectCreationFileWrapper' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_PROJECT_lexique (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "lexique " ;
    result << var_cas_PROJECT_NAME ;
    result << "_lexique :\n"
      "\n"
      "# ADD YOUR CODE HERE\n"
      "\n"
      "end lexique ;\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'PROJECT_options' template of 'projectCreationFileWrapper' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_PROJECT_options (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "option " ;
    result << var_cas_PROJECT_NAME ;
    result << "_options :\n"
      "\n"
      "# ADD YOUR CODE HERE\n"
      "\n"
      "end option ;\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'PROJECT_program' template of 'projectCreationFileWrapper' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_PROJECT_program (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "program " ;
    result << var_cas_PROJECT_NAME ;
    result << "_program \"version 1.0.0\":\n"
      "#--- Import clauses (GALGAS 2)\n"
      "import \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_semantics.gSemantics\" ;\n"
      "import \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_grammar.gGrammar\" ;\n"
      "\n"
      "#--- Import clauses (GALGAS 1)\n"
      "import semantics " ;
    result << var_cas_PROJECT_NAME ;
    result << "_semantics in \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_semantics.gSemantics\" ;\n"
      "import grammar " ;
    result << var_cas_PROJECT_NAME ;
    result << "_grammar in \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_grammar.gGrammar\" ;\n"
      "\n"
      "#--- Prologue routine\n"
      "before {\n"
      "}\n"
      "\n"
      "#--- 'when' clauses\n"
      "when . \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\"\n"
      "message \"a source text file with the ." ;
    result << var_cas_PROJECT_NAME ;
    result << " extension\"\n"
      "\?\?@lstring inSourceFile {\n"
      "  grammar " ;
    result << var_cas_PROJECT_NAME ;
    result << "_grammar in inSourceFile ;\n"
      "}\n"
      "\n"
      "#--- Epilogue routine\n"
      "after {\n"
      "}\n"
      "\n"
      "#---\n"
      "\n"
      "end program ;\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// 'PROJECT_semantics' template of 'projectCreationFileWrapper' filewrapper  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_PROJECT_semantics (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "semantics " ;
    result << var_cas_PROJECT_NAME ;
    result << "_semantics :\n"
      "  import option " ;
    result << var_cas_PROJECT_NAME ;
    result << "_options in \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_options.gOption\" ;\n"
      "\n"
      "# ADD YOUR CODE HERE\n"
      "\n"
      "end semantics ;\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'PROJECT_syntax' template of 'projectCreationFileWrapper' filewrapper    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_PROJECT_syntax (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "syntax " ;
    result << var_cas_PROJECT_NAME ;
    result << "_syntax :\n"
      "with \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_lexique.gLexique\" ;\n"
      "import lexique " ;
    result << var_cas_PROJECT_NAME ;
    result << "_lexique in \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_lexique.gLexique\" ;\n"
      "import option " ;
    result << var_cas_PROJECT_NAME ;
    result << "_options in \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_options.gOption\" ;\n"
      "import semantics " ;
    result << var_cas_PROJECT_NAME ;
    result << "_semantics in \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_semantics.gSemantics\" ;\n"
      "\n"
      "# ADD YOUR CODE HERE\n"
      "\n"
      "nonterminal <start_symbol> ;\n"
      "\n"
      "rule <start_symbol> :\n"
      "# ADD YOUR CODE HERE\n"
      "end rule ;\n"
      "\n"
      "end syntax ;\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'PROJECT_computations' template of 'projectCreationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_projectCreationFileWrapper_PROJECT_computations (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//" ;
    result << (var_cas_PROJECT_NAME).operator_concat (GGS_string (" Project")).reader_stringByLeftAndRightPadding (GGS_uint (75U), GGS_char (TO_UNICODE (' '))) ;
    result << "*\n"
      "//                   Generated by GALGAS Project Creation                    *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "_semantics.h\"\n"
      "#include \"utilities/MF_MemoryControl.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "// ADD YOUR CODE HERE\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "performProjectCreation"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performProjectCreation (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectPath
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_performProjectCreation at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_projectName = var_cas_inProjectPath.reader_lastPathComponent () ;
  GGS_string var_cas_galgas_sources_DIR = (var_cas_inProjectPath).operator_concat (GGS_string ("/galgas_sources")) ;
  if (var_cas_galgas_sources_DIR.isBuilt ()) {
    var_cas_galgas_sources_DIR (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (49)) ;
  }
  const GGS_string temp_3127 = template_filewrapper_projectCreationFileWrapper_PROJECT_project (inLexique, var_cas_projectName) ;
  if (temp_3127.isBuilt ()) {
    temp_3127 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/all_"))).operator_concat (var_cas_projectName)).operator_concat (GGS_string (".gProject")) COMMA_SOURCE_FILE_AT_LINE (50)) ;
  }
  const GGS_string temp_3268 = template_filewrapper_projectCreationFileWrapper_PROJECT_cocoa (inLexique, var_cas_projectName) ;
  if (temp_3268.isBuilt ()) {
    temp_3268 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_projectName)).operator_concat (GGS_string ("_cocoa.gGui")) COMMA_SOURCE_FILE_AT_LINE (51)) ;
  }
  const GGS_string temp_3409 = template_filewrapper_projectCreationFileWrapper_PROJECT_grammar (inLexique, var_cas_projectName) ;
  if (temp_3409.isBuilt ()) {
    temp_3409 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_projectName)).operator_concat (GGS_string ("_grammar.gGrammar")) COMMA_SOURCE_FILE_AT_LINE (52)) ;
  }
  const GGS_string temp_3556 = template_filewrapper_projectCreationFileWrapper_PROJECT_lexique (inLexique, var_cas_projectName) ;
  if (temp_3556.isBuilt ()) {
    temp_3556 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_projectName)).operator_concat (GGS_string ("_lexique.gLexique")) COMMA_SOURCE_FILE_AT_LINE (53)) ;
  }
  const GGS_string temp_3703 = template_filewrapper_projectCreationFileWrapper_PROJECT_options (inLexique, var_cas_projectName) ;
  if (temp_3703.isBuilt ()) {
    temp_3703 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_projectName)).operator_concat (GGS_string ("_options.gOption")) COMMA_SOURCE_FILE_AT_LINE (54)) ;
  }
  const GGS_string temp_3849 = template_filewrapper_projectCreationFileWrapper_PROJECT_program (inLexique, var_cas_projectName) ;
  if (temp_3849.isBuilt ()) {
    temp_3849 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_projectName)).operator_concat (GGS_string ("_program.gProgram")) COMMA_SOURCE_FILE_AT_LINE (55)) ;
  }
  const GGS_string temp_3998 = template_filewrapper_projectCreationFileWrapper_PROJECT_semantics (inLexique, var_cas_projectName) ;
  if (temp_3998.isBuilt ()) {
    temp_3998 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_projectName)).operator_concat (GGS_string ("_semantics.gSemantics")) COMMA_SOURCE_FILE_AT_LINE (56)) ;
  }
  const GGS_string temp_4148 = template_filewrapper_projectCreationFileWrapper_PROJECT_syntax (inLexique, var_cas_projectName) ;
  if (temp_4148.isBuilt ()) {
    temp_4148 (HERE)->method_writeToFile (inLexique, (((var_cas_galgas_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_projectName)).operator_concat (GGS_string ("_syntax.gSyntax")) COMMA_SOURCE_FILE_AT_LINE (57)) ;
  }
  const GGS_string var_cas_hand_coded_sources_DIR = (var_cas_inProjectPath).operator_concat (GGS_string ("/hand_coded_sources")) ;
  if (var_cas_hand_coded_sources_DIR.isBuilt ()) {
    var_cas_hand_coded_sources_DIR (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (61)) ;
  }
  const GGS_string temp_4563 = template_filewrapper_projectCreationFileWrapper_PROJECT_computations (inLexique, var_cas_projectName) ;
  if (temp_4563.isBuilt ()) {
    temp_4563 (HERE)->method_writeToFile (inLexique, (((var_cas_hand_coded_sources_DIR).operator_concat (GGS_string ("/"))).operator_concat (var_cas_projectName)).operator_concat (GGS_string ("_computations.cpp")) COMMA_SOURCE_FILE_AT_LINE (62)) ;
  }
  inLexique.printMessage (GGS_string ("*** DONE ***\n") COMMA_SOURCE_FILE_AT_LINE (64)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_performProjectCreation\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "projectCreation"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_projectCreation (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectPath
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_projectCreation at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_5933 = (var_cas_inProjectPath.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_5933.isBuiltAndTrue ()) {
    inLexique.printMessage (((GGS_string ("*** PERFORM PROJECT CREATION (--create-project=")).operator_concat (var_cas_inProjectPath)).operator_concat (GGS_string (" option) ***\n")) COMMA_SOURCE_FILE_AT_LINE (73)) ;
    const GGS_string var_cas_projectName = var_cas_inProjectPath.reader_lastPathComponent () ;
    GGS_bool var_cas_ok = var_cas_projectName.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (76)).reader_isalpha (inLexique COMMA_SOURCE_FILE_AT_LINE (76)) ;
    GGS_uint  var_cas_idx = GGS_uint (1U) ;
    GGS_uint _variant_5382 = var_cas_projectName.reader_length () ;
    GGS_bool _condition_5382 (_variant_5382.isBuilt (), true) ;
    while (_condition_5382.isBuiltAndTrue ()) {
      _condition_5382 = ((var_cas_idx).operator_strictInf (var_cas_projectName.reader_length ())).operator_and (var_cas_ok) ;
      if (_condition_5382.isBuiltAndTrue ()) {
        if (_variant_5382.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (83)) ;
          _condition_5382 = GGS_bool (false) ;
        }else{
          _variant_5382.decrement_operation (inLexique COMMA_HERE) ;
          GGS_char var_cas_c = var_cas_projectName.reader_characterAtIndex (inLexique, var_cas_idx COMMA_SOURCE_FILE_AT_LINE (80)) ;
          var_cas_ok = (var_cas_c.reader_isalnum (inLexique COMMA_SOURCE_FILE_AT_LINE (81))).operator_or ((var_cas_c).operator_isEqual (GGS_char (TO_UNICODE ('_')))) ;
          var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (82)) ;
        }
      }
    }
    const GGS_bool cond_5626 = (var_cas_ok).operator_not () ;
    if (cond_5626.isBuiltAndTrue ()) {
      inLexique.printMessage (((GGS_string ("** Cannot create GALGAS project: the project name '")).operator_concat (var_cas_projectName)).operator_concat (GGS_string ("' should begin by a letter followed by zero, one or more letters, digits and underscore character.\n")) COMMA_SOURCE_FILE_AT_LINE (85)) ;
    }
    const GGS_bool cond_5848 = var_cas_ok ;
    if (cond_5848.isBuiltAndTrue ()) {
      var_cas_ok = (var_cas_inProjectPath.reader_directoryExists ()).operator_not () ;
      const GGS_bool cond_5835 = (var_cas_ok).operator_not () ;
      if (cond_5835.isBuiltAndTrue ()) {
        inLexique.printMessage (((GGS_string ("*** Cannot create GALGAS project: '")).operator_concat (var_cas_inProjectPath)).operator_concat (GGS_string ("' directory already exists.***\n")) COMMA_SOURCE_FILE_AT_LINE (93)) ;
      }
    }
    const GGS_bool cond_5922 = var_cas_ok ;
    if (cond_5922.isBuiltAndTrue ()) {
      ::routine_performProjectCreation (inLexique,  var_cas_inProjectPath COMMA_SOURCE_FILE_AT_LINE (97)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_projectCreation\n") ;
  #endif
}

//---------------------------------------------------------------------------*

