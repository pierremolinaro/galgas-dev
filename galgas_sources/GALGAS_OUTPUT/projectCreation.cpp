//-----------------------------------------------------------------------------*
//                                                                             *
//                         File 'projectCreation.cpp'                          *
//                         Generated by version 2.5.8                          *
//                        may 23th, 2014, at 11h18'11"                         *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "projectCreation.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//-----------------------------------------------------------------------------*


//-----------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "projectCreation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//-----------------------------------------------------------------------------*
//                                                                             *
//                  Filewrapper 'projectCreationFileWrapper'                   *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_projectCreationFileWrapper (
  "",
  0,
  gWrapperAllFiles_projectCreationFileWrapper_0,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_0
) ;


//-----------------------------------------------------------------------------*
//                                                                             *
//      Filewrapper template 'projectCreationFileWrapper PROJECT_project'      *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_project (C_Compiler * /* inCompiler */,
                                                                                 const GALGAS_string & in_PROJECT_5F_NAME
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "project all_" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << " (0:0:1) -> " ;
  result << in_PROJECT_5F_NAME.reader_utf_38_Representation (SOURCE_FILE_AT_LINE (1)).stringValue () ;
  result << ":\n"
    "#--- Targets\n"
    "  feature \"makefile_macosx\" ;\n"
    "  feature \"makefile_unix\" ;\n"
    "  feature \"makefile_i386_linux_on_macosx\" ;\n"
    "  feature \"makefile_x86_64_linux_on_macosx\" ;\n"
    "  feature \"makefile_mingw_on_macosx\" ;\n"
    "  feature \"makefile_msys_on_win32\" ;\n"
    "  feature \"SnowLeopard\" ;\n"
    "  feature applicationBundleBase : \"fr.what\" ;\n"
    "\n"
    "#--- Source files (relative path from 'galgas_sources' directory)\n"
    "  lexique \"" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_lexique.gLexique\" ;\n"
    "  option \"" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_options.gOption\" ;\n"
    "  semantics \"" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_semantics.gSemantics\" ;\n"
    "  syntax \"" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_syntax.gSyntax\" ;\n"
    "  grammar \"" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_grammar.gGrammar\" ;\n"
    "  gui \"" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_cocoa.gGui\" ;\n"
    "  program \"" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_program.gProgram\" ;\n"
    "\n"
    "#--- Extern source file (relative path from 'hand_coded_sources' directory)\n"
    "  extern \"" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_computations.cpp\" ;\n"
    "end project ;\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//       Filewrapper template 'projectCreationFileWrapper PROJECT_cocoa'       *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_cocoa (C_Compiler * /* inCompiler */,
                                                                               const GALGAS_string & in_PROJECT_5F_NAME
                                                                               COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "gui " ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_cocoa \"cocoa\" :\n"
    "\n"
    "with option \"" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_options.gOption\" ;\n"
    "\n"
    "with lexique \"" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_lexique.gLexique\" {\n"
    "  fileExtension: \"" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "\" ;\n"
    "  title: \"Source\" ;\n"
    "  blockComment : \"#\" ;\n"
    "}\n"
    "\n"
    "end gui ;\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//      Filewrapper template 'projectCreationFileWrapper PROJECT_grammar'      *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_grammar (C_Compiler * /* inCompiler */,
                                                                                 const GALGAS_string & in_PROJECT_5F_NAME
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "grammar " ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_grammar \"LL1\":\n"
    "with \"" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_syntax.gSyntax\" ;\n"
    "\n"
    "root <start_symbol> ;\n"
    "\n"
    "end grammar ;\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//      Filewrapper template 'projectCreationFileWrapper PROJECT_lexique'      *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_lexique (C_Compiler * /* inCompiler */,
                                                                                 const GALGAS_string & in_PROJECT_5F_NAME
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "lexique " ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_lexique :\n"
    "\n"
    "#----------------------------------------------------------------------------*\n"
    "#   Identifiers and keywords                                                 *\n"
    "#----------------------------------------------------------------------------*\n"
    "\n"
    "@string tokenString ;\n"
    "\n"
    "style keywordsStyle -> \"Keywords\" ;\n"
    "\n"
    "$identifier$ ! tokenString error message \"an identifier\" ;\n"
    "\n"
    "#--- This is the keyword list\n"
    "list keyWordList error message \"the '%K' keyword\" style keywordsStyle :\n"
    "  \"begin\",\n"
    "  \"end\"\n"
    ";\n"
    "\n"
    "rule 'a'->'z' |  'A'->'Z' :\n"
    "  repeat\n"
    "    enterCharacterIntoString !\?tokenString !* ;\n"
    "  while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :\n"
    "  end repeat ;\n"
    "  send search tokenString in keyWordList default $identifier$ ;\n"
    "end rule ;\n"
    "\n"
    "#----------------------------------------------------------------------------*\n"
    "#   Literal decimal integers                                                 *\n"
    "#----------------------------------------------------------------------------*\n"
    "\n"
    "style integerStyle -> \"Integer Constants\" ;\n"
    "@uint uint32value ;\n"
    "$integer$ !uint32value error message \"a 32-bit unsigned decimal number\" style integerStyle ;\n"
    "\n"
    "message decimalNumberTooLarge : \"decimal number too large\" ;\n"
    "message internalError : \"internal error\" ;\n"
    "\n"
    "rule '0'->'9' :\n"
    "  enterCharacterIntoString !\?tokenString !* ;\n"
    "  repeat\n"
    "  while '0'->'9' :\n"
    "    enterCharacterIntoString !\?tokenString !* ;\n"
    "  while '_' :\n"
    "  end repeat ;\n"
    "  convertDecimalStringIntoUInt !tokenString !\?uint32value error decimalNumberTooLarge, internalError ;\n"
    "  send $integer$ ;\n"
    "end rule ;\n"
    "\n"
    "#----------------------------------------------------------------------------*\n"
    "#   Literal character strings                                                *\n"
    "#----------------------------------------------------------------------------*\n"
    "\n"
    "style stringStyle -> \"String Constants\" ;\n"
    "$literal_string$ ! tokenString error message \"a character string constant \\\"...\\\"\" style stringStyle feature nonAtomicSelection ;\n"
    "\n"
    "\n"
    "message incorrectStringEnd : \"string does not end with '\\\"'\" ;\n"
    "\n"
    "rule '\"' :\n"
    "  repeat\n"
    "   while ' ' | '!' | '#'-> '\\uFFFD' :\n"
    "    enterCharacterIntoString !\?tokenString !* ;\n"
    "  end repeat ;\n"
    "  select\n"
    "  when '\"' :\n"
    "    send $literal_string$ ;\n"
    "  default\n"
    "    error incorrectStringEnd ;\n"
    "  end select ;\n"
    "end rule ;\n"
    "\n"
    "#----------------------------------------------------------------------------*\n"
    "#   Delimiters                                                               *\n"
    "#----------------------------------------------------------------------------*\n"
    "\n"
    "style delimitersStyle -> \"Delimiters\" ;\n"
    "list delimitorsList error message \"the '%K' delimitor\" style delimitersStyle :\n"
    "  \":\",    \",\",    \";\",   \"!\",  \"{\",  \"}\", \"->\", \"@\", \"*\", \"-\" ;\n"
    "\n"
    "rule list delimitorsList ;\n"
    "\n"
    "#----------------------------------------------------------------------------*\n"
    "#   Comments                                                                 *\n"
    "#----------------------------------------------------------------------------*\n"
    "\n"
    "style commentStyle -> \"Comments\" ;\n"
    "$comment$ error message \"a comment\" style commentStyle feature nonAtomicSelection ;\n"
    "rule '#' :\n"
    "  repeat\n"
    "  while '\\u0001' -> '\\u0009' | '\\u000B' | '\\u000C' | '\\u000E' -> '\\uFFFD' :\n"
    "  end repeat ;\n"
    "  drop $comment$ ;\n"
    "end rule ;\n"
    "\n"
    "#----------------------------------------------------------------------------*\n"
    "#   Separators                                                               *\n"
    "#----------------------------------------------------------------------------*\n"
    "\n"
    "rule '\\u0001' -> ' ' :\n"
    "end rule ;\n"
    "\n"
    "#----------------------------------------------------------------------------*\n"
    "\n"
    "end lexique ;\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//      Filewrapper template 'projectCreationFileWrapper PROJECT_options'      *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_options (C_Compiler * /* inCompiler */,
                                                                                 const GALGAS_string & in_PROJECT_5F_NAME
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "option " ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_options :\n"
    "\n"
    "# ADD YOUR CODE\n"
    "\n"
    "end option ;\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//      Filewrapper template 'projectCreationFileWrapper PROJECT_program'      *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_program (C_Compiler * /* inCompiler */,
                                                                                 const GALGAS_string & in_PROJECT_5F_NAME
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "program " ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_program:\n"
    "import \"" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_semantics.gSemantics\" ;\n"
    "import \"" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_grammar.gGrammar\" ;\n"
    "\n"
    "#--- Prologue routine\n"
    "before {\n"
    "}\n"
    "\n"
    "#--- 'when' clauses\n"
    "when . \"" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "\"\n"
    "message \"a source text file with the ." ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << " extension\"\n"
    "\?\?@lstring inSourceFile {\n"
    "  grammar " ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_grammar in inSourceFile ;\n"
    "}\n"
    "\n"
    "#--- Epilogue routine\n"
    "after {\n"
    "}\n"
    "\n"
    "#---\n"
    "\n"
    "end program ;\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//     Filewrapper template 'projectCreationFileWrapper PROJECT_semantics'     *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_semantics (C_Compiler * /* inCompiler */,
                                                                                   const GALGAS_string & in_PROJECT_5F_NAME
                                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "semantics " ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_semantics :\n"
    "  import \"" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_options.gOption\" ;\n"
    "\n"
    "# ADD YOUR CODE\n"
    "\n"
    "end semantics ;\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//      Filewrapper template 'projectCreationFileWrapper PROJECT_syntax'       *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_syntax (C_Compiler * /* inCompiler */,
                                                                                const GALGAS_string & in_PROJECT_5F_NAME
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "syntax " ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_syntax (\"" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_lexique.gLexique\") :\n"
    "import \"" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_options.gOption\" ;\n"
    "import \"" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_semantics.gSemantics\" ;\n"
    "\n"
    "rule <start_symbol> :\n"
    "  # ADD YOUR SYNTAX INSTRUCTIONS\n"
    "end rule ;\n"
    "\n"
    "# ADD OTHER RULES\n"
    "\n"
    "end syntax ;\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//   Filewrapper template 'projectCreationFileWrapper PROJECT_computations'    *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_computations (C_Compiler * /* inCompiler */,
                                                                                      const GALGAS_string & in_PROJECT_5F_NAME
                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//" ;
  result << in_PROJECT_5F_NAME.operator_concat (GALGAS_string (" Project") COMMA_SOURCE_FILE_AT_LINE (3)).reader_stringByLeftAndRightPadding (GALGAS_uint ((uint32_t) 77U), GALGAS_char (TO_UNICODE (32)) COMMA_SOURCE_FILE_AT_LINE (3)).stringValue () ;
  result << "*\n"
    "//                   Generated by GALGAS Project Creation                    *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "#include \"" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_semantics.h\"\n"
    "#include \"utilities/MF_MemoryControl.h\"\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "// ADD YOUR CODE\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                      Routine 'performProjectCreation'                       *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_performProjectCreation (const GALGAS_string constinArgument_inProjectPath,
                                     C_Compiler * inCompiler
                                     COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string var_projectName = constinArgument_inProjectPath.reader_lastPathComponent (SOURCE_FILE_AT_LINE (46)) ;
  GALGAS_string var_galgas_5F_sources_5F_DIR = constinArgument_inProjectPath.operator_concat (GALGAS_string ("/galgas_sources") COMMA_SOURCE_FILE_AT_LINE (48)) ;
  var_galgas_5F_sources_5F_DIR.method_makeDirectory (inCompiler COMMA_SOURCE_FILE_AT_LINE (49)) ;
  GALGAS_string (filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_project (inCompiler, var_projectName COMMA_SOURCE_FILE_AT_LINE (50))).method_writeToFile (var_galgas_5F_sources_5F_DIR.operator_concat (GALGAS_string ("/all_") COMMA_SOURCE_FILE_AT_LINE (50)).operator_concat (var_projectName COMMA_SOURCE_FILE_AT_LINE (50)).operator_concat (GALGAS_string (".gProject") COMMA_SOURCE_FILE_AT_LINE (50)), inCompiler COMMA_SOURCE_FILE_AT_LINE (50)) ;
  GALGAS_string (filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_cocoa (inCompiler, var_projectName COMMA_SOURCE_FILE_AT_LINE (51))).method_writeToFile (var_galgas_5F_sources_5F_DIR.operator_concat (GALGAS_string ("/") COMMA_SOURCE_FILE_AT_LINE (51)).operator_concat (var_projectName COMMA_SOURCE_FILE_AT_LINE (51)).operator_concat (GALGAS_string ("_cocoa.gGui") COMMA_SOURCE_FILE_AT_LINE (51)), inCompiler COMMA_SOURCE_FILE_AT_LINE (51)) ;
  GALGAS_string (filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_grammar (inCompiler, var_projectName COMMA_SOURCE_FILE_AT_LINE (52))).method_writeToFile (var_galgas_5F_sources_5F_DIR.operator_concat (GALGAS_string ("/") COMMA_SOURCE_FILE_AT_LINE (52)).operator_concat (var_projectName COMMA_SOURCE_FILE_AT_LINE (52)).operator_concat (GALGAS_string ("_grammar.gGrammar") COMMA_SOURCE_FILE_AT_LINE (52)), inCompiler COMMA_SOURCE_FILE_AT_LINE (52)) ;
  GALGAS_string (filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_lexique (inCompiler, var_projectName COMMA_SOURCE_FILE_AT_LINE (53))).method_writeToFile (var_galgas_5F_sources_5F_DIR.operator_concat (GALGAS_string ("/") COMMA_SOURCE_FILE_AT_LINE (53)).operator_concat (var_projectName COMMA_SOURCE_FILE_AT_LINE (53)).operator_concat (GALGAS_string ("_lexique.gLexique") COMMA_SOURCE_FILE_AT_LINE (53)), inCompiler COMMA_SOURCE_FILE_AT_LINE (53)) ;
  GALGAS_string (filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_options (inCompiler, var_projectName COMMA_SOURCE_FILE_AT_LINE (54))).method_writeToFile (var_galgas_5F_sources_5F_DIR.operator_concat (GALGAS_string ("/") COMMA_SOURCE_FILE_AT_LINE (54)).operator_concat (var_projectName COMMA_SOURCE_FILE_AT_LINE (54)).operator_concat (GALGAS_string ("_options.gOption") COMMA_SOURCE_FILE_AT_LINE (54)), inCompiler COMMA_SOURCE_FILE_AT_LINE (54)) ;
  GALGAS_string (filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_program (inCompiler, var_projectName COMMA_SOURCE_FILE_AT_LINE (55))).method_writeToFile (var_galgas_5F_sources_5F_DIR.operator_concat (GALGAS_string ("/") COMMA_SOURCE_FILE_AT_LINE (55)).operator_concat (var_projectName COMMA_SOURCE_FILE_AT_LINE (55)).operator_concat (GALGAS_string ("_program.gProgram") COMMA_SOURCE_FILE_AT_LINE (55)), inCompiler COMMA_SOURCE_FILE_AT_LINE (55)) ;
  GALGAS_string (filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_semantics (inCompiler, var_projectName COMMA_SOURCE_FILE_AT_LINE (56))).method_writeToFile (var_galgas_5F_sources_5F_DIR.operator_concat (GALGAS_string ("/") COMMA_SOURCE_FILE_AT_LINE (56)).operator_concat (var_projectName COMMA_SOURCE_FILE_AT_LINE (56)).operator_concat (GALGAS_string ("_semantics.gSemantics") COMMA_SOURCE_FILE_AT_LINE (56)), inCompiler COMMA_SOURCE_FILE_AT_LINE (56)) ;
  GALGAS_string (filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_syntax (inCompiler, var_projectName COMMA_SOURCE_FILE_AT_LINE (57))).method_writeToFile (var_galgas_5F_sources_5F_DIR.operator_concat (GALGAS_string ("/") COMMA_SOURCE_FILE_AT_LINE (57)).operator_concat (var_projectName COMMA_SOURCE_FILE_AT_LINE (57)).operator_concat (GALGAS_string ("_syntax.gSyntax") COMMA_SOURCE_FILE_AT_LINE (57)), inCompiler COMMA_SOURCE_FILE_AT_LINE (57)) ;
  GALGAS_string var_hand_5F_coded_5F_sources_5F_DIR = constinArgument_inProjectPath.operator_concat (GALGAS_string ("/hand_coded_sources") COMMA_SOURCE_FILE_AT_LINE (59)) ;
  var_hand_5F_coded_5F_sources_5F_DIR.method_makeDirectory (inCompiler COMMA_SOURCE_FILE_AT_LINE (60)) ;
  GALGAS_string (filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_computations (inCompiler, var_projectName COMMA_SOURCE_FILE_AT_LINE (61))).method_writeToFile (var_hand_5F_coded_5F_sources_5F_DIR.operator_concat (GALGAS_string ("/") COMMA_SOURCE_FILE_AT_LINE (61)).operator_concat (var_projectName COMMA_SOURCE_FILE_AT_LINE (61)).operator_concat (GALGAS_string ("_computations.cpp") COMMA_SOURCE_FILE_AT_LINE (61)), inCompiler COMMA_SOURCE_FILE_AT_LINE (61)) ;
  inCompiler->printMessage (GALGAS_string ("*** DONE ***\n") COMMA_SOURCE_FILE_AT_LINE (63)) ;
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                          Routine 'projectCreation'                          *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_projectCreation (const GALGAS_string constinArgument_inProjectPath,
                              C_Compiler * inCompiler
                              COMMA_UNUSED_LOCATION_ARGS) {
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, constinArgument_inProjectPath.reader_length (SOURCE_FILE_AT_LINE (71)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->printMessage (GALGAS_string ("*** PERFORM PROJECT CREATION (--create-project=").operator_concat (constinArgument_inProjectPath COMMA_SOURCE_FILE_AT_LINE (72)).operator_concat (GALGAS_string (" option) ***\n") COMMA_SOURCE_FILE_AT_LINE (72)) COMMA_SOURCE_FILE_AT_LINE (72)) ;
    GALGAS_string var_projectName = constinArgument_inProjectPath.reader_lastPathComponent (SOURCE_FILE_AT_LINE (74)) ;
    GALGAS_bool var_ok = var_projectName.reader_characterAtIndex (GALGAS_uint ((uint32_t) 0U), inCompiler COMMA_SOURCE_FILE_AT_LINE (75)).reader_isalpha (SOURCE_FILE_AT_LINE (75)) ;
    GALGAS_uint var_idx = GALGAS_uint ((uint32_t) 1U) ;
    if (var_projectName.reader_length (SOURCE_FILE_AT_LINE (77)).isValid ()) {
      uint32_t variant_5007 = var_projectName.reader_length (SOURCE_FILE_AT_LINE (77)).uintValue () ;
      bool loop_5007 = true ;
      while (loop_5007) {
        loop_5007 = GALGAS_bool (kIsStrictInf, var_idx.objectCompare (var_projectName.reader_length (SOURCE_FILE_AT_LINE (78)))).operator_and (var_ok COMMA_SOURCE_FILE_AT_LINE (78)).isValid () ;
        if (loop_5007) {
          loop_5007 = GALGAS_bool (kIsStrictInf, var_idx.objectCompare (var_projectName.reader_length (SOURCE_FILE_AT_LINE (78)))).operator_and (var_ok COMMA_SOURCE_FILE_AT_LINE (78)).boolValue () ;
        }
        if (loop_5007 && (0 == variant_5007)) {
          loop_5007 = false ;
          inCompiler->loopRunTimeVariantError (SOURCE_FILE_AT_LINE (77)) ;
        }
        if (loop_5007) {
          variant_5007 -- ;
          GALGAS_char var_c = var_projectName.reader_characterAtIndex (var_idx, inCompiler COMMA_SOURCE_FILE_AT_LINE (79)) ;
          var_ok = var_c.reader_isalnum (SOURCE_FILE_AT_LINE (80)).operator_or (GALGAS_bool (kIsEqual, var_c.objectCompare (GALGAS_char (TO_UNICODE (95)))) COMMA_SOURCE_FILE_AT_LINE (80)) ;
          var_idx.increment_operation (inCompiler COMMA_SOURCE_FILE_AT_LINE (81)) ;
        }
      }
    }
    const enumGalgasBool test_1 = var_ok.operator_not (SOURCE_FILE_AT_LINE (83)).boolEnum () ;
    if (kBoolTrue == test_1) {
      inCompiler->printMessage (GALGAS_string ("** Cannot create GALGAS project: the project name '").operator_concat (var_projectName COMMA_SOURCE_FILE_AT_LINE (84)).operator_concat (GALGAS_string ("' should begin by a letter followed by zero, one or more letters, digits and underscore character.\n") COMMA_SOURCE_FILE_AT_LINE (85)) COMMA_SOURCE_FILE_AT_LINE (84)) ;
    }
    const enumGalgasBool test_2 = var_ok.boolEnum () ;
    if (kBoolTrue == test_2) {
      var_ok = constinArgument_inProjectPath.reader_directoryExists (SOURCE_FILE_AT_LINE (90)).operator_not (SOURCE_FILE_AT_LINE (90)) ;
      const enumGalgasBool test_3 = var_ok.operator_not (SOURCE_FILE_AT_LINE (91)).boolEnum () ;
      if (kBoolTrue == test_3) {
        inCompiler->printMessage (GALGAS_string ("*** Cannot create GALGAS project: '").operator_concat (constinArgument_inProjectPath COMMA_SOURCE_FILE_AT_LINE (92)).operator_concat (GALGAS_string ("' directory already exists.***\n") COMMA_SOURCE_FILE_AT_LINE (92)) COMMA_SOURCE_FILE_AT_LINE (92)) ;
      }
    }
    const enumGalgasBool test_4 = var_ok.boolEnum () ;
    if (kBoolTrue == test_4) {
      {
      routine_performProjectCreation (constinArgument_inProjectPath, inCompiler COMMA_SOURCE_FILE_AT_LINE (96)) ;
      }
    }
  }
}


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


