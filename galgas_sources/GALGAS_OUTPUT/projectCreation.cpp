//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                             File 'projectCreation.cpp'                                              *
//                                             Generated by version 2.7.0                                              *
//                                          august 24th, 2014, at 19h22'19"                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------------------------------------------------*

#include "projectCreation.h"


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      Filewrapper 'projectCreationFileWrapper'                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_projectCreationFileWrapper_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_projectCreationFileWrapper_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_projectCreationFileWrapper (
  "",
  0,
  gWrapperAllFiles_projectCreationFileWrapper_0,
  0,
  gWrapperAllDirectories_projectCreationFileWrapper_0
) ;


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          Filewrapper template 'projectCreationFileWrapper PROJECT_project'                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_project (C_Compiler * /* inCompiler */,
                                                                                 const GALGAS_string & in_PROJECT_5F_NAME
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "project (0:0:1) -> " ;
  result << in_PROJECT_5F_NAME.reader_utf_38_Representation (SOURCE_FILE ("+PROJECT.galgasProject.gTemplate", 1)).stringValue () ;
  result << " {\n"
    "#--- Targets\n"
    "  %makefile-macosx\n"
    "  %makefile-unix\n"
    "  %makefile-x86linux32-on-macosx\n"
    "  %makefile-x86linux64-on-macosx\n"
    "  %makefile-win32-on-macosx\n"
    "  %makefile-msys32-on-windows\n"
    "  %LatestMacOS\n"
    "  %applicationBundleBase : \"fr.what\"\n"
    "\n"
    "#--- Source files\n"
    "  \"galgas-sources/" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "-lexique.galgas\"\n"
    "  \"galgas-sources/" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "-options.galgas\"\n"
    "  \"galgas-sources/" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "-semantics.galgas\"\n"
    "  \"galgas-sources/" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "-syntax.galgas\"\n"
    "  \"galgas-sources/" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "-grammar.galgas\"\n"
    "  \"galgas-sources/" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "-cocoa.galgas\"\n"
    "  \"galgas-sources/" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "-program.galgas\"\n"
    "}\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                           Filewrapper template 'projectCreationFileWrapper PROJECT_cocoa'                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_cocoa (C_Compiler * /* inCompiler */,
                                                                               const GALGAS_string & in_PROJECT_5F_NAME
                                                                               COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "gui cocoa {\n"
    "  with option " ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_options\n"
    "\n"
    "  with lexique " ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_lexique {\n"
    "    fileExtension: \"" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "\"\n"
    "    title: \"Source\"\n"
    "    blockComment : \"#\"\n"
    "  }\n"
    "\n"
    "}\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          Filewrapper template 'projectCreationFileWrapper PROJECT_grammar'                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_grammar (C_Compiler * /* inCompiler */,
                                                                                 const GALGAS_string & in_PROJECT_5F_NAME
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "grammar " ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_grammar \"LL1\" {\n"
    "  syntax " ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_syntax\n"
    "  <start_symbol>\n"
    "}\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          Filewrapper template 'projectCreationFileWrapper PROJECT_lexique'                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_lexique (C_Compiler * /* inCompiler */,
                                                                                 const GALGAS_string & in_PROJECT_5F_NAME
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "lexique " ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_lexique {\n"
    "\n"
    "#----------------------------------------------------------------------------*\n"
    "#   Identifiers and keywords                                                 *\n"
    "#----------------------------------------------------------------------------*\n"
    "\n"
    "@string tokenString\n"
    "\n"
    "style keywordsStyle -> \"Keywords\"\n"
    "\n"
    "$identifier$ ! tokenString {error message \"an identifier\"}\n"
    "\n"
    "#--- This is the keyword list\n"
    "list keyWordList error message \"the '%K' keyword\" style keywordsStyle {\n"
    "  \"begin\",\n"
    "  \"end\"\n"
    "}\n"
    "\n"
    "rule 'a'->'z' |  'A'->'Z' {\n"
    "  repeat\n"
    "    enterCharacterIntoString (!\?tokenString !*)\n"
    "  while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :\n"
    "  end\n"
    "  send search tokenString in keyWordList default $identifier$\n"
    "}\n"
    "\n"
    "#----------------------------------------------------------------------------*\n"
    "#   Literal decimal integers                                                 *\n"
    "#----------------------------------------------------------------------------*\n"
    "\n"
    "style integerStyle -> \"Integer Constants\"\n"
    "@uint uint32value\n"
    "$integer$ !uint32value {error message \"a 32-bit unsigned decimal number\" style integerStyle}\n"
    "\n"
    "message decimalNumberTooLarge : \"decimal number too large\"\n"
    "message internalError : \"internal error\"\n"
    "\n"
    "rule '0'->'9' {\n"
    "  enterCharacterIntoString (!\?tokenString !*)\n"
    "  repeat\n"
    "  while '0'->'9' :\n"
    "    enterCharacterIntoString (!\?tokenString !*)\n"
    "  while '_' :\n"
    "  end\n"
    "  convertDecimalStringIntoUInt (!tokenString !\?uint32value error decimalNumberTooLarge, internalError)\n"
    "  send $integer$\n"
    "}\n"
    "\n"
    "#----------------------------------------------------------------------------*\n"
    "#   Literal character strings                                                *\n"
    "#----------------------------------------------------------------------------*\n"
    "\n"
    "style stringStyle -> \"String Constants\"\n"
    "$literal_string$ ! tokenString { error message \"a character string constant \\\"...\\\"\" style stringStyle %nonAtomicSelection}\n"
    "\n"
    "\n"
    "message incorrectStringEnd : \"string does not end with '\\\"'\"\n"
    "\n"
    "rule '\"' {\n"
    "  repeat\n"
    "   while ' ' | '!' | '#'-> '\\uFFFD' :\n"
    "    enterCharacterIntoString (!\?tokenString !*)\n"
    "  end\n"
    "  select\n"
    "  case '\"' :\n"
    "    send $literal_string$\n"
    "  default\n"
    "    error incorrectStringEnd\n"
    "  end\n"
    "}\n"
    "\n"
    "#----------------------------------------------------------------------------*\n"
    "#   Delimiters                                                               *\n"
    "#----------------------------------------------------------------------------*\n"
    "\n"
    "style delimitersStyle -> \"Delimiters\"\n"
    "list delimitorsList error message \"the '%K' delimitor\" style delimitersStyle {\n"
    "  \":\",    \",\",    \";\",   \"!\",  \"{\",  \"}\", \"->\", \"@\", \"*\", \"-\"\n"
    "}\n"
    "\n"
    "rule list delimitorsList\n"
    "\n"
    "#----------------------------------------------------------------------------*\n"
    "#   Comments                                                                 *\n"
    "#----------------------------------------------------------------------------*\n"
    "\n"
    "style commentStyle -> \"Comments\"\n"
    "$comment$ {error message \"a comment\" style commentStyle %nonAtomicSelection}\n"
    "rule '#' {\n"
    "  repeat\n"
    "  while '\\u0001' -> '\\u0009' | '\\u000B' | '\\u000C' | '\\u000E' -> '\\uFFFD' :\n"
    "  end\n"
    "  drop $comment$\n"
    "}\n"
    "\n"
    "#----------------------------------------------------------------------------*\n"
    "#   Separators                                                               *\n"
    "#----------------------------------------------------------------------------*\n"
    "\n"
    "rule '\\u0001' -> ' ' {\n"
    "}\n"
    "\n"
    "#----------------------------------------------------------------------------*\n"
    "\n"
    "}\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          Filewrapper template 'projectCreationFileWrapper PROJECT_options'                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_options (C_Compiler * /* inCompiler */,
                                                                                 const GALGAS_string & in_PROJECT_5F_NAME
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "option " ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_options {\n"
    "\n"
    "# ADD YOUR CODE\n"
    "\n"
    "}\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          Filewrapper template 'projectCreationFileWrapper PROJECT_program'                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_program (C_Compiler * /* inCompiler */,
                                                                                 const GALGAS_string & in_PROJECT_5F_NAME
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "#--- Prologue routine\n"
    "before {\n"
    "}\n"
    "\n"
    "#--- 'when' clauses\n"
    "case . \"" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "\"\n"
    "message \"a source text file with the ." ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << " extension\"\n"
    "\?sourceFilePath:@lstring inSourceFile {\n"
    "  grammar " ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_grammar in inSourceFile\n"
    "}\n"
    "\n"
    "#--- Epilogue routine\n"
    "after {\n"
    "}\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                         Filewrapper template 'projectCreationFileWrapper PROJECT_semantics'                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_semantics (C_Compiler * /* inCompiler */,
                                                                                   const GALGAS_string & /* in_PROJECT_5F_NAME */
                                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "\n"
    "# ADD YOUR CODE\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          Filewrapper template 'projectCreationFileWrapper PROJECT_syntax'                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_syntax (C_Compiler * /* inCompiler */,
                                                                                const GALGAS_string & in_PROJECT_5F_NAME
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "syntax " ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_syntax (" ;
  result << in_PROJECT_5F_NAME.stringValue () ;
  result << "_lexique) {\n"
    "\n"
    "rule <start_symbol> {\n"
    "  # ADD YOUR SYNTAX INSTRUCTIONS\n"
    "}\n"
    "\n"
    "# ADD OTHER RULES\n"
    "\n"
    "}\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          Routine 'performProjectCreation'                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_performProjectCreation (const GALGAS_string constinArgument_inProjectPath,
                                     C_Compiler * inCompiler
                                     COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string var_projectName = constinArgument_inProjectPath.reader_lastPathComponent (SOURCE_FILE ("projectCreation.gSemantics", 46)) ;
  GALGAS_string var_galgas_5F_sources_5F_DIR = constinArgument_inProjectPath.operator_concat (GALGAS_string ("/galgas-sources")  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 48)) ;
  var_galgas_5F_sources_5F_DIR.method_makeDirectory (inCompiler COMMA_SOURCE_FILE ("projectCreation.gSemantics", 49)) ;
  GALGAS_string (filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_project (inCompiler, var_projectName COMMA_SOURCE_FILE ("projectCreation.gSemantics", 50))).method_writeToFile (constinArgument_inProjectPath.operator_concat (GALGAS_string ("/+")  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 50)).operator_concat (var_projectName  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 50)).operator_concat (GALGAS_string (".galgasProject")  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 50)), inCompiler COMMA_SOURCE_FILE ("projectCreation.gSemantics", 50)) ;
  GALGAS_string (filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_cocoa (inCompiler, var_projectName COMMA_SOURCE_FILE ("projectCreation.gSemantics", 51))).method_writeToFile (var_galgas_5F_sources_5F_DIR.operator_concat (GALGAS_string ("/")  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 51)).operator_concat (var_projectName  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 51)).operator_concat (GALGAS_string ("-cocoa.galgas")  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 51)), inCompiler COMMA_SOURCE_FILE ("projectCreation.gSemantics", 51)) ;
  GALGAS_string (filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_grammar (inCompiler, var_projectName COMMA_SOURCE_FILE ("projectCreation.gSemantics", 52))).method_writeToFile (var_galgas_5F_sources_5F_DIR.operator_concat (GALGAS_string ("/")  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 52)).operator_concat (var_projectName  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 52)).operator_concat (GALGAS_string ("-grammar.galgas")  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 52)), inCompiler COMMA_SOURCE_FILE ("projectCreation.gSemantics", 52)) ;
  GALGAS_string (filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_lexique (inCompiler, var_projectName COMMA_SOURCE_FILE ("projectCreation.gSemantics", 53))).method_writeToFile (var_galgas_5F_sources_5F_DIR.operator_concat (GALGAS_string ("/")  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 53)).operator_concat (var_projectName  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 53)).operator_concat (GALGAS_string ("-lexique.galgas")  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 53)), inCompiler COMMA_SOURCE_FILE ("projectCreation.gSemantics", 53)) ;
  GALGAS_string (filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_options (inCompiler, var_projectName COMMA_SOURCE_FILE ("projectCreation.gSemantics", 54))).method_writeToFile (var_galgas_5F_sources_5F_DIR.operator_concat (GALGAS_string ("/")  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 54)).operator_concat (var_projectName  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 54)).operator_concat (GALGAS_string ("-options.galgas")  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 54)), inCompiler COMMA_SOURCE_FILE ("projectCreation.gSemantics", 54)) ;
  GALGAS_string (filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_program (inCompiler, var_projectName COMMA_SOURCE_FILE ("projectCreation.gSemantics", 55))).method_writeToFile (var_galgas_5F_sources_5F_DIR.operator_concat (GALGAS_string ("/")  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 55)).operator_concat (var_projectName  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 55)).operator_concat (GALGAS_string ("-program.galgas")  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 55)), inCompiler COMMA_SOURCE_FILE ("projectCreation.gSemantics", 55)) ;
  GALGAS_string (filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_semantics (inCompiler, var_projectName COMMA_SOURCE_FILE ("projectCreation.gSemantics", 56))).method_writeToFile (var_galgas_5F_sources_5F_DIR.operator_concat (GALGAS_string ("/")  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 56)).operator_concat (var_projectName  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 56)).operator_concat (GALGAS_string ("-semantics.galgas")  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 56)), inCompiler COMMA_SOURCE_FILE ("projectCreation.gSemantics", 56)) ;
  GALGAS_string (filewrapperTemplate_projectCreationFileWrapper_PROJECT_5F_syntax (inCompiler, var_projectName COMMA_SOURCE_FILE ("projectCreation.gSemantics", 57))).method_writeToFile (var_galgas_5F_sources_5F_DIR.operator_concat (GALGAS_string ("/")  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 57)).operator_concat (var_projectName  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 57)).operator_concat (GALGAS_string ("-syntax.galgas")  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 57)), inCompiler COMMA_SOURCE_FILE ("projectCreation.gSemantics", 57)) ;
  inCompiler->printMessage (GALGAS_string ("*** DONE ***\n")  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 63)) ;
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              Routine 'projectCreation'                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_projectCreation (const GALGAS_string constinArgument_inProjectPath,
                              C_Compiler * inCompiler
                              COMMA_UNUSED_LOCATION_ARGS) {
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, constinArgument_inProjectPath.reader_length (SOURCE_FILE ("projectCreation.gSemantics", 71)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->printMessage (GALGAS_string ("*** PERFORM PROJECT CREATION (--create-project=").operator_concat (constinArgument_inProjectPath  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 72)).operator_concat (GALGAS_string (" option) ***\n")  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 72))  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 72)) ;
    GALGAS_string var_projectName = constinArgument_inProjectPath.reader_lastPathComponent (SOURCE_FILE ("projectCreation.gSemantics", 74)) ;
    GALGAS_bool var_ok = var_projectName.reader_characterAtIndex (GALGAS_uint ((uint32_t) 0U), inCompiler COMMA_SOURCE_FILE ("projectCreation.gSemantics", 75)).reader_isalpha (SOURCE_FILE ("projectCreation.gSemantics", 75)) ;
    GALGAS_uint var_idx = GALGAS_uint ((uint32_t) 1U) ;
    if (var_projectName.reader_length (SOURCE_FILE ("projectCreation.gSemantics", 77)).isValid ()) {
      uint32_t variant_4991 = var_projectName.reader_length (SOURCE_FILE ("projectCreation.gSemantics", 77)).uintValue () ;
      bool loop_4991 = true ;
      while (loop_4991) {
        loop_4991 = GALGAS_bool (kIsStrictInf, var_idx.objectCompare (var_projectName.reader_length (SOURCE_FILE ("projectCreation.gSemantics", 78)))).operator_and (var_ok COMMA_SOURCE_FILE ("projectCreation.gSemantics", 78)).isValid () ;
        if (loop_4991) {
          loop_4991 = GALGAS_bool (kIsStrictInf, var_idx.objectCompare (var_projectName.reader_length (SOURCE_FILE ("projectCreation.gSemantics", 78)))).operator_and (var_ok COMMA_SOURCE_FILE ("projectCreation.gSemantics", 78)).boolValue () ;
        }
        if (loop_4991 && (0 == variant_4991)) {
          loop_4991 = false ;
          inCompiler->loopRunTimeVariantError (SOURCE_FILE ("projectCreation.gSemantics", 77)) ;
        }
        if (loop_4991) {
          variant_4991 -- ;
          GALGAS_char var_c = var_projectName.reader_characterAtIndex (var_idx, inCompiler COMMA_SOURCE_FILE ("projectCreation.gSemantics", 79)) ;
          var_ok = var_c.reader_isalnum (SOURCE_FILE ("projectCreation.gSemantics", 80)).operator_or (GALGAS_bool (kIsEqual, var_c.objectCompare (GALGAS_char (TO_UNICODE (95)))) COMMA_SOURCE_FILE ("projectCreation.gSemantics", 80)) ;
          var_idx.increment_operation (inCompiler  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 81)) ;
        }
      }
    }
    const enumGalgasBool test_1 = var_ok.operator_not (SOURCE_FILE ("projectCreation.gSemantics", 83)).boolEnum () ;
    if (kBoolTrue == test_1) {
      inCompiler->printMessage (GALGAS_string ("** Cannot create GALGAS project: the project name '").operator_concat (var_projectName  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 84)).operator_concat (GALGAS_string ("' should begin by a letter followed by zero, one or more letters, digits and underscore character.\n")  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 85))  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 84)) ;
    }
    const enumGalgasBool test_2 = var_ok.boolEnum () ;
    if (kBoolTrue == test_2) {
      var_ok = constinArgument_inProjectPath.reader_directoryExists (SOURCE_FILE ("projectCreation.gSemantics", 90)).operator_not (SOURCE_FILE ("projectCreation.gSemantics", 90)) ;
      const enumGalgasBool test_3 = var_ok.operator_not (SOURCE_FILE ("projectCreation.gSemantics", 91)).boolEnum () ;
      if (kBoolTrue == test_3) {
        inCompiler->printMessage (GALGAS_string ("*** Cannot create GALGAS project: '").operator_concat (constinArgument_inProjectPath  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 92)).operator_concat (GALGAS_string ("' directory already exists.***\n")  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 92))  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 92)) ;
      }
    }
    const enumGalgasBool test_4 = var_ok.boolEnum () ;
    if (kBoolTrue == test_4) {
      {
      routine_performProjectCreation (constinArgument_inProjectPath, inCompiler  COMMA_SOURCE_FILE ("projectCreation.gSemantics", 96)) ;
      }
    }
  }
}


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


