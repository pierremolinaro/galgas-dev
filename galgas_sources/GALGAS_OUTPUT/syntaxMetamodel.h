//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'syntaxMetamodel.h'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      april 24th, 2009, at 20h28'12"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef syntaxMetamodel_DEFINED
#define syntaxMetamodel_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_listmap.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

// Include imported semantics
#include "expressionMetamodel.h"
#include "instructionMetamodel.h"
#include "parameterArgumentMetamodel.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_syntaxInstructionList ;
class GGS_nonTerminalLabelList ;
class GGS_nonterminalDeclarationList ;
class GGS_syntaxRuleLabelList ;
class GGS_syntaxRuleList ;
class GGS_nonterminalCallInstruction ;
class cPtr_nonterminalCallInstruction ;
class GGS_terminalCheckInstruction ;
class cPtr_terminalCheckInstruction ;
class GGS_listOfSyntaxInstructionList ;
class GGS_repeatInstruction ;
class cPtr_repeatInstruction ;
class GGS_selectInstruction ;
class cPtr_selectInstruction ;
class GGS_parseDoInstruction ;
class cPtr_parseDoInstruction ;
class GGS_blockInstruction ;
class cPtr_blockInstruction ;
class GGS_syntaxComponentRoot ;
class cPtr_syntaxComponentRoot ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@syntaxInstructionList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_syntaxInstructionList ;

class GGS_syntaxInstructionList : public AC_galgas_list {
  public : typedef elementOf_GGS_syntaxInstructionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_syntaxInstructionList constructor_emptyList (void) ;
  public : static GGS_syntaxInstructionList constructor_listWithValue (const GGS_syntaxInstruction & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_syntaxInstructionList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_syntaxInstructionList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_syntaxInstructionList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_syntaxInstructionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_syntaxInstruction & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_syntaxInstruction & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_syntaxInstruction & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_syntaxInstruction & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_syntaxInstructionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_syntaxInstruction & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_syntaxInstructionList _operator_concat (const GGS_syntaxInstructionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_syntaxInstruction & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_syntaxInstruction & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_syntaxInstruction & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_syntaxInstruction 
  reader_mInstructionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMInstructionAtIndex (C_Compiler & inLexique,
                              const GGS_syntaxInstruction  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_syntaxInstructionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_syntaxInstruction   & _mInstruction (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@nonTerminalLabelList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_nonTerminalLabelList ;

class GGS_nonTerminalLabelList : public AC_galgas_list {
  public : typedef elementOf_GGS_nonTerminalLabelList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_nonTerminalLabelList constructor_emptyList (void) ;
  public : static GGS_nonTerminalLabelList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_nonTerminalLabelList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_nonTerminalLabelList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_nonTerminalLabelList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_nonTerminalLabelList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_formalParameterList & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_formalParameterList & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_formalParameterList & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_formalParameterList & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_nonTerminalLabelList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_nonTerminalLabelList _operator_concat (const GGS_nonTerminalLabelList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mLabelNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_formalParameterList 
  reader_mFormalParametersAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMLabelNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMFormalParametersAtIndex (C_Compiler & inLexique,
                              const GGS_formalParameterList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_nonTerminalLabelList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_lstring   & _mLabelName (LOCATION_ARGS) const ;
  public : /* const */ GGS_formalParameterList   & _mFormalParameters (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@nonterminalDeclarationList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_nonterminalDeclarationList ;

class GGS_nonterminalDeclarationList : public AC_galgas_list {
  public : typedef elementOf_GGS_nonterminalDeclarationList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_nonterminalDeclarationList constructor_emptyList (void) ;
  public : static GGS_nonterminalDeclarationList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelList & argument_1,
                                const GGS_bool& argument_2) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_nonterminalDeclarationList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_nonterminalDeclarationList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_nonterminalDeclarationList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_nonterminalDeclarationList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_nonTerminalLabelList & _out_1,
                              GGS_bool& _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_nonTerminalLabelList & _out_1,
                             GGS_bool& _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_nonTerminalLabelList & _out_1,
                                GGS_bool& _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_nonTerminalLabelList & _out_1,
                                 GGS_bool& _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_nonterminalDeclarationList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelList & argument_1,
                                const GGS_bool& argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_nonterminalDeclarationList _operator_concat (const GGS_nonterminalDeclarationList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelList & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelList & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelList & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mNonterminalNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_nonTerminalLabelList 
  reader_mLabelsAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_bool
  reader_mHasParseLabelAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMNonterminalNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMLabelsAtIndex (C_Compiler & inLexique,
                              const GGS_nonTerminalLabelList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMHasParseLabelAtIndex (C_Compiler & inLexique,
                              const GGS_bool & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_nonterminalDeclarationList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_lstring   & _mNonterminalName (LOCATION_ARGS) const ;
  public : /* const */ GGS_nonTerminalLabelList   & _mLabels (LOCATION_ARGS) const ;
  public : /* const */ GGS_bool  & _mHasParseLabel (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@syntaxRuleLabelList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_syntaxRuleLabelList ;

class GGS_syntaxRuleLabelList : public AC_galgas_list {
  public : typedef elementOf_GGS_syntaxRuleLabelList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_syntaxRuleLabelList constructor_emptyList (void) ;
  public : static GGS_syntaxRuleLabelList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1,
                                const GGS_syntaxInstructionList & argument_2) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_syntaxRuleLabelList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_syntaxRuleLabelList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_syntaxRuleLabelList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_syntaxRuleLabelList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_formalParameterList & _out_1,
                              GGS_syntaxInstructionList & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_formalParameterList & _out_1,
                             GGS_syntaxInstructionList & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_formalParameterList & _out_1,
                                GGS_syntaxInstructionList & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_formalParameterList & _out_1,
                                 GGS_syntaxInstructionList & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_syntaxRuleLabelList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1,
                                const GGS_syntaxInstructionList & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_syntaxRuleLabelList _operator_concat (const GGS_syntaxRuleLabelList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1,
                                const GGS_syntaxInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1,
                                const GGS_syntaxInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1,
                                const GGS_syntaxInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mLabelNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_formalParameterList 
  reader_mFormalParametersAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_syntaxInstructionList 
  reader_mSyntaxInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMLabelNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMFormalParametersAtIndex (C_Compiler & inLexique,
                              const GGS_formalParameterList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMSyntaxInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_syntaxInstructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_syntaxRuleLabelList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_lstring   & _mLabelName (LOCATION_ARGS) const ;
  public : /* const */ GGS_formalParameterList   & _mFormalParameters (LOCATION_ARGS) const ;
  public : /* const */ GGS_syntaxInstructionList   & _mSyntaxInstructionList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          list '@syntaxRuleList'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_syntaxRuleList ;

class GGS_syntaxRuleList : public AC_galgas_list {
  public : typedef elementOf_GGS_syntaxRuleList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_syntaxRuleList constructor_emptyList (void) ;
  public : static GGS_syntaxRuleList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelList & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_syntaxRuleList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_syntaxRuleList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_syntaxRuleList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_syntaxRuleList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_syntaxRuleLabelList & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_syntaxRuleLabelList & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_syntaxRuleLabelList & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_syntaxRuleLabelList & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_syntaxRuleList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelList & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_syntaxRuleList _operator_concat (const GGS_syntaxRuleList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelList & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mNonterminalNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_syntaxRuleLabelList 
  reader_mLabelListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMNonterminalNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMLabelListAtIndex (C_Compiler & inLexique,
                              const GGS_syntaxRuleLabelList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_syntaxRuleList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_lstring   & _mNonterminalName (LOCATION_ARGS) const ;
  public : /* const */ GGS_syntaxRuleLabelList   & _mLabelList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_nonterminalCallInstruction'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_nonterminalCallInstruction : public GGS_syntaxInstruction {
//--- Default constructor
  public : inline GGS_nonterminalCallInstruction (void) :
  GGS_syntaxInstruction () {}

//--- Pointer assignment constructor
  public : GGS_nonterminalCallInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_nonterminalCallInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_nonterminalCallInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_nonterminalCallInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_actualParameterList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_nonterminalCallInstruction * getPtr (void) const {
    return (cPtr_nonterminalCallInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mNonterminalName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mLabelName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_actualParameterList  reader_mActualParameterList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_nonterminalCallInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_nonterminalCallInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_nonterminalCallInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__nonterminalCallInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_terminalCheckInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_terminalCheckInstruction : public GGS_syntaxInstruction {
//--- Default constructor
  public : inline GGS_terminalCheckInstruction (void) :
  GGS_syntaxInstruction () {}

//--- Pointer assignment constructor
  public : GGS_terminalCheckInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_terminalCheckInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_terminalCheckInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_terminalCheckInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_actualInputParameterList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_terminalCheckInstruction * getPtr (void) const {
    return (cPtr_terminalCheckInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTerminalName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_actualInputParameterList  reader_mActualInputParameterList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_terminalCheckInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_terminalCheckInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_terminalCheckInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__terminalCheckInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@listOfSyntaxInstructionList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_listOfSyntaxInstructionList ;

class GGS_listOfSyntaxInstructionList : public AC_galgas_list {
  public : typedef elementOf_GGS_listOfSyntaxInstructionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_listOfSyntaxInstructionList constructor_emptyList (void) ;
  public : static GGS_listOfSyntaxInstructionList constructor_listWithValue (const GGS_syntaxInstructionList & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_listOfSyntaxInstructionList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_listOfSyntaxInstructionList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_listOfSyntaxInstructionList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_listOfSyntaxInstructionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_syntaxInstructionList & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_syntaxInstructionList & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_syntaxInstructionList & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_syntaxInstructionList & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_listOfSyntaxInstructionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_syntaxInstructionList & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_listOfSyntaxInstructionList _operator_concat (const GGS_listOfSyntaxInstructionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_syntaxInstructionList & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_syntaxInstructionList & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_syntaxInstructionList & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_syntaxInstructionList 
  reader_mSyntaxInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMSyntaxInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_syntaxInstructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_listOfSyntaxInstructionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_syntaxInstructionList   & _mSyntaxInstructionList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_repeatInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_repeatInstruction : public GGS_syntaxInstruction {
//--- Default constructor
  public : inline GGS_repeatInstruction (void) :
  GGS_syntaxInstruction () {}

//--- Pointer assignment constructor
  public : GGS_repeatInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_repeatInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_repeatInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_repeatInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_syntaxInstructionList & argument_0,
                                const GGS_listOfSyntaxInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_repeatInstruction * getPtr (void) const {
    return (cPtr_repeatInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_syntaxInstructionList  reader_mRepeatedInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_listOfSyntaxInstructionList  reader_mRepeatBranchList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_repeatInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_repeatInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_repeatInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__repeatInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_selectInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_selectInstruction : public GGS_syntaxInstruction {
//--- Default constructor
  public : inline GGS_selectInstruction (void) :
  GGS_syntaxInstruction () {}

//--- Pointer assignment constructor
  public : GGS_selectInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_selectInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_selectInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_selectInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_listOfSyntaxInstructionList & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_selectInstruction * getPtr (void) const {
    return (cPtr_selectInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_listOfSyntaxInstructionList  reader_mSelectBranchList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_selectInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_selectInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_selectInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__selectInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_parseDoInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_parseDoInstruction : public GGS_syntaxInstruction {
//--- Default constructor
  public : inline GGS_parseDoInstruction (void) :
  GGS_syntaxInstruction () {}

//--- Pointer assignment constructor
  public : GGS_parseDoInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_parseDoInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_parseDoInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_parseDoInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_listOfSyntaxInstructionList & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_parseDoInstruction * getPtr (void) const {
    return (cPtr_parseDoInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_listOfSyntaxInstructionList  reader_mParseDoBranchList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_parseDoInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_parseDoInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_parseDoInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__parseDoInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_blockInstruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_blockInstruction : public GGS_syntaxInstruction {
//--- Default constructor
  public : inline GGS_blockInstruction (void) :
  GGS_syntaxInstruction () {}

//--- Pointer assignment constructor
  public : GGS_blockInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_blockInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_blockInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_blockInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_actualParameterList & argument_2,
                                const GGS_syntaxInstructionList & argument_3,
                                const GGS_actualParameterList & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_blockInstruction * getPtr (void) const {
    return (cPtr_blockInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mReceiverVariable (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mBlockMethodName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_actualParameterList  reader_mPrologActualParameterList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_syntaxInstructionList  reader_mInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_actualParameterList  reader_mEpilogActualParameterList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_blockInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_blockInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_blockInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__blockInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_syntaxComponentRoot'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_syntaxComponentRoot : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_syntaxComponentRoot (void) :
  AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_syntaxComponentRoot (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_syntaxComponentRoot (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_syntaxComponentRoot
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_syntaxComponentRoot constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_nonterminalDeclarationList & argument_1,
                                const GGS_syntaxRuleList & argument_2,
                                const GGS_semanticDeclarationStruct& argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_syntaxComponentRoot * getPtr (void) const {
    return (cPtr_syntaxComponentRoot *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mSyntaxComponentName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_nonterminalDeclarationList  reader_mNonterminalDeclarationList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_syntaxRuleList  reader_mRuleList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticDeclarationStruct reader_mSemanticDeclarations (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_syntaxComponentRoot * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_syntaxComponentRoot * operator () (LOCATION_ARGS) const {
      return (cPtr_syntaxComponentRoot *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * _galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__syntaxComponentRoot ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@syntaxInstructionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_syntaxInstructionList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_syntaxInstruction  mInstruction ;
//--- Constructor
  public : elementOf_GGS_syntaxInstructionList (const GGS_syntaxInstruction & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_syntaxInstructionList * nextObject (void) const { return (elementOf_GGS_syntaxInstructionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_syntaxInstructionList * previousObject (void) const { return (elementOf_GGS_syntaxInstructionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_syntaxInstructionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@nonTerminalLabelList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_nonTerminalLabelList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mLabelName ;
  public : GGS_formalParameterList  mFormalParameters ;
//--- Constructor
  public : elementOf_GGS_nonTerminalLabelList (const GGS_lstring & ,
                                const GGS_formalParameterList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_nonTerminalLabelList * nextObject (void) const { return (elementOf_GGS_nonTerminalLabelList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_nonTerminalLabelList * previousObject (void) const { return (elementOf_GGS_nonTerminalLabelList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_nonTerminalLabelList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@nonterminalDeclarationList'                *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_nonterminalDeclarationList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mNonterminalName ;
  public : GGS_nonTerminalLabelList  mLabels ;
  public : GGS_bool mHasParseLabel ;
//--- Constructor
  public : elementOf_GGS_nonterminalDeclarationList (const GGS_lstring & ,
                                const GGS_nonTerminalLabelList & ,
                                const GGS_bool& 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_nonterminalDeclarationList * nextObject (void) const { return (elementOf_GGS_nonterminalDeclarationList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_nonterminalDeclarationList * previousObject (void) const { return (elementOf_GGS_nonterminalDeclarationList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_nonterminalDeclarationList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@syntaxRuleLabelList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_syntaxRuleLabelList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mLabelName ;
  public : GGS_formalParameterList  mFormalParameters ;
  public : GGS_syntaxInstructionList  mSyntaxInstructionList ;
//--- Constructor
  public : elementOf_GGS_syntaxRuleLabelList (const GGS_lstring & ,
                                const GGS_formalParameterList & ,
                                const GGS_syntaxInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_syntaxRuleLabelList * nextObject (void) const { return (elementOf_GGS_syntaxRuleLabelList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_syntaxRuleLabelList * previousObject (void) const { return (elementOf_GGS_syntaxRuleLabelList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_syntaxRuleLabelList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@syntaxRuleList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_syntaxRuleList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mNonterminalName ;
  public : GGS_syntaxRuleLabelList  mLabelList ;
//--- Constructor
  public : elementOf_GGS_syntaxRuleList (const GGS_lstring & ,
                                const GGS_syntaxRuleLabelList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_syntaxRuleList * nextObject (void) const { return (elementOf_GGS_syntaxRuleList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_syntaxRuleList * previousObject (void) const { return (elementOf_GGS_syntaxRuleList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_syntaxRuleList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             abstract class 'cPtr_nonterminalCallInstruction'              *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_nonterminalCallInstruction : public cPtr_syntaxInstruction {
  private : typedef cPtr_syntaxInstruction inherited ;
//--- Constructor
  public : cPtr_nonterminalCallInstruction (const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_actualParameterList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_nonterminalCallInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mNonterminalName ;
  public : GGS_lstring  mLabelName ;
  public : GGS_actualParameterList  mActualParameterList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_terminalCheckInstruction'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_terminalCheckInstruction : public cPtr_syntaxInstruction {
  private : typedef cPtr_syntaxInstruction inherited ;
//--- Constructor
  public : cPtr_terminalCheckInstruction (const GGS_lstring & ,
                                const GGS_actualInputParameterList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_terminalCheckInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mTerminalName ;
  public : GGS_actualInputParameterList  mActualInputParameterList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@listOfSyntaxInstructionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_listOfSyntaxInstructionList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_syntaxInstructionList  mSyntaxInstructionList ;
//--- Constructor
  public : elementOf_GGS_listOfSyntaxInstructionList (const GGS_syntaxInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_listOfSyntaxInstructionList * nextObject (void) const { return (elementOf_GGS_listOfSyntaxInstructionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_listOfSyntaxInstructionList * previousObject (void) const { return (elementOf_GGS_listOfSyntaxInstructionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_listOfSyntaxInstructionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_repeatInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_repeatInstruction : public cPtr_syntaxInstruction {
  private : typedef cPtr_syntaxInstruction inherited ;
//--- Constructor
  public : cPtr_repeatInstruction (const GGS_syntaxInstructionList & ,
                                const GGS_listOfSyntaxInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_repeatInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_syntaxInstructionList  mRepeatedInstructionList ;
  public : GGS_listOfSyntaxInstructionList  mRepeatBranchList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_selectInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_selectInstruction : public cPtr_syntaxInstruction {
  private : typedef cPtr_syntaxInstruction inherited ;
//--- Constructor
  public : cPtr_selectInstruction (const GGS_listOfSyntaxInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_selectInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_listOfSyntaxInstructionList  mSelectBranchList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_parseDoInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_parseDoInstruction : public cPtr_syntaxInstruction {
  private : typedef cPtr_syntaxInstruction inherited ;
//--- Constructor
  public : cPtr_parseDoInstruction (const GGS_listOfSyntaxInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_parseDoInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_listOfSyntaxInstructionList  mParseDoBranchList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_blockInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_blockInstruction : public cPtr_syntaxInstruction {
  private : typedef cPtr_syntaxInstruction inherited ;
//--- Constructor
  public : cPtr_blockInstruction (const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_actualParameterList & ,
                                const GGS_syntaxInstructionList & ,
                                const GGS_actualParameterList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_blockInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mReceiverVariable ;
  public : GGS_lstring  mBlockMethodName ;
  public : GGS_actualParameterList  mPrologActualParameterList ;
  public : GGS_syntaxInstructionList  mInstructionList ;
  public : GGS_actualParameterList  mEpilogActualParameterList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_syntaxComponentRoot'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_syntaxComponentRoot : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_syntaxComponentRoot (const GGS_lstring & ,
                                const GGS_nonterminalDeclarationList & ,
                                const GGS_syntaxRuleList & ,
                                const GGS_semanticDeclarationStruct& 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_syntaxComponentRoot (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mSyntaxComponentName ;
  public : GGS_nonterminalDeclarationList  mNonterminalDeclarationList ;
  public : GGS_syntaxRuleList  mRuleList ;
  public : GGS_semanticDeclarationStruct mSemanticDeclarations ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*

#endif
