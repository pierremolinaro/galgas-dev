//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'syntaxMetamodel.h'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 17th, 2010, at 22h12'58"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef syntaxMetamodel_DEFINED
#define syntaxMetamodel_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/GGS__header.h"

//---------------------------------------------------------------------------*

// Include imported semantics
#include "semanticsTypesForAST.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_syntaxInstructionList ;
class GGS_nonTerminalLabelList ;
class GGS_nonterminalDeclarationList ;
class GGS_syntaxRuleLabelList ;
class GGS_syntaxRuleList ;
class GGS_nonterminalCallInstruction ;
class cPtr_nonterminalCallInstruction ;
class GGS_terminalCheckInstruction ;
class cPtr_terminalCheckInstruction ;
class GGS_listOfSyntaxInstructionList ;
class GGS_repeatInstruction ;
class cPtr_repeatInstruction ;
class GGS_selectInstruction ;
class cPtr_selectInstruction ;
class GGS_parseDoInstruction ;
class cPtr_parseDoInstruction ;
class GGS_parseLoopInstruction ;
class cPtr_parseLoopInstruction ;
class GGS_whenBranchList ;
class GGS_parseWhenInstruction ;
class cPtr_parseWhenInstruction ;
class GGS_blockInstruction ;
class cPtr_blockInstruction ;
class GGS_syntaxComponentRoot ;
class cPtr_syntaxComponentRoot ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@syntaxInstructionList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_syntaxInstructionList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_syntaxInstructionList ;

//---------------------------------------------------------------------------*

class GGS_syntaxInstructionList : public AC_GGS_list {
  public : typedef elementOf_GGS_syntaxInstructionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_syntaxInstructionList constructor_emptyList (void) ;
  public : static GGS_syntaxInstructionList constructor_listWithValue (const GGS_syntaxInstructionAST & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_syntaxInstructionList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_syntaxInstructionList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_syntaxInstructionList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_syntaxInstructionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_syntaxInstructionAST & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_syntaxInstructionAST & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_syntaxInstructionAST & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_syntaxInstructionAST & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_syntaxInstructionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_syntaxInstructionAST & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_syntaxInstructionList operator_concat (const GGS_syntaxInstructionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_syntaxInstructionAST & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_syntaxInstructionAST & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_syntaxInstructionAST & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_syntaxInstructionAST 
  reader_mInstructionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMInstructionAtIndex (C_Compiler & inLexique,
                              const GGS_syntaxInstructionAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_syntaxInstructionList castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_syntaxInstructionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_syntaxInstructionAST   & _mInstruction (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@nonTerminalLabelList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_nonTerminalLabelList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_nonTerminalLabelList ;

//---------------------------------------------------------------------------*

class GGS_nonTerminalLabelList : public AC_GGS_list {
  public : typedef elementOf_GGS_nonTerminalLabelList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_nonTerminalLabelList constructor_emptyList (void) ;
  public : static GGS_nonTerminalLabelList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_nonTerminalLabelList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_nonTerminalLabelList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_nonTerminalLabelList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_nonTerminalLabelList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_formalParameterListAST & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_formalParameterListAST & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_formalParameterListAST & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_formalParameterListAST & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_nonTerminalLabelList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_nonTerminalLabelList operator_concat (const GGS_nonTerminalLabelList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mLabelNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_formalParameterListAST 
  reader_mFormalArgumentListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMLabelNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMFormalArgumentListAtIndex (C_Compiler & inLexique,
                              const GGS_formalParameterListAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_nonTerminalLabelList castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_nonTerminalLabelList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mLabelName (LOCATION_ARGS) const ;
    public : /* const */ GGS_formalParameterListAST   & _mFormalArgumentList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@nonterminalDeclarationList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_nonterminalDeclarationList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_nonterminalDeclarationList ;

//---------------------------------------------------------------------------*

class GGS_nonterminalDeclarationList : public AC_GGS_list {
  public : typedef elementOf_GGS_nonterminalDeclarationList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_nonterminalDeclarationList constructor_emptyList (void) ;
  public : static GGS_nonterminalDeclarationList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelList & argument_1,
                                const GGS_bool& argument_2) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_nonterminalDeclarationList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_nonterminalDeclarationList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_nonterminalDeclarationList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_nonterminalDeclarationList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_nonTerminalLabelList & _out_1,
                              GGS_bool& _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_nonTerminalLabelList & _out_1,
                             GGS_bool& _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_nonTerminalLabelList & _out_1,
                                GGS_bool& _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_nonTerminalLabelList & _out_1,
                                 GGS_bool& _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_nonterminalDeclarationList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelList & argument_1,
                                const GGS_bool& argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_nonterminalDeclarationList operator_concat (const GGS_nonterminalDeclarationList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelList & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelList & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelList & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mNonterminalNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_nonTerminalLabelList 
  reader_mLabelsAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_bool
  reader_mHasParseLabelAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMNonterminalNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMLabelsAtIndex (C_Compiler & inLexique,
                              const GGS_nonTerminalLabelList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMHasParseLabelAtIndex (C_Compiler & inLexique,
                              const GGS_bool & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_nonterminalDeclarationList castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_nonterminalDeclarationList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mNonterminalName (LOCATION_ARGS) const ;
    public : /* const */ GGS_nonTerminalLabelList   & _mLabels (LOCATION_ARGS) const ;
    public : /* const */ GGS_bool  & _mHasParseLabel (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@syntaxRuleLabelList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_syntaxRuleLabelList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_syntaxRuleLabelList ;

//---------------------------------------------------------------------------*

class GGS_syntaxRuleLabelList : public AC_GGS_list {
  public : typedef elementOf_GGS_syntaxRuleLabelList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_syntaxRuleLabelList constructor_emptyList (void) ;
  public : static GGS_syntaxRuleLabelList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1,
                                const GGS_syntaxInstructionList & argument_2) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_syntaxRuleLabelList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_syntaxRuleLabelList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_syntaxRuleLabelList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_syntaxRuleLabelList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_formalParameterListAST & _out_1,
                              GGS_syntaxInstructionList & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_formalParameterListAST & _out_1,
                             GGS_syntaxInstructionList & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_formalParameterListAST & _out_1,
                                GGS_syntaxInstructionList & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_formalParameterListAST & _out_1,
                                 GGS_syntaxInstructionList & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_syntaxRuleLabelList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1,
                                const GGS_syntaxInstructionList & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_syntaxRuleLabelList operator_concat (const GGS_syntaxRuleLabelList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1,
                                const GGS_syntaxInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1,
                                const GGS_syntaxInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1,
                                const GGS_syntaxInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mLabelNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_formalParameterListAST 
  reader_mFormalParametersAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_syntaxInstructionList 
  reader_mSyntaxInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMLabelNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMFormalParametersAtIndex (C_Compiler & inLexique,
                              const GGS_formalParameterListAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMSyntaxInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_syntaxInstructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_syntaxRuleLabelList castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_syntaxRuleLabelList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mLabelName (LOCATION_ARGS) const ;
    public : /* const */ GGS_formalParameterListAST   & _mFormalParameters (LOCATION_ARGS) const ;
    public : /* const */ GGS_syntaxInstructionList   & _mSyntaxInstructionList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          list '@syntaxRuleList'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_syntaxRuleList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_syntaxRuleList ;

//---------------------------------------------------------------------------*

class GGS_syntaxRuleList : public AC_GGS_list {
  public : typedef elementOf_GGS_syntaxRuleList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_syntaxRuleList constructor_emptyList (void) ;
  public : static GGS_syntaxRuleList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelList & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_syntaxRuleList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_syntaxRuleList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_syntaxRuleList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_syntaxRuleList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_syntaxRuleLabelList & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_syntaxRuleLabelList & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_syntaxRuleLabelList & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_syntaxRuleLabelList & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_syntaxRuleList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelList & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_syntaxRuleList operator_concat (const GGS_syntaxRuleList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelList & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mNonterminalNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_syntaxRuleLabelList 
  reader_mLabelListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMNonterminalNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMLabelListAtIndex (C_Compiler & inLexique,
                              const GGS_syntaxRuleLabelList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_syntaxRuleList castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_syntaxRuleList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mNonterminalName (LOCATION_ARGS) const ;
    public : /* const */ GGS_syntaxRuleLabelList   & _mLabelList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_nonterminalCallInstruction'                *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_nonterminalCallInstruction ;

//---------------------------------------------------------------------------*

class GGS_nonterminalCallInstruction : public GGS_syntaxInstructionAST {
//--- Default constructor
  public : inline GGS_nonterminalCallInstruction (void) :
  GGS_syntaxInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_nonterminalCallInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_nonterminalCallInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_nonterminalCallInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_nonterminalCallInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_actualParameterListAST & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_nonterminalCallInstruction * getPtr (void) const {
    return (cPtr_nonterminalCallInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mNonterminalName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mLabelName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_actualParameterListAST  reader_mActualParameterList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_nonterminalCallInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_nonterminalCallInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_nonterminalCallInstruction *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_nonterminalCallInstruction castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__nonterminalCallInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_terminalCheckInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_terminalCheckInstruction ;

//---------------------------------------------------------------------------*

class GGS_terminalCheckInstruction : public GGS_syntaxInstructionAST {
//--- Default constructor
  public : inline GGS_terminalCheckInstruction (void) :
  GGS_syntaxInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_terminalCheckInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_terminalCheckInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_terminalCheckInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_terminalCheckInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_actualInputParameterListAST & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_terminalCheckInstruction * getPtr (void) const {
    return (cPtr_terminalCheckInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTerminalName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_actualInputParameterListAST  reader_mActualInputParameterList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_terminalCheckInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_terminalCheckInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_terminalCheckInstruction *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_terminalCheckInstruction castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__terminalCheckInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@listOfSyntaxInstructionList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_listOfSyntaxInstructionList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_listOfSyntaxInstructionList ;

//---------------------------------------------------------------------------*

class GGS_listOfSyntaxInstructionList : public AC_GGS_list {
  public : typedef elementOf_GGS_listOfSyntaxInstructionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_listOfSyntaxInstructionList constructor_emptyList (void) ;
  public : static GGS_listOfSyntaxInstructionList constructor_listWithValue (const GGS_syntaxInstructionList & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_listOfSyntaxInstructionList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_listOfSyntaxInstructionList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_listOfSyntaxInstructionList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_listOfSyntaxInstructionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_syntaxInstructionList & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_syntaxInstructionList & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_syntaxInstructionList & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_syntaxInstructionList & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_listOfSyntaxInstructionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_syntaxInstructionList & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_listOfSyntaxInstructionList operator_concat (const GGS_listOfSyntaxInstructionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_syntaxInstructionList & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_syntaxInstructionList & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_syntaxInstructionList & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_syntaxInstructionList 
  reader_mSyntaxInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMSyntaxInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_syntaxInstructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_listOfSyntaxInstructionList castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_listOfSyntaxInstructionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_syntaxInstructionList   & _mSyntaxInstructionList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_repeatInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_repeatInstruction ;

//---------------------------------------------------------------------------*

class GGS_repeatInstruction : public GGS_syntaxInstructionAST {
//--- Default constructor
  public : inline GGS_repeatInstruction (void) :
  GGS_syntaxInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_repeatInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_repeatInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_repeatInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_repeatInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_syntaxInstructionList & argument_1,
                                const GGS_listOfSyntaxInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_repeatInstruction * getPtr (void) const {
    return (cPtr_repeatInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_syntaxInstructionList  reader_mRepeatedInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_listOfSyntaxInstructionList  reader_mRepeatBranchList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_repeatInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_repeatInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_repeatInstruction *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_repeatInstruction castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__repeatInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_selectInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_selectInstruction ;

//---------------------------------------------------------------------------*

class GGS_selectInstruction : public GGS_syntaxInstructionAST {
//--- Default constructor
  public : inline GGS_selectInstruction (void) :
  GGS_syntaxInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_selectInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_selectInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_selectInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_selectInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_listOfSyntaxInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_selectInstruction * getPtr (void) const {
    return (cPtr_selectInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_listOfSyntaxInstructionList  reader_mSelectBranchList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_selectInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_selectInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_selectInstruction *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_selectInstruction castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__selectInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_parseDoInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_parseDoInstruction ;

//---------------------------------------------------------------------------*

class GGS_parseDoInstruction : public GGS_syntaxInstructionAST {
//--- Default constructor
  public : inline GGS_parseDoInstruction (void) :
  GGS_syntaxInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_parseDoInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_parseDoInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_parseDoInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_parseDoInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_listOfSyntaxInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_parseDoInstruction * getPtr (void) const {
    return (cPtr_parseDoInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_listOfSyntaxInstructionList  reader_mParseDoBranchList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_parseDoInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_parseDoInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_parseDoInstruction *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_parseDoInstruction castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__parseDoInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_parseLoopInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_parseLoopInstruction ;

//---------------------------------------------------------------------------*

class GGS_parseLoopInstruction : public GGS_syntaxInstructionAST {
//--- Default constructor
  public : inline GGS_parseLoopInstruction (void) :
  GGS_syntaxInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_parseLoopInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_parseLoopInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_parseLoopInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_parseLoopInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpressionAST & argument_1,
                                const GGS_semanticExpressionAST & argument_2,
                                const GGS_syntaxInstructionList & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_parseLoopInstruction * getPtr (void) const {
    return (cPtr_parseLoopInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticExpressionAST  reader_mVariantExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpressionAST  reader_mWhileExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_syntaxInstructionList  reader_mDoInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_parseLoopInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_parseLoopInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_parseLoopInstruction *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_parseLoopInstruction castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__parseLoopInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          list '@whenBranchList'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_whenBranchList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_whenBranchList ;

//---------------------------------------------------------------------------*

class GGS_whenBranchList : public AC_GGS_list {
  public : typedef elementOf_GGS_whenBranchList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_whenBranchList constructor_emptyList (void) ;
  public : static GGS_whenBranchList constructor_listWithValue (const GGS_semanticExpressionAST & argument_0,
                                const GGS_syntaxInstructionList & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_whenBranchList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_whenBranchList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_whenBranchList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_whenBranchList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_semanticExpressionAST & _out_0,
                              GGS_syntaxInstructionList & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_semanticExpressionAST & _out_0,
                             GGS_syntaxInstructionList & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_semanticExpressionAST & _out_0,
                                GGS_syntaxInstructionList & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_semanticExpressionAST & _out_0,
                                 GGS_syntaxInstructionList & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_whenBranchList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_semanticExpressionAST & argument_0,
                                const GGS_syntaxInstructionList & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_whenBranchList operator_concat (const GGS_whenBranchList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_semanticExpressionAST & argument_0,
                                const GGS_syntaxInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_semanticExpressionAST & argument_0,
                                const GGS_syntaxInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_semanticExpressionAST & argument_0,
                                const GGS_syntaxInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_semanticExpressionAST 
  reader_mWhenExpressionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_syntaxInstructionList 
  reader_mParseDoBranchListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMWhenExpressionAtIndex (C_Compiler & inLexique,
                              const GGS_semanticExpressionAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMParseDoBranchListAtIndex (C_Compiler & inLexique,
                              const GGS_syntaxInstructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_whenBranchList castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_whenBranchList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_semanticExpressionAST   & _mWhenExpression (LOCATION_ARGS) const ;
    public : /* const */ GGS_syntaxInstructionList   & _mParseDoBranchList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_parseWhenInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_parseWhenInstruction ;

//---------------------------------------------------------------------------*

class GGS_parseWhenInstruction : public GGS_syntaxInstructionAST {
//--- Default constructor
  public : inline GGS_parseWhenInstruction (void) :
  GGS_syntaxInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_parseWhenInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_parseWhenInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_parseWhenInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_parseWhenInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_whenBranchList & argument_1,
                                const GGS_syntaxInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_parseWhenInstruction * getPtr (void) const {
    return (cPtr_parseWhenInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_whenBranchList  reader_mWhenBranchList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_syntaxInstructionList  reader_mElseInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_parseWhenInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_parseWhenInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_parseWhenInstruction *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_parseWhenInstruction castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__parseWhenInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_blockInstruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_blockInstruction ;

//---------------------------------------------------------------------------*

class GGS_blockInstruction : public GGS_syntaxInstructionAST {
//--- Default constructor
  public : inline GGS_blockInstruction (void) :
  GGS_syntaxInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_blockInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_blockInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_blockInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_blockInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_actualParameterListAST & argument_3,
                                const GGS_syntaxInstructionList & argument_4,
                                const GGS_actualParameterListAST & argument_5
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_blockInstruction * getPtr (void) const {
    return (cPtr_blockInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mReceiverVariable (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mBlockMethodName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_actualParameterListAST  reader_mPrologActualParameterList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_syntaxInstructionList  reader_mInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_actualParameterListAST  reader_mEpilogActualParameterList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_blockInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_blockInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_blockInstruction *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_blockInstruction castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__blockInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_syntaxComponentRoot'                   *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_syntaxComponentRoot ;

//---------------------------------------------------------------------------*

class GGS_syntaxComponentRoot : public AC_GGS_class {
//--- Default constructor
  public : inline GGS_syntaxComponentRoot (void) :
  AC_GGS_class () {}

//--- Pointer assignment constructor
  public : GGS_syntaxComponentRoot (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_syntaxComponentRoot (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_syntaxComponentRoot
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_syntaxComponentRoot constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_nonterminalDeclarationList & argument_2,
                                const GGS_syntaxRuleList & argument_3,
                                const GGS_semanticDeclarationStructAST& argument_4
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_syntaxComponentRoot * getPtr (void) const {
    return (cPtr_syntaxComponentRoot *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mSyntaxComponentName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mImportedLexiqueReference (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_nonterminalDeclarationList  reader_mNonterminalDeclarationList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_syntaxRuleList  reader_mRuleList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticDeclarationStructAST reader_mSemanticDeclarations (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_syntaxComponentRoot * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_syntaxComponentRoot * operator () (LOCATION_ARGS) const {
      return (cPtr_syntaxComponentRoot *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformationEX * galgasObjectRunTimeInfo (void) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_syntaxComponentRoot castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformationEX gClassInfoFor__syntaxComponentRoot ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@syntaxInstructionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_syntaxInstructionList : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_syntaxInstructionAST  mInstruction ;
//--- Constructor
  public : elementOf_GGS_syntaxInstructionList (const GGS_syntaxInstructionAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_syntaxInstructionList * nextObject (void) const { return (elementOf_GGS_syntaxInstructionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_syntaxInstructionList * previousObject (void) const { return (elementOf_GGS_syntaxInstructionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_syntaxInstructionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@nonTerminalLabelList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_nonTerminalLabelList : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lstring  mLabelName ;
  public : GGS_formalParameterListAST  mFormalArgumentList ;
//--- Constructor
  public : elementOf_GGS_nonTerminalLabelList (const GGS_lstring & ,
                                const GGS_formalParameterListAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_nonTerminalLabelList * nextObject (void) const { return (elementOf_GGS_nonTerminalLabelList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_nonTerminalLabelList * previousObject (void) const { return (elementOf_GGS_nonTerminalLabelList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_nonTerminalLabelList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@nonterminalDeclarationList'                *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_nonterminalDeclarationList : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lstring  mNonterminalName ;
  public : GGS_nonTerminalLabelList  mLabels ;
  public : GGS_bool mHasParseLabel ;
//--- Constructor
  public : elementOf_GGS_nonterminalDeclarationList (const GGS_lstring & ,
                                const GGS_nonTerminalLabelList & ,
                                const GGS_bool& 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_nonterminalDeclarationList * nextObject (void) const { return (elementOf_GGS_nonterminalDeclarationList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_nonterminalDeclarationList * previousObject (void) const { return (elementOf_GGS_nonterminalDeclarationList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_nonterminalDeclarationList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@syntaxRuleLabelList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_syntaxRuleLabelList : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lstring  mLabelName ;
  public : GGS_formalParameterListAST  mFormalParameters ;
  public : GGS_syntaxInstructionList  mSyntaxInstructionList ;
//--- Constructor
  public : elementOf_GGS_syntaxRuleLabelList (const GGS_lstring & ,
                                const GGS_formalParameterListAST & ,
                                const GGS_syntaxInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_syntaxRuleLabelList * nextObject (void) const { return (elementOf_GGS_syntaxRuleLabelList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_syntaxRuleLabelList * previousObject (void) const { return (elementOf_GGS_syntaxRuleLabelList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_syntaxRuleLabelList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@syntaxRuleList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_syntaxRuleList : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lstring  mNonterminalName ;
  public : GGS_syntaxRuleLabelList  mLabelList ;
//--- Constructor
  public : elementOf_GGS_syntaxRuleList (const GGS_lstring & ,
                                const GGS_syntaxRuleLabelList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_syntaxRuleList * nextObject (void) const { return (elementOf_GGS_syntaxRuleList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_syntaxRuleList * previousObject (void) const { return (elementOf_GGS_syntaxRuleList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_syntaxRuleList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             abstract class 'cPtr_nonterminalCallInstruction'              *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_nonterminalCallInstruction : public cPtr_syntaxInstructionAST {
  private : typedef cPtr_syntaxInstructionAST inherited ;
//--- Constructor
  public : cPtr_nonterminalCallInstruction (const GGS_location & ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_actualParameterListAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mNonterminalName ;
  public : GGS_lstring  mLabelName ;
  public : GGS_actualParameterListAST  mActualParameterList ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_terminalCheckInstruction'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_terminalCheckInstruction : public cPtr_syntaxInstructionAST {
  private : typedef cPtr_syntaxInstructionAST inherited ;
//--- Constructor
  public : cPtr_terminalCheckInstruction (const GGS_location & ,
                                const GGS_lstring & ,
                                const GGS_actualInputParameterListAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mTerminalName ;
  public : GGS_actualInputParameterListAST  mActualInputParameterList ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@listOfSyntaxInstructionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_listOfSyntaxInstructionList : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_syntaxInstructionList  mSyntaxInstructionList ;
//--- Constructor
  public : elementOf_GGS_listOfSyntaxInstructionList (const GGS_syntaxInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_listOfSyntaxInstructionList * nextObject (void) const { return (elementOf_GGS_listOfSyntaxInstructionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_listOfSyntaxInstructionList * previousObject (void) const { return (elementOf_GGS_listOfSyntaxInstructionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_listOfSyntaxInstructionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_repeatInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_repeatInstruction : public cPtr_syntaxInstructionAST {
  private : typedef cPtr_syntaxInstructionAST inherited ;
//--- Constructor
  public : cPtr_repeatInstruction (const GGS_location & ,
                                const GGS_syntaxInstructionList & ,
                                const GGS_listOfSyntaxInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_syntaxInstructionList  mRepeatedInstructionList ;
  public : GGS_listOfSyntaxInstructionList  mRepeatBranchList ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_selectInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_selectInstruction : public cPtr_syntaxInstructionAST {
  private : typedef cPtr_syntaxInstructionAST inherited ;
//--- Constructor
  public : cPtr_selectInstruction (const GGS_location & ,
                                const GGS_listOfSyntaxInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_listOfSyntaxInstructionList  mSelectBranchList ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_parseDoInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_parseDoInstruction : public cPtr_syntaxInstructionAST {
  private : typedef cPtr_syntaxInstructionAST inherited ;
//--- Constructor
  public : cPtr_parseDoInstruction (const GGS_location & ,
                                const GGS_listOfSyntaxInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_listOfSyntaxInstructionList  mParseDoBranchList ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_parseLoopInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_parseLoopInstruction : public cPtr_syntaxInstructionAST {
  private : typedef cPtr_syntaxInstructionAST inherited ;
//--- Constructor
  public : cPtr_parseLoopInstruction (const GGS_location & ,
                                const GGS_semanticExpressionAST & ,
                                const GGS_semanticExpressionAST & ,
                                const GGS_syntaxInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_semanticExpressionAST  mVariantExpression ;
  public : GGS_semanticExpressionAST  mWhileExpression ;
  public : GGS_syntaxInstructionList  mDoInstructionList ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@whenBranchList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_whenBranchList : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_semanticExpressionAST  mWhenExpression ;
  public : GGS_syntaxInstructionList  mParseDoBranchList ;
//--- Constructor
  public : elementOf_GGS_whenBranchList (const GGS_semanticExpressionAST & ,
                                const GGS_syntaxInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_whenBranchList * nextObject (void) const { return (elementOf_GGS_whenBranchList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_whenBranchList * previousObject (void) const { return (elementOf_GGS_whenBranchList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_whenBranchList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_parseWhenInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_parseWhenInstruction : public cPtr_syntaxInstructionAST {
  private : typedef cPtr_syntaxInstructionAST inherited ;
//--- Constructor
  public : cPtr_parseWhenInstruction (const GGS_location & ,
                                const GGS_whenBranchList & ,
                                const GGS_syntaxInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_whenBranchList  mWhenBranchList ;
  public : GGS_syntaxInstructionList  mElseInstructionList ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_blockInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_blockInstruction : public cPtr_syntaxInstructionAST {
  private : typedef cPtr_syntaxInstructionAST inherited ;
//--- Constructor
  public : cPtr_blockInstruction (const GGS_location & ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_actualParameterListAST & ,
                                const GGS_syntaxInstructionList & ,
                                const GGS_actualParameterListAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mReceiverVariable ;
  public : GGS_lstring  mBlockMethodName ;
  public : GGS_actualParameterListAST  mPrologActualParameterList ;
  public : GGS_syntaxInstructionList  mInstructionList ;
  public : GGS_actualParameterListAST  mEpilogActualParameterList ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_syntaxComponentRoot'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_syntaxComponentRoot : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_syntaxComponentRoot (const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_nonterminalDeclarationList & ,
                                const GGS_syntaxRuleList & ,
                                const GGS_semanticDeclarationStructAST& 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mSyntaxComponentName ;
  public : GGS_lstring  mImportedLexiqueReference ;
  public : GGS_nonterminalDeclarationList  mNonterminalDeclarationList ;
  public : GGS_syntaxRuleList  mRuleList ;
  public : GGS_semanticDeclarationStructAST mSemanticDeclarations ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*

#endif
