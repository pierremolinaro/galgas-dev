//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'syntaxMetamodel.h'                          *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                       june 1st, 2007, at 21h20'5"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef syntaxMetamodel_METAMODEL_DEFINED
#define syntaxMetamodel_METAMODEL_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/predefined_types.h"
#include "commonSemantics.h"
#include "instructionMetamodel.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*

uint32 _metamodel_index_for_syntaxMetamodel (void) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_syntaxComponentRootList ;
class GGS_syntaxComponentRoot ;
class cPtr_syntaxComponentRoot ;
class GGS_syntaxInstructionsList ;
class GGS_syntaxInstructions ;
class cPtr_syntaxInstructions ;
class GGS_nonTerminalLabelList ;
class GGS_nonTerminalLabel ;
class cPtr_nonTerminalLabel ;
class GGS_nonterminalDeclarationList ;
class GGS_nonterminalDeclaration ;
class cPtr_nonterminalDeclaration ;
class GGS_syntaxRuleLabelList ;
class GGS_syntaxRuleLabel ;
class cPtr_syntaxRuleLabel ;
class GGS_syntaxRuleList ;
class GGS_syntaxRule ;
class cPtr_syntaxRule ;
class GGS_nonterminalCallInstructionList ;
class GGS_nonterminalCallInstruction ;
class cPtr_nonterminalCallInstruction ;
class GGS_terminalCheckInstructionList ;
class GGS_terminalCheckInstruction ;
class cPtr_terminalCheckInstruction ;
class GGS_repeatInstructionList ;
class GGS_repeatInstruction ;
class cPtr_repeatInstruction ;
class GGS_selectInstructionList ;
class GGS_selectInstruction ;
class cPtr_selectInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_syntaxComponentRoot'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_syntaxComponentRoot : public AC_galgas_entity {
//--- 'new' constructor
  public : static GGS_syntaxComponentRoot constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_nonterminalDeclarationList & argument_1,
                                const GGS_syntaxRuleList & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- getPtr
  public : inline cPtr_syntaxComponentRoot * getPtr (void) const {
    return (cPtr_syntaxComponentRoot *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mSyntaxComponentName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_nonterminalDeclarationList  reader_mNonterminalDeclarations (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_syntaxRuleList  reader_mRules (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_syntaxComponentRoot * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_syntaxComponentRoot * operator () (void) const {
      return (cPtr_syntaxComponentRoot *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     list '@syntaxComponentRootList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_syntaxComponentRootList : public AC_galgas_list {
  public : typedef cPtr_syntaxComponentRoot element_type ;
//--- Constructor 'emptyList'
  public : static GGS_syntaxComponentRootList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_syntaxComponentRootList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_nonterminalDeclarationList & argument_1,
                                const GGS_syntaxRuleList & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_syntaxComponentRootList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_syntaxComponentRoot & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_syntaxComponentRoot & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_syntaxComponentRoot & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_syntaxComponentRoot & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_syntaxComponentRoot & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS_syntaxComponentRootList _operator_concat (const GGS_syntaxComponentRootList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_nonterminalDeclarationList & argument_1,
                                const GGS_syntaxRuleList & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_nonterminalDeclarationList & argument_1,
                                const GGS_syntaxRuleList & argument_2) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_nonterminalDeclarationList & argument_1,
                                const GGS_syntaxRuleList & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_syntaxComponentRoot & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_syntaxInstructions'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_syntaxInstructions : public AC_galgas_entity {
//--- 'new' constructor
  public : static GGS_syntaxInstructions constructor_new (C_Compiler & inLexique,
                                const GGS_syntaxInstructionList & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- getPtr
  public : inline cPtr_syntaxInstructions * getPtr (void) const {
    return (cPtr_syntaxInstructions *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_syntaxInstructionList  reader_mInstruction (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_syntaxInstructions * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_syntaxInstructions * operator () (void) const {
      return (cPtr_syntaxInstructions *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@syntaxInstructionsList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_syntaxInstructionsList : public AC_galgas_list {
  public : typedef cPtr_syntaxInstructions element_type ;
//--- Constructor 'emptyList'
  public : static GGS_syntaxInstructionsList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_syntaxInstructionsList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_syntaxInstructionList & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_syntaxInstructionsList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_syntaxInstructions & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_syntaxInstructions & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_syntaxInstructions & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_syntaxInstructions & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_syntaxInstructions & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS_syntaxInstructionsList _operator_concat (const GGS_syntaxInstructionsList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_syntaxInstructionList & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_syntaxInstructionList & argument_0) ;

  protected : void _internalPrependValues (const GGS_syntaxInstructionList & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_syntaxInstructions & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_nonTerminalLabel'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_nonTerminalLabel : public AC_galgas_entity {
//--- 'new' constructor
  public : static GGS_nonTerminalLabel constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameters & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- getPtr
  public : inline cPtr_nonTerminalLabel * getPtr (void) const {
    return (cPtr_nonTerminalLabel *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mLabelName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_formalParameters  reader_mFormalParameters (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mReturnedEntityName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_nonTerminalLabel * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_nonTerminalLabel * operator () (void) const {
      return (cPtr_nonTerminalLabel *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@nonTerminalLabelList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_nonTerminalLabelList : public AC_galgas_list {
  public : typedef cPtr_nonTerminalLabel element_type ;
//--- Constructor 'emptyList'
  public : static GGS_nonTerminalLabelList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_nonTerminalLabelList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameters & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_nonTerminalLabelList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_nonTerminalLabel & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_nonTerminalLabel & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_nonTerminalLabel & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_nonTerminalLabel & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_nonTerminalLabel & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS_nonTerminalLabelList _operator_concat (const GGS_nonTerminalLabelList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameters & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_formalParameters & argument_1,
                                const GGS_lstring & argument_2) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_formalParameters & argument_1,
                                const GGS_lstring & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_nonTerminalLabel & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_nonterminalDeclaration'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_nonterminalDeclaration : public AC_galgas_entity {
//--- 'new' constructor
  public : static GGS_nonterminalDeclaration constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelList & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;
//--- getPtr
  public : inline cPtr_nonterminalDeclaration * getPtr (void) const {
    return (cPtr_nonterminalDeclaration *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mNonterminalName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_nonTerminalLabelList  reader_mLabels (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mHasParseLabel (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_nonterminalDeclaration * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_nonterminalDeclaration * operator () (void) const {
      return (cPtr_nonterminalDeclaration *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@nonterminalDeclarationList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_nonterminalDeclarationList : public AC_galgas_list {
  public : typedef cPtr_nonterminalDeclaration element_type ;
//--- Constructor 'emptyList'
  public : static GGS_nonterminalDeclarationList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_nonterminalDeclarationList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelList & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_nonterminalDeclarationList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_nonterminalDeclaration & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_nonterminalDeclaration & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_nonterminalDeclaration & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_nonterminalDeclaration & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_nonterminalDeclaration & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS_nonterminalDeclarationList _operator_concat (const GGS_nonterminalDeclarationList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelList & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelList & argument_1,
                                const GGS_bool& argument_2) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelList & argument_1,
                                const GGS_bool& argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_nonterminalDeclaration & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_syntaxRuleLabel'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_syntaxRuleLabel : public AC_galgas_entity {
//--- 'new' constructor
  public : static GGS_syntaxRuleLabel constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameters & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_syntaxInstructions & argument_4
                                COMMA_LOCATION_ARGS) ;
//--- getPtr
  public : inline cPtr_syntaxRuleLabel * getPtr (void) const {
    return (cPtr_syntaxRuleLabel *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mLabelName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_formalParameters  reader_mFormalParameters (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mReturnedEntityName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mReturnedVariableName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_syntaxInstructions  reader_mSyntaxInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_syntaxRuleLabel * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_syntaxRuleLabel * operator () (void) const {
      return (cPtr_syntaxRuleLabel *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@syntaxRuleLabelList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_syntaxRuleLabelList : public AC_galgas_list {
  public : typedef cPtr_syntaxRuleLabel element_type ;
//--- Constructor 'emptyList'
  public : static GGS_syntaxRuleLabelList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_syntaxRuleLabelList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameters & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_syntaxInstructions & argument_4
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_syntaxRuleLabelList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_syntaxRuleLabel & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_syntaxRuleLabel & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_syntaxRuleLabel & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_syntaxRuleLabel & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_syntaxRuleLabel & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS_syntaxRuleLabelList _operator_concat (const GGS_syntaxRuleLabelList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameters & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_syntaxInstructions & argument_4
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_formalParameters & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_syntaxInstructions & argument_4) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_formalParameters & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_syntaxInstructions & argument_4) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_syntaxRuleLabel & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_syntaxRule'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_syntaxRule : public AC_galgas_entity {
//--- 'new' constructor
  public : static GGS_syntaxRule constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- getPtr
  public : inline cPtr_syntaxRule * getPtr (void) const {
    return (cPtr_syntaxRule *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mNonterminalName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_syntaxRuleLabelList  reader_mLabelList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_syntaxRule * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_syntaxRule * operator () (void) const {
      return (cPtr_syntaxRule *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          list '@syntaxRuleList'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_syntaxRuleList : public AC_galgas_list {
  public : typedef cPtr_syntaxRule element_type ;
//--- Constructor 'emptyList'
  public : static GGS_syntaxRuleList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_syntaxRuleList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_syntaxRuleList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_syntaxRule & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_syntaxRule & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_syntaxRule & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_syntaxRule & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_syntaxRule & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS_syntaxRuleList _operator_concat (const GGS_syntaxRuleList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelList & argument_1) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelList & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_syntaxRule & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_nonterminalCallInstruction'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_nonterminalCallInstruction : public GGS_syntaxInstruction {
//--- 'new' constructor
  public : static GGS_nonterminalCallInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_actualParameters & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_bool& argument_4
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mNonterminalName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mLabelName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_actualParameters  reader_mActualParameterList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mReturnedValueTargetVariableName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mReturnedValueIsAssigned (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_nonterminalCallInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_nonterminalCallInstruction * operator () (void) const {
      return (cPtr_nonterminalCallInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  list '@nonterminalCallInstructionList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_nonterminalCallInstructionList : public AC_galgas_list {
  public : typedef cPtr_nonterminalCallInstruction element_type ;
//--- Constructor 'emptyList'
  public : static GGS_nonterminalCallInstructionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_nonterminalCallInstructionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_actualParameters & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_bool& argument_4
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_nonterminalCallInstructionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_nonterminalCallInstruction & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_nonterminalCallInstruction & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_nonterminalCallInstruction & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_nonterminalCallInstruction & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_nonterminalCallInstruction & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS_nonterminalCallInstructionList _operator_concat (const GGS_nonterminalCallInstructionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_actualParameters & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_bool& argument_4
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_actualParameters & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_bool& argument_4) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_actualParameters & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_bool& argument_4) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_nonterminalCallInstruction & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_terminalCheckInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_terminalCheckInstruction : public GGS_syntaxInstruction {
//--- 'new' constructor
  public : static GGS_terminalCheckInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstringlist & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTerminalName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_mReturnedValueTargetVariableNames (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_terminalCheckInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_terminalCheckInstruction * operator () (void) const {
      return (cPtr_terminalCheckInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@terminalCheckInstructionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_terminalCheckInstructionList : public AC_galgas_list {
  public : typedef cPtr_terminalCheckInstruction element_type ;
//--- Constructor 'emptyList'
  public : static GGS_terminalCheckInstructionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_terminalCheckInstructionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstringlist & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_terminalCheckInstructionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_terminalCheckInstruction & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_terminalCheckInstruction & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_terminalCheckInstruction & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_terminalCheckInstruction & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_terminalCheckInstruction & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS_terminalCheckInstructionList _operator_concat (const GGS_terminalCheckInstructionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstringlist & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstringlist & argument_1) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstringlist & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_terminalCheckInstruction & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_repeatInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_repeatInstruction : public GGS_syntaxInstruction {
//--- 'new' constructor
  public : static GGS_repeatInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_syntaxInstructions & argument_0,
                                const GGS_syntaxInstructionsList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_syntaxInstructions  reader_mRepeatedInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_syntaxInstructionsList  reader_mRepeatBranchList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_repeatInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_repeatInstruction * operator () (void) const {
      return (cPtr_repeatInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@repeatInstructionList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_repeatInstructionList : public AC_galgas_list {
  public : typedef cPtr_repeatInstruction element_type ;
//--- Constructor 'emptyList'
  public : static GGS_repeatInstructionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_repeatInstructionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_syntaxInstructions & argument_0,
                                const GGS_syntaxInstructionsList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_repeatInstructionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_repeatInstruction & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_repeatInstruction & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_repeatInstruction & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_repeatInstruction & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_repeatInstruction & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS_repeatInstructionList _operator_concat (const GGS_repeatInstructionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_syntaxInstructions & argument_0,
                                const GGS_syntaxInstructionsList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_syntaxInstructions & argument_0,
                                const GGS_syntaxInstructionsList & argument_1) ;

  protected : void _internalPrependValues (const GGS_syntaxInstructions & argument_0,
                                const GGS_syntaxInstructionsList & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_repeatInstruction & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_selectInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_selectInstruction : public GGS_syntaxInstruction {
//--- 'new' constructor
  public : static GGS_selectInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_syntaxInstructionsList & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_syntaxInstructionsList  reader_mSelectBranchList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_selectInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_selectInstruction * operator () (void) const {
      return (cPtr_selectInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@selectInstructionList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_selectInstructionList : public AC_galgas_list {
  public : typedef cPtr_selectInstruction element_type ;
//--- Constructor 'emptyList'
  public : static GGS_selectInstructionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_selectInstructionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_syntaxInstructionsList & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_selectInstructionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_selectInstruction & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_selectInstruction & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_selectInstruction & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_selectInstruction & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_selectInstruction & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS_selectInstructionList _operator_concat (const GGS_selectInstructionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_syntaxInstructionsList & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_syntaxInstructionsList & argument_0) ;

  protected : void _internalPrependValues (const GGS_syntaxInstructionsList & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_selectInstruction & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@syntaxComponentRootList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_syntaxComponentRoot : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_lstring  mSyntaxComponentName ;
  public : GGS_nonterminalDeclarationList  mNonterminalDeclarations ;
  public : GGS_syntaxRuleList  mRules ;
//--- Constructor
  public : cPtr_syntaxComponentRoot (const GGS_lstring & ,
                                const GGS_nonterminalDeclarationList & ,
                                const GGS_syntaxRuleList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_syntaxComponentRoot * nextObject (void) const {
    return (cPtr_syntaxComponentRoot *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_syntaxComponentRoot * previousObject (void) const {
    return (cPtr_syntaxComponentRoot *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_syntaxComponentRoot * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_syntaxComponentRootList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@syntaxInstructionsList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_syntaxInstructions : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_syntaxInstructionList  mInstruction ;
//--- Constructor
  public : cPtr_syntaxInstructions (const GGS_syntaxInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_syntaxInstructions * nextObject (void) const {
    return (cPtr_syntaxInstructions *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_syntaxInstructions * previousObject (void) const {
    return (cPtr_syntaxInstructions *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_syntaxInstructions * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_syntaxInstructionsList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@nonTerminalLabelList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_nonTerminalLabel : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_lstring  mLabelName ;
  public : GGS_formalParameters  mFormalParameters ;
  public : GGS_lstring  mReturnedEntityName ;
//--- Constructor
  public : cPtr_nonTerminalLabel (const GGS_lstring & ,
                                const GGS_formalParameters & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_nonTerminalLabel * nextObject (void) const {
    return (cPtr_nonTerminalLabel *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_nonTerminalLabel * previousObject (void) const {
    return (cPtr_nonTerminalLabel *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_nonTerminalLabel * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_nonTerminalLabelList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@nonterminalDeclarationList'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_nonterminalDeclaration : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_lstring  mNonterminalName ;
  public : GGS_nonTerminalLabelList  mLabels ;
  public : GGS_bool mHasParseLabel ;
//--- Constructor
  public : cPtr_nonterminalDeclaration (const GGS_lstring & ,
                                const GGS_nonTerminalLabelList & ,
                                const GGS_bool& 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_nonterminalDeclaration * nextObject (void) const {
    return (cPtr_nonterminalDeclaration *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_nonterminalDeclaration * previousObject (void) const {
    return (cPtr_nonterminalDeclaration *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_nonterminalDeclaration * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_nonterminalDeclarationList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@syntaxRuleLabelList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_syntaxRuleLabel : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_lstring  mLabelName ;
  public : GGS_formalParameters  mFormalParameters ;
  public : GGS_lstring  mReturnedEntityName ;
  public : GGS_lstring  mReturnedVariableName ;
  public : GGS_syntaxInstructions  mSyntaxInstructionList ;
//--- Constructor
  public : cPtr_syntaxRuleLabel (const GGS_lstring & ,
                                const GGS_formalParameters & ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_syntaxInstructions & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_syntaxRuleLabel * nextObject (void) const {
    return (cPtr_syntaxRuleLabel *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_syntaxRuleLabel * previousObject (void) const {
    return (cPtr_syntaxRuleLabel *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_syntaxRuleLabel * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_syntaxRuleLabelList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@syntaxRuleList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_syntaxRule : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_lstring  mNonterminalName ;
  public : GGS_syntaxRuleLabelList  mLabelList ;
//--- Constructor
  public : cPtr_syntaxRule (const GGS_lstring & ,
                                const GGS_syntaxRuleLabelList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_syntaxRule * nextObject (void) const {
    return (cPtr_syntaxRule *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_syntaxRule * previousObject (void) const {
    return (cPtr_syntaxRule *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_syntaxRule * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_syntaxRuleList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Element of list '@nonterminalCallInstructionList'              *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_nonterminalCallInstruction : public cPtr_syntaxInstruction {
//--- Attributes
  public : GGS_lstring  mNonterminalName ;
  public : GGS_lstring  mLabelName ;
  public : GGS_actualParameters  mActualParameterList ;
  public : GGS_lstring  mReturnedValueTargetVariableName ;
  public : GGS_bool mReturnedValueIsAssigned ;
//--- Constructor
  public : cPtr_nonterminalCallInstruction (const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_actualParameters & ,
                                const GGS_lstring & ,
                                const GGS_bool& 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_nonterminalCallInstruction * nextObject (void) const {
    return (cPtr_nonterminalCallInstruction *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_nonterminalCallInstruction * previousObject (void) const {
    return (cPtr_nonterminalCallInstruction *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_nonterminalCallInstruction * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_nonterminalCallInstructionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@terminalCheckInstructionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_terminalCheckInstruction : public cPtr_syntaxInstruction {
//--- Attributes
  public : GGS_lstring  mTerminalName ;
  public : GGS_lstringlist  mReturnedValueTargetVariableNames ;
//--- Constructor
  public : cPtr_terminalCheckInstruction (const GGS_lstring & ,
                                const GGS_lstringlist & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_terminalCheckInstruction * nextObject (void) const {
    return (cPtr_terminalCheckInstruction *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_terminalCheckInstruction * previousObject (void) const {
    return (cPtr_terminalCheckInstruction *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_terminalCheckInstruction * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_terminalCheckInstructionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@repeatInstructionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_repeatInstruction : public cPtr_syntaxInstruction {
//--- Attributes
  public : GGS_syntaxInstructions  mRepeatedInstructionList ;
  public : GGS_syntaxInstructionsList  mRepeatBranchList ;
//--- Constructor
  public : cPtr_repeatInstruction (const GGS_syntaxInstructions & ,
                                const GGS_syntaxInstructionsList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_repeatInstruction * nextObject (void) const {
    return (cPtr_repeatInstruction *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_repeatInstruction * previousObject (void) const {
    return (cPtr_repeatInstruction *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_repeatInstruction * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_repeatInstructionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@selectInstructionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_selectInstruction : public cPtr_syntaxInstruction {
//--- Attributes
  public : GGS_syntaxInstructionsList  mSelectBranchList ;
//--- Constructor
  public : cPtr_selectInstruction (const GGS_syntaxInstructionsList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_selectInstruction * nextObject (void) const {
    return (cPtr_selectInstruction *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_selectInstruction * previousObject (void) const {
    return (cPtr_selectInstruction *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_selectInstruction * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_selectInstructionList ;
} ;

//---------------------------------------------------------------------------*

#endif
