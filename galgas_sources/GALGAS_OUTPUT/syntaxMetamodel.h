//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'syntaxMetamodel.h'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    september 22th, 2010, at 20h47'14"                     *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef syntaxMetamodel_DEFINED
#define syntaxMetamodel_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/GGS__header.h"

//---------------------------------------------------------------------------*

// Include imported semantics
#include "semanticsTypesForAST.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_syntaxInstructionList ;
class GGS_nonTerminalLabelListAST ;
class GGS_nonterminalDeclarationListAST ;
class GGS_syntaxRuleLabelListAST ;
class GGS_syntaxRuleListAST ;
class GGS_nonterminalCallInstruction ;
class cPtr_nonterminalCallInstruction ;
class GGS_terminalCheckInstruction ;
class cPtr_terminalCheckInstruction ;
class GGS_listOfSyntaxInstructionList ;
class GGS_repeatInstruction ;
class cPtr_repeatInstruction ;
class GGS_selectInstruction ;
class cPtr_selectInstruction ;
class GGS_parseRewindInstruction ;
class cPtr_parseRewindInstruction ;
class GGS_parseLoopInstruction ;
class cPtr_parseLoopInstruction ;
class GGS_parseWhenInstruction ;
class cPtr_parseWhenInstruction ;
class GGS_blockInstruction ;
class cPtr_blockInstruction ;
class GGS_syntaxComponentAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@syntaxInstructionList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_syntaxInstructionList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_syntaxInstructionList ;

//---------------------------------------------------------------------------*

class GGS_syntaxInstructionList : public AC_GGS_list {
  public : typedef elementOf_GGS_syntaxInstructionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_syntaxInstructionList constructor_emptyList (void) ;
  public : static GGS_syntaxInstructionList constructor_listWithValue (const GGS_syntaxInstructionAST & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_syntaxInstructionList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_syntaxInstructionList
  reader_subListWithRange (C_CompilerEx & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_syntaxInstructionList
  reader_subListFromIndex (C_CompilerEx & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_syntaxInstructionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_CompilerEx & inLexique,
                              GGS_syntaxInstructionAST & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_CompilerEx & inLexique,
                             GGS_syntaxInstructionAST & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_CompilerEx & inLexique,
                                GGS_syntaxInstructionAST & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_CompilerEx & inLexique,
                                 GGS_syntaxInstructionAST & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_syntaxInstructionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_syntaxInstructionAST & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_syntaxInstructionList operator_concat (const GGS_syntaxInstructionList & inOperand) const ;
  public : void modifier_prependValue (C_CompilerEx & inLexique,
                                const GGS_syntaxInstructionAST & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_syntaxInstructionAST & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_syntaxInstructionAST & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_syntaxInstructionAST 
  reader_mInstructionAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMInstructionAtIndex (C_CompilerEx & inLexique,
                              const GGS_syntaxInstructionAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_syntaxInstructionList castFromObject (C_CompilerEx & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_syntaxInstructionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_syntaxInstructionAST   & _mInstruction (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     list '@nonTerminalLabelListAST'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_nonTerminalLabelListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_nonTerminalLabelListAST ;

//---------------------------------------------------------------------------*

class GGS_nonTerminalLabelListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_nonTerminalLabelListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_nonTerminalLabelListAST constructor_emptyList (void) ;
  public : static GGS_nonTerminalLabelListAST constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1,
                                const GGS_location & argument_2) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_nonTerminalLabelListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_nonTerminalLabelListAST
  reader_subListWithRange (C_CompilerEx & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_nonTerminalLabelListAST
  reader_subListFromIndex (C_CompilerEx & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_nonTerminalLabelListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_CompilerEx & inLexique,
                              GGS_lstring & _out_0,
                              GGS_formalParameterListAST & _out_1,
                              GGS_location & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_CompilerEx & inLexique,
                             GGS_lstring & _out_0,
                             GGS_formalParameterListAST & _out_1,
                             GGS_location & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_CompilerEx & inLexique,
                                GGS_lstring & _out_0,
                                GGS_formalParameterListAST & _out_1,
                                GGS_location & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_CompilerEx & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_formalParameterListAST & _out_1,
                                 GGS_location & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_nonTerminalLabelListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1,
                                const GGS_location & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_nonTerminalLabelListAST operator_concat (const GGS_nonTerminalLabelListAST & inOperand) const ;
  public : void modifier_prependValue (C_CompilerEx & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1,
                                const GGS_location & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1,
                                const GGS_location & argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1,
                                const GGS_location & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mLabelNameAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_formalParameterListAST 
  reader_mFormalArgumentListAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_location 
  reader_mEndOfArgumentLocationAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMLabelNameAtIndex (C_CompilerEx & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMFormalArgumentListAtIndex (C_CompilerEx & inLexique,
                              const GGS_formalParameterListAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMEndOfArgumentLocationAtIndex (C_CompilerEx & inLexique,
                              const GGS_location  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_nonTerminalLabelListAST castFromObject (C_CompilerEx & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_nonTerminalLabelListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mLabelName (LOCATION_ARGS) const ;
    public : /* const */ GGS_formalParameterListAST   & _mFormalArgumentList (LOCATION_ARGS) const ;
    public : /* const */ GGS_location   & _mEndOfArgumentLocation (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  list '@nonterminalDeclarationListAST'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_nonterminalDeclarationListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_nonterminalDeclarationListAST ;

//---------------------------------------------------------------------------*

class GGS_nonterminalDeclarationListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_nonterminalDeclarationListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_nonterminalDeclarationListAST constructor_emptyList (void) ;
  public : static GGS_nonterminalDeclarationListAST constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelListAST & argument_1,
                                const GGS_bool& argument_2) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_nonterminalDeclarationListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_nonterminalDeclarationListAST
  reader_subListWithRange (C_CompilerEx & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_nonterminalDeclarationListAST
  reader_subListFromIndex (C_CompilerEx & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_nonterminalDeclarationListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_CompilerEx & inLexique,
                              GGS_lstring & _out_0,
                              GGS_nonTerminalLabelListAST & _out_1,
                              GGS_bool& _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_CompilerEx & inLexique,
                             GGS_lstring & _out_0,
                             GGS_nonTerminalLabelListAST & _out_1,
                             GGS_bool& _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_CompilerEx & inLexique,
                                GGS_lstring & _out_0,
                                GGS_nonTerminalLabelListAST & _out_1,
                                GGS_bool& _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_CompilerEx & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_nonTerminalLabelListAST & _out_1,
                                 GGS_bool& _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_nonterminalDeclarationListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelListAST & argument_1,
                                const GGS_bool& argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_nonterminalDeclarationListAST operator_concat (const GGS_nonterminalDeclarationListAST & inOperand) const ;
  public : void modifier_prependValue (C_CompilerEx & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelListAST & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelListAST & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelListAST & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mNonterminalNameAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_nonTerminalLabelListAST 
  reader_mLabelsAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_bool
  reader_mHasParseLabelAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMNonterminalNameAtIndex (C_CompilerEx & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMLabelsAtIndex (C_CompilerEx & inLexique,
                              const GGS_nonTerminalLabelListAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMHasParseLabelAtIndex (C_CompilerEx & inLexique,
                              const GGS_bool & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_nonterminalDeclarationListAST castFromObject (C_CompilerEx & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_nonterminalDeclarationListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mNonterminalName (LOCATION_ARGS) const ;
    public : /* const */ GGS_nonTerminalLabelListAST   & _mLabels (LOCATION_ARGS) const ;
    public : /* const */ GGS_bool  & _mHasParseLabel (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@syntaxRuleLabelListAST'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_syntaxRuleLabelListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_syntaxRuleLabelListAST ;

//---------------------------------------------------------------------------*

class GGS_syntaxRuleLabelListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_syntaxRuleLabelListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_syntaxRuleLabelListAST constructor_emptyList (void) ;
  public : static GGS_syntaxRuleLabelListAST constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1,
                                const GGS_location & argument_2,
                                const GGS_syntaxInstructionList & argument_3,
                                const GGS_location & argument_4) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_syntaxRuleLabelListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_syntaxRuleLabelListAST
  reader_subListWithRange (C_CompilerEx & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_syntaxRuleLabelListAST
  reader_subListFromIndex (C_CompilerEx & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_syntaxRuleLabelListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_CompilerEx & inLexique,
                              GGS_lstring & _out_0,
                              GGS_formalParameterListAST & _out_1,
                              GGS_location & _out_2,
                              GGS_syntaxInstructionList & _out_3,
                              GGS_location & _out_4
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_CompilerEx & inLexique,
                             GGS_lstring & _out_0,
                             GGS_formalParameterListAST & _out_1,
                             GGS_location & _out_2,
                             GGS_syntaxInstructionList & _out_3,
                             GGS_location & _out_4
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_CompilerEx & inLexique,
                                GGS_lstring & _out_0,
                                GGS_formalParameterListAST & _out_1,
                                GGS_location & _out_2,
                                GGS_syntaxInstructionList & _out_3,
                                GGS_location & _out_4
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_CompilerEx & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_formalParameterListAST & _out_1,
                                 GGS_location & _out_2,
                                 GGS_syntaxInstructionList & _out_3,
                                 GGS_location & _out_4
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_syntaxRuleLabelListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1,
                                const GGS_location & argument_2,
                                const GGS_syntaxInstructionList & argument_3,
                                const GGS_location & argument_4) ;
//--- Handling '.' GALGAS operator
  public : GGS_syntaxRuleLabelListAST operator_concat (const GGS_syntaxRuleLabelListAST & inOperand) const ;
  public : void modifier_prependValue (C_CompilerEx & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1,
                                const GGS_location & argument_2,
                                const GGS_syntaxInstructionList & argument_3,
                                const GGS_location & argument_4
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1,
                                const GGS_location & argument_2,
                                const GGS_syntaxInstructionList & argument_3,
                                const GGS_location & argument_4
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1,
                                const GGS_location & argument_2,
                                const GGS_syntaxInstructionList & argument_3,
                                const GGS_location & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mLabelNameAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_formalParameterListAST 
  reader_mFormalArgumentsAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_location 
  reader_mEndOfArgumentLocationAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_syntaxInstructionList 
  reader_mSyntaxInstructionListAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_location 
  reader_mEndOfInstructionListAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMLabelNameAtIndex (C_CompilerEx & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMFormalArgumentsAtIndex (C_CompilerEx & inLexique,
                              const GGS_formalParameterListAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMEndOfArgumentLocationAtIndex (C_CompilerEx & inLexique,
                              const GGS_location  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMSyntaxInstructionListAtIndex (C_CompilerEx & inLexique,
                              const GGS_syntaxInstructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMEndOfInstructionListAtIndex (C_CompilerEx & inLexique,
                              const GGS_location  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_syntaxRuleLabelListAST castFromObject (C_CompilerEx & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_syntaxRuleLabelListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mLabelName (LOCATION_ARGS) const ;
    public : /* const */ GGS_formalParameterListAST   & _mFormalArguments (LOCATION_ARGS) const ;
    public : /* const */ GGS_location   & _mEndOfArgumentLocation (LOCATION_ARGS) const ;
    public : /* const */ GGS_syntaxInstructionList   & _mSyntaxInstructionList (LOCATION_ARGS) const ;
    public : /* const */ GGS_location   & _mEndOfInstructionList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@syntaxRuleListAST'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_syntaxRuleListAST ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_syntaxRuleListAST ;

//---------------------------------------------------------------------------*

class GGS_syntaxRuleListAST : public AC_GGS_list {
  public : typedef elementOf_GGS_syntaxRuleListAST cElement ;

//--- Constructor 'emptyList'
  public : static GGS_syntaxRuleListAST constructor_emptyList (void) ;
  public : static GGS_syntaxRuleListAST constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelListAST & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_syntaxRuleListAST & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_syntaxRuleListAST
  reader_subListWithRange (C_CompilerEx & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_syntaxRuleListAST
  reader_subListFromIndex (C_CompilerEx & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_syntaxRuleListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_CompilerEx & inLexique,
                              GGS_lstring & _out_0,
                              GGS_syntaxRuleLabelListAST & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_CompilerEx & inLexique,
                             GGS_lstring & _out_0,
                             GGS_syntaxRuleLabelListAST & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_CompilerEx & inLexique,
                                GGS_lstring & _out_0,
                                GGS_syntaxRuleLabelListAST & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_CompilerEx & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_syntaxRuleLabelListAST & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_syntaxRuleListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelListAST & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_syntaxRuleListAST operator_concat (const GGS_syntaxRuleListAST & inOperand) const ;
  public : void modifier_prependValue (C_CompilerEx & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelListAST & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelListAST & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelListAST & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mNonterminalNameAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_syntaxRuleLabelListAST 
  reader_mLabelListAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMNonterminalNameAtIndex (C_CompilerEx & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMLabelListAtIndex (C_CompilerEx & inLexique,
                              const GGS_syntaxRuleLabelListAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_syntaxRuleListAST castFromObject (C_CompilerEx & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_syntaxRuleListAST & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mNonterminalName (LOCATION_ARGS) const ;
    public : /* const */ GGS_syntaxRuleLabelListAST   & _mLabelList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_nonterminalCallInstruction'                *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_nonterminalCallInstruction ;

//---------------------------------------------------------------------------*

class GGS_nonterminalCallInstruction : public GGS_syntaxInstructionAST {
//--- Default constructor
  public : inline GGS_nonterminalCallInstruction (void) :
  GGS_syntaxInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_nonterminalCallInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_nonterminalCallInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_nonterminalCallInstruction
  castFrom (C_CompilerEx & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_nonterminalCallInstruction constructor_new (C_CompilerEx & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_actualParameterListAST & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_nonterminalCallInstruction * getPtr (void) const {
    return (cPtr_nonterminalCallInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mNonterminalName (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mLabelName (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_actualParameterListAST  reader_mActualParameterList (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_nonterminalCallInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_nonterminalCallInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_nonterminalCallInstruction *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_nonterminalCallInstruction castFromObject (C_CompilerEx & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__nonterminalCallInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_terminalCheckInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_terminalCheckInstruction ;

//---------------------------------------------------------------------------*

class GGS_terminalCheckInstruction : public GGS_syntaxInstructionAST {
//--- Default constructor
  public : inline GGS_terminalCheckInstruction (void) :
  GGS_syntaxInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_terminalCheckInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_terminalCheckInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_terminalCheckInstruction
  castFrom (C_CompilerEx & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_terminalCheckInstruction constructor_new (C_CompilerEx & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_actualInputParameterListAST & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_terminalCheckInstruction * getPtr (void) const {
    return (cPtr_terminalCheckInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTerminalName (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_actualInputParameterListAST  reader_mActualInputParameterList (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_terminalCheckInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_terminalCheckInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_terminalCheckInstruction *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_terminalCheckInstruction castFromObject (C_CompilerEx & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__terminalCheckInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@listOfSyntaxInstructionList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_listOfSyntaxInstructionList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_listOfSyntaxInstructionList ;

//---------------------------------------------------------------------------*

class GGS_listOfSyntaxInstructionList : public AC_GGS_list {
  public : typedef elementOf_GGS_listOfSyntaxInstructionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_listOfSyntaxInstructionList constructor_emptyList (void) ;
  public : static GGS_listOfSyntaxInstructionList constructor_listWithValue (const GGS_syntaxInstructionList & argument_0,
                                const GGS_location & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_listOfSyntaxInstructionList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_listOfSyntaxInstructionList
  reader_subListWithRange (C_CompilerEx & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_listOfSyntaxInstructionList
  reader_subListFromIndex (C_CompilerEx & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_listOfSyntaxInstructionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_CompilerEx & inLexique,
                              GGS_syntaxInstructionList & _out_0,
                              GGS_location & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_CompilerEx & inLexique,
                             GGS_syntaxInstructionList & _out_0,
                             GGS_location & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_CompilerEx & inLexique,
                                GGS_syntaxInstructionList & _out_0,
                                GGS_location & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_CompilerEx & inLexique,
                                 GGS_syntaxInstructionList & _out_0,
                                 GGS_location & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_listOfSyntaxInstructionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_syntaxInstructionList & argument_0,
                                const GGS_location & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_listOfSyntaxInstructionList operator_concat (const GGS_listOfSyntaxInstructionList & inOperand) const ;
  public : void modifier_prependValue (C_CompilerEx & inLexique,
                                const GGS_syntaxInstructionList & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_syntaxInstructionList & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_syntaxInstructionList & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_syntaxInstructionList 
  reader_mSyntaxInstructionListAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_location 
  reader_mEndOf_instructionsAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMSyntaxInstructionListAtIndex (C_CompilerEx & inLexique,
                              const GGS_syntaxInstructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMEndOf_instructionsAtIndex (C_CompilerEx & inLexique,
                              const GGS_location  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_listOfSyntaxInstructionList castFromObject (C_CompilerEx & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_listOfSyntaxInstructionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_syntaxInstructionList   & _mSyntaxInstructionList (LOCATION_ARGS) const ;
    public : /* const */ GGS_location   & _mEndOf_instructions (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_repeatInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_repeatInstruction ;

//---------------------------------------------------------------------------*

class GGS_repeatInstruction : public GGS_syntaxInstructionAST {
//--- Default constructor
  public : inline GGS_repeatInstruction (void) :
  GGS_syntaxInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_repeatInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_repeatInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_repeatInstruction
  castFrom (C_CompilerEx & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_repeatInstruction constructor_new (C_CompilerEx & inLexique,
                                const GGS_location & argument_0,
                                const GGS_syntaxInstructionList & argument_1,
                                const GGS_location & argument_2,
                                const GGS_listOfSyntaxInstructionList & argument_3,
                                const GGS_location & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_repeatInstruction * getPtr (void) const {
    return (cPtr_repeatInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_syntaxInstructionList  reader_mRepeatedInstructionList (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mEndOf_repeated_instructions_branch (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_listOfSyntaxInstructionList  reader_mRepeatBranchList (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mEndOf_repeat_instruction (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_repeatInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_repeatInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_repeatInstruction *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_repeatInstruction castFromObject (C_CompilerEx & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__repeatInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_selectInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_selectInstruction ;

//---------------------------------------------------------------------------*

class GGS_selectInstruction : public GGS_syntaxInstructionAST {
//--- Default constructor
  public : inline GGS_selectInstruction (void) :
  GGS_syntaxInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_selectInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_selectInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_selectInstruction
  castFrom (C_CompilerEx & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_selectInstruction constructor_new (C_CompilerEx & inLexique,
                                const GGS_location & argument_0,
                                const GGS_listOfSyntaxInstructionList & argument_1,
                                const GGS_location & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_selectInstruction * getPtr (void) const {
    return (cPtr_selectInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_listOfSyntaxInstructionList  reader_mSelectBranchList (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mEndOf_select_instruction (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_selectInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_selectInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_selectInstruction *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_selectInstruction castFromObject (C_CompilerEx & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__selectInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_parseRewindInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_parseRewindInstruction ;

//---------------------------------------------------------------------------*

class GGS_parseRewindInstruction : public GGS_syntaxInstructionAST {
//--- Default constructor
  public : inline GGS_parseRewindInstruction (void) :
  GGS_syntaxInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_parseRewindInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_parseRewindInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_parseRewindInstruction
  castFrom (C_CompilerEx & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_parseRewindInstruction constructor_new (C_CompilerEx & inLexique,
                                const GGS_location & argument_0,
                                const GGS_listOfSyntaxInstructionList & argument_1,
                                const GGS_location & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_parseRewindInstruction * getPtr (void) const {
    return (cPtr_parseRewindInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_listOfSyntaxInstructionList  reader_mParseRewindBranchList (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mEndOfParseDoInstruction (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_parseRewindInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_parseRewindInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_parseRewindInstruction *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_parseRewindInstruction castFromObject (C_CompilerEx & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__parseRewindInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_parseLoopInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_parseLoopInstruction ;

//---------------------------------------------------------------------------*

class GGS_parseLoopInstruction : public GGS_syntaxInstructionAST {
//--- Default constructor
  public : inline GGS_parseLoopInstruction (void) :
  GGS_syntaxInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_parseLoopInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_parseLoopInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_parseLoopInstruction
  castFrom (C_CompilerEx & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_parseLoopInstruction constructor_new (C_CompilerEx & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpressionAST & argument_1,
                                const GGS_location & argument_2,
                                const GGS_semanticExpressionAST & argument_3,
                                const GGS_location & argument_4,
                                const GGS_syntaxInstructionList & argument_5,
                                const GGS_location & argument_6
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_parseLoopInstruction * getPtr (void) const {
    return (cPtr_parseLoopInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticExpressionAST  reader_mVariantExpression (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mEndOfVariantExpression (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpressionAST  reader_mWhileExpression (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mEndOfWhileExpression (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_syntaxInstructionList  reader_mDoInstructionList (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mEndOfInstructionList (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_parseLoopInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_parseLoopInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_parseLoopInstruction *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_parseLoopInstruction castFromObject (C_CompilerEx & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__parseLoopInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_parseWhenInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_parseWhenInstruction ;

//---------------------------------------------------------------------------*

class GGS_parseWhenInstruction : public GGS_syntaxInstructionAST {
//--- Default constructor
  public : inline GGS_parseWhenInstruction (void) :
  GGS_syntaxInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_parseWhenInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_parseWhenInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_parseWhenInstruction
  castFrom (C_CompilerEx & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_parseWhenInstruction constructor_new (C_CompilerEx & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpressionAST & argument_1,
                                const GGS_location & argument_2,
                                const GGS_syntaxInstructionList & argument_3,
                                const GGS_location & argument_4,
                                const GGS_syntaxInstructionList & argument_5,
                                const GGS_location & argument_6
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_parseWhenInstruction * getPtr (void) const {
    return (cPtr_parseWhenInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticExpressionAST  reader_mWhenExpression (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mEndOfWhenExpression (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_syntaxInstructionList  reader_mWhenInstructionList (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mEndOfWhenInstructionList (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_syntaxInstructionList  reader_mElseInstructionList (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mEndOfElseInstructionList (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_parseWhenInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_parseWhenInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_parseWhenInstruction *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_parseWhenInstruction castFromObject (C_CompilerEx & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__parseWhenInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_blockInstruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_blockInstruction ;

//---------------------------------------------------------------------------*

class GGS_blockInstruction : public GGS_syntaxInstructionAST {
//--- Default constructor
  public : inline GGS_blockInstruction (void) :
  GGS_syntaxInstructionAST () {}

//--- Pointer assignment constructor
  public : GGS_blockInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_blockInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_blockInstruction
  castFrom (C_CompilerEx & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_blockInstruction constructor_new (C_CompilerEx & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_actualParameterListAST & argument_3,
                                const GGS_syntaxInstructionList & argument_4,
                                const GGS_actualParameterListAST & argument_5
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_blockInstruction * getPtr (void) const {
    return (cPtr_blockInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mReceiverVariable (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mBlockMethodName (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_actualParameterListAST  reader_mPrologActualParameterList (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_syntaxInstructionList  reader_mInstructionList (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_actualParameterListAST  reader_mEpilogActualParameterList (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_blockInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_blockInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_blockInstruction *) mPointer ;
    }
  #endif

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_blockInstruction castFromObject (C_CompilerEx & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformationEX gClassInfoFor__blockInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@syntaxInstructionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_syntaxInstructionList : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_syntaxInstructionAST  mInstruction ;
//--- Constructor
  public : elementOf_GGS_syntaxInstructionList (const GGS_syntaxInstructionAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_syntaxInstructionList * nextObject (void) const { return (elementOf_GGS_syntaxInstructionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_syntaxInstructionList * previousObject (void) const { return (elementOf_GGS_syntaxInstructionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_syntaxInstructionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@nonTerminalLabelListAST'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_nonTerminalLabelListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lstring  mLabelName ;
  public : GGS_formalParameterListAST  mFormalArgumentList ;
  public : GGS_location  mEndOfArgumentLocation ;
//--- Constructor
  public : elementOf_GGS_nonTerminalLabelListAST (const GGS_lstring & ,
                                const GGS_formalParameterListAST & ,
                                const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_nonTerminalLabelListAST * nextObject (void) const { return (elementOf_GGS_nonTerminalLabelListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_nonTerminalLabelListAST * previousObject (void) const { return (elementOf_GGS_nonTerminalLabelListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_nonTerminalLabelListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@nonterminalDeclarationListAST'              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_nonterminalDeclarationListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lstring  mNonterminalName ;
  public : GGS_nonTerminalLabelListAST  mLabels ;
  public : GGS_bool mHasParseLabel ;
//--- Constructor
  public : elementOf_GGS_nonterminalDeclarationListAST (const GGS_lstring & ,
                                const GGS_nonTerminalLabelListAST & ,
                                const GGS_bool& 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_nonterminalDeclarationListAST * nextObject (void) const { return (elementOf_GGS_nonterminalDeclarationListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_nonterminalDeclarationListAST * previousObject (void) const { return (elementOf_GGS_nonterminalDeclarationListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_nonterminalDeclarationListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@syntaxRuleLabelListAST'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_syntaxRuleLabelListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lstring  mLabelName ;
  public : GGS_formalParameterListAST  mFormalArguments ;
  public : GGS_location  mEndOfArgumentLocation ;
  public : GGS_syntaxInstructionList  mSyntaxInstructionList ;
  public : GGS_location  mEndOfInstructionList ;
//--- Constructor
  public : elementOf_GGS_syntaxRuleLabelListAST (const GGS_lstring & ,
                                const GGS_formalParameterListAST & ,
                                const GGS_location & ,
                                const GGS_syntaxInstructionList & ,
                                const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_syntaxRuleLabelListAST * nextObject (void) const { return (elementOf_GGS_syntaxRuleLabelListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_syntaxRuleLabelListAST * previousObject (void) const { return (elementOf_GGS_syntaxRuleLabelListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_syntaxRuleLabelListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@syntaxRuleListAST'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_syntaxRuleListAST : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_lstring  mNonterminalName ;
  public : GGS_syntaxRuleLabelListAST  mLabelList ;
//--- Constructor
  public : elementOf_GGS_syntaxRuleListAST (const GGS_lstring & ,
                                const GGS_syntaxRuleLabelListAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_syntaxRuleListAST * nextObject (void) const { return (elementOf_GGS_syntaxRuleListAST *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_syntaxRuleListAST * previousObject (void) const { return (elementOf_GGS_syntaxRuleListAST *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_syntaxRuleListAST ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             abstract class 'cPtr_nonterminalCallInstruction'              *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_nonterminalCallInstruction : public cPtr_syntaxInstructionAST {
  private : typedef cPtr_syntaxInstructionAST inherited ;
//--- Constructor
  public : cPtr_nonterminalCallInstruction (const GGS_location & ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_actualParameterListAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mNonterminalName ;
  public : GGS_lstring  mLabelName ;
  public : GGS_actualParameterListAST  mActualParameterList ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_terminalCheckInstruction'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_terminalCheckInstruction : public cPtr_syntaxInstructionAST {
  private : typedef cPtr_syntaxInstructionAST inherited ;
//--- Constructor
  public : cPtr_terminalCheckInstruction (const GGS_location & ,
                                const GGS_lstring & ,
                                const GGS_actualInputParameterListAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mTerminalName ;
  public : GGS_actualInputParameterListAST  mActualInputParameterList ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@listOfSyntaxInstructionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_listOfSyntaxInstructionList : public AC_GGS_list::cListElement {
//--- Attributes
  public : GGS_syntaxInstructionList  mSyntaxInstructionList ;
  public : GGS_location  mEndOf_instructions ;
//--- Constructor
  public : elementOf_GGS_listOfSyntaxInstructionList (const GGS_syntaxInstructionList & ,
                                const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_listOfSyntaxInstructionList * nextObject (void) const { return (elementOf_GGS_listOfSyntaxInstructionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_listOfSyntaxInstructionList * previousObject (void) const { return (elementOf_GGS_listOfSyntaxInstructionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_listOfSyntaxInstructionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_repeatInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_repeatInstruction : public cPtr_syntaxInstructionAST {
  private : typedef cPtr_syntaxInstructionAST inherited ;
//--- Constructor
  public : cPtr_repeatInstruction (const GGS_location & ,
                                const GGS_syntaxInstructionList & ,
                                const GGS_location & ,
                                const GGS_listOfSyntaxInstructionList & ,
                                const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_syntaxInstructionList  mRepeatedInstructionList ;
  public : GGS_location  mEndOf_repeated_instructions_branch ;
  public : GGS_listOfSyntaxInstructionList  mRepeatBranchList ;
  public : GGS_location  mEndOf_repeat_instruction ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_selectInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_selectInstruction : public cPtr_syntaxInstructionAST {
  private : typedef cPtr_syntaxInstructionAST inherited ;
//--- Constructor
  public : cPtr_selectInstruction (const GGS_location & ,
                                const GGS_listOfSyntaxInstructionList & ,
                                const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_listOfSyntaxInstructionList  mSelectBranchList ;
  public : GGS_location  mEndOf_select_instruction ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_parseRewindInstruction'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_parseRewindInstruction : public cPtr_syntaxInstructionAST {
  private : typedef cPtr_syntaxInstructionAST inherited ;
//--- Constructor
  public : cPtr_parseRewindInstruction (const GGS_location & ,
                                const GGS_listOfSyntaxInstructionList & ,
                                const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_listOfSyntaxInstructionList  mParseRewindBranchList ;
  public : GGS_location  mEndOfParseDoInstruction ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_parseLoopInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_parseLoopInstruction : public cPtr_syntaxInstructionAST {
  private : typedef cPtr_syntaxInstructionAST inherited ;
//--- Constructor
  public : cPtr_parseLoopInstruction (const GGS_location & ,
                                const GGS_semanticExpressionAST & ,
                                const GGS_location & ,
                                const GGS_semanticExpressionAST & ,
                                const GGS_location & ,
                                const GGS_syntaxInstructionList & ,
                                const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_semanticExpressionAST  mVariantExpression ;
  public : GGS_location  mEndOfVariantExpression ;
  public : GGS_semanticExpressionAST  mWhileExpression ;
  public : GGS_location  mEndOfWhileExpression ;
  public : GGS_syntaxInstructionList  mDoInstructionList ;
  public : GGS_location  mEndOfInstructionList ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_parseWhenInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_parseWhenInstruction : public cPtr_syntaxInstructionAST {
  private : typedef cPtr_syntaxInstructionAST inherited ;
//--- Constructor
  public : cPtr_parseWhenInstruction (const GGS_location & ,
                                const GGS_semanticExpressionAST & ,
                                const GGS_location & ,
                                const GGS_syntaxInstructionList & ,
                                const GGS_location & ,
                                const GGS_syntaxInstructionList & ,
                                const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_semanticExpressionAST  mWhenExpression ;
  public : GGS_location  mEndOfWhenExpression ;
  public : GGS_syntaxInstructionList  mWhenInstructionList ;
  public : GGS_location  mEndOfWhenInstructionList ;
  public : GGS_syntaxInstructionList  mElseInstructionList ;
  public : GGS_location  mEndOfElseInstructionList ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_blockInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_blockInstruction : public cPtr_syntaxInstructionAST {
  private : typedef cPtr_syntaxInstructionAST inherited ;
//--- Constructor
  public : cPtr_blockInstruction (const GGS_location & ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_actualParameterListAST & ,
                                const GGS_syntaxInstructionList & ,
                                const GGS_actualParameterListAST & 
                                COMMA_LOCATION_ARGS) ;

//--- Attributes
  public : GGS_lstring  mReceiverVariable ;
  public : GGS_lstring  mBlockMethodName ;
  public : GGS_actualParameterListAST  mPrologActualParameterList ;
  public : GGS_syntaxInstructionList  mInstructionList ;
  public : GGS_actualParameterListAST  mEpilogActualParameterList ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformationEX * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Declarations for 'syntaxComponentAST' struct                *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_syntaxComponentAST ;

//---------------------------------------------------------------------------*

class GGS_syntaxComponentAST : public GGS__root {
//--- Default constructor
  public : GGS_syntaxComponentAST (void) ;

//--- Virtual destructor
  public : virtual ~GGS_syntaxComponentAST (void) ;

//--- Handle 'drop' instruction
  public : void drop (void) ;

//--- Method 'isBuilt'
  public : bool isBuilt (void) const ;

//--- Support for method call handling in GALGAS
  public : inline const GGS_syntaxComponentAST * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
  public : inline GGS_syntaxComponentAST * operator () (UNUSED_LOCATION_ARGS) { return this ; }

//--- Comparison
  public : GGS_bool operator_isEqual (const GGS_syntaxComponentAST & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_syntaxComponentAST & inOperand) const ;

//--- Reader 'description'
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_syntaxComponentAST castFromObject (C_CompilerEx & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--- Galgas 'new' destructor
  public : static GGS_syntaxComponentAST constructor_new (const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_lstringlist & argument_2,
                 const GGS_nonterminalDeclarationListAST & argument_3,
                 const GGS_syntaxRuleListAST & argument_4,
                 const GGS_semanticDeclarationListAST & argument_5,
                 const GGS_location & argument_6) ;

//--- Readers
  public : inline GGS_lstring 
  reader_mSyntaxComponentName (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mSyntaxComponentName ;
  }

  public : inline GGS_lstring 
  reader_mImportedLexiqueFilePath (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mImportedLexiqueFilePath ;
  }

  public : inline GGS_lstringlist 
  reader_mImportedComponentFileNameList (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mImportedComponentFileNameList ;
  }

  public : inline GGS_nonterminalDeclarationListAST 
  reader_mNonterminalDeclarationList (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mNonterminalDeclarationList ;
  }

  public : inline GGS_syntaxRuleListAST 
  reader_mRuleList (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mRuleList ;
  }

  public : inline GGS_semanticDeclarationListAST 
  reader_mSemanticDeclarationList (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mSemanticDeclarationList ;
  }

  public : inline GGS_location 
  reader_mEndOfSourceFile (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mEndOfSourceFile ;
  }

//--- Attributes
  public : GGS_lstring  mSyntaxComponentName ;
  public : GGS_lstring  mImportedLexiqueFilePath ;
  public : GGS_lstringlist  mImportedComponentFileNameList ;
  public : GGS_nonterminalDeclarationListAST  mNonterminalDeclarationList ;
  public : GGS_syntaxRuleListAST  mRuleList ;
  public : GGS_semanticDeclarationListAST  mSemanticDeclarationList ;
  public : GGS_location  mEndOfSourceFile ;
} ;

//---------------------------------------------------------------------------*

#endif
