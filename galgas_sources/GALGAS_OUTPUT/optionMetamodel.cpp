//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'optionMetamodel.cpp'                         *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      june 24th, 2007, at 15h56'10"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

#include "optionMetamodel.h"
#include "utilities/MF_MemoryControl.h"

//---------------------------------------------------------------------------*

#include <typeinfo>

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "optionMetamodel.gMetamodel", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                           Metamodel Management                            *
//                                                                           *
//---------------------------------------------------------------------------*

static C_MetamodelManager gMetamodelManager ("optionMetamodel", 2) ;

//---------------------------------------------------------------------------*

sint32 _metamodel_index_for_optionMetamodel (void) {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@optionComponentRoot'                   *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_optionComponentRoot::
cPtr_optionComponentRoot (const GGS_lstring & argument_0,
                                const GGS__list_commandLineOption & argument_1
                                COMMA_LOCATION_ARGS) :
C_GGS_MetamodelEntity (THERE),
mOptionComponentName (argument_0),
mOptions (argument_1) {
}

//---------------------------------------------------------------------------*

bool cPtr_optionComponentRoot::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_optionComponentRoot * _p = dynamic_cast <const cPtr_optionComponentRoot *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mOptionComponentName._operator_isEqual (_p->mOptionComponentName).boolValue ()
         && mOptions._operator_isEqual (_p->mOptions).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_optionComponentRoot::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @optionComponentRoot" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOptionComponentName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOptions.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_optionComponentRoot::_metamodelComponentIndex (const sint32 inLevel) const {
  sint32 result = gMetamodelManager.mMetamodelComponentIndex ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_optionComponentRoot::_metamodelComponentName (const sint32 inLevel) const {
  const char * result = gMetamodelManager.mMetamodelComponentName ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_optionComponentRoot::_metamodelClassID (const sint32 inLevel) const {
  sint32 result = 0 ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_optionComponentRoot::_metamodelClassName (const sint32 inLevel) const {
  const char * result = "optionComponentRoot" ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

cPtr_optionComponentRoot * cPtr_optionComponentRoot::
_cloneObject (void) const {
  cPtr_optionComponentRoot * _p = NULL ;
  macroMyNew (_p, cPtr_optionComponentRoot (mOptionComponentName, mOptions COMMA_HERE)) ;
  return _p ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    List '@_list_optionComponentRoot'                      *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS__list_optionComponentRoot::
_internalAppendValues (const GGS_lstring & argument_0,
                    const GGS__list_commandLineOption & argument_1) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS__list_optionComponentRoot::
_internalPrependValues (const GGS_lstring & argument_0,
                    const GGS__list_commandLineOption & argument_1) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS__list_optionComponentRoot::
_addAssign_operation (const GGS_optionComponentRoot & inElement) {
  if (_isBuilt () && inElement._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (((cPtr_optionComponentRoot *) inElement.getPtr ())->mOptionComponentName,
                                ((cPtr_optionComponentRoot *) inElement.getPtr ())->mOptions) ;
  }
}

//---------------------------------------------------------------------------*

GGS__list_optionComponentRoot GGS__list_optionComponentRoot::
_operator_concat (const GGS__list_optionComponentRoot & inOperand) const {
  GGS__list_optionComponentRoot result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cPtr_optionComponentRoot * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mOptionComponentName ;
          GGS__list_commandLineOption  p_1 = p->mOptions ;
          result._internalAppendValues (p_0, p_1) ;
          p = p->nextObject () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS__list_optionComponentRoot::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0,
                     const GGS__list_commandLineOption & argument_1
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1) ;
  }
}

//---------------------------------------------------------------------------*

void GGS__list_optionComponentRoot::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mOptionComponentName,
                                _p->mOptions) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS__list_optionComponentRoot  GGS__list_optionComponentRoot::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_optionComponentRoot result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_optionComponentRoot  GGS__list_optionComponentRoot::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_lstring & argument_0,
                           const GGS__list_commandLineOption & argument_1
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_optionComponentRoot result ;
  result._alloc () ;
  result._internalAppendValues (argument_0, argument_1) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS__list_optionComponentRoot::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@_list_optionComponentRoot", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS__list_optionComponentRoot::
_addModel (const GGS_optionComponentRoot & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS__list_optionComponentRoot::
method_first (C_Compiler & _inLexique,
              GGS_optionComponentRoot & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_optionComponentRoot::constructor_new (_inLexique,
       _p->mOptionComponentName,
       _p->mOptions) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_optionComponentRoot::
method_last (C_Compiler & _inLexique,
             GGS_optionComponentRoot & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_optionComponentRoot::constructor_new (_inLexique,
       _p->mOptionComponentName,
       _p->mOptions) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_optionComponentRoot::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_optionComponentRoot & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_optionComponentRoot::constructor_new (_inLexique,
       _p->mOptionComponentName,
       _p->mOptions) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_optionComponentRoot::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_optionComponentRoot & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_optionComponentRoot::constructor_new (_inLexique,
       _p->mOptionComponentName,
       _p->mOptions) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS entity '@optionComponentRoot'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_optionComponentRoot GGS_optionComponentRoot::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS__list_commandLineOption & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_optionComponentRoot result ;
  macroMyNew (result.mPointer, cPtr_optionComponentRoot (argument_0,
                                argument_1 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_optionComponentRoot::
reader_mOptionComponentName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_optionComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_optionComponentRoot *) mPointer)->mOptionComponentName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_commandLineOption  GGS_optionComponentRoot::
reader_mOptions (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS__list_commandLineOption   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_optionComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_optionComponentRoot *) mPointer)->mOptions ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_optionComponentRoot::actualTypeName (void) const {
 return "optionComponentRoot" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_optionComponentRoot * GGS_optionComponentRoot::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_optionComponentRoot *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@commandLineOption'                    *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_commandLineOption::
cPtr_commandLineOption (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lchar & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_lstring & argument_4
                                COMMA_LOCATION_ARGS) :
C_GGS_MetamodelEntity (THERE),
mOptionTypeName (argument_0),
mOptionInternalName (argument_1),
mOptionInvocationLetter (argument_2),
mOptionInvocationString (argument_3),
mOptionComment (argument_4) {
}

//---------------------------------------------------------------------------*

bool cPtr_commandLineOption::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_commandLineOption * _p = dynamic_cast <const cPtr_commandLineOption *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mOptionTypeName._operator_isEqual (_p->mOptionTypeName).boolValue ()
         && mOptionInternalName._operator_isEqual (_p->mOptionInternalName).boolValue ()
         && mOptionInvocationLetter._operator_isEqual (_p->mOptionInvocationLetter).boolValue ()
         && mOptionInvocationString._operator_isEqual (_p->mOptionInvocationString).boolValue ()
         && mOptionComment._operator_isEqual (_p->mOptionComment).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_commandLineOption::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @commandLineOption" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOptionTypeName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOptionInternalName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOptionInvocationLetter.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOptionInvocationString.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOptionComment.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_commandLineOption::_metamodelComponentIndex (const sint32 inLevel) const {
  sint32 result = gMetamodelManager.mMetamodelComponentIndex ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_commandLineOption::_metamodelComponentName (const sint32 inLevel) const {
  const char * result = gMetamodelManager.mMetamodelComponentName ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_commandLineOption::_metamodelClassID (const sint32 inLevel) const {
  sint32 result = 1 ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_commandLineOption::_metamodelClassName (const sint32 inLevel) const {
  const char * result = "commandLineOption" ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

cPtr_commandLineOption * cPtr_commandLineOption::
_cloneObject (void) const {
  cPtr_commandLineOption * _p = NULL ;
  macroMyNew (_p, cPtr_commandLineOption (mOptionTypeName, mOptionInternalName, mOptionInvocationLetter, mOptionInvocationString, mOptionComment COMMA_HERE)) ;
  return _p ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     List '@_list_commandLineOption'                       *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS__list_commandLineOption::
_internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_lchar & argument_2,
                    const GGS_lstring & argument_3,
                    const GGS_lstring & argument_4) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS__list_commandLineOption::
_internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_lchar & argument_2,
                    const GGS_lstring & argument_3,
                    const GGS_lstring & argument_4) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS__list_commandLineOption::
_addAssign_operation (const GGS_commandLineOption & inElement) {
  if (_isBuilt () && inElement._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (((cPtr_commandLineOption *) inElement.getPtr ())->mOptionTypeName,
                                ((cPtr_commandLineOption *) inElement.getPtr ())->mOptionInternalName,
                                ((cPtr_commandLineOption *) inElement.getPtr ())->mOptionInvocationLetter,
                                ((cPtr_commandLineOption *) inElement.getPtr ())->mOptionInvocationString,
                                ((cPtr_commandLineOption *) inElement.getPtr ())->mOptionComment) ;
  }
}

//---------------------------------------------------------------------------*

GGS__list_commandLineOption GGS__list_commandLineOption::
_operator_concat (const GGS__list_commandLineOption & inOperand) const {
  GGS__list_commandLineOption result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cPtr_commandLineOption * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mOptionTypeName ;
          GGS_lstring  p_1 = p->mOptionInternalName ;
          GGS_lchar  p_2 = p->mOptionInvocationLetter ;
          GGS_lstring  p_3 = p->mOptionInvocationString ;
          GGS_lstring  p_4 = p->mOptionComment ;
          result._internalAppendValues (p_0, p_1, p_2, p_3, p_4) ;
          p = p->nextObject () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS__list_commandLineOption::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0,
                     const GGS_lstring & argument_1,
                     const GGS_lchar & argument_2,
                     const GGS_lstring & argument_3,
                     const GGS_lstring & argument_4
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4) ;
  }
}

//---------------------------------------------------------------------------*

void GGS__list_commandLineOption::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mOptionTypeName,
                                _p->mOptionInternalName,
                                _p->mOptionInvocationLetter,
                                _p->mOptionInvocationString,
                                _p->mOptionComment) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS__list_commandLineOption  GGS__list_commandLineOption::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_commandLineOption result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_commandLineOption  GGS__list_commandLineOption::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_lstring & argument_0,
                           const GGS_lstring & argument_1,
                           const GGS_lchar & argument_2,
                           const GGS_lstring & argument_3,
                           const GGS_lstring & argument_4
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_commandLineOption result ;
  result._alloc () ;
  result._internalAppendValues (argument_0, argument_1, argument_2, argument_3, argument_4) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS__list_commandLineOption::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@_list_commandLineOption", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS__list_commandLineOption::
_addModel (const GGS_commandLineOption & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS__list_commandLineOption::
method_first (C_Compiler & _inLexique,
              GGS_commandLineOption & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_commandLineOption::constructor_new (_inLexique,
       _p->mOptionTypeName,
       _p->mOptionInternalName,
       _p->mOptionInvocationLetter,
       _p->mOptionInvocationString,
       _p->mOptionComment) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_commandLineOption::
method_last (C_Compiler & _inLexique,
             GGS_commandLineOption & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_commandLineOption::constructor_new (_inLexique,
       _p->mOptionTypeName,
       _p->mOptionInternalName,
       _p->mOptionInvocationLetter,
       _p->mOptionInvocationString,
       _p->mOptionComment) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_commandLineOption::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_commandLineOption & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_commandLineOption::constructor_new (_inLexique,
       _p->mOptionTypeName,
       _p->mOptionInternalName,
       _p->mOptionInvocationLetter,
       _p->mOptionInvocationString,
       _p->mOptionComment) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_commandLineOption::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_commandLineOption & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_commandLineOption::constructor_new (_inLexique,
       _p->mOptionTypeName,
       _p->mOptionInternalName,
       _p->mOptionInvocationLetter,
       _p->mOptionInvocationString,
       _p->mOptionComment) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS entity '@commandLineOption'                     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_commandLineOption GGS_commandLineOption::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_lchar & argument_2,
                 const GGS_lstring & argument_3,
                 const GGS_lstring & argument_4
                                COMMA_LOCATION_ARGS) {
  GGS_commandLineOption result ;
  macroMyNew (result.mPointer, cPtr_commandLineOption (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_commandLineOption::
reader_mOptionTypeName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_commandLineOption *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_commandLineOption *) mPointer)->mOptionTypeName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_commandLineOption::
reader_mOptionInternalName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_commandLineOption *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_commandLineOption *) mPointer)->mOptionInternalName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lchar  GGS_commandLineOption::
reader_mOptionInvocationLetter (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lchar   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_commandLineOption *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_commandLineOption *) mPointer)->mOptionInvocationLetter ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_commandLineOption::
reader_mOptionInvocationString (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_commandLineOption *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_commandLineOption *) mPointer)->mOptionInvocationString ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_commandLineOption::
reader_mOptionComment (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_commandLineOption *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_commandLineOption *) mPointer)->mOptionComment ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_commandLineOption::actualTypeName (void) const {
 return "commandLineOption" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_commandLineOption * GGS_commandLineOption::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_commandLineOption *) mPointer ;
  }
#endif

