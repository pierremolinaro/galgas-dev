//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'lexiqueCompilation.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 6th, 2009, at 17h14'16"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "lexiqueCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "lexiqueCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "lexiqueLL1grammar.h"

//--- START OF USER ZONE 2

//---------------------------------------------------------------------------*

//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalSendDefaultAction.checkLexicalDefaultAction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction> gDispatchTableForMethod__lexicalSendDefaultAction__checkLexicalDefaultAction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__lexicalSendDefaultAction__checkLexicalDefaultAction.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction
findCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalSendDefaultAction__checkLexicalDefaultAction.count ()) {
    result = gDispatchTableForMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (superClassPtr) ;
      gDispatchTableForMethod__lexicalSendDefaultAction__checkLexicalDefaultAction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalSendTerminalByDefault.checkLexicalDefaultAction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSendTerminalByDefault__checkLexicalDefaultAction (C_Compiler & inLexique,
                                const cPtr_lexicalSendTerminalByDefault * operand_2582,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2582 != NULL) {
    GGS_lexicalSentValueList  automatic_var_0 ;
    const GGS_terminalMap  temp_2690 = var_cas_ioLexiqueAnalysisContext.reader_mTerminalMap (inLexique COMMA_SOURCE_FILE_AT_LINE (46)) ;
    if (temp_2690.isBuilt ()) {
      temp_2690 (HERE)->method_searchKey (inLexique, operand_2582->mDefaultSentTerminal, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (46)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalErrorByDefault.checkLexicalDefaultAction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalErrorByDefault__checkLexicalDefaultAction (C_Compiler & inLexique,
                                const cPtr_lexicalErrorByDefault * operand_2876,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2876 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_2991 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_2876->mDefaultErrorMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (54)) ;
    if (NULL != operand_2991) {
      operand_2991->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalExpression.checkLexicalExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalExpression__checkLexicalExpression> gDispatchTableForMethod__lexicalExpression__checkLexicalExpression ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalExpression__checkLexicalExpression (typeCategoryMethod__lexicalExpression__checkLexicalExpression inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__lexicalExpression__checkLexicalExpression.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalExpression__checkLexicalExpression
findCategoryMethod__lexicalExpression__checkLexicalExpression (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalExpression__checkLexicalExpression result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalExpression__checkLexicalExpression.count ()) {
    result = gDispatchTableForMethod__lexicalExpression__checkLexicalExpression (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalExpression__checkLexicalExpression (superClassPtr) ;
      gDispatchTableForMethod__lexicalExpression__checkLexicalExpression.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@lexicalOrExpression.checkLexicalExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalOrExpression__checkLexicalExpression (C_Compiler & inLexique,
                                const cPtr_lexicalOrExpression * operand_3585,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3585 != NULL) {
    const GGS_lexicalExpression  temp_3679 = operand_3585->mLeftOperand ;
    if (temp_3679.isBuilt ()) {
      typeCategoryMethod__lexicalExpression__checkLexicalExpression method = findCategoryMethod__lexicalExpression__checkLexicalExpression (temp_3679.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_3679 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (72)) ;
      }
    }
    const GGS_lexicalExpression  temp_3750 = operand_3585->mRightOperand ;
    if (temp_3750.isBuilt ()) {
      typeCategoryMethod__lexicalExpression__checkLexicalExpression method = findCategoryMethod__lexicalExpression__checkLexicalExpression (temp_3750.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_3750 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (73)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalCharacterMatch.checkLexicalExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterMatch__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalCharacterMatch * operand_3936,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3936 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalCharacterSetMatch.checkLexicalExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterSetMatch__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalCharacterSetMatch * operand_4156,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4156 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@lexicalCharacterIntervalMatch.checkLexicalExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterIntervalMatch__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalCharacterIntervalMatch * operand_4381,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4381 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@lexicalStringMatch.checkLexicalExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStringMatch__checkLexicalExpression (C_Compiler & inLexique,
                                const cPtr_lexicalStringMatch * operand_4595,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4595 != NULL) {
    var_cas_ioLexiqueAnalysisContext.mUnicodeStringToGenerate.addAssign_operation (operand_4595->mString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (102))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalStringNotMatch.checkLexicalExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStringNotMatch__checkLexicalExpression (C_Compiler & inLexique,
                                const cPtr_lexicalStringNotMatch * operand_4880,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4880 != NULL) {
    var_cas_ioLexiqueAnalysisContext.mUnicodeStringToGenerate.addAssign_operation (operand_4880->mString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (110))) ;
    elementOf_GGS_lexicalMessageMap * operand_5063 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_4880->mErrorMessage, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (111)) ;
    if (NULL != operand_5063) {
      operand_5063->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalRoutineOrFunctionFormalInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument> gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument
findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument.count ()) {
    result = gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (superClassPtr) ;
      gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalAttributeInputArgument * operand_5760,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5760 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  temp_6005 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (133)) ;
    if (temp_6005.isBuilt ()) {
      temp_6005 (HERE)->method_searchKey (inLexique, operand_5760->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (133)) ;
    }
    if (((var_cas_attributeLexicalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_5760->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is ")).operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (140)))).operator_concat (GGS_string (" type, but lexical routine prototype requires "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (142)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (144)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCharacterInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCharacterInputArgument * operand_6559,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6559 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_6559->mCharacter.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal character has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (157)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (159)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalUnsignedInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalUnsignedInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalUnsignedInputArgument * operand_7163,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7163 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_7163->mUnsigned.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal character has @uint")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (172)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (174)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCurrentCharacterInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCurrentCharacterInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCurrentCharacterInputArgument * operand_7774,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7774 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_7774->mLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, current character value has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (187)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (189)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFunctionInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFunctionInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalFunctionInputArgument * operand_8381,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8381 != NULL) {
    GGS_lexicalFunctionFormalArgumentList  var_cas_lexicalFormalTypeList ;
    GGS_lexicalTypeEnum var_cas_returnedLexicalFormalType ;
    GGS_string var_cas_replacementFunctionName ;
    GGS_bool automatic_var_1 ;
    const GGS_lexicalFunctionMap  temp_8727 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (202)) ;
    if (temp_8727.isBuilt ()) {
      temp_8727 (HERE)->method_searchKey (inLexique, operand_8381->mFunctionName, var_cas_lexicalFormalTypeList, var_cas_returnedLexicalFormalType, var_cas_replacementFunctionName, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (202)) ;
    }
    if (((var_cas_replacementFunctionName).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
      operand_8381->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("obsolete lexical function, replaced by '")).operator_concat (var_cas_replacementFunctionName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (211)) ;
    }
    if (((var_cas_returnedLexicalFormalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_8381->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, the function returns an ")).operator_concat (var_cas_returnedLexicalFormalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (216)))).operator_concat (GGS_string (" value, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (218)))).operator_concat (GGS_string (" value")) COMMA_SOURCE_FILE_AT_LINE (220)) ;
    }
    if (((var_cas_lexicalFormalTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (222))).operator_isNotEqual (operand_8381->mFunctionActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (222)))).isBuiltAndTrue ()) {
      operand_8381->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical function names ")).operator_concat (operand_8381->mFunctionActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (224)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (224)))).operator_concat (GGS_string (" actual argument(s), but the prototype requires "))).operator_concat (var_cas_lexicalFormalTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (226)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (226)))).operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (227)) ;
    }
    {
      GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_9830 (var_cas_lexicalFormalTypeList, true) ;
      const GGS_lexicalFunctionFormalArgumentList::cElement * operand_9830 = NULL ;
      GGS_lexicalFunctionCallActualArgumentList::cEnumerator enumerator_9859 (operand_8381->mFunctionActualArgumentList, true) ;
      const GGS_lexicalFunctionCallActualArgumentList::cElement * operand_9859 = NULL ;
      while (((operand_9830 = enumerator_9830.nextObject ()))
          && ((operand_9859 = enumerator_9859.nextObject ()))) {
        macroValidPointer (operand_9830) ;
        macroValidPointer (operand_9859) ;
        const GGS_lexicalRoutineOrFunctionFormalInputArgument  temp_9928 = operand_9859->mLexicalActualInputArgument ;
        if (temp_9928.isBuilt ()) {
          typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument method = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (temp_9928.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_9928 (HERE), var_cas_ioLexiqueAnalysisContext, operand_9830->mLexicalType COMMA_SOURCE_FILE_AT_LINE (230)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalRoutineOrFunctionFormalInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument> gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument
findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument.count ()) {
    result = gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (superClassPtr) ;
      gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalAttributeInputArgument * operand_10630,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10630 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  temp_10875 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (254)) ;
    if (temp_10875.isBuilt ()) {
      temp_10875 (HERE)->method_searchKey (inLexique, operand_10630->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (254)) ;
    }
    if (((var_cas_attributeLexicalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_10630->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is ")).operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (261)))).operator_concat (GGS_string (" type, but lexical routine prototype requires "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (263)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (265)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCharacterInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCharacterInputArgument * operand_11428,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11428 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_11428->mCharacter.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal character has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (278)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (280)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalUnsignedInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalUnsignedInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalUnsignedInputArgument * operand_12031,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12031 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_12031->mUnsigned.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal unsigned value has @uint")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (293)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (295)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCurrentCharacterInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCurrentCharacterInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCurrentCharacterInputArgument * operand_12646,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12646 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_12646->mLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, current character value has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (308)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (310)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFunctionInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFunctionInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalFunctionInputArgument * operand_13252,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13252 != NULL) {
    GGS_lexicalFunctionFormalArgumentList  var_cas_lexicalFormalTypeList ;
    GGS_lexicalTypeEnum var_cas_returnedLexicalFormalType ;
    GGS_string var_cas_replacementFunctionName ;
    GGS_bool automatic_var_2 ;
    const GGS_lexicalFunctionMap  temp_13598 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (323)) ;
    if (temp_13598.isBuilt ()) {
      temp_13598 (HERE)->method_searchKey (inLexique, operand_13252->mFunctionName, var_cas_lexicalFormalTypeList, var_cas_returnedLexicalFormalType, var_cas_replacementFunctionName, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (323)) ;
    }
    if (((var_cas_replacementFunctionName).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
      operand_13252->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("obsolete lexical function, replaced by '")).operator_concat (var_cas_replacementFunctionName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (332)) ;
    }
    if (((var_cas_returnedLexicalFormalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_13252->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, the function returns an ")).operator_concat (var_cas_returnedLexicalFormalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (337)))).operator_concat (GGS_string (" value, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (339)))).operator_concat (GGS_string (" value")) COMMA_SOURCE_FILE_AT_LINE (341)) ;
    }
    if (((var_cas_lexicalFormalTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (343))).operator_isNotEqual (operand_13252->mFunctionActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (343)))).isBuiltAndTrue ()) {
      operand_13252->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical function names ")).operator_concat (operand_13252->mFunctionActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (345)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (345)))).operator_concat (GGS_string (" actual argument(s), but the prototype requires "))).operator_concat (var_cas_lexicalFormalTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (347)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (347)))).operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (348)) ;
    }
    {
      GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_14701 (var_cas_lexicalFormalTypeList, true) ;
      const GGS_lexicalFunctionFormalArgumentList::cElement * operand_14701 = NULL ;
      GGS_lexicalFunctionCallActualArgumentList::cEnumerator enumerator_14730 (operand_13252->mFunctionActualArgumentList, true) ;
      const GGS_lexicalFunctionCallActualArgumentList::cElement * operand_14730 = NULL ;
      while (((operand_14701 = enumerator_14701.nextObject ()))
          && ((operand_14730 = enumerator_14730.nextObject ()))) {
        macroValidPointer (operand_14701) ;
        macroValidPointer (operand_14730) ;
        const GGS_lexicalRoutineOrFunctionFormalInputArgument  temp_14799 = operand_14730->mLexicalActualInputArgument ;
        if (temp_14799.isBuilt ()) {
          typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument method = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (temp_14799.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_14799 (HERE), var_cas_ioLexiqueAnalysisContext, operand_14701->mLexicalType COMMA_SOURCE_FILE_AT_LINE (351)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@abstractLexicalRoutineActualArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument> gDispatchTableForMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument
findCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument.count ()) {
    result = gDispatchTableForMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (superClassPtr) ;
      gDispatchTableForMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputOutputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputOutputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalAttributeInputOutputArgument * operand_15566,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalArgumentMode  var_cas_inLexicalRoutineFormalArgumentMode,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15566 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  temp_15870 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (377)) ;
    if (temp_15870.isBuilt ()) {
      temp_15870 (HERE)->method_searchKey (inLexique, operand_15566->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (377)) ;
    }
    if (((var_cas_attributeLexicalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_15566->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is ")).operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (384)))).operator_concat (GGS_string (" type, but lexical routine prototype requires "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (386)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (388)) ;
    }
    if (((var_cas_inLexicalRoutineFormalArgumentMode).operator_isNotEqual (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
      operand_15566->mActualPassingModeLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the output mode (!) is required here, not an output/input mode") COMMA_SOURCE_FILE_AT_LINE (392)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFormalInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFormalInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalFormalInputArgument * operand_16653,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalArgumentMode  var_cas_inLexicalRoutineFormalArgumentMode,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16653 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalRoutineOrFunctionFormalInputArgument  temp_16969 = operand_16653->mRoutineOrFunctionFormalInputArgument ;
    if (temp_16969.isBuilt ()) {
      typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument method = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (temp_16969.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_16969 (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_inLexicalRoutineFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (404)) ;
      }
    }
    if (((var_cas_inLexicalRoutineFormalArgumentMode).operator_isNotEqual (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
      operand_16653->mActualPassingModeLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the output/input mode (!\?) is required here, not an input mode") COMMA_SOURCE_FILE_AT_LINE (411)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalInstruction.checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalInstruction__checkLexicalInstruction> gDispatchTableForMethod__lexicalInstruction__checkLexicalInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalInstruction__checkLexicalInstruction (typeCategoryMethod__lexicalInstruction__checkLexicalInstruction inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__lexicalInstruction__checkLexicalInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalInstruction__checkLexicalInstruction
findCategoryMethod__lexicalInstruction__checkLexicalInstruction (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalInstruction__checkLexicalInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalInstruction__checkLexicalInstruction.count ()) {
    result = gDispatchTableForMethod__lexicalInstruction__checkLexicalInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (superClassPtr) ;
      gDispatchTableForMethod__lexicalInstruction__checkLexicalInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalStructuredSendInstruction.checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStructuredSendInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalStructuredSendInstruction * operand_17833,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & /* var_cas_ioTagMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17833 != NULL) {
    {
      GGS_lexicalSendSearchList::cEnumerator enumerator_17956 (operand_17833->mLexicalSendSearchList, true) ;
      const GGS_lexicalSendSearchList::cElement * operand_17956 = NULL ;
      while (((operand_17956 = enumerator_17956.nextObject ()))) {
        macroValidPointer (operand_17956) ;
        elementOf_GGS_lexicalExplicitTokenListMapMap * operand_18016 = (elementOf_GGS_lexicalExplicitTokenListMapMap *) var_cas_ioLexiqueAnalysisContext.mLexicalTokenListMap.searchForWithInstruction (inLexique, operand_17956->mSearchListName, GGS_lexicalExplicitTokenListMapMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (430)) ;
        if (NULL != operand_18016) {
          operand_18016->mInfo.mShouldBeGenerated = GGS_bool (true) ;
        }
        GGS_lexicalTypeEnum automatic_var_3 ;
        const GGS_lexicalAttributeMap  temp_18159 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (433)) ;
        if (temp_18159.isBuilt ()) {
          temp_18159 (HERE)->method_searchKey (inLexique, operand_17956->mAttributeName, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (433)) ;
        }
      }
    }
    const GGS_lexicalSendDefaultAction  temp_18252 = operand_17833->mLexicalSendDefaultAction ;
    if (temp_18252.isBuilt ()) {
      typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction method = findCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (temp_18252.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_18252 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (435)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@lexicalSimpleSendInstruction.checkLexicalInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSimpleSendInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalSimpleSendInstruction * operand_18445,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & /* var_cas_ioTagMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18445 != NULL) {
    GGS_lexicalSentValueList  automatic_var_4 ;
    const GGS_terminalMap  temp_18588 = var_cas_ioLexiqueAnalysisContext.reader_mTerminalMap (inLexique COMMA_SOURCE_FILE_AT_LINE (444)) ;
    if (temp_18588.isBuilt ()) {
      temp_18588 (HERE)->method_searchKey (inLexique, operand_18445->mSentTerminal, automatic_var_4 COMMA_SOURCE_FILE_AT_LINE (444)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalRepeatInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRepeatInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalRepeatInstruction * operand_18768,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & var_cas_ioTagMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18768 != NULL) {
    {
      GGS_lexicalWhileBranchList::cEnumerator enumerator_18885 (operand_18768->mLexicalWhileBranchList, true) ;
      const GGS_lexicalWhileBranchList::cElement * operand_18885 = NULL ;
      while (((operand_18885 = enumerator_18885.nextObject ()))) {
        macroValidPointer (operand_18885) ;
        const GGS_lexicalExpression  temp_18933 = operand_18885->mWhileExpression ;
        if (temp_18933.isBuilt ()) {
          typeCategoryMethod__lexicalExpression__checkLexicalExpression method = findCategoryMethod__lexicalExpression__checkLexicalExpression (temp_18933.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_18933 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (454)) ;
          }
        }
        GGS_lexicalTagMap  var_cas_tagMap ;
        var_cas_tagMap = GGS_lexicalTagMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTagMap COMMA_HERE) ;
        {
          GGS_lexicalInstructionList::cEnumerator enumerator_19058 (operand_18885->mWhileInstructionList, true) ;
          const GGS_lexicalInstructionList::cElement * operand_19058 = NULL ;
          while (((operand_19058 = enumerator_19058.nextObject ()))) {
            macroValidPointer (operand_19058) ;
            const GGS_lexicalInstruction  temp_19105 = operand_19058->mInstruction ;
            if (temp_19105.isBuilt ()) {
              typeCategoryMethod__lexicalInstruction__checkLexicalInstruction method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (temp_19105.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, temp_19105 (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_tagMap COMMA_SOURCE_FILE_AT_LINE (457)) ;
              }
            }
          }
        }
      }
    }
    GGS_lexicalTagMap  var_cas_tagMap ;
    var_cas_tagMap = GGS_lexicalTagMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTagMap COMMA_HERE) ;
    {
      GGS_lexicalInstructionList::cEnumerator enumerator_19272 (operand_18768->mRepeatedInstructionList, true) ;
      const GGS_lexicalInstructionList::cElement * operand_19272 = NULL ;
      while (((operand_19272 = enumerator_19272.nextObject ()))) {
        macroValidPointer (operand_19272) ;
        const GGS_lexicalInstruction  temp_19317 = operand_19272->mInstruction ;
        if (temp_19317.isBuilt ()) {
          typeCategoryMethod__lexicalInstruction__checkLexicalInstruction method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (temp_19317.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_19317 (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_tagMap COMMA_SOURCE_FILE_AT_LINE (462)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalSelectInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSelectInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalSelectInstruction * operand_19531,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & var_cas_ioTagMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19531 != NULL) {
    {
      GGS_lexicalSelectBranchList::cEnumerator enumerator_19650 (operand_19531->mLexicalSelectBranchList, true) ;
      const GGS_lexicalSelectBranchList::cElement * operand_19650 = NULL ;
      while (((operand_19650 = enumerator_19650.nextObject ()))) {
        macroValidPointer (operand_19650) ;
        const GGS_lexicalExpression  temp_19699 = operand_19650->mSelectExpression ;
        if (temp_19699.isBuilt ()) {
          typeCategoryMethod__lexicalExpression__checkLexicalExpression method = findCategoryMethod__lexicalExpression__checkLexicalExpression (temp_19699.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_19699 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (473)) ;
          }
        }
        GGS_lexicalTagMap  var_cas_tagMap ;
        var_cas_tagMap = GGS_lexicalTagMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTagMap COMMA_HERE) ;
        {
          GGS_lexicalInstructionList::cEnumerator enumerator_19825 (operand_19650->mSelectInstructionList, true) ;
          const GGS_lexicalInstructionList::cElement * operand_19825 = NULL ;
          while (((operand_19825 = enumerator_19825.nextObject ()))) {
            macroValidPointer (operand_19825) ;
            const GGS_lexicalInstruction  temp_19872 = operand_19825->mInstruction ;
            if (temp_19872.isBuilt ()) {
              typeCategoryMethod__lexicalInstruction__checkLexicalInstruction method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (temp_19872.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, temp_19872 (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_tagMap COMMA_SOURCE_FILE_AT_LINE (476)) ;
              }
            }
          }
        }
      }
    }
    GGS_lexicalTagMap  var_cas_tagMap ;
    var_cas_tagMap = GGS_lexicalTagMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTagMap COMMA_HERE) ;
    {
      GGS_lexicalInstructionList::cEnumerator enumerator_20038 (operand_19531->mDefaultInstructionList, true) ;
      const GGS_lexicalInstructionList::cElement * operand_20038 = NULL ;
      while (((operand_20038 = enumerator_20038.nextObject ()))) {
        macroValidPointer (operand_20038) ;
        const GGS_lexicalInstruction  temp_20083 = operand_20038->mInstruction ;
        if (temp_20083.isBuilt ()) {
          typeCategoryMethod__lexicalInstruction__checkLexicalInstruction method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (temp_20083.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_20083 (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_tagMap COMMA_SOURCE_FILE_AT_LINE (481)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalRoutineInstruction.checkLexicalInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRoutineInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalRoutineInstruction * operand_20298,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & /* var_cas_ioTagMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20298 != NULL) {
    GGS_lexicalRoutineFormalArgumentList  var_cas_lexicalRoutineFormalArgumentList ;
    GGS_stringlist  var_cas_routineErrorMessageList ;
    GGS_string var_cas_replacementRoutineName ;
    GGS_bool automatic_var_5 ;
    const GGS_lexicalRoutineMap  temp_20600 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalRoutineMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (494)) ;
    if (temp_20600.isBuilt ()) {
      temp_20600 (HERE)->method_searchKey (inLexique, operand_20298->mRoutineName, var_cas_lexicalRoutineFormalArgumentList, var_cas_routineErrorMessageList, var_cas_replacementRoutineName, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (494)) ;
    }
    if (((var_cas_replacementRoutineName).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
      operand_20298->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("obsolete lexical routine, replaced by '")).operator_concat (var_cas_replacementRoutineName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (503)) ;
    }
    if (((var_cas_lexicalRoutineFormalArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (506))).operator_isNotEqual (operand_20298->mActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (506)))).isBuiltAndTrue ()) {
      operand_20298->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical routine call names ")).operator_concat (operand_20298->mActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (508)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (508)))).operator_concat (GGS_string (" actual argument(s), but the lexical routine prototype requires "))).operator_concat (var_cas_lexicalRoutineFormalArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (510)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (510)))).operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (511)) ;
    }
    {
      GGS_lexicalRoutineFormalArgumentList::cEnumerator enumerator_21383 (var_cas_lexicalRoutineFormalArgumentList, true) ;
      const GGS_lexicalRoutineFormalArgumentList::cElement * operand_21383 = NULL ;
      GGS_lexicalRoutineCallActualArgumentList::cEnumerator enumerator_21404 (operand_20298->mActualArgumentList, true) ;
      const GGS_lexicalRoutineCallActualArgumentList::cElement * operand_21404 = NULL ;
      while (((operand_21383 = enumerator_21383.nextObject ()))
          && ((operand_21404 = enumerator_21404.nextObject ()))) {
        macroValidPointer (operand_21383) ;
        macroValidPointer (operand_21404) ;
        const GGS_abstractLexicalRoutineActualArgument  temp_21474 = operand_21404->mLexicalRoutineActualArgument ;
        if (temp_21474.isBuilt ()) {
          typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument method = findCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (temp_21474.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_21474 (HERE), var_cas_ioLexiqueAnalysisContext, operand_21383->mLexicalFormalArgumentMode, operand_21383->mLexicalFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (514)) ;
          }
        }
      }
    }
    if (((var_cas_routineErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (521))).operator_isNotEqual (operand_20298->mErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (521)))).isBuiltAndTrue ()) {
      operand_20298->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical routine call names ")).operator_concat (operand_20298->mErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (523)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (523)))).operator_concat (GGS_string (" error message(s), but the lexical routine prototype requires "))).operator_concat (var_cas_routineErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (525)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (525)))).operator_concat (GGS_string (" error message(s)")) COMMA_SOURCE_FILE_AT_LINE (526)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_22033 (operand_20298->mErrorMessageList, true) ;
      const GGS_lstringlist::cElement * operand_22033 = NULL ;
      while (((operand_22033 = enumerator_22033.nextObject ()))) {
        macroValidPointer (operand_22033) ;
        elementOf_GGS_lexicalMessageMap * operand_22098 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_22033->mValue, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (529)) ;
        if (NULL != operand_22098) {
          operand_22098->mInfo.mMessageIsUsed = GGS_bool (true) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalLogInstruction.checkLexicalInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalLogInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalLogInstruction * operand_22341,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTagMap  & /* var_cas_ioTagMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22341 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalRewindInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRewindInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalRewindInstruction * operand_22597,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & var_cas_ioTagMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22597 != NULL) {
    const GGS_lexicalTagMap  temp_22702 = var_cas_ioTagMap ;
    if (temp_22702.isBuilt ()) {
      temp_22702 (HERE)->method_searchKey (inLexique, operand_22597->mLexicalTagName COMMA_SOURCE_FILE_AT_LINE (549)) ;
    }
    GGS_lexicalSentValueList  automatic_var_6 ;
    const GGS_terminalMap  temp_22775 = var_cas_ioLexiqueAnalysisContext.reader_mTerminalMap (inLexique COMMA_SOURCE_FILE_AT_LINE (550)) ;
    if (temp_22775.isBuilt ()) {
      temp_22775 (HERE)->method_searchKey (inLexique, operand_22597->mTerminalName, automatic_var_6 COMMA_SOURCE_FILE_AT_LINE (550)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalDropInstruction.checkLexicalInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalDropInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalDropInstruction * operand_22953,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & /* var_cas_ioTagMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22953 != NULL) {
    GGS_lexicalSentValueList  automatic_var_7 ;
    const GGS_terminalMap  temp_23097 = var_cas_ioLexiqueAnalysisContext.reader_mTerminalMap (inLexique COMMA_SOURCE_FILE_AT_LINE (559)) ;
    if (temp_23097.isBuilt ()) {
      temp_23097 (HERE)->method_searchKey (inLexique, operand_22953->mTerminalName, automatic_var_7 COMMA_SOURCE_FILE_AT_LINE (559)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalTagInstruction.checkLexicalInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalTagInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalTagInstruction * operand_23274,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTagMap  & var_cas_ioTagMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23274 != NULL) {
    var_cas_ioTagMap.modifier_insertKey (inLexique, operand_23274->mLexicalTagName COMMA_SOURCE_FILE_AT_LINE (568)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalErrorInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalErrorInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalErrorInstruction * operand_23566,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & /* var_cas_ioTagMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23566 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_23709 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_23566->mErrorMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (577)) ;
    if (NULL != operand_23709) {
      operand_23709->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalWarningInstruction.checkLexicalInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalWarningInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalWarningInstruction * operand_23943,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & /* var_cas_ioTagMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23943 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_24086 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_23943->mWarningMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (588)) ;
    if (NULL != operand_24086) {
      operand_24086->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@abstractLexicalRule.checkLexicalRule'  *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__abstractLexicalRule__checkLexicalRule> gDispatchTableForMethod__abstractLexicalRule__checkLexicalRule ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__abstractLexicalRule__checkLexicalRule (typeCategoryMethod__abstractLexicalRule__checkLexicalRule inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__abstractLexicalRule__checkLexicalRule.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__abstractLexicalRule__checkLexicalRule
findCategoryMethod__abstractLexicalRule__checkLexicalRule (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__abstractLexicalRule__checkLexicalRule result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__abstractLexicalRule__checkLexicalRule.count ()) {
    result = gDispatchTableForMethod__abstractLexicalRule__checkLexicalRule (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__abstractLexicalRule__checkLexicalRule (superClassPtr) ;
      gDispatchTableForMethod__abstractLexicalRule__checkLexicalRule.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@lexicalImplicitRule.checkLexicalRule'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalImplicitRule__checkLexicalRule (C_Compiler & inLexique,
                                const cPtr_lexicalImplicitRule * operand_24654,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24654 != NULL) {
    GGS_lexicalExplicitTokenListMap  automatic_var_8 ;
    GGS_tokenSortedlist  automatic_var_9 ;
    GGS_bool automatic_var_10 ;
    const GGS_lexicalExplicitTokenListMapMap  temp_24770 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalTokenListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (606)) ;
    if (temp_24770.isBuilt ()) {
      temp_24770 (HERE)->method_searchKey (inLexique, operand_24654->mListName, automatic_var_8, automatic_var_9, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (606)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@lexicalExplicitRule.checkLexicalRule'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalExplicitRule__checkLexicalRule (C_Compiler & inLexique,
                                const cPtr_lexicalExplicitRule * operand_24940,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24940 != NULL) {
    const GGS_lexicalExpression  temp_25044 = operand_24940->mLexicalRuleExpression ;
    if (temp_25044.isBuilt ()) {
      typeCategoryMethod__lexicalExpression__checkLexicalExpression method = findCategoryMethod__lexicalExpression__checkLexicalExpression (temp_25044.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_25044 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (614)) ;
      }
    }
    GGS_lexicalTagMap  var_cas_tagMap ;
    var_cas_tagMap = GGS_lexicalTagMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
    {
      GGS_lexicalInstructionList::cEnumerator enumerator_25138 (operand_24940->mInstructionList, true) ;
      const GGS_lexicalInstructionList::cElement * operand_25138 = NULL ;
      while (((operand_25138 = enumerator_25138.nextObject ()))) {
        macroValidPointer (operand_25138) ;
        const GGS_lexicalInstruction  temp_25183 = operand_25138->mInstruction ;
        if (temp_25183.isBuilt ()) {
          typeCategoryMethod__lexicalInstruction__checkLexicalInstruction method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (temp_25183.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_25183 (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_tagMap COMMA_SOURCE_FILE_AT_LINE (617)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of wrapper 'lexiqueGenerationTemplates'           *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_lexiqueGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_lexiqueGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_lexiqueGenerationTemplates = {
  "",
  0,
  gWrapperAllFiles_lexiqueGenerationTemplates_0,
  0,
  gWrapperAllDirectories_lexiqueGenerationTemplates_0
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//    'headerZone2' template of 'lexiqueGenerationTemplates' filewrapper     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_headerZone2 (C_Compiler & inLexique,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT,
                                const GGS_lexiqueComponentRoot & var_cas_LEXIQUE_COMPONENT_ROOT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt ()
    && var_cas_LEXIQUE_COMPONENT_ROOT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "#ifndef " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "_0_DEFINED\n"
      "#define " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "_0_DEFINED\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"galgas/GGS_lstring.h\"\n"
      "#include \"galgas/GGS_luint.h\"\n"
      "#include \"galgas/GGS_lsint.h\"\n"
      "#include \"galgas/GGS_luint64.h\"\n"
      "#include \"galgas/GGS_lsint64.h\"\n"
      "#include \"galgas/GGS_lchar.h\"\n"
      "#include \"galgas/GGS_ldouble.h\"\n"
      "#include \"galgas/GGS_lbool.h\"\n"
      "#include \"galgas/C_Lexique.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                    E X T E R N    R O U T I N E S                         *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalRoutineMap::cEnumerator enumerator_900 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalRoutineMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (23)), true) ;
    const GGS_lexicalRoutineMap::cElement * operand_900 = NULL ;
    while (((operand_900 = enumerator_900.nextObject ()))) {
      macroValidPointer (operand_900) ;
      if (operand_900->mInfo.mIsExtern.boolValue ()) {
        result << "\n"
          "void scanner_routine_" ;
        result << operand_900->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (25)) ;
        result << " (C_Lexique & inLexique" ;
        GGS_lexicalRoutineFormalArgumentList::cEnumerator enumerator_1044 (operand_900->mInfo.mLexicalRoutineFormalArgumentList, true) ;
        const GGS_lexicalRoutineFormalArgumentList::cElement * operand_1044 = NULL ;
        while (((operand_1044 = enumerator_1044.nextObject ()))) {
          macroValidPointer (operand_1044) ;
          result << ",\n"
            "                " ;
          result << operand_1044->mLexicalFormalArgumentMode.reader_cppConstInFormalArgument (inLexique COMMA_SOURCE_FILE_AT_LINE (27)) ;
          result << operand_1044->mLexicalFormalArgumentType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (28)) ;
          result << operand_1044->mLexicalFormalArgumentMode.reader_cppReferenceInFormalArgument (inLexique COMMA_SOURCE_FILE_AT_LINE (29)) ;
          result << " " ;
          result << operand_1044->mArgumentNameForComment ;
        }
        GGS_stringlist::cEnumerator enumerator_1399 (operand_900->mInfo.mErrorMessageList, true) ;
        const GGS_stringlist::cElement * operand_1399 = NULL ;
        while (((operand_1399 = enumerator_1399.nextObject ()))) {
          macroValidPointer (operand_1399) ;
          result << ",\n"
            "                const char * " ;
          result << operand_1399->mValue ;
        }
        result << ") ;\n" ;
      }else {
      }
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                    E X T E R N    F U N C T I O N S                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalFunctionMap::cEnumerator enumerator_1964 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (45)), true) ;
    const GGS_lexicalFunctionMap::cElement * operand_1964 = NULL ;
    while (((operand_1964 = enumerator_1964.nextObject ()))) {
      macroValidPointer (operand_1964) ;
      if (operand_1964->mInfo.mIsExtern.boolValue ()) {
        result << "\n" ;
        result << operand_1964->mInfo.mReturnedLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
        result << " scanner_function_" ;
        result << operand_1964->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
        result << " (C_Lexique & inLexique" ;
        GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_2126 (operand_1964->mInfo.mLexicalTypeList, true) ;
        const GGS_lexicalFunctionFormalArgumentList::cElement * operand_2126 = NULL ;
        while (((operand_2126 = enumerator_2126.nextObject ()))) {
          macroValidPointer (operand_2126) ;
          result << ",\n"
            "                const " ;
          result << operand_2126->mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (49)) ;
          result << " " ;
          result << operand_2126->mArgumentNameForComment ;
        }
        result << ") ;\n" ;
      }else {
      }
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                       T O K E N    C L A S S                              *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " : public cToken {\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_2789 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (63)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_2789 = NULL ;
    while (((operand_2789 = enumerator_2789.nextObject ()))) {
      macroValidPointer (operand_2789) ;
      result << "  public : " ;
      result << operand_2789->mInfo.mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (64)) ;
      result << " mLexicalAttribute_" ;
      result << operand_2789->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (64)) ;
      result << " ;\n" ;
    }
    result << "\n"
      "  public : cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (void) ;\n"
      "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                     S C A N N E R    C L A S S                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " : public C_Lexique {\n"
      "//--- Constructors\n"
      "  public : " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                       const C_String & inDependencyFileExtension,\n"
      "                       const C_String & inDependencyFilePath,\n"
      "                       C_galgas_io * inParametersPtr,\n"
      "                       const C_String & inSourceFileName\n"
      "                       COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "  public : " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                       C_galgas_io * inParametersPtr,\n"
      "                       const C_String & inSourceString,\n"
      "                       const C_String & inStringForError\n"
      "                       COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "//--- Declaring a protected virtual destructor enables the compiler to raise\n"
      "//    an error if a direct delete is performed; only the static method\n"
      "//    C_GGS_Object::detachPointer may invoke delete.\n"
      "  #ifndef DO_NOT_GENERATE_CHECKINGS\n"
      "    protected : virtual ~" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (void) {}\n"
      "  #endif\n" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (97)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (97))).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << "\n"
        "//--- Scanner mode for template scanner\n"
        "  private : PMSInt32 mMatchedTemplateDelimiterIndex ;\n" ;
    }else {
    }
    result << "\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    'headerZone3' template of 'lexiqueGenerationTemplates' filewrapper     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_headerZone3 (C_Compiler & inLexique,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_lexicalListDeclarationList & var_cas_DELIMITOR_LIST_LIST,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_DELIMITOR_LIST_LIST.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//--- Terminal symbols enumeration\n"
      "  public : enum {" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "_1_" ;
    GGS_terminalList::cEnumerator enumerator_132 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (4)), true) ;
    const GGS_terminalList::cElement * operand_132 = NULL ;
    while (((operand_132 = enumerator_132.nextObject ()))) {
      macroValidPointer (operand_132) ;
      result << ",\n"
        "  " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_" ;
      result << operand_132->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (5)) ;
    }
    result << "} ;\n" ;
    GGS_lexicalListDeclarationList::cEnumerator enumerator_279 (var_cas_DELIMITOR_LIST_LIST, true) ;
    const GGS_lexicalListDeclarationList::cElement * operand_279 = NULL ;
    while (((operand_279 = enumerator_279.nextObject ()))) {
      macroValidPointer (operand_279) ;
      result << "\n"
        "//--- Key words table '" ;
      result << operand_279->mName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (10)) ;
      result << "'\n"
        "  public : static PMSInt16 search_into_" ;
      result << operand_279->mName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (11)) ;
      result << " (const C_String & inSearchedString) ;\n" ;
    }
    result << "  \n"
      "\n"
      "//--- Assign from attribute\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_546 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (17)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_546 = NULL ;
    while (((operand_546 = enumerator_546.nextObject ()))) {
      macroValidPointer (operand_546) ;
      result << "  public : void assignFromAttribute_" ;
      result << operand_546->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (18)) ;
      result << " (" ;
      result << operand_546->mInfo.mLexicalType.reader_exportedCPPTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (18)) ;
      result << " & outValue) const ;\n" ;
    }
    result << "\n"
      "\n"
      "//--- Attribute access\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_770 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (24)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_770 = NULL ;
    while (((operand_770 = enumerator_770.nextObject ()))) {
      macroValidPointer (operand_770) ;
      result << "  public : " ;
      result << operand_770->mInfo.mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (25)) ;
      result << " attributeValue_" ;
      result << operand_770->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (25)) ;
      result << " (void) const ;\n" ;
    }
    result << "\n"
      "\n"
      "//--- Parse lexical token\n"
      "  protected : virtual bool parseLexicalToken (void) ;\n"
      "\n"
      "//--- Append terminal message\n"
      "  protected : virtual void appendTerminalMessageToSyntaxErrorMessage (const PMSInt16 numeroTerminal,\n"
      "                                                              C_String & messageErreur) ;\n"
      "\n"
      "//--- Get terminal count\n"
      "  public : virtual PMSInt16 terminalVocabularyCount (void) const { return " ;
    result << var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (37)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (37)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (37)) ;
    result << " ; }\n"
      "\n"
      "//--- Get Token String\n"
      "  public : virtual C_String getCurrentTokenString (const cToken * inTokenPtr) const ;\n"
      "\n"
      "//--- Enter Token\n"
      "  protected : void enterToken (const cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " & inToken) ;\n"
      "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#endif\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'implementationZone2' template of 'lexiqueGenerationTemplates' filewrapper *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_implementationZone2 (C_Compiler & inLexique,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_lexicalAttributeMap & var_cas_LEXICAL_ATTRIBUTE_MAP,
                                const GGS_lexicalMessageMap & var_cas_LEXICAL_MESSAGE_MAP,
                                const GGS_terminalList & var_cas_TERMINAL_LIST,
                                const GGS_lexicalExplicitTokenListMapMap & var_cas_LEXICAL_TOKEN_LIST_MAP,
                                const GGS_stringset & var_cas_STRINGS_IN_EXPLICIT_RULES,
                                const GGS_lexicalRuleList & var_cas_LEXICAL_RULE_LIST,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT,
                                const GGS_lexiqueComponentRoot & var_cas_LEXIQUE_COMPONENT_ROOT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_LEXICAL_ATTRIBUTE_MAP.isBuilt ()
    && var_cas_LEXICAL_MESSAGE_MAP.isBuilt ()
    && var_cas_TERMINAL_LIST.isBuilt ()
    && var_cas_LEXICAL_TOKEN_LIST_MAP.isBuilt ()
    && var_cas_STRINGS_IN_EXPLICIT_RULES.isBuilt ()
    && var_cas_LEXICAL_RULE_LIST.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt ()
    && var_cas_LEXIQUE_COMPONENT_ROOT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"version_libpm.h\"\n"
      "#if LIBPM_VERSION != THE_LIBPM_VERSION\n"
      "  #error \"This file has been compiled with a version of GALGAS different than the version of libpm\"\n"
      "#endif\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include <ctype.h>\n"
      "#include <string.h>\n"
      "\n"
      "#include \"utilities/MF_MemoryControl.h\"\n"
      "#include \"" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << ".h\"\n"
      "\n"
      "#include \"strings/unicode_character_cpp.h\"\n"
      "#include \"galgas/scanner_actions.h\"\n"
      "#ifndef DO_NOT_GENERATE_CHECKINGS\n"
      "  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFileName ().cString (HERE), lineNumber ()\n"
      "  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE\n"
      "#else\n"
      "  #define LINE_AND_SOURCE_FILE\n"
      "  #define COMMA_LINE_AND_SOURCE_FILE\n"
      "#endif\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                               Constructors                                *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (void)" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_1305 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_1305 = NULL ;
    if (enumerator_1305.hasCurrentObject ()) {
      result << " :\n" ;
      while (((operand_1305 = enumerator_1305.nextObject ()))) {
        macroValidPointer (operand_1305) ;
        result << "mLexicalAttribute_" ;
        result << operand_1305->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (36)) ;
        result << " ()" ;
        if (enumerator_1305.hasNextObject ()) {
          result << ",\n" ;
        }
      }
    }
    result << " {\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::\n" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                const C_String & inDependencyFileExtension,\n"
      "                const C_String & inDependencyFilePath,\n"
      "                C_galgas_io * inParametersPtr,\n"
      "                const C_String & inSourceFileName\n"
      "                COMMA_LOCATION_ARGS) :\n"
      "C_Lexique (inCallerCompiler, inDependencyFileExtension, inDependencyFilePath, inParametersPtr, inSourceFileName COMMA_THERE)" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (52)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (52))).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << ",\n"
        "mMatchedTemplateDelimiterIndex (-1)" ;
    }else {
    }
    result << " {\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::\n" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                C_galgas_io * inParametersPtr,\n"
      "                const C_String & inSourceString,\n"
      "                const C_String & inStringForError\n"
      "                COMMA_LOCATION_ARGS) :\n"
      "C_Lexique (inCallerCompiler, inParametersPtr, inSourceString, inStringForError COMMA_THERE)" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (67)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (67))).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << ",\n"
        "mMatchedTemplateDelimiterIndex (-1)" ;
    }else {
    }
    result << " {\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                        Lexical error message list                         *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalMessageMap::cEnumerator enumerator_3055 (var_cas_LEXICAL_MESSAGE_MAP, true) ;
    const GGS_lexicalMessageMap::cElement * operand_3055 = NULL ;
    while (((operand_3055 = enumerator_3055.nextObject ()))) {
      macroValidPointer (operand_3055) ;
      result << "\n"
        "static const utf32 gLexicalMessage_" ;
      result << operand_3055->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (80)) ;
      result << " [] = " ;
      result << operand_3055->mInfo.mLexicalMessage.ggs_string ().reader_utf32Representation (inLexique COMMA_SOURCE_FILE_AT_LINE (80)) ;
      result << " ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//          Syntax error messages, for every terminal symbol                 *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_terminalList::cEnumerator enumerator_3606 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_3606 = NULL ;
    while (((operand_3606 = enumerator_3606.nextObject ()))) {
      macroValidPointer (operand_3606) ;
      result << "\n"
        "//--- Syntax error message for terminal '$" ;
      result << operand_3606->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (90)) ;
      result << "$' :\n"
        "static const utf32 gSyntaxErrorMessage_" ;
      result << operand_3606->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (91)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (91)) ;
      result << " [] = " ;
      result << operand_3606->mSyntaxErrorMessage.reader_utf32Representation (inLexique COMMA_SOURCE_FILE_AT_LINE (91)) ;
      result << " ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                appendTerminalMessageToSyntaxErrorMessage                  *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "void " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::\n"
      "appendTerminalMessageToSyntaxErrorMessage (const PMSInt16 inTerminalIndex,\n"
      "                                           C_String & outSyntaxErrorMessage) {\n"
      "  static const utf32 * syntaxErrorMessageArray [" ;
    result << var_cas_TERMINAL_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (103)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (103)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (103)) ;
    result << "] = {kEndOfSourceLexicalErrorMessage" ;
    GGS_terminalList::cEnumerator enumerator_4588 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_4588 = NULL ;
    while (((operand_4588 = enumerator_4588.nextObject ()))) {
      macroValidPointer (operand_4588) ;
      result << ",\n"
        "    gSyntaxErrorMessage_" ;
      result << operand_4588->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (105)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (105)) ;
    }
    result << "} ;\n"
      "  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                      U N I C O D E    S T R I N G S                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_stringset::cEnumerator enumerator_5201 (var_cas_STRINGS_IN_EXPLICIT_RULES, true) ;
    while (enumerator_5201.hasCurrentObject ()) {
      result << "\n"
        "//--- Unicode string for '$" ;
      result << enumerator_5201._key (HERE).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (118)) ;
      result << "$'\n"
        "static const utf32 kUnicodeString_" ;
      result << enumerator_5201._key (HERE).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (119)) ;
      result << " [] = " ;
      result << enumerator_5201._key (HERE).reader_utf32Representation (inLexique COMMA_SOURCE_FILE_AT_LINE (119)) ;
      result << " ;\n" ;
      enumerator_5201.next () ;
    }
    result << "\n" ;
    GGS_lexicalExplicitTokenListMapMap::cEnumerator enumerator_5454 (var_cas_LEXICAL_TOKEN_LIST_MAP, true) ;
    const GGS_lexicalExplicitTokenListMapMap::cElement * operand_5454 = NULL ;
    while (((operand_5454 = enumerator_5454.nextObject ()))) {
      macroValidPointer (operand_5454) ;
      result << "//---------------------------------------------------------------------------*\n"
        "//                                                                           *\n"
        "//             Key words table '" ;
      result << operand_5454->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (126)) ;
      result << "'                            *\n"
        "//                                                                           *\n"
        "//---------------------------------------------------------------------------*\n"
        "\n"
        "static const PMSInt32 ktable_size_" ;
      result << operand_5454->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (129)) ;
      result << " = " ;
      result << operand_5454->mInfo.mExplicitTokenListMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (129)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (129)) ;
      result << " ;\n"
        "\n"
        "static const C_unicode_lexique_table_entry ktable_for_" ;
      result << operand_5454->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (130)) ;
      result << " [ktable_size_" ;
      result << operand_5454->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (130)) ;
      result << "] = {\n" ;
      GGS_tokenSortedlist::cEnumerator enumerator_6213 (operand_5454->mInfo.mTokenSortedList, true) ;
      const GGS_tokenSortedlist::cElement * operand_6213 = NULL ;
      while (((operand_6213 = enumerator_6213.nextObject ()))) {
        macroValidPointer (operand_6213) ;
        result << "  {kUnicodeString_" ;
        result << operand_6213->mName.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (132)) ;
        result << ", " ;
        result << operand_6213->mLength.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (132)) ;
        result << ", " ;
        result << var_cas_LEXIQUE_CLASS_NAME ;
        result << "::" ;
        result << var_cas_LEXIQUE_CLASS_NAME ;
        result << "_1_" ;
        result << operand_6213->mTerminalName.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (132)) ;
        result << "}" ;
        if (enumerator_6213.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n"
        "\n"
        "PMSInt16 " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "::search_into_" ;
      result << operand_5454->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (136)) ;
      result << " (const C_String & inSearchedString) {\n"
        "  return searchInList (inSearchedString, ktable_for_" ;
      result << operand_5454->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (137)) ;
      result << ", ktable_size_" ;
      result << operand_5454->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (137)) ;
      result << ") ;\n"
        "}\n"
        "\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                          getCurrentTokenString                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "C_String " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::\n"
      "getCurrentTokenString (const cToken * inTokenPtr) const {\n"
      "  const cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " * ptr = (const cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " *) inTokenPtr ;\n"
      "  C_String s ;\n"
      "  if (ptr == NULL) {\n"
      "    s.appendCString(\"$$\") ;\n"
      "  }else{\n"
      "    switch (ptr->mTokenCode) {\n"
      "    case " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "_1_:\n"
      "      s.appendCString(\"$$\") ;\n"
      "      break ;\n" ;
    GGS_terminalList::cEnumerator enumerator_7507 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_7507 = NULL ;
    while (((operand_7507 = enumerator_7507.nextObject ()))) {
      macroValidPointer (operand_7507) ;
      result << "    case " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_" ;
      result << operand_7507->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (159)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (159)) ;
      result << ":\n"
        "      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;\n"
        "      s.appendCString (" ;
      result << operand_7507->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (161)).reader_utf8Representation (inLexique COMMA_SOURCE_FILE_AT_LINE (161)) ;
      result << ") ;\n"
        "      s.appendCString(\"$ \") ;\n" ;
      GGS_lexicalSentValueList::cEnumerator enumerator_7822 (operand_7507->mSentAttributeList, true) ;
      const GGS_lexicalSentValueList::cElement * operand_7822 = NULL ;
      while (((operand_7822 = enumerator_7822.nextObject ()))) {
        macroValidPointer (operand_7822) ;
        result << "      s." ;
        result << operand_7822->mLexicalType.reader_appendMethodName (inLexique COMMA_SOURCE_FILE_AT_LINE (164)) ;
        result << " (ptr->mLexicalAttribute_" ;
        result << operand_7822->mAttributeName ;
        result << operand_7822->mLexicalType.reader_appendArgumentOfMethod (inLexique COMMA_SOURCE_FILE_AT_LINE (164)) ;
        result << ") ;\n" ;
      }
      result << "      break ;\n" ;
    }
    result << "    default:\n"
      "      break ;\n"
      "    }\n"
      "  }\n"
      "  return s ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                           Template Delimiters                             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_templateDelimitorList::cEnumerator enumerator_8528 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (181)), true) ;
    const GGS_templateDelimitorList::cElement * operand_8528 = NULL ;
    if (enumerator_8528.hasCurrentObject ()) {
      result << "static const templateDelimiterStruct kTemplateDefinitionArray [" ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (182)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (182)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (182)) ;
      result << "] = {\n" ;
      while (((operand_8528 = enumerator_8528.nextObject ()))) {
        macroValidPointer (operand_8528) ;
        result << "  {kUnicodeString_" ;
        result << operand_8528->mStartString.ggs_string ().reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (183)) ;
        result << ", " ;
        result << operand_8528->mStartString.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (183)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (183)) ;
        result << ", " ;
        if ((operand_8528->mEndString.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (184))).operator_isEqual (GGS_uint (0U)).boolValue ()) {
          result << "NULL, 0," ;
        }else {
          result << "kUnicodeString_" ;
          result << operand_8528->mEndString.ggs_string ().reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (187)) ;
          result << ", " ;
          result << operand_8528->mEndString.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (187)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (187)) ;
          result << "," ;
        }
        result << " NULL, " ;
        result << (operand_8528->mPreservesStartDelimiter).operator_not ().reader_cString (inLexique COMMA_SOURCE_FILE_AT_LINE (190)) ;
        result << "}" ;
        if (enumerator_8528.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                           Template Replacements                           *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_templateReplacementList::cEnumerator enumerator_9557 (var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (202)), true) ;
    const GGS_templateReplacementList::cElement * operand_9557 = NULL ;
    if (enumerator_9557.hasCurrentObject ()) {
      result << "static const templateDelimiterStruct kTemplateReplacementArray [" ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (203)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (203)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ;
      result << "] = {\n" ;
      while (((operand_9557 = enumerator_9557.nextObject ()))) {
        macroValidPointer (operand_9557) ;
        result << "  {kUnicodeString_" ;
        result << operand_9557->mMatchString.ggs_string ().reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (205)) ;
        result << ", " ;
        result << operand_9557->mMatchString.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (205)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (205)) ;
        result << ", kUnicodeString_" ;
        result << operand_9557->mReplacementString.ggs_string ().reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (206)) ;
        result << ", " ;
        result << operand_9557->mReplacementString.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (206)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (206)) ;
        result << ", " ;
        if ((operand_9557->mReplacementFunction.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (207))).operator_isEqual (GGS_uint (0U)).boolValue ()) {
          result << "NULL" ;
        }else {
          result << "scanner_routine_" ;
          result << operand_9557->mReplacementFunction.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (210)) ;
        }
        result << ", true}" ;
        if (enumerator_9557.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//            Terminal Symbols as end of script in template mark             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_terminalList::cEnumerator enumerator_10608 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (223)), true) ;
    const GGS_terminalList::cElement * operand_10608 = NULL ;
    if (enumerator_10608.hasCurrentObject ()) {
      result << "static const bool kEndOfScriptInTemplateArray [" ;
      result << var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (224)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (224)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (224)) ;
      result << "] = {\n" ;
      while (((operand_10608 = enumerator_10608.nextObject ()))) {
        macroValidPointer (operand_10608) ;
        result << "  " ;
        result << operand_10608->mIsEndOfTemplateMark.reader_cString (inLexique COMMA_SOURCE_FILE_AT_LINE (225)) ;
        result << " /* " ;
        result << operand_10608->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (225)) ;
        result << " */" ;
        if (enumerator_10608.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//               P A R S E    L E X I C A L    T O K E N                     *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "bool " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::\n"
      "parseLexicalToken (void) {\n"
      "  cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " token ;\n"
      "  mLoop = true ;\n"
      "  token.mTokenCode = -1 ;\n"
      "  while ((token.mTokenCode < 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (244)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (244))).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << "    if ((mMatchedTemplateDelimiterIndex >= 0)\n"
        "     && (kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength > 0)\n"
        "     && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n"
        "      const bool foundEndDelimitor = testForInputUTF32String (kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndString,\n"
        "                                                              kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength,\n"
        "                                                              true) ;\n"
        "      if (foundEndDelimitor) {\n"
        "        mMatchedTemplateDelimiterIndex = -1 ;\n"
        "      }\n"
        "    }\n"
        "    while ((mMatchedTemplateDelimiterIndex < 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n"
        "      PMSInt32 replacementIndex = 0 ;\n"
        "      while (replacementIndex >= 0) {\n"
        "        replacementIndex = findTemplateDelimiterIndex (kTemplateReplacementArray, " ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (258)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (258)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (258)) ;
      result << ") ;\n"
        "        if (replacementIndex >= 0) {\n"
        "          if (kTemplateReplacementArray [replacementIndex].mReplacementFunction == NULL) {\n"
        "            token.mTemplateStringBeforeToken << kTemplateReplacementArray [replacementIndex].mEndString ;\n"
        "          }else{\n"
        "            C_String s ;\n"
        "            while (notTestForInputUTF32String (kTemplateReplacementArray [replacementIndex].mEndString,\n"
        "                                               kTemplateReplacementArray [replacementIndex].mEndStringLength,\n"
        "                                               kEndOfSourceLexicalErrorMessage\n"
        "                                               COMMA_HERE)) {\n"
        "              s.appendUnicodeCharacter (previousChar () COMMA_HERE) ;\n"
        "            }\n"
        "            kTemplateReplacementArray [replacementIndex].mReplacementFunction (*this, s, token.mTemplateStringBeforeToken) ;\n"
        "          }\n"
        "        }\n"
        "      }\n"
        "      mMatchedTemplateDelimiterIndex = findTemplateDelimiterIndex (kTemplateDefinitionArray, " ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (274)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (274)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (274)) ;
      result << ") ;\n"
        "      if (mMatchedTemplateDelimiterIndex < 0) {\n"
        "        token.mTemplateStringBeforeToken.appendUnicodeCharacter (mCurrentChar COMMA_HERE) ;\n"
        "        advance () ;\n"
        "      }\n"
        "    }\n"
        "    if ((mMatchedTemplateDelimiterIndex >= 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n" ;
      GGS_lexicalAttributeMap::cEnumerator enumerator_13827 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
      const GGS_lexicalAttributeMap::cElement * operand_13827 = NULL ;
      while (((operand_13827 = enumerator_13827.nextObject ()))) {
        macroValidPointer (operand_13827) ;
        result << "    token.mLexicalAttribute_" ;
        result << operand_13827->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (282)) ;
        result << operand_13827->mInfo.mLexicalType.reader_initialization (inLexique COMMA_SOURCE_FILE_AT_LINE (282)) ;
        result << " ;\n" ;
      }
      result << "    mTokenFirstLocation = mCurrentLocation ;\n"
        "    try{\n" ;
      const GGS_uint indentation_14265 = GGS_uint (8U) ;
      if (indentation_14265.isBuilt ()) {
        result.incIndentation ((PMSInt32) indentation_14265.uintValue ()) ;
      }
      GGS_lexicalRuleList::cEnumerator enumerator_14031 (var_cas_LEXICAL_RULE_LIST, true) ;
      const GGS_lexicalRuleList::cElement * operand_14031 = NULL ;
      while (((operand_14031 = enumerator_14031.nextObject ()))) {
        macroValidPointer (operand_14031) ;
        result << (findCategoryReader__abstractLexicalRule__generateCode (operand_14031->mLexicalRule (HERE)->galgasRTTI ()) (inLexique, operand_14031->mLexicalRule.getPtr (), var_cas_LEXIQUE_CLASS_NAME, var_cas_LEXIQUE_ANALYSIS_CONTEXT COMMA_SOURCE_FILE_AT_LINE (289))) ;
      }
       ;
      if (indentation_14265.isBuilt ()) {
        result.incIndentation (- ((PMSInt32) indentation_14265.uintValue ())) ;
      }
      result << "if (testForInputUTF32Char (TO_UNICODE ('\\0'))) { // End of source text \? \n"
        "          token.mTokenCode = " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_ ; // Empty string code\n"
        "        }else{ // Unknown input character\n"
        "          unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;\n"
        "        }\n"
        "      }catch (const C_lexicalErrorException &) {\n"
        "        token.mTokenCode = -1 ; // No token\n"
        "        advance () ; // ... go throught unknown character\n"
        "      }\n"
        "    }\n"
        "    if ((token.mTokenCode > 0) && kEndOfScriptInTemplateArray [token.mTokenCode - 1]) {\n"
        "      mMatchedTemplateDelimiterIndex = -1 ;\n"
        "    }\n"
        "  " ;
    }else {
      GGS_lexicalAttributeMap::cEnumerator enumerator_14754 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
      const GGS_lexicalAttributeMap::cElement * operand_14754 = NULL ;
      while (((operand_14754 = enumerator_14754.nextObject ()))) {
        macroValidPointer (operand_14754) ;
        result << "    token.mLexicalAttribute_" ;
        result << operand_14754->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (307)) ;
        result << operand_14754->mInfo.mLexicalType.reader_initialization (inLexique COMMA_SOURCE_FILE_AT_LINE (307)) ;
        result << " ;\n" ;
      }
      result << "    mTokenFirstLocation = mCurrentLocation ;\n"
        "    try{\n" ;
      const GGS_uint indentation_15190 = GGS_uint (6U) ;
      if (indentation_15190.isBuilt ()) {
        result.incIndentation ((PMSInt32) indentation_15190.uintValue ()) ;
      }
      GGS_lexicalRuleList::cEnumerator enumerator_14958 (var_cas_LEXICAL_RULE_LIST, true) ;
      const GGS_lexicalRuleList::cElement * operand_14958 = NULL ;
      while (((operand_14958 = enumerator_14958.nextObject ()))) {
        macroValidPointer (operand_14958) ;
        result << (findCategoryReader__abstractLexicalRule__generateCode (operand_14958->mLexicalRule (HERE)->galgasRTTI ()) (inLexique, operand_14958->mLexicalRule.getPtr (), var_cas_LEXIQUE_CLASS_NAME, var_cas_LEXIQUE_ANALYSIS_CONTEXT COMMA_SOURCE_FILE_AT_LINE (314))) ;
      }
       ;
      if (indentation_15190.isBuilt ()) {
        result.incIndentation (- ((PMSInt32) indentation_15190.uintValue ())) ;
      }
      result << "if (testForInputUTF32Char (TO_UNICODE ('\\0'))) { // End of source text \? \n"
        "        token.mTokenCode = " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_ ; // Empty string code\n"
        "      }else{ // Unknown input character\n"
        "        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;\n"
        "      }\n"
        "    }catch (const C_lexicalErrorException &) {\n"
        "      token.mTokenCode = -1 ; // No token\n"
        "      advance () ; // ... go throught unknown character\n"
        "    }" ;
    }
    result << "\n"
      "  }\n"
      "  if ((UNICODE_VALUE (mCurrentChar) == '\\0') && (token.mTemplateStringBeforeToken.length () > 0)) {\n"
      "    token.mTokenCode = 0 ;\n"
      "    enterToken (token) ;\n"
      "  }\n"
      "  return token.mTokenCode > 0 ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                         E N T E R    T O K E N                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "void " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::enterToken (const cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " & inToken) {\n"
      "  cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " * ptr = NULL ;\n"
      "  macroMyNew (ptr, cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " ()) ;\n"
      "  ptr->mTokenCode = inToken.mTokenCode ;\n"
      "  ptr->mFirstLocation = mTokenFirstLocation ;\n"
      "  ptr->mLastLocation = mTokenLastLocation ;\n"
      "  ptr->mTemplateStringBeforeToken = inToken.mTemplateStringBeforeToken ;\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_16511 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_16511 = NULL ;
    while (((operand_16511 = enumerator_16511.nextObject ()))) {
      macroValidPointer (operand_16511) ;
      result << "  ptr->mLexicalAttribute_" ;
      result << operand_16511->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (349)) ;
      result << " = inToken.mLexicalAttribute_" ;
      result << operand_16511->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (349)) ;
      result << " ;\n" ;
    }
    result << "  enterTokenFromPointer (ptr) ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//         A S S I G N    F R O M    A T T R I B U T E                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_17090 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_17090 = NULL ;
    while (((operand_17090 = enumerator_17090.nextObject ()))) {
      macroValidPointer (operand_17090) ;
      result << "void " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "::\n"
        "assignFromAttribute_" ;
      result << operand_17090->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (362)) ;
      result << " (" ;
      result << operand_17090->mInfo.mLexicalType.reader_exportedCPPTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (362)) ;
      result << " & outValue) const {\n"
        "  cTokenFor_" ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << " * ptr = (cTokenFor_" ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << " *) mCurrentTokenPtr ;\n"
        "  outValue = " ;
      result << operand_17090->mInfo.mLexicalType.reader_exportedCPPTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (364)) ;
      result << " (* this, ptr->mLexicalAttribute_" ;
      result << operand_17090->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (364)) ;
      result << ") ;\n"
        "}\n"
        "\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//               A T T R I B U T E   A C C E S S                             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_17906 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_17906 = NULL ;
    while (((operand_17906 = enumerator_17906.nextObject ()))) {
      macroValidPointer (operand_17906) ;
      result << operand_17906->mInfo.mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (375)) ;
      result << " " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "::\n"
        "attributeValue_" ;
      result << operand_17906->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (376)) ;
      result << " (void) const {\n"
        "  cTokenFor_" ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << " * ptr = (cTokenFor_" ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << " *) mCurrentTokenPtr ;\n"
        "  return ptr->mLexicalAttribute_" ;
      result << operand_17906->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (378)) ;
      result << " ;\n"
        "}\n"
        "\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// 'cocoaHeaderZone2' template of 'lexiqueGenerationTemplates' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_cocoaHeaderZone2 (C_Compiler & inLexique,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "#import \"OC_Lexique.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                    E X T E R N    R O U T I N E S                         *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalRoutineMap::cEnumerator enumerator_486 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalRoutineMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (10)), true) ;
    const GGS_lexicalRoutineMap::cElement * operand_486 = NULL ;
    while (((operand_486 = enumerator_486.nextObject ()))) {
      macroValidPointer (operand_486) ;
      if (operand_486->mInfo.mIsExtern.boolValue ()) {
        result << "\n"
          "void scanner_cocoa_routine_" ;
        result << operand_486->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (12)) ;
        result << " (BOOL * ioScanningOk" ;
        GGS_lexicalRoutineFormalArgumentList::cEnumerator enumerator_634 (operand_486->mInfo.mLexicalRoutineFormalArgumentList, true) ;
        const GGS_lexicalRoutineFormalArgumentList::cElement * operand_634 = NULL ;
        while (((operand_634 = enumerator_634.nextObject ()))) {
          macroValidPointer (operand_634) ;
          result << ",\n"
            "                " ;
          result << operand_634->mLexicalFormalArgumentMode.reader_cppConstInFormalArgument (inLexique COMMA_SOURCE_FILE_AT_LINE (14)) ;
          result << operand_634->mLexicalFormalArgumentType.reader_cocoaTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (15)) ;
          result << operand_634->mLexicalFormalArgumentMode.reader_cocoaPointerInFormalArgument (inLexique COMMA_SOURCE_FILE_AT_LINE (16)) ;
          result << " " ;
          result << operand_634->mArgumentNameForComment ;
        }
        result << ") ;\n" ;
      }else {
      }
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                    E X T E R N    F U N C T I O N S                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalFunctionMap::cEnumerator enumerator_1454 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (29)), true) ;
    const GGS_lexicalFunctionMap::cElement * operand_1454 = NULL ;
    while (((operand_1454 = enumerator_1454.nextObject ()))) {
      macroValidPointer (operand_1454) ;
      if (operand_1454->mInfo.mIsExtern.boolValue ()) {
        result << "\n" ;
        result << operand_1454->mInfo.mReturnedLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (31)) ;
        result << " scanner_cocoa_function_" ;
        result << operand_1454->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (31)) ;
        result << " (BOOL * ioScanningOk" ;
        GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_1620 (operand_1454->mInfo.mLexicalTypeList, true) ;
        const GGS_lexicalFunctionFormalArgumentList::cElement * operand_1620 = NULL ;
        while (((operand_1620 = enumerator_1620.nextObject ()))) {
          macroValidPointer (operand_1620) ;
          result << ",\n"
            "                const " ;
          result << operand_1620->mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (33)) ;
          result << " " ;
          result << operand_1620->mArgumentNameForComment ;
        }
        result << ") ;\n" ;
      }else {
      }
    }
    result << "\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//         T E R M I N A L    S Y M B O L    E N U M E R A T I O N           *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "enum {" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "_1_" ;
    GGS_terminalList::cEnumerator enumerator_2253 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (47)), true) ;
    const GGS_terminalList::cElement * operand_2253 = NULL ;
    while (((operand_2253 = enumerator_2253.nextObject ()))) {
      macroValidPointer (operand_2253) ;
      result << ",\n"
        "  " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_" ;
      result << operand_2253->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (48)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (48)) ;
    }
    result << "\n"
      "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                     S C A N N E R    C L A S S                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "@interface OC_Lexique_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " : OC_Lexique {\n"
      "//--- Attributes\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_2904 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (61)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_2904 = NULL ;
    while (((operand_2904 = enumerator_2904.nextObject ()))) {
      macroValidPointer (operand_2904) ;
      result << "  @private " ;
      result << operand_2904->mInfo.mLexicalType.reader_cocoaTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (62)) ;
      result << " mLexicalAttribute_" ;
      result << operand_2904->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (62)) ;
      result << " ;\n" ;
    }
    result << "\n"
      "}\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// 'cocoaHeaderZone3' template of 'lexiqueGenerationTemplates' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_cocoaHeaderZone3 (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "- (UInt32) terminalVocabularyCount ;\n"
      "\n"
      "- (UInt32) styleIndexForTerminal: (SInt32) inTerminal ;\n"
      "\n"
      "- (void) parseLexicalTokenForLexicalColoring ;\n"
      "\n"
      "- (UInt32) styleCount ;\n"
      "\n"
      "- (NSString *) styleNameForStyleIndex: (SInt32) inIndex ;\n"
      "\n"
      "- (NSString *) styleIdentifierForStyleIndex: (SInt32) inIndex ;\n"
      "\n"
      "- (BOOL) isTemplateLexique ;\n"
      "@end\n"
      "\n"
      "//---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'cocoaImplementationZone2' template of 'lexiqueGenerationTemplates' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_cocoaImplementationZone2 (C_Compiler & inLexique,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_lexicalAttributeMap & var_cas_LEXICAL_ATTRIBUTE_MAP,
                                const GGS_lexicalMessageMap & var_cas_LEXICAL_MESSAGE_MAP,
                                const GGS_terminalList & var_cas_TERMINAL_LIST,
                                const GGS_stringset & var_cas_STRINGS_IN_EXPLICIT_RULES,
                                const GGS_lexicalRuleList & var_cas_LEXICAL_RULE_LIST,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT,
                                const GGS_lexiqueComponentRoot & var_cas_LEXIQUE_COMPONENT_ROOT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_LEXICAL_ATTRIBUTE_MAP.isBuilt ()
    && var_cas_LEXICAL_MESSAGE_MAP.isBuilt ()
    && var_cas_TERMINAL_LIST.isBuilt ()
    && var_cas_STRINGS_IN_EXPLICIT_RULES.isBuilt ()
    && var_cas_LEXICAL_RULE_LIST.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt ()
    && var_cas_LEXIQUE_COMPONENT_ROOT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#import \"version_libpm.h\"\n"
      "#if LIBPM_VERSION != THE_LIBPM_VERSION\n"
      "  #error \"This file has been compiled with a version of GALGAS different than the version of libpm\"\n"
      "#endif\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#import \"" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "-cocoa.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "@implementation OC_Lexique_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (id) init {\n"
      "  self = [super init] ;\n"
      "  if (self) {\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_671 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_671 = NULL ;
    while (((operand_671 = enumerator_671.nextObject ()))) {
      macroValidPointer (operand_671) ;
      result << "    mLexicalAttribute_" ;
      result << operand_671->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (23)) ;
      result << " = " ;
      result << operand_671->mInfo.mLexicalType.reader_cocoaInitializationCode (inLexique COMMA_SOURCE_FILE_AT_LINE (23)) ;
      result << " ;\n" ;
    }
    result << "  }\n"
      "  return self ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (void) dealloc {\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_940 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_940 = NULL ;
    while (((operand_940 = enumerator_940.nextObject ()))) {
      macroValidPointer (operand_940) ;
      if ((operand_940->mInfo.mLexicalType).operator_isEqual (GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE)).boolValue ()) {
        result << "  [mLexicalAttribute_" ;
        result << operand_940->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (34)) ;
        result << " release] ;\n" ;
      }else {
      }
    }
    result << "  [super dealloc] ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                           Template Delimiters                             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_templateDelimitorList::cEnumerator enumerator_1580 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (46)), true) ;
    const GGS_templateDelimitorList::cElement * operand_1580 = NULL ;
    if (enumerator_1580.hasCurrentObject ()) {
      result << "static const templateDelimiterStructForCocoa kTemplateDefinitionArray_" ;
      result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
      result << " [" ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (47)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (47)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
      result << "] = {\n" ;
      while (((operand_1580 = enumerator_1580.nextObject ()))) {
        macroValidPointer (operand_1580) ;
        result << "  {@" ;
        result << operand_1580->mStartString.ggs_string ().reader_utf8Representation (inLexique COMMA_SOURCE_FILE_AT_LINE (48)) ;
        result << ", " ;
        if ((operand_1580->mEndString.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (49))).operator_isEqual (GGS_uint (0U)).boolValue ()) {
          result << "nil," ;
        }else {
          result << "@" ;
          result << operand_1580->mEndString.ggs_string ().reader_utf8Representation (inLexique COMMA_SOURCE_FILE_AT_LINE (52)) ;
          result << "," ;
        }
        result << " " ;
        result << (operand_1580->mPreservesStartDelimiter).operator_not ().reader_ocString (inLexique COMMA_SOURCE_FILE_AT_LINE (55)) ;
        result << "}" ;
        if (enumerator_1580.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                           Template Replacments                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_templateReplacementList::cEnumerator enumerator_2548 (var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (67)), true) ;
    const GGS_templateReplacementList::cElement * operand_2548 = NULL ;
    if (enumerator_2548.hasCurrentObject ()) {
      result << "static NSString * kTemplateReplacementArray_" ;
      result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (68)) ;
      result << " [" ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (68)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (68)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (68)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (68)) ;
      result << "] = {\n"
        "  " ;
      while (((operand_2548 = enumerator_2548.nextObject ()))) {
        macroValidPointer (operand_2548) ;
        result << "@" ;
        result << operand_2548->mMatchString.ggs_string ().reader_utf8Representation (inLexique COMMA_SOURCE_FILE_AT_LINE (69)) ;
        result << ", " ;
      }
      result << "nil\n"
        "} ;" ;
    }
    result << "\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//            Terminal Symbols as end of script in template mark             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_terminalList::cEnumerator enumerator_3276 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (80)), true) ;
    const GGS_terminalList::cElement * operand_3276 = NULL ;
    if (enumerator_3276.hasCurrentObject ()) {
      result << "static const BOOL kEndOfScriptInTemplateArray_" ;
      result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (81)) ;
      result << " [" ;
      result << var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (81)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (81)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (81)) ;
      result << "] = {\n" ;
      while (((operand_3276 = enumerator_3276.nextObject ()))) {
        macroValidPointer (operand_3276) ;
        result << "  " ;
        result << operand_3276->mIsEndOfTemplateMark.reader_ocString (inLexique COMMA_SOURCE_FILE_AT_LINE (82)) ;
        result << " /* " ;
        result << operand_3276->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (82)) ;
        result << " */" ;
        if (enumerator_3276.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "\n" ;
    GGS_lexicalExplicitTokenListMapMap::cEnumerator enumerator_3655 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalTokenListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (89)), true) ;
    const GGS_lexicalExplicitTokenListMapMap::cElement * operand_3655 = NULL ;
    while (((operand_3655 = enumerator_3655.nextObject ()))) {
      macroValidPointer (operand_3655) ;
      if (operand_3655->mInfo.mShouldBeGenerated.boolValue ()) {
        result << "//---------------------------------------------------------------------------*\n"
          "//                                                                           *\n"
          "//             Key words table '" ;
        result << operand_3655->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (93)) ;
        result << "'                            *\n"
          "//                                                                           *\n"
          "//---------------------------------------------------------------------------*\n"
          "\n"
          "static const C_cocoa_lexique_table_entry ktable_for_" ;
        result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (96)) ;
        result << "_" ;
        result << operand_3655->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (96)) ;
        result << " [" ;
        result << operand_3655->mInfo.mExplicitTokenListMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (96)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (96)) ;
        result << "] = {\n" ;
        GGS_tokenSortedlist::cEnumerator enumerator_4405 (operand_3655->mInfo.mTokenSortedList, true) ;
        const GGS_tokenSortedlist::cElement * operand_4405 = NULL ;
        while (((operand_4405 = enumerator_4405.nextObject ()))) {
          macroValidPointer (operand_4405) ;
          result << "  {@" ;
          result << operand_4405->mName.reader_utf8Representation (inLexique COMMA_SOURCE_FILE_AT_LINE (98)) ;
          result << ", " ;
          result << var_cas_LEXIQUE_CLASS_NAME ;
          result << "_1_" ;
          result << operand_4405->mTerminalName.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (98)) ;
          result << "}" ;
          if (enumerator_4405.hasNextObject ()) {
            result << ",\n" ;
          }
        }
        result << "\n"
          "} ;\n"
          "\n"
          "static SInt32 search_into_" ;
        result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (102)) ;
        result << "_" ;
        result << operand_3655->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (102)) ;
        result << " (NSString * inSearchedString) {\n"
          "  return searchStringInTable (inSearchedString, ktable_for_" ;
        result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (103)) ;
        result << "_" ;
        result << operand_3655->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (103)) ;
        result << ", " ;
        result << operand_3655->mInfo.mExplicitTokenListMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (103)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (103)) ;
        result << ") ;\n"
          "}\n"
          "\n" ;
      }else {
      }
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//               P A R S E    L E X I C A L    T O K E N                     *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (void) parseLexicalTokenForLexicalColoring {\n"
      "  mLoop = YES ;\n"
      "  BOOL scanningOk = YES ;\n"
      "  mTokenCode = 0 ;\n"
      "  while ((mTokenCode == 0) && (mCurrentChar != '\\0')) {\n"
      "    mTokenFirstLocation = mCurrentLocation ;\n" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (121)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (121))).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << "    if ((mMatchedTemplateDelimiterIndex >= 0) && ([kTemplateDefinitionArray_" ;
      result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (122)) ;
      result << " [mMatchedTemplateDelimiterIndex].mStartString length] > 0)) {\n"
        "      const BOOL foundEndDelimitor = [self testForInputString:kTemplateDefinitionArray_" ;
      result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (123)) ;
      result << " [mMatchedTemplateDelimiterIndex].mEndString advance:YES] ;\n"
        "      if (foundEndDelimitor) {\n"
        "        mMatchedTemplateDelimiterIndex = -1 ;\n"
        "      }\n"
        "    }\n"
        "    while ((mMatchedTemplateDelimiterIndex < 0) && (mCurrentChar != '\\0')) {\n"
        "      " ;
      if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (129)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (129))).operator_strictSup (GGS_uint (0U)).boolValue ()) {
        result << "\n"
          "      [self searchForReplacementPattern:kTemplateReplacementArray_galgasTemplateScanner] ;\n"
          "      " ;
      }else {
      }
      result << "\n"
        "      mMatchedTemplateDelimiterIndex = [self findTemplateDelimiterIndex:kTemplateDefinitionArray_" ;
      result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (132)) ;
      result << " listLength:" ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (132)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (132)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (132)) ;
      result << "] ;\n"
        "      if (mMatchedTemplateDelimiterIndex < 0) {\n"
        "        [self advance] ;\n"
        "        mTokenCode = -2 ;\n"
        "      }\n"
        "    }\n"
        "    if ((mMatchedTemplateDelimiterIndex >= 0) && (mTokenCode == 0) && (mCurrentChar != '\\0') && scanningOk) {\n" ;
      GGS_lexicalAttributeMap::cEnumerator enumerator_6867 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
      const GGS_lexicalAttributeMap::cElement * operand_6867 = NULL ;
      while (((operand_6867 = enumerator_6867.nextObject ()))) {
        macroValidPointer (operand_6867) ;
        result << "      " ;
        result << operand_6867->mInfo.mLexicalType.reader_cocoaResetPrefix (inLexique COMMA_SOURCE_FILE_AT_LINE (140)) ;
        result << "mLexicalAttribute_" ;
        result << operand_6867->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (140)) ;
        result << operand_6867->mInfo.mLexicalType.reader_cocoaReset (inLexique COMMA_SOURCE_FILE_AT_LINE (140)) ;
        result << " ;\n" ;
      }
      result << "      mTokenFirstLocation = mCurrentLocation ;\n" ;
      const GGS_uint indentation_7309 = GGS_uint (6U) ;
      if (indentation_7309.isBuilt ()) {
        result.incIndentation ((PMSInt32) indentation_7309.uintValue ()) ;
      }
      GGS_lexicalRuleList::cEnumerator enumerator_7091 (var_cas_LEXICAL_RULE_LIST, true) ;
      const GGS_lexicalRuleList::cElement * operand_7091 = NULL ;
      while (((operand_7091 = enumerator_7091.nextObject ()))) {
        macroValidPointer (operand_7091) ;
        result << (findCategoryReader__abstractLexicalRule__generateCocoaCode (operand_7091->mLexicalRule (HERE)->galgasRTTI ()) (inLexique, operand_7091->mLexicalRule.getPtr (), var_cas_LEXIQUE_CLASS_NAME, var_cas_LEXIQUE_ANALYSIS_CONTEXT COMMA_SOURCE_FILE_AT_LINE (146))) ;
      }
       ;
      if (indentation_7309.isBuilt ()) {
        result.incIndentation (- ((PMSInt32) indentation_7309.uintValue ())) ;
      }
      result << "if ([self testForInputChar:'\\0']) { // End of source text \? \n"
        "        mTokenCode = " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_ ; // Empty string code\n"
        "      }else{ // Unknown input character\n"
        "        scanningOk = NO ;\n"
        "      }\n"
        "    }\n"
        "    if ((mTokenCode > 0) && kEndOfScriptInTemplateArray_" ;
      result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (155)) ;
      result << " [mTokenCode - 1]) {\n"
        "      mMatchedTemplateDelimiterIndex = -1 ;\n"
        "    }\n"
        "  //--- Error \?\n"
        "    if (! scanningOk) {\n"
        "      mTokenCode = -1 ;\n"
        "      [self advance] ;\n"
        "    }" ;
    }else {
      GGS_lexicalAttributeMap::cEnumerator enumerator_7725 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
      const GGS_lexicalAttributeMap::cElement * operand_7725 = NULL ;
      while (((operand_7725 = enumerator_7725.nextObject ()))) {
        macroValidPointer (operand_7725) ;
        result << "    " ;
        result << operand_7725->mInfo.mLexicalType.reader_cocoaResetPrefix (inLexique COMMA_SOURCE_FILE_AT_LINE (164)) ;
        result << "mLexicalAttribute_" ;
        result << operand_7725->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (164)) ;
        result << operand_7725->mInfo.mLexicalType.reader_cocoaReset (inLexique COMMA_SOURCE_FILE_AT_LINE (164)) ;
        result << " ;\n" ;
      }
      result << "    mTokenFirstLocation = mCurrentLocation ;\n" ;
      const GGS_uint indentation_8161 = GGS_uint (4U) ;
      if (indentation_8161.isBuilt ()) {
        result.incIndentation ((PMSInt32) indentation_8161.uintValue ()) ;
      }
      GGS_lexicalRuleList::cEnumerator enumerator_7945 (var_cas_LEXICAL_RULE_LIST, true) ;
      const GGS_lexicalRuleList::cElement * operand_7945 = NULL ;
      while (((operand_7945 = enumerator_7945.nextObject ()))) {
        macroValidPointer (operand_7945) ;
        result << (findCategoryReader__abstractLexicalRule__generateCocoaCode (operand_7945->mLexicalRule (HERE)->galgasRTTI ()) (inLexique, operand_7945->mLexicalRule.getPtr (), var_cas_LEXIQUE_CLASS_NAME, var_cas_LEXIQUE_ANALYSIS_CONTEXT COMMA_SOURCE_FILE_AT_LINE (170))) ;
      }
       ;
      if (indentation_8161.isBuilt ()) {
        result.incIndentation (- ((PMSInt32) indentation_8161.uintValue ())) ;
      }
      result << "if ([self testForInputChar:'\\0']) { // End of source text \? \n"
        "      mTokenCode = " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_ ; // Empty string code\n"
        "    }else{ // Unknown input character\n"
        "      scanningOk = NO ;\n"
        "    }\n"
        "  //--- Error \?\n"
        "    if (! scanningOk) {\n"
        "      mTokenCode = -1 ;\n"
        "      [self advance] ;\n"
        "    }" ;
    }
    result << "\n"
      "  }\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                   T E R M I N A L    C O U N T                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (UInt32) terminalVocabularyCount {\n"
      "  return " ;
    result << var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (193)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (193)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (193)) ;
    result << " ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                     S T Y L E   C O U N T                                 *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (UInt32) styleCount {\n"
      "  return " ;
    result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (203)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (203)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (203)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ;
    result << " ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                I S    T E M P L A T E    L E X I Q U E                    *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (BOOL) isTemplateLexique {\n"
      "  return " ;
    result << (var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (213)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (213))).operator_strictSup (GGS_uint (0U)).reader_ocString (inLexique COMMA_SOURCE_FILE_AT_LINE (213)) ;
    result << " ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//              S T Y L E   F O R    T E R M I N A L                         *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (UInt32) styleIndexForTerminal: (SInt32) inTerminal {\n"
      "  static const UInt32 kTerminalSymbolStyles [" ;
    result << var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (223)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (223)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (223)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (223)) ;
    result << "] = {0" ;
    GGS_terminalList::cEnumerator enumerator_10515 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (224)), true) ;
    const GGS_terminalList::cElement * operand_10515 = NULL ;
    while (((operand_10515 = enumerator_10515.nextObject ()))) {
      macroValidPointer (operand_10515) ;
      result << ",\n"
        "    " ;
      result << operand_10515->mStyleIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (225)) ;
      result << " /* " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_" ;
      result << operand_10515->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (225)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (225)) ;
      result << " */" ;
    }
    result << "\n"
      "  } ;\n"
      "  return kTerminalSymbolStyles [inTerminal] ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//             S T Y L E   N A M E    F O R    I N D E X                     *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (NSString *) styleNameForStyleIndex: (SInt32) inIndex {\n"
      "  NSString * kStyleArray [" ;
    result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (237)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (237)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (237)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (237)) ;
    result << "] = {\n"
      "    @\"Default Style\"" ;
    GGS_lexicalStyleList::cEnumerator enumerator_11333 (var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (239)), true) ;
    const GGS_lexicalStyleList::cElement * operand_11333 = NULL ;
    while (((operand_11333 = enumerator_11333.nextObject ()))) {
      macroValidPointer (operand_11333) ;
      result << ",\n"
        "    @" ;
      result << operand_11333->mComment.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (240)).reader_utf8Representation (inLexique COMMA_SOURCE_FILE_AT_LINE (240)) ;
    }
    result << "\n"
      "  } ;\n"
      "  return kStyleArray [inIndex] ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//         S T Y L E   I D E N T I F I E R    F O R    I N D E X             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (NSString *) styleIdentifierForStyleIndex: (SInt32) inIndex {\n"
      "  NSString * kStyleArray [" ;
    result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (252)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (252)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (252)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (252)) ;
    result << "] = {\n"
      "    @\"" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "\"" ;
    GGS_lexicalStyleList::cEnumerator enumerator_12085 (var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (254)), true) ;
    const GGS_lexicalStyleList::cElement * operand_12085 = NULL ;
    while (((operand_12085 = enumerator_12085.nextObject ()))) {
      macroValidPointer (operand_12085) ;
      result << ",\n"
        "    @\"" ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "-" ;
      result << operand_12085->mName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (255)) ;
      result << "\"" ;
    }
    result << "\n"
      "  } ;\n"
      "  return kStyleArray [inIndex] ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "@end\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "parseLexiqueComponent"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_parseLexiqueComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct,
                                GGS_lexiqueComponentRoot  & var_cas_outLexiqueComponentRoot COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_parseLexiqueComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_key ;
  var_cas_key = GGS_lstring ::constructor_new (inLexique, var_cas_inSourceFile.ggs_string ().reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (677)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (677)), var_cas_inSourceFile.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (677)) COMMA_HERE) ;
  if ((var_cas_ioParsedComponentStruct.reader_mParsedLexiqueComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (678)).reader_hasKey (inLexique, var_cas_key.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (678)) COMMA_SOURCE_FILE_AT_LINE (678))).isBuiltAndTrue ()) {
    const GGS_parsedLexiqueComponentMap  temp_27940 = var_cas_ioParsedComponentStruct.reader_mParsedLexiqueComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (679)) ;
    if (temp_27940.isBuilt ()) {
      temp_27940 (HERE)->method_searchKey (inLexique, var_cas_key, var_cas_outLexiqueComponentRoot COMMA_SOURCE_FILE_AT_LINE (679)) ;
    }
  }else{
    const GGS_string _depExtension = GGS_string ("") ;
    const GGS_string _depPath = GGS_string ("") ;
    if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
      lexiqueLL1grammar::_performSourceFileParsing_ (inLexique,
                                    _depExtension.string (),
                                    _depPath.string (),
                                    NULL,
                                    var_cas_inSourceFile,
                                    var_cas_outLexiqueComponentRoot
                                    COMMA_SOURCE_FILE_AT_LINE (681)) ;
    }
    var_cas_ioParsedComponentStruct.mParsedLexiqueComponentMap.modifier_insertKey (inLexique, var_cas_key, var_cas_outLexiqueComponentRoot COMMA_SOURCE_FILE_AT_LINE (682)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_parseLexiqueComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "compileLexiqueComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileLexiqueComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  var_cas_inOutputDirectory,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileLexiqueComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lexiqueComponentRoot  var_cas_lexiqueComponentRoot ;
  ::routine_parseLexiqueComponent (inLexique,  var_cas_inSourceFile,  var_cas_ioParsedComponentStruct,  var_cas_lexiqueComponentRoot COMMA_SOURCE_FILE_AT_LINE (696)) ;
  GGS_lstring  var_cas_componentName ;
  var_cas_componentName = var_cas_lexiqueComponentRoot.reader_mLexiqueComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (702)) ;
  GGS_string var_cas_basename ;
  var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (703)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (703)) ;
  if (((var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (704))).operator_isNotEqual (var_cas_basename)).isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS checks "
      "the component name ('")).operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (706)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (708)) ;
  }
  GGS_lexicalTypeMap  var_cas_lexicalTypeMap ;
  var_cas_lexicalTypeMap = GGS_lexicalTypeMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (712)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("char"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (713)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (714)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint64"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (715)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (716)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint64"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint64 (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (717)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("double"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_double (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (718)) ;
  GGS_lexicalRoutineMap  var_cas_lexicalRoutineMap ;
  ::routine_buildLexicalRoutineMap (inLexique,  var_cas_lexicalRoutineMap COMMA_SOURCE_FILE_AT_LINE (721)) ;
  {
    GGS_externRoutineList::cEnumerator enumerator_30253 (var_cas_lexiqueComponentRoot.reader_mExternRoutineList (inLexique COMMA_SOURCE_FILE_AT_LINE (723)), true) ;
    const GGS_externRoutineList::cElement * operand_30253 = NULL ;
    while (((operand_30253 = enumerator_30253.nextObject ()))) {
      macroValidPointer (operand_30253) ;
      GGS_lexicalRoutineFormalArgumentList  var_cas_lexicalRoutineFormalArgumentList ;
      var_cas_lexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
      {
        GGS_lexicalExternRoutineFormalArgumentList::cEnumerator enumerator_30427 (operand_30253->mLexicalRoutineFormalArgumentList, true) ;
        const GGS_lexicalExternRoutineFormalArgumentList::cElement * operand_30427 = NULL ;
        while (((operand_30427 = enumerator_30427.nextObject ()))) {
          macroValidPointer (operand_30427) ;
          GGS_lexicalTypeEnum var_cas_lexicalFormalArgumentType ;
          const GGS_lexicalTypeMap  temp_30513 = var_cas_lexicalTypeMap ;
          if (temp_30513.isBuilt ()) {
            temp_30513 (HERE)->method_searchKey (inLexique, operand_30427->mLexicalTypeName, var_cas_lexicalFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (727)) ;
          }
          var_cas_lexicalRoutineFormalArgumentList.addAssign_operation (operand_30427->mPassingMode, var_cas_lexicalFormalArgumentType, operand_30427->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (728))) ;
        }
      }
      var_cas_lexicalRoutineMap.modifier_insertKey (inLexique, operand_30253->mRoutineName, var_cas_lexicalRoutineFormalArgumentList, operand_30253->mErrorMessageList, GGS_string (""), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (730)) ;
    }
  }
  GGS_lexicalFunctionMap  var_cas_lexicalFunctionMap ;
  ::routine_buildLexicalFunctionMap (inLexique,  var_cas_lexicalFunctionMap COMMA_SOURCE_FILE_AT_LINE (734)) ;
  {
    GGS_externFunctionList::cEnumerator enumerator_31058 (var_cas_lexiqueComponentRoot.reader_mExternFunctionList (inLexique COMMA_SOURCE_FILE_AT_LINE (736)), true) ;
    const GGS_externFunctionList::cElement * operand_31058 = NULL ;
    while (((operand_31058 = enumerator_31058.nextObject ()))) {
      macroValidPointer (operand_31058) ;
      GGS_lexicalFunctionFormalArgumentList  var_cas_lexicalFunctionFormalArgumentList ;
      var_cas_lexicalFunctionFormalArgumentList = GGS_lexicalFunctionFormalArgumentList ::constructor_emptyList () ;
      {
        GGS_lexicalExternFunctionFormalArgumentList::cEnumerator enumerator_31236 (operand_31058->mLexicalFunctionFormalArgumentList, true) ;
        const GGS_lexicalExternFunctionFormalArgumentList::cElement * operand_31236 = NULL ;
        while (((operand_31236 = enumerator_31236.nextObject ()))) {
          macroValidPointer (operand_31236) ;
          GGS_lexicalTypeEnum var_cas_lexicalFormalArgumentType ;
          const GGS_lexicalTypeMap  temp_31322 = var_cas_lexicalTypeMap ;
          if (temp_31322.isBuilt ()) {
            temp_31322 (HERE)->method_searchKey (inLexique, operand_31236->mLexicalTypeName, var_cas_lexicalFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (740)) ;
          }
          var_cas_lexicalFunctionFormalArgumentList.addAssign_operation (var_cas_lexicalFormalArgumentType, operand_31236->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (741))) ;
        }
      }
      GGS_lexicalTypeEnum var_cas_returnedArgumentType ;
      const GGS_lexicalTypeMap  temp_31564 = var_cas_lexicalTypeMap ;
      if (temp_31564.isBuilt ()) {
        temp_31564 (HERE)->method_searchKey (inLexique, operand_31058->mReturnedTypeName, var_cas_returnedArgumentType COMMA_SOURCE_FILE_AT_LINE (744)) ;
      }
      var_cas_lexicalFunctionMap.modifier_insertKey (inLexique, operand_31058->mFunctionName, var_cas_lexicalFunctionFormalArgumentList, var_cas_returnedArgumentType, GGS_string (""), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (745)) ;
    }
  }
  GGS_lexiqueAnalysisContext var_cas_lexiqueAnalysisContext ;
  var_cas_lexiqueAnalysisContext = GGS_lexiqueAnalysisContext::constructor_new (var_cas_lexicalRoutineMap, var_cas_lexicalFunctionMap, GGS_lexicalMessageMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_terminalMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_terminalList ::constructor_emptyList (), GGS_lexicalAttributeMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_lexicalExplicitTokenListMapMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_stringset ::constructor_emptySet (), GGS_templateDelimitorList ::constructor_emptyList (), GGS_styleMap ::constructor_emptyMap (inLexique COMMA_HERE)) ;
  GGS_uint  var_cas_styleIndex ;
  var_cas_styleIndex = GGS_uint (1U) ;
  {
    GGS_lexicalStyleList::cEnumerator enumerator_32262 (var_cas_lexiqueComponentRoot.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (762)), true) ;
    const GGS_lexicalStyleList::cElement * operand_32262 = NULL ;
    while (((operand_32262 = enumerator_32262.nextObject ()))) {
      macroValidPointer (operand_32262) ;
      var_cas_lexiqueAnalysisContext.mStyleMap.modifier_insertKey (inLexique, operand_32262->mName, operand_32262->mComment, var_cas_styleIndex COMMA_SOURCE_FILE_AT_LINE (763)) ;
      var_cas_styleIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (764)) ;
    }
  }
  {
    GGS_lexicalAttributeList::cEnumerator enumerator_32513 (var_cas_lexiqueComponentRoot.reader_mLexicalAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (767)), true) ;
    const GGS_lexicalAttributeList::cElement * operand_32513 = NULL ;
    while (((operand_32513 = enumerator_32513.nextObject ()))) {
      macroValidPointer (operand_32513) ;
      if ((var_cas_lexicalTypeMap.reader_hasKey (inLexique, operand_32513->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (768)) COMMA_SOURCE_FILE_AT_LINE (768))).isBuiltAndTrue ()) {
        GGS_lexicalTypeEnum var_cas_lexicalType ;
        const GGS_lexicalTypeMap  temp_32684 = var_cas_lexicalTypeMap ;
        if (temp_32684.isBuilt ()) {
          temp_32684 (HERE)->method_searchKey (inLexique, operand_32513->mTypeName, var_cas_lexicalType COMMA_SOURCE_FILE_AT_LINE (770)) ;
        }
        var_cas_lexiqueAnalysisContext.mLexicalAttributeMap.modifier_insertKey (inLexique, operand_32513->mName, var_cas_lexicalType COMMA_SOURCE_FILE_AT_LINE (771)) ;
      }else{
        GGS_string var_cas_m ;
        var_cas_m = GGS_string ("") ;
        var_cas_m.appendCString ("the @") ;
        var_cas_m.dotAssign_operation (operand_32513->mTypeName) ;
        var_cas_m.appendCString (" type is not a valid lexical attribute type; are allowed:") ;
        GGS_bool var_cas_firstLoop ;
        var_cas_firstLoop = GGS_bool (true) ;
        {
          GGS_lexicalTypeMap::cEnumerator enumerator_32986 (var_cas_lexicalTypeMap, true) ;
          const GGS_lexicalTypeMap::cElement * operand_32986 = enumerator_32986.nextObject () ;
          if ((operand_32986 != NULL)) {
            bool _foreach_loop_32986 ;
            do{
              macroValidPointer (operand_32986) ;
              var_cas_m.appendCString (" @") ;
              var_cas_m.dotAssign_operation (operand_32986->mKey) ;
              operand_32986 = enumerator_32986.nextObject () ;
              _foreach_loop_32986 = ((operand_32986 != NULL)) ;
              if (_foreach_loop_32986) {
                var_cas_m.appendCString (",") ;
              }
            }while (_foreach_loop_32986) ;
          }
        }
        operand_32513->mTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_m COMMA_SOURCE_FILE_AT_LINE (782)) ;
      }
    }
  }
  {
    GGS_terminalDeclarationList::cEnumerator enumerator_33196 (var_cas_lexiqueComponentRoot.reader_mTerminalDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (785)), true) ;
    const GGS_terminalDeclarationList::cElement * operand_33196 = NULL ;
    while (((operand_33196 = enumerator_33196.nextObject ()))) {
      macroValidPointer (operand_33196) ;
      GGS_uint  var_cas_terminalStyleIndex ;
      var_cas_terminalStyleIndex = GGS_uint (0U) ;
      if (((operand_33196->mStyle.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (787)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (787))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
        GGS_lstring  automatic_var_11 ;
        const GGS_styleMap  temp_33374 = var_cas_lexiqueAnalysisContext.reader_mStyleMap (inLexique COMMA_SOURCE_FILE_AT_LINE (788)) ;
        if (temp_33374.isBuilt ()) {
          temp_33374 (HERE)->method_searchKey (inLexique, operand_33196->mStyle, automatic_var_11, var_cas_terminalStyleIndex COMMA_SOURCE_FILE_AT_LINE (788)) ;
        }
      }
      GGS_lexicalSentValueList  var_cas_argumentTypeList ;
      var_cas_argumentTypeList = GGS_lexicalSentValueList ::constructor_emptyList () ;
      {
        GGS_lstringlist::cEnumerator enumerator_33509 (operand_33196->mSentAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_33509 = NULL ;
        while (((operand_33509 = enumerator_33509.nextObject ()))) {
          macroValidPointer (operand_33509) ;
          GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
          const GGS_lexicalAttributeMap  temp_33648 = var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (793)) ;
          if (temp_33648.isBuilt ()) {
            temp_33648 (HERE)->method_searchKey (inLexique, operand_33509->mValue, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (793)) ;
          }
          var_cas_argumentTypeList.addAssign_operation (operand_33509->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (794)), var_cas_attributeLexicalType) ;
        }
      }
      var_cas_lexiqueAnalysisContext.mTerminalMap.modifier_insertKey (inLexique, operand_33196->mName, var_cas_argumentTypeList COMMA_SOURCE_FILE_AT_LINE (796)) ;
      GGS_bool var_cas_isEndOfTemplateMark ;
      var_cas_isEndOfTemplateMark = GGS_bool (false) ;
      {
        GGS_lstringlist::cEnumerator enumerator_33928 (operand_33196->mOptionList, true) ;
        const GGS_lstringlist::cElement * operand_33928 = NULL ;
        while (((operand_33928 = enumerator_33928.nextObject ()))) {
          macroValidPointer (operand_33928) ;
          if (((operand_33928->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (799))).operator_isNotEqual (GGS_string ("templateEndMark"))).isBuiltAndTrue ()) {
            operand_33928->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'templateEndMark' feature is allowed here") COMMA_SOURCE_FILE_AT_LINE (801)) ;
          }else if ((var_cas_isEndOfTemplateMark).isBuiltAndTrue ()) {
            operand_33928->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'templateEndMark' feature is already set") COMMA_SOURCE_FILE_AT_LINE (803)) ;
          }else{
            var_cas_isEndOfTemplateMark = GGS_bool (true) ;
          }
        }
      }
      var_cas_lexiqueAnalysisContext.mTerminalList.addAssign_operation (operand_33196->mName, var_cas_argumentTypeList, operand_33196->mSyntaxErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (810)), var_cas_isEndOfTemplateMark, var_cas_terminalStyleIndex) ;
    }
  }
  {
    GGS_lexicalListDeclarationList::cEnumerator enumerator_34451 (var_cas_lexiqueComponentRoot.reader_mLexicalListDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (815)), true) ;
    const GGS_lexicalListDeclarationList::cElement * operand_34451 = NULL ;
    while (((operand_34451 = enumerator_34451.nextObject ()))) {
      macroValidPointer (operand_34451) ;
      GGS_uint  var_cas_terminalStyleIndex ;
      var_cas_terminalStyleIndex = GGS_uint (0U) ;
      if (((operand_34451->mStyle.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (817)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (817))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
        GGS_lstring  automatic_var_12 ;
        const GGS_styleMap  temp_34632 = var_cas_lexiqueAnalysisContext.reader_mStyleMap (inLexique COMMA_SOURCE_FILE_AT_LINE (818)) ;
        if (temp_34632.isBuilt ()) {
          temp_34632 (HERE)->method_searchKey (inLexique, operand_34451->mStyle, automatic_var_12, var_cas_terminalStyleIndex COMMA_SOURCE_FILE_AT_LINE (818)) ;
        }
      }
      GGS_lexicalSentValueList  var_cas_argumentTypeList ;
      var_cas_argumentTypeList = GGS_lexicalSentValueList ::constructor_emptyList () ;
      {
        GGS_lstringlist::cEnumerator enumerator_34767 (operand_34451->mSentAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_34767 = NULL ;
        while (((operand_34767 = enumerator_34767.nextObject ()))) {
          macroValidPointer (operand_34767) ;
          GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
          const GGS_lexicalAttributeMap  temp_34905 = var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (823)) ;
          if (temp_34905.isBuilt ()) {
            temp_34905 (HERE)->method_searchKey (inLexique, operand_34767->mValue, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (823)) ;
          }
          var_cas_argumentTypeList.addAssign_operation (operand_34767->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (824)), var_cas_attributeLexicalType) ;
        }
      }
      GGS_lexicalExplicitTokenListMap  var_cas_lexicalTokenListMap ;
      var_cas_lexicalTokenListMap = GGS_lexicalExplicitTokenListMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_tokenSortedlist  var_cas_tokenSortedlist ;
      var_cas_tokenSortedlist = GGS_tokenSortedlist ::constructor_emptySortedList () ;
      {
        GGS_lexicalListEntryList::cEnumerator enumerator_35185 (operand_34451->mEntryList, true) ;
        const GGS_lexicalListEntryList::cElement * operand_35185 = NULL ;
        while (((operand_35185 = enumerator_35185.nextObject ()))) {
          macroValidPointer (operand_35185) ;
          GGS_string var_cas_syntaxErrorMessage ;
          var_cas_syntaxErrorMessage = operand_34451->mSyntaxErrorMessage.ggs_string ().reader_stringByReplacingStringByString (inLexique, GGS_string ("%K"), operand_35185->mTerminalSpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (829)) COMMA_SOURCE_FILE_AT_LINE (829)) ;
          GGS_bool var_cas_isEndOfTemplateMark ;
          var_cas_isEndOfTemplateMark = GGS_bool (false) ;
          {
            GGS_lstringlist::cEnumerator enumerator_35384 (operand_35185->mFeatureList, true) ;
            const GGS_lstringlist::cElement * operand_35384 = NULL ;
            while (((operand_35384 = enumerator_35384.nextObject ()))) {
              macroValidPointer (operand_35384) ;
              if (((operand_35384->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (832))).operator_isNotEqual (GGS_string ("templateEndMark"))).isBuiltAndTrue ()) {
                operand_35384->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'templateEndMark' feature is allowed here") COMMA_SOURCE_FILE_AT_LINE (834)) ;
              }else if ((var_cas_isEndOfTemplateMark).isBuiltAndTrue ()) {
                operand_35384->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'templateEndMark' feature is already set") COMMA_SOURCE_FILE_AT_LINE (836)) ;
              }else{
                var_cas_isEndOfTemplateMark = GGS_bool (true) ;
              }
            }
          }
          var_cas_lexiqueAnalysisContext.mTerminalList.addAssign_operation (operand_35185->mTerminalSpelling, var_cas_argumentTypeList, var_cas_syntaxErrorMessage, var_cas_isEndOfTemplateMark, var_cas_terminalStyleIndex) ;
          var_cas_lexiqueAnalysisContext.mTerminalMap.modifier_insertKey (inLexique, operand_35185->mTerminalSpelling, var_cas_argumentTypeList COMMA_SOURCE_FILE_AT_LINE (847)) ;
          var_cas_lexicalTokenListMap.modifier_insertKey (inLexique, operand_35185->mEntrySpelling, operand_35185->mTerminalSpelling, operand_35185->mFeatureList COMMA_SOURCE_FILE_AT_LINE (848)) ;
          var_cas_tokenSortedlist.addAssign_operation (operand_35185->mEntrySpelling.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (849)), operand_35185->mEntrySpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (849)), operand_35185->mTerminalSpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (849))) ;
          var_cas_lexiqueAnalysisContext.mUnicodeStringToGenerate.addAssign_operation (operand_35185->mEntrySpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (850))) ;
        }
      }
      var_cas_lexiqueAnalysisContext.mLexicalTokenListMap.modifier_insertKey (inLexique, operand_34451->mName, var_cas_lexicalTokenListMap, var_cas_tokenSortedlist, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (852)) ;
    }
  }
  {
    GGS_lexicalMessageDeclarationList::cEnumerator enumerator_36507 (var_cas_lexiqueComponentRoot.reader_mLexicalMessageDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (855)), true) ;
    const GGS_lexicalMessageDeclarationList::cElement * operand_36507 = NULL ;
    while (((operand_36507 = enumerator_36507.nextObject ()))) {
      macroValidPointer (operand_36507) ;
      var_cas_lexiqueAnalysisContext.mLexicalMessageMap.modifier_insertKey (inLexique, operand_36507->mMessageName, operand_36507->mMessageValue, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (856)) ;
    }
  }
  {
    GGS_lexicalRuleList::cEnumerator enumerator_36741 (var_cas_lexiqueComponentRoot.reader_mLexicalRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (859)), true) ;
    const GGS_lexicalRuleList::cElement * operand_36741 = NULL ;
    while (((operand_36741 = enumerator_36741.nextObject ()))) {
      macroValidPointer (operand_36741) ;
      const GGS_abstractLexicalRule  temp_36817 = operand_36741->mLexicalRule ;
      if (temp_36817.isBuilt ()) {
        typeCategoryMethod__abstractLexicalRule__checkLexicalRule method = findCategoryMethod__abstractLexicalRule__checkLexicalRule (temp_36817.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_36817 (HERE), var_cas_lexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (860)) ;
        }
      }
    }
  }
  {
    GGS_lexicalMessageMap::cEnumerator enumerator_36939 (var_cas_lexiqueAnalysisContext.reader_mLexicalMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (863)), true) ;
    const GGS_lexicalMessageMap::cElement * operand_36939 = NULL ;
    while (((operand_36939 = enumerator_36939.nextObject ()))) {
      macroValidPointer (operand_36939) ;
      if (((operand_36939->mInfo.mMessageIsUsed).operator_not ()).isBuiltAndTrue ()) {
        operand_36939->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("unused message") COMMA_SOURCE_FILE_AT_LINE (865)) ;
      }
    }
  }
  {
    GGS_metamodelTemplateDelimitorList::cEnumerator enumerator_37154 (var_cas_lexiqueComponentRoot.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (869)), true) ;
    const GGS_metamodelTemplateDelimitorList::cElement * operand_37154 = NULL ;
    while (((operand_37154 = enumerator_37154.nextObject ()))) {
      macroValidPointer (operand_37154) ;
      var_cas_lexiqueAnalysisContext.mUnicodeStringToGenerate.addAssign_operation (operand_37154->mStartString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (870))) ;
      var_cas_lexiqueAnalysisContext.mUnicodeStringToGenerate.addAssign_operation (operand_37154->mEndString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (871))) ;
      GGS_bool var_cas_preservesStartDelimiter ;
      var_cas_preservesStartDelimiter = GGS_bool (false) ;
      {
        GGS_lstringlist::cEnumerator enumerator_37424 (operand_37154->mOptionList, true) ;
        const GGS_lstringlist::cElement * operand_37424 = NULL ;
        while (((operand_37424 = enumerator_37424.nextObject ()))) {
          macroValidPointer (operand_37424) ;
          if (((operand_37424->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (874))).operator_isNotEqual (GGS_string ("preserved"))).isBuiltAndTrue ()) {
            operand_37424->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'preserved' feature is allowed here") COMMA_SOURCE_FILE_AT_LINE (876)) ;
          }else if ((var_cas_preservesStartDelimiter).isBuiltAndTrue ()) {
            operand_37424->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'preserved' feature is already set") COMMA_SOURCE_FILE_AT_LINE (878)) ;
          }else{
            var_cas_preservesStartDelimiter = GGS_bool (true) ;
          }
        }
      }
      var_cas_lexiqueAnalysisContext.mTemplateDelimitorList.addAssign_operation (operand_37154->mStartString, operand_37154->mEndString, var_cas_preservesStartDelimiter) ;
    }
  }
  {
    GGS_templateReplacementList::cEnumerator enumerator_37922 (var_cas_lexiqueComponentRoot.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (885)), true) ;
    const GGS_templateReplacementList::cElement * operand_37922 = NULL ;
    while (((operand_37922 = enumerator_37922.nextObject ()))) {
      macroValidPointer (operand_37922) ;
      var_cas_lexiqueAnalysisContext.mUnicodeStringToGenerate.addAssign_operation (operand_37922->mMatchString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (886))) ;
      var_cas_lexiqueAnalysisContext.mUnicodeStringToGenerate.addAssign_operation (operand_37922->mReplacementString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (887))) ;
    }
  }
  GGS_string var_cas_lexiqueClassName ;
  var_cas_lexiqueClassName = var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (891)) ;
  if (((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string (".h")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_headerZone2 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueAnalysisContext, var_cas_lexiqueComponentRoot), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_headerZone3 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueComponentRoot.reader_mLexicalListDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (907)), var_cas_lexiqueAnalysisContext) COMMA_SOURCE_FILE_AT_LINE (894)) ;
  }
  if (((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string (".cpp")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_implementationZone2 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (921)), var_cas_lexiqueAnalysisContext.reader_mLexicalMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (922)), var_cas_lexiqueAnalysisContext.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (923)), var_cas_lexiqueAnalysisContext.reader_mLexicalTokenListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (924)), var_cas_lexiqueAnalysisContext.reader_mUnicodeStringToGenerate (inLexique COMMA_SOURCE_FILE_AT_LINE (925)), var_cas_lexiqueComponentRoot.reader_mLexicalRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (926)), var_cas_lexiqueAnalysisContext, var_cas_lexiqueComponentRoot), GGS_string ("\n"
      "\n"), GGS_string ("\n"
      "\n") COMMA_SOURCE_FILE_AT_LINE (914)) ;
  }
  if (((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string ("-cocoa.h")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_cocoaHeaderZone2 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueAnalysisContext), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_cocoaHeaderZone3 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueAnalysisContext) COMMA_SOURCE_FILE_AT_LINE (936)) ;
  }
  if (((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string ("-cocoa.m")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_cocoaImplementationZone2 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (961)), var_cas_lexiqueAnalysisContext.reader_mLexicalMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (962)), var_cas_lexiqueAnalysisContext.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (963)), var_cas_lexiqueAnalysisContext.reader_mUnicodeStringToGenerate (inLexique COMMA_SOURCE_FILE_AT_LINE (964)), var_cas_lexiqueComponentRoot.reader_mLexicalRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (965)), var_cas_lexiqueAnalysisContext, var_cas_lexiqueComponentRoot), GGS_string ("\n"
      "\n"), GGS_string ("\n"
      "\n") COMMA_SOURCE_FILE_AT_LINE (954)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileLexiqueComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_lexiqueCompilation (void) {
 enterCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction ((typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction) category_method__lexicalSendTerminalByDefault__checkLexicalDefaultAction, gClassInfoFor__lexicalSendTerminalByDefault.slotID ()) ;
 enterCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction ((typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction) category_method__lexicalErrorByDefault__checkLexicalDefaultAction, gClassInfoFor__lexicalErrorByDefault.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalOrExpression__checkLexicalExpression, gClassInfoFor__lexicalOrExpression.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalCharacterMatch__checkLexicalExpression, gClassInfoFor__lexicalCharacterMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalCharacterSetMatch__checkLexicalExpression, gClassInfoFor__lexicalCharacterSetMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalCharacterIntervalMatch__checkLexicalExpression, gClassInfoFor__lexicalCharacterIntervalMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalStringMatch__checkLexicalExpression, gClassInfoFor__lexicalStringMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalStringNotMatch__checkLexicalExpression, gClassInfoFor__lexicalStringNotMatch.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalAttributeInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalAttributeInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalCharacterInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalCharacterInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalUnsignedInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalUnsignedInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalCurrentCharacterInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalCurrentCharacterInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalFunctionInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalFunctionInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalAttributeInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalAttributeInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalCharacterInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalCharacterInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalUnsignedInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalUnsignedInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalCurrentCharacterInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalCurrentCharacterInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalFunctionInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalFunctionInputArgument.slotID ()) ;
 enterCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument) category_method__lexicalAttributeInputOutputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalAttributeInputOutputArgument.slotID ()) ;
 enterCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument) category_method__lexicalFormalInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalFormalInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalStructuredSendInstruction__checkLexicalInstruction, gClassInfoFor__lexicalStructuredSendInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalSimpleSendInstruction__checkLexicalInstruction, gClassInfoFor__lexicalSimpleSendInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalRepeatInstruction__checkLexicalInstruction, gClassInfoFor__lexicalRepeatInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalSelectInstruction__checkLexicalInstruction, gClassInfoFor__lexicalSelectInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalRoutineInstruction__checkLexicalInstruction, gClassInfoFor__lexicalRoutineInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalLogInstruction__checkLexicalInstruction, gClassInfoFor__lexicalLogInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalRewindInstruction__checkLexicalInstruction, gClassInfoFor__lexicalRewindInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalDropInstruction__checkLexicalInstruction, gClassInfoFor__lexicalDropInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalTagInstruction__checkLexicalInstruction, gClassInfoFor__lexicalTagInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalErrorInstruction__checkLexicalInstruction, gClassInfoFor__lexicalErrorInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalWarningInstruction__checkLexicalInstruction, gClassInfoFor__lexicalWarningInstruction.slotID ()) ;
 enterCategoryMethod__abstractLexicalRule__checkLexicalRule ((typeCategoryMethod__abstractLexicalRule__checkLexicalRule) category_method__lexicalImplicitRule__checkLexicalRule, gClassInfoFor__lexicalImplicitRule.slotID ()) ;
 enterCategoryMethod__abstractLexicalRule__checkLexicalRule ((typeCategoryMethod__abstractLexicalRule__checkLexicalRule) category_method__lexicalExplicitRule__checkLexicalRule, gClassInfoFor__lexicalExplicitRule.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_lexiqueCompilation (prologueRoutineFor_lexiqueCompilation,
                                   NULL) ;

//---------------------------------------------------------------------------*

