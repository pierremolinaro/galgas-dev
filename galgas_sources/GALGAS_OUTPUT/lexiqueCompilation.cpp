//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'lexiqueCompilation.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 1st, 2009, at 17h41'23"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "lexiqueCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "lexiqueCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "lexiqueLL1grammar.h"

//--- START OF USER ZONE 2

//---------------------------------------------------------------------------*

//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalSendDefaultAction.checkLexicalDefaultAction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction> gDispatchTableFor__lexicalSendDefaultAction__checkLexicalDefaultAction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__lexicalSendDefaultAction__checkLexicalDefaultAction.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction
findCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__lexicalSendDefaultAction__checkLexicalDefaultAction.count ()) {
    result = gDispatchTableFor__lexicalSendDefaultAction__checkLexicalDefaultAction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (superClassPtr) ;
      gDispatchTableFor__lexicalSendDefaultAction__checkLexicalDefaultAction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalSendTerminalByDefault.checkLexicalDefaultAction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSendTerminalByDefault__checkLexicalDefaultAction (C_Compiler & inLexique,
                                const cPtr_lexicalSendTerminalByDefault * operand_2197,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2197 != NULL) {
    GGS_lexicalTypeList  automatic_var_0 ;
    const GGS_terminalMap  _temp_2305 = var_cas_ioLexiqueAnalysisContext.reader_mTerminalMap (inLexique COMMA_SOURCE_FILE_AT_LINE (40)) ;
    if (_temp_2305.isBuilt ()) {
      _temp_2305 (HERE)->method_searchKey (inLexique, operand_2197->mDefaultSentTerminal, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (40)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalErrorByDefault.checkLexicalDefaultAction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalErrorByDefault__checkLexicalDefaultAction (C_Compiler & inLexique,
                                const cPtr_lexicalErrorByDefault * operand_2491,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2491 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_2606 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_2491->mDefaultErrorMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (48)) ;
    if (NULL != operand_2606) {
      operand_2606->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalExpression.checkLexicalExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalExpression__checkLexicalExpression> gDispatchTableFor__lexicalExpression__checkLexicalExpression ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalExpression__checkLexicalExpression (typeCategoryMethod__lexicalExpression__checkLexicalExpression inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__lexicalExpression__checkLexicalExpression.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalExpression__checkLexicalExpression
findCategoryMethod__lexicalExpression__checkLexicalExpression (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalExpression__checkLexicalExpression result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__lexicalExpression__checkLexicalExpression.count ()) {
    result = gDispatchTableFor__lexicalExpression__checkLexicalExpression (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalExpression__checkLexicalExpression (superClassPtr) ;
      gDispatchTableFor__lexicalExpression__checkLexicalExpression.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@lexicalOrExpression.checkLexicalExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalOrExpression__checkLexicalExpression (C_Compiler & inLexique,
                                const cPtr_lexicalOrExpression * operand_3200,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3200 != NULL) {
    const GGS_lexicalExpression  _temp_3294 = operand_3200->mLeftOperand ;
    if (_temp_3294.isBuilt ()) {
      typeCategoryMethod__lexicalExpression__checkLexicalExpression _method = findCategoryMethod__lexicalExpression__checkLexicalExpression (_temp_3294._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (inLexique, _temp_3294 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (66)) ;
      }
    }
    const GGS_lexicalExpression  _temp_3365 = operand_3200->mRightOperand ;
    if (_temp_3365.isBuilt ()) {
      typeCategoryMethod__lexicalExpression__checkLexicalExpression _method = findCategoryMethod__lexicalExpression__checkLexicalExpression (_temp_3365._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (inLexique, _temp_3365 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (67)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalCharacterMatch.checkLexicalExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterMatch__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalCharacterMatch * operand_3551,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3551 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalCharacterSetMatch.checkLexicalExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterSetMatch__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalCharacterSetMatch * operand_3771,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3771 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@lexicalCharacterIntervalMatch.checkLexicalExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterIntervalMatch__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalCharacterIntervalMatch * operand_3996,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3996 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@lexicalStringMatch.checkLexicalExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStringMatch__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalStringMatch * operand_4210,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4210 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalStringNotMatch.checkLexicalExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStringNotMatch__checkLexicalExpression (C_Compiler & inLexique,
                                const cPtr_lexicalStringNotMatch * operand_4427,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4427 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_4535 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_4427->mErrorMessage, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (103)) ;
    if (NULL != operand_4535) {
      operand_4535->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalRoutineOrFunctionFormalInputArgument.checkLexicalRoutineOrFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineOrFunctionCallArgument> gDispatchTableFor__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineOrFunctionCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineOrFunctionCallArgument (typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineOrFunctionCallArgument inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineOrFunctionCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineOrFunctionCallArgument
findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineOrFunctionCallArgument (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineOrFunctionCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineOrFunctionCallArgument.count ()) {
    result = gDispatchTableFor__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineOrFunctionCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineOrFunctionCallArgument (superClassPtr) ;
      gDispatchTableFor__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineOrFunctionCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputArgument.checkLexicalRoutineOrFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputArgument__checkLexicalRoutineOrFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalAttributeInputArgument * operand_5250,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5250 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  _temp_5495 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (125)) ;
    if (_temp_5495.isBuilt ()) {
      _temp_5495 (HERE)->method_searchKey (inLexique, operand_5250->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (125)) ;
    }
    if (((var_cas_attributeLexicalType)._operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_5250->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is "))._operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (132))))._operator_concat (GGS_string (" type, but lexical routine prototype requires ")))._operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (134))))._operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (136)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCharacterInputArgument.checkLexicalRoutineOrFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterInputArgument__checkLexicalRoutineOrFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCharacterInputArgument * operand_6058,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6058 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE))._operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_6058->mCharacter.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal character has @char "))._operator_concat (GGS_string (" type, but lexical routine prototype requires an ")))._operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (149))))._operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (151)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCurrentCharacterInputArgument.checkLexicalRoutineOrFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCurrentCharacterInputArgument__checkLexicalRoutineOrFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCurrentCharacterInputArgument * operand_6680,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6680 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE))._operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_6680->mLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, current character value has @char "))._operator_concat (GGS_string (" type, but lexical routine prototype requires an ")))._operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (164))))._operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (166)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFunctionInputArgument.checkLexicalRoutineOrFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFunctionInputArgument__checkLexicalRoutineOrFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalFunctionInputArgument * operand_7297,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7297 != NULL) {
    GGS_lexicalTypeList  var_cas_lexicalFormalTypeList ;
    GGS_lexicalTypeEnum var_cas_returnedLexicalFormalType ;
    const GGS_lexicalFunctionMap  _temp_7589 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (178)) ;
    if (_temp_7589.isBuilt ()) {
      _temp_7589 (HERE)->method_searchKey (inLexique, operand_7297->mFunctionName, var_cas_lexicalFormalTypeList, var_cas_returnedLexicalFormalType COMMA_SOURCE_FILE_AT_LINE (178)) ;
    }
    if (((var_cas_returnedLexicalFormalType)._operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_7297->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, the function returns an "))._operator_concat (var_cas_returnedLexicalFormalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (186))))._operator_concat (GGS_string (" value, but lexical routine prototype requires an ")))._operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (188))))._operator_concat (GGS_string (" value")) COMMA_SOURCE_FILE_AT_LINE (190)) ;
    }
    if (((var_cas_lexicalFormalTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (192)))._operator_isNotEqual (operand_7297->mFunctionActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (192)))).isBuiltAndTrue ()) {
      operand_7297->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical function names "))._operator_concat (operand_7297->mFunctionActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (194)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (194))))._operator_concat (GGS_string (" actual argument(s), but the prototype requires ")))._operator_concat (var_cas_lexicalFormalTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (196)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (196))))._operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (197)) ;
    }
    {
      GGS_lexicalTypeList::cEnumerator enumerator_8477 (var_cas_lexicalFormalTypeList, true) ;
      const GGS_lexicalTypeList::cElement * operand_8477 = NULL ;
      GGS_lexicalFunctionCallActualArgumentList::cEnumerator enumerator_8506 (operand_7297->mFunctionActualArgumentList, true) ;
      const GGS_lexicalFunctionCallActualArgumentList::cElement * operand_8506 = NULL ;
      while (((operand_8477 = enumerator_8477.nextObject ()))
          && ((operand_8506 = enumerator_8506.nextObject ()))) {
        macroValidPointer (operand_8477) ;
        macroValidPointer (operand_8506) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@abstractLexicalRoutineActualArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument> gDispatchTableFor__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument
findCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument.count ()) {
    result = gDispatchTableFor__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (superClassPtr) ;
      gDispatchTableFor__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputOutputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputOutputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalAttributeInputOutputArgument * operand_9393,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalArgumentMode  var_cas_inLexicalRoutineFormalArgumentMode,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9393 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  _temp_9697 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (227)) ;
    if (_temp_9697.isBuilt ()) {
      _temp_9697 (HERE)->method_searchKey (inLexique, operand_9393->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (227)) ;
    }
    if (((var_cas_attributeLexicalType)._operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_9393->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is "))._operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (234))))._operator_concat (GGS_string (" type, but lexical routine prototype requires ")))._operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (236))))._operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (238)) ;
    }
    if (((var_cas_inLexicalRoutineFormalArgumentMode)._operator_isNotEqual (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
      operand_9393->mActualPassingModeLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the output mode (!) is required here, not an output/input mode") COMMA_SOURCE_FILE_AT_LINE (242)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFormalInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFormalInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalFormalInputArgument * operand_10480,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalArgumentMode  var_cas_inLexicalRoutineFormalArgumentMode,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10480 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalRoutineOrFunctionFormalInputArgument  _temp_10806 = operand_10480->mRoutineOrFunctionFormalInputArgument ;
    if (_temp_10806.isBuilt ()) {
      typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineOrFunctionCallArgument _method = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineOrFunctionCallArgument (_temp_10806._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (inLexique, _temp_10806 (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_inLexicalRoutineFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (254)) ;
      }
    }
    if (((var_cas_inLexicalRoutineFormalArgumentMode)._operator_isNotEqual (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
      operand_10480->mActualPassingModeLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the output/input mode (!\?) is required here, not an input mode") COMMA_SOURCE_FILE_AT_LINE (261)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalInstruction.checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalInstruction__checkLexicalInstruction> gDispatchTableFor__lexicalInstruction__checkLexicalInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalInstruction__checkLexicalInstruction (typeCategoryMethod__lexicalInstruction__checkLexicalInstruction inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__lexicalInstruction__checkLexicalInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalInstruction__checkLexicalInstruction
findCategoryMethod__lexicalInstruction__checkLexicalInstruction (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalInstruction__checkLexicalInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__lexicalInstruction__checkLexicalInstruction.count ()) {
    result = gDispatchTableFor__lexicalInstruction__checkLexicalInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (superClassPtr) ;
      gDispatchTableFor__lexicalInstruction__checkLexicalInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalStructuredSendInstruction.checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStructuredSendInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalStructuredSendInstruction * operand_11635,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11635 != NULL) {
    {
      GGS_lexicalSendSearchList::cEnumerator enumerator_11723 (operand_11635->mLexicalSendSearchList, true) ;
      const GGS_lexicalSendSearchList::cElement * operand_11723 = NULL ;
      while (((operand_11723 = enumerator_11723.nextObject ()))) {
        macroValidPointer (operand_11723) ;
        GGS_lexicalTypeEnum automatic_var_1 ;
        const GGS_lexicalAttributeMap  _temp_11789 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (278)) ;
        if (_temp_11789.isBuilt ()) {
          _temp_11789 (HERE)->method_searchKey (inLexique, operand_11723->mAttributeName, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (278)) ;
        }
      }
    }
    const GGS_lexicalSendDefaultAction  _temp_11882 = operand_11635->mLexicalSendDefaultAction ;
    if (_temp_11882.isBuilt ()) {
      typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction _method = findCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (_temp_11882._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (inLexique, _temp_11882 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (280)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@lexicalSimpleSendInstruction.checkLexicalInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSimpleSendInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalSimpleSendInstruction * operand_12075,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12075 != NULL) {
    GGS_lexicalTypeList  automatic_var_2 ;
    const GGS_terminalMap  _temp_12183 = var_cas_ioLexiqueAnalysisContext.reader_mTerminalMap (inLexique COMMA_SOURCE_FILE_AT_LINE (288)) ;
    if (_temp_12183.isBuilt ()) {
      _temp_12183 (HERE)->method_searchKey (inLexique, operand_12075->mSentTerminal, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (288)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalRepeatInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRepeatInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalRepeatInstruction * operand_12363,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12363 != NULL) {
    {
      GGS_lexicalWhileBranchList::cEnumerator enumerator_12452 (operand_12363->mLexicalWhileBranchList, true) ;
      const GGS_lexicalWhileBranchList::cElement * operand_12452 = NULL ;
      while (((operand_12452 = enumerator_12452.nextObject ()))) {
        macroValidPointer (operand_12452) ;
        const GGS_lexicalExpression  _temp_12500 = operand_12452->mWhileExpression ;
        if (_temp_12500.isBuilt ()) {
          typeCategoryMethod__lexicalExpression__checkLexicalExpression _method = findCategoryMethod__lexicalExpression__checkLexicalExpression (_temp_12500._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (inLexique, _temp_12500 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (297)) ;
          }
        }
        {
          GGS_lexicalInstructionList::cEnumerator enumerator_12565 (operand_12452->mWhileInstructionList, true) ;
          const GGS_lexicalInstructionList::cElement * operand_12565 = NULL ;
          while (((operand_12565 = enumerator_12565.nextObject ()))) {
            macroValidPointer (operand_12565) ;
            const GGS_lexicalInstruction  _temp_12612 = operand_12565->mInstruction ;
            if (_temp_12612.isBuilt ()) {
              typeCategoryMethod__lexicalInstruction__checkLexicalInstruction _method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (_temp_12612._galgasObjectRunTimeInfo ()) ;
              if (_method != NULL) {
                _method (inLexique, _temp_12612 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (299)) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_lexicalInstructionList::cEnumerator enumerator_12712 (operand_12363->mRepeatedInstructionList, true) ;
      const GGS_lexicalInstructionList::cElement * operand_12712 = NULL ;
      while (((operand_12712 = enumerator_12712.nextObject ()))) {
        macroValidPointer (operand_12712) ;
        const GGS_lexicalInstruction  _temp_12757 = operand_12712->mInstruction ;
        if (_temp_12757.isBuilt ()) {
          typeCategoryMethod__lexicalInstruction__checkLexicalInstruction _method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (_temp_12757._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (inLexique, _temp_12757 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (303)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalSelectInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSelectInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalSelectInstruction * operand_12963,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12963 != NULL) {
    {
      GGS_lexicalSelectBranchList::cEnumerator enumerator_13053 (operand_12963->mLexicalSelectBranchList, true) ;
      const GGS_lexicalSelectBranchList::cElement * operand_13053 = NULL ;
      while (((operand_13053 = enumerator_13053.nextObject ()))) {
        macroValidPointer (operand_13053) ;
        {
          GGS_lexicalInstructionList::cEnumerator enumerator_13091 (operand_13053->mSelectInstructionList, true) ;
          const GGS_lexicalInstructionList::cElement * operand_13091 = NULL ;
          while (((operand_13091 = enumerator_13091.nextObject ()))) {
            macroValidPointer (operand_13091) ;
            const GGS_lexicalInstruction  _temp_13138 = operand_13091->mInstruction ;
            if (_temp_13138.isBuilt ()) {
              typeCategoryMethod__lexicalInstruction__checkLexicalInstruction _method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (_temp_13138._galgasObjectRunTimeInfo ()) ;
              if (_method != NULL) {
                _method (inLexique, _temp_13138 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (314)) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_lexicalInstructionList::cEnumerator enumerator_13237 (operand_12963->mDefaultInstructionList, true) ;
      const GGS_lexicalInstructionList::cElement * operand_13237 = NULL ;
      while (((operand_13237 = enumerator_13237.nextObject ()))) {
        macroValidPointer (operand_13237) ;
        const GGS_lexicalInstruction  _temp_13282 = operand_13237->mInstruction ;
        if (_temp_13282.isBuilt ()) {
          typeCategoryMethod__lexicalInstruction__checkLexicalInstruction _method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (_temp_13282._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (inLexique, _temp_13282 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (318)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalRoutineInstruction.checkLexicalInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRoutineInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalRoutineInstruction * operand_13489,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13489 != NULL) {
    GGS_lexicalRoutineFormalArgumentList  var_cas_lexicalRoutineFormalArgumentList ;
    GGS_stringlist  var_cas_routineErrorMessageList ;
    const GGS_lexicalRoutineMap  _temp_13721 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalRoutineMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (329)) ;
    if (_temp_13721.isBuilt ()) {
      _temp_13721 (HERE)->method_searchKey (inLexique, operand_13489->mActionName, var_cas_lexicalRoutineFormalArgumentList, var_cas_routineErrorMessageList COMMA_SOURCE_FILE_AT_LINE (329)) ;
    }
    if (((var_cas_lexicalRoutineFormalArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (335)))._operator_isNotEqual (operand_13489->mActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (335)))).isBuiltAndTrue ()) {
      operand_13489->mActionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical routine call names "))._operator_concat (operand_13489->mActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (337)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (337))))._operator_concat (GGS_string (" actual argument(s), but the lexical routine prototype requires ")))._operator_concat (var_cas_lexicalRoutineFormalArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (339)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (339))))._operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (340)) ;
    }
    {
      GGS_lexicalRoutineFormalArgumentList::cEnumerator enumerator_14293 (var_cas_lexicalRoutineFormalArgumentList, true) ;
      const GGS_lexicalRoutineFormalArgumentList::cElement * operand_14293 = NULL ;
      GGS_lexicalRoutineCallActualArgumentList::cEnumerator enumerator_14314 (operand_13489->mActualArgumentList, true) ;
      const GGS_lexicalRoutineCallActualArgumentList::cElement * operand_14314 = NULL ;
      while (((operand_14293 = enumerator_14293.nextObject ()))
          && ((operand_14314 = enumerator_14314.nextObject ()))) {
        macroValidPointer (operand_14293) ;
        macroValidPointer (operand_14314) ;
        const GGS_abstractLexicalRoutineActualArgument  _temp_14384 = operand_14314->mLexicalRoutineActualArgument ;
        if (_temp_14384.isBuilt ()) {
          typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument _method = findCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (_temp_14384._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (inLexique, _temp_14384 (HERE), var_cas_ioLexiqueAnalysisContext, operand_14293->mLexicalArgumentMode, operand_14293->mLexicalType COMMA_SOURCE_FILE_AT_LINE (343)) ;
          }
        }
      }
    }
    if (((var_cas_routineErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (350)))._operator_isNotEqual (operand_13489->mErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (350)))).isBuiltAndTrue ()) {
      operand_13489->mActionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical routine call names "))._operator_concat (operand_13489->mErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (352)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (352))))._operator_concat (GGS_string (" error message(s), but the lexical routine prototype requires ")))._operator_concat (var_cas_routineErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (354)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (354))))._operator_concat (GGS_string (" error message(s)")) COMMA_SOURCE_FILE_AT_LINE (355)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_14922 (operand_13489->mErrorMessageList, true) ;
      const GGS_lstringlist::cElement * operand_14922 = NULL ;
      while (((operand_14922 = enumerator_14922.nextObject ()))) {
        macroValidPointer (operand_14922) ;
        elementOf_GGS_lexicalMessageMap * operand_14987 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_14922->mValue, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (358)) ;
        if (NULL != operand_14987) {
          operand_14987->mInfo.mMessageIsUsed = GGS_bool (true) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalLogInstruction.checkLexicalInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalLogInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalLogInstruction * operand_15230,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15230 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalRewindInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRewindInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalRewindInstruction * operand_15451,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15451 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalDropInstruction.checkLexicalInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalDropInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalDropInstruction * operand_15670,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15670 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalTagInstruction.checkLexicalInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalTagInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalTagInstruction * operand_15888,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15888 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalErrorInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalErrorInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalErrorInstruction * operand_16108,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16108 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_16216 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_16108->mErrorMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (397)) ;
    if (NULL != operand_16216) {
      operand_16216->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalWarningInstruction.checkLexicalInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalWarningInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalWarningInstruction * operand_16450,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16450 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_16558 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_16450->mWarningMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (407)) ;
    if (NULL != operand_16558) {
      operand_16558->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@abstractLexicalRule.checkLexicalRule'  *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__abstractLexicalRule__checkLexicalRule> gDispatchTableFor__abstractLexicalRule__checkLexicalRule ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__abstractLexicalRule__checkLexicalRule (typeCategoryMethod__abstractLexicalRule__checkLexicalRule inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__abstractLexicalRule__checkLexicalRule.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__abstractLexicalRule__checkLexicalRule
findCategoryMethod__abstractLexicalRule__checkLexicalRule (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__abstractLexicalRule__checkLexicalRule result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__abstractLexicalRule__checkLexicalRule.count ()) {
    result = gDispatchTableFor__abstractLexicalRule__checkLexicalRule (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__abstractLexicalRule__checkLexicalRule (superClassPtr) ;
      gDispatchTableFor__abstractLexicalRule__checkLexicalRule.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@lexicalImplicitRule.checkLexicalRule'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalImplicitRule__checkLexicalRule (C_Compiler &,
                                const cPtr_lexicalImplicitRule * operand_17133,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17133 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@lexicalExplicitRule.checkLexicalRule'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalExplicitRule__checkLexicalRule (C_Compiler & inLexique,
                                const cPtr_lexicalExplicitRule * operand_17342,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17342 != NULL) {
    {
      GGS_lexicalInstructionList::cEnumerator enumerator_17424 (operand_17342->mInstructionList, true) ;
      const GGS_lexicalInstructionList::cElement * operand_17424 = NULL ;
      while (((operand_17424 = enumerator_17424.nextObject ()))) {
        macroValidPointer (operand_17424) ;
        const GGS_lexicalInstruction  _temp_17469 = operand_17424->mInstruction ;
        if (_temp_17469.isBuilt ()) {
          typeCategoryMethod__lexicalInstruction__checkLexicalInstruction _method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (_temp_17469._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (inLexique, _temp_17469 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (433)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "buildLexicalRoutineMap"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildLexicalRoutineMap (C_Compiler & inLexique,
                                GGS_lexicalRoutineMap  & var_cas_outLexicalRoutineMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildLexicalRoutineMap at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outLexicalRoutineMap = GGS_lexicalRoutineMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_lexicalRoutineFormalArgumentList  var_cas_mLexicalRoutineFormalArgumentList ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  GGS_stringlist  var_cas_mErrorMessageList ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inErrorCodeGreaterThan255")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inErrorNotHexDigitCharacter")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterHexDigitIntoASCIIcharacter"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (450)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inErrorCodeGreaterThan255")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inErrorNotHexDigitCharacter")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterDigitIntoASCIIcharacter"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (462)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterCharacterIntoString"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (472)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_double (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inConversionError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertStringToDouble"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (483)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterCharacterIntoCharacter"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (493)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("negateSInt"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (503)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint64 (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("negateSInt64"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (513)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertUIntToSInt"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (524)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint64 (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint64 (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertUInt64ToSInt64"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (535)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotDecimalDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterDigitIntoUInt"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (547)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotDecimalDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterDigitIntoUInt64"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (559)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotHexDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterHexDigitIntoUInt"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (571)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotHexDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterHexDigitIntoUInt64"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (583)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotDecimalDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertDecimalStringIntoUInt"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (595)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotDecimalDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertDecimalStringIntoSInt"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (607)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotDecimalDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertDecimalStringIntoUInt64"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (619)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint64 (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotDecimalDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertDecimalStringIntoSInt64"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (631)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotBinDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterBinDigitIntoUInt"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (643)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotBinDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterBinDigitIntoUInt64"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (655)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotOctDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterOctDigitIntoUInt"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (667)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotOctDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterOctDigitIntoUInt64"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (679)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inResultTooLargeError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("multiplyUInt"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (690)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inResultTooLargeError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("multiplyUInt64"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (701)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotHexDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertHexStringIntoUInt"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (713)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotHexDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertHexStringIntoUInt64"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (725)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotHexDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertHexStringIntoSInt"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (737)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint64 (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotHexDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertHexStringIntoSInt64"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (749)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inUnassignedUnicodeValueError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertUnsignedNumberToUnicodeChar"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (760)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inUnassignedHTMLSequenceError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertHTMLSequenceToUnicodeCharacter"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (771)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE)) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE)) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("codePointToUnicode"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList COMMA_SOURCE_FILE_AT_LINE (781)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildLexicalRoutineMap\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "buildLexicalFunctionMap"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildLexicalFunctionMap (C_Compiler & inLexique,
                                GGS_lexicalFunctionMap  & var_cas_outLexicalFunctionMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildLexicalFunctionMap at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outLexicalFunctionMap = GGS_lexicalFunctionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_lexicalTypeList  var_cas_lexicalTypeList ;
  var_cas_lexicalTypeList = GGS_lexicalTypeList ::constructor_emptyList () ;
  var_cas_lexicalTypeList._addAssign_operation (GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)) ;
  var_cas_outLexicalFunctionMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("toLower"), GGS_location (inLexique) COMMA_HERE), var_cas_lexicalTypeList, GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (797)) ;
  var_cas_lexicalTypeList = GGS_lexicalTypeList ::constructor_emptyList () ;
  var_cas_lexicalTypeList._addAssign_operation (GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)) ;
  var_cas_outLexicalFunctionMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("toUpper"), GGS_location (inLexique) COMMA_HERE), var_cas_lexicalTypeList, GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (805)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildLexicalFunctionMap\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "compileLexiqueComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileLexiqueComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  /* var_cas_inOutputDirectory */ COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileLexiqueComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lexiqueComponentRoot  var_cas_lexiqueComponentRoot ;
  const GGS_string _depExtension = GGS_string ("") ;
  const GGS_string _depPath = GGS_string ("") ;
  if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
    lexiqueLL1grammar::_performSourceFileParsing_ (inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_inSourceFile,
                                  var_cas_lexiqueComponentRoot
                                  COMMA_SOURCE_FILE_AT_LINE (821)) ;
  }
  GGS_lstring  var_cas_componentName ;
  var_cas_componentName = var_cas_lexiqueComponentRoot.reader_mLexiqueComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (823)) ;
  GGS_string var_cas_basename ;
  var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (824)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (824)) ;
  if (((var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (825)))._operator_isNotEqual (var_cas_basename)).isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS checks "
      "the component name ('"))._operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (827))))._operator_concat (GGS_string ("') against the source file base name ('")))._operator_concat (var_cas_basename))._operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (829)) ;
  }
  GGS_lexicalTypeMap  var_cas_lexicalTypeMap ;
  var_cas_lexicalTypeMap = GGS_lexicalTypeMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (833)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("char"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (834)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (835)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint64"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (836)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (837)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint64"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint64 (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (838)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("double"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_double (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (839)) ;
  GGS_lexicalRoutineMap  var_cas_lexicalRoutineMap ;
  ::routine_buildLexicalRoutineMap (inLexique,  var_cas_lexicalRoutineMap COMMA_SOURCE_FILE_AT_LINE (842)) ;
  GGS_lexicalFunctionMap  var_cas_lexicalFunctionMap ;
  ::routine_buildLexicalFunctionMap (inLexique,  var_cas_lexicalFunctionMap COMMA_SOURCE_FILE_AT_LINE (845)) ;
  GGS_lexiqueAnalysisContext var_cas_lexiqueAnalysisContext ;
  var_cas_lexiqueAnalysisContext = GGS_lexiqueAnalysisContext::constructor_new (var_cas_lexicalRoutineMap, var_cas_lexicalFunctionMap, GGS_lexicalMessageMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_terminalMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_lexicalAttributeMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_lexicalExplicitTokenListMapMap ::constructor_emptyMap (inLexique COMMA_HERE)) ;
  {
    GGS_lexicalAttributeList::cEnumerator enumerator_40488 (var_cas_lexiqueComponentRoot.reader_mLexicalAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (855)), true) ;
    const GGS_lexicalAttributeList::cElement * operand_40488 = NULL ;
    while (((operand_40488 = enumerator_40488.nextObject ()))) {
      macroValidPointer (operand_40488) ;
      if ((var_cas_lexicalTypeMap.reader_hasKey (inLexique, operand_40488->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (856)) COMMA_SOURCE_FILE_AT_LINE (856))).isBuiltAndTrue ()) {
        GGS_lexicalTypeEnum var_cas_lexicalType ;
        const GGS_lexicalTypeMap  _temp_40659 = var_cas_lexicalTypeMap ;
        if (_temp_40659.isBuilt ()) {
          _temp_40659 (HERE)->method_searchKey (inLexique, operand_40488->mTypeName, var_cas_lexicalType COMMA_SOURCE_FILE_AT_LINE (858)) ;
        }
        var_cas_lexiqueAnalysisContext.mLexicalAttributeMap.modifier_insertKey (inLexique, operand_40488->mName, var_cas_lexicalType COMMA_SOURCE_FILE_AT_LINE (859)) ;
      }else{
        GGS_string var_cas_m ;
        var_cas_m = GGS_string ("") ;
        var_cas_m.appendCString ("the @") ;
        var_cas_m._dotAssign_operation (operand_40488->mTypeName) ;
        var_cas_m.appendCString (" type is not a valid lexical attribute type; are allowed:") ;
        GGS_bool var_cas_firstLoop ;
        var_cas_firstLoop = GGS_bool (true) ;
        {
          GGS_lexicalTypeMap::cEnumerator enumerator_40961 (var_cas_lexicalTypeMap, true) ;
          const GGS_lexicalTypeMap::cElement * operand_40961 = enumerator_40961.nextObject () ;
          if ((operand_40961 != NULL)) {
            bool _foreach_loop_40961 ;
            do{
              macroValidPointer (operand_40961) ;
              var_cas_m.appendCString (" @") ;
              var_cas_m._dotAssign_operation (operand_40961->mKey) ;
              operand_40961 = enumerator_40961.nextObject () ;
              _foreach_loop_40961 = ((operand_40961 != NULL)) ;
              if (_foreach_loop_40961) {
                var_cas_m.appendCString (",") ;
              }
            }while (_foreach_loop_40961) ;
          }
        }
        operand_40488->mTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_m COMMA_SOURCE_FILE_AT_LINE (870)) ;
      }
    }
  }
  {
    GGS_terminalDeclarationList::cEnumerator enumerator_41171 (var_cas_lexiqueComponentRoot.reader_mTerminalDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (873)), true) ;
    const GGS_terminalDeclarationList::cElement * operand_41171 = NULL ;
    while (((operand_41171 = enumerator_41171.nextObject ()))) {
      macroValidPointer (operand_41171) ;
      GGS_lexicalTypeList  var_cas_argumentTypeList ;
      var_cas_argumentTypeList = GGS_lexicalTypeList ::constructor_emptyList () ;
      {
        GGS_lstringlist::cEnumerator enumerator_41303 (operand_41171->mSentAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_41303 = NULL ;
        while (((operand_41303 = enumerator_41303.nextObject ()))) {
          macroValidPointer (operand_41303) ;
          GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
          const GGS_lexicalAttributeMap  _temp_41442 = var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (877)) ;
          if (_temp_41442.isBuilt ()) {
            _temp_41442 (HERE)->method_searchKey (inLexique, operand_41303->mValue, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (877)) ;
          }
          var_cas_argumentTypeList._addAssign_operation (var_cas_attributeLexicalType) ;
        }
      }
      var_cas_lexiqueAnalysisContext.mTerminalMap.modifier_insertKey (inLexique, operand_41171->mName, var_cas_argumentTypeList COMMA_SOURCE_FILE_AT_LINE (880)) ;
    }
  }
  {
    GGS_lexicalListDeclarationList::cEnumerator enumerator_41660 (var_cas_lexiqueComponentRoot.reader_mLexicalListDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (882)), true) ;
    const GGS_lexicalListDeclarationList::cElement * operand_41660 = NULL ;
    while (((operand_41660 = enumerator_41660.nextObject ()))) {
      macroValidPointer (operand_41660) ;
      GGS_lexicalTypeList  var_cas_argumentTypeList ;
      var_cas_argumentTypeList = GGS_lexicalTypeList ::constructor_emptyList () ;
      {
        GGS_lstringlist::cEnumerator enumerator_41795 (operand_41660->mSentAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_41795 = NULL ;
        while (((operand_41795 = enumerator_41795.nextObject ()))) {
          macroValidPointer (operand_41795) ;
          GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
          const GGS_lexicalAttributeMap  _temp_41933 = var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (886)) ;
          if (_temp_41933.isBuilt ()) {
            _temp_41933 (HERE)->method_searchKey (inLexique, operand_41795->mValue, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (886)) ;
          }
          var_cas_argumentTypeList._addAssign_operation (var_cas_attributeLexicalType) ;
        }
      }
      GGS_lexicalExplicitTokenListMap  var_cas_lexicalTokenListMap ;
      var_cas_lexicalTokenListMap = GGS_lexicalExplicitTokenListMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      {
        GGS_lexicalListEntryList::cEnumerator enumerator_42131 (operand_41660->mEntryList, true) ;
        const GGS_lexicalListEntryList::cElement * operand_42131 = NULL ;
        while (((operand_42131 = enumerator_42131.nextObject ()))) {
          macroValidPointer (operand_42131) ;
          var_cas_lexiqueAnalysisContext.mTerminalMap.modifier_insertKey (inLexique, operand_42131->mTerminalSpelling, var_cas_argumentTypeList COMMA_SOURCE_FILE_AT_LINE (891)) ;
          var_cas_lexicalTokenListMap.modifier_insertKey (inLexique, operand_42131->mEntrySpelling, operand_42131->mTerminalSpelling, operand_42131->mFeatureList COMMA_SOURCE_FILE_AT_LINE (892)) ;
        }
      }
      var_cas_lexiqueAnalysisContext.mLexicalTokenListMapMap.modifier_insertKey (inLexique, operand_41660->mName, var_cas_lexicalTokenListMap COMMA_SOURCE_FILE_AT_LINE (894)) ;
    }
  }
  {
    GGS_lexicalMessageDeclarationList::cEnumerator enumerator_42520 (var_cas_lexiqueComponentRoot.reader_mLexicalMessageDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (897)), true) ;
    const GGS_lexicalMessageDeclarationList::cElement * operand_42520 = NULL ;
    while (((operand_42520 = enumerator_42520.nextObject ()))) {
      macroValidPointer (operand_42520) ;
      var_cas_lexiqueAnalysisContext.mLexicalMessageMap.modifier_insertKey (inLexique, operand_42520->mMessageName, operand_42520->mMessageValue, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (898)) ;
    }
  }
  {
    GGS_lexicalRuleList::cEnumerator enumerator_42754 (var_cas_lexiqueComponentRoot.reader_mLexicalRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (901)), true) ;
    const GGS_lexicalRuleList::cElement * operand_42754 = NULL ;
    while (((operand_42754 = enumerator_42754.nextObject ()))) {
      macroValidPointer (operand_42754) ;
      const GGS_abstractLexicalRule  _temp_42830 = operand_42754->mLexicalRule ;
      if (_temp_42830.isBuilt ()) {
        typeCategoryMethod__abstractLexicalRule__checkLexicalRule _method = findCategoryMethod__abstractLexicalRule__checkLexicalRule (_temp_42830._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (inLexique, _temp_42830 (HERE), var_cas_lexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (902)) ;
        }
      }
    }
  }
  {
    GGS_lexicalMessageMap::cEnumerator enumerator_42952 (var_cas_lexiqueAnalysisContext.reader_mLexicalMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (905)), true) ;
    const GGS_lexicalMessageMap::cElement * operand_42952 = NULL ;
    while (((operand_42952 = enumerator_42952.nextObject ()))) {
      macroValidPointer (operand_42952) ;
      if (((operand_42952->mInfo.mMessageIsUsed)._operator_not ()).isBuiltAndTrue ()) {
        operand_42952->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("unused message") COMMA_SOURCE_FILE_AT_LINE (907)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileLexiqueComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_lexiqueCompilation (void) {
 enterCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction ((typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction) category_method__lexicalSendTerminalByDefault__checkLexicalDefaultAction, gClassInfoFor__lexicalSendTerminalByDefault.slotID ()) ;
 enterCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction ((typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction) category_method__lexicalErrorByDefault__checkLexicalDefaultAction, gClassInfoFor__lexicalErrorByDefault.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalOrExpression__checkLexicalExpression, gClassInfoFor__lexicalOrExpression.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalCharacterMatch__checkLexicalExpression, gClassInfoFor__lexicalCharacterMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalCharacterSetMatch__checkLexicalExpression, gClassInfoFor__lexicalCharacterSetMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalCharacterIntervalMatch__checkLexicalExpression, gClassInfoFor__lexicalCharacterIntervalMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalStringMatch__checkLexicalExpression, gClassInfoFor__lexicalStringMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalStringNotMatch__checkLexicalExpression, gClassInfoFor__lexicalStringNotMatch.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineOrFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineOrFunctionCallArgument) category_method__lexicalAttributeInputArgument__checkLexicalRoutineOrFunctionCallArgument, gClassInfoFor__lexicalAttributeInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineOrFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineOrFunctionCallArgument) category_method__lexicalCharacterInputArgument__checkLexicalRoutineOrFunctionCallArgument, gClassInfoFor__lexicalCharacterInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineOrFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineOrFunctionCallArgument) category_method__lexicalCurrentCharacterInputArgument__checkLexicalRoutineOrFunctionCallArgument, gClassInfoFor__lexicalCurrentCharacterInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineOrFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineOrFunctionCallArgument) category_method__lexicalFunctionInputArgument__checkLexicalRoutineOrFunctionCallArgument, gClassInfoFor__lexicalFunctionInputArgument.slotID ()) ;
 enterCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument) category_method__lexicalAttributeInputOutputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalAttributeInputOutputArgument.slotID ()) ;
 enterCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument) category_method__lexicalFormalInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalFormalInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalStructuredSendInstruction__checkLexicalInstruction, gClassInfoFor__lexicalStructuredSendInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalSimpleSendInstruction__checkLexicalInstruction, gClassInfoFor__lexicalSimpleSendInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalRepeatInstruction__checkLexicalInstruction, gClassInfoFor__lexicalRepeatInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalSelectInstruction__checkLexicalInstruction, gClassInfoFor__lexicalSelectInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalRoutineInstruction__checkLexicalInstruction, gClassInfoFor__lexicalRoutineInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalLogInstruction__checkLexicalInstruction, gClassInfoFor__lexicalLogInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalRewindInstruction__checkLexicalInstruction, gClassInfoFor__lexicalRewindInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalDropInstruction__checkLexicalInstruction, gClassInfoFor__lexicalDropInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalTagInstruction__checkLexicalInstruction, gClassInfoFor__lexicalTagInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalErrorInstruction__checkLexicalInstruction, gClassInfoFor__lexicalErrorInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalWarningInstruction__checkLexicalInstruction, gClassInfoFor__lexicalWarningInstruction.slotID ()) ;
 enterCategoryMethod__abstractLexicalRule__checkLexicalRule ((typeCategoryMethod__abstractLexicalRule__checkLexicalRule) category_method__lexicalImplicitRule__checkLexicalRule, gClassInfoFor__lexicalImplicitRule.slotID ()) ;
 enterCategoryMethod__abstractLexicalRule__checkLexicalRule ((typeCategoryMethod__abstractLexicalRule__checkLexicalRule) category_method__lexicalExplicitRule__checkLexicalRule, gClassInfoFor__lexicalExplicitRule.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_lexiqueCompilation (prologueRoutineFor_lexiqueCompilation,
                                   NULL) ;

//---------------------------------------------------------------------------*

