//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'lexiqueCompilation.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 22th, 2009, at 18h11'28"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "lexiqueCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "lexiqueCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "lexiqueLL1grammar.h"

//--- START OF USER ZONE 2

//---------------------------------------------------------------------------*

//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalSendDefaultAction.checkLexicalDefaultAction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction> gDispatchTableForMethod__lexicalSendDefaultAction__checkLexicalDefaultAction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__lexicalSendDefaultAction__checkLexicalDefaultAction.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction
findCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalSendDefaultAction__checkLexicalDefaultAction.count ()) {
    result = gDispatchTableForMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (superClassPtr) ;
      gDispatchTableForMethod__lexicalSendDefaultAction__checkLexicalDefaultAction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalSendTerminalByDefault.checkLexicalDefaultAction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSendTerminalByDefault__checkLexicalDefaultAction (C_Compiler & inLexique,
                                const cPtr_lexicalSendTerminalByDefault * operand_2395,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2395 != NULL) {
    GGS_lexicalSentValueList  automatic_var_0 ;
    const GGS_terminalMap  temp_2503 = var_cas_ioLexiqueAnalysisContext.reader_mTerminalMap (inLexique COMMA_SOURCE_FILE_AT_LINE (43)) ;
    if (temp_2503.isBuilt ()) {
      temp_2503 (HERE)->method_searchKey (inLexique, operand_2395->mDefaultSentTerminal, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (43)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalErrorByDefault.checkLexicalDefaultAction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalErrorByDefault__checkLexicalDefaultAction (C_Compiler & inLexique,
                                const cPtr_lexicalErrorByDefault * operand_2689,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2689 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_2804 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_2689->mDefaultErrorMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (51)) ;
    if (NULL != operand_2804) {
      operand_2804->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalExpression.checkLexicalExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalExpression__checkLexicalExpression> gDispatchTableForMethod__lexicalExpression__checkLexicalExpression ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalExpression__checkLexicalExpression (typeCategoryMethod__lexicalExpression__checkLexicalExpression inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__lexicalExpression__checkLexicalExpression.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalExpression__checkLexicalExpression
findCategoryMethod__lexicalExpression__checkLexicalExpression (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalExpression__checkLexicalExpression result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalExpression__checkLexicalExpression.count ()) {
    result = gDispatchTableForMethod__lexicalExpression__checkLexicalExpression (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalExpression__checkLexicalExpression (superClassPtr) ;
      gDispatchTableForMethod__lexicalExpression__checkLexicalExpression.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@lexicalOrExpression.checkLexicalExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalOrExpression__checkLexicalExpression (C_Compiler & inLexique,
                                const cPtr_lexicalOrExpression * operand_3398,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3398 != NULL) {
    const GGS_lexicalExpression  temp_3492 = operand_3398->mLeftOperand ;
    if (temp_3492.isBuilt ()) {
      typeCategoryMethod__lexicalExpression__checkLexicalExpression method = findCategoryMethod__lexicalExpression__checkLexicalExpression (temp_3492.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_3492 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (69)) ;
      }
    }
    const GGS_lexicalExpression  temp_3563 = operand_3398->mRightOperand ;
    if (temp_3563.isBuilt ()) {
      typeCategoryMethod__lexicalExpression__checkLexicalExpression method = findCategoryMethod__lexicalExpression__checkLexicalExpression (temp_3563.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_3563 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (70)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalCharacterMatch.checkLexicalExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterMatch__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalCharacterMatch * operand_3749,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3749 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalCharacterSetMatch.checkLexicalExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterSetMatch__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalCharacterSetMatch * operand_3969,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3969 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@lexicalCharacterIntervalMatch.checkLexicalExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterIntervalMatch__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalCharacterIntervalMatch * operand_4194,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4194 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@lexicalStringMatch.checkLexicalExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStringMatch__checkLexicalExpression (C_Compiler & inLexique,
                                const cPtr_lexicalStringMatch * operand_4408,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4408 != NULL) {
    var_cas_ioLexiqueAnalysisContext.mUnicodeStringToGenerate._addAssign_operation (operand_4408->mString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (99))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalStringNotMatch.checkLexicalExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStringNotMatch__checkLexicalExpression (C_Compiler & inLexique,
                                const cPtr_lexicalStringNotMatch * operand_4693,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4693 != NULL) {
    var_cas_ioLexiqueAnalysisContext.mUnicodeStringToGenerate._addAssign_operation (operand_4693->mString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (107))) ;
    elementOf_GGS_lexicalMessageMap * operand_4876 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_4693->mErrorMessage, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (108)) ;
    if (NULL != operand_4876) {
      operand_4876->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalRoutineOrFunctionFormalInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument> gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument
findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument.count ()) {
    result = gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (superClassPtr) ;
      gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalAttributeInputArgument * operand_5573,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5573 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  temp_5818 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (130)) ;
    if (temp_5818.isBuilt ()) {
      temp_5818 (HERE)->method_searchKey (inLexique, operand_5573->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (130)) ;
    }
    if (((var_cas_attributeLexicalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_5573->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is ")).operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (137)))).operator_concat (GGS_string (" type, but lexical routine prototype requires "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (139)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (141)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCharacterInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCharacterInputArgument * operand_6372,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6372 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_6372->mCharacter.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal character has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (154)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (156)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalUnsignedInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalUnsignedInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalUnsignedInputArgument * operand_6976,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6976 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_6976->mUnsigned.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal character has @uint")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (169)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (171)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCurrentCharacterInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCurrentCharacterInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCurrentCharacterInputArgument * operand_7587,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7587 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_7587->mLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, current character value has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (184)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (186)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFunctionInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFunctionInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalFunctionInputArgument * operand_8194,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8194 != NULL) {
    GGS_lexicalFunctionFormalArgumentList  var_cas_lexicalFormalTypeList ;
    GGS_lexicalTypeEnum var_cas_returnedLexicalFormalType ;
    GGS_string var_cas_replacementFunctionName ;
    GGS_bool automatic_var_1 ;
    const GGS_lexicalFunctionMap  temp_8540 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (199)) ;
    if (temp_8540.isBuilt ()) {
      temp_8540 (HERE)->method_searchKey (inLexique, operand_8194->mFunctionName, var_cas_lexicalFormalTypeList, var_cas_returnedLexicalFormalType, var_cas_replacementFunctionName, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (199)) ;
    }
    if (((var_cas_replacementFunctionName).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
      operand_8194->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("obsolete lexical function, replaced by '")).operator_concat (var_cas_replacementFunctionName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (208)) ;
    }
    if (((var_cas_returnedLexicalFormalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_8194->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, the function returns an ")).operator_concat (var_cas_returnedLexicalFormalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (213)))).operator_concat (GGS_string (" value, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (215)))).operator_concat (GGS_string (" value")) COMMA_SOURCE_FILE_AT_LINE (217)) ;
    }
    if (((var_cas_lexicalFormalTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (219))).operator_isNotEqual (operand_8194->mFunctionActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (219)))).isBuiltAndTrue ()) {
      operand_8194->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical function names ")).operator_concat (operand_8194->mFunctionActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (221)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (221)))).operator_concat (GGS_string (" actual argument(s), but the prototype requires "))).operator_concat (var_cas_lexicalFormalTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (223)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (223)))).operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (224)) ;
    }
    {
      GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_9643 (var_cas_lexicalFormalTypeList, true) ;
      const GGS_lexicalFunctionFormalArgumentList::cElement * operand_9643 = NULL ;
      GGS_lexicalFunctionCallActualArgumentList::cEnumerator enumerator_9672 (operand_8194->mFunctionActualArgumentList, true) ;
      const GGS_lexicalFunctionCallActualArgumentList::cElement * operand_9672 = NULL ;
      while (((operand_9643 = enumerator_9643.nextObject ()))
          && ((operand_9672 = enumerator_9672.nextObject ()))) {
        macroValidPointer (operand_9643) ;
        macroValidPointer (operand_9672) ;
        const GGS_lexicalRoutineOrFunctionFormalInputArgument  temp_9741 = operand_9672->mLexicalActualInputArgument ;
        if (temp_9741.isBuilt ()) {
          typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument method = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (temp_9741.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_9741 (HERE), var_cas_ioLexiqueAnalysisContext, operand_9643->mLexicalType COMMA_SOURCE_FILE_AT_LINE (227)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalRoutineOrFunctionFormalInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument> gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument
findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument.count ()) {
    result = gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (superClassPtr) ;
      gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalAttributeInputArgument * operand_10443,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10443 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  temp_10688 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (251)) ;
    if (temp_10688.isBuilt ()) {
      temp_10688 (HERE)->method_searchKey (inLexique, operand_10443->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (251)) ;
    }
    if (((var_cas_attributeLexicalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_10443->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is ")).operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (258)))).operator_concat (GGS_string (" type, but lexical routine prototype requires "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (260)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (262)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCharacterInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCharacterInputArgument * operand_11241,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11241 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_11241->mCharacter.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal character has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (275)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (277)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalUnsignedInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalUnsignedInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalUnsignedInputArgument * operand_11844,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11844 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_11844->mUnsigned.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal unsigned value has @uint")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (290)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (292)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCurrentCharacterInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCurrentCharacterInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCurrentCharacterInputArgument * operand_12459,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12459 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_12459->mLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, current character value has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (305)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (307)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFunctionInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFunctionInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalFunctionInputArgument * operand_13065,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13065 != NULL) {
    GGS_lexicalFunctionFormalArgumentList  var_cas_lexicalFormalTypeList ;
    GGS_lexicalTypeEnum var_cas_returnedLexicalFormalType ;
    GGS_string var_cas_replacementFunctionName ;
    GGS_bool automatic_var_2 ;
    const GGS_lexicalFunctionMap  temp_13411 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (320)) ;
    if (temp_13411.isBuilt ()) {
      temp_13411 (HERE)->method_searchKey (inLexique, operand_13065->mFunctionName, var_cas_lexicalFormalTypeList, var_cas_returnedLexicalFormalType, var_cas_replacementFunctionName, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (320)) ;
    }
    if (((var_cas_replacementFunctionName).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
      operand_13065->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("obsolete lexical function, replaced by '")).operator_concat (var_cas_replacementFunctionName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (329)) ;
    }
    if (((var_cas_returnedLexicalFormalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_13065->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, the function returns an ")).operator_concat (var_cas_returnedLexicalFormalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (334)))).operator_concat (GGS_string (" value, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (336)))).operator_concat (GGS_string (" value")) COMMA_SOURCE_FILE_AT_LINE (338)) ;
    }
    if (((var_cas_lexicalFormalTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (340))).operator_isNotEqual (operand_13065->mFunctionActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (340)))).isBuiltAndTrue ()) {
      operand_13065->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical function names ")).operator_concat (operand_13065->mFunctionActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (342)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (342)))).operator_concat (GGS_string (" actual argument(s), but the prototype requires "))).operator_concat (var_cas_lexicalFormalTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (344)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (344)))).operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (345)) ;
    }
    {
      GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_14514 (var_cas_lexicalFormalTypeList, true) ;
      const GGS_lexicalFunctionFormalArgumentList::cElement * operand_14514 = NULL ;
      GGS_lexicalFunctionCallActualArgumentList::cEnumerator enumerator_14543 (operand_13065->mFunctionActualArgumentList, true) ;
      const GGS_lexicalFunctionCallActualArgumentList::cElement * operand_14543 = NULL ;
      while (((operand_14514 = enumerator_14514.nextObject ()))
          && ((operand_14543 = enumerator_14543.nextObject ()))) {
        macroValidPointer (operand_14514) ;
        macroValidPointer (operand_14543) ;
        const GGS_lexicalRoutineOrFunctionFormalInputArgument  temp_14612 = operand_14543->mLexicalActualInputArgument ;
        if (temp_14612.isBuilt ()) {
          typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument method = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (temp_14612.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_14612 (HERE), var_cas_ioLexiqueAnalysisContext, operand_14514->mLexicalType COMMA_SOURCE_FILE_AT_LINE (348)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@abstractLexicalRoutineActualArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument> gDispatchTableForMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument
findCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument.count ()) {
    result = gDispatchTableForMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (superClassPtr) ;
      gDispatchTableForMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputOutputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputOutputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalAttributeInputOutputArgument * operand_15379,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalArgumentMode  var_cas_inLexicalRoutineFormalArgumentMode,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15379 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  temp_15683 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (374)) ;
    if (temp_15683.isBuilt ()) {
      temp_15683 (HERE)->method_searchKey (inLexique, operand_15379->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (374)) ;
    }
    if (((var_cas_attributeLexicalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_15379->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is ")).operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (381)))).operator_concat (GGS_string (" type, but lexical routine prototype requires "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (383)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (385)) ;
    }
    if (((var_cas_inLexicalRoutineFormalArgumentMode).operator_isNotEqual (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
      operand_15379->mActualPassingModeLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the output mode (!) is required here, not an output/input mode") COMMA_SOURCE_FILE_AT_LINE (389)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFormalInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFormalInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalFormalInputArgument * operand_16466,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalArgumentMode  var_cas_inLexicalRoutineFormalArgumentMode,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16466 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalRoutineOrFunctionFormalInputArgument  temp_16782 = operand_16466->mRoutineOrFunctionFormalInputArgument ;
    if (temp_16782.isBuilt ()) {
      typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument method = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (temp_16782.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_16782 (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_inLexicalRoutineFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (401)) ;
      }
    }
    if (((var_cas_inLexicalRoutineFormalArgumentMode).operator_isNotEqual (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
      operand_16466->mActualPassingModeLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the output/input mode (!\?) is required here, not an input mode") COMMA_SOURCE_FILE_AT_LINE (408)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalInstruction.checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalInstruction__checkLexicalInstruction> gDispatchTableForMethod__lexicalInstruction__checkLexicalInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalInstruction__checkLexicalInstruction (typeCategoryMethod__lexicalInstruction__checkLexicalInstruction inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__lexicalInstruction__checkLexicalInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalInstruction__checkLexicalInstruction
findCategoryMethod__lexicalInstruction__checkLexicalInstruction (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalInstruction__checkLexicalInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalInstruction__checkLexicalInstruction.count ()) {
    result = gDispatchTableForMethod__lexicalInstruction__checkLexicalInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (superClassPtr) ;
      gDispatchTableForMethod__lexicalInstruction__checkLexicalInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalStructuredSendInstruction.checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStructuredSendInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalStructuredSendInstruction * operand_17611,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17611 != NULL) {
    {
      GGS_lexicalSendSearchList::cEnumerator enumerator_17699 (operand_17611->mLexicalSendSearchList, true) ;
      const GGS_lexicalSendSearchList::cElement * operand_17699 = NULL ;
      while (((operand_17699 = enumerator_17699.nextObject ()))) {
        macroValidPointer (operand_17699) ;
        elementOf_GGS_lexicalExplicitTokenListMapMap * operand_17759 = (elementOf_GGS_lexicalExplicitTokenListMapMap *) var_cas_ioLexiqueAnalysisContext.mLexicalTokenListMap.searchForWithInstruction (inLexique, operand_17699->mSearchListName, GGS_lexicalExplicitTokenListMapMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (425)) ;
        if (NULL != operand_17759) {
          operand_17759->mInfo.mShouldBeGenerated = GGS_bool (true) ;
        }
        GGS_lexicalTypeEnum automatic_var_3 ;
        const GGS_lexicalAttributeMap  temp_17902 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (428)) ;
        if (temp_17902.isBuilt ()) {
          temp_17902 (HERE)->method_searchKey (inLexique, operand_17699->mAttributeName, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (428)) ;
        }
      }
    }
    const GGS_lexicalSendDefaultAction  temp_17995 = operand_17611->mLexicalSendDefaultAction ;
    if (temp_17995.isBuilt ()) {
      typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction method = findCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (temp_17995.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_17995 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (430)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@lexicalSimpleSendInstruction.checkLexicalInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSimpleSendInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalSimpleSendInstruction * operand_18188,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18188 != NULL) {
    GGS_lexicalSentValueList  automatic_var_4 ;
    const GGS_terminalMap  temp_18296 = var_cas_ioLexiqueAnalysisContext.reader_mTerminalMap (inLexique COMMA_SOURCE_FILE_AT_LINE (438)) ;
    if (temp_18296.isBuilt ()) {
      temp_18296 (HERE)->method_searchKey (inLexique, operand_18188->mSentTerminal, automatic_var_4 COMMA_SOURCE_FILE_AT_LINE (438)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalRepeatInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRepeatInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalRepeatInstruction * operand_18476,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18476 != NULL) {
    {
      GGS_lexicalWhileBranchList::cEnumerator enumerator_18565 (operand_18476->mLexicalWhileBranchList, true) ;
      const GGS_lexicalWhileBranchList::cElement * operand_18565 = NULL ;
      while (((operand_18565 = enumerator_18565.nextObject ()))) {
        macroValidPointer (operand_18565) ;
        const GGS_lexicalExpression  temp_18613 = operand_18565->mWhileExpression ;
        if (temp_18613.isBuilt ()) {
          typeCategoryMethod__lexicalExpression__checkLexicalExpression method = findCategoryMethod__lexicalExpression__checkLexicalExpression (temp_18613.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_18613 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (447)) ;
          }
        }
        {
          GGS_lexicalInstructionList::cEnumerator enumerator_18677 (operand_18565->mWhileInstructionList, true) ;
          const GGS_lexicalInstructionList::cElement * operand_18677 = NULL ;
          while (((operand_18677 = enumerator_18677.nextObject ()))) {
            macroValidPointer (operand_18677) ;
            const GGS_lexicalInstruction  temp_18724 = operand_18677->mInstruction ;
            if (temp_18724.isBuilt ()) {
              typeCategoryMethod__lexicalInstruction__checkLexicalInstruction method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (temp_18724.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, temp_18724 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (449)) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_lexicalInstructionList::cEnumerator enumerator_18823 (operand_18476->mRepeatedInstructionList, true) ;
      const GGS_lexicalInstructionList::cElement * operand_18823 = NULL ;
      while (((operand_18823 = enumerator_18823.nextObject ()))) {
        macroValidPointer (operand_18823) ;
        const GGS_lexicalInstruction  temp_18868 = operand_18823->mInstruction ;
        if (temp_18868.isBuilt ()) {
          typeCategoryMethod__lexicalInstruction__checkLexicalInstruction method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (temp_18868.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_18868 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (453)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalSelectInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSelectInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalSelectInstruction * operand_19073,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19073 != NULL) {
    {
      GGS_lexicalSelectBranchList::cEnumerator enumerator_19163 (operand_19073->mLexicalSelectBranchList, true) ;
      const GGS_lexicalSelectBranchList::cElement * operand_19163 = NULL ;
      while (((operand_19163 = enumerator_19163.nextObject ()))) {
        macroValidPointer (operand_19163) ;
        const GGS_lexicalExpression  temp_19212 = operand_19163->mSelectExpression ;
        if (temp_19212.isBuilt ()) {
          typeCategoryMethod__lexicalExpression__checkLexicalExpression method = findCategoryMethod__lexicalExpression__checkLexicalExpression (temp_19212.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_19212 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (463)) ;
          }
        }
        {
          GGS_lexicalInstructionList::cEnumerator enumerator_19277 (operand_19163->mSelectInstructionList, true) ;
          const GGS_lexicalInstructionList::cElement * operand_19277 = NULL ;
          while (((operand_19277 = enumerator_19277.nextObject ()))) {
            macroValidPointer (operand_19277) ;
            const GGS_lexicalInstruction  temp_19324 = operand_19277->mInstruction ;
            if (temp_19324.isBuilt ()) {
              typeCategoryMethod__lexicalInstruction__checkLexicalInstruction method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (temp_19324.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, temp_19324 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (465)) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_lexicalInstructionList::cEnumerator enumerator_19422 (operand_19073->mDefaultInstructionList, true) ;
      const GGS_lexicalInstructionList::cElement * operand_19422 = NULL ;
      while (((operand_19422 = enumerator_19422.nextObject ()))) {
        macroValidPointer (operand_19422) ;
        const GGS_lexicalInstruction  temp_19467 = operand_19422->mInstruction ;
        if (temp_19467.isBuilt ()) {
          typeCategoryMethod__lexicalInstruction__checkLexicalInstruction method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (temp_19467.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_19467 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (469)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalRoutineInstruction.checkLexicalInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRoutineInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalRoutineInstruction * operand_19673,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19673 != NULL) {
    GGS_lexicalRoutineFormalArgumentList  var_cas_lexicalRoutineFormalArgumentList ;
    GGS_stringlist  var_cas_routineErrorMessageList ;
    GGS_string var_cas_replacementRoutineName ;
    GGS_bool automatic_var_5 ;
    const GGS_lexicalRoutineMap  temp_19940 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalRoutineMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (481)) ;
    if (temp_19940.isBuilt ()) {
      temp_19940 (HERE)->method_searchKey (inLexique, operand_19673->mRoutineName, var_cas_lexicalRoutineFormalArgumentList, var_cas_routineErrorMessageList, var_cas_replacementRoutineName, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (481)) ;
    }
    if (((var_cas_replacementRoutineName).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
      operand_19673->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("obsolete lexical routine, replaced by '")).operator_concat (var_cas_replacementRoutineName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (490)) ;
    }
    if (((var_cas_lexicalRoutineFormalArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (493))).operator_isNotEqual (operand_19673->mActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (493)))).isBuiltAndTrue ()) {
      operand_19673->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical routine call names ")).operator_concat (operand_19673->mActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (495)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (495)))).operator_concat (GGS_string (" actual argument(s), but the lexical routine prototype requires "))).operator_concat (var_cas_lexicalRoutineFormalArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (497)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (497)))).operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (498)) ;
    }
    {
      GGS_lexicalRoutineFormalArgumentList::cEnumerator enumerator_20723 (var_cas_lexicalRoutineFormalArgumentList, true) ;
      const GGS_lexicalRoutineFormalArgumentList::cElement * operand_20723 = NULL ;
      GGS_lexicalRoutineCallActualArgumentList::cEnumerator enumerator_20744 (operand_19673->mActualArgumentList, true) ;
      const GGS_lexicalRoutineCallActualArgumentList::cElement * operand_20744 = NULL ;
      while (((operand_20723 = enumerator_20723.nextObject ()))
          && ((operand_20744 = enumerator_20744.nextObject ()))) {
        macroValidPointer (operand_20723) ;
        macroValidPointer (operand_20744) ;
        const GGS_abstractLexicalRoutineActualArgument  temp_20814 = operand_20744->mLexicalRoutineActualArgument ;
        if (temp_20814.isBuilt ()) {
          typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument method = findCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (temp_20814.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_20814 (HERE), var_cas_ioLexiqueAnalysisContext, operand_20723->mLexicalFormalArgumentMode, operand_20723->mLexicalFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (501)) ;
          }
        }
      }
    }
    if (((var_cas_routineErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (508))).operator_isNotEqual (operand_19673->mErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (508)))).isBuiltAndTrue ()) {
      operand_19673->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical routine call names ")).operator_concat (operand_19673->mErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (510)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (510)))).operator_concat (GGS_string (" error message(s), but the lexical routine prototype requires "))).operator_concat (var_cas_routineErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (512)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (512)))).operator_concat (GGS_string (" error message(s)")) COMMA_SOURCE_FILE_AT_LINE (513)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_21373 (operand_19673->mErrorMessageList, true) ;
      const GGS_lstringlist::cElement * operand_21373 = NULL ;
      while (((operand_21373 = enumerator_21373.nextObject ()))) {
        macroValidPointer (operand_21373) ;
        elementOf_GGS_lexicalMessageMap * operand_21438 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_21373->mValue, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (516)) ;
        if (NULL != operand_21438) {
          operand_21438->mInfo.mMessageIsUsed = GGS_bool (true) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalLogInstruction.checkLexicalInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalLogInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalLogInstruction * operand_21681,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21681 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalRewindInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRewindInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalRewindInstruction * operand_21902,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21902 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalDropInstruction.checkLexicalInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalDropInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalDropInstruction * operand_22121,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22121 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalTagInstruction.checkLexicalInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalTagInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalTagInstruction * operand_22339,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22339 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalErrorInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalErrorInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalErrorInstruction * operand_22559,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22559 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_22667 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_22559->mErrorMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (555)) ;
    if (NULL != operand_22667) {
      operand_22667->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalWarningInstruction.checkLexicalInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalWarningInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalWarningInstruction * operand_22901,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22901 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_23009 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_22901->mWarningMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (565)) ;
    if (NULL != operand_23009) {
      operand_23009->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@abstractLexicalRule.checkLexicalRule'  *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__abstractLexicalRule__checkLexicalRule> gDispatchTableForMethod__abstractLexicalRule__checkLexicalRule ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__abstractLexicalRule__checkLexicalRule (typeCategoryMethod__abstractLexicalRule__checkLexicalRule inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__abstractLexicalRule__checkLexicalRule.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__abstractLexicalRule__checkLexicalRule
findCategoryMethod__abstractLexicalRule__checkLexicalRule (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__abstractLexicalRule__checkLexicalRule result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__abstractLexicalRule__checkLexicalRule.count ()) {
    result = gDispatchTableForMethod__abstractLexicalRule__checkLexicalRule (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__abstractLexicalRule__checkLexicalRule (superClassPtr) ;
      gDispatchTableForMethod__abstractLexicalRule__checkLexicalRule.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@lexicalImplicitRule.checkLexicalRule'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalImplicitRule__checkLexicalRule (C_Compiler & inLexique,
                                const cPtr_lexicalImplicitRule * operand_23584,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23584 != NULL) {
    GGS_lexicalExplicitTokenListMap  automatic_var_6 ;
    GGS_tokenSortedlist  automatic_var_7 ;
    GGS_bool automatic_var_8 ;
    const GGS_lexicalExplicitTokenListMapMap  temp_23700 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalTokenListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (583)) ;
    if (temp_23700.isBuilt ()) {
      temp_23700 (HERE)->method_searchKey (inLexique, operand_23584->mListName, automatic_var_6, automatic_var_7, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (583)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@lexicalExplicitRule.checkLexicalRule'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalExplicitRule__checkLexicalRule (C_Compiler & inLexique,
                                const cPtr_lexicalExplicitRule * operand_23870,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23870 != NULL) {
    const GGS_lexicalExpression  temp_23974 = operand_23870->mLexicalRuleExpression ;
    if (temp_23974.isBuilt ()) {
      typeCategoryMethod__lexicalExpression__checkLexicalExpression method = findCategoryMethod__lexicalExpression__checkLexicalExpression (temp_23974.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_23974 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (591)) ;
      }
    }
    {
      GGS_lexicalInstructionList::cEnumerator enumerator_24031 (operand_23870->mInstructionList, true) ;
      const GGS_lexicalInstructionList::cElement * operand_24031 = NULL ;
      while (((operand_24031 = enumerator_24031.nextObject ()))) {
        macroValidPointer (operand_24031) ;
        const GGS_lexicalInstruction  temp_24076 = operand_24031->mInstruction ;
        if (temp_24076.isBuilt ()) {
          typeCategoryMethod__lexicalInstruction__checkLexicalInstruction method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (temp_24076.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_24076 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (593)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of wrapper 'lexiqueGenerationTemplates'           *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_lexiqueGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_lexiqueGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_lexiqueGenerationTemplates = {
  "",
  0,
  gWrapperAllFiles_lexiqueGenerationTemplates_0,
  0,
  gWrapperAllDirectories_lexiqueGenerationTemplates_0
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//    'headerZone2' template of 'lexiqueGenerationTemplates' filewrapper     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_headerZone2 (C_Compiler & inLexique,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT,
                                const GGS_lexiqueComponentRoot & var_cas_LEXIQUE_COMPONENT_ROOT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt ()
    && var_cas_LEXIQUE_COMPONENT_ROOT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "#ifndef " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "_0_DEFINED\n"
      "#define " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "_0_DEFINED\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"galgas/GGS_lstring.h\"\n"
      "#include \"galgas/GGS_luint.h\"\n"
      "#include \"galgas/GGS_lsint.h\"\n"
      "#include \"galgas/GGS_luint64.h\"\n"
      "#include \"galgas/GGS_lsint64.h\"\n"
      "#include \"galgas/GGS_lchar.h\"\n"
      "#include \"galgas/GGS_ldouble.h\"\n"
      "#include \"galgas/GGS_lbool.h\"\n"
      "#include \"galgas/C_Lexique.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                    E X T E R N    R O U T I N E S                         *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalRoutineMap::cEnumerator enumerator_900 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalRoutineMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (23)), true) ;
    const GGS_lexicalRoutineMap::cElement * operand_900 = NULL ;
    while (((operand_900 = enumerator_900.nextObject ()))) {
      macroValidPointer (operand_900) ;
      if (operand_900->mInfo.mIsExtern.boolValue ()) {
        result << "\n"
          "void scanner_routine_" ;
        result << operand_900->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (25)) ;
        result << " (C_Lexique & inLexique" ;
        GGS_lexicalRoutineFormalArgumentList::cEnumerator enumerator_1044 (operand_900->mInfo.mLexicalRoutineFormalArgumentList, true) ;
        const GGS_lexicalRoutineFormalArgumentList::cElement * operand_1044 = NULL ;
        while (((operand_1044 = enumerator_1044.nextObject ()))) {
          macroValidPointer (operand_1044) ;
          result << ",\n"
            "                " ;
          result << operand_1044->mLexicalFormalArgumentMode.reader_cppConstInFormalArgument (inLexique COMMA_SOURCE_FILE_AT_LINE (27)) ;
          result << operand_1044->mLexicalFormalArgumentType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (28)) ;
          result << operand_1044->mLexicalFormalArgumentMode.reader_cppReferenceInFormalArgument (inLexique COMMA_SOURCE_FILE_AT_LINE (29)) ;
          result << " " ;
          result << operand_1044->mArgumentNameForComment ;
        }
        GGS_stringlist::cEnumerator enumerator_1399 (operand_900->mInfo.mErrorMessageList, true) ;
        const GGS_stringlist::cElement * operand_1399 = NULL ;
        while (((operand_1399 = enumerator_1399.nextObject ()))) {
          macroValidPointer (operand_1399) ;
          result << ",\n"
            "                const char * " ;
          result << operand_1399->mValue ;
        }
        result << ") ;\n" ;
      }else {
      }
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                    E X T E R N    F U N C T I O N S                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalFunctionMap::cEnumerator enumerator_1964 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (45)), true) ;
    const GGS_lexicalFunctionMap::cElement * operand_1964 = NULL ;
    while (((operand_1964 = enumerator_1964.nextObject ()))) {
      macroValidPointer (operand_1964) ;
      if (operand_1964->mInfo.mIsExtern.boolValue ()) {
        result << "\n" ;
        result << operand_1964->mInfo.mReturnedLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
        result << " scanner_function_" ;
        result << operand_1964->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
        result << " (C_Lexique & inLexique" ;
        GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_2126 (operand_1964->mInfo.mLexicalTypeList, true) ;
        const GGS_lexicalFunctionFormalArgumentList::cElement * operand_2126 = NULL ;
        while (((operand_2126 = enumerator_2126.nextObject ()))) {
          macroValidPointer (operand_2126) ;
          result << ",\n"
            "                const " ;
          result << operand_2126->mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (49)) ;
          result << " " ;
          result << operand_2126->mArgumentNameForComment ;
        }
        result << ") ;\n" ;
      }else {
      }
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                       T O K E N    C L A S S                              *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " : public cToken {\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_2789 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (63)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_2789 = NULL ;
    while (((operand_2789 = enumerator_2789.nextObject ()))) {
      macroValidPointer (operand_2789) ;
      result << "  public : " ;
      result << operand_2789->mInfo.mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (64)) ;
      result << " mLexicalAttribute_" ;
      result << operand_2789->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (64)) ;
      result << " ;\n" ;
    }
    result << "\n"
      "  public : cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (void) ;\n"
      "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                     S C A N N E R    C L A S S                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " : public C_Lexique {\n"
      "//--- Constructors\n"
      "  public : " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                       const C_String & inDependencyFileExtension,\n"
      "                       const C_String & inDependencyFilePath,\n"
      "                       C_galgas_io * inParametersPtr,\n"
      "                       const C_String & inSourceFileName\n"
      "                       COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "  public : " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                       C_galgas_io * inParametersPtr,\n"
      "                       const C_String & inSourceString,\n"
      "                       const C_String & inStringForError\n"
      "                       COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "//--- Declaring a protected virtual destructor enables the compiler to raise\n"
      "//    an error if a direct delete is performed; only the static method\n"
      "//    C_GGS_Object::detachPointer may invoke delete.\n"
      "  #ifndef DO_NOT_GENERATE_CHECKINGS\n"
      "    protected : virtual ~" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (void) {}\n"
      "  #endif\n" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (97)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (97))).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << "\n"
        "//--- Scanner mode for template scanner\n"
        "  private : sint32 mMatchedTemplateDelimiterIndex ;\n" ;
    }else {
    }
    result << "\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    'headerZone3' template of 'lexiqueGenerationTemplates' filewrapper     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_headerZone3 (C_Compiler & inLexique,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_lexicalListDeclarationList & var_cas_DELIMITOR_LIST_LIST,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_DELIMITOR_LIST_LIST.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//--- Terminal symbols enumeration\n"
      "  public : enum {" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "_1_" ;
    GGS_terminalList::cEnumerator enumerator_132 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (4)), true) ;
    const GGS_terminalList::cElement * operand_132 = NULL ;
    while (((operand_132 = enumerator_132.nextObject ()))) {
      macroValidPointer (operand_132) ;
      result << ",\n"
        "  " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_" ;
      result << operand_132->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (5)) ;
    }
    result << "} ;\n" ;
    GGS_lexicalListDeclarationList::cEnumerator enumerator_281 (var_cas_DELIMITOR_LIST_LIST, true) ;
    const GGS_lexicalListDeclarationList::cElement * operand_281 = NULL ;
    while (((operand_281 = enumerator_281.nextObject ()))) {
      macroValidPointer (operand_281) ;
      result << "\n"
        "//--- Key words table '" ;
      result << operand_281->mName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (10)) ;
      result << "'\n"
        "  public : static sint16 search_into_" ;
      result << operand_281->mName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (11)) ;
      result << " (const C_String & inSearchedString) ;\n" ;
    }
    result << "  \n"
      "\n"
      "//--- Assign from attribute\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_546 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (17)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_546 = NULL ;
    while (((operand_546 = enumerator_546.nextObject ()))) {
      macroValidPointer (operand_546) ;
      result << "  public : void assignFromAttribute_" ;
      result << operand_546->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (18)) ;
      result << " (" ;
      result << operand_546->mInfo.mLexicalType.reader_exportedCPPTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (18)) ;
      result << " & outValue) const ;\n" ;
    }
    result << "\n"
      "\n"
      "//--- Attribute access\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_770 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (24)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_770 = NULL ;
    while (((operand_770 = enumerator_770.nextObject ()))) {
      macroValidPointer (operand_770) ;
      result << "  public : " ;
      result << operand_770->mInfo.mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (25)) ;
      result << " attributeValue_" ;
      result << operand_770->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (25)) ;
      result << " (void) const ;\n" ;
    }
    result << "\n"
      "\n"
      "//--- Parse lexical token\n"
      "  protected : virtual bool parseLexicalToken (void) ;\n"
      "\n"
      "//--- Append terminal message\n"
      "  protected : virtual void appendTerminalMessageToSyntaxErrorMessage (const sint16 numeroTerminal,\n"
      "                                                              C_String & messageErreur) ;\n"
      "\n"
      "//--- Get terminal count\n"
      "  public : virtual sint16 terminalVocabularyCount (void) const { return " ;
    result << var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (37)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (37)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (37)) ;
    result << " ; }\n"
      "\n"
      "//--- Get Token String\n"
      "  public : virtual C_String getCurrentTokenString (const cToken * inTokenPtr) const ;\n"
      "\n"
      "//--- Enter Token\n"
      "  protected : void enterToken (const cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " & inToken) ;\n"
      "\n"
      "//--- TEMPORARY\n"
      "  public : virtual uint8 terminalStyleIndex (const sint32 /* inTerminal */) { return 0 ; }\n"
      "  protected : virtual sint16 parseLexicalTokenForLexicalColoring (void) { return 0 ; }\n"
      "  public : static sint32 getStylesCount (void) { return 0 ; }\n"
      "  public : static const char * getStyleName (const sint32 /* inIndex */) { return \"\" ; }\n"
      "  public : static const char * getStyleIdentifier (const sint32 /* inIndex */) { return \"\" ; }\n"
      "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#endif\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'implementationZone2' template of 'lexiqueGenerationTemplates' filewrapper *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_implementationZone2 (C_Compiler & inLexique,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_lexicalAttributeMap & var_cas_LEXICAL_ATTRIBUTE_MAP,
                                const GGS_lexicalMessageMap & var_cas_LEXICAL_MESSAGE_MAP,
                                const GGS_terminalList & var_cas_TERMINAL_LIST,
                                const GGS_lexicalExplicitTokenListMapMap & var_cas_LEXICAL_TOKEN_LIST_MAP,
                                const GGS_stringset & var_cas_STRINGS_IN_EXPLICIT_RULES,
                                const GGS_lexicalRuleList & var_cas_LEXICAL_RULE_LIST,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT,
                                const GGS_lexiqueComponentRoot & var_cas_LEXIQUE_COMPONENT_ROOT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_LEXICAL_ATTRIBUTE_MAP.isBuilt ()
    && var_cas_LEXICAL_MESSAGE_MAP.isBuilt ()
    && var_cas_TERMINAL_LIST.isBuilt ()
    && var_cas_LEXICAL_TOKEN_LIST_MAP.isBuilt ()
    && var_cas_STRINGS_IN_EXPLICIT_RULES.isBuilt ()
    && var_cas_LEXICAL_RULE_LIST.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt ()
    && var_cas_LEXIQUE_COMPONENT_ROOT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"version_libpm.h\"\n"
      "#if LIBPM_VERSION != THE_LIBPM_VERSION\n"
      "  #error \"This file has been compiled with a version of GALGAS different than the version of libpm\"\n"
      "#endif\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include <ctype.h>\n"
      "#include <string.h>\n"
      "\n"
      "#include \"utilities/MF_MemoryControl.h\"\n"
      "#include \"" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << ".h\"\n"
      "\n"
      "#include \"strings/unicode_character_cpp.h\"\n"
      "#include \"galgas/scanner_actions.h\"\n"
      "#ifndef DO_NOT_GENERATE_CHECKINGS\n"
      "  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFileName ().cString (HERE), lineNumber ()\n"
      "  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE\n"
      "#else\n"
      "  #define LINE_AND_SOURCE_FILE\n"
      "  #define COMMA_LINE_AND_SOURCE_FILE\n"
      "#endif\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                               Constructors                                *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (void)" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_1301 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_1301 = NULL ;
    if (enumerator_1301.hasCurrentObject ()) {
      result << " :\n" ;
      while (((operand_1301 = enumerator_1301.nextObject ()))) {
        macroValidPointer (operand_1301) ;
        result << "mLexicalAttribute_" ;
        result << operand_1301->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (36)) ;
        result << " ()" ;
        if (enumerator_1301.hasNextObject ()) {
          result << ",\n" ;
        }
      }
    }
    result << " {\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::\n" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                const C_String & inDependencyFileExtension,\n"
      "                const C_String & inDependencyFilePath,\n"
      "                C_galgas_io * inParametersPtr,\n"
      "                const C_String & inSourceFileName\n"
      "                COMMA_LOCATION_ARGS) :\n"
      "C_Lexique (inCallerCompiler, inDependencyFileExtension, inDependencyFilePath, inParametersPtr, inSourceFileName COMMA_THERE)" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (52)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (52))).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << ",\n"
        "mMatchedTemplateDelimiterIndex (-1)" ;
    }else {
    }
    result << " {\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::\n" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                C_galgas_io * inParametersPtr,\n"
      "                const C_String & inSourceString,\n"
      "                const C_String & inStringForError\n"
      "                COMMA_LOCATION_ARGS) :\n"
      "C_Lexique (inCallerCompiler, inParametersPtr, inSourceString, inStringForError COMMA_THERE)" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (67)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (67))).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << ",\n"
        "mMatchedTemplateDelimiterIndex (-1)" ;
    }else {
    }
    result << " {\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                        Lexical error message list                         *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalMessageMap::cEnumerator enumerator_3051 (var_cas_LEXICAL_MESSAGE_MAP, true) ;
    const GGS_lexicalMessageMap::cElement * operand_3051 = NULL ;
    while (((operand_3051 = enumerator_3051.nextObject ()))) {
      macroValidPointer (operand_3051) ;
      result << "\n"
        "static const utf32 gLexicalMessage_" ;
      result << operand_3051->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (80)) ;
      result << " [] = " ;
      result << operand_3051->mInfo.mLexicalMessage.ggs_string ().reader_utf32StringConstantRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (80)) ;
      result << " ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//          Syntax error messages, for every terminal symbol                 *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_terminalList::cEnumerator enumerator_3616 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_3616 = NULL ;
    while (((operand_3616 = enumerator_3616.nextObject ()))) {
      macroValidPointer (operand_3616) ;
      result << "\n"
        "//--- Syntax error message for terminal '$" ;
      result << operand_3616->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (90)) ;
      result << "$' :\n"
        "static const utf32 gSyntaxErrorMessage_" ;
      result << operand_3616->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (91)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (91)) ;
      result << " [] = " ;
      result << operand_3616->mSyntaxErrorMessage.reader_utf32StringConstantRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (91)) ;
      result << " ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                appendTerminalMessageToSyntaxErrorMessage                  *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "void " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::\n"
      "appendTerminalMessageToSyntaxErrorMessage (const sint16 inTerminalIndex,\n"
      "                                           C_String & outSyntaxErrorMessage) {\n"
      "  static const utf32 * syntaxErrorMessageArray [" ;
    result << var_cas_TERMINAL_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (103)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (103)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (103)) ;
    result << "] = {kEndOfSourceLexicalErrorMessage" ;
    GGS_terminalList::cEnumerator enumerator_4610 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_4610 = NULL ;
    while (((operand_4610 = enumerator_4610.nextObject ()))) {
      macroValidPointer (operand_4610) ;
      result << ",\n"
        "    gSyntaxErrorMessage_" ;
      result << operand_4610->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (105)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (105)) ;
    }
    result << "} ;\n"
      "  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                      U N I C O D E    S T R I N G S                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_stringset::cEnumerator enumerator_5223 (var_cas_STRINGS_IN_EXPLICIT_RULES, true) ;
    while (enumerator_5223.hasCurrentObject ()) {
      result << "\n"
        "//--- Unicode string for '$" ;
      result << enumerator_5223._key (HERE).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (118)) ;
      result << "$'\n"
        "static const utf32 kUnicodeString_" ;
      result << enumerator_5223._key (HERE).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (119)) ;
      result << " [] = " ;
      result << enumerator_5223._key (HERE).reader_utf32StringConstantRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (119)) ;
      result << " ;\n" ;
      enumerator_5223.next () ;
    }
    result << "\n" ;
    GGS_lexicalExplicitTokenListMapMap::cEnumerator enumerator_5490 (var_cas_LEXICAL_TOKEN_LIST_MAP, true) ;
    const GGS_lexicalExplicitTokenListMapMap::cElement * operand_5490 = NULL ;
    while (((operand_5490 = enumerator_5490.nextObject ()))) {
      macroValidPointer (operand_5490) ;
      result << "//---------------------------------------------------------------------------*\n"
        "//                                                                           *\n"
        "//             Key words table '" ;
      result << operand_5490->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (126)) ;
      result << "'                            *\n"
        "//                                                                           *\n"
        "//---------------------------------------------------------------------------*\n"
        "\n"
        "static const sint32 ktable_size_" ;
      result << operand_5490->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (129)) ;
      result << " = " ;
      result << operand_5490->mInfo.mExplicitTokenListMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (129)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (129)) ;
      result << " ;\n"
        "\n"
        "static const C_unicode_lexique_table_entry ktable_for_" ;
      result << operand_5490->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (130)) ;
      result << " [ktable_size_" ;
      result << operand_5490->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (130)) ;
      result << "] = {\n" ;
      GGS_tokenSortedlist::cEnumerator enumerator_6247 (operand_5490->mInfo.mTokenSortedList, true) ;
      const GGS_tokenSortedlist::cElement * operand_6247 = NULL ;
      while (((operand_6247 = enumerator_6247.nextObject ()))) {
        macroValidPointer (operand_6247) ;
        result << "  {kUnicodeString_" ;
        result << operand_6247->mName.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (132)) ;
        result << ", " ;
        result << operand_6247->mLength.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (132)) ;
        result << ", " ;
        result << var_cas_LEXIQUE_CLASS_NAME ;
        result << "::" ;
        result << var_cas_LEXIQUE_CLASS_NAME ;
        result << "_1_" ;
        result << operand_6247->mTerminalName.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (132)) ;
        result << "}" ;
        if (enumerator_6247.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n"
        "\n"
        "sint16 " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "::search_into_" ;
      result << operand_5490->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (136)) ;
      result << " (const C_String & inSearchedString) {\n"
        "  return searchInList (inSearchedString, ktable_for_" ;
      result << operand_5490->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (137)) ;
      result << ", ktable_size_" ;
      result << operand_5490->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (137)) ;
      result << ") ;\n"
        "}\n"
        "\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                          getCurrentTokenString                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "C_String " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::\n"
      "getCurrentTokenString (const cToken * inTokenPtr) const {\n"
      "  cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " * ptr = (cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " *) inTokenPtr ;\n"
      "  C_String s ;\n"
      "  if (ptr == NULL) {\n"
      "    s.appendCString(\"$$\") ;\n"
      "  }else{\n"
      "    switch (ptr->mTokenCode) {\n"
      "    case " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "_1_:\n"
      "      s.appendCString(\"$$\") ;\n"
      "      break ;\n" ;
    GGS_terminalList::cEnumerator enumerator_7527 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_7527 = NULL ;
    while (((operand_7527 = enumerator_7527.nextObject ()))) {
      macroValidPointer (operand_7527) ;
      result << "    case " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_" ;
      result << operand_7527->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (159)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (159)) ;
      result << ":\n"
        "      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;\n"
        "      s.appendCString (" ;
      result << operand_7527->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (161)).reader_CStringConstantRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (161)) ;
      result << ") ;\n"
        "      s.appendCString(\"$ \") ;\n" ;
      GGS_lexicalSentValueList::cEnumerator enumerator_7853 (operand_7527->mSentAttributeList, true) ;
      const GGS_lexicalSentValueList::cElement * operand_7853 = NULL ;
      while (((operand_7853 = enumerator_7853.nextObject ()))) {
        macroValidPointer (operand_7853) ;
        result << "      s." ;
        result << operand_7853->mLexicalType.reader_appendMethodName (inLexique COMMA_SOURCE_FILE_AT_LINE (164)) ;
        result << " (ptr->mLexicalAttribute_" ;
        result << operand_7853->mAttributeName ;
        result << operand_7853->mLexicalType.reader_appendArgumentOfMethod (inLexique COMMA_SOURCE_FILE_AT_LINE (164)) ;
        result << ") ;\n" ;
      }
      result << "      break ;\n" ;
    }
    result << "    default:\n"
      "      break ;\n"
      "    }\n"
      "  }\n"
      "  return s ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                           Template Delimiters                             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_templateDelimitorList::cEnumerator enumerator_8559 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (181)), true) ;
    const GGS_templateDelimitorList::cElement * operand_8559 = NULL ;
    if (enumerator_8559.hasCurrentObject ()) {
      result << "static const templateDelimiterStruct kTemplateDefinitionArray [" ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (182)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (182)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (182)) ;
      result << "] = {\n" ;
      while (((operand_8559 = enumerator_8559.nextObject ()))) {
        macroValidPointer (operand_8559) ;
        result << "  {kUnicodeString_" ;
        result << operand_8559->mStartString.ggs_string ().reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (183)) ;
        result << ", " ;
        result << operand_8559->mStartString.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (183)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (183)) ;
        result << ", " ;
        if ((operand_8559->mEndString.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (184))).operator_isEqual (GGS_uint (0U)).boolValue ()) {
          result << "NULL, 0," ;
        }else {
          result << "kUnicodeString_" ;
          result << operand_8559->mEndString.ggs_string ().reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (187)) ;
          result << ", " ;
          result << operand_8559->mEndString.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (187)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (187)) ;
          result << "," ;
        }
        result << " NULL, " ;
        result << (operand_8559->mPreservesStartDelimiter).operator_not ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (190)) ;
        result << "}" ;
        if (enumerator_8559.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                           Template Replacements                           *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_templateReplacementList::cEnumerator enumerator_9587 (var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (202)), true) ;
    const GGS_templateReplacementList::cElement * operand_9587 = NULL ;
    if (enumerator_9587.hasCurrentObject ()) {
      result << "static const templateDelimiterStruct kTemplateReplacementArray [" ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (203)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (203)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ;
      result << "] = {\n" ;
      while (((operand_9587 = enumerator_9587.nextObject ()))) {
        macroValidPointer (operand_9587) ;
        result << "  {kUnicodeString_" ;
        result << operand_9587->mMatchString.ggs_string ().reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (205)) ;
        result << ", " ;
        result << operand_9587->mMatchString.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (205)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (205)) ;
        result << ", kUnicodeString_" ;
        result << operand_9587->mReplacementString.ggs_string ().reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (206)) ;
        result << ", " ;
        result << operand_9587->mReplacementString.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (206)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (206)) ;
        result << ", " ;
        if ((operand_9587->mReplacementFunction.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (207))).operator_isEqual (GGS_uint (0U)).boolValue ()) {
          result << "NULL" ;
        }else {
          result << "scanner_routine_" ;
          result << operand_9587->mReplacementFunction.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (210)) ;
        }
        result << ", true}" ;
        if (enumerator_9587.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//            Terminal Symbols as end of script in template mark             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_terminalList::cEnumerator enumerator_10638 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (223)), true) ;
    const GGS_terminalList::cElement * operand_10638 = NULL ;
    if (enumerator_10638.hasCurrentObject ()) {
      result << "static const bool kEndOfScriptInTemplateArray [" ;
      result << var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (224)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (224)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (224)) ;
      result << "] = {\n" ;
      while (((operand_10638 = enumerator_10638.nextObject ()))) {
        macroValidPointer (operand_10638) ;
        result << "  " ;
        result << operand_10638->mIsEndOfTemplateMark.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (225)) ;
        result << " /* " ;
        result << operand_10638->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (225)) ;
        result << " */" ;
        if (enumerator_10638.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//               P A R S E    L E X I C A L    T O K E N                     *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "bool " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::\n"
      "parseLexicalToken (void) {\n"
      "  cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " token ;\n"
      "  mLoop = true ;\n"
      "  token.mTokenCode = -1 ;\n"
      "  while ((token.mTokenCode < 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (244)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (244))).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << "    if ((mMatchedTemplateDelimiterIndex >= 0)\n"
        "     && (kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength > 0)\n"
        "     && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n"
        "      const bool foundEndDelimitor = testForInputUTF32String (kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndString,\n"
        "                                                              kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength,\n"
        "                                                              true) ;\n"
        "      if (foundEndDelimitor) {\n"
        "        mMatchedTemplateDelimiterIndex = -1 ;\n"
        "      }\n"
        "    }\n"
        "    while ((mMatchedTemplateDelimiterIndex < 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n"
        "      sint32 replacementIndex = 0 ;\n"
        "      while (replacementIndex >= 0) {\n"
        "        replacementIndex = findTemplateDelimiterIndex (kTemplateReplacementArray, " ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (258)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (258)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (258)) ;
      result << ") ;\n"
        "        if (replacementIndex >= 0) {\n"
        "          if (kTemplateReplacementArray [replacementIndex].mReplacementFunction == NULL) {\n"
        "            token.mTemplateStringBeforeToken << kTemplateReplacementArray [replacementIndex].mEndString ;\n"
        "          }else{\n"
        "            C_String s ;\n"
        "            while (notTestForInputUTF32String (kTemplateReplacementArray [replacementIndex].mEndString,\n"
        "                                               kTemplateReplacementArray [replacementIndex].mEndStringLength,\n"
        "                                               kEndOfSourceLexicalErrorMessage\n"
        "                                               COMMA_HERE)) {\n"
        "              s.appendUnicodeCharacter (previousChar () COMMA_HERE) ;\n"
        "            }\n"
        "            kTemplateReplacementArray [replacementIndex].mReplacementFunction (*this, s, token.mTemplateStringBeforeToken) ;\n"
        "          }\n"
        "        }\n"
        "      }\n"
        "      mMatchedTemplateDelimiterIndex = findTemplateDelimiterIndex (kTemplateDefinitionArray, " ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (274)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (274)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (274)) ;
      result << ") ;\n"
        "      if (mMatchedTemplateDelimiterIndex < 0) {\n"
        "        token.mTemplateStringBeforeToken.appendUnicodeCharacter (mCurrentChar COMMA_HERE) ;\n"
        "        advance () ;\n"
        "      }\n"
        "    }\n"
        "    if ((mMatchedTemplateDelimiterIndex >= 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n" ;
      GGS_lexicalAttributeMap::cEnumerator enumerator_13854 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
      const GGS_lexicalAttributeMap::cElement * operand_13854 = NULL ;
      while (((operand_13854 = enumerator_13854.nextObject ()))) {
        macroValidPointer (operand_13854) ;
        result << "    token.mLexicalAttribute_" ;
        result << operand_13854->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (282)) ;
        result << operand_13854->mInfo.mLexicalType.reader_initialization (inLexique COMMA_SOURCE_FILE_AT_LINE (282)) ;
        result << " ;\n" ;
      }
      result << "    mTokenFirstLocation = mCurrentLocation ;\n"
        "    try{\n" ;
      const GGS_uint indentation_14292 = GGS_uint (8U) ;
      if (indentation_14292.isBuilt ()) {
        result.incIndentation ((sint32) indentation_14292.uintValue ()) ;
      }
      GGS_lexicalRuleList::cEnumerator enumerator_14058 (var_cas_LEXICAL_RULE_LIST, true) ;
      const GGS_lexicalRuleList::cElement * operand_14058 = NULL ;
      while (((operand_14058 = enumerator_14058.nextObject ()))) {
        macroValidPointer (operand_14058) ;
        result << (findCategoryReader__abstractLexicalRule__generateCode (operand_14058->mLexicalRule (HERE)->galgasRTTI ()) (inLexique, operand_14058->mLexicalRule.getPtr (), var_cas_LEXIQUE_CLASS_NAME, var_cas_LEXIQUE_ANALYSIS_CONTEXT COMMA_SOURCE_FILE_AT_LINE (289))) ;
      }
       ;
      if (indentation_14292.isBuilt ()) {
        result.incIndentation (- ((sint32) indentation_14292.uintValue ())) ;
      }
      result << "if (testForInputUTF32Char (TO_UNICODE ('\\0'))) { // End of source text \? \n"
        "          token.mTokenCode = " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_ ; // Empty string code\n"
        "        }else{ // Unknown input character\n"
        "          unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;\n"
        "        }\n"
        "      }catch (const C_lexicalErrorException &) {\n"
        "        token.mTokenCode = -1 ; // No token\n"
        "        advance () ; // ... go throught unknown character\n"
        "      }\n"
        "    }\n"
        "    if ((token.mTokenCode > 0) && kEndOfScriptInTemplateArray [token.mTokenCode - 1]) {\n"
        "      mMatchedTemplateDelimiterIndex = -1 ;\n"
        "    }\n"
        "  " ;
    }else {
      GGS_lexicalAttributeMap::cEnumerator enumerator_14781 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
      const GGS_lexicalAttributeMap::cElement * operand_14781 = NULL ;
      while (((operand_14781 = enumerator_14781.nextObject ()))) {
        macroValidPointer (operand_14781) ;
        result << "    token.mLexicalAttribute_" ;
        result << operand_14781->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (307)) ;
        result << operand_14781->mInfo.mLexicalType.reader_initialization (inLexique COMMA_SOURCE_FILE_AT_LINE (307)) ;
        result << " ;\n" ;
      }
      result << "    mTokenFirstLocation = mCurrentLocation ;\n"
        "    try{\n" ;
      const GGS_uint indentation_15217 = GGS_uint (6U) ;
      if (indentation_15217.isBuilt ()) {
        result.incIndentation ((sint32) indentation_15217.uintValue ()) ;
      }
      GGS_lexicalRuleList::cEnumerator enumerator_14985 (var_cas_LEXICAL_RULE_LIST, true) ;
      const GGS_lexicalRuleList::cElement * operand_14985 = NULL ;
      while (((operand_14985 = enumerator_14985.nextObject ()))) {
        macroValidPointer (operand_14985) ;
        result << (findCategoryReader__abstractLexicalRule__generateCode (operand_14985->mLexicalRule (HERE)->galgasRTTI ()) (inLexique, operand_14985->mLexicalRule.getPtr (), var_cas_LEXIQUE_CLASS_NAME, var_cas_LEXIQUE_ANALYSIS_CONTEXT COMMA_SOURCE_FILE_AT_LINE (314))) ;
      }
       ;
      if (indentation_15217.isBuilt ()) {
        result.incIndentation (- ((sint32) indentation_15217.uintValue ())) ;
      }
      result << "if (testForInputUTF32Char (TO_UNICODE ('\\0'))) { // End of source text \? \n"
        "        token.mTokenCode = " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_ ; // Empty string code\n"
        "      }else{ // Unknown input character\n"
        "        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;\n"
        "      }\n"
        "    }catch (const C_lexicalErrorException &) {\n"
        "      token.mTokenCode = -1 ; // No token\n"
        "      advance () ; // ... go throught unknown character\n"
        "    }" ;
    }
    result << "\n"
      "  }\n"
      "  if ((UNICODE_VALUE (mCurrentChar) == '\\0') && (token.mTemplateStringBeforeToken.length () > 0)) {\n"
      "    token.mTokenCode = 0 ;\n"
      "    enterToken (token) ;\n"
      "  }\n"
      "  return token.mTokenCode > 0 ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                         E N T E R    T O K E N                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "void " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::enterToken (const cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " & inToken) {\n"
      "  cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " * ptr = NULL ;\n"
      "  macroMyNew (ptr, cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " ()) ;\n"
      "  ptr->mTokenCode = inToken.mTokenCode ;\n"
      "  ptr->mFirstLocation = mTokenFirstLocation ;\n"
      "  ptr->mLastLocation  = mTokenLastLocation ;\n"
      "  ptr->mTemplateStringBeforeToken  = inToken.mTemplateStringBeforeToken ;\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_16540 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_16540 = NULL ;
    while (((operand_16540 = enumerator_16540.nextObject ()))) {
      macroValidPointer (operand_16540) ;
      result << "  ptr->mLexicalAttribute_" ;
      result << operand_16540->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (349)) ;
      result << " = inToken.mLexicalAttribute_" ;
      result << operand_16540->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (349)) ;
      result << " ;\n" ;
    }
    result << "  enterTokenFromPointer (ptr) ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//         A S S I G N    F R O M    A T T R I B U T E                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_17119 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_17119 = NULL ;
    while (((operand_17119 = enumerator_17119.nextObject ()))) {
      macroValidPointer (operand_17119) ;
      result << "void " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "::\n"
        "assignFromAttribute_" ;
      result << operand_17119->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (362)) ;
      result << " (" ;
      result << operand_17119->mInfo.mLexicalType.reader_exportedCPPTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (362)) ;
      result << " & outValue) const {\n"
        "  cTokenFor_" ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << " * ptr = (cTokenFor_" ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << " *) mCurrentTokenPtr ;\n"
        "  outValue = " ;
      result << operand_17119->mInfo.mLexicalType.reader_exportedCPPTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (364)) ;
      result << " (* this, ptr->mLexicalAttribute_" ;
      result << operand_17119->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (364)) ;
      result << ") ;\n"
        "}\n"
        "\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//               A T T R I B U T E   A C C E S S                             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_17935 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_17935 = NULL ;
    while (((operand_17935 = enumerator_17935.nextObject ()))) {
      macroValidPointer (operand_17935) ;
      result << operand_17935->mInfo.mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (375)) ;
      result << " " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "::\n"
        "attributeValue_" ;
      result << operand_17935->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (376)) ;
      result << " (void) const {\n"
        "  cTokenFor_" ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << " * ptr = (cTokenFor_" ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << " *) mCurrentTokenPtr ;\n"
        "  return ptr->mLexicalAttribute_" ;
      result << operand_17935->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (378)) ;
      result << " ;\n"
        "}\n"
        "\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// 'cocoaHeaderZone2' template of 'lexiqueGenerationTemplates' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_cocoaHeaderZone2 (C_Compiler & inLexique,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT,
                                const GGS_lexiqueComponentRoot & var_cas_LEXIQUE_COMPONENT_ROOT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt ()
    && var_cas_LEXIQUE_COMPONENT_ROOT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "#import \"OC_Lexique.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                    E X T E R N    R O U T I N E S                         *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalRoutineMap::cEnumerator enumerator_486 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalRoutineMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (10)), true) ;
    const GGS_lexicalRoutineMap::cElement * operand_486 = NULL ;
    while (((operand_486 = enumerator_486.nextObject ()))) {
      macroValidPointer (operand_486) ;
      if (operand_486->mInfo.mIsExtern.boolValue ()) {
        result << "\n"
          "void scanner_cocoa_routine_" ;
        result << operand_486->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (12)) ;
        result << " (OC_Lexique * inLexique" ;
        GGS_lexicalRoutineFormalArgumentList::cEnumerator enumerator_637 (operand_486->mInfo.mLexicalRoutineFormalArgumentList, true) ;
        const GGS_lexicalRoutineFormalArgumentList::cElement * operand_637 = NULL ;
        while (((operand_637 = enumerator_637.nextObject ()))) {
          macroValidPointer (operand_637) ;
          result << ",\n"
            "                " ;
          result << operand_637->mLexicalFormalArgumentMode.reader_cppConstInFormalArgument (inLexique COMMA_SOURCE_FILE_AT_LINE (14)) ;
          result << operand_637->mLexicalFormalArgumentType.reader_cocoaTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (15)) ;
          result << operand_637->mLexicalFormalArgumentMode.reader_cocoaPointerInFormalArgument (inLexique COMMA_SOURCE_FILE_AT_LINE (16)) ;
          result << " " ;
          result << operand_637->mArgumentNameForComment ;
        }
        result << ") ;\n" ;
      }else {
      }
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                    E X T E R N    F U N C T I O N S                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalFunctionMap::cEnumerator enumerator_1457 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (29)), true) ;
    const GGS_lexicalFunctionMap::cElement * operand_1457 = NULL ;
    while (((operand_1457 = enumerator_1457.nextObject ()))) {
      macroValidPointer (operand_1457) ;
      if (operand_1457->mInfo.mIsExtern.boolValue ()) {
        result << "\n" ;
        result << operand_1457->mInfo.mReturnedLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (31)) ;
        result << " scanner_cocoa_function_" ;
        result << operand_1457->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (31)) ;
        result << " (C_Lexique & inLexique" ;
        GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_1625 (operand_1457->mInfo.mLexicalTypeList, true) ;
        const GGS_lexicalFunctionFormalArgumentList::cElement * operand_1625 = NULL ;
        while (((operand_1625 = enumerator_1625.nextObject ()))) {
          macroValidPointer (operand_1625) ;
          result << ",\n"
            "                const " ;
          result << operand_1625->mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (33)) ;
          result << " " ;
          result << operand_1625->mArgumentNameForComment ;
        }
        result << ") ;\n" ;
      }else {
      }
    }
    result << "\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//         T E R M I N A L    S Y M B O L    E N U M E R A T I O N           *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "enum {" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "_1_" ;
    GGS_terminalList::cEnumerator enumerator_2258 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (47)), true) ;
    const GGS_terminalList::cElement * operand_2258 = NULL ;
    while (((operand_2258 = enumerator_2258.nextObject ()))) {
      macroValidPointer (operand_2258) ;
      result << ",\n"
        "  " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_" ;
      result << operand_2258->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (48)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (48)) ;
    }
    result << "\n"
      "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                     S C A N N E R    C L A S S                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "@interface " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " : OC_Lexique {\n"
      "//--- Attributes\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_2898 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (61)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_2898 = NULL ;
    while (((operand_2898 = enumerator_2898.nextObject ()))) {
      macroValidPointer (operand_2898) ;
      result << "  @private " ;
      result << operand_2898->mInfo.mLexicalType.reader_cocoaTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (62)) ;
      result << " mLexicalAttribute_" ;
      result << operand_2898->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (62)) ;
      result << " ;\n" ;
    }
    result << "\n" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (65)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (65))).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << "\n"
        "//--- Scanner mode for template scanner\n"
        "  @private SInt32 mMatchedTemplateDelimiterIndex ;\n" ;
    }else {
    }
    result << "\n"
      "}\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// 'cocoaHeaderZone3' template of 'lexiqueGenerationTemplates' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_cocoaHeaderZone3 (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "- (UInt32) terminalVocabularyCount ;\n"
      "\n"
      "- (UInt32) styleIndexForTerminal: (SInt32) inTerminal ;\n"
      "\n"
      "- (void) parseLexicalTokenForLexicalColoring ;\n"
      "\n"
      "- (UInt32) stylesCount ;\n"
      "\n"
      "- (NSString *) styleNameForStyleIndex: (SInt32) inIndex ;\n"
      "\n"
      "- (NSString *) styleIdentifierForStyleIndex: (SInt32) inIndex ;\n"
      "@end\n"
      "\n"
      "//---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'cocoaImplementationZone2' template of 'lexiqueGenerationTemplates' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_cocoaImplementationZone2 (C_Compiler & inLexique,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_lexicalAttributeMap & var_cas_LEXICAL_ATTRIBUTE_MAP,
                                const GGS_lexicalMessageMap & var_cas_LEXICAL_MESSAGE_MAP,
                                const GGS_terminalList & var_cas_TERMINAL_LIST,
                                const GGS_stringset & var_cas_STRINGS_IN_EXPLICIT_RULES,
                                const GGS_lexicalRuleList & var_cas_LEXICAL_RULE_LIST,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT,
                                const GGS_lexiqueComponentRoot & var_cas_LEXIQUE_COMPONENT_ROOT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_LEXICAL_ATTRIBUTE_MAP.isBuilt ()
    && var_cas_LEXICAL_MESSAGE_MAP.isBuilt ()
    && var_cas_TERMINAL_LIST.isBuilt ()
    && var_cas_STRINGS_IN_EXPLICIT_RULES.isBuilt ()
    && var_cas_LEXICAL_RULE_LIST.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt ()
    && var_cas_LEXIQUE_COMPONENT_ROOT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#import \"version_libpm.h\"\n"
      "#if LIBPM_VERSION != THE_LIBPM_VERSION\n"
      "  #error \"This file has been compiled with a version of GALGAS different than the version of libpm\"\n"
      "#endif\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#import \"" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "-cocoa.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "@implementation " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (id) init {\n"
      "  self = [super init] ;\n"
      "  if (self) {\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_660 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_660 = NULL ;
    while (((operand_660 = enumerator_660.nextObject ()))) {
      macroValidPointer (operand_660) ;
      result << "    mLexicalAttribute_" ;
      result << operand_660->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (23)) ;
      result << " = " ;
      result << operand_660->mInfo.mLexicalType.reader_cocoaInitializationCode (inLexique COMMA_SOURCE_FILE_AT_LINE (23)) ;
      result << " ;\n" ;
    }
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (25)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (25))).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << "    mMatchedTemplateDelimiterIndex = -1 ;\n" ;
    }else {
    }
    result << "\n"
      " }\n"
      "  return self ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (void) dealloc {\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_1058 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_1058 = NULL ;
    while (((operand_1058 = enumerator_1058.nextObject ()))) {
      macroValidPointer (operand_1058) ;
      if ((operand_1058->mInfo.mLexicalType).operator_isEqual (GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE)).boolValue ()) {
        result << "  [mLexicalAttribute_" ;
        result << operand_1058->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (37)) ;
        result << " release] ;\n" ;
      }else {
      }
    }
    result << "  [super dealloc] ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                           Template Delimiters                             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_templateDelimitorList::cEnumerator enumerator_1698 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (49)), true) ;
    const GGS_templateDelimitorList::cElement * operand_1698 = NULL ;
    if (enumerator_1698.hasCurrentObject ()) {
      result << "static const templateDelimiterStruct kTemplateDefinitionArray [" ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (50)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (50)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (50)) ;
      result << "] = {\n" ;
      while (((operand_1698 = enumerator_1698.nextObject ()))) {
        macroValidPointer (operand_1698) ;
        result << "  {kUnicodeString_" ;
        result << operand_1698->mStartString.ggs_string ().reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (51)) ;
        result << ", " ;
        result << operand_1698->mStartString.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (51)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (51)) ;
        result << ", " ;
        if ((operand_1698->mEndString.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (52))).operator_isEqual (GGS_uint (0U)).boolValue ()) {
          result << "NULL, 0," ;
        }else {
          result << "kUnicodeString_" ;
          result << operand_1698->mEndString.ggs_string ().reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (55)) ;
          result << ", " ;
          result << operand_1698->mEndString.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (55)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (55)) ;
          result << "," ;
        }
        result << " NULL, " ;
        result << (operand_1698->mPreservesStartDelimiter).operator_not ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (58)) ;
        result << "}" ;
        if (enumerator_1698.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                           Template Replacements                           *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_templateReplacementList::cEnumerator enumerator_2726 (var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (70)), true) ;
    const GGS_templateReplacementList::cElement * operand_2726 = NULL ;
    if (enumerator_2726.hasCurrentObject ()) {
      result << "static const templateDelimiterStruct kTemplateReplacementArray [" ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (71)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (71)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (71)) ;
      result << "] = {\n" ;
      while (((operand_2726 = enumerator_2726.nextObject ()))) {
        macroValidPointer (operand_2726) ;
        result << "  {kUnicodeString_" ;
        result << operand_2726->mMatchString.ggs_string ().reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (73)) ;
        result << ", " ;
        result << operand_2726->mMatchString.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (73)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (73)) ;
        result << ", kUnicodeString_" ;
        result << operand_2726->mReplacementString.ggs_string ().reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (74)) ;
        result << ", " ;
        result << operand_2726->mReplacementString.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (74)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (74)) ;
        result << ", " ;
        if ((operand_2726->mReplacementFunction.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (75))).operator_isEqual (GGS_uint (0U)).boolValue ()) {
          result << "NULL" ;
        }else {
          result << "scanner_routine_" ;
          result << operand_2726->mReplacementFunction.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (78)) ;
        }
        result << ", true}" ;
        if (enumerator_2726.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//            Terminal Symbols as end of script in template mark             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_terminalList::cEnumerator enumerator_3777 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (91)), true) ;
    const GGS_terminalList::cElement * operand_3777 = NULL ;
    if (enumerator_3777.hasCurrentObject ()) {
      result << "static const bool kEndOfScriptInTemplateArray [" ;
      result << var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (92)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (92)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (92)) ;
      result << "] = {\n" ;
      while (((operand_3777 = enumerator_3777.nextObject ()))) {
        macroValidPointer (operand_3777) ;
        result << "  " ;
        result << operand_3777->mIsEndOfTemplateMark.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (93)) ;
        result << " /* " ;
        result << operand_3777->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (93)) ;
        result << " */" ;
        if (enumerator_3777.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "\n" ;
    GGS_lexicalExplicitTokenListMapMap::cEnumerator enumerator_4104 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalTokenListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (100)), true) ;
    const GGS_lexicalExplicitTokenListMapMap::cElement * operand_4104 = NULL ;
    while (((operand_4104 = enumerator_4104.nextObject ()))) {
      macroValidPointer (operand_4104) ;
      if (operand_4104->mInfo.mShouldBeGenerated.boolValue ()) {
        result << "//---------------------------------------------------------------------------*\n"
          "//                                                                           *\n"
          "//             Key words table '" ;
        result << operand_4104->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (104)) ;
        result << "'                            *\n"
          "//                                                                           *\n"
          "//---------------------------------------------------------------------------*\n"
          "\n"
          "static const C_cocoa_lexique_table_entry ktable_for_" ;
        result << operand_4104->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (107)) ;
        result << " [" ;
        result << operand_4104->mInfo.mExplicitTokenListMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (107)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (107)) ;
        result << "] = {\n" ;
        GGS_tokenSortedlist::cEnumerator enumerator_4804 (operand_4104->mInfo.mTokenSortedList, true) ;
        const GGS_tokenSortedlist::cElement * operand_4804 = NULL ;
        while (((operand_4804 = enumerator_4804.nextObject ()))) {
          macroValidPointer (operand_4804) ;
          result << "  {@" ;
          result << operand_4804->mName.reader_CStringConstantRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (109)) ;
          result << ", " ;
          result << var_cas_LEXIQUE_CLASS_NAME ;
          result << "_1_" ;
          result << operand_4804->mTerminalName.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (109)) ;
          result << "}" ;
          if (enumerator_4804.hasNextObject ()) {
            result << ",\n" ;
          }
        }
        result << "\n"
          "} ;\n"
          "\n"
          "static SInt32 search_into_" ;
        result << operand_4104->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (113)) ;
        result << " (NSString * inSearchedString) {\n"
          "  return searchStringInTable (inSearchedString, ktable_for_" ;
        result << operand_4104->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (114)) ;
        result << ", " ;
        result << operand_4104->mInfo.mExplicitTokenListMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (114)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (114)) ;
        result << ") ;\n"
          "}\n"
          "\n" ;
      }else {
      }
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//               P A R S E    L E X I C A L    T O K E N                     *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (void) parseLexicalTokenForLexicalColoring {\n"
      "  mLoop = YES ;\n"
      "  mNoLexicalError = YES ;\n"
      "  mTokenCode = -1 ;\n"
      "  while ((mTokenCode < 0) && (mCurrentChar != '\\0')) {\n" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (131)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (131))).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << "    if ((mMatchedTemplateDelimiterIndex >= 0)\n"
        "     && (kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength > 0)\n"
        "     && (mCurrentChar != '\\0')) {\n"
        "      const bool foundEndDelimitor = testForInputUTF32String (kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndString,\n"
        "                                                              kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength,\n"
        "                                                              true) ;\n"
        "      if (foundEndDelimitor) {\n"
        "        mMatchedTemplateDelimiterIndex = -1 ;\n"
        "      }\n"
        "    }\n"
        "    while ((mMatchedTemplateDelimiterIndex < 0) && (mCurrentChar != '\\0')) {\n"
        "      sint32 replacementIndex = 0 ;\n"
        "      while (replacementIndex >= 0) {\n"
        "        replacementIndex = findTemplateDelimiterIndex (kTemplateReplacementArray, " ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (145)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (145)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (145)) ;
      result << ") ;\n"
        "        if (replacementIndex >= 0) {\n"
        "          if (kTemplateReplacementArray [replacementIndex].mReplacementFunction == NULL) {\n"
        "            token.mTemplateStringBeforeToken << kTemplateReplacementArray [replacementIndex].mEndString ;\n"
        "          }else{\n"
        "            C_String s ;\n"
        "            while (notTestForInputUTF32String (kTemplateReplacementArray [replacementIndex].mEndString,\n"
        "                                               kTemplateReplacementArray [replacementIndex].mEndStringLength,\n"
        "                                               kEndOfSourceLexicalErrorMessage\n"
        "                                               COMMA_HERE)) {\n"
        "              s.appendUnicodeCharacter (previousChar () COMMA_HERE) ;\n"
        "            }\n"
        "            kTemplateReplacementArray [replacementIndex].mReplacementFunction (*this, s, token.mTemplateStringBeforeToken) ;\n"
        "          }\n"
        "        }\n"
        "      }\n"
        "      mMatchedTemplateDelimiterIndex = findTemplateDelimiterIndex (kTemplateDefinitionArray, " ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (161)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (161)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (161)) ;
      result << ") ;\n"
        "      if (mMatchedTemplateDelimiterIndex < 0) {\n"
        "        token.mTemplateStringBeforeToken.appendUnicodeCharacter (mCurrentChar COMMA_HERE) ;\n"
        "        advance () ;\n"
        "      }\n"
        "    }\n"
        "    if ((mMatchedTemplateDelimiterIndex >= 0) && (mCurrentChar != '\\0')) {\n" ;
      GGS_lexicalAttributeMap::cEnumerator enumerator_8135 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
      const GGS_lexicalAttributeMap::cElement * operand_8135 = NULL ;
      while (((operand_8135 = enumerator_8135.nextObject ()))) {
        macroValidPointer (operand_8135) ;
        result << "    mLexicalAttribute_" ;
        result << operand_8135->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (169)) ;
        result << operand_8135->mInfo.mLexicalType.reader_initialization (inLexique COMMA_SOURCE_FILE_AT_LINE (169)) ;
        result << " ;\n" ;
      }
      result << "    mTokenFirstLocation = mCurrentLocation ;\n" ;
      const GGS_uint indentation_8537 = GGS_uint (6U) ;
      if (indentation_8537.isBuilt ()) {
        result.incIndentation ((sint32) indentation_8537.uintValue ()) ;
      }
      GGS_lexicalRuleList::cEnumerator enumerator_8324 (var_cas_LEXICAL_RULE_LIST, true) ;
      const GGS_lexicalRuleList::cElement * operand_8324 = NULL ;
      while (((operand_8324 = enumerator_8324.nextObject ()))) {
        macroValidPointer (operand_8324) ;
        result << (findCategoryReader__abstractLexicalRule__generateCocoaCode (operand_8324->mLexicalRule (HERE)->galgasRTTI ()) (inLexique, operand_8324->mLexicalRule.getPtr (), var_cas_LEXIQUE_CLASS_NAME, var_cas_LEXIQUE_ANALYSIS_CONTEXT COMMA_SOURCE_FILE_AT_LINE (175))) ;
      }
       ;
      if (indentation_8537.isBuilt ()) {
        result.incIndentation (- ((sint32) indentation_8537.uintValue ())) ;
      }
      result << "if (testForInputChar ('\\0')) { // End of source text \? \n"
        "        mTokenCode = " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_ ; // Empty string code\n"
        "      }else{ // Unknown input character\n"
        "        mNoLexicalError = NO ;\n"
        "      }\n"
        "    }\n"
        "    if ((mTokenCode > 0) && kEndOfScriptInTemplateArray [mTokenCode - 1]) {\n"
        "      mMatchedTemplateDelimiterIndex = -1 ;\n"
        "    }\n"
        "  " ;
    }else {
      GGS_lexicalAttributeMap::cEnumerator enumerator_8818 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
      const GGS_lexicalAttributeMap::cElement * operand_8818 = NULL ;
      while (((operand_8818 = enumerator_8818.nextObject ()))) {
        macroValidPointer (operand_8818) ;
        result << "    " ;
        result << operand_8818->mInfo.mLexicalType.reader_cocoaResetPrefix (inLexique COMMA_SOURCE_FILE_AT_LINE (189)) ;
        result << "mLexicalAttribute_" ;
        result << operand_8818->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (189)) ;
        result << operand_8818->mInfo.mLexicalType.reader_cocoaReset (inLexique COMMA_SOURCE_FILE_AT_LINE (189)) ;
        result << " ;\n" ;
      }
      result << "    mTokenFirstLocation = mCurrentLocation ;\n" ;
      const GGS_uint indentation_9256 = GGS_uint (4U) ;
      if (indentation_9256.isBuilt ()) {
        result.incIndentation ((sint32) indentation_9256.uintValue ()) ;
      }
      GGS_lexicalRuleList::cEnumerator enumerator_9038 (var_cas_LEXICAL_RULE_LIST, true) ;
      const GGS_lexicalRuleList::cElement * operand_9038 = NULL ;
      while (((operand_9038 = enumerator_9038.nextObject ()))) {
        macroValidPointer (operand_9038) ;
        result << (findCategoryReader__abstractLexicalRule__generateCocoaCode (operand_9038->mLexicalRule (HERE)->galgasRTTI ()) (inLexique, operand_9038->mLexicalRule.getPtr (), var_cas_LEXIQUE_CLASS_NAME, var_cas_LEXIQUE_ANALYSIS_CONTEXT COMMA_SOURCE_FILE_AT_LINE (195))) ;
      }
       ;
      if (indentation_9256.isBuilt ()) {
        result.incIndentation (- ((sint32) indentation_9256.uintValue ())) ;
      }
      result << "if ([self testForInputChar:'\\0']) { // End of source text \? \n"
        "        mTokenCode = " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_ ; // Empty string code\n"
        "      }else{ // Unknown input character\n"
        "        mNoLexicalError = NO ;\n"
        "      }" ;
    }
    result << "\n"
      "  }\n"
      "  if ((mCurrentChar == '\\0') && ([mTemplateStringBeforeToken length] > 0)) {\n"
      "    mTokenCode = 0 ;\n"
      "    /* enterToken (token) ; */\n"
      "  }\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                   T E R M I N A L    C O U N T                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (UInt32) terminalVocabularyCount {\n"
      "  return " ;
    result << var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (217)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (217)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (217)) ;
    result << " ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                     S T Y L E   C O U N T                                 *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (UInt32) stylesCount {\n"
      "  return " ;
    result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (227)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (227)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (227)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (227)) ;
    result << " ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//              S T Y L E   F O R    T E R M I N A L                         *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (UInt32) styleIndexForTerminal: (SInt32) inTerminal {\n"
      "  static const UInt32 kTerminalSymbolStyles [" ;
    result << var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (237)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (237)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (237)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (237)) ;
    result << "] = {0" ;
    GGS_terminalList::cEnumerator enumerator_11147 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (238)), true) ;
    const GGS_terminalList::cElement * operand_11147 = NULL ;
    while (((operand_11147 = enumerator_11147.nextObject ()))) {
      macroValidPointer (operand_11147) ;
      result << ",\n"
        "    " ;
      result << operand_11147->mStyleIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (239)) ;
      result << " /* " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_" ;
      result << operand_11147->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (239)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (239)) ;
      result << " */" ;
    }
    result << "\n"
      "  } ;\n"
      "  return kTerminalSymbolStyles [inTerminal] ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//             S T Y L E   N A M E    F O R    I N D E X                     *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (NSString *) styleNameForStyleIndex: (SInt32) inIndex {\n"
      "  NSString * kStyleArray [" ;
    result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (251)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (251)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (251)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (251)) ;
    result << "] = {\n"
      "    @\"Default Style\"" ;
    GGS_lexicalStyleList::cEnumerator enumerator_11965 (var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (253)), true) ;
    const GGS_lexicalStyleList::cElement * operand_11965 = NULL ;
    while (((operand_11965 = enumerator_11965.nextObject ()))) {
      macroValidPointer (operand_11965) ;
      result << ",\n"
        "    @" ;
      result << operand_11965->mComment.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (254)).reader_CStringConstantRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (254)) ;
    }
    result << "\n"
      "  } ;\n"
      "  return kStyleArray [inIndex] ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//         S T Y L E   I D E N T I F I E R    F O R    I N D E X             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (NSString *) styleIdentifierForStyleIndex: (SInt32) inIndex {\n"
      "  NSString * kStyleArray [" ;
    result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (266)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (266)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (266)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (266)) ;
    result << "] = {\n"
      "    @\"" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "\"" ;
    GGS_lexicalStyleList::cEnumerator enumerator_12728 (var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (268)), true) ;
    const GGS_lexicalStyleList::cElement * operand_12728 = NULL ;
    while (((operand_12728 = enumerator_12728.nextObject ()))) {
      macroValidPointer (operand_12728) ;
      result << ",\n"
        "    @\"" ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "-" ;
      result << operand_12728->mName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (269)) ;
      result << "\"" ;
    }
    result << "\n"
      "  } ;\n"
      "  return kStyleArray [inIndex] ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "@end\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "compileLexiqueComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileLexiqueComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  var_cas_inOutputDirectory COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileLexiqueComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lexiqueComponentRoot  var_cas_lexiqueComponentRoot ;
  const GGS_string _depExtension = GGS_string ("") ;
  const GGS_string _depPath = GGS_string ("") ;
  if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
    lexiqueLL1grammar::_performSourceFileParsing_ (inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_inSourceFile,
                                  var_cas_lexiqueComponentRoot
                                  COMMA_SOURCE_FILE_AT_LINE (654)) ;
  }
  GGS_lstring  var_cas_componentName ;
  var_cas_componentName = var_cas_lexiqueComponentRoot.reader_mLexiqueComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (656)) ;
  GGS_string var_cas_basename ;
  var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (657)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (657)) ;
  if (((var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (658))).operator_isNotEqual (var_cas_basename)).isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS checks "
      "the component name ('")).operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (660)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (662)) ;
  }
  GGS_lexicalTypeMap  var_cas_lexicalTypeMap ;
  var_cas_lexicalTypeMap = GGS_lexicalTypeMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (666)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("char"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (667)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (668)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint64"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (669)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (670)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint64"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint64 (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (671)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("double"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_double (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (672)) ;
  GGS_lexicalRoutineMap  var_cas_lexicalRoutineMap ;
  ::routine_buildLexicalRoutineMap (inLexique,  var_cas_lexicalRoutineMap COMMA_SOURCE_FILE_AT_LINE (675)) ;
  {
    GGS_externRoutineList::cEnumerator enumerator_28184 (var_cas_lexiqueComponentRoot.reader_mExternRoutineList (inLexique COMMA_SOURCE_FILE_AT_LINE (677)), true) ;
    const GGS_externRoutineList::cElement * operand_28184 = NULL ;
    while (((operand_28184 = enumerator_28184.nextObject ()))) {
      macroValidPointer (operand_28184) ;
      GGS_lexicalRoutineFormalArgumentList  var_cas_lexicalRoutineFormalArgumentList ;
      var_cas_lexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
      {
        GGS_lexicalExternRoutineFormalArgumentList::cEnumerator enumerator_28358 (operand_28184->mLexicalRoutineFormalArgumentList, true) ;
        const GGS_lexicalExternRoutineFormalArgumentList::cElement * operand_28358 = NULL ;
        while (((operand_28358 = enumerator_28358.nextObject ()))) {
          macroValidPointer (operand_28358) ;
          GGS_lexicalTypeEnum var_cas_lexicalFormalArgumentType ;
          const GGS_lexicalTypeMap  temp_28444 = var_cas_lexicalTypeMap ;
          if (temp_28444.isBuilt ()) {
            temp_28444 (HERE)->method_searchKey (inLexique, operand_28358->mLexicalTypeName, var_cas_lexicalFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (681)) ;
          }
          var_cas_lexicalRoutineFormalArgumentList._addAssign_operation (operand_28358->mPassingMode, var_cas_lexicalFormalArgumentType, operand_28358->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (682))) ;
        }
      }
      var_cas_lexicalRoutineMap.modifier_insertKey (inLexique, operand_28184->mRoutineName, var_cas_lexicalRoutineFormalArgumentList, operand_28184->mErrorMessageList, GGS_string (""), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (684)) ;
    }
  }
  GGS_lexicalFunctionMap  var_cas_lexicalFunctionMap ;
  ::routine_buildLexicalFunctionMap (inLexique,  var_cas_lexicalFunctionMap COMMA_SOURCE_FILE_AT_LINE (688)) ;
  {
    GGS_externFunctionList::cEnumerator enumerator_28989 (var_cas_lexiqueComponentRoot.reader_mExternFunctionList (inLexique COMMA_SOURCE_FILE_AT_LINE (690)), true) ;
    const GGS_externFunctionList::cElement * operand_28989 = NULL ;
    while (((operand_28989 = enumerator_28989.nextObject ()))) {
      macroValidPointer (operand_28989) ;
      GGS_lexicalFunctionFormalArgumentList  var_cas_lexicalFunctionFormalArgumentList ;
      var_cas_lexicalFunctionFormalArgumentList = GGS_lexicalFunctionFormalArgumentList ::constructor_emptyList () ;
      {
        GGS_lexicalExternFunctionFormalArgumentList::cEnumerator enumerator_29167 (operand_28989->mLexicalFunctionFormalArgumentList, true) ;
        const GGS_lexicalExternFunctionFormalArgumentList::cElement * operand_29167 = NULL ;
        while (((operand_29167 = enumerator_29167.nextObject ()))) {
          macroValidPointer (operand_29167) ;
          GGS_lexicalTypeEnum var_cas_lexicalFormalArgumentType ;
          const GGS_lexicalTypeMap  temp_29253 = var_cas_lexicalTypeMap ;
          if (temp_29253.isBuilt ()) {
            temp_29253 (HERE)->method_searchKey (inLexique, operand_29167->mLexicalTypeName, var_cas_lexicalFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (694)) ;
          }
          var_cas_lexicalFunctionFormalArgumentList._addAssign_operation (var_cas_lexicalFormalArgumentType, operand_29167->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (695))) ;
        }
      }
      GGS_lexicalTypeEnum var_cas_returnedArgumentType ;
      const GGS_lexicalTypeMap  temp_29495 = var_cas_lexicalTypeMap ;
      if (temp_29495.isBuilt ()) {
        temp_29495 (HERE)->method_searchKey (inLexique, operand_28989->mReturnedTypeName, var_cas_returnedArgumentType COMMA_SOURCE_FILE_AT_LINE (698)) ;
      }
      var_cas_lexicalFunctionMap.modifier_insertKey (inLexique, operand_28989->mFunctionName, var_cas_lexicalFunctionFormalArgumentList, var_cas_returnedArgumentType, GGS_string (""), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (699)) ;
    }
  }
  GGS_lexiqueAnalysisContext var_cas_lexiqueAnalysisContext ;
  var_cas_lexiqueAnalysisContext = GGS_lexiqueAnalysisContext::constructor_new (var_cas_lexicalRoutineMap, var_cas_lexicalFunctionMap, GGS_lexicalMessageMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_terminalMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_terminalList ::constructor_emptyList (), GGS_lexicalAttributeMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_lexicalExplicitTokenListMapMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_stringset ::constructor_emptySet (), GGS_templateDelimitorList ::constructor_emptyList (), GGS_styleMap ::constructor_emptyMap (inLexique COMMA_HERE)) ;
  GGS_uint  var_cas_styleIndex ;
  var_cas_styleIndex = GGS_uint (1U) ;
  {
    GGS_lexicalStyleList::cEnumerator enumerator_30193 (var_cas_lexiqueComponentRoot.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (716)), true) ;
    const GGS_lexicalStyleList::cElement * operand_30193 = NULL ;
    while (((operand_30193 = enumerator_30193.nextObject ()))) {
      macroValidPointer (operand_30193) ;
      var_cas_lexiqueAnalysisContext.mStyleMap.modifier_insertKey (inLexique, operand_30193->mName, operand_30193->mComment, var_cas_styleIndex COMMA_SOURCE_FILE_AT_LINE (717)) ;
      var_cas_styleIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (718)) ;
    }
  }
  {
    GGS_lexicalAttributeList::cEnumerator enumerator_30444 (var_cas_lexiqueComponentRoot.reader_mLexicalAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (721)), true) ;
    const GGS_lexicalAttributeList::cElement * operand_30444 = NULL ;
    while (((operand_30444 = enumerator_30444.nextObject ()))) {
      macroValidPointer (operand_30444) ;
      if ((var_cas_lexicalTypeMap.reader_hasKey (inLexique, operand_30444->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (722)) COMMA_SOURCE_FILE_AT_LINE (722))).isBuiltAndTrue ()) {
        GGS_lexicalTypeEnum var_cas_lexicalType ;
        const GGS_lexicalTypeMap  temp_30615 = var_cas_lexicalTypeMap ;
        if (temp_30615.isBuilt ()) {
          temp_30615 (HERE)->method_searchKey (inLexique, operand_30444->mTypeName, var_cas_lexicalType COMMA_SOURCE_FILE_AT_LINE (724)) ;
        }
        var_cas_lexiqueAnalysisContext.mLexicalAttributeMap.modifier_insertKey (inLexique, operand_30444->mName, var_cas_lexicalType COMMA_SOURCE_FILE_AT_LINE (725)) ;
      }else{
        GGS_string var_cas_m ;
        var_cas_m = GGS_string ("") ;
        var_cas_m.appendCString ("the @") ;
        var_cas_m.dotAssign_operation (operand_30444->mTypeName) ;
        var_cas_m.appendCString (" type is not a valid lexical attribute type; are allowed:") ;
        GGS_bool var_cas_firstLoop ;
        var_cas_firstLoop = GGS_bool (true) ;
        {
          GGS_lexicalTypeMap::cEnumerator enumerator_30917 (var_cas_lexicalTypeMap, true) ;
          const GGS_lexicalTypeMap::cElement * operand_30917 = enumerator_30917.nextObject () ;
          if ((operand_30917 != NULL)) {
            bool _foreach_loop_30917 ;
            do{
              macroValidPointer (operand_30917) ;
              var_cas_m.appendCString (" @") ;
              var_cas_m.dotAssign_operation (operand_30917->mKey) ;
              operand_30917 = enumerator_30917.nextObject () ;
              _foreach_loop_30917 = ((operand_30917 != NULL)) ;
              if (_foreach_loop_30917) {
                var_cas_m.appendCString (",") ;
              }
            }while (_foreach_loop_30917) ;
          }
        }
        operand_30444->mTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_m COMMA_SOURCE_FILE_AT_LINE (736)) ;
      }
    }
  }
  {
    GGS_terminalDeclarationList::cEnumerator enumerator_31127 (var_cas_lexiqueComponentRoot.reader_mTerminalDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (739)), true) ;
    const GGS_terminalDeclarationList::cElement * operand_31127 = NULL ;
    while (((operand_31127 = enumerator_31127.nextObject ()))) {
      macroValidPointer (operand_31127) ;
      GGS_uint  var_cas_terminalStyleIndex ;
      var_cas_terminalStyleIndex = GGS_uint (0U) ;
      if (((operand_31127->mStyle.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (741)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (741))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
        GGS_lstring  automatic_var_9 ;
        const GGS_styleMap  temp_31305 = var_cas_lexiqueAnalysisContext.reader_mStyleMap (inLexique COMMA_SOURCE_FILE_AT_LINE (742)) ;
        if (temp_31305.isBuilt ()) {
          temp_31305 (HERE)->method_searchKey (inLexique, operand_31127->mStyle, automatic_var_9, var_cas_terminalStyleIndex COMMA_SOURCE_FILE_AT_LINE (742)) ;
        }
      }
      GGS_lexicalSentValueList  var_cas_argumentTypeList ;
      var_cas_argumentTypeList = GGS_lexicalSentValueList ::constructor_emptyList () ;
      {
        GGS_lstringlist::cEnumerator enumerator_31440 (operand_31127->mSentAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_31440 = NULL ;
        while (((operand_31440 = enumerator_31440.nextObject ()))) {
          macroValidPointer (operand_31440) ;
          GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
          const GGS_lexicalAttributeMap  temp_31579 = var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (747)) ;
          if (temp_31579.isBuilt ()) {
            temp_31579 (HERE)->method_searchKey (inLexique, operand_31440->mValue, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (747)) ;
          }
          var_cas_argumentTypeList._addAssign_operation (operand_31440->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (748)), var_cas_attributeLexicalType) ;
        }
      }
      var_cas_lexiqueAnalysisContext.mTerminalMap.modifier_insertKey (inLexique, operand_31127->mName, var_cas_argumentTypeList COMMA_SOURCE_FILE_AT_LINE (750)) ;
      GGS_bool var_cas_isEndOfTemplateMark ;
      var_cas_isEndOfTemplateMark = GGS_bool (false) ;
      {
        GGS_lstringlist::cEnumerator enumerator_31859 (operand_31127->mOptionList, true) ;
        const GGS_lstringlist::cElement * operand_31859 = NULL ;
        while (((operand_31859 = enumerator_31859.nextObject ()))) {
          macroValidPointer (operand_31859) ;
          if (((operand_31859->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (753))).operator_isNotEqual (GGS_string ("templateEndMark"))).isBuiltAndTrue ()) {
            operand_31859->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'templateEndMark' feature is allowed here") COMMA_SOURCE_FILE_AT_LINE (755)) ;
          }else if ((var_cas_isEndOfTemplateMark).isBuiltAndTrue ()) {
            operand_31859->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'templateEndMark' feature is already set") COMMA_SOURCE_FILE_AT_LINE (757)) ;
          }else{
            var_cas_isEndOfTemplateMark = GGS_bool (true) ;
          }
        }
      }
      var_cas_lexiqueAnalysisContext.mTerminalList._addAssign_operation (operand_31127->mName, var_cas_argumentTypeList, operand_31127->mSyntaxErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (764)), var_cas_isEndOfTemplateMark, var_cas_terminalStyleIndex) ;
    }
  }
  {
    GGS_lexicalListDeclarationList::cEnumerator enumerator_32382 (var_cas_lexiqueComponentRoot.reader_mLexicalListDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (769)), true) ;
    const GGS_lexicalListDeclarationList::cElement * operand_32382 = NULL ;
    while (((operand_32382 = enumerator_32382.nextObject ()))) {
      macroValidPointer (operand_32382) ;
      GGS_uint  var_cas_terminalStyleIndex ;
      var_cas_terminalStyleIndex = GGS_uint (0U) ;
      if (((operand_32382->mStyle.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (771)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (771))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
        GGS_lstring  automatic_var_10 ;
        const GGS_styleMap  temp_32563 = var_cas_lexiqueAnalysisContext.reader_mStyleMap (inLexique COMMA_SOURCE_FILE_AT_LINE (772)) ;
        if (temp_32563.isBuilt ()) {
          temp_32563 (HERE)->method_searchKey (inLexique, operand_32382->mStyle, automatic_var_10, var_cas_terminalStyleIndex COMMA_SOURCE_FILE_AT_LINE (772)) ;
        }
      }
      GGS_lexicalSentValueList  var_cas_argumentTypeList ;
      var_cas_argumentTypeList = GGS_lexicalSentValueList ::constructor_emptyList () ;
      {
        GGS_lstringlist::cEnumerator enumerator_32698 (operand_32382->mSentAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_32698 = NULL ;
        while (((operand_32698 = enumerator_32698.nextObject ()))) {
          macroValidPointer (operand_32698) ;
          GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
          const GGS_lexicalAttributeMap  temp_32836 = var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (777)) ;
          if (temp_32836.isBuilt ()) {
            temp_32836 (HERE)->method_searchKey (inLexique, operand_32698->mValue, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (777)) ;
          }
          var_cas_argumentTypeList._addAssign_operation (operand_32698->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (778)), var_cas_attributeLexicalType) ;
        }
      }
      GGS_lexicalExplicitTokenListMap  var_cas_lexicalTokenListMap ;
      var_cas_lexicalTokenListMap = GGS_lexicalExplicitTokenListMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_tokenSortedlist  var_cas_tokenSortedlist ;
      var_cas_tokenSortedlist = GGS_tokenSortedlist ::constructor_emptySortedList () ;
      {
        GGS_lexicalListEntryList::cEnumerator enumerator_33116 (operand_32382->mEntryList, true) ;
        const GGS_lexicalListEntryList::cElement * operand_33116 = NULL ;
        while (((operand_33116 = enumerator_33116.nextObject ()))) {
          macroValidPointer (operand_33116) ;
          GGS_string var_cas_syntaxErrorMessage ;
          var_cas_syntaxErrorMessage = operand_32382->mSyntaxErrorMessage.ggs_string ().reader_stringByReplacingStringByString (inLexique, GGS_string ("%K"), operand_33116->mTerminalSpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (783)) COMMA_SOURCE_FILE_AT_LINE (783)) ;
          GGS_bool var_cas_isEndOfTemplateMark ;
          var_cas_isEndOfTemplateMark = GGS_bool (false) ;
          {
            GGS_lstringlist::cEnumerator enumerator_33315 (operand_33116->mFeatureList, true) ;
            const GGS_lstringlist::cElement * operand_33315 = NULL ;
            while (((operand_33315 = enumerator_33315.nextObject ()))) {
              macroValidPointer (operand_33315) ;
              if (((operand_33315->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (786))).operator_isNotEqual (GGS_string ("templateEndMark"))).isBuiltAndTrue ()) {
                operand_33315->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'templateEndMark' feature is allowed here") COMMA_SOURCE_FILE_AT_LINE (788)) ;
              }else if ((var_cas_isEndOfTemplateMark).isBuiltAndTrue ()) {
                operand_33315->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'templateEndMark' feature is already set") COMMA_SOURCE_FILE_AT_LINE (790)) ;
              }else{
                var_cas_isEndOfTemplateMark = GGS_bool (true) ;
              }
            }
          }
          var_cas_lexiqueAnalysisContext.mTerminalList._addAssign_operation (operand_33116->mTerminalSpelling, var_cas_argumentTypeList, var_cas_syntaxErrorMessage, var_cas_isEndOfTemplateMark, var_cas_terminalStyleIndex) ;
          var_cas_lexiqueAnalysisContext.mTerminalMap.modifier_insertKey (inLexique, operand_33116->mTerminalSpelling, var_cas_argumentTypeList COMMA_SOURCE_FILE_AT_LINE (801)) ;
          var_cas_lexicalTokenListMap.modifier_insertKey (inLexique, operand_33116->mEntrySpelling, operand_33116->mTerminalSpelling, operand_33116->mFeatureList COMMA_SOURCE_FILE_AT_LINE (802)) ;
          var_cas_tokenSortedlist._addAssign_operation (operand_33116->mEntrySpelling.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (803)), operand_33116->mEntrySpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (803)), operand_33116->mTerminalSpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (803))) ;
          var_cas_lexiqueAnalysisContext.mUnicodeStringToGenerate._addAssign_operation (operand_33116->mEntrySpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (804))) ;
        }
      }
      var_cas_lexiqueAnalysisContext.mLexicalTokenListMap.modifier_insertKey (inLexique, operand_32382->mName, var_cas_lexicalTokenListMap, var_cas_tokenSortedlist, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (806)) ;
    }
  }
  {
    GGS_lexicalMessageDeclarationList::cEnumerator enumerator_34438 (var_cas_lexiqueComponentRoot.reader_mLexicalMessageDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (809)), true) ;
    const GGS_lexicalMessageDeclarationList::cElement * operand_34438 = NULL ;
    while (((operand_34438 = enumerator_34438.nextObject ()))) {
      macroValidPointer (operand_34438) ;
      var_cas_lexiqueAnalysisContext.mLexicalMessageMap.modifier_insertKey (inLexique, operand_34438->mMessageName, operand_34438->mMessageValue, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (810)) ;
    }
  }
  {
    GGS_lexicalRuleList::cEnumerator enumerator_34672 (var_cas_lexiqueComponentRoot.reader_mLexicalRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (813)), true) ;
    const GGS_lexicalRuleList::cElement * operand_34672 = NULL ;
    while (((operand_34672 = enumerator_34672.nextObject ()))) {
      macroValidPointer (operand_34672) ;
      const GGS_abstractLexicalRule  temp_34748 = operand_34672->mLexicalRule ;
      if (temp_34748.isBuilt ()) {
        typeCategoryMethod__abstractLexicalRule__checkLexicalRule method = findCategoryMethod__abstractLexicalRule__checkLexicalRule (temp_34748.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_34748 (HERE), var_cas_lexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (814)) ;
        }
      }
    }
  }
  {
    GGS_lexicalMessageMap::cEnumerator enumerator_34870 (var_cas_lexiqueAnalysisContext.reader_mLexicalMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (817)), true) ;
    const GGS_lexicalMessageMap::cElement * operand_34870 = NULL ;
    while (((operand_34870 = enumerator_34870.nextObject ()))) {
      macroValidPointer (operand_34870) ;
      if (((operand_34870->mInfo.mMessageIsUsed).operator_not ()).isBuiltAndTrue ()) {
        operand_34870->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("unused message") COMMA_SOURCE_FILE_AT_LINE (819)) ;
      }
    }
  }
  {
    GGS_metamodelTemplateDelimitorList::cEnumerator enumerator_35085 (var_cas_lexiqueComponentRoot.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (823)), true) ;
    const GGS_metamodelTemplateDelimitorList::cElement * operand_35085 = NULL ;
    while (((operand_35085 = enumerator_35085.nextObject ()))) {
      macroValidPointer (operand_35085) ;
      var_cas_lexiqueAnalysisContext.mUnicodeStringToGenerate._addAssign_operation (operand_35085->mStartString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (824))) ;
      var_cas_lexiqueAnalysisContext.mUnicodeStringToGenerate._addAssign_operation (operand_35085->mEndString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (825))) ;
      GGS_bool var_cas_preservesStartDelimiter ;
      var_cas_preservesStartDelimiter = GGS_bool (false) ;
      {
        GGS_lstringlist::cEnumerator enumerator_35355 (operand_35085->mOptionList, true) ;
        const GGS_lstringlist::cElement * operand_35355 = NULL ;
        while (((operand_35355 = enumerator_35355.nextObject ()))) {
          macroValidPointer (operand_35355) ;
          if (((operand_35355->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (828))).operator_isNotEqual (GGS_string ("preserved"))).isBuiltAndTrue ()) {
            operand_35355->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'preserved' feature is allowed here") COMMA_SOURCE_FILE_AT_LINE (830)) ;
          }else if ((var_cas_preservesStartDelimiter).isBuiltAndTrue ()) {
            operand_35355->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'preserved' feature is already set") COMMA_SOURCE_FILE_AT_LINE (832)) ;
          }else{
            var_cas_preservesStartDelimiter = GGS_bool (true) ;
          }
        }
      }
      var_cas_lexiqueAnalysisContext.mTemplateDelimitorList._addAssign_operation (operand_35085->mStartString, operand_35085->mEndString, var_cas_preservesStartDelimiter) ;
    }
  }
  {
    GGS_templateReplacementList::cEnumerator enumerator_35853 (var_cas_lexiqueComponentRoot.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (839)), true) ;
    const GGS_templateReplacementList::cElement * operand_35853 = NULL ;
    while (((operand_35853 = enumerator_35853.nextObject ()))) {
      macroValidPointer (operand_35853) ;
      var_cas_lexiqueAnalysisContext.mUnicodeStringToGenerate._addAssign_operation (operand_35853->mMatchString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (840))) ;
      var_cas_lexiqueAnalysisContext.mUnicodeStringToGenerate._addAssign_operation (operand_35853->mReplacementString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (841))) ;
    }
  }
  GGS_string var_cas_lexiqueClassName ;
  var_cas_lexiqueClassName = var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (845)) ;
  if (((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string (".h")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_headerZone2 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueAnalysisContext, var_cas_lexiqueComponentRoot), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_headerZone3 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueComponentRoot.reader_mLexicalListDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (861)), var_cas_lexiqueAnalysisContext) COMMA_SOURCE_FILE_AT_LINE (848)) ;
  }
  if (((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string (".cpp")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_implementationZone2 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (875)), var_cas_lexiqueAnalysisContext.reader_mLexicalMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (876)), var_cas_lexiqueAnalysisContext.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (877)), var_cas_lexiqueAnalysisContext.reader_mLexicalTokenListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (878)), var_cas_lexiqueAnalysisContext.reader_mUnicodeStringToGenerate (inLexique COMMA_SOURCE_FILE_AT_LINE (879)), var_cas_lexiqueComponentRoot.reader_mLexicalRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (880)), var_cas_lexiqueAnalysisContext, var_cas_lexiqueComponentRoot), GGS_string ("\n"
      "\n"), GGS_string ("\n"
      "\n") COMMA_SOURCE_FILE_AT_LINE (868)) ;
  }
  if (((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string ("-cocoa.h")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_cocoaHeaderZone2 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueAnalysisContext, var_cas_lexiqueComponentRoot), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_cocoaHeaderZone3 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueAnalysisContext) COMMA_SOURCE_FILE_AT_LINE (890)) ;
  }
  if (((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string ("-cocoa.m")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_cocoaImplementationZone2 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (916)), var_cas_lexiqueAnalysisContext.reader_mLexicalMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (917)), var_cas_lexiqueAnalysisContext.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (918)), var_cas_lexiqueAnalysisContext.reader_mUnicodeStringToGenerate (inLexique COMMA_SOURCE_FILE_AT_LINE (919)), var_cas_lexiqueComponentRoot.reader_mLexicalRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (920)), var_cas_lexiqueAnalysisContext, var_cas_lexiqueComponentRoot), GGS_string ("\n"
      "\n"), GGS_string ("\n"
      "\n") COMMA_SOURCE_FILE_AT_LINE (909)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileLexiqueComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_lexiqueCompilation (void) {
 enterCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction ((typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction) category_method__lexicalSendTerminalByDefault__checkLexicalDefaultAction, gClassInfoFor__lexicalSendTerminalByDefault.slotID ()) ;
 enterCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction ((typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction) category_method__lexicalErrorByDefault__checkLexicalDefaultAction, gClassInfoFor__lexicalErrorByDefault.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalOrExpression__checkLexicalExpression, gClassInfoFor__lexicalOrExpression.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalCharacterMatch__checkLexicalExpression, gClassInfoFor__lexicalCharacterMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalCharacterSetMatch__checkLexicalExpression, gClassInfoFor__lexicalCharacterSetMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalCharacterIntervalMatch__checkLexicalExpression, gClassInfoFor__lexicalCharacterIntervalMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalStringMatch__checkLexicalExpression, gClassInfoFor__lexicalStringMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalStringNotMatch__checkLexicalExpression, gClassInfoFor__lexicalStringNotMatch.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalAttributeInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalAttributeInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalCharacterInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalCharacterInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalUnsignedInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalUnsignedInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalCurrentCharacterInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalCurrentCharacterInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalFunctionInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalFunctionInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalAttributeInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalAttributeInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalCharacterInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalCharacterInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalUnsignedInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalUnsignedInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalCurrentCharacterInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalCurrentCharacterInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalFunctionInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalFunctionInputArgument.slotID ()) ;
 enterCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument) category_method__lexicalAttributeInputOutputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalAttributeInputOutputArgument.slotID ()) ;
 enterCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument) category_method__lexicalFormalInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalFormalInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalStructuredSendInstruction__checkLexicalInstruction, gClassInfoFor__lexicalStructuredSendInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalSimpleSendInstruction__checkLexicalInstruction, gClassInfoFor__lexicalSimpleSendInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalRepeatInstruction__checkLexicalInstruction, gClassInfoFor__lexicalRepeatInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalSelectInstruction__checkLexicalInstruction, gClassInfoFor__lexicalSelectInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalRoutineInstruction__checkLexicalInstruction, gClassInfoFor__lexicalRoutineInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalLogInstruction__checkLexicalInstruction, gClassInfoFor__lexicalLogInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalRewindInstruction__checkLexicalInstruction, gClassInfoFor__lexicalRewindInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalDropInstruction__checkLexicalInstruction, gClassInfoFor__lexicalDropInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalTagInstruction__checkLexicalInstruction, gClassInfoFor__lexicalTagInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalErrorInstruction__checkLexicalInstruction, gClassInfoFor__lexicalErrorInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalWarningInstruction__checkLexicalInstruction, gClassInfoFor__lexicalWarningInstruction.slotID ()) ;
 enterCategoryMethod__abstractLexicalRule__checkLexicalRule ((typeCategoryMethod__abstractLexicalRule__checkLexicalRule) category_method__lexicalImplicitRule__checkLexicalRule, gClassInfoFor__lexicalImplicitRule.slotID ()) ;
 enterCategoryMethod__abstractLexicalRule__checkLexicalRule ((typeCategoryMethod__abstractLexicalRule__checkLexicalRule) category_method__lexicalExplicitRule__checkLexicalRule, gClassInfoFor__lexicalExplicitRule.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_lexiqueCompilation (prologueRoutineFor_lexiqueCompilation,
                                   NULL) ;

//---------------------------------------------------------------------------*

