//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'lexiqueCompilation.cpp'                        *
//                        Generated by version 2.4.3                         *
//                      april 6th, 2013, at 17h56'56"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "lexiqueCompilation.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------*

#include "lexiqueLL1grammar.h"
#include "galgas_cli_options.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "lexiqueCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                 Filewrapper 'lexiqueGenerationTemplates'                  *
//                                                                           *
//---------------------------------------------------------------------------*

extern const cDirectoryWrapper gWrapperDirectory_0_lexiqueGenerationTemplates ;

//---------------------------------------------------------------------------*
//                                                                           *
//     Filewrapper template 'lexiqueGenerationTemplates newHeaderZone2'      *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_newHeaderZone_32_ (C_Compiler * inCompiler,
                                                                                const GALGAS_string & in_LEXIQUE_5F_IDENTIFIER,
                                                                                const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT,
                                                                                const GALGAS_lexiqueComponentAST & in_LEXIQUE_5F_COMPONENT_5F_ROOT
                                                                                COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//     Filewrapper template 'lexiqueGenerationTemplates newHeaderZone3'      *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_newHeaderZone_33_ (C_Compiler * inCompiler,
                                                                                const GALGAS_string & in_LEXIQUE_5F_IDENTIFIER,
                                                                                const GALGAS_lexicalListDeclarationListAST & in_DELIMITOR_5F_LIST_5F_LIST,
                                                                                const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT,
                                                                                const GALGAS_indexingListAST & in_INDEXING_5F_LIST
                                                                                COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
// Filewrapper template 'lexiqueGenerationTemplates newImplementationZone2'  *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_newImplementationZone_32_ (C_Compiler * inCompiler,
                                                                                        const GALGAS_string & in_LEXIQUE_5F_IDENTIFIER,
                                                                                        const GALGAS_lexicalAttributeMap & in_LEXICAL_5F_ATTRIBUTE_5F_MAP,
                                                                                        const GALGAS_lexicalMessageMap & in_LEXICAL_5F_MESSAGE_5F_MAP,
                                                                                        const GALGAS_terminalList & in_TERMINAL_5F_LIST,
                                                                                        const GALGAS_lexicalExplicitTokenListMapMap & in_LEXICAL_5F_TOKEN_5F_LIST_5F_MAP,
                                                                                        const GALGAS_stringset & in_STRINGS_5F_IN_5F_EXPLICIT_5F_RULES,
                                                                                        const GALGAS_lexicalRuleListAST & in_LEXICAL_5F_RULE_5F_LIST,
                                                                                        const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT,
                                                                                        const GALGAS_lexiqueComponentAST & in_LEXIQUE_5F_COMPONENT_5F_ROOT
                                                                                        COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//    Filewrapper template 'lexiqueGenerationTemplates cocoaHeaderZone2'     *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_cocoaHeaderZone_32_ (C_Compiler * inCompiler,
                                                                                  const GALGAS_string & in_LEXIQUE_5F_CLASS_5F_NAME,
                                                                                  const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT
                                                                                  COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//    Filewrapper template 'lexiqueGenerationTemplates cocoaHeaderZone3'     *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_cocoaHeaderZone_33_ (C_Compiler * inCompiler,
                                                                                  const GALGAS_string & in_LEXIQUE_5F_CLASS_5F_NAME,
                                                                                  const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT
                                                                                  COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Filewrapper template 'lexiqueGenerationTemplates cocoaImplementationZone2' *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_cocoaImplementationZone_32_ (C_Compiler * inCompiler,
                                                                                          const GALGAS_string & in_LEXIQUE_5F_CLASS_5F_NAME,
                                                                                          const GALGAS_lexicalAttributeMap & in_LEXICAL_5F_ATTRIBUTE_5F_MAP,
                                                                                          const GALGAS_lexicalMessageMap & in_LEXICAL_5F_MESSAGE_5F_MAP,
                                                                                          const GALGAS_terminalList & in_TERMINAL_5F_LIST,
                                                                                          const GALGAS_stringset & in_STRINGS_5F_IN_5F_EXPLICIT_5F_RULES,
                                                                                          const GALGAS_lexicalRuleListAST & in_LEXICAL_5F_RULE_5F_LIST,
                                                                                          const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT,
                                                                                          const GALGAS_lexiqueComponentAST & in_LEXIQUE_5F_COMPONENT_5F_ROOT
                                                                                          COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Filewrapper 'lexiqueGenerationTemplates'                  *
//                                                                           *
//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_lexiqueGenerationTemplates_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_lexiqueGenerationTemplates_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_lexiqueGenerationTemplates (
  "",
  0,
  gWrapperAllFiles_lexiqueGenerationTemplates_0,
  0,
  gWrapperAllDirectories_lexiqueGenerationTemplates_0
) ;


//---------------------------------------------------------------------------*
//                                                                           *
//     Filewrapper template 'lexiqueGenerationTemplates newHeaderZone2'      *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_newHeaderZone_32_ (C_Compiler * inCompiler,
                                                                                const GALGAS_string & in_LEXIQUE_5F_IDENTIFIER,
                                                                                const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT,
                                                                                const GALGAS_lexiqueComponentAST & in_LEXIQUE_5F_COMPONENT_5F_ROOT
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "\n"
    "#ifndef " ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "_CLASS_DEFINED\n"
    "#define " ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "_CLASS_DEFINED\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "#include \"galgas2/C_Lexique.h\"\n"
    "#include \"galgas2/predefined-types.h\"\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                    E X T E R N    R O U T I N E S                         *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_708_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalRoutineMessageMap (SOURCE_FILE_AT_LINE (16)).isValid ()) {
    cEnumerator_lexicalRoutineMap enumerator_708 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalRoutineMessageMap (SOURCE_FILE_AT_LINE (16)), kEnumeration_up) ;
    while (enumerator_708.hasCurrentObject ()) {
      const enumGalgasBool test_0 = enumerator_708.current_mIsExtern (HERE).boolEnum () ;
      if (kBoolTrue == test_0) {
        result << "\n"
          "void scanner_routine_" ;
        result << enumerator_708.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (18)).stringValue () ;
        result << " (C_Lexique & inLexique" ;
        GALGAS_uint index_876_ (0) ;
        if (enumerator_708.current_mLexicalRoutineFormalArgumentList (HERE).isValid ()) {
          cEnumerator_lexicalRoutineFormalArgumentList enumerator_876 (enumerator_708.current_mLexicalRoutineFormalArgumentList (HERE), kEnumeration_up) ;
          while (enumerator_876.hasCurrentObject ()) {
            result << ",\n"
              "                " ;
            result << categoryReader_cppConstInFormalArgument (enumerator_876.current_mLexicalFormalArgumentMode (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (20)).stringValue () ;
            result << categoryReader_cppTypeName (enumerator_876.current_mLexicalFormalArgumentType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (21)).stringValue () ;
            result << categoryReader_cppReferenceInFormalArgument (enumerator_876.current_mLexicalFormalArgumentMode (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (22)).stringValue () ;
            result << " " ;
            result << enumerator_876.current_mArgumentNameForComment (HERE).stringValue () ;
            index_876_.increment () ;
            enumerator_876.gotoNextObject () ;
          }
        }
        GALGAS_uint index_1242_ (0) ;
        if (enumerator_708.current_mErrorMessageList (HERE).isValid ()) {
          cEnumerator_stringlist enumerator_1242 (enumerator_708.current_mErrorMessageList (HERE), kEnumeration_up) ;
          while (enumerator_1242.hasCurrentObject ()) {
            result << ",\n"
              "                const char * " ;
            result << enumerator_1242.current_mValue (HERE).stringValue () ;
            index_1242_.increment () ;
            enumerator_1242.gotoNextObject () ;
          }
        }
        result << ") ;\n" ;
      }else if (kBoolFalse == test_0) {
      }
      index_708_.increment () ;
      enumerator_708.gotoNextObject () ;
    }
  }
  result << "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                    E X T E R N    F U N C T I O N S                       *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_1771_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalFunctionMap (SOURCE_FILE_AT_LINE (38)).isValid ()) {
    cEnumerator_lexicalFunctionMap enumerator_1771 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalFunctionMap (SOURCE_FILE_AT_LINE (38)), kEnumeration_up) ;
    while (enumerator_1771.hasCurrentObject ()) {
      const enumGalgasBool test_1 = enumerator_1771.current_mIsExtern (HERE).boolEnum () ;
      if (kBoolTrue == test_1) {
        result << "\n" ;
        result << categoryReader_cppTypeName (enumerator_1771.current_mReturnedLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (40)).stringValue () ;
        result << " scanner_function_" ;
        result << enumerator_1771.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (40)).stringValue () ;
        result << " (C_Lexique & inLexique" ;
        GALGAS_uint index_1962_ (0) ;
        if (enumerator_1771.current_mLexicalTypeList (HERE).isValid ()) {
          cEnumerator_lexicalFunctionFormalArgumentList enumerator_1962 (enumerator_1771.current_mLexicalTypeList (HERE), kEnumeration_up) ;
          while (enumerator_1962.hasCurrentObject ()) {
            result << ",\n"
              "                const " ;
            result << categoryReader_cppTypeName (enumerator_1962.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (42)).stringValue () ;
            result << " " ;
            result << enumerator_1962.current_mArgumentNameForComment (HERE).stringValue () ;
            index_1962_.increment () ;
            enumerator_1962.gotoNextObject () ;
          }
        }
        result << ") ;\n" ;
      }else if (kBoolFalse == test_1) {
      }
      index_1771_.increment () ;
      enumerator_1771.gotoNextObject () ;
    }
  }
  result << "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                       T O K E N    C L A S S                              *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "class cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " : public cToken {\n" ;
  GALGAS_uint index_2608_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (56)).isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_2608 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (56)), kEnumeration_up) ;
    while (enumerator_2608.hasCurrentObject ()) {
      result << "  public : " ;
      result << categoryReader_cppTypeName (enumerator_2608.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (57)).stringValue () ;
      result << " mLexicalAttribute_" ;
      result << enumerator_2608.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (57)).stringValue () ;
      result << " ;\n" ;
      index_2608_.increment () ;
      enumerator_2608.gotoNextObject () ;
    }
  }
  result << "\n"
    "  public : cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (void) ;\n"
    "} ;\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                     S C A N N E R    C L A S S                            *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "class C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " : public C_Lexique {\n"
    "//--- Constructors\n"
    "  public : C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (C_Compiler * inCallerCompiler,\n"
    "                       const C_String & inDependencyFileExtension,\n"
    "                       const C_String & inDependencyFilePath,\n"
    "                       const C_String & inSourceFileName\n"
    "                       COMMA_LOCATION_ARGS) ;\n"
    "\n"
    "  public : C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (C_Compiler * inCallerCompiler,\n"
    "                       const C_String & inSourceString,\n"
    "                       const C_String & inStringForError\n"
    "                       COMMA_LOCATION_ARGS) ;\n"
    "\n"
    "//--- Instrospection\n"
    "  public : static GALGAS_stringlist symbols (LOCATION_ARGS) ;\n"
    "\n"
    "//--- Declaring a protected virtual destructor enables the compiler to raise\n"
    "//    an error if a direct delete is performed; only the static method\n"
    "//    C_SharedObject::detachPointer may invoke delete.\n"
    "  #ifndef DO_NOT_GENERATE_CHECKINGS\n"
    "    protected : virtual ~ C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (void) {}\n"
    "  #endif\n" ;
  const enumGalgasBool test_2 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (91)).reader_length (SOURCE_FILE_AT_LINE (91)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_2) {
    result << "\n"
      "//--- Scanner mode for template scanner\n"
      "  private : PMSInt32 mMatchedTemplateDelimiterIndex ;\n" ;
  }else if (kBoolFalse == test_2) {
  }
  result << "\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Filewrapper template 'lexiqueGenerationTemplates newHeaderZone3'      *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_newHeaderZone_33_ (C_Compiler * inCompiler,
                                                                                const GALGAS_string & in_LEXIQUE_5F_IDENTIFIER,
                                                                                const GALGAS_lexicalListDeclarationListAST & in_DELIMITOR_5F_LIST_5F_LIST,
                                                                                const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT,
                                                                                const GALGAS_indexingListAST & in_INDEXING_5F_LIST
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "\n"
    "//--- Terminal symbols enumeration\n"
    "  public : enum {kToken_" ;
  GALGAS_uint index_140_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (4)).isValid ()) {
    cEnumerator_terminalList enumerator_140 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (4)), kEnumeration_up) ;
    while (enumerator_140.hasCurrentObject ()) {
      result << ",\n"
        "   kToken_" ;
      result << enumerator_140.current_mTerminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (5)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (5)).stringValue () ;
      index_140_.increment () ;
      enumerator_140.gotoNextObject () ;
    }
  }
  result << "} ;\n" ;
  GALGAS_uint index_280_ (0) ;
  if (in_DELIMITOR_5F_LIST_5F_LIST.isValid ()) {
    cEnumerator_lexicalListDeclarationListAST enumerator_280 (in_DELIMITOR_5F_LIST_5F_LIST, kEnumeration_up) ;
    while (enumerator_280.hasCurrentObject ()) {
      result << "\n"
        "//--- Key words table '" ;
      result << enumerator_280.current_mName (HERE).reader_string (SOURCE_FILE_AT_LINE (10)).stringValue () ;
      result << "'\n"
        "  public : static PMSInt16 search_into_" ;
      result << enumerator_280.current_mName (HERE).reader_string (SOURCE_FILE_AT_LINE (11)).stringValue () ;
      result << " (const C_String & inSearchedString) ;\n" ;
      index_280_.increment () ;
      enumerator_280.gotoNextObject () ;
    }
  }
  result << "  \n"
    "\n"
    "//--- Assign from attribute\n" ;
  GALGAS_uint index_539_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (17)).isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_539 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (17)), kEnumeration_up) ;
    while (enumerator_539.hasCurrentObject ()) {
      result << "  public : GALGAS_l" ;
      result << categoryReader_lexicalTypeBaseName (enumerator_539.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (18)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (18)).stringValue () ;
      result << " synthetizedAttribute_" ;
      result << enumerator_539.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (18)).stringValue () ;
      result << " (void) const ;\n" ;
      index_539_.increment () ;
      enumerator_539.gotoNextObject () ;
    }
  }
  result << "\n"
    "\n"
    "//--- Attribute access\n" ;
  GALGAS_uint index_797_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (24)).isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_797 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (24)), kEnumeration_up) ;
    while (enumerator_797.hasCurrentObject ()) {
      result << "  public : " ;
      result << categoryReader_cppTypeName (enumerator_797.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (25)).stringValue () ;
      result << " attributeValue_" ;
      result << enumerator_797.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (25)).stringValue () ;
      result << " (void) const ;\n" ;
      index_797_.increment () ;
      enumerator_797.gotoNextObject () ;
    }
  }
  result << "\n"
    "\n"
    "//--- Indexing keys\n" ;
  GALGAS_uint index_1009_ (0) ;
  if (in_INDEXING_5F_LIST.isValid ()) {
    cEnumerator_indexingListAST enumerator_1009 (in_INDEXING_5F_LIST, kEnumeration_up) ;
    const bool nonEmpty_enumerator_1009 = enumerator_1009.hasCurrentObject () ;
    if (nonEmpty_enumerator_1009) {
      result << "  public : enum {" ;
    }
    while (enumerator_1009.hasCurrentObject ()) {
      result << "\n"
        "    kIndexing_" ;
      result << enumerator_1009.current_mIndexName (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (33)).stringValue () ;
      if (enumerator_1009.hasNextObject ()) {
        result << "," ;
      }
      index_1009_.increment () ;
      enumerator_1009.gotoNextObject () ;
    }
    if (nonEmpty_enumerator_1009) {
      result << "\n"
        "  } ;\n" ;
    }
  }
  result << "\n"
    "//--- Indexing directory\n"
    "  protected : virtual C_String indexingDirectory (void) const ;\n"
    "\n"
    "//--- Parse lexical token\n"
    "  protected : virtual bool parseLexicalToken (void) ;\n"
    "\n"
    "//--- Append terminal message\n"
    "  protected : virtual void appendTerminalMessageToSyntaxErrorMessage (const PMSInt16 numeroTerminal,\n"
    "                                                              C_String & messageErreur) ;\n"
    "\n"
    "//--- Get terminal count\n"
    "  public : virtual PMSInt16 terminalVocabularyCount (void) const { return " ;
  result << in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (49)).reader_length (SOURCE_FILE_AT_LINE (49)).reader_string (SOURCE_FILE_AT_LINE (49)).stringValue () ;
  result << " ; }\n"
    "\n"
    "//--- Get Token String\n"
    "  public : virtual C_String getCurrentTokenString (const cToken * inTokenPtr) const ;\n"
    "\n"
    "//--- Enter Token\n"
    "  protected : void enterToken (const cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " & inToken) ;\n"
    "} ;\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "#endif\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// Filewrapper template 'lexiqueGenerationTemplates newImplementationZone2'  *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_newImplementationZone_32_ (C_Compiler * inCompiler,
                                                                                        const GALGAS_string & in_LEXIQUE_5F_IDENTIFIER,
                                                                                        const GALGAS_lexicalAttributeMap & in_LEXICAL_5F_ATTRIBUTE_5F_MAP,
                                                                                        const GALGAS_lexicalMessageMap & in_LEXICAL_5F_MESSAGE_5F_MAP,
                                                                                        const GALGAS_terminalList & in_TERMINAL_5F_LIST,
                                                                                        const GALGAS_lexicalExplicitTokenListMapMap & in_LEXICAL_5F_TOKEN_5F_LIST_5F_MAP,
                                                                                        const GALGAS_stringset & in_STRINGS_5F_IN_5F_EXPLICIT_5F_RULES,
                                                                                        const GALGAS_lexicalRuleListAST & in_LEXICAL_5F_RULE_5F_LIST,
                                                                                        const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT,
                                                                                        const GALGAS_lexiqueComponentAST & in_LEXIQUE_5F_COMPONENT_5F_ROOT
                                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "#include <ctype.h>\n"
    "#include <string.h>\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "#include \"utilities/MF_MemoryControl.h\"\n"
    "#include \"strings/unicode_character_cpp.h\"\n"
    "#include \"galgas2/scanner_actions.h\"\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "#include \"" ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexiqueComponentName (SOURCE_FILE_AT_LINE (12)).reader_string (SOURCE_FILE_AT_LINE (12)).stringValue () ;
  result << ".h\"\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "#ifndef DO_NOT_GENERATE_CHECKINGS\n"
    "  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFilePath ().cString (HERE), lineNumber ()\n"
    "  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE\n"
    "#else\n"
    "  #define LINE_AND_SOURCE_FILE\n"
    "  #define COMMA_LINE_AND_SOURCE_FILE\n"
    "#endif\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                               Constructors                                *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (void)" ;
  GALGAS_uint index_1286_ (0) ;
  if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_1286 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
    const bool nonEmpty_enumerator_1286 = enumerator_1286.hasCurrentObject () ;
    if (nonEmpty_enumerator_1286) {
      result << " :\n" ;
    }
    while (enumerator_1286.hasCurrentObject ()) {
      result << "mLexicalAttribute_" ;
      result << enumerator_1286.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (33)).stringValue () ;
      result << " ()" ;
      if (enumerator_1286.hasNextObject ()) {
        result << ",\n" ;
      }
      index_1286_.increment () ;
      enumerator_1286.gotoNextObject () ;
    }
  }
  result << " {\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (C_Compiler * inCallerCompiler,\n"
    "                const C_String & inDependencyFileExtension,\n"
    "                const C_String & inDependencyFilePath,\n"
    "                const C_String & inSourceFileName\n"
    "                COMMA_LOCATION_ARGS) :\n"
    "C_Lexique (inCallerCompiler, inDependencyFileExtension, inDependencyFilePath, inSourceFileName COMMA_THERE)" ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (47)).reader_length (SOURCE_FILE_AT_LINE (47)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    result << ",\n"
      "mMatchedTemplateDelimiterIndex (-1)" ;
  }else if (kBoolFalse == test_0) {
  }
  result << " {\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (C_Compiler * inCallerCompiler,\n"
    "                const C_String & inSourceString,\n"
    "                const C_String & inStringForError\n"
    "                COMMA_LOCATION_ARGS) :\n"
    "C_Lexique (inCallerCompiler, inSourceString, inStringForError COMMA_THERE)" ;
  const enumGalgasBool test_1 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (60)).reader_length (SOURCE_FILE_AT_LINE (60)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_1) {
    result << ",\n"
      "mMatchedTemplateDelimiterIndex (-1)" ;
  }else if (kBoolFalse == test_1) {
  }
  result << " {\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                 I N D E X I N G    D I R E C T O R Y                      *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "C_String C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::indexingDirectory (void) const {\n"
    "  return " ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mIndexingDirectory (SOURCE_FILE_AT_LINE (73)).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE_AT_LINE (73)).stringValue () ;
  result << " ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                        Lexical error message list                         *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_3531_ (0) ;
  if (in_LEXICAL_5F_MESSAGE_5F_MAP.isValid ()) {
    cEnumerator_lexicalMessageMap enumerator_3531 (in_LEXICAL_5F_MESSAGE_5F_MAP, kEnumeration_up) ;
    while (enumerator_3531.hasCurrentObject ()) {
      result << "\n"
        "static const utf32 gLexicalMessage_" ;
      result << enumerator_3531.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (83)).stringValue () ;
      result << " [] = " ;
      result << enumerator_3531.current_mLexicalMessage (HERE).mAttribute_string.reader_utf_33__32_Representation (SOURCE_FILE_AT_LINE (83)).stringValue () ;
      result << " ;\n" ;
      index_3531_.increment () ;
      enumerator_3531.gotoNextObject () ;
    }
  }
  result << "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//          Syntax error messages, for every terminal symbol                 *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_4088_ (0) ;
  if (in_TERMINAL_5F_LIST.isValid ()) {
    cEnumerator_terminalList enumerator_4088 (in_TERMINAL_5F_LIST, kEnumeration_up) ;
    while (enumerator_4088.hasCurrentObject ()) {
      result << "\n"
        "//--- Syntax error message for terminal '$" ;
      result << enumerator_4088.current_mTerminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (93)).stringValue () ;
      result << "$' :\n"
        "static const utf32 gSyntaxErrorMessage_" ;
      result << enumerator_4088.current_mTerminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (94)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (94)).stringValue () ;
      result << " [] = " ;
      result << enumerator_4088.current_mSyntaxErrorMessage (HERE).reader_utf_33__32_Representation (SOURCE_FILE_AT_LINE (94)).stringValue () ;
      result << " ;\n" ;
      index_4088_.increment () ;
      enumerator_4088.gotoNextObject () ;
    }
  }
  result << "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                appendTerminalMessageToSyntaxErrorMessage                  *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "void C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::appendTerminalMessageToSyntaxErrorMessage (const PMSInt16 inTerminalIndex,\n"
    "                                           C_String & outSyntaxErrorMessage) {\n"
    "  static const utf32 * syntaxErrorMessageArray [" ;
  result << in_TERMINAL_5F_LIST.reader_length (SOURCE_FILE_AT_LINE (105)).add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (105)).reader_string (SOURCE_FILE_AT_LINE (105)).stringValue () ;
  result << "] = {kEndOfSourceLexicalErrorMessage" ;
  GALGAS_uint index_5058_ (0) ;
  if (in_TERMINAL_5F_LIST.isValid ()) {
    cEnumerator_terminalList enumerator_5058 (in_TERMINAL_5F_LIST, kEnumeration_up) ;
    while (enumerator_5058.hasCurrentObject ()) {
      result << ",\n"
        "    gSyntaxErrorMessage_" ;
      result << enumerator_5058.current_mTerminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (107)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (107)).stringValue () ;
      index_5058_.increment () ;
      enumerator_5058.gotoNextObject () ;
    }
  }
  result << "} ;\n"
    "  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                      U N I C O D E    S T R I N G S                       *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_5672_ (0) ;
  if (in_STRINGS_5F_IN_5F_EXPLICIT_5F_RULES.isValid ()) {
    cEnumerator_stringset enumerator_5672 (in_STRINGS_5F_IN_5F_EXPLICIT_5F_RULES, kEnumeration_up) ;
    while (enumerator_5672.hasCurrentObject ()) {
      result << "\n"
        "//--- Unicode string for '$" ;
      result << enumerator_5672.current_key (HERE).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (120)).stringValue () ;
      result << "$'\n"
        "static const utf32 kUnicodeString_" ;
      result << enumerator_5672.current_key (HERE).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (121)).stringValue () ;
      result << " [] = " ;
      result << enumerator_5672.current_key (HERE).reader_utf_33__32_Representation (SOURCE_FILE_AT_LINE (121)).stringValue () ;
      result << " ;\n" ;
      index_5672_.increment () ;
      enumerator_5672.gotoNextObject () ;
    }
  }
  result << "\n" ;
  GALGAS_uint index_6110_ (0) ;
  if (in_LEXICAL_5F_TOKEN_5F_LIST_5F_MAP.isValid ()) {
    cEnumerator_lexicalExplicitTokenListMapMap enumerator_6110 (in_LEXICAL_5F_TOKEN_5F_LIST_5F_MAP, kEnumeration_up) ;
    while (enumerator_6110.hasCurrentObject ()) {
      result << "//---------------------------------------------------------------------------*\n"
        "//                                                                           *\n"
        "//             Key words table '" ;
      result << enumerator_6110.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (128)).stringValue () ;
      result << "'                            *\n"
        "//                                                                           *\n"
        "//---------------------------------------------------------------------------*\n"
        "\n"
        "static const PMSInt32 ktable_size_" ;
      result << enumerator_6110.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (131)).stringValue () ;
      result << " = " ;
      result << enumerator_6110.current_mExplicitTokenListMap (HERE).reader_count (SOURCE_FILE_AT_LINE (131)).reader_string (SOURCE_FILE_AT_LINE (131)).stringValue () ;
      result << " ;\n"
        "\n"
        "static const C_unicode_lexique_table_entry ktable_for_" ;
      result << enumerator_6110.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (132)).stringValue () ;
      result << " [ktable_size_" ;
      result << enumerator_6110.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (132)).stringValue () ;
      result << "] = {\n" ;
      GALGAS_uint index_6706_ (0) ;
      if (enumerator_6110.current_mTokenSortedList (HERE).isValid ()) {
        cEnumerator_tokenSortedlist enumerator_6706 (enumerator_6110.current_mTokenSortedList (HERE), kEnumeration_up) ;
        while (enumerator_6706.hasCurrentObject ()) {
          result << "  C_unicode_lexique_table_entry (kUnicodeString_" ;
          result << enumerator_6706.current_mName (HERE).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (134)).stringValue () ;
          result << ", " ;
          result << enumerator_6706.current_mLength (HERE).reader_string (SOURCE_FILE_AT_LINE (134)).stringValue () ;
          result << ", C_Lexique_" ;
          result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
          result << "::kToken_" ;
          result << enumerator_6706.current_mTerminalName (HERE).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (134)).stringValue () ;
          result << ")" ;
          if (enumerator_6706.hasNextObject ()) {
            result << ",\n" ;
          }
          index_6706_.increment () ;
          enumerator_6706.gotoNextObject () ;
        }
      }
      result << "\n"
        "} ;\n"
        "\n"
        "PMSInt16 C_Lexique_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << "::search_into_" ;
      result << enumerator_6110.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (138)).stringValue () ;
      result << " (const C_String & inSearchedString) {\n"
        "  return searchInList (inSearchedString, ktable_for_" ;
      result << enumerator_6110.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (139)).stringValue () ;
      result << ", ktable_size_" ;
      result << enumerator_6110.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (139)).stringValue () ;
      result << ") ;\n"
        "}\n"
        "\n" ;
      index_6110_.increment () ;
      enumerator_6110.gotoNextObject () ;
    }
  }
  result << "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                          getCurrentTokenString                            *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "C_String C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::getCurrentTokenString (const cToken * inTokenPtr) const {\n"
    "  const cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " * ptr = (const cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " *) inTokenPtr ;\n"
    "  C_String s ;\n"
    "  if (ptr == NULL) {\n"
    "    s.appendCString(\"$$\") ;\n"
    "  }else{\n"
    "    switch (ptr->mTokenCode) {\n"
    "    case kToken_:\n"
    "      s.appendCString(\"$$\") ;\n"
    "      break ;\n" ;
  GALGAS_uint index_8000_ (0) ;
  if (in_TERMINAL_5F_LIST.isValid ()) {
    cEnumerator_terminalList enumerator_8000 (in_TERMINAL_5F_LIST, kEnumeration_up) ;
    while (enumerator_8000.hasCurrentObject ()) {
      result << "    case kToken_" ;
      result << enumerator_8000.current_mTerminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (160)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (160)).stringValue () ;
      result << ":\n"
        "      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;\n"
        "      s.appendCString (" ;
      result << enumerator_8000.current_mTerminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (162)).reader_utf_38_Representation (SOURCE_FILE_AT_LINE (162)).stringValue () ;
      result << ") ;\n"
        "      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;\n" ;
      GALGAS_uint index_8396_ (0) ;
      if (enumerator_8000.current_mSentAttributeList (HERE).isValid ()) {
        cEnumerator_lexicalSentValueList enumerator_8396 (enumerator_8000.current_mSentAttributeList (HERE), kEnumeration_up) ;
        while (enumerator_8396.hasCurrentObject ()) {
          result << "      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;\n"
            "      s." ;
          result << categoryReader_appendMethodName (enumerator_8396.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (166)).stringValue () ;
          result << " (ptr->mLexicalAttribute_" ;
          result << enumerator_8396.current_mLexicalAttributeName (HERE).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (166)).stringValue () ;
          result << categoryReader_appendArgumentOfMethod (enumerator_8396.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (166)).stringValue () ;
          result << ") ;\n" ;
          index_8396_.increment () ;
          enumerator_8396.gotoNextObject () ;
        }
      }
      result << "      break ;\n" ;
      index_8000_.increment () ;
      enumerator_8000.gotoNextObject () ;
    }
  }
  result << "    default:\n"
    "      break ;\n"
    "    }\n"
    "  }\n"
    "  return s ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                           Template Delimiters                             *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n" ;
  GALGAS_uint index_9302_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (183)).isValid ()) {
    cEnumerator_templateDelimitorList enumerator_9302 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (183)), kEnumeration_up) ;
    const bool nonEmpty_enumerator_9302 = enumerator_9302.hasCurrentObject () ;
    if (nonEmpty_enumerator_9302) {
      result << "static const cTemplateDelimiter kTemplateDefinitionArray [" ;
      result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (184)).reader_length (SOURCE_FILE_AT_LINE (184)).reader_string (SOURCE_FILE_AT_LINE (184)).stringValue () ;
      result << "] = {\n" ;
    }
    while (enumerator_9302.hasCurrentObject ()) {
      result << "  cTemplateDelimiter (kUnicodeString_" ;
      result << enumerator_9302.current_mStartString (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (185)).stringValue () ;
      result << ", " ;
      result << enumerator_9302.current_mStartString (HERE).mAttribute_string.reader_length (SOURCE_FILE_AT_LINE (185)).reader_string (SOURCE_FILE_AT_LINE (185)).stringValue () ;
      result << ", " ;
      const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, enumerator_9302.current_mEndString (HERE).mAttribute_string.reader_length (SOURCE_FILE_AT_LINE (186)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
      if (kBoolTrue == test_2) {
        result << "NULL, 0," ;
      }else if (kBoolFalse == test_2) {
        result << "kUnicodeString_" ;
        result << enumerator_9302.current_mEndString (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (189)).stringValue () ;
        result << ", " ;
        result << enumerator_9302.current_mEndString (HERE).mAttribute_string.reader_length (SOURCE_FILE_AT_LINE (189)).reader_string (SOURCE_FILE_AT_LINE (189)).stringValue () ;
        result << "," ;
      }
      result << " NULL, " ;
      result << enumerator_9302.current_mPreservesStartDelimiter (HERE).operator_not (SOURCE_FILE_AT_LINE (192)).reader_cString (SOURCE_FILE_AT_LINE (192)).stringValue () ;
      result << ")" ;
      if (enumerator_9302.hasNextObject ()) {
        result << ",\n" ;
      }
      index_9302_.increment () ;
      enumerator_9302.gotoNextObject () ;
    }
    if (nonEmpty_enumerator_9302) {
      result << "\n"
        "} ;\n" ;
    }
  }
  result << "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                           Template Replacements                           *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n" ;
  GALGAS_uint index_10348_ (0) ;
  if (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE_AT_LINE (204)).isValid ()) {
    cEnumerator_templateReplacementListAST enumerator_10348 (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE_AT_LINE (204)), kEnumeration_up) ;
    const bool nonEmpty_enumerator_10348 = enumerator_10348.hasCurrentObject () ;
    if (nonEmpty_enumerator_10348) {
      result << "static const cTemplateDelimiter kTemplateReplacementArray [" ;
      result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE_AT_LINE (205)).reader_length (SOURCE_FILE_AT_LINE (205)).reader_string (SOURCE_FILE_AT_LINE (205)).stringValue () ;
      result << "] = {\n" ;
    }
    while (enumerator_10348.hasCurrentObject ()) {
      result << "  cTemplateDelimiter (kUnicodeString_" ;
      result << enumerator_10348.current_mMatchString (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (207)).stringValue () ;
      result << ", " ;
      result << enumerator_10348.current_mMatchString (HERE).mAttribute_string.reader_length (SOURCE_FILE_AT_LINE (207)).reader_string (SOURCE_FILE_AT_LINE (207)).stringValue () ;
      result << ", kUnicodeString_" ;
      result << enumerator_10348.current_mReplacementString (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (208)).stringValue () ;
      result << ", " ;
      result << enumerator_10348.current_mReplacementString (HERE).mAttribute_string.reader_length (SOURCE_FILE_AT_LINE (208)).reader_string (SOURCE_FILE_AT_LINE (208)).stringValue () ;
      result << ", " ;
      const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, enumerator_10348.current_mReplacementFunction (HERE).mAttribute_string.reader_length (SOURCE_FILE_AT_LINE (209)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
      if (kBoolTrue == test_3) {
        result << "NULL" ;
      }else if (kBoolFalse == test_3) {
        result << "scanner_routine_" ;
        result << enumerator_10348.current_mReplacementFunction (HERE).reader_string (SOURCE_FILE_AT_LINE (212)).stringValue () ;
      }
      result << ", true)" ;
      if (enumerator_10348.hasNextObject ()) {
        result << ",\n" ;
      }
      index_10348_.increment () ;
      enumerator_10348.gotoNextObject () ;
    }
    if (nonEmpty_enumerator_10348) {
      result << "\n"
        "} ;\n" ;
    }
  }
  result << "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//            Terminal Symbols as end of script in template mark             *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n" ;
  GALGAS_uint index_11345_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (225)).isValid ()) {
    cEnumerator_terminalList enumerator_11345 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (225)), kEnumeration_up) ;
    const bool nonEmpty_enumerator_11345 = enumerator_11345.hasCurrentObject () ;
    if (nonEmpty_enumerator_11345) {
      result << "static const bool kEndOfScriptInTemplateArray [" ;
      result << in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (226)).reader_length (SOURCE_FILE_AT_LINE (226)).reader_string (SOURCE_FILE_AT_LINE (226)).stringValue () ;
      result << "] = {\n" ;
    }
    while (enumerator_11345.hasCurrentObject ()) {
      result << "  " ;
      result << enumerator_11345.current_mIsEndOfTemplateMark (HERE).reader_cString (SOURCE_FILE_AT_LINE (227)).stringValue () ;
      result << " /* " ;
      result << enumerator_11345.current_mTerminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (227)).stringValue () ;
      result << " */" ;
      if (enumerator_11345.hasNextObject ()) {
        result << ",\n" ;
      }
      index_11345_.increment () ;
      enumerator_11345.gotoNextObject () ;
    }
    if (nonEmpty_enumerator_11345) {
      result << "\n"
        "} ;\n" ;
    }
  }
  result << "\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//               P A R S E    L E X I C A L    T O K E N                     *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "bool C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::parseLexicalToken (void) {\n"
    "  cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " token ;\n"
    "  mLoop = true ;\n"
    "  token.mTokenCode = -1 ;\n"
    "  while ((token.mTokenCode < 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n" ;
  const enumGalgasBool test_4 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (245)).reader_length (SOURCE_FILE_AT_LINE (245)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_4) {
    result << "    if ((mMatchedTemplateDelimiterIndex >= 0)\n"
      "     && (kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength > 0)\n"
      "     && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n"
      "      const bool foundEndDelimitor = testForInputUTF32String (kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndString,\n"
      "                                                              kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength,\n"
      "                                                              true) ;\n"
      "      if (foundEndDelimitor) {\n"
      "        mMatchedTemplateDelimiterIndex = -1 ;\n"
      "      }\n"
      "    }\n"
      "    while ((mMatchedTemplateDelimiterIndex < 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n"
      "      PMSInt32 replacementIndex = 0 ;\n"
      "      while (replacementIndex >= 0) {\n"
      "        replacementIndex = findTemplateDelimiterIndex (kTemplateReplacementArray, " ;
    result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE_AT_LINE (259)).reader_length (SOURCE_FILE_AT_LINE (259)).reader_string (SOURCE_FILE_AT_LINE (259)).stringValue () ;
    result << ") ;\n"
      "        if (replacementIndex >= 0) {\n"
      "          if (kTemplateReplacementArray [replacementIndex].mReplacementFunction == NULL) {\n"
      "            token.mTemplateStringBeforeToken << kTemplateReplacementArray [replacementIndex].mEndString ;\n"
      "          }else{\n"
      "            C_String s ;\n"
      "            while (notTestForInputUTF32String (kTemplateReplacementArray [replacementIndex].mEndString,\n"
      "                                               kTemplateReplacementArray [replacementIndex].mEndStringLength,\n"
      "                                               kEndOfSourceLexicalErrorMessage\n"
      "                                               COMMA_HERE)) {\n"
      "              s.appendUnicodeCharacter (previousChar () COMMA_HERE) ;\n"
      "            }\n"
      "            kTemplateReplacementArray [replacementIndex].mReplacementFunction (*this, s, token.mTemplateStringBeforeToken) ;\n"
      "          }\n"
      "        }\n"
      "      }\n"
      "      mMatchedTemplateDelimiterIndex = findTemplateDelimiterIndex (kTemplateDefinitionArray, " ;
    result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (275)).reader_length (SOURCE_FILE_AT_LINE (275)).reader_string (SOURCE_FILE_AT_LINE (275)).stringValue () ;
    result << ") ;\n"
      "      if (mMatchedTemplateDelimiterIndex < 0) {\n"
      "        token.mTemplateStringBeforeToken.appendUnicodeCharacter (mCurrentChar COMMA_HERE) ;\n"
      "        advance () ;\n"
      "      }\n"
      "    }\n"
      "    if ((mMatchedTemplateDelimiterIndex >= 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n" ;
    GALGAS_uint index_14475_ (0) ;
    if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
      cEnumerator_lexicalAttributeMap enumerator_14475 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
      while (enumerator_14475.hasCurrentObject ()) {
        result << "    token.mLexicalAttribute_" ;
        result << enumerator_14475.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (283)).stringValue () ;
        result << categoryReader_initialization (enumerator_14475.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (283)).stringValue () ;
        result << " ;\n" ;
        index_14475_.increment () ;
        enumerator_14475.gotoNextObject () ;
      }
    }
    result << "    mTokenStartLocation = mCurrentLocation ;\n"
      "    try{\n" ;
    if (GALGAS_uint ((PMUInt32) 8U).isValid ()) {
      result.incIndentation ((PMSInt32) GALGAS_uint ((PMUInt32) 8U).uintValue ()) ;
    }
    GALGAS_uint index_14668_ (0) ;
    if (in_LEXICAL_5F_RULE_5F_LIST.isValid ()) {
      cEnumerator_lexicalRuleListAST enumerator_14668 (in_LEXICAL_5F_RULE_5F_LIST, kEnumeration_up) ;
      while (enumerator_14668.hasCurrentObject ()) {
        result << callCategoryReader_generateCode ((const cPtr_abstractLexicalRuleAST *) enumerator_14668.current_mLexicalRule (HERE).ptr (), in_LEXIQUE_5F_IDENTIFIER, in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT, inCompiler COMMA_SOURCE_FILE_AT_LINE (290)).stringValue () ;
        index_14668_.increment () ;
        enumerator_14668.gotoNextObject () ;
      }
    }
    if (GALGAS_uint ((PMUInt32) 8U).isValid ()) {
      result.incIndentation (- ((PMSInt32) GALGAS_uint ((PMUInt32) 8U).uintValue ())) ;
    }
    result << "if (testForInputUTF32Char (TO_UNICODE ('\\0'))) { // End of source text \? \n"
      "          token.mTokenCode = kToken_ ; // Empty string code\n"
      "        }else{ // Unknown input character\n"
      "          unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;\n"
      "        }\n"
      "      }catch (const C_lexicalErrorException &) {\n"
      "        token.mTokenCode = -1 ; // No token\n"
      "        advance () ; // ... go throught unknown character\n"
      "      }\n"
      "    }\n"
      "    if ((token.mTokenCode > 0) && kEndOfScriptInTemplateArray [token.mTokenCode - 1]) {\n"
      "      mMatchedTemplateDelimiterIndex = -1 ;\n"
      "    }\n"
      "  " ;
  }else if (kBoolFalse == test_4) {
    GALGAS_uint index_15402_ (0) ;
    if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
      cEnumerator_lexicalAttributeMap enumerator_15402 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
      while (enumerator_15402.hasCurrentObject ()) {
        result << "    token.mLexicalAttribute_" ;
        result << enumerator_15402.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (308)).stringValue () ;
        result << categoryReader_initialization (enumerator_15402.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (308)).stringValue () ;
        result << " ;\n" ;
        index_15402_.increment () ;
        enumerator_15402.gotoNextObject () ;
      }
    }
    result << "    mTokenStartLocation = mCurrentLocation ;\n"
      "    try{\n" ;
    if (GALGAS_uint ((PMUInt32) 6U).isValid ()) {
      result.incIndentation ((PMSInt32) GALGAS_uint ((PMUInt32) 6U).uintValue ()) ;
    }
    GALGAS_uint index_15595_ (0) ;
    if (in_LEXICAL_5F_RULE_5F_LIST.isValid ()) {
      cEnumerator_lexicalRuleListAST enumerator_15595 (in_LEXICAL_5F_RULE_5F_LIST, kEnumeration_up) ;
      while (enumerator_15595.hasCurrentObject ()) {
        result << callCategoryReader_generateCode ((const cPtr_abstractLexicalRuleAST *) enumerator_15595.current_mLexicalRule (HERE).ptr (), in_LEXIQUE_5F_IDENTIFIER, in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT, inCompiler COMMA_SOURCE_FILE_AT_LINE (315)).stringValue () ;
        index_15595_.increment () ;
        enumerator_15595.gotoNextObject () ;
      }
    }
    if (GALGAS_uint ((PMUInt32) 6U).isValid ()) {
      result.incIndentation (- ((PMSInt32) GALGAS_uint ((PMUInt32) 6U).uintValue ())) ;
    }
    result << "if (testForInputUTF32Char (TO_UNICODE ('\\0'))) { // End of source text \? \n"
      "        token.mTokenCode = kToken_ ; // Empty string code\n"
      "      }else{ // Unknown input character\n"
      "        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;\n"
      "      }\n"
      "    }catch (const C_lexicalErrorException &) {\n"
      "      token.mTokenCode = -1 ; // No token\n"
      "      advance () ; // ... go throught unknown character\n"
      "    }" ;
  }
  result << "\n"
    "  }\n"
    "  if ((UNICODE_VALUE (mCurrentChar) == '\\0') && (token.mTemplateStringBeforeToken.length () > 0)) {\n"
    "    token.mTokenCode = 0 ;\n"
    "    enterToken (token) ;\n"
    "  }\n"
    "  return token.mTokenCode > 0 ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                         E N T E R    T O K E N                            *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "void C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::enterToken (const cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " & inToken) {\n"
    "  cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " * ptr = NULL ;\n"
    "  macroMyNew (ptr, cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " ()) ;\n"
    "  ptr->mTokenCode = inToken.mTokenCode ;\n"
    "  ptr->mStartLocation = mTokenStartLocation ;\n"
    "  ptr->mEndLocation = mTokenEndLocation ;\n"
    "  ptr->mTemplateStringBeforeToken = inToken.mTemplateStringBeforeToken ;\n" ;
  GALGAS_uint index_17168_ (0) ;
  if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_17168 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
    while (enumerator_17168.hasCurrentObject ()) {
      result << "  ptr->mLexicalAttribute_" ;
      result << enumerator_17168.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (350)).stringValue () ;
      result << " = inToken.mLexicalAttribute_" ;
      result << enumerator_17168.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (350)).stringValue () ;
      result << " ;\n" ;
      index_17168_.increment () ;
      enumerator_17168.gotoNextObject () ;
    }
  }
  result << "  enterTokenFromPointer (ptr) ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//               A T T R I B U T E   A C C E S S                             *\n"
    "//                                                                           *\n" ;
  GALGAS_uint index_17766_ (0) ;
  if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_17766 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
    while (enumerator_17766.hasCurrentObject ()) {
      result << "//---------------------------------------------------------------------------*\n"
        "\n" ;
      result << categoryReader_cppTypeName (enumerator_17766.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (362)).stringValue () ;
      result << " C_Lexique_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << "::attributeValue_" ;
      result << enumerator_17766.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (362)).stringValue () ;
      result << " (void) const {\n"
        "  cTokenFor_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << " * ptr = (cTokenFor_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << " *) mCurrentTokenPtr ;\n"
        "  return ptr->mLexicalAttribute_" ;
      result << enumerator_17766.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (364)).stringValue () ;
      result << " ;\n"
        "}\n"
        "\n" ;
      index_17766_.increment () ;
      enumerator_17766.gotoNextObject () ;
    }
  }
  result << "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//         A S S I G N    F R O M    A T T R I B U T E                       *\n"
    "//                                                                           *\n" ;
  GALGAS_uint index_18561_ (0) ;
  if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_18561 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
    while (enumerator_18561.hasCurrentObject ()) {
      result << "//---------------------------------------------------------------------------*\n"
        "\n"
        "GALGAS_l" ;
      result << categoryReader_lexicalTypeBaseName (enumerator_18561.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (374)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (374)).stringValue () ;
      result << " C_Lexique_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << "::synthetizedAttribute_" ;
      result << enumerator_18561.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (374)).stringValue () ;
      result << " (void) const {\n"
        "  cTokenFor_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << " * ptr = (cTokenFor_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << " *) mCurrentTokenPtr ;\n"
        "  macroValidSharedObject (ptr, cTokenFor_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << ") ;\n"
        "  GALGAS_location currentLocation (ptr->mStartLocation, ptr->mEndLocation, sourceText ()) ;\n"
        "  GALGAS_" ;
      result << categoryReader_lexicalTypeBaseName (enumerator_18561.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (378)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (378)).stringValue () ;
      result << " value (ptr->mLexicalAttribute_" ;
      result << enumerator_18561.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (378)).stringValue () ;
      result << ") ;\n"
        "  GALGAS_l" ;
      result << categoryReader_lexicalTypeBaseName (enumerator_18561.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (379)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (379)).stringValue () ;
      result << " result (value, currentLocation) ;\n"
        "  return result ;\n"
        "}\n"
        "\n" ;
      index_18561_.increment () ;
      enumerator_18561.gotoNextObject () ;
    }
  }
  result << "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                         I N T R O S P E C T I O N                         *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "GALGAS_stringlist C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::symbols (LOCATION_ARGS) {\n"
    "  GALGAS_stringlist result = GALGAS_stringlist::constructor_emptyList (THERE) ;\n" ;
  GALGAS_uint index_19986_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (391)).isValid ()) {
    cEnumerator_terminalList enumerator_19986 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (391)), kEnumeration_up) ;
    while (enumerator_19986.hasCurrentObject ()) {
      result << "  result.addAssign_operation (GALGAS_string (" ;
      result << enumerator_19986.current_mTerminalName (HERE).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE_AT_LINE (392)).stringValue () ;
      result << ") COMMA_THERE) ;\n" ;
      index_19986_.increment () ;
      enumerator_19986.gotoNextObject () ;
    }
  }
  result << "  return result ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Filewrapper template 'lexiqueGenerationTemplates cocoaHeaderZone2'     *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_cocoaHeaderZone_32_ (C_Compiler * inCompiler,
                                                                                  const GALGAS_string & in_LEXIQUE_5F_CLASS_5F_NAME,
                                                                                  const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT
                                                                                  COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  PMUInt32 columnMarker = 0 ;
  result << "\n"
    "#import \"OC_Lexique.h\"\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                    E X T E R N    R O U T I N E S                         *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_493_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalRoutineMessageMap (SOURCE_FILE_AT_LINE (10)).isValid ()) {
    cEnumerator_lexicalRoutineMap enumerator_493 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalRoutineMessageMap (SOURCE_FILE_AT_LINE (10)), kEnumeration_up) ;
    while (enumerator_493.hasCurrentObject ()) {
      const enumGalgasBool test_0 = enumerator_493.current_mIsExtern (HERE).boolEnum () ;
      if (kBoolTrue == test_0) {
        result << "\n"
          "void scanner_cocoa_routine_" ;
        result << enumerator_493.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (12)).stringValue () ;
        result << " (" ;
        columnMarker = result.currentColumn () ;
        result << "BOOL * ioScanningOk" ;
        GALGAS_uint index_670_ (0) ;
        if (enumerator_493.current_mLexicalRoutineFormalArgumentList (HERE).isValid ()) {
          cEnumerator_lexicalRoutineFormalArgumentList enumerator_670 (enumerator_493.current_mLexicalRoutineFormalArgumentList (HERE), kEnumeration_up) ;
          while (enumerator_670.hasCurrentObject ()) {
            result << ",\n"
              "                " ;
            result.appendSpacesUntilColumn (columnMarker) ;
            result << categoryReader_cppConstInFormalArgument (enumerator_670.current_mLexicalFormalArgumentMode (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (14)).stringValue () ;
            result << categoryReader_cocoaTypeName (enumerator_670.current_mLexicalFormalArgumentType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (15)).stringValue () ;
            result << categoryReader_cocoaPointerInFormalArgument (enumerator_670.current_mLexicalFormalArgumentMode (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (16)).stringValue () ;
            result << " " ;
            result << enumerator_670.current_mArgumentNameForComment (HERE).stringValue () ;
            index_670_.increment () ;
            enumerator_670.gotoNextObject () ;
          }
        }
        result << ") ;\n" ;
      }else if (kBoolFalse == test_0) {
      }
      index_493_.increment () ;
      enumerator_493.gotoNextObject () ;
    }
  }
  result << "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                    E X T E R N    F U N C T I O N S                       *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_1465_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalFunctionMap (SOURCE_FILE_AT_LINE (29)).isValid ()) {
    cEnumerator_lexicalFunctionMap enumerator_1465 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalFunctionMap (SOURCE_FILE_AT_LINE (29)), kEnumeration_up) ;
    while (enumerator_1465.hasCurrentObject ()) {
      const enumGalgasBool test_1 = enumerator_1465.current_mIsExtern (HERE).boolEnum () ;
      if (kBoolTrue == test_1) {
        result << "\n" ;
        result << categoryReader_cppTypeName (enumerator_1465.current_mReturnedLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (31)).stringValue () ;
        result << " scanner_cocoa_function_" ;
        result << enumerator_1465.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (31)).stringValue () ;
        result << " (" ;
        columnMarker = result.currentColumn () ;
        result << "BOOL * ioScanningOk" ;
        GALGAS_uint index_1659_ (0) ;
        if (enumerator_1465.current_mLexicalTypeList (HERE).isValid ()) {
          cEnumerator_lexicalFunctionFormalArgumentList enumerator_1659 (enumerator_1465.current_mLexicalTypeList (HERE), kEnumeration_up) ;
          while (enumerator_1659.hasCurrentObject ()) {
            result << ",\n"
              "                " ;
            result.appendSpacesUntilColumn (columnMarker) ;
            result << "const " ;
            result << categoryReader_cppTypeName (enumerator_1659.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (33)).stringValue () ;
            result << " " ;
            result << enumerator_1659.current_mArgumentNameForComment (HERE).stringValue () ;
            index_1659_.increment () ;
            enumerator_1659.gotoNextObject () ;
          }
        }
        result << ") ;\n" ;
      }else if (kBoolFalse == test_1) {
      }
      index_1465_.increment () ;
      enumerator_1465.gotoNextObject () ;
    }
  }
  result << "\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//         T E R M I N A L    S Y M B O L    E N U M E R A T I O N           *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "enum {" ;
  result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
  result << "_1_" ;
  GALGAS_uint index_2280_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (47)).isValid ()) {
    cEnumerator_terminalList enumerator_2280 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (47)), kEnumeration_up) ;
    while (enumerator_2280.hasCurrentObject ()) {
      result << ",\n"
        "  " ;
      result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
      result << "_1_" ;
      result << enumerator_2280.current_mTerminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (48)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (48)).stringValue () ;
      index_2280_.increment () ;
      enumerator_2280.gotoNextObject () ;
    }
  }
  result << "\n"
    "} ;\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                     S C A N N E R    C L A S S                            *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "@interface OC_Lexique_" ;
  result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
  result << " : OC_Lexique {\n"
    "//--- Attributes\n" ;
  GALGAS_uint index_2935_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (61)).isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_2935 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (61)), kEnumeration_up) ;
    while (enumerator_2935.hasCurrentObject ()) {
      result << "  @private " ;
      result << categoryReader_cocoaTypeName (enumerator_2935.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (62)).stringValue () ;
      result << " mLexicalAttribute_" ;
      result << enumerator_2935.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (62)).stringValue () ;
      result << " ;\n" ;
      index_2935_.increment () ;
      enumerator_2935.gotoNextObject () ;
    }
  }
  result << "\n"
    "}\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Filewrapper template 'lexiqueGenerationTemplates cocoaHeaderZone3'     *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_cocoaHeaderZone_33_ (C_Compiler * /* inCompiler */,
                                                                                  const GALGAS_string & /* in_LEXIQUE_5F_CLASS_5F_NAME */,
                                                                                  const GALGAS_lexiqueAnalysisContext & /* in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT */
                                                                                  COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "\n"
    "- (NSUInteger) terminalVocabularyCount ;\n"
    "\n"
    "- (NSUInteger) styleIndexForTerminal: (NSInteger) inTerminal ;\n"
    "\n"
    "- (void) parseLexicalTokenForLexicalColoring ;\n"
    "\n"
    "- (NSUInteger) styleCount ;\n"
    "\n"
    "- (NSString *) styleNameForStyleIndex: (NSInteger) inIndex ;\n"
    "\n"
    "- (NSString *) styleIdentifierForStyleIndex: (NSInteger) inIndex ;\n"
    "\n"
    "- (NSString *) indexingDirectory ;\n"
    "\n"
    "- (NSArray *) indexingTitles ; // Array of NSString\n"
    "\n"
    "- (BOOL) isTemplateLexique ;\n"
    "\n"
    "- (BOOL) atomicSelectionForToken: (NSUInteger) inTokenIndex ;\n"
    "\n"
    "@end\n"
    "\n"
    "//---------------------------------------------------------------------------*\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Filewrapper template 'lexiqueGenerationTemplates cocoaImplementationZone2' *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_cocoaImplementationZone_32_ (C_Compiler * inCompiler,
                                                                                          const GALGAS_string & in_LEXIQUE_5F_CLASS_5F_NAME,
                                                                                          const GALGAS_lexicalAttributeMap & in_LEXICAL_5F_ATTRIBUTE_5F_MAP,
                                                                                          const GALGAS_lexicalMessageMap & /* in_LEXICAL_5F_MESSAGE_5F_MAP */,
                                                                                          const GALGAS_terminalList & /* in_TERMINAL_5F_LIST */,
                                                                                          const GALGAS_stringset & /* in_STRINGS_5F_IN_5F_EXPLICIT_5F_RULES */,
                                                                                          const GALGAS_lexicalRuleListAST & in_LEXICAL_5F_RULE_5F_LIST,
                                                                                          const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT,
                                                                                          const GALGAS_lexiqueComponentAST & in_LEXIQUE_5F_COMPONENT_5F_ROOT
                                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "\n"
    "#import \"" ;
  result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
  result << "-cocoa.h\"\n"
    "#import \"PMDebug.h\"\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "@implementation OC_Lexique_" ;
  result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
  result << "\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                           Template Replacments                            *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n" ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE_AT_LINE (15)).reader_length (SOURCE_FILE_AT_LINE (15)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    result << "static NSArray * kTemplateReplacementArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (16)).stringValue () ;
    result << " ; // Of NSString \n" ;
  }else if (kBoolFalse == test_0) {
  }
  result << "\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                           Template Delimiters                             *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n" ;
  const enumGalgasBool test_1 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (25)).reader_length (SOURCE_FILE_AT_LINE (25)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_1) {
    result << "static NSArray * kTemplateDefinitionArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (26)).stringValue () ;
    result << " ;\n" ;
  }else if (kBoolFalse == test_1) {
  }
  result << "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "- (id) init {\n"
    "  self = [super init] ;\n"
    "  if (self) {\n"
    "    noteObjectAllocation (self) ;\n" ;
  GALGAS_uint index_1587_ (0) ;
  if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_1587 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
    while (enumerator_1587.hasCurrentObject ()) {
      result << "    mLexicalAttribute_" ;
      result << enumerator_1587.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (36)).stringValue () ;
      result << " = " ;
      result << categoryReader_cocoaInitializationCode (enumerator_1587.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (36)).stringValue () ;
      result << " ;\n" ;
      index_1587_.increment () ;
      enumerator_1587.gotoNextObject () ;
    }
  }
  result << "  }\n" ;
  const enumGalgasBool test_2 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (39)).reader_length (SOURCE_FILE_AT_LINE (39)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_2) {
    result << "  if (nil == kTemplateDefinitionArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (40)).stringValue () ;
    result << ") {\n"
      "    kTemplateDefinitionArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (41)).stringValue () ;
    result << " = [NSArray arrayWithObjects:\n" ;
    GALGAS_uint index_2079_ (0) ;
    if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (42)).isValid ()) {
      cEnumerator_templateDelimitorList enumerator_2079 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (42)), kEnumeration_up) ;
      while (enumerator_2079.hasCurrentObject ()) {
        result << "      [[OC_GGS_TemplateDelimiter alloc] initWithStartString:@" ;
        result << enumerator_2079.current_mStartString (HERE).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE_AT_LINE (43)).stringValue () ;
        result << " endString:" ;
        const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, enumerator_2079.current_mEndString (HERE).mAttribute_string.reader_length (SOURCE_FILE_AT_LINE (44)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
        if (kBoolTrue == test_3) {
          result << "nil" ;
        }else if (kBoolFalse == test_3) {
          result << "@" ;
          result << enumerator_2079.current_mEndString (HERE).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE_AT_LINE (47)).stringValue () ;
        }
        result << " discardStartString:" ;
        result << enumerator_2079.current_mPreservesStartDelimiter (HERE).operator_not (SOURCE_FILE_AT_LINE (50)).reader_ocString (SOURCE_FILE_AT_LINE (50)).stringValue () ;
        result << "],\n" ;
        index_2079_.increment () ;
        enumerator_2079.gotoNextObject () ;
      }
    }
    result << "      nil\n"
      "    ] ;\n"
      "  }\n" ;
  }else if (kBoolFalse == test_2) {
  }
  const enumGalgasBool test_4 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE_AT_LINE (57)).reader_length (SOURCE_FILE_AT_LINE (57)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_4) {
    result << "  if (nil == kTemplateReplacementArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (58)).stringValue () ;
    result << ") {\n"
      "\n"
      "    kTemplateReplacementArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (59)).stringValue () ;
    result << " = [NSArray arrayWithObjects:\n" ;
    GALGAS_uint index_2762_ (0) ;
    if (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE_AT_LINE (60)).isValid ()) {
      cEnumerator_templateReplacementListAST enumerator_2762 (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE_AT_LINE (60)), kEnumeration_up) ;
      while (enumerator_2762.hasCurrentObject ()) {
        result << "      @" ;
        result << enumerator_2762.current_mMatchString (HERE).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE_AT_LINE (61)).stringValue () ;
        result << ", " ;
        index_2762_.increment () ;
        enumerator_2762.gotoNextObject () ;
      }
    }
    result << "      nil\n"
      "    ] ;\n"
      "  }\n" ;
  }else if (kBoolFalse == test_4) {
  }
  result << "  return self ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "- (void) FINALIZE_OR_DEALLOC {\n"
    "  noteObjectDeallocation (self) ;\n"
    "  macroSuperFinalize ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                 I N D E X I N G    D I R E C T O R Y                      *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "- (NSString *) indexingDirectory {\n"
    "  return @" ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mIndexingDirectory (SOURCE_FILE_AT_LINE (84)).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE_AT_LINE (84)).stringValue () ;
  result << " ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                 I N D E X I N G    T I T L E S                            *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "- (NSArray *) indexingTitles { // Array of NSString\n"
    "  return [NSArray arrayWithObjects:\n" ;
  GALGAS_uint index_4121_ (0) ;
  if (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mIndexingListAST (SOURCE_FILE_AT_LINE (96)).isValid ()) {
    cEnumerator_indexingListAST enumerator_4121 (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mIndexingListAST (SOURCE_FILE_AT_LINE (96)), kEnumeration_up) ;
    while (enumerator_4121.hasCurrentObject ()) {
      result << "    @" ;
      result << enumerator_4121.current_mIndexComment (HERE).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE_AT_LINE (97)).stringValue () ;
      result << ",\n" ;
      index_4121_.increment () ;
      enumerator_4121.gotoNextObject () ;
    }
  }
  result << "    NULL\n"
    "  ] ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//            Terminal Symbols as end of script in template mark             *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n" ;
  GALGAS_uint index_4831_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (109)).isValid ()) {
    cEnumerator_terminalList enumerator_4831 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (109)), kEnumeration_up) ;
    const bool nonEmpty_enumerator_4831 = enumerator_4831.hasCurrentObject () ;
    if (nonEmpty_enumerator_4831) {
      result << "static const BOOL kEndOfScriptInTemplateArray_" ;
      result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (110)).stringValue () ;
      result << " [" ;
      result << in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (110)).reader_length (SOURCE_FILE_AT_LINE (110)).reader_string (SOURCE_FILE_AT_LINE (110)).stringValue () ;
      result << "] = {\n" ;
    }
    while (enumerator_4831.hasCurrentObject ()) {
      result << "  " ;
      result << enumerator_4831.current_mIsEndOfTemplateMark (HERE).reader_ocString (SOURCE_FILE_AT_LINE (111)).stringValue () ;
      result << " /* " ;
      result << enumerator_4831.current_mTerminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (111)).stringValue () ;
      result << " */" ;
      if (enumerator_4831.hasNextObject ()) {
        result << ",\n" ;
      }
      index_4831_.increment () ;
      enumerator_4831.gotoNextObject () ;
    }
    if (nonEmpty_enumerator_4831) {
      result << "\n"
        "} ;\n" ;
    }
  }
  result << "\n"
    "\n" ;
  GALGAS_uint index_5043_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalTokenListMap (SOURCE_FILE_AT_LINE (118)).isValid ()) {
    cEnumerator_lexicalExplicitTokenListMapMap enumerator_5043 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalTokenListMap (SOURCE_FILE_AT_LINE (118)), kEnumeration_up) ;
    while (enumerator_5043.hasCurrentObject ()) {
      const enumGalgasBool test_5 = enumerator_5043.current_mShouldBeGenerated (HERE).boolEnum () ;
      if (kBoolTrue == test_5) {
        result << "//---------------------------------------------------------------------------*\n"
          "//                                                                           *\n"
          "//             Key words table '" ;
        result << enumerator_5043.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (122)).stringValue () ;
        result << "'                            *\n"
          "//                                                                           *\n"
          "//---------------------------------------------------------------------------*\n"
          "\n"
          "static const C_cocoa_lexique_table_entry ktable_for_" ;
        result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (125)).stringValue () ;
        result << "_" ;
        result << enumerator_5043.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (125)).stringValue () ;
        result << " [" ;
        result << enumerator_5043.current_mExplicitTokenListMap (HERE).reader_count (SOURCE_FILE_AT_LINE (125)).reader_string (SOURCE_FILE_AT_LINE (125)).stringValue () ;
        result << "] = {\n" ;
        GALGAS_uint index_5791_ (0) ;
        if (enumerator_5043.current_mTokenSortedList (HERE).isValid ()) {
          cEnumerator_tokenSortedlist enumerator_5791 (enumerator_5043.current_mTokenSortedList (HERE), kEnumeration_up) ;
          while (enumerator_5791.hasCurrentObject ()) {
            result << "  {" ;
            result << enumerator_5791.current_mName (HERE).reader_utf_38_Representation (SOURCE_FILE_AT_LINE (127)).stringValue () ;
            result << ", " ;
            result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
            result << "_1_" ;
            result << enumerator_5791.current_mTerminalName (HERE).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (127)).stringValue () ;
            result << "}" ;
            if (enumerator_5791.hasNextObject ()) {
              result << ",\n" ;
            }
            index_5791_.increment () ;
            enumerator_5791.gotoNextObject () ;
          }
        }
        result << "\n"
          "} ;\n"
          "\n"
          "static NSUInteger search_into_" ;
        result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (131)).stringValue () ;
        result << "_" ;
        result << enumerator_5043.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (131)).stringValue () ;
        result << " (NSString * inSearchedString) {\n"
          "  return searchStringInTable (inSearchedString, ktable_for_" ;
        result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (132)).stringValue () ;
        result << "_" ;
        result << enumerator_5043.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (132)).stringValue () ;
        result << ", " ;
        result << enumerator_5043.current_mExplicitTokenListMap (HERE).reader_count (SOURCE_FILE_AT_LINE (132)).reader_string (SOURCE_FILE_AT_LINE (132)).stringValue () ;
        result << ") ;\n"
          "}\n"
          "\n" ;
      }else if (kBoolFalse == test_5) {
      }
      index_5043_.increment () ;
      enumerator_5043.gotoNextObject () ;
    }
  }
  result << "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//               P A R S E    L E X I C A L    T O K E N                     *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "- (void) parseLexicalTokenForLexicalColoring {\n"
    "  mLoop = YES ;\n"
    "  BOOL scanningOk = YES ;\n"
    "  mTokenCode = 0 ;\n"
    "  while ((mTokenCode == 0) && (mCurrentChar != '\\0')) {\n"
    "    mTokenStartLocation = mCurrentLocation ;\n" ;
  const enumGalgasBool test_6 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (150)).reader_length (SOURCE_FILE_AT_LINE (150)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_6) {
    result << "    if ((mMatchedTemplateDelimiterIndex >= 0) && ([[kTemplateDefinitionArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (151)).stringValue () ;
    result << " objectAtIndex:mMatchedTemplateDelimiterIndex] startString].length > 0)) {\n"
      "      const BOOL foundEndDelimitor = [self testForInputString:[[kTemplateDefinitionArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (152)).stringValue () ;
    result << " objectAtIndex:mMatchedTemplateDelimiterIndex] endString] advance:YES] ;\n"
      "      if (foundEndDelimitor) {\n"
      "        mMatchedTemplateDelimiterIndex = -1 ;\n"
      "      }\n"
      "    }\n"
      "    while ((mMatchedTemplateDelimiterIndex < 0) && (mCurrentChar != '\\0')) {\n"
      "      " ;
    const enumGalgasBool test_7 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE_AT_LINE (158)).reader_length (SOURCE_FILE_AT_LINE (158)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
    if (kBoolTrue == test_7) {
      result << "\n"
        "      [self searchForReplacementPattern:kTemplateReplacementArray_" ;
      result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (159)).stringValue () ;
      result << "] ;\n"
        "      " ;
    }else if (kBoolFalse == test_7) {
    }
    result << "\n"
      "      mMatchedTemplateDelimiterIndex = [self findTemplateDelimiterIndex:kTemplateDefinitionArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (161)).stringValue () ;
    result << "] ;\n"
      "      if (mMatchedTemplateDelimiterIndex < 0) {\n"
      "        [self advance] ;\n"
      "        mTokenCode = -2 ;\n"
      "      }\n"
      "    }\n"
      "    if ((mMatchedTemplateDelimiterIndex >= 0) && (mTokenCode == 0) && (mCurrentChar != '\\0') && scanningOk) {\n" ;
    GALGAS_uint index_8230_ (0) ;
    if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
      cEnumerator_lexicalAttributeMap enumerator_8230 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
      while (enumerator_8230.hasCurrentObject ()) {
        result << "      " ;
        result << categoryReader_cocoaResetPrefix (enumerator_8230.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (169)).stringValue () ;
        result << "mLexicalAttribute_" ;
        result << enumerator_8230.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (169)).stringValue () ;
        result << categoryReader_cocoaReset (enumerator_8230.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (169)).stringValue () ;
        result << " ;\n" ;
        index_8230_.increment () ;
        enumerator_8230.gotoNextObject () ;
      }
    }
    result << "      mTokenStartLocation = mCurrentLocation ;\n" ;
    if (GALGAS_uint ((PMUInt32) 6U).isValid ()) {
      result.incIndentation ((PMSInt32) GALGAS_uint ((PMUInt32) 6U).uintValue ()) ;
    }
    GALGAS_uint index_8446_ (0) ;
    if (in_LEXICAL_5F_RULE_5F_LIST.isValid ()) {
      cEnumerator_lexicalRuleListAST enumerator_8446 (in_LEXICAL_5F_RULE_5F_LIST, kEnumeration_up) ;
      while (enumerator_8446.hasCurrentObject ()) {
        result << callCategoryReader_generateCocoaCode ((const cPtr_abstractLexicalRuleAST *) enumerator_8446.current_mLexicalRule (HERE).ptr (), in_LEXIQUE_5F_CLASS_5F_NAME, in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT, inCompiler COMMA_SOURCE_FILE_AT_LINE (175)).stringValue () ;
        index_8446_.increment () ;
        enumerator_8446.gotoNextObject () ;
      }
    }
    if (GALGAS_uint ((PMUInt32) 6U).isValid ()) {
      result.incIndentation (- ((PMSInt32) GALGAS_uint ((PMUInt32) 6U).uintValue ())) ;
    }
    result << "if ([self testForInputChar:'\\0']) { // End of source text \? \n"
      "        mTokenCode = " ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
    result << "_1_ ; // Empty string code\n"
      "      }else{ // Unknown input character\n"
      "        scanningOk = NO ;\n"
      "      }\n"
      "    }\n"
      "    if ((mTokenCode > 0) && kEndOfScriptInTemplateArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (184)).stringValue () ;
    result << " [mTokenCode - 1]) {\n"
      "      mMatchedTemplateDelimiterIndex = -1 ;\n"
      "    }\n"
      "  //--- Error \?\n"
      "    if (! scanningOk) {\n"
      "      mTokenCode = -1 ;\n"
      "      [self advance] ;\n"
      "    }" ;
  }else if (kBoolFalse == test_6) {
    GALGAS_uint index_9083_ (0) ;
    if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
      cEnumerator_lexicalAttributeMap enumerator_9083 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
      while (enumerator_9083.hasCurrentObject ()) {
        result << "    " ;
        result << categoryReader_cocoaResetPrefix (enumerator_9083.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (193)).stringValue () ;
        result << "mLexicalAttribute_" ;
        result << enumerator_9083.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (193)).stringValue () ;
        result << categoryReader_cocoaReset (enumerator_9083.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (193)).stringValue () ;
        result << " ;\n" ;
        index_9083_.increment () ;
        enumerator_9083.gotoNextObject () ;
      }
    }
    result << "    mTokenStartLocation = mCurrentLocation ;\n" ;
    if (GALGAS_uint ((PMUInt32) 4U).isValid ()) {
      result.incIndentation ((PMSInt32) GALGAS_uint ((PMUInt32) 4U).uintValue ()) ;
    }
    GALGAS_uint index_9297_ (0) ;
    if (in_LEXICAL_5F_RULE_5F_LIST.isValid ()) {
      cEnumerator_lexicalRuleListAST enumerator_9297 (in_LEXICAL_5F_RULE_5F_LIST, kEnumeration_up) ;
      while (enumerator_9297.hasCurrentObject ()) {
        result << callCategoryReader_generateCocoaCode ((const cPtr_abstractLexicalRuleAST *) enumerator_9297.current_mLexicalRule (HERE).ptr (), in_LEXIQUE_5F_CLASS_5F_NAME, in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT, inCompiler COMMA_SOURCE_FILE_AT_LINE (199)).stringValue () ;
        index_9297_.increment () ;
        enumerator_9297.gotoNextObject () ;
      }
    }
    if (GALGAS_uint ((PMUInt32) 4U).isValid ()) {
      result.incIndentation (- ((PMSInt32) GALGAS_uint ((PMUInt32) 4U).uintValue ())) ;
    }
    result << "if ([self testForInputChar:'\\0']) { // End of source text \? \n"
      "      mTokenCode = " ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
    result << "_1_ ; // Empty string code\n"
      "    }else{ // Unknown input character\n"
      "      scanningOk = NO ;\n"
      "    }\n"
      "  //--- Error \?\n"
      "    if (! scanningOk) {\n"
      "      mTokenCode = -1 ;\n"
      "      [self advance] ;\n"
      "    }" ;
  }
  result << "\n"
    "  }\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                   T E R M I N A L    C O U N T                            *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "- (NSUInteger) terminalVocabularyCount {\n"
    "  return " ;
  result << in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (222)).reader_length (SOURCE_FILE_AT_LINE (222)).reader_string (SOURCE_FILE_AT_LINE (222)).stringValue () ;
  result << " ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                     S T Y L E   C O U N T                                 *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "- (NSUInteger) styleCount {\n"
    "  return " ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE_AT_LINE (232)).reader_length (SOURCE_FILE_AT_LINE (232)).add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (232)).reader_string (SOURCE_FILE_AT_LINE (232)).stringValue () ;
  result << " ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                I S    T E M P L A T E    L E X I Q U E                    *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "- (BOOL) isTemplateLexique {\n"
    "  return " ;
  result << GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (242)).reader_length (SOURCE_FILE_AT_LINE (242)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).reader_ocString (SOURCE_FILE_AT_LINE (242)).stringValue () ;
  result << " ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//              S T Y L E   F O R    T E R M I N A L                         *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "- (NSUInteger) styleIndexForTerminal: (NSInteger) inTerminal {\n"
    "  static const NSUInteger kTerminalSymbolStyles [" ;
  result << in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (252)).reader_length (SOURCE_FILE_AT_LINE (252)).add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (252)).reader_string (SOURCE_FILE_AT_LINE (252)).stringValue () ;
  result << "] = {0" ;
  GALGAS_uint index_11887_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (253)).isValid ()) {
    cEnumerator_terminalList enumerator_11887 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (253)), kEnumeration_up) ;
    while (enumerator_11887.hasCurrentObject ()) {
      result << ",\n"
        "    " ;
      result << enumerator_11887.current_mStyleIndex (HERE).reader_string (SOURCE_FILE_AT_LINE (254)).stringValue () ;
      result << " /* " ;
      result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
      result << "_1_" ;
      result << enumerator_11887.current_mTerminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (254)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (254)).stringValue () ;
      result << " */" ;
      index_11887_.increment () ;
      enumerator_11887.gotoNextObject () ;
    }
  }
  result << "\n"
    "  } ;\n"
    "  return kTerminalSymbolStyles [inTerminal] ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//    A T O M I C    S E L E C T I O N   F O R    T E R M I N A L            *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "- (BOOL) atomicSelectionForToken: (NSUInteger) inTokenIndex {\n"
    "  static const BOOL kTerminalAtomicSelection [" ;
  result << in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (266)).reader_length (SOURCE_FILE_AT_LINE (266)).add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (266)).reader_string (SOURCE_FILE_AT_LINE (266)).stringValue () ;
  result << "] = {NO" ;
  GALGAS_uint index_12704_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (267)).isValid ()) {
    cEnumerator_terminalList enumerator_12704 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (267)), kEnumeration_up) ;
    while (enumerator_12704.hasCurrentObject ()) {
      result << ",\n"
        "    " ;
      result << enumerator_12704.current_mAtomicSelection (HERE).reader_ocString (SOURCE_FILE_AT_LINE (268)).stringValue () ;
      result << " /* " ;
      result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
      result << "_1_" ;
      result << enumerator_12704.current_mTerminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (268)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (268)).stringValue () ;
      result << " */" ;
      index_12704_.increment () ;
      enumerator_12704.gotoNextObject () ;
    }
  }
  result << "\n"
    "  } ;\n"
    "  return kTerminalAtomicSelection [inTokenIndex] ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//             S T Y L E   N A M E    F O R    I N D E X                     *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "- (NSString *) styleNameForStyleIndex: (NSInteger) inIndex {\n"
    "  NSString * result = nil ;\n"
    "  if ((inIndex >= 0) && (inIndex < " ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE_AT_LINE (281)).reader_length (SOURCE_FILE_AT_LINE (281)).add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (281)).reader_string (SOURCE_FILE_AT_LINE (281)).stringValue () ;
  result << ")) {\n"
    "    NSString * kStyleArray [" ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE_AT_LINE (282)).reader_length (SOURCE_FILE_AT_LINE (282)).add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (282)).reader_string (SOURCE_FILE_AT_LINE (282)).stringValue () ;
  result << "] = {\n"
    "      @\"Default Style\"" ;
  GALGAS_uint index_13677_ (0) ;
  if (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE_AT_LINE (284)).isValid ()) {
    cEnumerator_lexicalStyleListAST enumerator_13677 (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE_AT_LINE (284)), kEnumeration_up) ;
    while (enumerator_13677.hasCurrentObject ()) {
      result << ",\n"
        "      @" ;
      result << enumerator_13677.current_mComment (HERE).reader_string (SOURCE_FILE_AT_LINE (285)).reader_utf_38_Representation (SOURCE_FILE_AT_LINE (285)).stringValue () ;
      index_13677_.increment () ;
      enumerator_13677.gotoNextObject () ;
    }
  }
  result << "\n"
    "    } ;\n"
    "    result = kStyleArray [inIndex] ;\n"
    "  }\n"
    "  return result ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//         S T Y L E   I D E N T I F I E R    F O R    I N D E X             *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "- (NSString *) styleIdentifierForStyleIndex: (NSInteger) inIndex {\n"
    "  NSString * result = nil ;\n"
    "  if ((inIndex >= 0) && (inIndex < " ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE_AT_LINE (300)).reader_length (SOURCE_FILE_AT_LINE (300)).add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (300)).reader_string (SOURCE_FILE_AT_LINE (300)).stringValue () ;
  result << ")) {\n"
    "    NSString * kStyleArray [" ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE_AT_LINE (301)).reader_length (SOURCE_FILE_AT_LINE (301)).add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (301)).reader_string (SOURCE_FILE_AT_LINE (301)).stringValue () ;
  result << "] = {\n"
    "      @\"" ;
  result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
  result << "\"" ;
  GALGAS_uint index_14601_ (0) ;
  if (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE_AT_LINE (303)).isValid ()) {
    cEnumerator_lexicalStyleListAST enumerator_14601 (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE_AT_LINE (303)), kEnumeration_up) ;
    while (enumerator_14601.hasCurrentObject ()) {
      result << ",\n"
        "      @\"" ;
      result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
      result << "-" ;
      result << enumerator_14601.current_mName (HERE).reader_string (SOURCE_FILE_AT_LINE (304)).stringValue () ;
      result << "\"" ;
      index_14601_.increment () ;
      enumerator_14601.gotoNextObject () ;
    }
  }
  result << "\n"
    "    } ;\n"
    "    result = kStyleArray [inIndex] ;\n"
    "  }\n"
    "  return result ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//         L E X I Q U E   I D E N T I F I E R                               *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "- (NSString *) lexiqueIdentifier {\n"
    "  return @\"" ;
  result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
  result << "\" ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "@end\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Routine 'parseLexiqueComponent'                      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_parseLexiqueComponent (const GALGAS_lstring constinArgument_inSourceFile,
                                    GALGAS_parsedComponentStruct & ioArgument_ioParsedComponentStruct,
                                    GALGAS_lexiqueComponentAST & outArgument_outLexiqueComponentRoot,
                                    C_Compiler * inCompiler
                                    COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outLexiqueComponentRoot.drop () ; // Release 'out' argument
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_lstring var_key = GALGAS_lstring::constructor_new (constinArgument_inSourceFile.reader_string (SOURCE_FILE_AT_LINE (790)).reader_lastPathComponent (SOURCE_FILE_AT_LINE (790)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (790)), constinArgument_inSourceFile.reader_location (SOURCE_FILE_AT_LINE (790)) COMMA_SOURCE_FILE_AT_LINE (790)) ;
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = ioArgument_ioParsedComponentStruct.reader_mParsedLexiqueComponentMap (SOURCE_FILE_AT_LINE (791)).reader_hasKey (var_key.reader_string (SOURCE_FILE_AT_LINE (791)) COMMA_SOURCE_FILE_AT_LINE (791)).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @methodCallInstructionForGeneration
    ioArgument_ioParsedComponentStruct.reader_mParsedLexiqueComponentMap (SOURCE_FILE_AT_LINE (792)).method_searchKey (var_key, outArgument_outLexiqueComponentRoot, inCompiler COMMA_SOURCE_FILE_AT_LINE (792)) ;
    //-------- END @methodCallInstructionForGeneration
  }else if (kBoolFalse == test_0) {
    { //-------- @grammarInstructionWithSourceFileForGeneration
    cGrammar_lexiqueLL_31_grammar::_performSourceFileParsing_ (inCompiler, constinArgument_inSourceFile, outArgument_outLexiqueComponentRoot COMMA_SOURCE_FILE_AT_LINE (794)) ;
    } //-------- END @grammarInstructionWithSourceFileForGeneration
    { //-------- @modifierCallInstructionForGeneration
    ioArgument_ioParsedComponentStruct.mAttribute_mParsedLexiqueComponentMap.modifier_insertKey (var_key, outArgument_outLexiqueComponentRoot, inCompiler COMMA_SOURCE_FILE_AT_LINE (795)) ;
    } //-------- END @typeMethodInstructionForGeneration
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//                    Once function 'buildLexicalTypeMap'                    *
//                                                                           *
//---------------------------------------------------------------------------*

static GALGAS_lexicalTypeMap onceFunction_buildLexicalTypeMap (C_Compiler * inCompiler
                                                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_lexicalTypeMap result_outLexicalTypeMap ; // Returned variable
  //-------- @assignmentInstructionForGeneration
  result_outLexicalTypeMap = GALGAS_lexicalTypeMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (806)) ;
  { //-------- @modifierCallInstructionForGeneration
  result_outLexicalTypeMap.modifier_insertKey (GALGAS_lstring::constructor_new (GALGAS_string ("string"), inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (807)), GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_string (SOURCE_FILE_AT_LINE (807)), inCompiler COMMA_SOURCE_FILE_AT_LINE (807)) ;
  } //-------- END @typeMethodInstructionForGeneration
  { //-------- @modifierCallInstructionForGeneration
  result_outLexicalTypeMap.modifier_insertKey (GALGAS_lstring::constructor_new (GALGAS_string ("char"), inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (808)), GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_char (SOURCE_FILE_AT_LINE (808)), inCompiler COMMA_SOURCE_FILE_AT_LINE (808)) ;
  } //-------- END @typeMethodInstructionForGeneration
  { //-------- @modifierCallInstructionForGeneration
  result_outLexicalTypeMap.modifier_insertKey (GALGAS_lstring::constructor_new (GALGAS_string ("uint"), inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (809)), GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_uint (SOURCE_FILE_AT_LINE (809)), inCompiler COMMA_SOURCE_FILE_AT_LINE (809)) ;
  } //-------- END @typeMethodInstructionForGeneration
  { //-------- @modifierCallInstructionForGeneration
  result_outLexicalTypeMap.modifier_insertKey (GALGAS_lstring::constructor_new (GALGAS_string ("uint64"), inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (810)), GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_uint_36__34_ (SOURCE_FILE_AT_LINE (810)), inCompiler COMMA_SOURCE_FILE_AT_LINE (810)) ;
  } //-------- END @typeMethodInstructionForGeneration
  { //-------- @modifierCallInstructionForGeneration
  result_outLexicalTypeMap.modifier_insertKey (GALGAS_lstring::constructor_new (GALGAS_string ("sint"), inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (811)), GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_sint (SOURCE_FILE_AT_LINE (811)), inCompiler COMMA_SOURCE_FILE_AT_LINE (811)) ;
  } //-------- END @typeMethodInstructionForGeneration
  { //-------- @modifierCallInstructionForGeneration
  result_outLexicalTypeMap.modifier_insertKey (GALGAS_lstring::constructor_new (GALGAS_string ("sint64"), inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (812)), GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_sint_36__34_ (SOURCE_FILE_AT_LINE (812)), inCompiler COMMA_SOURCE_FILE_AT_LINE (812)) ;
  } //-------- END @typeMethodInstructionForGeneration
  { //-------- @modifierCallInstructionForGeneration
  result_outLexicalTypeMap.modifier_insertKey (GALGAS_lstring::constructor_new (GALGAS_string ("double"), inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (813)), GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_double (SOURCE_FILE_AT_LINE (813)), inCompiler COMMA_SOURCE_FILE_AT_LINE (813)) ;
  } //-------- END @typeMethodInstructionForGeneration
//---
  return result_outLexicalTypeMap ;
}



//---------------------------------------------------------------------------*
//  Function implementation                                                  *
//---------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_buildLexicalTypeMap = false ;
static GALGAS_lexicalTypeMap gOnceFunctionResult_buildLexicalTypeMap ;

//---------------------------------------------------------------------------*

GALGAS_lexicalTypeMap function_buildLexicalTypeMap (C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_buildLexicalTypeMap) {
    gOnceFunctionResult_buildLexicalTypeMap = onceFunction_buildLexicalTypeMap (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_buildLexicalTypeMap = true ;
  }
  return gOnceFunctionResult_buildLexicalTypeMap ;
}

//---------------------------------------------------------------------------*

static void releaseOnceFunctionResult_buildLexicalTypeMap (void) {
  gOnceFunctionResult_buildLexicalTypeMap.drop () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_buildLexicalTypeMap (NULL,
                                                                 releaseOnceFunctionResult_buildLexicalTypeMap) ;

//---------------------------------------------------------------------------*
//  Function introspection                                                   *
//---------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_buildLexicalTypeMap [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_buildLexicalTypeMap (C_Compiler * inCompiler,
                                                                    const cObjectArray & /* inEffectiveParameterArray */,
                                                                    const GALGAS_location & /* inErrorLocation */
                                                                    COMMA_LOCATION_ARGS) {
  return function_buildLexicalTypeMap (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_buildLexicalTypeMap ("buildLexicalTypeMap",
                                                                     functionWithGenericHeader_buildLexicalTypeMap,
                                                                     & kTypeDescriptor_GALGAS_lexicalTypeMap,
                                                                     0,
                                                                     functionArgs_buildLexicalTypeMap) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Routine 'buildLexicalAttributeMap'                     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildLexicalAttributeMap (const GALGAS_lexicalTypeMap constinArgument_inLexicalTypeMap,
                                       const GALGAS_lexicalAttributeListAST constinArgument_inLexicalAttributeList,
                                       GALGAS_lexicalAttributeMap & ioArgument_ioLexicalAttributeMap,
                                       C_Compiler * inCompiler
                                       COMMA_UNUSED_LOCATION_ARGS) {
  //-------- @foreachInstructionForGeneration
  cEnumerator_lexicalAttributeListAST enumerator_34281 (constinArgument_inLexicalAttributeList, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_34281.hasCurrentObject ()) {
    //-------- @ifInstructionForGeneration
    const enumGalgasBool test_0 = constinArgument_inLexicalTypeMap.reader_hasKey (enumerator_34281.current_mTypeName (HERE).reader_string (SOURCE_FILE_AT_LINE (826)) COMMA_SOURCE_FILE_AT_LINE (826)).boolEnum () ;
    if (kBoolTrue == test_0) {
      //-------- @localVariableDeclarationForGeneration
      GALGAS_lexicalTypeEnum var_lexicalType ;
      //-------- @methodCallInstructionForGeneration
      constinArgument_inLexicalTypeMap.method_searchKey (enumerator_34281.current_mTypeName (HERE), var_lexicalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (828)) ;
      //-------- END @methodCallInstructionForGeneration
      { //-------- @modifierCallInstructionForGeneration
      ioArgument_ioLexicalAttributeMap.modifier_insertKey (enumerator_34281.current_mName (HERE), var_lexicalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (829)) ;
      } //-------- END @typeMethodInstructionForGeneration
    }else if (kBoolFalse == test_0) {
      //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
      GALGAS_string var_m = GALGAS_string::makeEmptyString () ;
      //-------- @concatInstructionForGeneration
      var_m.dotAssign_operation (GALGAS_string ("the @").operator_concat (enumerator_34281.current_mTypeName (HERE).reader_string (SOURCE_FILE_AT_LINE (832)) COMMA_SOURCE_FILE_AT_LINE (832)).operator_concat (GALGAS_string (" type is not a valid lexical attribute type; are allowed:") COMMA_SOURCE_FILE_AT_LINE (832)) COMMA_SOURCE_FILE_AT_LINE (832)) ;
      //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
      GALGAS_bool var_firstLoop = GALGAS_bool (true) ;
      //-------- @foreachInstructionForGeneration
      cEnumerator_lexicalTypeMap enumerator_34695 (constinArgument_inLexicalTypeMap, kEnumeration_up) ;
      //--- simple foreach instruction
      while (enumerator_34695.hasCurrentObject ()) {
        //-------- @concatInstructionForGeneration
        var_m.dotAssign_operation (GALGAS_string (" @").operator_concat (enumerator_34695.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (835)) COMMA_SOURCE_FILE_AT_LINE (835)) COMMA_SOURCE_FILE_AT_LINE (835)) ;
        if (enumerator_34695.hasNextObject ()) {
          //-------- @concatInstructionForGeneration
          var_m.dotAssign_operation (GALGAS_string (",") COMMA_SOURCE_FILE_AT_LINE (837)) ;
        }
        enumerator_34695.gotoNextObject () ;
      }
      //-------- @errorInstructionForGeneration
      GALGAS_location location_1 (enumerator_34281.current_mTypeName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_1, var_m COMMA_SOURCE_FILE_AT_LINE (839)) ;
    }
    enumerator_34281.gotoNextObject () ;
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//                 Routine 'compileLexiqueComponentFromAST'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileLexiqueComponentFromAST (const GALGAS_string constinArgument_inComponentNameFromSourceFilePath,
                                             const GALGAS_string constinArgument_inOutputDirectory,
                                             const GALGAS_lexiqueComponentAST constinArgument_inLexiqueComponentRoot,
                                             C_Compiler * inCompiler
                                             COMMA_UNUSED_LOCATION_ARGS) {
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS_lstring var_componentName = constinArgument_inLexiqueComponentRoot.reader_mLexiqueComponentName (SOURCE_FILE_AT_LINE (854)) ;
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_componentName.reader_string (SOURCE_FILE_AT_LINE (855)).objectCompare (constinArgument_inComponentNameFromSourceFilePath)).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @warningInstructionForGeneration
    GALGAS_location location_1 (var_componentName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticWarning (location_1, GALGAS_string ("GALGAS checks the component name ('").operator_concat (var_componentName.reader_string (SOURCE_FILE_AT_LINE (857)) COMMA_SOURCE_FILE_AT_LINE (857)).operator_concat (GALGAS_string ("') against the source file base name ('") COMMA_SOURCE_FILE_AT_LINE (858)).operator_concat (constinArgument_inComponentNameFromSourceFilePath COMMA_SOURCE_FILE_AT_LINE (858)).operator_concat (GALGAS_string ("'): they should be identical") COMMA_SOURCE_FILE_AT_LINE (858)) COMMA_SOURCE_FILE_AT_LINE (856)) ;
  }
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS_lexicalTypeMap var_lexicalTypeMap = function_buildLexicalTypeMap (inCompiler COMMA_SOURCE_FILE_AT_LINE (862)) ;
  //-------- @localVariableDeclarationForGeneration
  GALGAS_lexicalRoutineMap var_lexicalRoutineMap ;
  { //-------- @routineCallInstructionForGeneration
  routine_buildLexicalRoutineMap (var_lexicalRoutineMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (865)) ;
  } //-------- @routineCallInstructionForGeneration
  //-------- @foreachInstructionForGeneration
  cEnumerator_externRoutineListAST enumerator_36101 (constinArgument_inLexiqueComponentRoot.reader_mExternRoutineList (SOURCE_FILE_AT_LINE (867)), kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_36101.hasCurrentObject ()) {
    //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
    GALGAS_lexicalRoutineFormalArgumentList var_lexicalRoutineFormalArgumentList = GALGAS_lexicalRoutineFormalArgumentList::constructor_emptyList (SOURCE_FILE_AT_LINE (868)) ;
    //-------- @foreachInstructionForGeneration
    cEnumerator_lexicalExternRoutineFormalArgumentListAST enumerator_36235 (enumerator_36101.current_mLexicalRoutineFormalArgumentList (HERE), kEnumeration_up) ;
    //--- simple foreach instruction
    while (enumerator_36235.hasCurrentObject ()) {
      //-------- @localVariableDeclarationForGeneration
      GALGAS_lexicalTypeEnum var_lexicalFormalArgumentType ;
      //-------- @methodCallInstructionForGeneration
      var_lexicalTypeMap.method_searchKey (enumerator_36235.current_mLexicalTypeName (HERE), var_lexicalFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (871)) ;
      //-------- END @methodCallInstructionForGeneration
      //-------- @plusEqualnstructionForGeneration
      var_lexicalRoutineFormalArgumentList.addAssign_operation (enumerator_36235.current_mPassingMode (HERE), var_lexicalFormalArgumentType, enumerator_36235.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE_AT_LINE (872)) COMMA_SOURCE_FILE_AT_LINE (872)) ;
      enumerator_36235.gotoNextObject () ;
    }
    { //-------- @modifierCallInstructionForGeneration
    var_lexicalRoutineMap.modifier_insertKey (enumerator_36101.current_mRoutineName (HERE), var_lexicalRoutineFormalArgumentList, enumerator_36101.current_mErrorMessageList (HERE), GALGAS_bool (true), inCompiler COMMA_SOURCE_FILE_AT_LINE (874)) ;
    } //-------- END @typeMethodInstructionForGeneration
    enumerator_36101.gotoNextObject () ;
  }
  //-------- @localVariableDeclarationForGeneration
  GALGAS_lexicalFunctionMap var_lexicalFunctionMap ;
  { //-------- @routineCallInstructionForGeneration
  routine_buildLexicalFunctionMap (var_lexicalFunctionMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (878)) ;
  } //-------- @routineCallInstructionForGeneration
  //-------- @foreachInstructionForGeneration
  cEnumerator_externFunctionListAST enumerator_36905 (constinArgument_inLexiqueComponentRoot.reader_mExternFunctionList (SOURCE_FILE_AT_LINE (880)), kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_36905.hasCurrentObject ()) {
    //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
    GALGAS_lexicalFunctionFormalArgumentList var_lexicalFunctionFormalArgumentList = GALGAS_lexicalFunctionFormalArgumentList::constructor_emptyList (SOURCE_FILE_AT_LINE (881)) ;
    //-------- @foreachInstructionForGeneration
    cEnumerator_lexicalExternFunctionFormalArgumentListAST enumerator_37042 (enumerator_36905.current_mLexicalFunctionFormalArgumentList (HERE), kEnumeration_up) ;
    //--- simple foreach instruction
    while (enumerator_37042.hasCurrentObject ()) {
      //-------- @localVariableDeclarationForGeneration
      GALGAS_lexicalTypeEnum var_lexicalFormalArgumentType ;
      //-------- @methodCallInstructionForGeneration
      var_lexicalTypeMap.method_searchKey (enumerator_37042.current_mLexicalTypeName (HERE), var_lexicalFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (884)) ;
      //-------- END @methodCallInstructionForGeneration
      //-------- @plusEqualnstructionForGeneration
      var_lexicalFunctionFormalArgumentList.addAssign_operation (var_lexicalFormalArgumentType, enumerator_37042.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE_AT_LINE (885)) COMMA_SOURCE_FILE_AT_LINE (885)) ;
      enumerator_37042.gotoNextObject () ;
    }
    //-------- @localVariableDeclarationForGeneration
    GALGAS_lexicalTypeEnum var_returnedArgumentType ;
    //-------- @methodCallInstructionForGeneration
    var_lexicalTypeMap.method_searchKey (enumerator_36905.current_mReturnedTypeName (HERE), var_returnedArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (888)) ;
    //-------- END @methodCallInstructionForGeneration
    { //-------- @modifierCallInstructionForGeneration
    var_lexicalFunctionMap.modifier_insertKey (enumerator_36905.current_mFunctionName (HERE), var_lexicalFunctionFormalArgumentList, var_returnedArgumentType, GALGAS_string::makeEmptyString (), GALGAS_bool (true), inCompiler COMMA_SOURCE_FILE_AT_LINE (889)) ;
    } //-------- END @typeMethodInstructionForGeneration
    enumerator_36905.gotoNextObject () ;
  }
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_stringset var_externUnicodeTestFunctions = GALGAS_stringset::constructor_emptySet (SOURCE_FILE_AT_LINE (892)) ;
  //-------- @plusEqualnstructionForGeneration
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("unicodeToLower") COMMA_SOURCE_FILE_AT_LINE (893)) ;
  //-------- @plusEqualnstructionForGeneration
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("unicodeToUpper") COMMA_SOURCE_FILE_AT_LINE (894)) ;
  //-------- @plusEqualnstructionForGeneration
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeLetter") COMMA_SOURCE_FILE_AT_LINE (895)) ;
  //-------- @plusEqualnstructionForGeneration
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeMark") COMMA_SOURCE_FILE_AT_LINE (896)) ;
  //-------- @plusEqualnstructionForGeneration
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeNumber") COMMA_SOURCE_FILE_AT_LINE (897)) ;
  //-------- @plusEqualnstructionForGeneration
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeDecimalDigit") COMMA_SOURCE_FILE_AT_LINE (898)) ;
  //-------- @plusEqualnstructionForGeneration
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeASCIIHexDigit") COMMA_SOURCE_FILE_AT_LINE (899)) ;
  //-------- @plusEqualnstructionForGeneration
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeSeparator") COMMA_SOURCE_FILE_AT_LINE (900)) ;
  //-------- @plusEqualnstructionForGeneration
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeCommand") COMMA_SOURCE_FILE_AT_LINE (901)) ;
  //-------- @plusEqualnstructionForGeneration
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodePunctuation") COMMA_SOURCE_FILE_AT_LINE (902)) ;
  //-------- @plusEqualnstructionForGeneration
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeSymbol") COMMA_SOURCE_FILE_AT_LINE (903)) ;
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_lexiqueAnalysisContext var_lexiqueAnalysisContext = GALGAS_lexiqueAnalysisContext::constructor_new (var_lexicalRoutineMap, var_lexicalFunctionMap, GALGAS_lexicalMessageMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (908)), GALGAS_terminalMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (909)), GALGAS_terminalList::constructor_emptyList (SOURCE_FILE_AT_LINE (910)), GALGAS_lexicalAttributeMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (911)), GALGAS_lexicalExplicitTokenListMapMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (912)), GALGAS_stringset::constructor_emptySet (SOURCE_FILE_AT_LINE (913)), GALGAS_templateDelimitorList::constructor_emptyList (SOURCE_FILE_AT_LINE (914)), GALGAS_styleMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (915)), var_externUnicodeTestFunctions COMMA_SOURCE_FILE_AT_LINE (905)) ;
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS_uint var_styleIndex = GALGAS_uint ((PMUInt32) 1U) ;
  //-------- @foreachInstructionForGeneration
  cEnumerator_lexicalStyleListAST enumerator_38859 (constinArgument_inLexiqueComponentRoot.reader_mLexicalStyleList (SOURCE_FILE_AT_LINE (920)), kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_38859.hasCurrentObject ()) {
    { //-------- @modifierCallInstructionForGeneration
    var_lexiqueAnalysisContext.mAttribute_mStyleMap.modifier_insertKey (enumerator_38859.current_mName (HERE), enumerator_38859.current_mComment (HERE), var_styleIndex, inCompiler COMMA_SOURCE_FILE_AT_LINE (921)) ;
    } //-------- END @typeMethodInstructionForGeneration
    //-------- @incrementInstructionForGeneration
    var_styleIndex.increment_operation (inCompiler COMMA_SOURCE_FILE_AT_LINE (922)) ;
    enumerator_38859.gotoNextObject () ;
  }
  { //-------- @routineCallInstructionForGeneration
  routine_buildLexicalAttributeMap (var_lexicalTypeMap, constinArgument_inLexiqueComponentRoot.reader_mLexicalAttributeList (SOURCE_FILE_AT_LINE (927)), var_lexiqueAnalysisContext.mAttribute_mLexicalAttributeMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (925)) ;
  } //-------- @routineCallInstructionForGeneration
  //-------- @foreachInstructionForGeneration
  cEnumerator_terminalDeclarationListAST enumerator_39321 (constinArgument_inLexiqueComponentRoot.reader_mTerminalDeclarationList (SOURCE_FILE_AT_LINE (931)), kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_39321.hasCurrentObject ()) {
    //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
    GALGAS_uint var_terminalStyleIndex = GALGAS_uint ((PMUInt32) 0U) ;
    //-------- @ifInstructionForGeneration
    const enumGalgasBool test_2 = GALGAS_bool (kIsStrictSup, enumerator_39321.current_mStyle (HERE).reader_string (SOURCE_FILE_AT_LINE (933)).reader_length (SOURCE_FILE_AT_LINE (933)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
    if (kBoolTrue == test_2) {
      //-------- @methodCallInstructionForGeneration
      GALGAS_lstring joker_39461_0 ; // Joker input parameter
      var_lexiqueAnalysisContext.reader_mStyleMap (SOURCE_FILE_AT_LINE (934)).method_searchKey (enumerator_39321.current_mStyle (HERE), joker_39461_0, var_terminalStyleIndex, inCompiler COMMA_SOURCE_FILE_AT_LINE (934)) ;
      //-------- END @methodCallInstructionForGeneration
    }
    //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
    GALGAS_lexicalSentValueList var_argumentTypeList = GALGAS_lexicalSentValueList::constructor_emptyList (SOURCE_FILE_AT_LINE (936)) ;
    //-------- @foreachInstructionForGeneration
    cEnumerator_lstringlist enumerator_39588 (enumerator_39321.current_mSentAttributeList (HERE), kEnumeration_up) ;
    //--- simple foreach instruction
    while (enumerator_39588.hasCurrentObject ()) {
      //-------- @localVariableDeclarationForGeneration
      GALGAS_lexicalTypeEnum var_attributeLexicalType ;
      //-------- @methodCallInstructionForGeneration
      var_lexiqueAnalysisContext.mAttribute_mLexicalAttributeMap.method_searchKey (enumerator_39588.current_mValue (HERE), var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (939)) ;
      //-------- END @methodCallInstructionForGeneration
      //-------- @plusEqualnstructionForGeneration
      var_argumentTypeList.addAssign_operation (enumerator_39588.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (940)), var_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (940)) ;
      enumerator_39588.gotoNextObject () ;
    }
    { //-------- @modifierCallInstructionForGeneration
    var_lexiqueAnalysisContext.mAttribute_mTerminalMap.modifier_insertKey (enumerator_39321.current_mName (HERE), var_argumentTypeList, inCompiler COMMA_SOURCE_FILE_AT_LINE (942)) ;
    } //-------- END @typeMethodInstructionForGeneration
    //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
    GALGAS_bool var_isEndOfTemplateMark = GALGAS_bool (false) ;
    //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
    GALGAS_bool var_atomicSelection = GALGAS_bool (true) ;
    //-------- @foreachInstructionForGeneration
    cEnumerator_lstringlist enumerator_40000 (enumerator_39321.current_mOptionList (HERE), kEnumeration_up) ;
    //--- simple foreach instruction
    while (enumerator_40000.hasCurrentObject ()) {
      //-------- @ifInstructionForGeneration
      const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, enumerator_40000.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (946)).objectCompare (GALGAS_string ("nonAtomicSelection"))).boolEnum () ;
      if (kBoolTrue == test_3) {
        //-------- @ifInstructionForGeneration
        const enumGalgasBool test_4 = var_atomicSelection.boolEnum () ;
        if (kBoolTrue == test_4) {
          //-------- @assignmentInstructionForGeneration
          var_atomicSelection = GALGAS_bool (false) ;
        }else if (kBoolFalse == test_4) {
          //-------- @errorInstructionForGeneration
          GALGAS_location location_5 (enumerator_40000.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_5, GALGAS_string ("the 'nonAtomicSelection' feature is already set") COMMA_SOURCE_FILE_AT_LINE (950)) ;
        }
      }else if (kBoolFalse == test_3) {
        //-------- @ifInstructionForGeneration
        const enumGalgasBool test_6 = GALGAS_bool (kIsNotEqual, enumerator_40000.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (952)).objectCompare (GALGAS_string ("templateEndMark"))).boolEnum () ;
        if (kBoolTrue == test_6) {
          //-------- @errorInstructionForGeneration
          GALGAS_location location_7 (enumerator_40000.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_7, GALGAS_string ("only the 'templateEndMark' and 'nonAtomicSelection' features are allowed here") COMMA_SOURCE_FILE_AT_LINE (953)) ;
        }else if (kBoolFalse == test_6) {
          //-------- @ifInstructionForGeneration
          const enumGalgasBool test_8 = var_isEndOfTemplateMark.boolEnum () ;
          if (kBoolTrue == test_8) {
            //-------- @errorInstructionForGeneration
            GALGAS_location location_9 (enumerator_40000.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_9, GALGAS_string ("the 'templateEndMark' feature is already set") COMMA_SOURCE_FILE_AT_LINE (955)) ;
          }else if (kBoolFalse == test_8) {
            //-------- @assignmentInstructionForGeneration
            var_isEndOfTemplateMark = GALGAS_bool (true) ;
          }
        }
      }
      enumerator_40000.gotoNextObject () ;
    }
    //-------- @plusEqualnstructionForGeneration
    var_lexiqueAnalysisContext.mAttribute_mTerminalList.addAssign_operation (enumerator_39321.current_mName (HERE), var_argumentTypeList, enumerator_39321.current_mSyntaxErrorMessage (HERE).reader_string (SOURCE_FILE_AT_LINE (963)), var_isEndOfTemplateMark, var_atomicSelection, var_terminalStyleIndex COMMA_SOURCE_FILE_AT_LINE (960)) ;
    enumerator_39321.gotoNextObject () ;
  }
  //-------- @foreachInstructionForGeneration
  cEnumerator_lexicalListDeclarationListAST enumerator_40857 (constinArgument_inLexiqueComponentRoot.reader_mLexicalListDeclarationList (SOURCE_FILE_AT_LINE (969)), kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_40857.hasCurrentObject ()) {
    //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
    GALGAS_uint var_terminalStyleIndex = GALGAS_uint ((PMUInt32) 0U) ;
    //-------- @ifInstructionForGeneration
    const enumGalgasBool test_10 = GALGAS_bool (kIsStrictSup, enumerator_40857.current_mStyle (HERE).reader_string (SOURCE_FILE_AT_LINE (971)).reader_length (SOURCE_FILE_AT_LINE (971)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
    if (kBoolTrue == test_10) {
      //-------- @methodCallInstructionForGeneration
      GALGAS_lstring joker_40997_0 ; // Joker input parameter
      var_lexiqueAnalysisContext.reader_mStyleMap (SOURCE_FILE_AT_LINE (972)).method_searchKey (enumerator_40857.current_mStyle (HERE), joker_40997_0, var_terminalStyleIndex, inCompiler COMMA_SOURCE_FILE_AT_LINE (972)) ;
      //-------- END @methodCallInstructionForGeneration
    }
    //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
    GALGAS_lexicalSentValueList var_argumentTypeList = GALGAS_lexicalSentValueList::constructor_emptyList (SOURCE_FILE_AT_LINE (974)) ;
    //-------- @foreachInstructionForGeneration
    cEnumerator_lstringlist enumerator_41124 (enumerator_40857.current_mSentAttributeList (HERE), kEnumeration_up) ;
    //--- simple foreach instruction
    while (enumerator_41124.hasCurrentObject ()) {
      //-------- @localVariableDeclarationForGeneration
      GALGAS_lexicalTypeEnum var_attributeLexicalType ;
      //-------- @methodCallInstructionForGeneration
      var_lexiqueAnalysisContext.mAttribute_mLexicalAttributeMap.method_searchKey (enumerator_41124.current_mValue (HERE), var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (977)) ;
      //-------- END @methodCallInstructionForGeneration
      //-------- @plusEqualnstructionForGeneration
      var_argumentTypeList.addAssign_operation (enumerator_41124.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (978)), var_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (978)) ;
      enumerator_41124.gotoNextObject () ;
    }
    //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
    GALGAS_lexicalExplicitTokenListMap var_lexicalTokenListMap = GALGAS_lexicalExplicitTokenListMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (980)) ;
    //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
    GALGAS_tokenSortedlist var_tokenSortedlist = GALGAS_tokenSortedlist::constructor_emptySortedList (SOURCE_FILE_AT_LINE (981)) ;
    //-------- @foreachInstructionForGeneration
    cEnumerator_lexicalListEntryListAST enumerator_41499 (enumerator_40857.current_mEntryList (HERE), kEnumeration_up) ;
    //--- simple foreach instruction
    while (enumerator_41499.hasCurrentObject ()) {
      //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
      GALGAS_string var_syntaxErrorMessage = enumerator_40857.current_mSyntaxErrorMessage (HERE).reader_string (SOURCE_FILE_AT_LINE (983)).reader_stringByReplacingStringByString (GALGAS_string ("%K"), enumerator_41499.current_mTerminalSpelling (HERE).reader_string (SOURCE_FILE_AT_LINE (983)), inCompiler COMMA_SOURCE_FILE_AT_LINE (983)) ;
      //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
      GALGAS_bool var_isEndOfTemplateMark = GALGAS_bool (false) ;
      //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
      GALGAS_bool var_atomicSelection = GALGAS_bool (true) ;
      //-------- @foreachInstructionForGeneration
      cEnumerator_lstringlist enumerator_41745 (enumerator_41499.current_mFeatureList (HERE), kEnumeration_up) ;
      //--- simple foreach instruction
      while (enumerator_41745.hasCurrentObject ()) {
        //-------- @ifInstructionForGeneration
        const enumGalgasBool test_11 = GALGAS_bool (kIsEqual, enumerator_41745.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (987)).objectCompare (GALGAS_string ("nonAtomicSelection"))).boolEnum () ;
        if (kBoolTrue == test_11) {
          //-------- @ifInstructionForGeneration
          const enumGalgasBool test_12 = var_atomicSelection.boolEnum () ;
          if (kBoolTrue == test_12) {
            //-------- @assignmentInstructionForGeneration
            var_atomicSelection = GALGAS_bool (false) ;
          }else if (kBoolFalse == test_12) {
            //-------- @errorInstructionForGeneration
            GALGAS_location location_13 (enumerator_41745.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_13, GALGAS_string ("the 'nonAtomicSelection' feature is already set") COMMA_SOURCE_FILE_AT_LINE (991)) ;
          }
        }else if (kBoolFalse == test_11) {
          //-------- @ifInstructionForGeneration
          const enumGalgasBool test_14 = GALGAS_bool (kIsNotEqual, enumerator_41745.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (993)).objectCompare (GALGAS_string ("templateEndMark"))).boolEnum () ;
          if (kBoolTrue == test_14) {
            //-------- @errorInstructionForGeneration
            GALGAS_location location_15 (enumerator_41745.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_15, GALGAS_string ("only the 'templateEndMark' and 'nonAtomicSelection' features are allowed here") COMMA_SOURCE_FILE_AT_LINE (994)) ;
          }else if (kBoolFalse == test_14) {
            //-------- @ifInstructionForGeneration
            const enumGalgasBool test_16 = var_isEndOfTemplateMark.boolEnum () ;
            if (kBoolTrue == test_16) {
              //-------- @errorInstructionForGeneration
              GALGAS_location location_17 (enumerator_41745.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
              inCompiler->emitSemanticError (location_17, GALGAS_string ("the 'templateEndMark' feature is already set") COMMA_SOURCE_FILE_AT_LINE (996)) ;
            }else if (kBoolFalse == test_16) {
              //-------- @assignmentInstructionForGeneration
              var_isEndOfTemplateMark = GALGAS_bool (true) ;
            }
          }
        }
        enumerator_41745.gotoNextObject () ;
      }
      //-------- @plusEqualnstructionForGeneration
      var_lexiqueAnalysisContext.mAttribute_mTerminalList.addAssign_operation (enumerator_41499.current_mTerminalSpelling (HERE), var_argumentTypeList, var_syntaxErrorMessage, var_isEndOfTemplateMark, var_atomicSelection, var_terminalStyleIndex COMMA_SOURCE_FILE_AT_LINE (1001)) ;
      { //-------- @modifierCallInstructionForGeneration
      var_lexiqueAnalysisContext.mAttribute_mTerminalMap.modifier_insertKey (enumerator_41499.current_mTerminalSpelling (HERE), var_argumentTypeList, inCompiler COMMA_SOURCE_FILE_AT_LINE (1009)) ;
      } //-------- END @typeMethodInstructionForGeneration
      { //-------- @modifierCallInstructionForGeneration
      var_lexicalTokenListMap.modifier_insertKey (enumerator_41499.current_mEntrySpelling (HERE), enumerator_41499.current_mTerminalSpelling (HERE), enumerator_41499.current_mFeatureList (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (1010)) ;
      } //-------- END @typeMethodInstructionForGeneration
      //-------- @plusEqualnstructionForGeneration
      var_tokenSortedlist.addAssign_operation (enumerator_41499.current_mEntrySpelling (HERE).reader_string (SOURCE_FILE_AT_LINE (1011)).reader_length (SOURCE_FILE_AT_LINE (1011)), enumerator_41499.current_mEntrySpelling (HERE).reader_string (SOURCE_FILE_AT_LINE (1011)), enumerator_41499.current_mTerminalSpelling (HERE).reader_string (SOURCE_FILE_AT_LINE (1011)) COMMA_SOURCE_FILE_AT_LINE (1011)) ;
      //-------- @plusEqualnstructionForGeneration
      var_lexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (enumerator_41499.current_mEntrySpelling (HERE).reader_string (SOURCE_FILE_AT_LINE (1012)) COMMA_SOURCE_FILE_AT_LINE (1012)) ;
      enumerator_41499.gotoNextObject () ;
    }
    { //-------- @modifierCallInstructionForGeneration
    var_lexiqueAnalysisContext.mAttribute_mLexicalTokenListMap.modifier_insertKey (enumerator_40857.current_mName (HERE), var_lexicalTokenListMap, var_tokenSortedlist, GALGAS_bool (false), inCompiler COMMA_SOURCE_FILE_AT_LINE (1014)) ;
    } //-------- END @typeMethodInstructionForGeneration
    enumerator_40857.gotoNextObject () ;
  }
  //-------- @foreachInstructionForGeneration
  cEnumerator_lexicalMessageDeclarationListAST enumerator_43231 (constinArgument_inLexiqueComponentRoot.reader_mLexicalMessageDeclarationList (SOURCE_FILE_AT_LINE (1017)), kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_43231.hasCurrentObject ()) {
    { //-------- @modifierCallInstructionForGeneration
    var_lexiqueAnalysisContext.mAttribute_mLexicalMessageMap.modifier_insertKey (enumerator_43231.current_mMessageName (HERE), enumerator_43231.current_mMessageValue (HERE), GALGAS_bool (false), inCompiler COMMA_SOURCE_FILE_AT_LINE (1018)) ;
    } //-------- END @typeMethodInstructionForGeneration
    enumerator_43231.gotoNextObject () ;
  }
  //-------- @foreachInstructionForGeneration
  cEnumerator_lexicalRuleListAST enumerator_43454 (constinArgument_inLexiqueComponentRoot.reader_mLexicalRuleList (SOURCE_FILE_AT_LINE (1021)), kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_43454.hasCurrentObject ()) {
    //-------- @methodCallInstructionForGeneration
    callCategoryMethod_checkLexicalRule ((const cPtr_abstractLexicalRuleAST *) enumerator_43454.current_mLexicalRule (HERE).ptr (), var_lexiqueAnalysisContext, inCompiler COMMA_SOURCE_FILE_AT_LINE (1022)) ;
    //-------- END @methodCallInstructionForGeneration
    enumerator_43454.gotoNextObject () ;
  }
  //-------- @foreachInstructionForGeneration
  cEnumerator_lexicalMessageMap enumerator_43656 (var_lexiqueAnalysisContext.reader_mLexicalMessageMap (SOURCE_FILE_AT_LINE (1025)), kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_43656.hasCurrentObject ()) {
    //-------- @ifInstructionForGeneration
    const enumGalgasBool test_18 = enumerator_43656.current_mMessageIsUsed (HERE).operator_not (SOURCE_FILE_AT_LINE (1026)).boolEnum () ;
    if (kBoolTrue == test_18) {
      //-------- @warningInstructionForGeneration
      GALGAS_location location_19 (enumerator_43656.current_lkey (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticWarning (location_19, GALGAS_string ("unused message") COMMA_SOURCE_FILE_AT_LINE (1027)) ;
    }
    enumerator_43656.gotoNextObject () ;
  }
  //-------- @foreachInstructionForGeneration
  cEnumerator_metamodelTemplateDelimitorListAST enumerator_43876 (constinArgument_inLexiqueComponentRoot.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (1031)), kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_43876.hasCurrentObject ()) {
    //-------- @plusEqualnstructionForGeneration
    var_lexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (enumerator_43876.current_mStartString (HERE).reader_string (SOURCE_FILE_AT_LINE (1032)) COMMA_SOURCE_FILE_AT_LINE (1032)) ;
    //-------- @plusEqualnstructionForGeneration
    var_lexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (enumerator_43876.current_mEndString (HERE).reader_string (SOURCE_FILE_AT_LINE (1033)) COMMA_SOURCE_FILE_AT_LINE (1033)) ;
    //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
    GALGAS_bool var_preservesStartDelimiter = GALGAS_bool (false) ;
    //-------- @foreachInstructionForGeneration
    cEnumerator_lstringlist enumerator_44104 (enumerator_43876.current_mOptionList (HERE), kEnumeration_up) ;
    //--- simple foreach instruction
    while (enumerator_44104.hasCurrentObject ()) {
      //-------- @ifInstructionForGeneration
      const enumGalgasBool test_20 = GALGAS_bool (kIsNotEqual, enumerator_44104.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (1036)).objectCompare (GALGAS_string ("preserved"))).boolEnum () ;
      if (kBoolTrue == test_20) {
        //-------- @errorInstructionForGeneration
        GALGAS_location location_21 (enumerator_44104.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_21, GALGAS_string ("only the 'preserved' feature is allowed here") COMMA_SOURCE_FILE_AT_LINE (1037)) ;
      }else if (kBoolFalse == test_20) {
        //-------- @ifInstructionForGeneration
        const enumGalgasBool test_22 = var_preservesStartDelimiter.boolEnum () ;
        if (kBoolTrue == test_22) {
          //-------- @errorInstructionForGeneration
          GALGAS_location location_23 (enumerator_44104.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_23, GALGAS_string ("the 'preserved' feature is already set") COMMA_SOURCE_FILE_AT_LINE (1039)) ;
        }else if (kBoolFalse == test_22) {
          //-------- @assignmentInstructionForGeneration
          var_preservesStartDelimiter = GALGAS_bool (true) ;
        }
      }
      enumerator_44104.gotoNextObject () ;
    }
    //-------- @plusEqualnstructionForGeneration
    var_lexiqueAnalysisContext.mAttribute_mTemplateDelimitorList.addAssign_operation (enumerator_43876.current_mStartString (HERE), enumerator_43876.current_mEndString (HERE), var_preservesStartDelimiter COMMA_SOURCE_FILE_AT_LINE (1044)) ;
    enumerator_43876.gotoNextObject () ;
  }
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_24 = constinArgument_inLexiqueComponentRoot.reader_mIndexingDirectory (SOURCE_FILE_AT_LINE (1047)).mAttribute_location.reader_isNowhere (SOURCE_FILE_AT_LINE (1047)).boolEnum () ;
  if (kBoolTrue == test_24) {
    //-------- @foreachInstructionForGeneration
    cEnumerator_indexingListAST enumerator_44718 (constinArgument_inLexiqueComponentRoot.reader_mIndexingListAST (SOURCE_FILE_AT_LINE (1048)), kEnumeration_up) ;
    //--- simple foreach instruction
    while (enumerator_44718.hasCurrentObject ()) {
      //-------- @errorInstructionForGeneration
      GALGAS_location location_25 (enumerator_44718.current_mIndexName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_25, GALGAS_string ("indexing declaration requires one 'indexing in \"path\";' declaration") COMMA_SOURCE_FILE_AT_LINE (1049)) ;
      enumerator_44718.gotoNextObject () ;
    }
  }
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_stringset var_indexNameSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE_AT_LINE (1052)) ;
  //-------- @foreachInstructionForGeneration
  cEnumerator_indexingListAST enumerator_44940 (constinArgument_inLexiqueComponentRoot.reader_mIndexingListAST (SOURCE_FILE_AT_LINE (1053)), kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_44940.hasCurrentObject ()) {
    //-------- @ifInstructionForGeneration
    const enumGalgasBool test_26 = var_indexNameSet.reader_hasKey (enumerator_44940.current_mIndexName (HERE).reader_string (SOURCE_FILE_AT_LINE (1054)) COMMA_SOURCE_FILE_AT_LINE (1054)).boolEnum () ;
    if (kBoolTrue == test_26) {
      //-------- @errorInstructionForGeneration
      GALGAS_location location_27 (enumerator_44940.current_mIndexName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_27, GALGAS_string ("the '").operator_concat (enumerator_44940.current_mIndexName (HERE).reader_string (SOURCE_FILE_AT_LINE (1055)) COMMA_SOURCE_FILE_AT_LINE (1055)).operator_concat (GALGAS_string ("' index is already declared") COMMA_SOURCE_FILE_AT_LINE (1055)) COMMA_SOURCE_FILE_AT_LINE (1055)) ;
    }
    //-------- @plusEqualnstructionForGeneration
    var_indexNameSet.addAssign_operation (enumerator_44940.current_mIndexName (HERE).reader_string (SOURCE_FILE_AT_LINE (1057)) COMMA_SOURCE_FILE_AT_LINE (1057)) ;
    enumerator_44940.gotoNextObject () ;
  }
  //-------- @foreachInstructionForGeneration
  cEnumerator_templateReplacementListAST enumerator_45273 (constinArgument_inLexiqueComponentRoot.reader_mTemplateReplacementList (SOURCE_FILE_AT_LINE (1060)), kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_45273.hasCurrentObject ()) {
    //-------- @plusEqualnstructionForGeneration
    var_lexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (enumerator_45273.current_mMatchString (HERE).reader_string (SOURCE_FILE_AT_LINE (1061)) COMMA_SOURCE_FILE_AT_LINE (1061)) ;
    //-------- @plusEqualnstructionForGeneration
    var_lexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (enumerator_45273.current_mReplacementString (HERE).reader_string (SOURCE_FILE_AT_LINE (1062)) COMMA_SOURCE_FILE_AT_LINE (1062)) ;
    enumerator_45273.gotoNextObject () ;
  }
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS_string var_lexiqueClassName = var_componentName.reader_string (SOURCE_FILE_AT_LINE (1066)) ;
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_28 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (1068)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_28) {
    { //-------- @typeMethodInstructionForGeneration
    GALGAS_string::class_method_generateFileWithPattern (constinArgument_inOutputDirectory, var_lexiqueClassName.operator_concat (GALGAS_string (".h") COMMA_SOURCE_FILE_AT_LINE (1071)), GALGAS_string ("//"), GALGAS_string ("\n"
      "\n"), GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_newHeaderZone_32_ (inCompiler, var_lexiqueClassName.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (1075)), var_lexiqueAnalysisContext, constinArgument_inLexiqueComponentRoot COMMA_SOURCE_FILE_AT_LINE (1074))), GALGAS_string ("\n"
      "\n"), GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_newHeaderZone_33_ (inCompiler, var_lexiqueClassName.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (1081)), constinArgument_inLexiqueComponentRoot.reader_mLexicalListDeclarationList (SOURCE_FILE_AT_LINE (1082)), var_lexiqueAnalysisContext, constinArgument_inLexiqueComponentRoot.reader_mIndexingListAST (SOURCE_FILE_AT_LINE (1084)) COMMA_SOURCE_FILE_AT_LINE (1080))), inCompiler COMMA_SOURCE_FILE_AT_LINE (1069)) ;
    } //-------- @routineCallInstructionForGeneration
  }
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_29 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (1089)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_29) {
    { //-------- @typeMethodInstructionForGeneration
    GALGAS_string::class_method_generateFileWithPattern (constinArgument_inOutputDirectory, var_lexiqueClassName.operator_concat (GALGAS_string (".cpp") COMMA_SOURCE_FILE_AT_LINE (1092)), GALGAS_string ("//"), GALGAS_string ("\n"
      "\n"), GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_newImplementationZone_32_ (inCompiler, var_lexiqueClassName.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (1096)), var_lexiqueAnalysisContext.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (1097)), var_lexiqueAnalysisContext.reader_mLexicalMessageMap (SOURCE_FILE_AT_LINE (1098)), var_lexiqueAnalysisContext.reader_mTerminalList (SOURCE_FILE_AT_LINE (1099)), var_lexiqueAnalysisContext.reader_mLexicalTokenListMap (SOURCE_FILE_AT_LINE (1100)), var_lexiqueAnalysisContext.reader_mUnicodeStringToGenerate (SOURCE_FILE_AT_LINE (1101)), constinArgument_inLexiqueComponentRoot.reader_mLexicalRuleList (SOURCE_FILE_AT_LINE (1102)), var_lexiqueAnalysisContext, constinArgument_inLexiqueComponentRoot COMMA_SOURCE_FILE_AT_LINE (1095))), GALGAS_string ("\n"
      "\n"), GALGAS_string ("\n"
      "\n"), inCompiler COMMA_SOURCE_FILE_AT_LINE (1090)) ;
    } //-------- @routineCallInstructionForGeneration
  }
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_30 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (1111)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_30) {
    { //-------- @typeMethodInstructionForGeneration
    GALGAS_string::class_method_generateFileWithPattern (constinArgument_inOutputDirectory, var_lexiqueClassName.operator_concat (GALGAS_string ("-cocoa.h") COMMA_SOURCE_FILE_AT_LINE (1114)), GALGAS_string ("//"), GALGAS_string ("\n"
      "\n"), GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_cocoaHeaderZone_32_ (inCompiler, var_lexiqueClassName, var_lexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (1117))), GALGAS_string ("\n"
      "\n"), GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_cocoaHeaderZone_33_ (inCompiler, var_lexiqueClassName, var_lexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (1122))), inCompiler COMMA_SOURCE_FILE_AT_LINE (1112)) ;
    } //-------- @routineCallInstructionForGeneration
  }
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_31 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (1129)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_31) {
    { //-------- @typeMethodInstructionForGeneration
    GALGAS_string::class_method_generateFileWithPattern (constinArgument_inOutputDirectory, var_lexiqueClassName.operator_concat (GALGAS_string ("-cocoa.m") COMMA_SOURCE_FILE_AT_LINE (1132)), GALGAS_string ("//"), GALGAS_string ("\n"
      "\n"), GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_cocoaImplementationZone_32_ (inCompiler, var_lexiqueClassName, var_lexiqueAnalysisContext.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (1137)), var_lexiqueAnalysisContext.reader_mLexicalMessageMap (SOURCE_FILE_AT_LINE (1138)), var_lexiqueAnalysisContext.reader_mTerminalList (SOURCE_FILE_AT_LINE (1139)), var_lexiqueAnalysisContext.reader_mUnicodeStringToGenerate (SOURCE_FILE_AT_LINE (1140)), constinArgument_inLexiqueComponentRoot.reader_mLexicalRuleList (SOURCE_FILE_AT_LINE (1141)), var_lexiqueAnalysisContext, constinArgument_inLexiqueComponentRoot COMMA_SOURCE_FILE_AT_LINE (1135))), GALGAS_string ("\n"
      "\n"), GALGAS_string ("\n"
      "\n"), inCompiler COMMA_SOURCE_FILE_AT_LINE (1130)) ;
    } //-------- @routineCallInstructionForGeneration
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//                Routine 'compileLexiqueComponentFromSource'                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileLexiqueComponentFromSource (const GALGAS_lstring constinArgument_inSourceFile,
                                                const GALGAS_string constinArgument_inOutputDirectory,
                                                GALGAS_parsedComponentStruct & ioArgument_ioParsedComponentStruct,
                                                C_Compiler * inCompiler
                                                COMMA_UNUSED_LOCATION_ARGS) {
  //-------- @localVariableDeclarationForGeneration
  GALGAS_lexiqueComponentAST var_lexiqueComponentRoot ;
  { //-------- @routineCallInstructionForGeneration
  routine_parseLexiqueComponent (constinArgument_inSourceFile, ioArgument_ioParsedComponentStruct, var_lexiqueComponentRoot, inCompiler COMMA_SOURCE_FILE_AT_LINE (1161)) ;
  } //-------- @routineCallInstructionForGeneration
  { //-------- @routineCallInstructionForGeneration
  routine_compileLexiqueComponentFromAST (constinArgument_inSourceFile.reader_string (SOURCE_FILE_AT_LINE (1167)).reader_lastPathComponent (SOURCE_FILE_AT_LINE (1167)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (1167)), constinArgument_inOutputDirectory, var_lexiqueComponentRoot, inCompiler COMMA_SOURCE_FILE_AT_LINE (1166)) ;
  } //-------- @routineCallInstructionForGeneration
}


//---------------------------------------------------------------------------*
//                                                                           *
//              Category Reader '@lexicalTypeEnum cppTypeName'               *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_cppTypeName (const GALGAS_lexicalTypeEnum & inObject,
                                          C_Compiler * /* inCompiler */
                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //------- @switchInstructionForGeneration
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("C_String") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("utf32") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("PMUInt32") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("PMUInt64") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("PMSInt32") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("PMSInt64") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("double") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//            Category Reader '@lexicalTypeEnum appendMethodName'            *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_appendMethodName (const GALGAS_lexicalTypeEnum & inObject,
                                               C_Compiler * /* inCompiler */
                                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //------- @switchInstructionForGeneration
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("appendCLiteralStringConstant") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("appendUnicodeCharacter") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("appendUnsigned") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("appendUnsigned") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("appendSigned") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("appendSigned") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("appendDouble") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//         Category Reader '@lexicalTypeEnum appendArgumentOfMethod'         *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_appendArgumentOfMethod (const GALGAS_lexicalTypeEnum & inObject,
                                                     C_Compiler * /* inCompiler */
                                                     COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //------- @switchInstructionForGeneration
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string (" COMMA_HERE") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//             Category Reader '@lexicalTypeEnum initialization'             *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_initialization (const GALGAS_lexicalTypeEnum & inObject,
                                             C_Compiler * /* inCompiler */
                                             COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //------- @switchInstructionForGeneration
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string (".setLengthToZero ()") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string (" = TO_UNICODE (0)") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string (" = 0.0") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//             Category Reader '@lexicalTypeEnum cocoaTypeName'              *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_cocoaTypeName (const GALGAS_lexicalTypeEnum & inObject,
                                            C_Compiler * /* inCompiler */
                                            COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //------- @switchInstructionForGeneration
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("NSMutableString *") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("UInt32") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("UInt32") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("UInt64") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("SInt32") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("SInt64") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("double") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//        Category Reader '@lexicalTypeEnum cocoaInitializationCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_cocoaInitializationCode (const GALGAS_lexicalTypeEnum & inObject,
                                                      C_Compiler * /* inCompiler */
                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //------- @switchInstructionForGeneration
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("[[NSMutableString alloc] init]") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("0.0") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//            Category Reader '@lexicalTypeEnum cocoaResetPrefix'            *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_cocoaResetPrefix (const GALGAS_lexicalTypeEnum & inObject,
                                               C_Compiler * /* inCompiler */
                                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //------- @switchInstructionForGeneration
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string ("[") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//               Category Reader '@lexicalTypeEnum cocoaReset'               *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_cocoaReset (const GALGAS_lexicalTypeEnum & inObject,
                                         C_Compiler * /* inCompiler */
                                         COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //------- @switchInstructionForGeneration
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string (" setString:@\"\"]") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      //-------- @assignmentInstructionForGeneration
      result_outResult = GALGAS_string (" = 0.0") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//Abstract category method '@lexicalSendDefaultActionAST checkLexicalDefaultAction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_lexicalSendDefaultActionAST_checkLexicalDefaultAction> gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction ;

//---------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalDefaultAction (const PMSInt32 inClassIndex,
                                                    categoryMethodSignature_lexicalSendDefaultActionAST_checkLexicalDefaultAction inMethod) {
  gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

static void freeCategoryMethod_lexicalSendDefaultActionAST_checkLexicalDefaultAction (void) {
  gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalSendDefaultActionAST_checkLexicalDefaultAction (NULL,
                                                                                  freeCategoryMethod_lexicalSendDefaultActionAST_checkLexicalDefaultAction) ;

//---------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalDefaultAction (const cPtr_lexicalSendDefaultActionAST * inObject,
                                                   GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_lexicalSendDefaultActionAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_lexicalSendDefaultActionAST_checkLexicalDefaultAction f = NULL ;
    if (classIndex < gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction.count ()) {
      f = gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction.count ()) {
           f = gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioLexiqueAnalysisContext, inCompiler COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalSendTerminalByDefaultAST checkLexicalDefaultAction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalSendTerminalByDefaultAST_checkLexicalDefaultAction (const cPtr_lexicalSendDefaultActionAST * inObject,
                                                                                      GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalSendTerminalByDefaultAST * object = (const cPtr_lexicalSendTerminalByDefaultAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalSendTerminalByDefaultAST) ;
  //-------- @methodCallInstructionForGeneration
  GALGAS_lexicalSentValueList joker_6900_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mTerminalMap (SOURCE_FILE_AT_LINE (154)).method_searchKey (object->mAttribute_mDefaultSentTerminal, joker_6900_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (154)) ;
  //-------- END @methodCallInstructionForGeneration
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalSendTerminalByDefaultAST_checkLexicalDefaultAction (void) {
  enterCategoryMethod_checkLexicalDefaultAction (kTypeDescriptor_GALGAS_lexicalSendTerminalByDefaultAST.mSlotID,
                                                 categoryMethod_lexicalSendTerminalByDefaultAST_checkLexicalDefaultAction) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalSendTerminalByDefaultAST_checkLexicalDefaultAction (defineCategoryMethod_lexicalSendTerminalByDefaultAST_checkLexicalDefaultAction, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalErrorByDefaultAST checkLexicalDefaultAction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalErrorByDefaultAST_checkLexicalDefaultAction (const cPtr_lexicalSendDefaultActionAST * inObject,
                                                                               GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalErrorByDefaultAST * object = (const cPtr_lexicalErrorByDefaultAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalErrorByDefaultAST) ;
  //-------- @readWriteWithInstructionForGeneration
  // index 1: attribute 'mLexicalMessage', type @lstring
  // index 2: attribute 'mMessageIsUsed', type @bool
  cMapElement_lexicalMessageMap * objectArray_7129 = (cMapElement_lexicalMessageMap *) ioArgument_ioLexiqueAnalysisContext.mAttribute_mLexicalMessageMap.readWriteAccessForWithInstruction_searchKey (inCompiler, object->mAttribute_mDefaultErrorMessageName COMMA_SOURCE_FILE_AT_LINE (162)) ;
  if (NULL != objectArray_7129) {
      macroValidSharedObject (objectArray_7129, cMapElement_lexicalMessageMap) ;
    //-------- @assignmentInstructionForGeneration
    objectArray_7129->mAttribute_mMessageIsUsed = GALGAS_bool (true) ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalErrorByDefaultAST_checkLexicalDefaultAction (void) {
  enterCategoryMethod_checkLexicalDefaultAction (kTypeDescriptor_GALGAS_lexicalErrorByDefaultAST.mSlotID,
                                                 categoryMethod_lexicalErrorByDefaultAST_checkLexicalDefaultAction) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalErrorByDefaultAST_checkLexicalDefaultAction (defineCategoryMethod_lexicalErrorByDefaultAST_checkLexicalDefaultAction, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//  Abstract category method '@lexicalExpressionAST checkLexicalExpression'  *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_lexicalExpressionAST_checkLexicalExpression> gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression ;

//---------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalExpression (const PMSInt32 inClassIndex,
                                                 categoryMethodSignature_lexicalExpressionAST_checkLexicalExpression inMethod) {
  gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

static void freeCategoryMethod_lexicalExpressionAST_checkLexicalExpression (void) {
  gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalExpressionAST_checkLexicalExpression (NULL,
                                                                        freeCategoryMethod_lexicalExpressionAST_checkLexicalExpression) ;

//---------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalExpression (const cPtr_lexicalExpressionAST * inObject,
                                                GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_lexicalExpressionAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_lexicalExpressionAST_checkLexicalExpression f = NULL ;
    if (classIndex < gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression.count ()) {
      f = gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression.count ()) {
           f = gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioLexiqueAnalysisContext, inCompiler COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalOrExpressionAST checkLexicalExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalOrExpressionAST_checkLexicalExpression (const cPtr_lexicalExpressionAST * inObject,
                                                                          GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalOrExpressionAST * object = (const cPtr_lexicalOrExpressionAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalOrExpressionAST) ;
  //-------- @methodCallInstructionForGeneration
  callCategoryMethod_checkLexicalExpression ((const cPtr_lexicalExpressionAST *) object->mAttribute_mLeftOperand.ptr (), ioArgument_ioLexiqueAnalysisContext, inCompiler COMMA_SOURCE_FILE_AT_LINE (180)) ;
  //-------- END @methodCallInstructionForGeneration
  //-------- @methodCallInstructionForGeneration
  callCategoryMethod_checkLexicalExpression ((const cPtr_lexicalExpressionAST *) object->mAttribute_mRightOperand.ptr (), ioArgument_ioLexiqueAnalysisContext, inCompiler COMMA_SOURCE_FILE_AT_LINE (181)) ;
  //-------- END @methodCallInstructionForGeneration
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalOrExpressionAST_checkLexicalExpression (void) {
  enterCategoryMethod_checkLexicalExpression (kTypeDescriptor_GALGAS_lexicalOrExpressionAST.mSlotID,
                                              categoryMethod_lexicalOrExpressionAST_checkLexicalExpression) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalOrExpressionAST_checkLexicalExpression (defineCategoryMethod_lexicalOrExpressionAST_checkLexicalExpression, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalCharacterMatchAST checkLexicalExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalCharacterMatchAST_checkLexicalExpression (const cPtr_lexicalExpressionAST * /* inObject */,
                                                                            GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                            C_Compiler * /* inCompiler */
                                                                            COMMA_UNUSED_LOCATION_ARGS) {
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalCharacterMatchAST_checkLexicalExpression (void) {
  enterCategoryMethod_checkLexicalExpression (kTypeDescriptor_GALGAS_lexicalCharacterMatchAST.mSlotID,
                                              categoryMethod_lexicalCharacterMatchAST_checkLexicalExpression) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalCharacterMatchAST_checkLexicalExpression (defineCategoryMethod_lexicalCharacterMatchAST_checkLexicalExpression, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalCharacterSetMatchAST checkLexicalExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalCharacterSetMatchAST_checkLexicalExpression (const cPtr_lexicalExpressionAST * inObject,
                                                                               GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalCharacterSetMatchAST * object = (const cPtr_lexicalCharacterSetMatchAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalCharacterSetMatchAST) ;
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = ioArgument_ioLexiqueAnalysisContext.mAttribute_mExternUnicodeTestFunctions.reader_hasKey (object->mAttribute_mCharacterSetName.reader_string (SOURCE_FILE_AT_LINE (196)) COMMA_SOURCE_FILE_AT_LINE (196)).operator_not (SOURCE_FILE_AT_LINE (196)).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
    GALGAS_string var_s = GALGAS_string ("undefined test function; available functions are:") ;
    //-------- @foreachInstructionForGeneration
    cEnumerator_stringset enumerator_8666 (ioArgument_ioLexiqueAnalysisContext.mAttribute_mExternUnicodeTestFunctions, kEnumeration_up) ;
    //--- simple foreach instruction
    while (enumerator_8666.hasCurrentObject ()) {
      //-------- @concatInstructionForGeneration
      var_s.dotAssign_operation (GALGAS_string ("\n"
        "-  ").operator_concat (enumerator_8666.current_key (HERE) COMMA_SOURCE_FILE_AT_LINE (199)) COMMA_SOURCE_FILE_AT_LINE (199)) ;
      enumerator_8666.gotoNextObject () ;
    }
    //-------- @errorInstructionForGeneration
    GALGAS_location location_1 (object->mAttribute_mCharacterSetName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, var_s COMMA_SOURCE_FILE_AT_LINE (201)) ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalCharacterSetMatchAST_checkLexicalExpression (void) {
  enterCategoryMethod_checkLexicalExpression (kTypeDescriptor_GALGAS_lexicalCharacterSetMatchAST.mSlotID,
                                              categoryMethod_lexicalCharacterSetMatchAST_checkLexicalExpression) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalCharacterSetMatchAST_checkLexicalExpression (defineCategoryMethod_lexicalCharacterSetMatchAST_checkLexicalExpression, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalCharacterIntervalMatchAST checkLexicalExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalCharacterIntervalMatchAST_checkLexicalExpression (const cPtr_lexicalExpressionAST * /* inObject */,
                                                                                    GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                                    C_Compiler * /* inCompiler */
                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalCharacterIntervalMatchAST_checkLexicalExpression (void) {
  enterCategoryMethod_checkLexicalExpression (kTypeDescriptor_GALGAS_lexicalCharacterIntervalMatchAST.mSlotID,
                                              categoryMethod_lexicalCharacterIntervalMatchAST_checkLexicalExpression) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalCharacterIntervalMatchAST_checkLexicalExpression (defineCategoryMethod_lexicalCharacterIntervalMatchAST_checkLexicalExpression, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalStringMatchAST checkLexicalExpression' *
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalStringMatchAST_checkLexicalExpression (const cPtr_lexicalExpressionAST * inObject,
                                                                         GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                         C_Compiler * /* inCompiler */
                                                                         COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalStringMatchAST * object = (const cPtr_lexicalStringMatchAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalStringMatchAST) ;
  //-------- @plusEqualnstructionForGeneration
  ioArgument_ioLexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (object->mAttribute_mString.reader_string (SOURCE_FILE_AT_LINE (217)) COMMA_SOURCE_FILE_AT_LINE (217)) ;
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalStringMatchAST_checkLexicalExpression (void) {
  enterCategoryMethod_checkLexicalExpression (kTypeDescriptor_GALGAS_lexicalStringMatchAST.mSlotID,
                                              categoryMethod_lexicalStringMatchAST_checkLexicalExpression) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalStringMatchAST_checkLexicalExpression (defineCategoryMethod_lexicalStringMatchAST_checkLexicalExpression, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalStringNotMatchAST checkLexicalExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalStringNotMatchAST_checkLexicalExpression (const cPtr_lexicalExpressionAST * inObject,
                                                                            GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalStringNotMatchAST * object = (const cPtr_lexicalStringNotMatchAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalStringNotMatchAST) ;
  //-------- @plusEqualnstructionForGeneration
  ioArgument_ioLexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (object->mAttribute_mString.reader_string (SOURCE_FILE_AT_LINE (225)) COMMA_SOURCE_FILE_AT_LINE (225)) ;
  //-------- @readWriteWithInstructionForGeneration
  // index 1: attribute 'mLexicalMessage', type @lstring
  // index 2: attribute 'mMessageIsUsed', type @bool
  cMapElement_lexicalMessageMap * objectArray_9569 = (cMapElement_lexicalMessageMap *) ioArgument_ioLexiqueAnalysisContext.mAttribute_mLexicalMessageMap.readWriteAccessForWithInstruction_searchKey (inCompiler, object->mAttribute_mErrorMessage COMMA_SOURCE_FILE_AT_LINE (226)) ;
  if (NULL != objectArray_9569) {
      macroValidSharedObject (objectArray_9569, cMapElement_lexicalMessageMap) ;
    //-------- @assignmentInstructionForGeneration
    objectArray_9569->mAttribute_mMessageIsUsed = GALGAS_bool (true) ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalStringNotMatchAST_checkLexicalExpression (void) {
  enterCategoryMethod_checkLexicalExpression (kTypeDescriptor_GALGAS_lexicalStringNotMatchAST.mSlotID,
                                              categoryMethod_lexicalStringNotMatchAST_checkLexicalExpression) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalStringNotMatchAST_checkLexicalExpression (defineCategoryMethod_lexicalStringNotMatchAST_checkLexicalExpression, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Abstract category method '@lexicalRoutineOrFunctionFormalInputArgumentAST checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument> gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument ;

//---------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalFunctionCallArgument (const PMSInt32 inClassIndex,
                                                           categoryMethodSignature_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument inMethod) {
  gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

static void freeCategoryMethod_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument (void) {
  gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument (NULL,
                                                                                                            freeCategoryMethod_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument) ;

//---------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalFunctionCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                          GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                          GALGAS_lexicalTypeEnum in_inLexicalRoutineFormalArgumentType,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument f = NULL ;
    if (classIndex < gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument.count ()) {
      f = gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument.count ()) {
           f = gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioLexiqueAnalysisContext, in_inLexicalRoutineFormalArgumentType, inCompiler COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalAttributeInputArgumentAST checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalAttributeInputArgumentAST_checkLexicalFunctionCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                              GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                              GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                              C_Compiler * inCompiler
                                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalAttributeInputArgumentAST * object = (const cPtr_lexicalAttributeInputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalAttributeInputArgumentAST) ;
  //-------- @localVariableDeclarationForGeneration
  GALGAS_lexicalTypeEnum var_attributeLexicalType ;
  //-------- @methodCallInstructionForGeneration
  ioArgument_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (248)).method_searchKey (object->mAttribute_mAttributeName, var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (248)) ;
  //-------- END @methodCallInstructionForGeneration
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_attributeLexicalType.objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @errorInstructionForGeneration
    GALGAS_location location_1 (object->mAttribute_mAttributeName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("type error, attribute type is @").operator_concat (categoryReader_lexicalTypeBaseName (var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (255)) COMMA_SOURCE_FILE_AT_LINE (255)).operator_concat (GALGAS_string (" type, but lexical routine prototype requires @") COMMA_SOURCE_FILE_AT_LINE (256)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (257)) COMMA_SOURCE_FILE_AT_LINE (257)).operator_concat (GALGAS_string (" type") COMMA_SOURCE_FILE_AT_LINE (258)) COMMA_SOURCE_FILE_AT_LINE (254)) ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalAttributeInputArgumentAST_checkLexicalFunctionCallArgument (void) {
  enterCategoryMethod_checkLexicalFunctionCallArgument (kTypeDescriptor_GALGAS_lexicalAttributeInputArgumentAST.mSlotID,
                                                        categoryMethod_lexicalAttributeInputArgumentAST_checkLexicalFunctionCallArgument) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalAttributeInputArgumentAST_checkLexicalFunctionCallArgument (defineCategoryMethod_lexicalAttributeInputArgumentAST_checkLexicalFunctionCallArgument, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalCharacterInputArgumentAST checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalCharacterInputArgumentAST_checkLexicalFunctionCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                              GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                                              GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                              C_Compiler * inCompiler
                                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalCharacterInputArgumentAST * object = (const cPtr_lexicalCharacterInputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalCharacterInputArgumentAST) ;
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_char (SOURCE_FILE_AT_LINE (269)).objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @errorInstructionForGeneration
    GALGAS_location location_1 (object->mAttribute_mCharacter.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("type error, a literal character has @char").operator_concat (GALGAS_string (" type, but lexical routine prototype requires an @") COMMA_SOURCE_FILE_AT_LINE (271)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (272)) COMMA_SOURCE_FILE_AT_LINE (272)).operator_concat (GALGAS_string (" type value") COMMA_SOURCE_FILE_AT_LINE (273)) COMMA_SOURCE_FILE_AT_LINE (270)) ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalCharacterInputArgumentAST_checkLexicalFunctionCallArgument (void) {
  enterCategoryMethod_checkLexicalFunctionCallArgument (kTypeDescriptor_GALGAS_lexicalCharacterInputArgumentAST.mSlotID,
                                                        categoryMethod_lexicalCharacterInputArgumentAST_checkLexicalFunctionCallArgument) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalCharacterInputArgumentAST_checkLexicalFunctionCallArgument (defineCategoryMethod_lexicalCharacterInputArgumentAST_checkLexicalFunctionCallArgument, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalUnsignedInputArgumentAST checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalFunctionCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                             GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                                             GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                             C_Compiler * inCompiler
                                                                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalUnsignedInputArgumentAST * object = (const cPtr_lexicalUnsignedInputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalUnsignedInputArgumentAST) ;
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_uint (SOURCE_FILE_AT_LINE (284)).objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @errorInstructionForGeneration
    GALGAS_location location_1 (object->mAttribute_mUnsigned.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("type error, a literal character has @uint").operator_concat (GALGAS_string (" type, but lexical routine prototype requires an @") COMMA_SOURCE_FILE_AT_LINE (286)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (287)) COMMA_SOURCE_FILE_AT_LINE (287)).operator_concat (GALGAS_string (" type value") COMMA_SOURCE_FILE_AT_LINE (288)) COMMA_SOURCE_FILE_AT_LINE (285)) ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalFunctionCallArgument (void) {
  enterCategoryMethod_checkLexicalFunctionCallArgument (kTypeDescriptor_GALGAS_lexicalUnsignedInputArgumentAST.mSlotID,
                                                        categoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalFunctionCallArgument) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalUnsignedInputArgumentAST_checkLexicalFunctionCallArgument (defineCategoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalFunctionCallArgument, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalCurrentCharacterInputArgumentAST checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalFunctionCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                                     GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                                                     GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                                     C_Compiler * inCompiler
                                                                                                     COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalCurrentCharacterInputArgumentAST * object = (const cPtr_lexicalCurrentCharacterInputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalCurrentCharacterInputArgumentAST) ;
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_char (SOURCE_FILE_AT_LINE (299)).objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @errorInstructionForGeneration
    inCompiler->emitSemanticError (object->mAttribute_mLocation, GALGAS_string ("type error, current character value has @char").operator_concat (GALGAS_string (" type, but lexical routine prototype requires an @") COMMA_SOURCE_FILE_AT_LINE (301)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (302)) COMMA_SOURCE_FILE_AT_LINE (302)).operator_concat (GALGAS_string (" type value") COMMA_SOURCE_FILE_AT_LINE (303)) COMMA_SOURCE_FILE_AT_LINE (300)) ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalFunctionCallArgument (void) {
  enterCategoryMethod_checkLexicalFunctionCallArgument (kTypeDescriptor_GALGAS_lexicalCurrentCharacterInputArgumentAST.mSlotID,
                                                        categoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalFunctionCallArgument) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalFunctionCallArgument (defineCategoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalFunctionCallArgument, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalFunctionInputArgumentAST checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalFunctionInputArgumentAST_checkLexicalFunctionCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                             GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                             GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                             C_Compiler * inCompiler
                                                                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalFunctionInputArgumentAST * object = (const cPtr_lexicalFunctionInputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalFunctionInputArgumentAST) ;
  //-------- @localVariableDeclarationForGeneration
  GALGAS_lexicalFunctionFormalArgumentList var_lexicalFormalTypeList ;
  //-------- @localVariableDeclarationForGeneration
  GALGAS_lexicalTypeEnum var_returnedLexicalFormalType ;
  //-------- @localVariableDeclarationForGeneration
  GALGAS_string var_replacementFunctionName ;
  //-------- @methodCallInstructionForGeneration
  GALGAS_bool joker_13433_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mLexicalFunctionMap (SOURCE_FILE_AT_LINE (317)).method_searchKey (object->mAttribute_mFunctionName, var_lexicalFormalTypeList, var_returnedLexicalFormalType, var_replacementFunctionName, joker_13433_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (317)) ;
  //-------- END @methodCallInstructionForGeneration
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_replacementFunctionName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @warningInstructionForGeneration
    GALGAS_location location_1 (object->mAttribute_mFunctionName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticWarning (location_1, GALGAS_string ("obsolete lexical function, replaced by '").operator_concat (var_replacementFunctionName COMMA_SOURCE_FILE_AT_LINE (326)).operator_concat (GALGAS_string ("'") COMMA_SOURCE_FILE_AT_LINE (326)) COMMA_SOURCE_FILE_AT_LINE (326)) ;
  }
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, var_returnedLexicalFormalType.objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_2) {
    //-------- @errorInstructionForGeneration
    GALGAS_location location_3 (object->mAttribute_mFunctionName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_3, GALGAS_string ("type error, the function returns an @").operator_concat (categoryReader_lexicalTypeBaseName (var_returnedLexicalFormalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (331)) COMMA_SOURCE_FILE_AT_LINE (331)).operator_concat (GALGAS_string (" value, but lexical routine prototype requires an @") COMMA_SOURCE_FILE_AT_LINE (332)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (333)) COMMA_SOURCE_FILE_AT_LINE (333)).operator_concat (GALGAS_string (" value") COMMA_SOURCE_FILE_AT_LINE (334)) COMMA_SOURCE_FILE_AT_LINE (330)) ;
  }
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_4 = GALGAS_bool (kIsNotEqual, var_lexicalFormalTypeList.reader_length (SOURCE_FILE_AT_LINE (337)).objectCompare (object->mAttribute_mFunctionActualArgumentList.reader_length (SOURCE_FILE_AT_LINE (337)))).boolEnum () ;
  if (kBoolTrue == test_4) {
    //-------- @errorInstructionForGeneration
    GALGAS_location location_5 (object->mAttribute_mFunctionName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_5, GALGAS_string ("this lexical function names ").operator_concat (object->mAttribute_mFunctionActualArgumentList.reader_length (SOURCE_FILE_AT_LINE (339)).reader_string (SOURCE_FILE_AT_LINE (339)) COMMA_SOURCE_FILE_AT_LINE (339)).operator_concat (GALGAS_string (" actual argument(s), but the prototype requires ") COMMA_SOURCE_FILE_AT_LINE (340)).operator_concat (var_lexicalFormalTypeList.reader_length (SOURCE_FILE_AT_LINE (341)).reader_string (SOURCE_FILE_AT_LINE (341)) COMMA_SOURCE_FILE_AT_LINE (341)).operator_concat (GALGAS_string (" actual argument(s)") COMMA_SOURCE_FILE_AT_LINE (341)) COMMA_SOURCE_FILE_AT_LINE (338)) ;
  }
  //-------- @foreachInstructionForGeneration
  cEnumerator_lexicalFunctionFormalArgumentList enumerator_14434 (var_lexicalFormalTypeList, kEnumeration_up) ;
  cEnumerator_lexicalFunctionCallActualArgumentListAST enumerator_14465 (object->mAttribute_mFunctionActualArgumentList, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_14434.hasCurrentObject () && enumerator_14465.hasCurrentObject ()) {
    //-------- @methodCallInstructionForGeneration
    callCategoryMethod_checkLexicalFunctionCallArgument ((const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST *) enumerator_14465.current_mLexicalActualInputArgument (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, enumerator_14434.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (345)) ;
    //-------- END @methodCallInstructionForGeneration
    enumerator_14434.gotoNextObject () ;
    enumerator_14465.gotoNextObject () ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalFunctionInputArgumentAST_checkLexicalFunctionCallArgument (void) {
  enterCategoryMethod_checkLexicalFunctionCallArgument (kTypeDescriptor_GALGAS_lexicalFunctionInputArgumentAST.mSlotID,
                                                        categoryMethod_lexicalFunctionInputArgumentAST_checkLexicalFunctionCallArgument) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalFunctionInputArgumentAST_checkLexicalFunctionCallArgument (defineCategoryMethod_lexicalFunctionInputArgumentAST_checkLexicalFunctionCallArgument, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Abstract category method '@lexicalRoutineOrFunctionFormalInputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument> gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument ;

//---------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalRoutineCallArgument (const PMSInt32 inClassIndex,
                                                          categoryMethodSignature_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument inMethod) {
  gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

static void freeCategoryMethod_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument (void) {
  gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument (NULL,
                                                                                                           freeCategoryMethod_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument) ;

//---------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalRoutineCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                         GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                         GALGAS_lexicalTypeEnum in_inLexicalRoutineFormalArgumentType,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument f = NULL ;
    if (classIndex < gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument.count ()) {
      f = gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument.count ()) {
           f = gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioLexiqueAnalysisContext, in_inLexicalRoutineFormalArgumentType, inCompiler COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalAttributeInputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalAttributeInputArgumentAST_checkLexicalRoutineCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                             GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                             GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                             C_Compiler * inCompiler
                                                                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalAttributeInputArgumentAST * object = (const cPtr_lexicalAttributeInputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalAttributeInputArgumentAST) ;
  //-------- @localVariableDeclarationForGeneration
  GALGAS_lexicalTypeEnum var_attributeLexicalType ;
  //-------- @methodCallInstructionForGeneration
  ioArgument_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (369)).method_searchKey (object->mAttribute_mAttributeName, var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (369)) ;
  //-------- END @methodCallInstructionForGeneration
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_attributeLexicalType.objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @errorInstructionForGeneration
    GALGAS_location location_1 (object->mAttribute_mAttributeName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("type error, attribute type is @").operator_concat (categoryReader_lexicalTypeBaseName (var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (376)) COMMA_SOURCE_FILE_AT_LINE (376)).operator_concat (GALGAS_string (" type, but lexical routine prototype requires @") COMMA_SOURCE_FILE_AT_LINE (377)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (378)) COMMA_SOURCE_FILE_AT_LINE (378)).operator_concat (GALGAS_string (" type") COMMA_SOURCE_FILE_AT_LINE (379)) COMMA_SOURCE_FILE_AT_LINE (375)) ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalAttributeInputArgumentAST_checkLexicalRoutineCallArgument (void) {
  enterCategoryMethod_checkLexicalRoutineCallArgument (kTypeDescriptor_GALGAS_lexicalAttributeInputArgumentAST.mSlotID,
                                                       categoryMethod_lexicalAttributeInputArgumentAST_checkLexicalRoutineCallArgument) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalAttributeInputArgumentAST_checkLexicalRoutineCallArgument (defineCategoryMethod_lexicalAttributeInputArgumentAST_checkLexicalRoutineCallArgument, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalCharacterInputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalCharacterInputArgumentAST_checkLexicalRoutineCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                             GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                                             GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                             C_Compiler * inCompiler
                                                                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalCharacterInputArgumentAST * object = (const cPtr_lexicalCharacterInputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalCharacterInputArgumentAST) ;
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_char (SOURCE_FILE_AT_LINE (390)).objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @errorInstructionForGeneration
    GALGAS_location location_1 (object->mAttribute_mCharacter.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("type error, a literal character has @char").operator_concat (GALGAS_string (" type, but lexical routine prototype requires an @") COMMA_SOURCE_FILE_AT_LINE (392)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (393)) COMMA_SOURCE_FILE_AT_LINE (393)).operator_concat (GALGAS_string (" type value") COMMA_SOURCE_FILE_AT_LINE (394)) COMMA_SOURCE_FILE_AT_LINE (391)) ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalCharacterInputArgumentAST_checkLexicalRoutineCallArgument (void) {
  enterCategoryMethod_checkLexicalRoutineCallArgument (kTypeDescriptor_GALGAS_lexicalCharacterInputArgumentAST.mSlotID,
                                                       categoryMethod_lexicalCharacterInputArgumentAST_checkLexicalRoutineCallArgument) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalCharacterInputArgumentAST_checkLexicalRoutineCallArgument (defineCategoryMethod_lexicalCharacterInputArgumentAST_checkLexicalRoutineCallArgument, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalUnsignedInputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalRoutineCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                            GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                                            GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                            C_Compiler * inCompiler
                                                                                            COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalUnsignedInputArgumentAST * object = (const cPtr_lexicalUnsignedInputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalUnsignedInputArgumentAST) ;
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_uint (SOURCE_FILE_AT_LINE (405)).objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @errorInstructionForGeneration
    GALGAS_location location_1 (object->mAttribute_mUnsigned.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("type error, a literal unsigned value has @uint").operator_concat (GALGAS_string (" type, but lexical routine prototype requires an @") COMMA_SOURCE_FILE_AT_LINE (407)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (408)) COMMA_SOURCE_FILE_AT_LINE (408)).operator_concat (GALGAS_string (" type value") COMMA_SOURCE_FILE_AT_LINE (409)) COMMA_SOURCE_FILE_AT_LINE (406)) ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalRoutineCallArgument (void) {
  enterCategoryMethod_checkLexicalRoutineCallArgument (kTypeDescriptor_GALGAS_lexicalUnsignedInputArgumentAST.mSlotID,
                                                       categoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalRoutineCallArgument) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalUnsignedInputArgumentAST_checkLexicalRoutineCallArgument (defineCategoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalRoutineCallArgument, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalCurrentCharacterInputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalRoutineCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                                    GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                                                    GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                                    C_Compiler * inCompiler
                                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalCurrentCharacterInputArgumentAST * object = (const cPtr_lexicalCurrentCharacterInputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalCurrentCharacterInputArgumentAST) ;
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_char (SOURCE_FILE_AT_LINE (420)).objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @errorInstructionForGeneration
    inCompiler->emitSemanticError (object->mAttribute_mLocation, GALGAS_string ("type error, current character value has @char").operator_concat (GALGAS_string (" type, but lexical routine prototype requires an @") COMMA_SOURCE_FILE_AT_LINE (422)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (423)) COMMA_SOURCE_FILE_AT_LINE (423)).operator_concat (GALGAS_string (" type value") COMMA_SOURCE_FILE_AT_LINE (424)) COMMA_SOURCE_FILE_AT_LINE (421)) ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalRoutineCallArgument (void) {
  enterCategoryMethod_checkLexicalRoutineCallArgument (kTypeDescriptor_GALGAS_lexicalCurrentCharacterInputArgumentAST.mSlotID,
                                                       categoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalRoutineCallArgument) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalRoutineCallArgument (defineCategoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalRoutineCallArgument, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalFunctionInputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalFunctionInputArgumentAST_checkLexicalRoutineCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                            GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                            GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                            C_Compiler * inCompiler
                                                                                            COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalFunctionInputArgumentAST * object = (const cPtr_lexicalFunctionInputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalFunctionInputArgumentAST) ;
  //-------- @localVariableDeclarationForGeneration
  GALGAS_lexicalFunctionFormalArgumentList var_lexicalFormalTypeList ;
  //-------- @localVariableDeclarationForGeneration
  GALGAS_lexicalTypeEnum var_returnedLexicalFormalType ;
  //-------- @localVariableDeclarationForGeneration
  GALGAS_string var_replacementFunctionName ;
  //-------- @methodCallInstructionForGeneration
  GALGAS_bool joker_18357_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mLexicalFunctionMap (SOURCE_FILE_AT_LINE (438)).method_searchKey (object->mAttribute_mFunctionName, var_lexicalFormalTypeList, var_returnedLexicalFormalType, var_replacementFunctionName, joker_18357_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (438)) ;
  //-------- END @methodCallInstructionForGeneration
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_replacementFunctionName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @warningInstructionForGeneration
    GALGAS_location location_1 (object->mAttribute_mFunctionName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticWarning (location_1, GALGAS_string ("obsolete lexical function, replaced by '").operator_concat (var_replacementFunctionName COMMA_SOURCE_FILE_AT_LINE (447)).operator_concat (GALGAS_string ("'") COMMA_SOURCE_FILE_AT_LINE (447)) COMMA_SOURCE_FILE_AT_LINE (447)) ;
  }
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, var_returnedLexicalFormalType.objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_2) {
    //-------- @errorInstructionForGeneration
    GALGAS_location location_3 (object->mAttribute_mFunctionName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_3, GALGAS_string ("type error, the function returns an @").operator_concat (categoryReader_lexicalTypeBaseName (var_returnedLexicalFormalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (452)) COMMA_SOURCE_FILE_AT_LINE (452)).operator_concat (GALGAS_string (" value, but lexical routine prototype requires an @") COMMA_SOURCE_FILE_AT_LINE (453)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (454)) COMMA_SOURCE_FILE_AT_LINE (454)).operator_concat (GALGAS_string (" value") COMMA_SOURCE_FILE_AT_LINE (455)) COMMA_SOURCE_FILE_AT_LINE (451)) ;
  }
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_4 = GALGAS_bool (kIsNotEqual, var_lexicalFormalTypeList.reader_length (SOURCE_FILE_AT_LINE (458)).objectCompare (object->mAttribute_mFunctionActualArgumentList.reader_length (SOURCE_FILE_AT_LINE (458)))).boolEnum () ;
  if (kBoolTrue == test_4) {
    //-------- @errorInstructionForGeneration
    GALGAS_location location_5 (object->mAttribute_mFunctionName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_5, GALGAS_string ("this lexical function names ").operator_concat (object->mAttribute_mFunctionActualArgumentList.reader_length (SOURCE_FILE_AT_LINE (460)).reader_string (SOURCE_FILE_AT_LINE (460)) COMMA_SOURCE_FILE_AT_LINE (460)).operator_concat (GALGAS_string (" actual argument(s), but the prototype requires ") COMMA_SOURCE_FILE_AT_LINE (461)).operator_concat (var_lexicalFormalTypeList.reader_length (SOURCE_FILE_AT_LINE (462)).reader_string (SOURCE_FILE_AT_LINE (462)) COMMA_SOURCE_FILE_AT_LINE (462)).operator_concat (GALGAS_string (" actual argument(s)") COMMA_SOURCE_FILE_AT_LINE (462)) COMMA_SOURCE_FILE_AT_LINE (459)) ;
  }
  //-------- @foreachInstructionForGeneration
  cEnumerator_lexicalFunctionFormalArgumentList enumerator_19358 (var_lexicalFormalTypeList, kEnumeration_up) ;
  cEnumerator_lexicalFunctionCallActualArgumentListAST enumerator_19389 (object->mAttribute_mFunctionActualArgumentList, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_19358.hasCurrentObject () && enumerator_19389.hasCurrentObject ()) {
    //-------- @methodCallInstructionForGeneration
    callCategoryMethod_checkLexicalFunctionCallArgument ((const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST *) enumerator_19389.current_mLexicalActualInputArgument (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, enumerator_19358.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (466)) ;
    //-------- END @methodCallInstructionForGeneration
    enumerator_19358.gotoNextObject () ;
    enumerator_19389.gotoNextObject () ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalFunctionInputArgumentAST_checkLexicalRoutineCallArgument (void) {
  enterCategoryMethod_checkLexicalRoutineCallArgument (kTypeDescriptor_GALGAS_lexicalFunctionInputArgumentAST.mSlotID,
                                                       categoryMethod_lexicalFunctionInputArgumentAST_checkLexicalRoutineCallArgument) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalFunctionInputArgumentAST_checkLexicalRoutineCallArgument (defineCategoryMethod_lexicalFunctionInputArgumentAST_checkLexicalRoutineCallArgument, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Abstract category method '@abstractLexicalRoutineActualArgumentAST checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument> gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument ;

//---------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalRoutineCallArgument (const PMSInt32 inClassIndex,
                                                          categoryMethodSignature_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument inMethod) {
  gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

static void freeCategoryMethod_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument (void) {
  gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument (NULL,
                                                                                                    freeCategoryMethod_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument) ;

//---------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalRoutineCallArgument (const cPtr_abstractLexicalRoutineActualArgumentAST * inObject,
                                                         GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                         GALGAS_lexicalArgumentModeAST in_inLexicalRoutineFormalArgumentMode,
                                                         GALGAS_lexicalTypeEnum in_inLexicalRoutineFormalArgumentType,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_abstractLexicalRoutineActualArgumentAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument f = NULL ;
    if (classIndex < gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument.count ()) {
      f = gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument.count ()) {
           f = gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioLexiqueAnalysisContext, in_inLexicalRoutineFormalArgumentMode, in_inLexicalRoutineFormalArgumentType, inCompiler COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalAttributeInputOutputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalAttributeInputOutputArgumentAST_checkLexicalRoutineCallArgument (const cPtr_abstractLexicalRoutineActualArgumentAST * inObject,
                                                                                                   GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                                   GALGAS_lexicalArgumentModeAST inArgument_inLexicalRoutineFormalArgumentMode,
                                                                                                   GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                                   C_Compiler * inCompiler
                                                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalAttributeInputOutputArgumentAST * object = (const cPtr_lexicalAttributeInputOutputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalAttributeInputOutputArgumentAST) ;
  //-------- @localVariableDeclarationForGeneration
  GALGAS_lexicalTypeEnum var_attributeLexicalType ;
  //-------- @methodCallInstructionForGeneration
  ioArgument_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (492)).method_searchKey (object->mAttribute_mAttributeName, var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (492)) ;
  //-------- END @methodCallInstructionForGeneration
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_attributeLexicalType.objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @errorInstructionForGeneration
    GALGAS_location location_1 (object->mAttribute_mAttributeName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("type error, attribute type is @").operator_concat (categoryReader_lexicalTypeBaseName (var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (499)) COMMA_SOURCE_FILE_AT_LINE (499)).operator_concat (GALGAS_string (" type, but lexical routine prototype requires @") COMMA_SOURCE_FILE_AT_LINE (500)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (501)) COMMA_SOURCE_FILE_AT_LINE (501)).operator_concat (GALGAS_string (" type") COMMA_SOURCE_FILE_AT_LINE (502)) COMMA_SOURCE_FILE_AT_LINE (498)) ;
  }
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, inArgument_inLexicalRoutineFormalArgumentMode.objectCompare (GALGAS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (SOURCE_FILE_AT_LINE (505)))).boolEnum () ;
  if (kBoolTrue == test_2) {
    //-------- @errorInstructionForGeneration
    inCompiler->emitSemanticError (object->mAttribute_mActualPassingModeLocation, GALGAS_string ("the output mode (!) is required here, not an output/input mode") COMMA_SOURCE_FILE_AT_LINE (506)) ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalAttributeInputOutputArgumentAST_checkLexicalRoutineCallArgument (void) {
  enterCategoryMethod_checkLexicalRoutineCallArgument (kTypeDescriptor_GALGAS_lexicalAttributeInputOutputArgumentAST.mSlotID,
                                                       categoryMethod_lexicalAttributeInputOutputArgumentAST_checkLexicalRoutineCallArgument) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalAttributeInputOutputArgumentAST_checkLexicalRoutineCallArgument (defineCategoryMethod_lexicalAttributeInputOutputArgumentAST_checkLexicalRoutineCallArgument, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalFormalInputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalFormalInputArgumentAST_checkLexicalRoutineCallArgument (const cPtr_abstractLexicalRoutineActualArgumentAST * inObject,
                                                                                          GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                          GALGAS_lexicalArgumentModeAST inArgument_inLexicalRoutineFormalArgumentMode,
                                                                                          GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalFormalInputArgumentAST * object = (const cPtr_lexicalFormalInputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalFormalInputArgumentAST) ;
  //-------- @methodCallInstructionForGeneration
  callCategoryMethod_checkLexicalRoutineCallArgument ((const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST *) object->mAttribute_mRoutineOrFunctionFormalInputArgument.ptr (), ioArgument_ioLexiqueAnalysisContext, inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (518)) ;
  //-------- END @methodCallInstructionForGeneration
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, inArgument_inLexicalRoutineFormalArgumentMode.objectCompare (GALGAS_lexicalArgumentModeAST::constructor_lexicalInputMode (SOURCE_FILE_AT_LINE (523)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @errorInstructionForGeneration
    inCompiler->emitSemanticError (object->mAttribute_mActualPassingModeLocation, GALGAS_string ("the output/input mode (!\?) is required here, not an input mode") COMMA_SOURCE_FILE_AT_LINE (524)) ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalFormalInputArgumentAST_checkLexicalRoutineCallArgument (void) {
  enterCategoryMethod_checkLexicalRoutineCallArgument (kTypeDescriptor_GALGAS_lexicalFormalInputArgumentAST.mSlotID,
                                                       categoryMethod_lexicalFormalInputArgumentAST_checkLexicalRoutineCallArgument) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalFormalInputArgumentAST_checkLexicalRoutineCallArgument (defineCategoryMethod_lexicalFormalInputArgumentAST_checkLexicalRoutineCallArgument, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
// Abstract category method '@lexicalInstructionAST checkLexicalInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_lexicalInstructionAST_checkLexicalInstruction> gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction ;

//---------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalInstruction (const PMSInt32 inClassIndex,
                                                  categoryMethodSignature_lexicalInstructionAST_checkLexicalInstruction inMethod) {
  gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

static void freeCategoryMethod_lexicalInstructionAST_checkLexicalInstruction (void) {
  gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalInstructionAST_checkLexicalInstruction (NULL,
                                                                          freeCategoryMethod_lexicalInstructionAST_checkLexicalInstruction) ;

//---------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                 GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                 GALGAS_lexicalTagMap & io_ioTagMap,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_lexicalInstructionAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_lexicalInstructionAST_checkLexicalInstruction f = NULL ;
    if (classIndex < gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction.count ()) {
      f = gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction.count ()) {
           f = gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioLexiqueAnalysisContext, io_ioTagMap, inCompiler COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalStructuredSendInstructionAST checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalStructuredSendInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                                        GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                        GALGAS_lexicalTagMap & /* ioArgument_ioTagMap */,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalStructuredSendInstructionAST * object = (const cPtr_lexicalStructuredSendInstructionAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalStructuredSendInstructionAST) ;
  //-------- @foreachInstructionForGeneration
  cEnumerator_lexicalSendSearchListAST enumerator_22613 (object->mAttribute_mLexicalSendSearchList, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_22613.hasCurrentObject ()) {
    //-------- @readWriteWithInstructionForGeneration
    // index 1: attribute 'mExplicitTokenListMap', type @lexicalExplicitTokenListMap
    // index 2: attribute 'mTokenSortedList', type @tokenSortedlist
    // index 3: attribute 'mShouldBeGenerated', type @bool
    cMapElement_lexicalExplicitTokenListMapMap * objectArray_22625 = (cMapElement_lexicalExplicitTokenListMapMap *) ioArgument_ioLexiqueAnalysisContext.mAttribute_mLexicalTokenListMap.readWriteAccessForWithInstruction_searchKey (inCompiler, enumerator_22613.current_mSearchListName (HERE) COMMA_SOURCE_FILE_AT_LINE (544)) ;
    if (NULL != objectArray_22625) {
        macroValidSharedObject (objectArray_22625, cMapElement_lexicalExplicitTokenListMapMap) ;
      //-------- @assignmentInstructionForGeneration
      objectArray_22625->mAttribute_mShouldBeGenerated = GALGAS_bool (true) ;
    }
    //-------- @methodCallInstructionForGeneration
    GALGAS_lexicalTypeEnum joker_22833_0 ; // Joker input parameter
    ioArgument_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (547)).method_searchKey (enumerator_22613.current_mAttributeName (HERE), joker_22833_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (547)) ;
    //-------- END @methodCallInstructionForGeneration
    enumerator_22613.gotoNextObject () ;
  }
  //-------- @methodCallInstructionForGeneration
  callCategoryMethod_checkLexicalDefaultAction ((const cPtr_lexicalSendDefaultActionAST *) object->mAttribute_mLexicalSendDefaultAction.ptr (), ioArgument_ioLexiqueAnalysisContext, inCompiler COMMA_SOURCE_FILE_AT_LINE (549)) ;
  //-------- END @methodCallInstructionForGeneration
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalStructuredSendInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalStructuredSendInstructionAST.mSlotID,
                                               categoryMethod_lexicalStructuredSendInstructionAST_checkLexicalInstruction) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalStructuredSendInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalStructuredSendInstructionAST_checkLexicalInstruction, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalSimpleSendInstructionAST checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalSimpleSendInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                                    GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                    GALGAS_lexicalTagMap & /* ioArgument_ioTagMap */,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalSimpleSendInstructionAST * object = (const cPtr_lexicalSimpleSendInstructionAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalSimpleSendInstructionAST) ;
  //-------- @methodCallInstructionForGeneration
  GALGAS_lexicalSentValueList joker_23264_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mTerminalMap (SOURCE_FILE_AT_LINE (558)).method_searchKey (object->mAttribute_mSentTerminal, joker_23264_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (558)) ;
  //-------- END @methodCallInstructionForGeneration
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalSimpleSendInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalSimpleSendInstructionAST.mSlotID,
                                               categoryMethod_lexicalSimpleSendInstructionAST_checkLexicalInstruction) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalSimpleSendInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalSimpleSendInstructionAST_checkLexicalInstruction, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalRepeatInstructionAST checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalRepeatInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                                GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                GALGAS_lexicalTagMap & ioArgument_ioTagMap,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalRepeatInstructionAST * object = (const cPtr_lexicalRepeatInstructionAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalRepeatInstructionAST) ;
  //-------- @foreachInstructionForGeneration
  cEnumerator_lexicalWhileBranchListAST enumerator_23549 (object->mAttribute_mLexicalWhileBranchList, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_23549.hasCurrentObject ()) {
    //-------- @methodCallInstructionForGeneration
    callCategoryMethod_checkLexicalExpression ((const cPtr_lexicalExpressionAST *) enumerator_23549.current_mWhileExpression (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, inCompiler COMMA_SOURCE_FILE_AT_LINE (568)) ;
    //-------- END @methodCallInstructionForGeneration
    //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
    GALGAS_lexicalTagMap var_tagMap = GALGAS_lexicalTagMap::constructor_mapWithMapToOverride (ioArgument_ioTagMap COMMA_SOURCE_FILE_AT_LINE (569)) ;
    //-------- @foreachInstructionForGeneration
    cEnumerator_lexicalInstructionListAST enumerator_23722 (enumerator_23549.current_mWhileInstructionList (HERE), kEnumeration_up) ;
    //--- simple foreach instruction
    while (enumerator_23722.hasCurrentObject ()) {
      //-------- @methodCallInstructionForGeneration
      callCategoryMethod_checkLexicalInstruction ((const cPtr_lexicalInstructionAST *) enumerator_23722.current_mInstruction (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, var_tagMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (571)) ;
      //-------- END @methodCallInstructionForGeneration
      enumerator_23722.gotoNextObject () ;
    }
    enumerator_23549.gotoNextObject () ;
  }
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_lexicalTagMap var_tagMap = GALGAS_lexicalTagMap::constructor_mapWithMapToOverride (ioArgument_ioTagMap COMMA_SOURCE_FILE_AT_LINE (574)) ;
  //-------- @foreachInstructionForGeneration
  cEnumerator_lexicalInstructionListAST enumerator_23936 (object->mAttribute_mRepeatedInstructionList, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_23936.hasCurrentObject ()) {
    //-------- @methodCallInstructionForGeneration
    callCategoryMethod_checkLexicalInstruction ((const cPtr_lexicalInstructionAST *) enumerator_23936.current_mInstruction (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, var_tagMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (576)) ;
    //-------- END @methodCallInstructionForGeneration
    enumerator_23936.gotoNextObject () ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalRepeatInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalRepeatInstructionAST.mSlotID,
                                               categoryMethod_lexicalRepeatInstructionAST_checkLexicalInstruction) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalRepeatInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalRepeatInstructionAST_checkLexicalInstruction, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalSelectInstructionAST checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalSelectInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                                GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                GALGAS_lexicalTagMap & ioArgument_ioTagMap,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalSelectInstructionAST * object = (const cPtr_lexicalSelectInstructionAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalSelectInstructionAST) ;
  //-------- @foreachInstructionForGeneration
  cEnumerator_lexicalSelectBranchListAST enumerator_24317 (object->mAttribute_mLexicalSelectBranchList, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_24317.hasCurrentObject ()) {
    //-------- @methodCallInstructionForGeneration
    callCategoryMethod_checkLexicalExpression ((const cPtr_lexicalExpressionAST *) enumerator_24317.current_mSelectExpression (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, inCompiler COMMA_SOURCE_FILE_AT_LINE (587)) ;
    //-------- END @methodCallInstructionForGeneration
    //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
    GALGAS_lexicalTagMap var_tagMap = GALGAS_lexicalTagMap::constructor_mapWithMapToOverride (ioArgument_ioTagMap COMMA_SOURCE_FILE_AT_LINE (588)) ;
    //-------- @foreachInstructionForGeneration
    cEnumerator_lexicalInstructionListAST enumerator_24492 (enumerator_24317.current_mSelectInstructionList (HERE), kEnumeration_up) ;
    //--- simple foreach instruction
    while (enumerator_24492.hasCurrentObject ()) {
      //-------- @methodCallInstructionForGeneration
      callCategoryMethod_checkLexicalInstruction ((const cPtr_lexicalInstructionAST *) enumerator_24492.current_mInstruction (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, var_tagMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (590)) ;
      //-------- END @methodCallInstructionForGeneration
      enumerator_24492.gotoNextObject () ;
    }
    enumerator_24317.gotoNextObject () ;
  }
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_lexicalTagMap var_tagMap = GALGAS_lexicalTagMap::constructor_mapWithMapToOverride (ioArgument_ioTagMap COMMA_SOURCE_FILE_AT_LINE (593)) ;
  //-------- @foreachInstructionForGeneration
  cEnumerator_lexicalInstructionListAST enumerator_24705 (object->mAttribute_mDefaultInstructionList, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_24705.hasCurrentObject ()) {
    //-------- @methodCallInstructionForGeneration
    callCategoryMethod_checkLexicalInstruction ((const cPtr_lexicalInstructionAST *) enumerator_24705.current_mInstruction (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, var_tagMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (595)) ;
    //-------- END @methodCallInstructionForGeneration
    enumerator_24705.gotoNextObject () ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalSelectInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalSelectInstructionAST.mSlotID,
                                               categoryMethod_lexicalSelectInstructionAST_checkLexicalInstruction) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalSelectInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalSelectInstructionAST_checkLexicalInstruction, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalRoutineInstructionAST checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalRoutineInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                                 GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                 GALGAS_lexicalTagMap & /* ioArgument_ioTagMap */,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalRoutineInstructionAST * object = (const cPtr_lexicalRoutineInstructionAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalRoutineInstructionAST) ;
  //-------- @localVariableDeclarationForGeneration
  GALGAS_lexicalRoutineFormalArgumentList var_lexicalRoutineFormalArgumentList ;
  //-------- @localVariableDeclarationForGeneration
  GALGAS_stringlist var_routineErrorMessageList ;
  //-------- @methodCallInstructionForGeneration
  GALGAS_bool joker_25324_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mLexicalRoutineMessageMap (SOURCE_FILE_AT_LINE (607)).method_searchKey (object->mAttribute_mRoutineName, var_lexicalRoutineFormalArgumentList, var_routineErrorMessageList, joker_25324_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (607)) ;
  //-------- END @methodCallInstructionForGeneration
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_lexicalRoutineFormalArgumentList.reader_length (SOURCE_FILE_AT_LINE (614)).objectCompare (object->mAttribute_mActualArgumentList.reader_length (SOURCE_FILE_AT_LINE (614)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @errorInstructionForGeneration
    GALGAS_location location_1 (object->mAttribute_mRoutineName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("this lexical routine call names ").operator_concat (object->mAttribute_mActualArgumentList.reader_length (SOURCE_FILE_AT_LINE (616)).reader_string (SOURCE_FILE_AT_LINE (616)) COMMA_SOURCE_FILE_AT_LINE (616)).operator_concat (GALGAS_string (" actual argument(s), but the lexical routine prototype requires ") COMMA_SOURCE_FILE_AT_LINE (617)).operator_concat (var_lexicalRoutineFormalArgumentList.reader_length (SOURCE_FILE_AT_LINE (618)).reader_string (SOURCE_FILE_AT_LINE (618)) COMMA_SOURCE_FILE_AT_LINE (618)).operator_concat (GALGAS_string (" actual argument(s)") COMMA_SOURCE_FILE_AT_LINE (618)) COMMA_SOURCE_FILE_AT_LINE (615)) ;
  }
  //-------- @foreachInstructionForGeneration
  cEnumerator_lexicalRoutineFormalArgumentList enumerator_25814 (var_lexicalRoutineFormalArgumentList, kEnumeration_up) ;
  cEnumerator_lexicalRoutineCallActualArgumentListAST enumerator_25837 (object->mAttribute_mActualArgumentList, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_25814.hasCurrentObject () && enumerator_25837.hasCurrentObject ()) {
    //-------- @methodCallInstructionForGeneration
    callCategoryMethod_checkLexicalRoutineCallArgument ((const cPtr_abstractLexicalRoutineActualArgumentAST *) enumerator_25837.current_mLexicalRoutineActualArgument (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, enumerator_25814.current_mLexicalFormalArgumentMode (HERE), enumerator_25814.current_mLexicalFormalArgumentType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (622)) ;
    //-------- END @methodCallInstructionForGeneration
    enumerator_25814.gotoNextObject () ;
    enumerator_25837.gotoNextObject () ;
  }
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, var_routineErrorMessageList.reader_length (SOURCE_FILE_AT_LINE (629)).objectCompare (object->mAttribute_mErrorMessageList.reader_length (SOURCE_FILE_AT_LINE (629)))).boolEnum () ;
  if (kBoolTrue == test_2) {
    //-------- @errorInstructionForGeneration
    GALGAS_location location_3 (object->mAttribute_mRoutineName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_3, GALGAS_string ("this lexical routine call names ").operator_concat (object->mAttribute_mErrorMessageList.reader_length (SOURCE_FILE_AT_LINE (631)).reader_string (SOURCE_FILE_AT_LINE (631)) COMMA_SOURCE_FILE_AT_LINE (631)).operator_concat (GALGAS_string (" error message(s), but the lexical routine prototype requires ") COMMA_SOURCE_FILE_AT_LINE (632)).operator_concat (var_routineErrorMessageList.reader_length (SOURCE_FILE_AT_LINE (633)).reader_string (SOURCE_FILE_AT_LINE (633)) COMMA_SOURCE_FILE_AT_LINE (633)).operator_concat (GALGAS_string (" error message(s)") COMMA_SOURCE_FILE_AT_LINE (633)) COMMA_SOURCE_FILE_AT_LINE (630)) ;
  }
  //-------- @foreachInstructionForGeneration
  cEnumerator_lstringlist enumerator_26466 (object->mAttribute_mErrorMessageList, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_26466.hasCurrentObject ()) {
    //-------- @readWriteWithInstructionForGeneration
    // index 1: attribute 'mLexicalMessage', type @lstring
    // index 2: attribute 'mMessageIsUsed', type @bool
    cMapElement_lexicalMessageMap * objectArray_26478 = (cMapElement_lexicalMessageMap *) ioArgument_ioLexiqueAnalysisContext.mAttribute_mLexicalMessageMap.readWriteAccessForWithInstruction_searchKey (inCompiler, enumerator_26466.current_mValue (HERE) COMMA_SOURCE_FILE_AT_LINE (637)) ;
    if (NULL != objectArray_26478) {
        macroValidSharedObject (objectArray_26478, cMapElement_lexicalMessageMap) ;
      //-------- @assignmentInstructionForGeneration
      objectArray_26478->mAttribute_mMessageIsUsed = GALGAS_bool (true) ;
    }
    enumerator_26466.gotoNextObject () ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalRoutineInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalRoutineInstructionAST.mSlotID,
                                               categoryMethod_lexicalRoutineInstructionAST_checkLexicalInstruction) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalRoutineInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalRoutineInstructionAST_checkLexicalInstruction, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalLogInstructionAST checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalLogInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * /* inObject */,
                                                                             GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                             GALGAS_lexicalTagMap & /* ioArgument_ioTagMap */,
                                                                             C_Compiler * /* inCompiler */
                                                                             COMMA_UNUSED_LOCATION_ARGS) {
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalLogInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalLogInstructionAST.mSlotID,
                                               categoryMethod_lexicalLogInstructionAST_checkLexicalInstruction) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalLogInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalLogInstructionAST_checkLexicalInstruction, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalRewindInstructionAST checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalRewindInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                                GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                GALGAS_lexicalTagMap & ioArgument_ioTagMap,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalRewindInstructionAST * object = (const cPtr_lexicalRewindInstructionAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalRewindInstructionAST) ;
  //-------- @methodCallInstructionForGeneration
  ioArgument_ioTagMap.method_searchKey (object->mAttribute_mLexicalTagName, inCompiler COMMA_SOURCE_FILE_AT_LINE (657)) ;
  //-------- END @methodCallInstructionForGeneration
  //-------- @methodCallInstructionForGeneration
  GALGAS_lexicalSentValueList joker_27239_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mTerminalMap (SOURCE_FILE_AT_LINE (658)).method_searchKey (object->mAttribute_mTerminalName, joker_27239_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (658)) ;
  //-------- END @methodCallInstructionForGeneration
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalRewindInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalRewindInstructionAST.mSlotID,
                                               categoryMethod_lexicalRewindInstructionAST_checkLexicalInstruction) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalRewindInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalRewindInstructionAST_checkLexicalInstruction, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalDropInstructionAST checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalDropInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                              GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                              GALGAS_lexicalTagMap & /* ioArgument_ioTagMap */,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalDropInstructionAST * object = (const cPtr_lexicalDropInstructionAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalDropInstructionAST) ;
  //-------- @methodCallInstructionForGeneration
  GALGAS_lexicalSentValueList joker_27564_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mTerminalMap (SOURCE_FILE_AT_LINE (667)).method_searchKey (object->mAttribute_mTerminalName, joker_27564_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (667)) ;
  //-------- END @methodCallInstructionForGeneration
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalDropInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalDropInstructionAST.mSlotID,
                                               categoryMethod_lexicalDropInstructionAST_checkLexicalInstruction) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalDropInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalDropInstructionAST_checkLexicalInstruction, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalTagInstructionAST checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalTagInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                             GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                             GALGAS_lexicalTagMap & ioArgument_ioTagMap,
                                                                             C_Compiler * inCompiler
                                                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalTagInstructionAST * object = (const cPtr_lexicalTagInstructionAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalTagInstructionAST) ;
  { //-------- @modifierCallInstructionForGeneration
  ioArgument_ioTagMap.modifier_insertKey (object->mAttribute_mLexicalTagName, inCompiler COMMA_SOURCE_FILE_AT_LINE (676)) ;
  } //-------- END @typeMethodInstructionForGeneration
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalTagInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalTagInstructionAST.mSlotID,
                                               categoryMethod_lexicalTagInstructionAST_checkLexicalInstruction) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalTagInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalTagInstructionAST_checkLexicalInstruction, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalErrorInstructionAST checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalErrorInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                               GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                               GALGAS_lexicalTagMap & /* ioArgument_ioTagMap */,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalErrorInstructionAST * object = (const cPtr_lexicalErrorInstructionAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalErrorInstructionAST) ;
  //-------- @readWriteWithInstructionForGeneration
  // index 1: attribute 'mLexicalMessage', type @lstring
  // index 2: attribute 'mMessageIsUsed', type @bool
  cMapElement_lexicalMessageMap * objectArray_28121 = (cMapElement_lexicalMessageMap *) ioArgument_ioLexiqueAnalysisContext.mAttribute_mLexicalMessageMap.readWriteAccessForWithInstruction_searchKey (inCompiler, object->mAttribute_mErrorMessageName COMMA_SOURCE_FILE_AT_LINE (685)) ;
  if (NULL != objectArray_28121) {
      macroValidSharedObject (objectArray_28121, cMapElement_lexicalMessageMap) ;
    //-------- @assignmentInstructionForGeneration
    objectArray_28121->mAttribute_mMessageIsUsed = GALGAS_bool (true) ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalErrorInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalErrorInstructionAST.mSlotID,
                                               categoryMethod_lexicalErrorInstructionAST_checkLexicalInstruction) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalErrorInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalErrorInstructionAST_checkLexicalInstruction, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@lexicalWarningInstructionAST checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalWarningInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                                 GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                 GALGAS_lexicalTagMap & /* ioArgument_ioTagMap */,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalWarningInstructionAST * object = (const cPtr_lexicalWarningInstructionAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalWarningInstructionAST) ;
  //-------- @readWriteWithInstructionForGeneration
  // index 1: attribute 'mLexicalMessage', type @lstring
  // index 2: attribute 'mMessageIsUsed', type @bool
  cMapElement_lexicalMessageMap * objectArray_28502 = (cMapElement_lexicalMessageMap *) ioArgument_ioLexiqueAnalysisContext.mAttribute_mLexicalMessageMap.readWriteAccessForWithInstruction_searchKey (inCompiler, object->mAttribute_mWarningMessageName COMMA_SOURCE_FILE_AT_LINE (696)) ;
  if (NULL != objectArray_28502) {
      macroValidSharedObject (objectArray_28502, cMapElement_lexicalMessageMap) ;
    //-------- @assignmentInstructionForGeneration
    objectArray_28502->mAttribute_mMessageIsUsed = GALGAS_bool (true) ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalWarningInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalWarningInstructionAST.mSlotID,
                                               categoryMethod_lexicalWarningInstructionAST_checkLexicalInstruction) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalWarningInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalWarningInstructionAST_checkLexicalInstruction, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//    Abstract category method '@abstractLexicalRuleAST checkLexicalRule'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_abstractLexicalRuleAST_checkLexicalRule> gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule ;

//---------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalRule (const PMSInt32 inClassIndex,
                                           categoryMethodSignature_abstractLexicalRuleAST_checkLexicalRule inMethod) {
  gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

static void freeCategoryMethod_abstractLexicalRuleAST_checkLexicalRule (void) {
  gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_abstractLexicalRuleAST_checkLexicalRule (NULL,
                                                                    freeCategoryMethod_abstractLexicalRuleAST_checkLexicalRule) ;

//---------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalRule (const cPtr_abstractLexicalRuleAST * inObject,
                                          GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_abstractLexicalRuleAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_abstractLexicalRuleAST_checkLexicalRule f = NULL ;
    if (classIndex < gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule.count ()) {
      f = gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule.count ()) {
           f = gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioLexiqueAnalysisContext, inCompiler COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Overriding category method '@lexicalImplicitRuleAST checkLexicalRule'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalImplicitRuleAST_checkLexicalRule (const cPtr_abstractLexicalRuleAST * inObject,
                                                                    GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalImplicitRuleAST * object = (const cPtr_lexicalImplicitRuleAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalImplicitRuleAST) ;
  //-------- @methodCallInstructionForGeneration
  GALGAS_lexicalExplicitTokenListMap joker_29250_0 ; // Joker input parameter
  GALGAS_tokenSortedlist joker_29253_0 ; // Joker input parameter
  GALGAS_bool joker_29256_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mLexicalTokenListMap (SOURCE_FILE_AT_LINE (714)).method_searchKey (object->mAttribute_mListName, joker_29250_0, joker_29253_0, joker_29256_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (714)) ;
  //-------- END @methodCallInstructionForGeneration
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalImplicitRuleAST_checkLexicalRule (void) {
  enterCategoryMethod_checkLexicalRule (kTypeDescriptor_GALGAS_lexicalImplicitRuleAST.mSlotID,
                                        categoryMethod_lexicalImplicitRuleAST_checkLexicalRule) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalImplicitRuleAST_checkLexicalRule (defineCategoryMethod_lexicalImplicitRuleAST_checkLexicalRule, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//   Overriding category method '@lexicalExplicitRuleAST checkLexicalRule'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_lexicalExplicitRuleAST_checkLexicalRule (const cPtr_abstractLexicalRuleAST * inObject,
                                                                    GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalExplicitRuleAST * object = (const cPtr_lexicalExplicitRuleAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalExplicitRuleAST) ;
  //-------- @methodCallInstructionForGeneration
  callCategoryMethod_checkLexicalExpression ((const cPtr_lexicalExpressionAST *) object->mAttribute_mLexicalRuleExpression.ptr (), ioArgument_ioLexiqueAnalysisContext, inCompiler COMMA_SOURCE_FILE_AT_LINE (722)) ;
  //-------- END @methodCallInstructionForGeneration
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_lexicalTagMap var_tagMap = GALGAS_lexicalTagMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (723)) ;
  //-------- @foreachInstructionForGeneration
  cEnumerator_lexicalInstructionListAST enumerator_29610 (object->mAttribute_mInstructionList, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_29610.hasCurrentObject ()) {
    //-------- @methodCallInstructionForGeneration
    callCategoryMethod_checkLexicalInstruction ((const cPtr_lexicalInstructionAST *) enumerator_29610.current_mInstruction (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, var_tagMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (725)) ;
    //-------- END @methodCallInstructionForGeneration
    enumerator_29610.gotoNextObject () ;
  }
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalExplicitRuleAST_checkLexicalRule (void) {
  enterCategoryMethod_checkLexicalRule (kTypeDescriptor_GALGAS_lexicalExplicitRuleAST.mSlotID,
                                        categoryMethod_lexicalExplicitRuleAST_checkLexicalRule) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalExplicitRuleAST_checkLexicalRule (defineCategoryMethod_lexicalExplicitRuleAST_checkLexicalRule, NULL) ;

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


