//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'lexiqueCompilation.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 12th, 2009, at 23h24'56"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "lexiqueCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "lexiqueCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "lexiqueLL1grammar.h"

//--- START OF USER ZONE 2

//---------------------------------------------------------------------------*

//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//   Virtual Table for category reader '@lexicalExpression.generateCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryReader__lexicalExpression__generateCode> gDispatchTableForReader__lexicalExpression__generateCode ;

//---------------------------------------------------------------------------*

void
enterCategoryReader__lexicalExpression__generateCode (typeCategoryReader__lexicalExpression__generateCode inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForReader__lexicalExpression__generateCode.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalExpression_defaultReader (C_Compiler &,
                                const cPtr_lexicalExpression *,
                                GGS_lexiqueAnalysisContext  
                                COMMA_UNUSED_LOCATION_ARGS) {
  return GGS_string () ;
}

//---------------------------------------------------------------------------*

typeCategoryReader__lexicalExpression__generateCode
findCategoryReader__lexicalExpression__generateCode (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryReader__lexicalExpression__generateCode result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForReader__lexicalExpression__generateCode.count ()) {
    result = gDispatchTableForReader__lexicalExpression__generateCode (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryReader__lexicalExpression__generateCode (superClassPtr) ;
      gDispatchTableForReader__lexicalExpression__generateCode.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  if (NULL == result) {
    result = category_reader__lexicalExpression_defaultReader ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category reader '@lexicalOrExpression.generateCode'             *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalOrExpression__generateCode (C_Compiler &,
                                const cPtr_lexicalOrExpression * operand_2277,
                                GGS_lexiqueAnalysisContext  /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_2277 != NULL) {
    var_cas_outGeneratedCode = GGS_string ("") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category reader '@lexicalCharacterIntervalMatch.generateCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalCharacterIntervalMatch__generateCode (C_Compiler &,
                                const cPtr_lexicalCharacterIntervalMatch * operand_2548,
                                GGS_lexiqueAnalysisContext  /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_2548 != NULL) {
    var_cas_outGeneratedCode = GGS_string ("") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category reader '@lexicalStringMatch.generateCode'             *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalStringMatch__generateCode (C_Compiler &,
                                const cPtr_lexicalStringMatch * operand_2808,
                                GGS_lexiqueAnalysisContext  /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_2808 != NULL) {
    var_cas_outGeneratedCode = GGS_string ("") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category reader '@lexicalStringNotMatch.generateCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalStringNotMatch__generateCode (C_Compiler &,
                                const cPtr_lexicalStringNotMatch * operand_3071,
                                GGS_lexiqueAnalysisContext  /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_3071 != NULL) {
    var_cas_outGeneratedCode = GGS_string ("") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category reader '@lexicalCharacterMatch.generateCode'            *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalCharacterMatch__generateCode (C_Compiler &,
                                const cPtr_lexicalCharacterMatch * operand_3334,
                                GGS_lexiqueAnalysisContext  /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_3334 != NULL) {
    var_cas_outGeneratedCode = GGS_string ("") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category reader '@lexicalCharacterSetMatch.generateCode'          *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalCharacterSetMatch__generateCode (C_Compiler &,
                                const cPtr_lexicalCharacterSetMatch * operand_3600,
                                GGS_lexiqueAnalysisContext  /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_3600 != NULL) {
    var_cas_outGeneratedCode = GGS_string ("") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category reader '@abstractLexicalRule.generateCode'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryReader__abstractLexicalRule__generateCode> gDispatchTableForReader__abstractLexicalRule__generateCode ;

//---------------------------------------------------------------------------*

void
enterCategoryReader__abstractLexicalRule__generateCode (typeCategoryReader__abstractLexicalRule__generateCode inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForReader__abstractLexicalRule__generateCode.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

static GGS_string
category_reader__abstractLexicalRule_defaultReader (C_Compiler &,
                                const cPtr_abstractLexicalRule *,
                                GGS_lexiqueAnalysisContext  
                                COMMA_UNUSED_LOCATION_ARGS) {
  return GGS_string () ;
}

//---------------------------------------------------------------------------*

typeCategoryReader__abstractLexicalRule__generateCode
findCategoryReader__abstractLexicalRule__generateCode (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryReader__abstractLexicalRule__generateCode result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForReader__abstractLexicalRule__generateCode.count ()) {
    result = gDispatchTableForReader__abstractLexicalRule__generateCode (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryReader__abstractLexicalRule__generateCode (superClassPtr) ;
      gDispatchTableForReader__abstractLexicalRule__generateCode.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  if (NULL == result) {
    result = category_reader__abstractLexicalRule_defaultReader ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category reader '@lexicalImplicitRule.generateCode'             *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalImplicitRule__generateCode (C_Compiler &,
                                const cPtr_lexicalImplicitRule * operand_4238,
                                GGS_lexiqueAnalysisContext  /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_4238 != NULL) {
    var_cas_outGeneratedCode = GGS_string ("1") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category reader '@lexicalExplicitRule.generateCode'             *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalExplicitRule__generateCode (C_Compiler &,
                                const cPtr_lexicalExplicitRule * operand_4500,
                                GGS_lexiqueAnalysisContext  /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_4500 != NULL) {
    var_cas_outGeneratedCode = GGS_string ("2") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of wrapper 'lexiqueGenerationTemplates'           *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_lexiqueGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_lexiqueGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_lexiqueGenerationTemplates = {
  "",
  0,
  gWrapperAllFiles_lexiqueGenerationTemplates_0,
  0,
  gWrapperAllDirectories_lexiqueGenerationTemplates_0
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//    'headerZone2' template of 'lexiqueGenerationTemplates' filewrapper     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_headerZone2 (C_Compiler & inLexique,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_lexicalAttributeMap & var_cas_LEXICAL_ATTRIBUTE_MAP) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_LEXICAL_ATTRIBUTE_MAP.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "#ifndef " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "_0_DEFINED\n"
      "#define " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "_0_DEFINED\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"galgas/GGS_lstring.h\"\n"
      "#include \"galgas/GGS_luint.h\"\n"
      "#include \"galgas/GGS_lsint.h\"\n"
      "#include \"galgas/GGS_luint64.h\"\n"
      "#include \"galgas/GGS_lsint64.h\"\n"
      "#include \"galgas/GGS_lchar.h\"\n"
      "#include \"galgas/GGS_ldouble.h\"\n"
      "#include \"galgas/GGS_lbool.h\"\n"
      "#include \"galgas/C_Lexique.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                          Lexical scanner class                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " : public cToken {\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_925 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_925 = NULL ;
    while (((operand_925 = enumerator_925.nextObject ()))) {
      macroValidPointer (operand_925) ;
      result << "  public : " ;
      result << operand_925->mInfo.mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (26)) ;
      result << " mLexicalAttribute_" ;
      result << operand_925->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (26)) ;
      result << " ;\n" ;
    }
    result << "\n"
      "  public : cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (void) ;\n"
      "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                          Lexical scanner class                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " : public C_Lexique {\n"
      "//--- Constructors\n"
      "  public : " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                       const C_String & inDependencyFileExtension,\n"
      "                       const C_String & inDependencyFilePath,\n"
      "                       C_galgas_io * inParametersPtr,\n"
      "                       const C_String & inSourceFileName\n"
      "                       COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "  public : " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                       C_galgas_io * inParametersPtr,\n"
      "                       const C_String & inSourceString,\n"
      "                       const C_String & inStringForError\n"
      "                       COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "//--- Declaring a protected virtual destructor enables the compiler to raise\n"
      "//    an error if a direct delete is performed; only the static method\n"
      "//    C_GGS_Object::detachPointer may invoke delete.\n"
      "  #ifndef DO_NOT_GENERATE_CHECKINGS\n"
      "    protected : virtual ~" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (void) {}\n"
      "  #endif\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    'headerZone3' template of 'lexiqueGenerationTemplates' filewrapper     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_headerZone3 (C_Compiler & inLexique,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_terminalList & var_cas_TERMINAL_LIST,
                                const GGS_lexicalListDeclarationList & var_cas_DELIMITOR_LIST_LIST) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_TERMINAL_LIST.isBuilt ()
    && var_cas_DELIMITOR_LIST_LIST.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//--- Terminal symbols enumeration\n"
      "  public : enum {" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "_1_" ;
    GGS_terminalList::cEnumerator enumerator_105 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_105 = NULL ;
    while (((operand_105 = enumerator_105.nextObject ()))) {
      macroValidPointer (operand_105) ;
      result << ",\n"
        "  " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_" ;
      result << operand_105->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (5)) ;
    }
    result << "} ;\n" ;
    GGS_lexicalListDeclarationList::cEnumerator enumerator_254 (var_cas_DELIMITOR_LIST_LIST, true) ;
    const GGS_lexicalListDeclarationList::cElement * operand_254 = NULL ;
    while (((operand_254 = enumerator_254.nextObject ()))) {
      macroValidPointer (operand_254) ;
      result << "\n"
        "//--- Key words table '" ;
      result << operand_254->mName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (10)) ;
      result << "'\n"
        "  public : static sint16 search_into_" ;
      result << operand_254->mName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (11)) ;
      result << " (const C_String & inSearchedString) ;\n" ;
    }
    result << "  \n"
      "//--- Key words table 'xmlDelimitorsList'\n"
      "  public : static sint16 search_into_xmlDelimitorsList (const C_String & inSearchedString) ;\n"
      "\n"
      "  protected : virtual bool parseLexicalToken (void) ;\n"
      "  protected : virtual void appendTerminalMessageToSyntaxErrorMessage (const sint16 numeroTerminal,\n"
      "                                                              C_String & messageErreur) ;\n"
      "\n"
      "//--- Get terminal count\n"
      "  public : virtual sint16 terminalVocabularyCount (void) const { return " ;
    result << var_cas_TERMINAL_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (22)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (22)) ;
    result << " ; }\n"
      "//--- Get Token String\n"
      "  public : virtual C_String getCurrentTokenString (const cToken * inTokenPtr) const ;\n"
      "//--- Enter Token\n"
      "  protected : void enterToken (const cTokenFor_xml_parsing_lexique & inToken) ;\n"
      "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#endif\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'implementationZone2' template of 'lexiqueGenerationTemplates' filewrapper *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_implementationZone2 (C_Compiler & inLexique,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_lexicalAttributeMap & var_cas_LEXICAL_ATTRIBUTE_MAP,
                                const GGS_lexicalMessageMap & var_cas_LEXICAL_MESSAGE_MAP,
                                const GGS_terminalList & var_cas_TERMINAL_LIST,
                                const GGS_lexicalExplicitTokenListMapMap & var_cas_LEXICAL_TOKEN_LIST_MAP,
                                const GGS_stringset & var_cas_STRINGS_IN_EXPLICIT_RULES,
                                const GGS_lexicalRuleList & var_cas_LEXICAL_RULE_LIST,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_LEXICAL_ATTRIBUTE_MAP.isBuilt ()
    && var_cas_LEXICAL_MESSAGE_MAP.isBuilt ()
    && var_cas_TERMINAL_LIST.isBuilt ()
    && var_cas_LEXICAL_TOKEN_LIST_MAP.isBuilt ()
    && var_cas_STRINGS_IN_EXPLICIT_RULES.isBuilt ()
    && var_cas_LEXICAL_RULE_LIST.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"version_libpm.h\"\n"
      "#if LIBPM_VERSION != THE_LIBPM_VERSION\n"
      "  #error \"This file has been compiled with a version of GALGAS different than the version of libpm\"\n"
      "#endif\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include <ctype.h>\n"
      "#include <string.h>\n"
      "\n"
      "#include \"utilities/MF_MemoryControl.h\"\n"
      "#include \"" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << ".h\"\n"
      "\n"
      "#include \"strings/unicode_character.h\"\n"
      "#include \"galgas/scanner_actions.h\"\n"
      "#ifndef DO_NOT_GENERATE_CHECKINGS\n"
      "  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFileName ().cString (HERE), lineNumber ()\n"
      "  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE\n"
      "#else\n"
      "  #define LINE_AND_SOURCE_FILE\n"
      "  #define COMMA_LINE_AND_SOURCE_FILE\n"
      "#endif\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                               Constructors                                *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (void) :\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_1300 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_1300 = NULL ;
    while (((operand_1300 = enumerator_1300.nextObject ()))) {
      macroValidPointer (operand_1300) ;
      result << "mLexicalAttribute_" ;
      result << operand_1300->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (36)) ;
      result << " ()" ;
      if (enumerator_1300.hasNextObject ()) {
        result << ",\n" ;
      }
    }
    result << " {\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::\n" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                const C_String & inDependencyFileExtension,\n"
      "                const C_String & inDependencyFilePath,\n"
      "                C_galgas_io * inParametersPtr,\n"
      "                const C_String & inSourceFileName\n"
      "                COMMA_LOCATION_ARGS) :\n"
      "C_Lexique (inCallerCompiler, inDependencyFileExtension, inDependencyFilePath, inParametersPtr, inSourceFileName COMMA_THERE) {\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::\n" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                C_galgas_io * inParametersPtr,\n"
      "                const C_String & inSourceString,\n"
      "                const C_String & inStringForError\n"
      "                COMMA_LOCATION_ARGS) :\n"
      "C_Lexique (inCallerCompiler, inParametersPtr, inSourceString, inStringForError COMMA_THERE) {\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                        Lexical error message list                         *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalMessageMap::cEnumerator enumerator_2782 (var_cas_LEXICAL_MESSAGE_MAP, true) ;
    const GGS_lexicalMessageMap::cElement * operand_2782 = NULL ;
    while (((operand_2782 = enumerator_2782.nextObject ()))) {
      macroValidPointer (operand_2782) ;
      result << "\n"
        "static const utf32 gLexicalMessage_" ;
      result << operand_2782->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (72)) ;
      result << " [] = " ;
      result << operand_2782->mInfo.mLexicalMessage.ggs_string ().reader_utf32StringConstantRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (72)) ;
      result << " ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//          Syntax error messages, for every terminal symbol                 *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_terminalList::cEnumerator enumerator_3347 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_3347 = NULL ;
    while (((operand_3347 = enumerator_3347.nextObject ()))) {
      macroValidPointer (operand_3347) ;
      result << "\n"
        "//--- Syntax error message for terminal '$" ;
      result << operand_3347->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (82)) ;
      result << "$' :\n"
        "static const utf32 gSyntaxErrorMessage_" ;
      result << operand_3347->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (83)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (83)) ;
      result << " [] = " ;
      result << operand_3347->mSyntaxErrorMessage.reader_utf32StringConstantRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (83)) ;
      result << " ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                appendTerminalMessageToSyntaxErrorMessage                  *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "void " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::\n"
      "appendTerminalMessageToSyntaxErrorMessage (const sint16 inTerminalIndex,\n"
      "                                           C_String & outSyntaxErrorMessage) {\n"
      "  static const utf32 * syntaxErrorMessageArray [144] = {kEndOfSourceLexicalErrorMessage" ;
    GGS_terminalList::cEnumerator enumerator_4305 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_4305 = NULL ;
    while (((operand_4305 = enumerator_4305.nextObject ()))) {
      macroValidPointer (operand_4305) ;
      result << ",\n"
        "    gSyntaxErrorMessage_" ;
      result << operand_4305->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (97)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (97)) ;
    }
    result << "} ;\n"
      "  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;\n"
      "}\n"
      "\n" ;
    GGS_lexicalExplicitTokenListMapMap::cEnumerator enumerator_4532 (var_cas_LEXICAL_TOKEN_LIST_MAP, true) ;
    const GGS_lexicalExplicitTokenListMapMap::cElement * operand_4532 = NULL ;
    while (((operand_4532 = enumerator_4532.nextObject ()))) {
      macroValidPointer (operand_4532) ;
      result << "//---------------------------------------------------------------------------*\n"
        "//                                                                           *\n"
        "//             Key words table '" ;
      result << operand_4532->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (107)) ;
      result << "'                            *\n"
        "//                                                                           *\n"
        "//---------------------------------------------------------------------------*\n"
        "\n"
        "static const sint32 ktable_size_" ;
      result << operand_4532->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (110)) ;
      result << " = " ;
      result << operand_4532->mInfo.mExplicitTokenListMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (110)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (110)) ;
      result << " ;\n"
        "\n" ;
      GGS_lexicalExplicitTokenListMap::cEnumerator enumerator_5160 (operand_4532->mInfo.mExplicitTokenListMap, true) ;
      const GGS_lexicalExplicitTokenListMap::cElement * operand_5160 = NULL ;
      while (((operand_5160 = enumerator_5160.nextObject ()))) {
        macroValidPointer (operand_5160) ;
        result << "static const utf32 kEntry_" ;
        result << operand_5160->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (112)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (112)) ;
        result << "_forTable_" ;
        result << operand_4532->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (112)) ;
        result << " [] = " ;
        result << operand_5160->mInfo.mTerminal.ggs_string ().reader_utf32StringConstantRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (112)) ;
        result << " ;\n"
          "\n" ;
      }
      result << "static const C_unicode_lexique_table_entry ktable_for_" ;
      result << operand_4532->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (114)) ;
      result << " [ktable_size_" ;
      result << operand_4532->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (114)) ;
      result << "] = {\n" ;
      GGS_tokenSortedlist::cEnumerator enumerator_5548 (operand_4532->mInfo.mTokenSortedList, true) ;
      const GGS_tokenSortedlist::cElement * operand_5548 = NULL ;
      while (((operand_5548 = enumerator_5548.nextObject ()))) {
        macroValidPointer (operand_5548) ;
        result << "  {kEntry_" ;
        result << operand_5548->mName.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (116)) ;
        result << "_forTable_" ;
        result << operand_4532->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (116)) ;
        result << ", " ;
        result << operand_5548->mLength.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (116)) ;
        result << ", " ;
        result << var_cas_LEXIQUE_CLASS_NAME ;
        result << "::" ;
        result << var_cas_LEXIQUE_CLASS_NAME ;
        result << "_1_" ;
        result << operand_5548->mName.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (116)) ;
        result << "}" ;
        if (enumerator_5548.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "}\n"
        "\n"
        "sint16 " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "::search_into_" ;
      result << operand_4532->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (120)) ;
      result << " (const C_String & inSearchedString) {\n"
        "  return searchInList (inSearchedString, ktable_for_" ;
      result << operand_4532->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (121)) ;
      result << ", ktable_size_" ;
      result << operand_4532->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (121)) ;
      result << ") ;\n"
        "}\n"
        "\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                          getCurrentTokenString                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "C_String " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::\n"
      "getCurrentTokenString (const cToken * inTokenPtr) const {\n"
      "  cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " * ptr = (cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " *) inTokenPtr ;\n"
      "  C_String s ;\n"
      "  if (ptr == NULL) {\n"
      "    s.appendCString(\"$$\") ;\n"
      "  }else{\n"
      "    switch (ptr->mTokenCode) {\n"
      "    case " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "_1_:\n"
      "      s.appendCString(\"$$\") ;\n"
      "      break ;\n" ;
    GGS_terminalList::cEnumerator enumerator_6846 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_6846 = NULL ;
    while (((operand_6846 = enumerator_6846.nextObject ()))) {
      macroValidPointer (operand_6846) ;
      result << "    case " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_" ;
      result << operand_6846->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (143)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (143)) ;
      result << ":\n"
        "      s.appendUnicodeCharacter (TO_UNICODE ('$')) ;\n"
        "      s.appendCString (" ;
      result << operand_6846->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (145)).reader_CStringConstantRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (145)) ;
      result << ") ;\n"
        "      s.appendCString(\"$ \") ;\n" ;
      GGS_lexicalSentValueList::cEnumerator enumerator_7161 (operand_6846->mSentAttributeList, true) ;
      const GGS_lexicalSentValueList::cElement * operand_7161 = NULL ;
      while (((operand_7161 = enumerator_7161.nextObject ()))) {
        macroValidPointer (operand_7161) ;
        result << "      s." ;
        result << operand_7161->mLexicalType.reader_appendMethodName (inLexique COMMA_SOURCE_FILE_AT_LINE (148)) ;
        result << " (ptr->mLexicalAttribute_" ;
        result << operand_7161->mAttributeName ;
        result << ") ;\n" ;
      }
      result << "      break ;\n" ;
    }
    result << "    default:\n"
      "      break ;\n"
      "    }\n"
      "  }\n"
      "  return s ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                      U N I C O D E    S T R I N G S                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_stringset::cEnumerator enumerator_7796 (var_cas_STRINGS_IN_EXPLICIT_RULES, true) ;
    while (enumerator_7796.hasCurrentObject ()) {
      result << "\n"
        "//--- Unicode string for '$" ;
      result << enumerator_7796._key (HERE) ;
      result << "$'\n"
        "static const utf32 kUnicodeString_" ;
      result << enumerator_7796._key (HERE).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (167)) ;
      result << " [] = " ;
      result << enumerator_7796._key (HERE).reader_utf32StringConstantRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (167)) ;
      result << " ;\n" ;
      enumerator_7796.next () ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//               P A R S E    L E X I C A L    T O K E N                     *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "bool " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::\n"
      "parseLexicalToken (void) {\n"
      "  cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " token ;\n"
      "  bool loop = true ;\n"
      "  token.mTokenCode = -1 ;\n"
      "  while ((token.mTokenCode < 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_8637 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_8637 = NULL ;
    while (((operand_8637 = enumerator_8637.nextObject ()))) {
      macroValidPointer (operand_8637) ;
      result << "    token.mLexicalAttribute_" ;
      result << operand_8637->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (184)) ;
      result << operand_8637->mInfo.mLexicalType.reader_initialization (inLexique COMMA_SOURCE_FILE_AT_LINE (184)) ;
      result << " ;\n" ;
    }
    result << "    mTokenFirstLocation = mCurrentLocation ;\n"
      "    try{\n"
      "      " ;
    GGS_lexicalRuleList::cEnumerator enumerator_8835 (var_cas_LEXICAL_RULE_LIST, true) ;
    const GGS_lexicalRuleList::cElement * operand_8835 = NULL ;
    while (((operand_8835 = enumerator_8835.nextObject ()))) {
      macroValidPointer (operand_8835) ;
      result << "if (" ;
      result << (findCategoryReader__abstractLexicalRule__generateCode (operand_8835->mLexicalRule (HERE)->galgasRTTI ()) (inLexique, operand_8835->mLexicalRule.getPtr (), var_cas_LEXIQUE_ANALYSIS_CONTEXT COMMA_SOURCE_FILE_AT_LINE (191))) ;
      result << ") {\n"
        "        ...\n"
        "      }else " ;
    }
    result << "if (testForInputUTF32Char (TO_UNICODE ('\\0'))) { // End of source text \? \n"
      "        token.mTokenCode = " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "_1_ ; // Empty string code\n"
      "      }else{ // Unknown input character\n"
      "        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;\n"
      "      }\n"
      "    }catch (const C_lexicalErrorException &) {\n"
      "      token.mTokenCode = -1 ; // No token\n"
      "      advance () ; // ... go throught unknown character\n"
      "    }\n"
      "  }\n"
      "  if ((UNICODE_VALUE (mCurrentChar) == '\\0') && (token.mTemplateStringBeforeToken.length () > 0)) {\n"
      "    token.mTokenCode = 0 ;\n"
      "    enterToken (token) ;\n"
      "  }\n"
      "  return token.mTokenCode > 0 ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                         E N T E R    T O K E N                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "void " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::enterToken (const cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " & inToken) {\n"
      "  cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " * ptr = NULL ;\n"
      "  macroMyNew (ptr, cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " ()) ;\n"
      "  ptr->mTokenCode = inToken.mTokenCode ;\n"
      "  ptr->mFirstLocation = mTokenFirstLocation ;\n"
      "  ptr->mLastLocation  = mTokenLastLocation ;\n"
      "  ptr->mTemplateStringBeforeToken  = inToken.mTemplateStringBeforeToken ;\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_10398 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_10398 = NULL ;
    while (((operand_10398 = enumerator_10398.nextObject ()))) {
      macroValidPointer (operand_10398) ;
      result << "  ptr->mLexicalAttribute_" ;
      result << operand_10398->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (227)) ;
      result << " = inToken.mLexicalAttribute_" ;
      result << operand_10398->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (227)) ;
      result << " ;\n" ;
    }
    result << "  enterTokenFromPointer (ptr) ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//         A S S I G N    F R O M    A T T R I B U T E                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_10977 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_10977 = NULL ;
    while (((operand_10977 = enumerator_10977.nextObject ()))) {
      macroValidPointer (operand_10977) ;
      result << "void " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "::\n"
        "assignFromAttribute_" ;
      result << operand_10977->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (240)) ;
      result << " (" ;
      result << operand_10977->mInfo.mLexicalType.reader_appendMethodName (inLexique COMMA_SOURCE_FILE_AT_LINE (240)) ;
      result << " & outValue) const {\n"
        "  cTokenFor_" ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << " * ptr = (cTokenFor_" ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << " *) mCurrentTokenPtr ;\n"
        "  outValue = " ;
      result << operand_10977->mInfo.mLexicalType.reader_appendMethodName (inLexique COMMA_SOURCE_FILE_AT_LINE (242)) ;
      result << " (* this, ptr->mLexicalAttribute_" ;
      result << operand_10977->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (242)) ;
      result << ") ;\n"
        "}\n"
        "\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//               A T T R I B U T E   A C C E S S                             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_11787 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_11787 = NULL ;
    while (((operand_11787 = enumerator_11787.nextObject ()))) {
      macroValidPointer (operand_11787) ;
      result << operand_11787->mInfo.mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (253)) ;
      result << " " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "::\n"
        "attributeValue_" ;
      result << operand_11787->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (254)) ;
      result << " (void) const {\n"
        "  cTokenFor_" ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << " * ptr = (cTokenFor_" ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << " *) mCurrentTokenPtr ;\n"
        "  return ptr->mLexicalAttribute_" ;
      result << operand_11787->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (256)) ;
      result << " ;\n"
        "}\n"
        "\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalSendDefaultAction.checkLexicalDefaultAction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction> gDispatchTableForMethod__lexicalSendDefaultAction__checkLexicalDefaultAction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__lexicalSendDefaultAction__checkLexicalDefaultAction.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction
findCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalSendDefaultAction__checkLexicalDefaultAction.count ()) {
    result = gDispatchTableForMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (superClassPtr) ;
      gDispatchTableForMethod__lexicalSendDefaultAction__checkLexicalDefaultAction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalSendTerminalByDefault.checkLexicalDefaultAction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSendTerminalByDefault__checkLexicalDefaultAction (C_Compiler & inLexique,
                                const cPtr_lexicalSendTerminalByDefault * operand_6241,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6241 != NULL) {
    GGS_lexicalSentValueList  automatic_var_0 ;
    const GGS_terminalMap  temp_6349 = var_cas_ioLexiqueAnalysisContext.reader_mTerminalMap (inLexique COMMA_SOURCE_FILE_AT_LINE (158)) ;
    if (temp_6349.isBuilt ()) {
      temp_6349 (HERE)->method_searchKey (inLexique, operand_6241->mDefaultSentTerminal, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (158)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalErrorByDefault.checkLexicalDefaultAction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalErrorByDefault__checkLexicalDefaultAction (C_Compiler & inLexique,
                                const cPtr_lexicalErrorByDefault * operand_6535,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6535 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_6650 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_6535->mDefaultErrorMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (166)) ;
    if (NULL != operand_6650) {
      operand_6650->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalExpression.checkLexicalExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalExpression__checkLexicalExpression> gDispatchTableForMethod__lexicalExpression__checkLexicalExpression ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalExpression__checkLexicalExpression (typeCategoryMethod__lexicalExpression__checkLexicalExpression inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__lexicalExpression__checkLexicalExpression.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalExpression__checkLexicalExpression
findCategoryMethod__lexicalExpression__checkLexicalExpression (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalExpression__checkLexicalExpression result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalExpression__checkLexicalExpression.count ()) {
    result = gDispatchTableForMethod__lexicalExpression__checkLexicalExpression (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalExpression__checkLexicalExpression (superClassPtr) ;
      gDispatchTableForMethod__lexicalExpression__checkLexicalExpression.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@lexicalOrExpression.checkLexicalExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalOrExpression__checkLexicalExpression (C_Compiler & inLexique,
                                const cPtr_lexicalOrExpression * operand_7244,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7244 != NULL) {
    const GGS_lexicalExpression  temp_7338 = operand_7244->mLeftOperand ;
    if (temp_7338.isBuilt ()) {
      typeCategoryMethod__lexicalExpression__checkLexicalExpression method = findCategoryMethod__lexicalExpression__checkLexicalExpression (temp_7338.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_7338 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (184)) ;
      }
    }
    const GGS_lexicalExpression  temp_7409 = operand_7244->mRightOperand ;
    if (temp_7409.isBuilt ()) {
      typeCategoryMethod__lexicalExpression__checkLexicalExpression method = findCategoryMethod__lexicalExpression__checkLexicalExpression (temp_7409.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_7409 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (185)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalCharacterMatch.checkLexicalExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterMatch__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalCharacterMatch * operand_7595,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7595 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalCharacterSetMatch.checkLexicalExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterSetMatch__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalCharacterSetMatch * operand_7815,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7815 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@lexicalCharacterIntervalMatch.checkLexicalExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterIntervalMatch__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalCharacterIntervalMatch * operand_8040,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8040 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@lexicalStringMatch.checkLexicalExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStringMatch__checkLexicalExpression (C_Compiler & inLexique,
                                const cPtr_lexicalStringMatch * operand_8254,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8254 != NULL) {
    var_cas_ioLexiqueAnalysisContext.mStringInExplicitRuleSet._addAssign_operation (operand_8254->mString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (214))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalStringNotMatch.checkLexicalExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStringNotMatch__checkLexicalExpression (C_Compiler & inLexique,
                                const cPtr_lexicalStringNotMatch * operand_8539,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8539 != NULL) {
    var_cas_ioLexiqueAnalysisContext.mStringInExplicitRuleSet._addAssign_operation (operand_8539->mString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (222))) ;
    elementOf_GGS_lexicalMessageMap * operand_8722 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_8539->mErrorMessage, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (223)) ;
    if (NULL != operand_8722) {
      operand_8722->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalRoutineOrFunctionFormalInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument> gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument
findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument.count ()) {
    result = gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (superClassPtr) ;
      gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalAttributeInputArgument * operand_9419,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9419 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  temp_9664 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (245)) ;
    if (temp_9664.isBuilt ()) {
      temp_9664 (HERE)->method_searchKey (inLexique, operand_9419->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (245)) ;
    }
    if (((var_cas_attributeLexicalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_9419->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is ")).operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (252)))).operator_concat (GGS_string (" type, but lexical routine prototype requires "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (254)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (256)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCharacterInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCharacterInputArgument * operand_10218,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10218 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_10218->mCharacter.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal character has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (269)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (271)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalUnsignedInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalUnsignedInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalUnsignedInputArgument * operand_10822,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10822 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_10822->mUnsigned.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal character has @uint")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (284)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (286)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCurrentCharacterInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCurrentCharacterInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCurrentCharacterInputArgument * operand_11433,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11433 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_11433->mLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, current character value has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (299)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (301)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFunctionInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFunctionInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalFunctionInputArgument * operand_12040,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12040 != NULL) {
    GGS_lexicalFunctionFormalArgumentList  var_cas_lexicalFormalTypeList ;
    GGS_lexicalTypeEnum var_cas_returnedLexicalFormalType ;
    GGS_string var_cas_replacementFunctionName ;
    const GGS_lexicalFunctionMap  temp_12386 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (314)) ;
    if (temp_12386.isBuilt ()) {
      temp_12386 (HERE)->method_searchKey (inLexique, operand_12040->mFunctionName, var_cas_lexicalFormalTypeList, var_cas_returnedLexicalFormalType, var_cas_replacementFunctionName COMMA_SOURCE_FILE_AT_LINE (314)) ;
    }
    if (((var_cas_replacementFunctionName).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
      operand_12040->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("obsolete lexical function, replaced by '")).operator_concat (var_cas_replacementFunctionName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (322)) ;
    }
    if (((var_cas_returnedLexicalFormalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_12040->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, the function returns an ")).operator_concat (var_cas_returnedLexicalFormalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (327)))).operator_concat (GGS_string (" value, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (329)))).operator_concat (GGS_string (" value")) COMMA_SOURCE_FILE_AT_LINE (331)) ;
    }
    if (((var_cas_lexicalFormalTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (333))).operator_isNotEqual (operand_12040->mFunctionActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (333)))).isBuiltAndTrue ()) {
      operand_12040->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical function names ")).operator_concat (operand_12040->mFunctionActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (335)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (335)))).operator_concat (GGS_string (" actual argument(s), but the prototype requires "))).operator_concat (var_cas_lexicalFormalTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (337)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (337)))).operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (338)) ;
    }
    {
      GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_13482 (var_cas_lexicalFormalTypeList, true) ;
      const GGS_lexicalFunctionFormalArgumentList::cElement * operand_13482 = NULL ;
      GGS_lexicalFunctionCallActualArgumentList::cEnumerator enumerator_13511 (operand_12040->mFunctionActualArgumentList, true) ;
      const GGS_lexicalFunctionCallActualArgumentList::cElement * operand_13511 = NULL ;
      while (((operand_13482 = enumerator_13482.nextObject ()))
          && ((operand_13511 = enumerator_13511.nextObject ()))) {
        macroValidPointer (operand_13482) ;
        macroValidPointer (operand_13511) ;
        const GGS_lexicalRoutineOrFunctionFormalInputArgument  temp_13580 = operand_13511->mLexicalActualInputArgument ;
        if (temp_13580.isBuilt ()) {
          typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument method = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (temp_13580.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_13580 (HERE), var_cas_ioLexiqueAnalysisContext, operand_13482->mLexicalType COMMA_SOURCE_FILE_AT_LINE (341)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalRoutineOrFunctionFormalInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument> gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument
findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument.count ()) {
    result = gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (superClassPtr) ;
      gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalAttributeInputArgument * operand_14282,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14282 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  temp_14527 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (365)) ;
    if (temp_14527.isBuilt ()) {
      temp_14527 (HERE)->method_searchKey (inLexique, operand_14282->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (365)) ;
    }
    if (((var_cas_attributeLexicalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_14282->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is ")).operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (372)))).operator_concat (GGS_string (" type, but lexical routine prototype requires "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (374)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (376)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCharacterInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCharacterInputArgument * operand_15080,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15080 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_15080->mCharacter.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal character has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (389)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (391)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalUnsignedInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalUnsignedInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalUnsignedInputArgument * operand_15683,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15683 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_15683->mUnsigned.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal unsigned value has @uint")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (404)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (406)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCurrentCharacterInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCurrentCharacterInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCurrentCharacterInputArgument * operand_16298,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16298 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_16298->mLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, current character value has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (419)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (421)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFunctionInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFunctionInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalFunctionInputArgument * operand_16904,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16904 != NULL) {
    GGS_lexicalFunctionFormalArgumentList  var_cas_lexicalFormalTypeList ;
    GGS_lexicalTypeEnum var_cas_returnedLexicalFormalType ;
    GGS_string var_cas_replacementFunctionName ;
    const GGS_lexicalFunctionMap  temp_17250 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (434)) ;
    if (temp_17250.isBuilt ()) {
      temp_17250 (HERE)->method_searchKey (inLexique, operand_16904->mFunctionName, var_cas_lexicalFormalTypeList, var_cas_returnedLexicalFormalType, var_cas_replacementFunctionName COMMA_SOURCE_FILE_AT_LINE (434)) ;
    }
    if (((var_cas_replacementFunctionName).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
      operand_16904->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("obsolete lexical function, replaced by '")).operator_concat (var_cas_replacementFunctionName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (442)) ;
    }
    if (((var_cas_returnedLexicalFormalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_16904->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, the function returns an ")).operator_concat (var_cas_returnedLexicalFormalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (447)))).operator_concat (GGS_string (" value, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (449)))).operator_concat (GGS_string (" value")) COMMA_SOURCE_FILE_AT_LINE (451)) ;
    }
    if (((var_cas_lexicalFormalTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (453))).operator_isNotEqual (operand_16904->mFunctionActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (453)))).isBuiltAndTrue ()) {
      operand_16904->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical function names ")).operator_concat (operand_16904->mFunctionActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (455)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (455)))).operator_concat (GGS_string (" actual argument(s), but the prototype requires "))).operator_concat (var_cas_lexicalFormalTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (457)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (457)))).operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (458)) ;
    }
    {
      GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_18346 (var_cas_lexicalFormalTypeList, true) ;
      const GGS_lexicalFunctionFormalArgumentList::cElement * operand_18346 = NULL ;
      GGS_lexicalFunctionCallActualArgumentList::cEnumerator enumerator_18375 (operand_16904->mFunctionActualArgumentList, true) ;
      const GGS_lexicalFunctionCallActualArgumentList::cElement * operand_18375 = NULL ;
      while (((operand_18346 = enumerator_18346.nextObject ()))
          && ((operand_18375 = enumerator_18375.nextObject ()))) {
        macroValidPointer (operand_18346) ;
        macroValidPointer (operand_18375) ;
        const GGS_lexicalRoutineOrFunctionFormalInputArgument  temp_18444 = operand_18375->mLexicalActualInputArgument ;
        if (temp_18444.isBuilt ()) {
          typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument method = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (temp_18444.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_18444 (HERE), var_cas_ioLexiqueAnalysisContext, operand_18346->mLexicalType COMMA_SOURCE_FILE_AT_LINE (461)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@abstractLexicalRoutineActualArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument> gDispatchTableForMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument
findCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument.count ()) {
    result = gDispatchTableForMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (superClassPtr) ;
      gDispatchTableForMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputOutputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputOutputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalAttributeInputOutputArgument * operand_19211,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalArgumentMode  var_cas_inLexicalRoutineFormalArgumentMode,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19211 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  temp_19515 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (487)) ;
    if (temp_19515.isBuilt ()) {
      temp_19515 (HERE)->method_searchKey (inLexique, operand_19211->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (487)) ;
    }
    if (((var_cas_attributeLexicalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_19211->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is ")).operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (494)))).operator_concat (GGS_string (" type, but lexical routine prototype requires "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (496)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (498)) ;
    }
    if (((var_cas_inLexicalRoutineFormalArgumentMode).operator_isNotEqual (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
      operand_19211->mActualPassingModeLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the output mode (!) is required here, not an output/input mode") COMMA_SOURCE_FILE_AT_LINE (502)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFormalInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFormalInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalFormalInputArgument * operand_20298,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalArgumentMode  var_cas_inLexicalRoutineFormalArgumentMode,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20298 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalRoutineOrFunctionFormalInputArgument  temp_20614 = operand_20298->mRoutineOrFunctionFormalInputArgument ;
    if (temp_20614.isBuilt ()) {
      typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument method = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (temp_20614.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_20614 (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_inLexicalRoutineFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (514)) ;
      }
    }
    if (((var_cas_inLexicalRoutineFormalArgumentMode).operator_isNotEqual (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
      operand_20298->mActualPassingModeLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the output/input mode (!\?) is required here, not an input mode") COMMA_SOURCE_FILE_AT_LINE (521)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalInstruction.checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalInstruction__checkLexicalInstruction> gDispatchTableForMethod__lexicalInstruction__checkLexicalInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalInstruction__checkLexicalInstruction (typeCategoryMethod__lexicalInstruction__checkLexicalInstruction inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__lexicalInstruction__checkLexicalInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalInstruction__checkLexicalInstruction
findCategoryMethod__lexicalInstruction__checkLexicalInstruction (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalInstruction__checkLexicalInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalInstruction__checkLexicalInstruction.count ()) {
    result = gDispatchTableForMethod__lexicalInstruction__checkLexicalInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (superClassPtr) ;
      gDispatchTableForMethod__lexicalInstruction__checkLexicalInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalStructuredSendInstruction.checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStructuredSendInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalStructuredSendInstruction * operand_21443,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21443 != NULL) {
    {
      GGS_lexicalSendSearchList::cEnumerator enumerator_21531 (operand_21443->mLexicalSendSearchList, true) ;
      const GGS_lexicalSendSearchList::cElement * operand_21531 = NULL ;
      while (((operand_21531 = enumerator_21531.nextObject ()))) {
        macroValidPointer (operand_21531) ;
        GGS_lexicalTypeEnum automatic_var_1 ;
        const GGS_lexicalAttributeMap  temp_21597 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (538)) ;
        if (temp_21597.isBuilt ()) {
          temp_21597 (HERE)->method_searchKey (inLexique, operand_21531->mAttributeName, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (538)) ;
        }
      }
    }
    const GGS_lexicalSendDefaultAction  temp_21690 = operand_21443->mLexicalSendDefaultAction ;
    if (temp_21690.isBuilt ()) {
      typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction method = findCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (temp_21690.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_21690 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (540)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@lexicalSimpleSendInstruction.checkLexicalInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSimpleSendInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalSimpleSendInstruction * operand_21883,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21883 != NULL) {
    GGS_lexicalSentValueList  automatic_var_2 ;
    const GGS_terminalMap  temp_21991 = var_cas_ioLexiqueAnalysisContext.reader_mTerminalMap (inLexique COMMA_SOURCE_FILE_AT_LINE (548)) ;
    if (temp_21991.isBuilt ()) {
      temp_21991 (HERE)->method_searchKey (inLexique, operand_21883->mSentTerminal, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (548)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalRepeatInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRepeatInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalRepeatInstruction * operand_22171,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22171 != NULL) {
    {
      GGS_lexicalWhileBranchList::cEnumerator enumerator_22260 (operand_22171->mLexicalWhileBranchList, true) ;
      const GGS_lexicalWhileBranchList::cElement * operand_22260 = NULL ;
      while (((operand_22260 = enumerator_22260.nextObject ()))) {
        macroValidPointer (operand_22260) ;
        const GGS_lexicalExpression  temp_22308 = operand_22260->mWhileExpression ;
        if (temp_22308.isBuilt ()) {
          typeCategoryMethod__lexicalExpression__checkLexicalExpression method = findCategoryMethod__lexicalExpression__checkLexicalExpression (temp_22308.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_22308 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (557)) ;
          }
        }
        {
          GGS_lexicalInstructionList::cEnumerator enumerator_22372 (operand_22260->mWhileInstructionList, true) ;
          const GGS_lexicalInstructionList::cElement * operand_22372 = NULL ;
          while (((operand_22372 = enumerator_22372.nextObject ()))) {
            macroValidPointer (operand_22372) ;
            const GGS_lexicalInstruction  temp_22419 = operand_22372->mInstruction ;
            if (temp_22419.isBuilt ()) {
              typeCategoryMethod__lexicalInstruction__checkLexicalInstruction method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (temp_22419.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, temp_22419 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (559)) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_lexicalInstructionList::cEnumerator enumerator_22518 (operand_22171->mRepeatedInstructionList, true) ;
      const GGS_lexicalInstructionList::cElement * operand_22518 = NULL ;
      while (((operand_22518 = enumerator_22518.nextObject ()))) {
        macroValidPointer (operand_22518) ;
        const GGS_lexicalInstruction  temp_22563 = operand_22518->mInstruction ;
        if (temp_22563.isBuilt ()) {
          typeCategoryMethod__lexicalInstruction__checkLexicalInstruction method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (temp_22563.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_22563 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (563)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalSelectInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSelectInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalSelectInstruction * operand_22768,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22768 != NULL) {
    {
      GGS_lexicalSelectBranchList::cEnumerator enumerator_22858 (operand_22768->mLexicalSelectBranchList, true) ;
      const GGS_lexicalSelectBranchList::cElement * operand_22858 = NULL ;
      while (((operand_22858 = enumerator_22858.nextObject ()))) {
        macroValidPointer (operand_22858) ;
        const GGS_lexicalExpression  temp_22907 = operand_22858->mSelectExpression ;
        if (temp_22907.isBuilt ()) {
          typeCategoryMethod__lexicalExpression__checkLexicalExpression method = findCategoryMethod__lexicalExpression__checkLexicalExpression (temp_22907.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_22907 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (573)) ;
          }
        }
        {
          GGS_lexicalInstructionList::cEnumerator enumerator_22972 (operand_22858->mSelectInstructionList, true) ;
          const GGS_lexicalInstructionList::cElement * operand_22972 = NULL ;
          while (((operand_22972 = enumerator_22972.nextObject ()))) {
            macroValidPointer (operand_22972) ;
            const GGS_lexicalInstruction  temp_23019 = operand_22972->mInstruction ;
            if (temp_23019.isBuilt ()) {
              typeCategoryMethod__lexicalInstruction__checkLexicalInstruction method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (temp_23019.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, temp_23019 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (575)) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_lexicalInstructionList::cEnumerator enumerator_23117 (operand_22768->mDefaultInstructionList, true) ;
      const GGS_lexicalInstructionList::cElement * operand_23117 = NULL ;
      while (((operand_23117 = enumerator_23117.nextObject ()))) {
        macroValidPointer (operand_23117) ;
        const GGS_lexicalInstruction  temp_23162 = operand_23117->mInstruction ;
        if (temp_23162.isBuilt ()) {
          typeCategoryMethod__lexicalInstruction__checkLexicalInstruction method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (temp_23162.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_23162 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (579)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalRoutineInstruction.checkLexicalInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRoutineInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalRoutineInstruction * operand_23368,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23368 != NULL) {
    GGS_lexicalRoutineFormalArgumentList  var_cas_lexicalRoutineFormalArgumentList ;
    GGS_stringlist  var_cas_routineErrorMessageList ;
    GGS_string var_cas_replacementRoutineName ;
    const GGS_lexicalRoutineMap  temp_23635 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalRoutineMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (591)) ;
    if (temp_23635.isBuilt ()) {
      temp_23635 (HERE)->method_searchKey (inLexique, operand_23368->mRoutineName, var_cas_lexicalRoutineFormalArgumentList, var_cas_routineErrorMessageList, var_cas_replacementRoutineName COMMA_SOURCE_FILE_AT_LINE (591)) ;
    }
    if (((var_cas_replacementRoutineName).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
      operand_23368->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("obsolete lexical routine, replaced by '")).operator_concat (var_cas_replacementRoutineName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (599)) ;
    }
    if (((var_cas_lexicalRoutineFormalArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (602))).operator_isNotEqual (operand_23368->mActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (602)))).isBuiltAndTrue ()) {
      operand_23368->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical routine call names ")).operator_concat (operand_23368->mActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (604)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (604)))).operator_concat (GGS_string (" actual argument(s), but the lexical routine prototype requires "))).operator_concat (var_cas_lexicalRoutineFormalArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (606)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (606)))).operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (607)) ;
    }
    {
      GGS_lexicalRoutineFormalArgumentList::cEnumerator enumerator_24411 (var_cas_lexicalRoutineFormalArgumentList, true) ;
      const GGS_lexicalRoutineFormalArgumentList::cElement * operand_24411 = NULL ;
      GGS_lexicalRoutineCallActualArgumentList::cEnumerator enumerator_24432 (operand_23368->mActualArgumentList, true) ;
      const GGS_lexicalRoutineCallActualArgumentList::cElement * operand_24432 = NULL ;
      while (((operand_24411 = enumerator_24411.nextObject ()))
          && ((operand_24432 = enumerator_24432.nextObject ()))) {
        macroValidPointer (operand_24411) ;
        macroValidPointer (operand_24432) ;
        const GGS_abstractLexicalRoutineActualArgument  temp_24502 = operand_24432->mLexicalRoutineActualArgument ;
        if (temp_24502.isBuilt ()) {
          typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument method = findCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (temp_24502.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_24502 (HERE), var_cas_ioLexiqueAnalysisContext, operand_24411->mLexicalFormalArgumentMode, operand_24411->mLexicalFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (610)) ;
          }
        }
      }
    }
    if (((var_cas_routineErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (617))).operator_isNotEqual (operand_23368->mErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (617)))).isBuiltAndTrue ()) {
      operand_23368->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical routine call names ")).operator_concat (operand_23368->mErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (619)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (619)))).operator_concat (GGS_string (" error message(s), but the lexical routine prototype requires "))).operator_concat (var_cas_routineErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (621)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (621)))).operator_concat (GGS_string (" error message(s)")) COMMA_SOURCE_FILE_AT_LINE (622)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_25061 (operand_23368->mErrorMessageList, true) ;
      const GGS_lstringlist::cElement * operand_25061 = NULL ;
      while (((operand_25061 = enumerator_25061.nextObject ()))) {
        macroValidPointer (operand_25061) ;
        elementOf_GGS_lexicalMessageMap * operand_25126 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_25061->mValue, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (625)) ;
        if (NULL != operand_25126) {
          operand_25126->mInfo.mMessageIsUsed = GGS_bool (true) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalLogInstruction.checkLexicalInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalLogInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalLogInstruction * operand_25369,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25369 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalRewindInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRewindInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalRewindInstruction * operand_25590,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25590 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalDropInstruction.checkLexicalInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalDropInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalDropInstruction * operand_25809,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25809 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalTagInstruction.checkLexicalInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalTagInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalTagInstruction * operand_26027,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26027 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalErrorInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalErrorInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalErrorInstruction * operand_26247,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26247 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_26355 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_26247->mErrorMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (664)) ;
    if (NULL != operand_26355) {
      operand_26355->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalWarningInstruction.checkLexicalInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalWarningInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalWarningInstruction * operand_26589,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26589 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_26697 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_26589->mWarningMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (674)) ;
    if (NULL != operand_26697) {
      operand_26697->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@abstractLexicalRule.checkLexicalRule'  *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__abstractLexicalRule__checkLexicalRule> gDispatchTableForMethod__abstractLexicalRule__checkLexicalRule ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__abstractLexicalRule__checkLexicalRule (typeCategoryMethod__abstractLexicalRule__checkLexicalRule inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__abstractLexicalRule__checkLexicalRule.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__abstractLexicalRule__checkLexicalRule
findCategoryMethod__abstractLexicalRule__checkLexicalRule (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__abstractLexicalRule__checkLexicalRule result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__abstractLexicalRule__checkLexicalRule.count ()) {
    result = gDispatchTableForMethod__abstractLexicalRule__checkLexicalRule (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__abstractLexicalRule__checkLexicalRule (superClassPtr) ;
      gDispatchTableForMethod__abstractLexicalRule__checkLexicalRule.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@lexicalImplicitRule.checkLexicalRule'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalImplicitRule__checkLexicalRule (C_Compiler &,
                                const cPtr_lexicalImplicitRule * operand_27272,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27272 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@lexicalExplicitRule.checkLexicalRule'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalExplicitRule__checkLexicalRule (C_Compiler & inLexique,
                                const cPtr_lexicalExplicitRule * operand_27481,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27481 != NULL) {
    const GGS_lexicalExpression  temp_27585 = operand_27481->mLexicalRuleExpression ;
    if (temp_27585.isBuilt ()) {
      typeCategoryMethod__lexicalExpression__checkLexicalExpression method = findCategoryMethod__lexicalExpression__checkLexicalExpression (temp_27585.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_27585 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (699)) ;
      }
    }
    {
      GGS_lexicalInstructionList::cEnumerator enumerator_27642 (operand_27481->mInstructionList, true) ;
      const GGS_lexicalInstructionList::cElement * operand_27642 = NULL ;
      while (((operand_27642 = enumerator_27642.nextObject ()))) {
        macroValidPointer (operand_27642) ;
        const GGS_lexicalInstruction  temp_27687 = operand_27642->mInstruction ;
        if (temp_27687.isBuilt ()) {
          typeCategoryMethod__lexicalInstruction__checkLexicalInstruction method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (temp_27687.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_27687 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (701)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "compileLexiqueComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileLexiqueComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  var_cas_inOutputDirectory COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileLexiqueComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lexiqueComponentRoot  var_cas_lexiqueComponentRoot ;
  const GGS_string _depExtension = GGS_string ("") ;
  const GGS_string _depPath = GGS_string ("") ;
  if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
    lexiqueLL1grammar::_performSourceFileParsing_ (inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_inSourceFile,
                                  var_cas_lexiqueComponentRoot
                                  COMMA_SOURCE_FILE_AT_LINE (714)) ;
  }
  GGS_lstring  var_cas_componentName ;
  var_cas_componentName = var_cas_lexiqueComponentRoot.reader_mLexiqueComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (716)) ;
  GGS_string var_cas_basename ;
  var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (717)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (717)) ;
  if (((var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (718))).operator_isNotEqual (var_cas_basename)).isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS checks "
      "the component name ('")).operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (720)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (722)) ;
  }
  GGS_lexicalTypeMap  var_cas_lexicalTypeMap ;
  var_cas_lexicalTypeMap = GGS_lexicalTypeMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (726)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("char"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (727)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (728)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint64"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (729)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (730)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint64"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint64 (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (731)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("double"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_double (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (732)) ;
  GGS_lexicalRoutineMap  var_cas_lexicalRoutineMap ;
  ::routine_buildLexicalRoutineMap (inLexique,  var_cas_lexicalRoutineMap COMMA_SOURCE_FILE_AT_LINE (735)) ;
  GGS_lexicalFunctionMap  var_cas_lexicalFunctionMap ;
  ::routine_buildLexicalFunctionMap (inLexique,  var_cas_lexicalFunctionMap COMMA_SOURCE_FILE_AT_LINE (738)) ;
  GGS_lexiqueAnalysisContext var_cas_lexiqueAnalysisContext ;
  var_cas_lexiqueAnalysisContext = GGS_lexiqueAnalysisContext::constructor_new (var_cas_lexicalRoutineMap, var_cas_lexicalFunctionMap, GGS_lexicalMessageMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_terminalMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_terminalList ::constructor_emptyList (), GGS_lexicalAttributeMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_lexicalExplicitTokenListMapMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_stringset ::constructor_emptySet ()) ;
  {
    GGS_lexicalAttributeList::cEnumerator enumerator_30216 (var_cas_lexiqueComponentRoot.reader_mLexicalAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (750)), true) ;
    const GGS_lexicalAttributeList::cElement * operand_30216 = NULL ;
    while (((operand_30216 = enumerator_30216.nextObject ()))) {
      macroValidPointer (operand_30216) ;
      if ((var_cas_lexicalTypeMap.reader_hasKey (inLexique, operand_30216->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (751)) COMMA_SOURCE_FILE_AT_LINE (751))).isBuiltAndTrue ()) {
        GGS_lexicalTypeEnum var_cas_lexicalType ;
        const GGS_lexicalTypeMap  temp_30387 = var_cas_lexicalTypeMap ;
        if (temp_30387.isBuilt ()) {
          temp_30387 (HERE)->method_searchKey (inLexique, operand_30216->mTypeName, var_cas_lexicalType COMMA_SOURCE_FILE_AT_LINE (753)) ;
        }
        var_cas_lexiqueAnalysisContext.mLexicalAttributeMap.modifier_insertKey (inLexique, operand_30216->mName, var_cas_lexicalType COMMA_SOURCE_FILE_AT_LINE (754)) ;
      }else{
        GGS_string var_cas_m ;
        var_cas_m = GGS_string ("") ;
        var_cas_m.appendCString ("the @") ;
        var_cas_m.dotAssign_operation (operand_30216->mTypeName) ;
        var_cas_m.appendCString (" type is not a valid lexical attribute type; are allowed:") ;
        GGS_bool var_cas_firstLoop ;
        var_cas_firstLoop = GGS_bool (true) ;
        {
          GGS_lexicalTypeMap::cEnumerator enumerator_30689 (var_cas_lexicalTypeMap, true) ;
          const GGS_lexicalTypeMap::cElement * operand_30689 = enumerator_30689.nextObject () ;
          if ((operand_30689 != NULL)) {
            bool _foreach_loop_30689 ;
            do{
              macroValidPointer (operand_30689) ;
              var_cas_m.appendCString (" @") ;
              var_cas_m.dotAssign_operation (operand_30689->mKey) ;
              operand_30689 = enumerator_30689.nextObject () ;
              _foreach_loop_30689 = ((operand_30689 != NULL)) ;
              if (_foreach_loop_30689) {
                var_cas_m.appendCString (",") ;
              }
            }while (_foreach_loop_30689) ;
          }
        }
        operand_30216->mTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_m COMMA_SOURCE_FILE_AT_LINE (765)) ;
      }
    }
  }
  {
    GGS_terminalDeclarationList::cEnumerator enumerator_30899 (var_cas_lexiqueComponentRoot.reader_mTerminalDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (768)), true) ;
    const GGS_terminalDeclarationList::cElement * operand_30899 = NULL ;
    while (((operand_30899 = enumerator_30899.nextObject ()))) {
      macroValidPointer (operand_30899) ;
      GGS_lexicalSentValueList  var_cas_argumentTypeList ;
      var_cas_argumentTypeList = GGS_lexicalSentValueList ::constructor_emptyList () ;
      {
        GGS_lstringlist::cEnumerator enumerator_31036 (operand_30899->mSentAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_31036 = NULL ;
        while (((operand_31036 = enumerator_31036.nextObject ()))) {
          macroValidPointer (operand_31036) ;
          GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
          const GGS_lexicalAttributeMap  temp_31175 = var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (772)) ;
          if (temp_31175.isBuilt ()) {
            temp_31175 (HERE)->method_searchKey (inLexique, operand_31036->mValue, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (772)) ;
          }
          var_cas_argumentTypeList._addAssign_operation (operand_31036->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (773)), var_cas_attributeLexicalType) ;
        }
      }
      var_cas_lexiqueAnalysisContext.mTerminalMap.modifier_insertKey (inLexique, operand_30899->mName, var_cas_argumentTypeList COMMA_SOURCE_FILE_AT_LINE (775)) ;
      var_cas_lexiqueAnalysisContext.mTerminalList._addAssign_operation (operand_30899->mName, var_cas_argumentTypeList, operand_30899->mSyntaxErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (776))) ;
    }
  }
  {
    GGS_lexicalListDeclarationList::cEnumerator enumerator_31519 (var_cas_lexiqueComponentRoot.reader_mLexicalListDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (778)), true) ;
    const GGS_lexicalListDeclarationList::cElement * operand_31519 = NULL ;
    while (((operand_31519 = enumerator_31519.nextObject ()))) {
      macroValidPointer (operand_31519) ;
      GGS_lexicalSentValueList  var_cas_argumentTypeList ;
      var_cas_argumentTypeList = GGS_lexicalSentValueList ::constructor_emptyList () ;
      {
        GGS_lstringlist::cEnumerator enumerator_31659 (operand_31519->mSentAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_31659 = NULL ;
        while (((operand_31659 = enumerator_31659.nextObject ()))) {
          macroValidPointer (operand_31659) ;
          GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
          const GGS_lexicalAttributeMap  temp_31797 = var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (782)) ;
          if (temp_31797.isBuilt ()) {
            temp_31797 (HERE)->method_searchKey (inLexique, operand_31659->mValue, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (782)) ;
          }
          var_cas_argumentTypeList._addAssign_operation (operand_31659->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (783)), var_cas_attributeLexicalType) ;
        }
      }
      GGS_lexicalExplicitTokenListMap  var_cas_lexicalTokenListMap ;
      var_cas_lexicalTokenListMap = GGS_lexicalExplicitTokenListMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_tokenSortedlist  var_cas_tokenSortedlist ;
      var_cas_tokenSortedlist = GGS_tokenSortedlist ::constructor_emptySortedList () ;
      {
        GGS_lexicalListEntryList::cEnumerator enumerator_32077 (operand_31519->mEntryList, true) ;
        const GGS_lexicalListEntryList::cElement * operand_32077 = NULL ;
        while (((operand_32077 = enumerator_32077.nextObject ()))) {
          macroValidPointer (operand_32077) ;
          GGS_string var_cas_syntaxErrorMessage ;
          var_cas_syntaxErrorMessage = operand_31519->mSyntaxErrorMessage.ggs_string ().reader_stringByReplacingStringByString (inLexique, GGS_string ("%K"), operand_32077->mTerminalSpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (788)) COMMA_SOURCE_FILE_AT_LINE (788)) ;
          var_cas_lexiqueAnalysisContext.mTerminalList._addAssign_operation (operand_32077->mTerminalSpelling, var_cas_argumentTypeList, var_cas_syntaxErrorMessage) ;
          var_cas_lexiqueAnalysisContext.mTerminalMap.modifier_insertKey (inLexique, operand_32077->mTerminalSpelling, var_cas_argumentTypeList COMMA_SOURCE_FILE_AT_LINE (790)) ;
          var_cas_lexicalTokenListMap.modifier_insertKey (inLexique, operand_32077->mEntrySpelling, operand_32077->mTerminalSpelling, operand_32077->mFeatureList COMMA_SOURCE_FILE_AT_LINE (791)) ;
          var_cas_tokenSortedlist._addAssign_operation (operand_32077->mEntrySpelling.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (792)), operand_32077->mEntrySpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (792))) ;
        }
      }
      var_cas_lexiqueAnalysisContext.mLexicalTokenListMapMap.modifier_insertKey (inLexique, operand_31519->mName, var_cas_lexicalTokenListMap, var_cas_tokenSortedlist COMMA_SOURCE_FILE_AT_LINE (794)) ;
    }
  }
  {
    GGS_lexicalMessageDeclarationList::cEnumerator enumerator_32791 (var_cas_lexiqueComponentRoot.reader_mLexicalMessageDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (797)), true) ;
    const GGS_lexicalMessageDeclarationList::cElement * operand_32791 = NULL ;
    while (((operand_32791 = enumerator_32791.nextObject ()))) {
      macroValidPointer (operand_32791) ;
      var_cas_lexiqueAnalysisContext.mLexicalMessageMap.modifier_insertKey (inLexique, operand_32791->mMessageName, operand_32791->mMessageValue, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (798)) ;
    }
  }
  {
    GGS_lexicalRuleList::cEnumerator enumerator_33025 (var_cas_lexiqueComponentRoot.reader_mLexicalRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (801)), true) ;
    const GGS_lexicalRuleList::cElement * operand_33025 = NULL ;
    while (((operand_33025 = enumerator_33025.nextObject ()))) {
      macroValidPointer (operand_33025) ;
      const GGS_abstractLexicalRule  temp_33101 = operand_33025->mLexicalRule ;
      if (temp_33101.isBuilt ()) {
        typeCategoryMethod__abstractLexicalRule__checkLexicalRule method = findCategoryMethod__abstractLexicalRule__checkLexicalRule (temp_33101.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_33101 (HERE), var_cas_lexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (802)) ;
        }
      }
    }
  }
  {
    GGS_lexicalMessageMap::cEnumerator enumerator_33223 (var_cas_lexiqueAnalysisContext.reader_mLexicalMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (805)), true) ;
    const GGS_lexicalMessageMap::cElement * operand_33223 = NULL ;
    while (((operand_33223 = enumerator_33223.nextObject ()))) {
      macroValidPointer (operand_33223) ;
      if (((operand_33223->mInfo.mMessageIsUsed).operator_not ()).isBuiltAndTrue ()) {
        operand_33223->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("unused message") COMMA_SOURCE_FILE_AT_LINE (807)) ;
      }
    }
  }
  GGS_string var_cas_lexiqueClassName ;
  var_cas_lexiqueClassName = var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (811)) ;
  if (((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string (".h")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_headerZone2 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (821))), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_headerZone3 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueAnalysisContext.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (826)), var_cas_lexiqueComponentRoot.reader_mLexicalListDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (827))) COMMA_SOURCE_FILE_AT_LINE (814)) ;
  }
  if (((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string (".cpp")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_implementationZone2 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (840)), var_cas_lexiqueAnalysisContext.reader_mLexicalMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (841)), var_cas_lexiqueAnalysisContext.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (842)), var_cas_lexiqueAnalysisContext.reader_mLexicalTokenListMapMap (inLexique COMMA_SOURCE_FILE_AT_LINE (843)), var_cas_lexiqueAnalysisContext.reader_mStringInExplicitRuleSet (inLexique COMMA_SOURCE_FILE_AT_LINE (844)), var_cas_lexiqueComponentRoot.reader_mLexicalRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (845)), var_cas_lexiqueAnalysisContext), GGS_string ("\n"
      "\n"), GGS_string ("\n"
      "\n") COMMA_SOURCE_FILE_AT_LINE (833)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileLexiqueComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_lexiqueCompilation (void) {
 enterCategoryReader__lexicalExpression__generateCode ((typeCategoryReader__lexicalExpression__generateCode) category_reader__lexicalOrExpression__generateCode, gClassInfoFor__lexicalOrExpression.slotID ()) ;
 enterCategoryReader__lexicalExpression__generateCode ((typeCategoryReader__lexicalExpression__generateCode) category_reader__lexicalCharacterIntervalMatch__generateCode, gClassInfoFor__lexicalCharacterIntervalMatch.slotID ()) ;
 enterCategoryReader__lexicalExpression__generateCode ((typeCategoryReader__lexicalExpression__generateCode) category_reader__lexicalStringMatch__generateCode, gClassInfoFor__lexicalStringMatch.slotID ()) ;
 enterCategoryReader__lexicalExpression__generateCode ((typeCategoryReader__lexicalExpression__generateCode) category_reader__lexicalStringNotMatch__generateCode, gClassInfoFor__lexicalStringNotMatch.slotID ()) ;
 enterCategoryReader__lexicalExpression__generateCode ((typeCategoryReader__lexicalExpression__generateCode) category_reader__lexicalCharacterMatch__generateCode, gClassInfoFor__lexicalCharacterMatch.slotID ()) ;
 enterCategoryReader__lexicalExpression__generateCode ((typeCategoryReader__lexicalExpression__generateCode) category_reader__lexicalCharacterSetMatch__generateCode, gClassInfoFor__lexicalCharacterSetMatch.slotID ()) ;
 enterCategoryReader__abstractLexicalRule__generateCode ((typeCategoryReader__abstractLexicalRule__generateCode) category_reader__lexicalImplicitRule__generateCode, gClassInfoFor__lexicalImplicitRule.slotID ()) ;
 enterCategoryReader__abstractLexicalRule__generateCode ((typeCategoryReader__abstractLexicalRule__generateCode) category_reader__lexicalExplicitRule__generateCode, gClassInfoFor__lexicalExplicitRule.slotID ()) ;
 enterCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction ((typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction) category_method__lexicalSendTerminalByDefault__checkLexicalDefaultAction, gClassInfoFor__lexicalSendTerminalByDefault.slotID ()) ;
 enterCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction ((typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction) category_method__lexicalErrorByDefault__checkLexicalDefaultAction, gClassInfoFor__lexicalErrorByDefault.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalOrExpression__checkLexicalExpression, gClassInfoFor__lexicalOrExpression.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalCharacterMatch__checkLexicalExpression, gClassInfoFor__lexicalCharacterMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalCharacterSetMatch__checkLexicalExpression, gClassInfoFor__lexicalCharacterSetMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalCharacterIntervalMatch__checkLexicalExpression, gClassInfoFor__lexicalCharacterIntervalMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalStringMatch__checkLexicalExpression, gClassInfoFor__lexicalStringMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalStringNotMatch__checkLexicalExpression, gClassInfoFor__lexicalStringNotMatch.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalAttributeInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalAttributeInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalCharacterInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalCharacterInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalUnsignedInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalUnsignedInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalCurrentCharacterInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalCurrentCharacterInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalFunctionInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalFunctionInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalAttributeInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalAttributeInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalCharacterInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalCharacterInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalUnsignedInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalUnsignedInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalCurrentCharacterInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalCurrentCharacterInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalFunctionInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalFunctionInputArgument.slotID ()) ;
 enterCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument) category_method__lexicalAttributeInputOutputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalAttributeInputOutputArgument.slotID ()) ;
 enterCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument) category_method__lexicalFormalInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalFormalInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalStructuredSendInstruction__checkLexicalInstruction, gClassInfoFor__lexicalStructuredSendInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalSimpleSendInstruction__checkLexicalInstruction, gClassInfoFor__lexicalSimpleSendInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalRepeatInstruction__checkLexicalInstruction, gClassInfoFor__lexicalRepeatInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalSelectInstruction__checkLexicalInstruction, gClassInfoFor__lexicalSelectInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalRoutineInstruction__checkLexicalInstruction, gClassInfoFor__lexicalRoutineInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalLogInstruction__checkLexicalInstruction, gClassInfoFor__lexicalLogInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalRewindInstruction__checkLexicalInstruction, gClassInfoFor__lexicalRewindInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalDropInstruction__checkLexicalInstruction, gClassInfoFor__lexicalDropInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalTagInstruction__checkLexicalInstruction, gClassInfoFor__lexicalTagInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalErrorInstruction__checkLexicalInstruction, gClassInfoFor__lexicalErrorInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalWarningInstruction__checkLexicalInstruction, gClassInfoFor__lexicalWarningInstruction.slotID ()) ;
 enterCategoryMethod__abstractLexicalRule__checkLexicalRule ((typeCategoryMethod__abstractLexicalRule__checkLexicalRule) category_method__lexicalImplicitRule__checkLexicalRule, gClassInfoFor__lexicalImplicitRule.slotID ()) ;
 enterCategoryMethod__abstractLexicalRule__checkLexicalRule ((typeCategoryMethod__abstractLexicalRule__checkLexicalRule) category_method__lexicalExplicitRule__checkLexicalRule, gClassInfoFor__lexicalExplicitRule.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_lexiqueCompilation (prologueRoutineFor_lexiqueCompilation,
                                   NULL) ;

//---------------------------------------------------------------------------*

