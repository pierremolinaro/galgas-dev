//-----------------------------------------------------------------------------*
//                                                                             *
//                       File 'lexiqueCompilation.cpp'                         *
//                         Generated by version 2.7.0                          *
//                       august 6th, 2014, at 10h52'32"                        *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//-----------------------------------------------------------------------------*

#include "lexiqueLL1grammar.h"
#include "galgas_cli_options.h"
#include "lexiqueCompilation.h"


//-----------------------------------------------------------------------------*
//                                                                             *
//                  Filewrapper 'lexiqueGenerationTemplates'                   *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_lexiqueGenerationTemplates_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_lexiqueGenerationTemplates_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_lexiqueGenerationTemplates (
  "",
  0,
  gWrapperAllFiles_lexiqueGenerationTemplates_0,
  0,
  gWrapperAllDirectories_lexiqueGenerationTemplates_0
) ;


//-----------------------------------------------------------------------------*
//                                                                             *
//      Filewrapper template 'lexiqueGenerationTemplates newHeaderZone2'       *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_newHeaderZone_32_ (C_Compiler * inCompiler,
                                                                                const GALGAS_string & in_LEXIQUE_5F_IDENTIFIER,
                                                                                const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT,
                                                                                const GALGAS_galgas_33_LexiqueComponentListAST_2D_element & in_LEXIQUE_5F_COMPONENT_5F_ROOT
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "\n"
    "#ifndef " ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "_CLASS_DEFINED\n"
    "#define " ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "_CLASS_DEFINED\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "#include \"galgas2/C_Lexique.h\"\n"
    "#include \"galgas2/predefined-types.h\"\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                    E X T E R N    R O U T I N E S                           *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_713_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalRoutineMessageMap (SOURCE_FILE ("lexique_header_template_zone_2.new.h.gTemplate", 16)).isValid ()) {
    cEnumerator_lexicalRoutineMap enumerator_713 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalRoutineMessageMap (SOURCE_FILE ("lexique_header_template_zone_2.new.h.gTemplate", 16)), kEnumeration_up) ;
    while (enumerator_713.hasCurrentObject ()) {
      const enumGalgasBool test_0 = enumerator_713.current_mIsExtern (HERE).boolEnum () ;
      if (kBoolTrue == test_0) {
        result << "\n"
          "void scanner_routine_" ;
        result << enumerator_713.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_header_template_zone_2.new.h.gTemplate", 18)).stringValue () ;
        result << " (C_Lexique & inLexique" ;
        GALGAS_uint index_857_ (0) ;
        if (enumerator_713.current_mLexicalRoutineFormalArgumentList (HERE).isValid ()) {
          cEnumerator_lexicalRoutineFormalArgumentList enumerator_857 (enumerator_713.current_mLexicalRoutineFormalArgumentList (HERE), kEnumeration_up) ;
          while (enumerator_857.hasCurrentObject ()) {
            result << ",\n"
              "                " ;
            result << categoryReader_cppConstInFormalArgument (enumerator_857.current_mLexicalFormalArgumentMode (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_header_template_zone_2.new.h.gTemplate", 20)).stringValue () ;
            result << categoryReader_cppTypeName (enumerator_857.current_mLexicalFormalArgumentType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_header_template_zone_2.new.h.gTemplate", 21)).stringValue () ;
            result << categoryReader_cppReferenceInFormalArgument (enumerator_857.current_mLexicalFormalArgumentMode (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_header_template_zone_2.new.h.gTemplate", 22)).stringValue () ;
            result << " " ;
            result << enumerator_857.current_mArgumentNameForComment (HERE).stringValue () ;
            index_857_.increment () ;
            enumerator_857.gotoNextObject () ;
          }
        }
        GALGAS_uint index_1202_ (0) ;
        if (enumerator_713.current_mErrorMessageList (HERE).isValid ()) {
          cEnumerator_stringlist enumerator_1202 (enumerator_713.current_mErrorMessageList (HERE), kEnumeration_up) ;
          while (enumerator_1202.hasCurrentObject ()) {
            result << ",\n"
              "                const char * " ;
            result << enumerator_1202.current_mValue (HERE).stringValue () ;
            index_1202_.increment () ;
            enumerator_1202.gotoNextObject () ;
          }
        }
        result << ") ;\n" ;
      }else if (kBoolFalse == test_0) {
      }
      index_713_.increment () ;
      enumerator_713.gotoNextObject () ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                    E X T E R N    F U N C T I O N S                         *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_1759_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalFunctionMap (SOURCE_FILE ("lexique_header_template_zone_2.new.h.gTemplate", 38)).isValid ()) {
    cEnumerator_lexicalFunctionMap enumerator_1759 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalFunctionMap (SOURCE_FILE ("lexique_header_template_zone_2.new.h.gTemplate", 38)), kEnumeration_up) ;
    while (enumerator_1759.hasCurrentObject ()) {
      const enumGalgasBool test_1 = enumerator_1759.current_mIsExtern (HERE).boolEnum () ;
      if (kBoolTrue == test_1) {
        result << "\n" ;
        result << categoryReader_cppTypeName (enumerator_1759.current_mReturnedLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_header_template_zone_2.new.h.gTemplate", 40)).stringValue () ;
        result << " scanner_function_" ;
        result << enumerator_1759.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_header_template_zone_2.new.h.gTemplate", 40)).stringValue () ;
        result << " (C_Lexique & inLexique" ;
        GALGAS_uint index_1920_ (0) ;
        if (enumerator_1759.current_mLexicalTypeList (HERE).isValid ()) {
          cEnumerator_lexicalFunctionFormalArgumentList enumerator_1920 (enumerator_1759.current_mLexicalTypeList (HERE), kEnumeration_up) ;
          while (enumerator_1920.hasCurrentObject ()) {
            result << ",\n"
              "                const " ;
            result << categoryReader_cppTypeName (enumerator_1920.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_header_template_zone_2.new.h.gTemplate", 42)).stringValue () ;
            result << " " ;
            result << enumerator_1920.current_mArgumentNameForComment (HERE).stringValue () ;
            index_1920_.increment () ;
            enumerator_1920.gotoNextObject () ;
          }
        }
        result << ") ;\n" ;
      }else if (kBoolFalse == test_1) {
      }
      index_1759_.increment () ;
      enumerator_1759.gotoNextObject () ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                       T O K E N    C L A S S                                *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "class cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " : public cToken {\n" ;
  GALGAS_uint index_2575_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE ("lexique_header_template_zone_2.new.h.gTemplate", 56)).isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_2575 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE ("lexique_header_template_zone_2.new.h.gTemplate", 56)), kEnumeration_up) ;
    while (enumerator_2575.hasCurrentObject ()) {
      result << "  public : " ;
      result << categoryReader_cppTypeName (enumerator_2575.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_header_template_zone_2.new.h.gTemplate", 57)).stringValue () ;
      result << " mLexicalAttribute_" ;
      result << enumerator_2575.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_header_template_zone_2.new.h.gTemplate", 57)).stringValue () ;
      result << " ;\n" ;
      index_2575_.increment () ;
      enumerator_2575.gotoNextObject () ;
    }
  }
  result << "\n"
    "  public : cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (void) ;\n"
    "} ;\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                     S C A N N E R    C L A S S                              *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "class C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " : public C_Lexique {\n"
    "//--- Constructors\n"
    "  public : C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (C_Compiler * inCallerCompiler,\n"
    "                       const C_String & inDependencyFileExtension,\n"
    "                       const C_String & inDependencyFilePath,\n"
    "                       const C_String & inSourceFileName\n"
    "                       COMMA_LOCATION_ARGS) ;\n"
    "\n"
    "  public : C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (C_Compiler * inCallerCompiler,\n"
    "                       const C_String & inSourceString,\n"
    "                       const C_String & inStringForError\n"
    "                       COMMA_LOCATION_ARGS) ;\n"
    "\n"
    "//--- Instrospection\n"
    "  public : static GALGAS_stringlist symbols (LOCATION_ARGS) ;\n"
    "\n"
    "//--- Declaring a protected virtual destructor enables the compiler to raise\n"
    "//    an error if a direct delete is performed; only the static method\n"
    "//    C_SharedObject::detachPointer may invoke delete.\n"
    "  #ifndef DO_NOT_GENERATE_CHECKINGS\n"
    "    protected : virtual ~ C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (void) {}\n"
    "  #endif\n" ;
  const enumGalgasBool test_2 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_header_template_zone_2.new.h.gTemplate", 91)).reader_length (SOURCE_FILE ("lexique_header_template_zone_2.new.h.gTemplate", 91)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_2) {
    result << "\n"
      "//--- Scanner mode for template scanner\n"
      "  private : int32_t mMatchedTemplateDelimiterIndex ;\n" ;
  }else if (kBoolFalse == test_2) {
  }
  result << "\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//      Filewrapper template 'lexiqueGenerationTemplates newHeaderZone3'       *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_newHeaderZone_33_ (C_Compiler * inCompiler,
                                                                                const GALGAS_string & in_LEXIQUE_5F_IDENTIFIER,
                                                                                const GALGAS_lexicalListDeclarationListAST & in_DELIMITOR_5F_LIST_5F_LIST,
                                                                                const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT,
                                                                                const GALGAS_indexingListAST & in_INDEXING_5F_LIST
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "\n"
    "//--- Terminal symbols enumeration\n"
    "  public : enum {kToken_" ;
  GALGAS_uint index_116_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_header_template_zone_3.new.h.gTemplate", 4)).isValid ()) {
    cEnumerator_terminalList enumerator_116 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_header_template_zone_3.new.h.gTemplate", 4)), kEnumeration_up) ;
    while (enumerator_116.hasCurrentObject ()) {
      result << ",\n"
        "   kToken_" ;
      result << enumerator_116.current_mTerminalName (HERE).reader_string (SOURCE_FILE ("lexique_header_template_zone_3.new.h.gTemplate", 5)).reader_identifierRepresentation (SOURCE_FILE ("lexique_header_template_zone_3.new.h.gTemplate", 5)).stringValue () ;
      index_116_.increment () ;
      enumerator_116.gotoNextObject () ;
    }
  }
  result << "} ;\n" ;
  GALGAS_uint index_239_ (0) ;
  if (in_DELIMITOR_5F_LIST_5F_LIST.isValid ()) {
    cEnumerator_lexicalListDeclarationListAST enumerator_239 (in_DELIMITOR_5F_LIST_5F_LIST, kEnumeration_up) ;
    while (enumerator_239.hasCurrentObject ()) {
      result << "\n"
        "//--- Key words table '" ;
      result << enumerator_239.current_mName (HERE).reader_string (SOURCE_FILE ("lexique_header_template_zone_3.new.h.gTemplate", 10)).stringValue () ;
      result << "'\n"
        "  public : static int16_t search_into_" ;
      result << enumerator_239.current_mName (HERE).reader_string (SOURCE_FILE ("lexique_header_template_zone_3.new.h.gTemplate", 11)).stringValue () ;
      result << " (const C_String & inSearchedString) ;\n" ;
      index_239_.increment () ;
      enumerator_239.gotoNextObject () ;
    }
  }
  result << "  \n"
    "\n"
    "//--- Assign from attribute\n" ;
  GALGAS_uint index_495_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE ("lexique_header_template_zone_3.new.h.gTemplate", 17)).isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_495 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE ("lexique_header_template_zone_3.new.h.gTemplate", 17)), kEnumeration_up) ;
    while (enumerator_495.hasCurrentObject ()) {
      result << "  public : GALGAS_l" ;
      result << categoryReader_lexicalTypeBaseName (enumerator_495.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_header_template_zone_3.new.h.gTemplate", 18)).reader_identifierRepresentation (SOURCE_FILE ("lexique_header_template_zone_3.new.h.gTemplate", 18)).stringValue () ;
      result << " synthetizedAttribute_" ;
      result << enumerator_495.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_header_template_zone_3.new.h.gTemplate", 18)).stringValue () ;
      result << " (void) const ;\n" ;
      index_495_.increment () ;
      enumerator_495.gotoNextObject () ;
    }
  }
  result << "\n"
    "\n"
    "//--- Attribute access\n" ;
  GALGAS_uint index_753_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE ("lexique_header_template_zone_3.new.h.gTemplate", 24)).isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_753 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE ("lexique_header_template_zone_3.new.h.gTemplate", 24)), kEnumeration_up) ;
    while (enumerator_753.hasCurrentObject ()) {
      result << "  public : " ;
      result << categoryReader_cppTypeName (enumerator_753.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_header_template_zone_3.new.h.gTemplate", 25)).stringValue () ;
      result << " attributeValue_" ;
      result << enumerator_753.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_header_template_zone_3.new.h.gTemplate", 25)).stringValue () ;
      result << " (void) const ;\n" ;
      index_753_.increment () ;
      enumerator_753.gotoNextObject () ;
    }
  }
  result << "\n"
    "\n"
    "//--- Indexing keys\n" ;
  GALGAS_uint index_956_ (0) ;
  if (in_INDEXING_5F_LIST.isValid ()) {
    cEnumerator_indexingListAST enumerator_956 (in_INDEXING_5F_LIST, kEnumeration_up) ;
    const bool nonEmpty_enumerator_956 = enumerator_956.hasCurrentObject () ;
    if (nonEmpty_enumerator_956) {
      result << "  public : enum {" ;
    }
    while (enumerator_956.hasCurrentObject ()) {
      result << "\n"
        "    kIndexing_" ;
      result << enumerator_956.current_mIndexName (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_header_template_zone_3.new.h.gTemplate", 33)).stringValue () ;
      if (enumerator_956.hasNextObject ()) {
        result << "," ;
      }
      index_956_.increment () ;
      enumerator_956.gotoNextObject () ;
    }
    if (nonEmpty_enumerator_956) {
      result << "\n"
        "  } ;\n" ;
    }
  }
  result << "\n"
    "//--- Indexing directory\n"
    "  protected : virtual C_String indexingDirectory (void) const ;\n"
    "\n"
    "//--- Parse lexical token\n"
    "  protected : virtual bool parseLexicalToken (void) ;\n"
    "\n"
    "//--- Get terminal message\n"
    "  protected : virtual C_String getMessageForTerminal (const int16_t inTerminalSymbol) const ;\n"
    "\n"
    "//--- Get terminal count\n"
    "  public : virtual int16_t terminalVocabularyCount (void) const { return " ;
  result << in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_header_template_zone_3.new.h.gTemplate", 48)).reader_length (SOURCE_FILE ("lexique_header_template_zone_3.new.h.gTemplate", 48)).reader_string (SOURCE_FILE ("lexique_header_template_zone_3.new.h.gTemplate", 48)).stringValue () ;
  result << " ; }\n"
    "\n"
    "//--- Get Token String\n"
    "  public : virtual C_String getCurrentTokenString (const cToken * inTokenPtr) const ;\n"
    "\n"
    "//--- Enter Token\n"
    "  protected : void enterToken (const cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " & inToken) ;\n"
    "} ;\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "#endif\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//Filewrapper template 'lexiqueGenerationTemplates newImplementationZone2Galgas3'*
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_newImplementationZone_32_Galgas_33_ (C_Compiler * inCompiler,
                                                                                                  const GALGAS_string & in_LEXIQUE_5F_IDENTIFIER,
                                                                                                  const GALGAS_lexicalAttributeMap & in_LEXICAL_5F_ATTRIBUTE_5F_MAP,
                                                                                                  const GALGAS_lexicalMessageMap & in_LEXICAL_5F_MESSAGE_5F_MAP,
                                                                                                  const GALGAS_terminalList & in_TERMINAL_5F_LIST,
                                                                                                  const GALGAS_lexicalExplicitTokenListMapMap & in_LEXICAL_5F_TOKEN_5F_LIST_5F_MAP,
                                                                                                  const GALGAS_stringset & in_STRINGS_5F_IN_5F_EXPLICIT_5F_RULES,
                                                                                                  const GALGAS_lexicalRuleListAST & in_LEXICAL_5F_RULE_5F_LIST,
                                                                                                  const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT,
                                                                                                  const GALGAS_galgas_33_LexiqueComponentListAST_2D_element & in_LEXIQUE_5F_COMPONENT_5F_ROOT
                                                                                                  COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "#include <ctype.h>\n"
    "#include <string.h>\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "#include \"utilities/MF_MemoryControl.h\"\n"
    "#include \"strings/unicode_character_cpp.h\"\n"
    "#include \"galgas2/scanner_actions.h\"\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "#include \"lexique-" ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.mAttribute_mLexiqueComponentName.mAttribute_string.stringValue () ;
  result << ".h\"\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "#ifndef DO_NOT_GENERATE_CHECKINGS\n"
    "  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFilePath ().cString (HERE), lineNumber ()\n"
    "  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE\n"
    "#else\n"
    "  #define LINE_AND_SOURCE_FILE\n"
    "  #define COMMA_LINE_AND_SOURCE_FILE\n"
    "#endif\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                               Constructors                                  *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (void)" ;
  GALGAS_uint index_1286_ (0) ;
  if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_1286 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
    const bool nonEmpty_enumerator_1286 = enumerator_1286.hasCurrentObject () ;
    if (nonEmpty_enumerator_1286) {
      result << " :\n" ;
    }
    while (enumerator_1286.hasCurrentObject ()) {
      result << "mLexicalAttribute_" ;
      result << enumerator_1286.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 33)).stringValue () ;
      result << " ()" ;
      if (enumerator_1286.hasNextObject ()) {
        result << ",\n" ;
      }
      index_1286_.increment () ;
      enumerator_1286.gotoNextObject () ;
    }
  }
  result << " {\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (C_Compiler * inCallerCompiler,\n"
    "                const C_String & inDependencyFileExtension,\n"
    "                const C_String & inDependencyFilePath,\n"
    "                const C_String & inSourceFileName\n"
    "                COMMA_LOCATION_ARGS) :\n"
    "C_Lexique (inCallerCompiler, inDependencyFileExtension, inDependencyFilePath, inSourceFileName COMMA_THERE)" ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 47)).reader_length (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 47)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    result << ",\n"
      "mMatchedTemplateDelimiterIndex (-1)" ;
  }else if (kBoolFalse == test_0) {
  }
  result << " {\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (C_Compiler * inCallerCompiler,\n"
    "                const C_String & inSourceString,\n"
    "                const C_String & inStringForError\n"
    "                COMMA_LOCATION_ARGS) :\n"
    "C_Lexique (inCallerCompiler, inSourceString, inStringForError COMMA_THERE)" ;
  const enumGalgasBool test_1 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 60)).reader_length (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 60)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_1) {
    result << ",\n"
      "mMatchedTemplateDelimiterIndex (-1)" ;
  }else if (kBoolFalse == test_1) {
  }
  result << " {\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                 I N D E X I N G    D I R E C T O R Y                        *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "C_String C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::indexingDirectory (void) const {\n"
    "  return " ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mIndexingDirectory (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 73)).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 73)).stringValue () ;
  result << " ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                        Lexical error message list                           *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_3519_ (0) ;
  if (in_LEXICAL_5F_MESSAGE_5F_MAP.isValid ()) {
    cEnumerator_lexicalMessageMap enumerator_3519 (in_LEXICAL_5F_MESSAGE_5F_MAP, kEnumeration_up) ;
    while (enumerator_3519.hasCurrentObject ()) {
      result << "\n"
        "static const utf32 gLexicalMessage_" ;
      result << enumerator_3519.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 83)).stringValue () ;
      result << " [] = " ;
      result << enumerator_3519.current_mLexicalMessage (HERE).mAttribute_string.reader_utf_33__32_Representation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 83)).stringValue () ;
      result << " ;\n" ;
      index_3519_.increment () ;
      enumerator_3519.gotoNextObject () ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//          Syntax error messages, for every terminal symbol                   *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_4071_ (0) ;
  if (in_TERMINAL_5F_LIST.isValid ()) {
    cEnumerator_terminalList enumerator_4071 (in_TERMINAL_5F_LIST, kEnumeration_up) ;
    while (enumerator_4071.hasCurrentObject ()) {
      result << "\n"
        "//--- Syntax error message for terminal '$" ;
      result << enumerator_4071.current_mTerminalName (HERE).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 93)).stringValue () ;
      result << "$' :\n"
        "static const utf32 gSyntaxErrorMessage_" ;
      result << enumerator_4071.current_mTerminalName (HERE).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 94)).reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 94)).stringValue () ;
      result << " [] = " ;
      result << enumerator_4071.current_mSyntaxErrorMessage (HERE).reader_utf_33__32_Representation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 94)).stringValue () ;
      result << " ;\n" ;
      index_4071_.increment () ;
      enumerator_4071.gotoNextObject () ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                getMessageForTerminal                                        *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "C_String C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::getMessageForTerminal (const int16_t inTerminalIndex) const {\n"
    "  static const utf32 * syntaxErrorMessageArray [" ;
  result << in_TERMINAL_5F_LIST.reader_length (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 104)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 104)).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 104)).stringValue () ;
  result << "] = {kEndOfSourceLexicalErrorMessage" ;
  GALGAS_uint index_4972_ (0) ;
  if (in_TERMINAL_5F_LIST.isValid ()) {
    cEnumerator_terminalList enumerator_4972 (in_TERMINAL_5F_LIST, kEnumeration_up) ;
    while (enumerator_4972.hasCurrentObject ()) {
      result << ",\n"
        "    gSyntaxErrorMessage_" ;
      result << enumerator_4972.current_mTerminalName (HERE).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 106)).reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 106)).stringValue () ;
      index_4972_.increment () ;
      enumerator_4972.gotoNextObject () ;
    }
  }
  result << "} ;\n"
    "  return syntaxErrorMessageArray [inTerminalIndex] ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                      U N I C O D E    S T R I N G S                         *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_5568_ (0) ;
  if (in_STRINGS_5F_IN_5F_EXPLICIT_5F_RULES.isValid ()) {
    cEnumerator_stringset enumerator_5568 (in_STRINGS_5F_IN_5F_EXPLICIT_5F_RULES, kEnumeration_up) ;
    while (enumerator_5568.hasCurrentObject ()) {
      const enumGalgasBool test_2 = GALGAS_bool (kIsStrictSup, enumerator_5568.current_key (HERE).reader_length (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 119)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
      if (kBoolTrue == test_2) {
        result << "\n"
          "//--- Unicode string for '$" ;
        result << enumerator_5568.current_key (HERE).reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 120)).stringValue () ;
        result << "$'\n"
          "static const utf32 kUnicodeString_" ;
        result << enumerator_5568.current_key (HERE).reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 121)).stringValue () ;
        result << " [] = " ;
        result << enumerator_5568.current_key (HERE).reader_utf_33__32_Representation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 121)).stringValue () ;
        result << " ;\n" ;
      }else if (kBoolFalse == test_2) {
      }
      index_5568_.increment () ;
      enumerator_5568.gotoNextObject () ;
    }
  }
  result << "\n" ;
  GALGAS_uint index_5846_ (0) ;
  if (in_LEXICAL_5F_TOKEN_5F_LIST_5F_MAP.isValid ()) {
    cEnumerator_lexicalExplicitTokenListMapMap enumerator_5846 (in_LEXICAL_5F_TOKEN_5F_LIST_5F_MAP, kEnumeration_up) ;
    while (enumerator_5846.hasCurrentObject ()) {
      result << "//-----------------------------------------------------------------------------*\n"
        "//                                                                             *\n"
        "//             Key words table '" ;
      result << enumerator_5846.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 129)).stringValue () ;
      result << "'                            *\n"
        "//                                                                             *\n"
        "//-----------------------------------------------------------------------------*\n"
        "\n"
        "static const int32_t ktable_size_" ;
      result << enumerator_5846.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 132)).stringValue () ;
      result << " = " ;
      result << enumerator_5846.current_mExplicitTokenListMap (HERE).reader_count (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 132)).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 132)).stringValue () ;
      result << " ;\n"
        "\n"
        "static const C_unicode_lexique_table_entry ktable_for_" ;
      result << enumerator_5846.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 133)).stringValue () ;
      result << " [ktable_size_" ;
      result << enumerator_5846.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 133)).stringValue () ;
      result << "] = {\n" ;
      GALGAS_uint index_6611_ (0) ;
      if (enumerator_5846.current_mTokenSortedList (HERE).isValid ()) {
        cEnumerator_tokenSortedlist enumerator_6611 (enumerator_5846.current_mTokenSortedList (HERE), kEnumeration_up) ;
        while (enumerator_6611.hasCurrentObject ()) {
          result << "  C_unicode_lexique_table_entry (kUnicodeString_" ;
          result << enumerator_6611.current_mName (HERE).reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 135)).stringValue () ;
          result << ", " ;
          result << enumerator_6611.current_mLength (HERE).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 135)).stringValue () ;
          result << ", C_Lexique_" ;
          result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
          result << "::kToken_" ;
          result << enumerator_6611.current_mTerminalName (HERE).reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 135)).stringValue () ;
          result << ")" ;
          if (enumerator_6611.hasNextObject ()) {
            result << ",\n" ;
          }
          index_6611_.increment () ;
          enumerator_6611.gotoNextObject () ;
        }
      }
      result << "\n"
        "} ;\n"
        "\n"
        "int16_t C_Lexique_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << "::search_into_" ;
      result << enumerator_5846.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 139)).stringValue () ;
      result << " (const C_String & inSearchedString) {\n"
        "  return searchInList (inSearchedString, ktable_for_" ;
      result << enumerator_5846.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 140)).stringValue () ;
      result << ", ktable_size_" ;
      result << enumerator_5846.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 140)).stringValue () ;
      result << ") ;\n"
        "}\n"
        "\n" ;
      index_5846_.increment () ;
      enumerator_5846.gotoNextObject () ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                          getCurrentTokenString                              *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "C_String C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::getCurrentTokenString (const cToken * inTokenPtr) const {\n"
    "  const cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " * ptr = (const cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " *) inTokenPtr ;\n"
    "  C_String s ;\n"
    "  if (ptr == NULL) {\n"
    "    s.appendCString(\"$$\") ;\n"
    "  }else{\n"
    "    switch (ptr->mTokenCode) {\n"
    "    case kToken_:\n"
    "      s.appendCString(\"$$\") ;\n"
    "      break ;\n" ;
  GALGAS_uint index_7927_ (0) ;
  if (in_TERMINAL_5F_LIST.isValid ()) {
    cEnumerator_terminalList enumerator_7927 (in_TERMINAL_5F_LIST, kEnumeration_up) ;
    while (enumerator_7927.hasCurrentObject ()) {
      result << "    case kToken_" ;
      result << enumerator_7927.current_mTerminalName (HERE).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 161)).reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 161)).stringValue () ;
      result << ":\n"
        "      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;\n"
        "      s.appendCString (" ;
      result << enumerator_7927.current_mTerminalName (HERE).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 163)).reader_utf_38_Representation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 163)).stringValue () ;
      result << ") ;\n"
        "      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;\n" ;
      GALGAS_uint index_8257_ (0) ;
      if (enumerator_7927.current_mSentAttributeList (HERE).isValid ()) {
        cEnumerator_lexicalSentValueList enumerator_8257 (enumerator_7927.current_mSentAttributeList (HERE), kEnumeration_up) ;
        while (enumerator_8257.hasCurrentObject ()) {
          result << "      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;\n"
            "      s." ;
          result << categoryReader_appendMethodName (enumerator_8257.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 167)).stringValue () ;
          result << " (ptr->mLexicalAttribute_" ;
          result << enumerator_8257.current_mLexicalAttributeName (HERE).reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 167)).stringValue () ;
          result << categoryReader_appendArgumentOfMethod (enumerator_8257.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 167)).stringValue () ;
          result << ") ;\n" ;
          index_8257_.increment () ;
          enumerator_8257.gotoNextObject () ;
        }
      }
      result << "      break ;\n" ;
      index_7927_.increment () ;
      enumerator_7927.gotoNextObject () ;
    }
  }
  result << "    default:\n"
    "      break ;\n"
    "    }\n"
    "  }\n"
    "  return s ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                           Template Delimiters                               *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n" ;
  GALGAS_uint index_9205_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 184)).isValid ()) {
    cEnumerator_templateDelimitorList enumerator_9205 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 184)), kEnumeration_up) ;
    const bool nonEmpty_enumerator_9205 = enumerator_9205.hasCurrentObject () ;
    if (nonEmpty_enumerator_9205) {
      result << "static const cTemplateDelimiter kTemplateDefinitionArray [" ;
      result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 185)).reader_length (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 185)).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 185)).stringValue () ;
      result << "] = {\n" ;
    }
    while (enumerator_9205.hasCurrentObject ()) {
      result << "  cTemplateDelimiter (kUnicodeString_" ;
      result << enumerator_9205.current_mStartString (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 186)).stringValue () ;
      result << ", " ;
      result << enumerator_9205.current_mStartString (HERE).mAttribute_string.reader_length (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 186)).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 186)).stringValue () ;
      result << ", " ;
      const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, enumerator_9205.current_mEndString (HERE).mAttribute_string.reader_length (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 187)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
      if (kBoolTrue == test_3) {
        result << "NULL, 0," ;
      }else if (kBoolFalse == test_3) {
        result << "kUnicodeString_" ;
        result << enumerator_9205.current_mEndString (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 190)).stringValue () ;
        result << ", " ;
        result << enumerator_9205.current_mEndString (HERE).mAttribute_string.reader_length (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 190)).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 190)).stringValue () ;
        result << "," ;
      }
      result << " NULL, " ;
      result << enumerator_9205.current_mPreservesStartDelimiter (HERE).operator_not (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 193)).reader_cString (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 193)).stringValue () ;
      result << ")" ;
      if (enumerator_9205.hasNextObject ()) {
        result << ",\n" ;
      }
      index_9205_.increment () ;
      enumerator_9205.gotoNextObject () ;
    }
    if (nonEmpty_enumerator_9205) {
      result << "\n"
        "} ;\n" ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                           Template Replacements                             *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n" ;
  GALGAS_uint index_10244_ (0) ;
  if (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 205)).isValid ()) {
    cEnumerator_templateReplacementListAST enumerator_10244 (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 205)), kEnumeration_up) ;
    const bool nonEmpty_enumerator_10244 = enumerator_10244.hasCurrentObject () ;
    if (nonEmpty_enumerator_10244) {
      result << "static const cTemplateDelimiter kTemplateReplacementArray [" ;
      result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 206)).reader_length (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 206)).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 206)).stringValue () ;
      result << "] = {\n" ;
    }
    while (enumerator_10244.hasCurrentObject ()) {
      result << "  cTemplateDelimiter (kUnicodeString_" ;
      result << enumerator_10244.current_mMatchString (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 208)).stringValue () ;
      result << ", " ;
      result << enumerator_10244.current_mMatchString (HERE).mAttribute_string.reader_length (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 208)).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 208)).stringValue () ;
      result << ", kUnicodeString_" ;
      result << enumerator_10244.current_mReplacementString (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 209)).stringValue () ;
      result << ", " ;
      result << enumerator_10244.current_mReplacementString (HERE).mAttribute_string.reader_length (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 209)).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 209)).stringValue () ;
      result << ", " ;
      const enumGalgasBool test_4 = GALGAS_bool (kIsEqual, enumerator_10244.current_mReplacementFunction (HERE).mAttribute_string.reader_length (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 210)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
      if (kBoolTrue == test_4) {
        result << "NULL" ;
      }else if (kBoolFalse == test_4) {
        result << "scanner_routine_" ;
        result << enumerator_10244.current_mReplacementFunction (HERE).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 213)).stringValue () ;
      }
      result << ", true)" ;
      if (enumerator_10244.hasNextObject ()) {
        result << ",\n" ;
      }
      index_10244_.increment () ;
      enumerator_10244.gotoNextObject () ;
    }
    if (nonEmpty_enumerator_10244) {
      result << "\n"
        "} ;\n" ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//            Terminal Symbols as end of script in template mark               *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n" ;
  const enumGalgasBool test_5 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 226)).reader_length (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 226)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_5) {
    GALGAS_uint index_11358_ (0) ;
    if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 227)).isValid ()) {
      cEnumerator_terminalList enumerator_11358 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 227)), kEnumeration_up) ;
      const bool nonEmpty_enumerator_11358 = enumerator_11358.hasCurrentObject () ;
      if (nonEmpty_enumerator_11358) {
        result << "static const bool kEndOfScriptInTemplateArray [" ;
        result << in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 228)).reader_length (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 228)).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 228)).stringValue () ;
        result << "] = {\n" ;
      }
      while (enumerator_11358.hasCurrentObject ()) {
        result << "  " ;
        result << enumerator_11358.current_mIsEndOfTemplateMark (HERE).reader_cString (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 229)).stringValue () ;
        result << " /* " ;
        result << enumerator_11358.current_mTerminalName (HERE).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 229)).stringValue () ;
        result << " */" ;
        if (enumerator_11358.hasNextObject ()) {
          result << ",\n" ;
        }
        index_11358_.increment () ;
        enumerator_11358.gotoNextObject () ;
      }
      if (nonEmpty_enumerator_11358) {
        result << "\n"
          "} ;\n" ;
      }
    }
  }else if (kBoolFalse == test_5) {
  }
  result << "\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//               P A R S E    L E X I C A L    T O K E N                       *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "bool C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::parseLexicalToken (void) {\n"
    "  cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " token ;\n"
    "  mLoop = true ;\n"
    "  token.mTokenCode = -1 ;\n"
    "  while ((token.mTokenCode < 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n" ;
  const enumGalgasBool test_6 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 248)).reader_length (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 248)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_6) {
    result << "    if ((mMatchedTemplateDelimiterIndex >= 0)\n"
      "     && (kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength > 0)\n"
      "     && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n"
      "      const bool foundEndDelimitor = testForInputUTF32String (kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndString,\n"
      "                                                              kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength,\n"
      "                                                              true) ;\n"
      "      if (foundEndDelimitor) {\n"
      "        mMatchedTemplateDelimiterIndex = -1 ;\n"
      "      }\n"
      "    }\n"
      "    while ((mMatchedTemplateDelimiterIndex < 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n"
      "      int32_t replacementIndex = 0 ;\n"
      "      while (replacementIndex >= 0) {\n"
      "        replacementIndex = findTemplateDelimiterIndex (kTemplateReplacementArray, " ;
    result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 262)).reader_length (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 262)).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 262)).stringValue () ;
    result << ") ;\n"
      "        if (replacementIndex >= 0) {\n"
      "          if (kTemplateReplacementArray [replacementIndex].mReplacementFunction == NULL) {\n"
      "            token.mTemplateStringBeforeToken << kTemplateReplacementArray [replacementIndex].mEndString ;\n"
      "          }else{\n"
      "            C_String s ;\n"
      "            while (notTestForInputUTF32String (kTemplateReplacementArray [replacementIndex].mEndString,\n"
      "                                               kTemplateReplacementArray [replacementIndex].mEndStringLength,\n"
      "                                               kEndOfSourceLexicalErrorMessage\n"
      "                                               COMMA_HERE)) {\n"
      "              s.appendUnicodeCharacter (previousChar () COMMA_HERE) ;\n"
      "            }\n"
      "            kTemplateReplacementArray [replacementIndex].mReplacementFunction (*this, s, token.mTemplateStringBeforeToken) ;\n"
      "          }\n"
      "        }\n"
      "      }\n"
      "      mMatchedTemplateDelimiterIndex = findTemplateDelimiterIndex (kTemplateDefinitionArray, " ;
    result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 278)).reader_length (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 278)).reader_string (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 278)).stringValue () ;
    result << ") ;\n"
      "      if (mMatchedTemplateDelimiterIndex < 0) {\n"
      "        token.mTemplateStringBeforeToken.appendUnicodeCharacter (mCurrentChar COMMA_HERE) ;\n"
      "        advance () ;\n"
      "      }\n"
      "    }\n"
      "    if ((mMatchedTemplateDelimiterIndex >= 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n" ;
    GALGAS_uint index_14471_ (0) ;
    if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
      cEnumerator_lexicalAttributeMap enumerator_14471 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
      while (enumerator_14471.hasCurrentObject ()) {
        result << "    token.mLexicalAttribute_" ;
        result << enumerator_14471.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 286)).stringValue () ;
        result << categoryReader_initialization (enumerator_14471.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 286)).stringValue () ;
        result << " ;\n" ;
        index_14471_.increment () ;
        enumerator_14471.gotoNextObject () ;
      }
    }
    result << "    mTokenStartLocation = mCurrentLocation ;\n"
      "    try{\n" ;
    if (GALGAS_uint ((uint32_t) 8U).isValid ()) {
      result.incIndentation ((int32_t) GALGAS_uint ((uint32_t) 8U).uintValue ()) ;
    }
    GALGAS_uint index_14684_ (0) ;
    if (in_LEXICAL_5F_RULE_5F_LIST.isValid ()) {
      cEnumerator_lexicalRuleListAST enumerator_14684 (in_LEXICAL_5F_RULE_5F_LIST, kEnumeration_up) ;
      while (enumerator_14684.hasCurrentObject ()) {
        result << callCategoryReader_generateCode ((const cPtr_abstractLexicalRuleAST *) enumerator_14684.current_mLexicalRule (HERE).ptr (), in_LEXIQUE_5F_IDENTIFIER, in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT, inCompiler COMMA_SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 293)).stringValue () ;
        index_14684_.increment () ;
        enumerator_14684.gotoNextObject () ;
      }
    }
    if (GALGAS_uint ((uint32_t) 8U).isValid ()) {
      result.incIndentation (- ((int32_t) GALGAS_uint ((uint32_t) 8U).uintValue ())) ;
    }
    result << "if (testForInputUTF32Char (TO_UNICODE ('\\0'))) { // End of source text \? \n"
      "          token.mTokenCode = kToken_ ; // Empty string code\n"
      "        }else{ // Unknown input character\n"
      "          unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;\n"
      "        }\n"
      "      }catch (const C_lexicalErrorException &) {\n"
      "        token.mTokenCode = -1 ; // No token\n"
      "        advance () ; // ... go throught unknown character\n"
      "      }\n"
      "    }\n"
      "    if ((token.mTokenCode > 0) && kEndOfScriptInTemplateArray [token.mTokenCode - 1]) {\n"
      "      mMatchedTemplateDelimiterIndex = -1 ;\n"
      "    }\n"
      "  " ;
  }else if (kBoolFalse == test_6) {
    GALGAS_uint index_15382_ (0) ;
    if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
      cEnumerator_lexicalAttributeMap enumerator_15382 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
      while (enumerator_15382.hasCurrentObject ()) {
        result << "    token.mLexicalAttribute_" ;
        result << enumerator_15382.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 311)).stringValue () ;
        result << categoryReader_initialization (enumerator_15382.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 311)).stringValue () ;
        result << " ;\n" ;
        index_15382_.increment () ;
        enumerator_15382.gotoNextObject () ;
      }
    }
    result << "    mTokenStartLocation = mCurrentLocation ;\n"
      "    try{\n" ;
    if (GALGAS_uint ((uint32_t) 6U).isValid ()) {
      result.incIndentation ((int32_t) GALGAS_uint ((uint32_t) 6U).uintValue ()) ;
    }
    GALGAS_uint index_15595_ (0) ;
    if (in_LEXICAL_5F_RULE_5F_LIST.isValid ()) {
      cEnumerator_lexicalRuleListAST enumerator_15595 (in_LEXICAL_5F_RULE_5F_LIST, kEnumeration_up) ;
      while (enumerator_15595.hasCurrentObject ()) {
        result << callCategoryReader_generateCode ((const cPtr_abstractLexicalRuleAST *) enumerator_15595.current_mLexicalRule (HERE).ptr (), in_LEXIQUE_5F_IDENTIFIER, in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT, inCompiler COMMA_SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 318)).stringValue () ;
        index_15595_.increment () ;
        enumerator_15595.gotoNextObject () ;
      }
    }
    if (GALGAS_uint ((uint32_t) 6U).isValid ()) {
      result.incIndentation (- ((int32_t) GALGAS_uint ((uint32_t) 6U).uintValue ())) ;
    }
    result << "if (testForInputUTF32Char (TO_UNICODE ('\\0'))) { // End of source text \? \n"
      "        token.mTokenCode = kToken_ ; // Empty string code\n"
      "      }else{ // Unknown input character\n"
      "        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;\n"
      "      }\n"
      "    }catch (const C_lexicalErrorException &) {\n"
      "      token.mTokenCode = -1 ; // No token\n"
      "      advance () ; // ... go throught unknown character\n"
      "    }" ;
  }
  result << "\n"
    "  }\n"
    "  if ((UNICODE_VALUE (mCurrentChar) == '\\0') && (token.mTemplateStringBeforeToken.length () > 0)) {\n"
    "    token.mTokenCode = 0 ;\n"
    "    enterToken (token) ;\n"
    "  }\n"
    "  return token.mTokenCode > 0 ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                         E N T E R    T O K E N                              *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "void C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::enterToken (const cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " & inToken) {\n"
    "  cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " * ptr = NULL ;\n"
    "  macroMyNew (ptr, cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " ()) ;\n"
    "  ptr->mTokenCode = inToken.mTokenCode ;\n"
    "  ptr->mStartLocation = mTokenStartLocation ;\n"
    "  ptr->mEndLocation = mTokenEndLocation ;\n"
    "  ptr->mTemplateStringBeforeToken = inToken.mTemplateStringBeforeToken ;\n" ;
  GALGAS_uint index_17142_ (0) ;
  if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_17142 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
    while (enumerator_17142.hasCurrentObject ()) {
      result << "  ptr->mLexicalAttribute_" ;
      result << enumerator_17142.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 353)).stringValue () ;
      result << " = inToken.mLexicalAttribute_" ;
      result << enumerator_17142.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 353)).stringValue () ;
      result << " ;\n" ;
      index_17142_.increment () ;
      enumerator_17142.gotoNextObject () ;
    }
  }
  result << "  enterTokenFromPointer (ptr) ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//               A T T R I B U T E   A C C E S S                               *\n"
    "//                                                                             *\n" ;
  GALGAS_uint index_17678_ (0) ;
  if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_17678 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
    while (enumerator_17678.hasCurrentObject ()) {
      result << "//-----------------------------------------------------------------------------*\n"
        "\n" ;
      result << categoryReader_cppTypeName (enumerator_17678.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 365)).stringValue () ;
      result << " C_Lexique_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << "::attributeValue_" ;
      result << enumerator_17678.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 365)).stringValue () ;
      result << " (void) const {\n"
        "  cTokenFor_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << " * ptr = (cTokenFor_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << " *) mCurrentTokenPtr ;\n"
        "  return ptr->mLexicalAttribute_" ;
      result << enumerator_17678.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 367)).stringValue () ;
      result << " ;\n"
        "}\n"
        "\n" ;
      index_17678_.increment () ;
      enumerator_17678.gotoNextObject () ;
    }
  }
  result << "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//         A S S I G N    F R O M    A T T R I B U T E                         *\n"
    "//                                                                             *\n" ;
  GALGAS_uint index_18465_ (0) ;
  if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_18465 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
    while (enumerator_18465.hasCurrentObject ()) {
      result << "//-----------------------------------------------------------------------------*\n"
        "\n"
        "GALGAS_l" ;
      result << categoryReader_lexicalTypeBaseName (enumerator_18465.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 377)).reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 377)).stringValue () ;
      result << " C_Lexique_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << "::synthetizedAttribute_" ;
      result << enumerator_18465.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 377)).stringValue () ;
      result << " (void) const {\n"
        "  cTokenFor_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << " * ptr = (cTokenFor_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << " *) mCurrentTokenPtr ;\n"
        "  macroValidSharedObject (ptr, cTokenFor_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << ") ;\n"
        "  GALGAS_location currentLocation (ptr->mStartLocation, ptr->mEndLocation, sourceText ()) ;\n"
        "  GALGAS_" ;
      result << categoryReader_lexicalTypeBaseName (enumerator_18465.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 381)).reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 381)).stringValue () ;
      result << " value (ptr->mLexicalAttribute_" ;
      result << enumerator_18465.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 381)).stringValue () ;
      result << ") ;\n"
        "  GALGAS_l" ;
      result << categoryReader_lexicalTypeBaseName (enumerator_18465.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 382)).reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 382)).stringValue () ;
      result << " result (value, currentLocation) ;\n"
        "  return result ;\n"
        "}\n"
        "\n" ;
      index_18465_.increment () ;
      enumerator_18465.gotoNextObject () ;
    }
  }
  result << "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                         I N T R O S P E C T I O N                           *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "GALGAS_stringlist C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::symbols (LOCATION_ARGS) {\n"
    "  GALGAS_stringlist result = GALGAS_stringlist::constructor_emptyList (THERE) ;\n" ;
  GALGAS_uint index_19950_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 394)).isValid ()) {
    cEnumerator_terminalList enumerator_19950 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 394)), kEnumeration_up) ;
    while (enumerator_19950.hasCurrentObject ()) {
      result << "  result.addAssign_operation (GALGAS_string (" ;
      result << enumerator_19950.current_mTerminalName (HERE).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE ("lexique_implementation-galgas3.cpp.gTemplate", 395)).stringValue () ;
      result << ") COMMA_THERE) ;\n" ;
      index_19950_.increment () ;
      enumerator_19950.gotoNextObject () ;
    }
  }
  result << "  return result ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//  Filewrapper template 'lexiqueGenerationTemplates newImplementationZone2'   *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_newImplementationZone_32_ (C_Compiler * inCompiler,
                                                                                        const GALGAS_string & in_LEXIQUE_5F_IDENTIFIER,
                                                                                        const GALGAS_lexicalAttributeMap & in_LEXICAL_5F_ATTRIBUTE_5F_MAP,
                                                                                        const GALGAS_lexicalMessageMap & in_LEXICAL_5F_MESSAGE_5F_MAP,
                                                                                        const GALGAS_terminalList & in_TERMINAL_5F_LIST,
                                                                                        const GALGAS_lexicalExplicitTokenListMapMap & in_LEXICAL_5F_TOKEN_5F_LIST_5F_MAP,
                                                                                        const GALGAS_stringset & in_STRINGS_5F_IN_5F_EXPLICIT_5F_RULES,
                                                                                        const GALGAS_lexicalRuleListAST & in_LEXICAL_5F_RULE_5F_LIST,
                                                                                        const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT,
                                                                                        const GALGAS_galgas_33_LexiqueComponentListAST_2D_element & in_LEXIQUE_5F_COMPONENT_5F_ROOT
                                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "#include <ctype.h>\n"
    "#include <string.h>\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "#include \"utilities/MF_MemoryControl.h\"\n"
    "#include \"strings/unicode_character_cpp.h\"\n"
    "#include \"galgas2/scanner_actions.h\"\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "#include \"" ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexiqueComponentName (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 12)).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 12)).stringValue () ;
  result << ".h\"\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "#ifndef DO_NOT_GENERATE_CHECKINGS\n"
    "  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFilePath ().cString (HERE), lineNumber ()\n"
    "  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE\n"
    "#else\n"
    "  #define LINE_AND_SOURCE_FILE\n"
    "  #define COMMA_LINE_AND_SOURCE_FILE\n"
    "#endif\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                               Constructors                                  *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (void)" ;
  GALGAS_uint index_1280_ (0) ;
  if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_1280 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
    const bool nonEmpty_enumerator_1280 = enumerator_1280.hasCurrentObject () ;
    if (nonEmpty_enumerator_1280) {
      result << " :\n" ;
    }
    while (enumerator_1280.hasCurrentObject ()) {
      result << "mLexicalAttribute_" ;
      result << enumerator_1280.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 33)).stringValue () ;
      result << " ()" ;
      if (enumerator_1280.hasNextObject ()) {
        result << ",\n" ;
      }
      index_1280_.increment () ;
      enumerator_1280.gotoNextObject () ;
    }
  }
  result << " {\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (C_Compiler * inCallerCompiler,\n"
    "                const C_String & inDependencyFileExtension,\n"
    "                const C_String & inDependencyFilePath,\n"
    "                const C_String & inSourceFileName\n"
    "                COMMA_LOCATION_ARGS) :\n"
    "C_Lexique (inCallerCompiler, inDependencyFileExtension, inDependencyFilePath, inSourceFileName COMMA_THERE)" ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 47)).reader_length (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 47)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    result << ",\n"
      "mMatchedTemplateDelimiterIndex (-1)" ;
  }else if (kBoolFalse == test_0) {
  }
  result << " {\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (C_Compiler * inCallerCompiler,\n"
    "                const C_String & inSourceString,\n"
    "                const C_String & inStringForError\n"
    "                COMMA_LOCATION_ARGS) :\n"
    "C_Lexique (inCallerCompiler, inSourceString, inStringForError COMMA_THERE)" ;
  const enumGalgasBool test_1 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 60)).reader_length (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 60)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_1) {
    result << ",\n"
      "mMatchedTemplateDelimiterIndex (-1)" ;
  }else if (kBoolFalse == test_1) {
  }
  result << " {\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                 I N D E X I N G    D I R E C T O R Y                        *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "C_String C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::indexingDirectory (void) const {\n"
    "  return " ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mIndexingDirectory (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 73)).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 73)).stringValue () ;
  result << " ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                        Lexical error message list                           *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_3513_ (0) ;
  if (in_LEXICAL_5F_MESSAGE_5F_MAP.isValid ()) {
    cEnumerator_lexicalMessageMap enumerator_3513 (in_LEXICAL_5F_MESSAGE_5F_MAP, kEnumeration_up) ;
    while (enumerator_3513.hasCurrentObject ()) {
      result << "\n"
        "static const utf32 gLexicalMessage_" ;
      result << enumerator_3513.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 83)).stringValue () ;
      result << " [] = " ;
      result << enumerator_3513.current_mLexicalMessage (HERE).mAttribute_string.reader_utf_33__32_Representation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 83)).stringValue () ;
      result << " ;\n" ;
      index_3513_.increment () ;
      enumerator_3513.gotoNextObject () ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//          Syntax error messages, for every terminal symbol                   *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_4065_ (0) ;
  if (in_TERMINAL_5F_LIST.isValid ()) {
    cEnumerator_terminalList enumerator_4065 (in_TERMINAL_5F_LIST, kEnumeration_up) ;
    while (enumerator_4065.hasCurrentObject ()) {
      result << "\n"
        "//--- Syntax error message for terminal '$" ;
      result << enumerator_4065.current_mTerminalName (HERE).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 93)).stringValue () ;
      result << "$' :\n"
        "static const utf32 gSyntaxErrorMessage_" ;
      result << enumerator_4065.current_mTerminalName (HERE).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 94)).reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 94)).stringValue () ;
      result << " [] = " ;
      result << enumerator_4065.current_mSyntaxErrorMessage (HERE).reader_utf_33__32_Representation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 94)).stringValue () ;
      result << " ;\n" ;
      index_4065_.increment () ;
      enumerator_4065.gotoNextObject () ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                getMessageForTerminal                                        *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "C_String C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::getMessageForTerminal (const int16_t inTerminalIndex) const {\n"
    "  static const utf32 * syntaxErrorMessageArray [" ;
  result << in_TERMINAL_5F_LIST.reader_length (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 104)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 104)).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 104)).stringValue () ;
  result << "] = {kEndOfSourceLexicalErrorMessage" ;
  GALGAS_uint index_4966_ (0) ;
  if (in_TERMINAL_5F_LIST.isValid ()) {
    cEnumerator_terminalList enumerator_4966 (in_TERMINAL_5F_LIST, kEnumeration_up) ;
    while (enumerator_4966.hasCurrentObject ()) {
      result << ",\n"
        "    gSyntaxErrorMessage_" ;
      result << enumerator_4966.current_mTerminalName (HERE).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 106)).reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 106)).stringValue () ;
      index_4966_.increment () ;
      enumerator_4966.gotoNextObject () ;
    }
  }
  result << "} ;\n"
    "  return syntaxErrorMessageArray [inTerminalIndex] ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                      U N I C O D E    S T R I N G S                         *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_5562_ (0) ;
  if (in_STRINGS_5F_IN_5F_EXPLICIT_5F_RULES.isValid ()) {
    cEnumerator_stringset enumerator_5562 (in_STRINGS_5F_IN_5F_EXPLICIT_5F_RULES, kEnumeration_up) ;
    while (enumerator_5562.hasCurrentObject ()) {
      const enumGalgasBool test_2 = GALGAS_bool (kIsStrictSup, enumerator_5562.current_key (HERE).reader_length (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 119)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
      if (kBoolTrue == test_2) {
        result << "\n"
          "//--- Unicode string for '$" ;
        result << enumerator_5562.current_key (HERE).reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 120)).stringValue () ;
        result << "$'\n"
          "static const utf32 kUnicodeString_" ;
        result << enumerator_5562.current_key (HERE).reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 121)).stringValue () ;
        result << " [] = " ;
        result << enumerator_5562.current_key (HERE).reader_utf_33__32_Representation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 121)).stringValue () ;
        result << " ;\n" ;
      }else if (kBoolFalse == test_2) {
      }
      index_5562_.increment () ;
      enumerator_5562.gotoNextObject () ;
    }
  }
  result << "\n" ;
  GALGAS_uint index_5840_ (0) ;
  if (in_LEXICAL_5F_TOKEN_5F_LIST_5F_MAP.isValid ()) {
    cEnumerator_lexicalExplicitTokenListMapMap enumerator_5840 (in_LEXICAL_5F_TOKEN_5F_LIST_5F_MAP, kEnumeration_up) ;
    while (enumerator_5840.hasCurrentObject ()) {
      result << "//-----------------------------------------------------------------------------*\n"
        "//                                                                             *\n"
        "//             Key words table '" ;
      result << enumerator_5840.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 129)).stringValue () ;
      result << "'                            *\n"
        "//                                                                             *\n"
        "//-----------------------------------------------------------------------------*\n"
        "\n"
        "static const int32_t ktable_size_" ;
      result << enumerator_5840.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 132)).stringValue () ;
      result << " = " ;
      result << enumerator_5840.current_mExplicitTokenListMap (HERE).reader_count (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 132)).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 132)).stringValue () ;
      result << " ;\n"
        "\n"
        "static const C_unicode_lexique_table_entry ktable_for_" ;
      result << enumerator_5840.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 133)).stringValue () ;
      result << " [ktable_size_" ;
      result << enumerator_5840.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 133)).stringValue () ;
      result << "] = {\n" ;
      GALGAS_uint index_6605_ (0) ;
      if (enumerator_5840.current_mTokenSortedList (HERE).isValid ()) {
        cEnumerator_tokenSortedlist enumerator_6605 (enumerator_5840.current_mTokenSortedList (HERE), kEnumeration_up) ;
        while (enumerator_6605.hasCurrentObject ()) {
          result << "  C_unicode_lexique_table_entry (kUnicodeString_" ;
          result << enumerator_6605.current_mName (HERE).reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 135)).stringValue () ;
          result << ", " ;
          result << enumerator_6605.current_mLength (HERE).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 135)).stringValue () ;
          result << ", C_Lexique_" ;
          result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
          result << "::kToken_" ;
          result << enumerator_6605.current_mTerminalName (HERE).reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 135)).stringValue () ;
          result << ")" ;
          if (enumerator_6605.hasNextObject ()) {
            result << ",\n" ;
          }
          index_6605_.increment () ;
          enumerator_6605.gotoNextObject () ;
        }
      }
      result << "\n"
        "} ;\n"
        "\n"
        "int16_t C_Lexique_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << "::search_into_" ;
      result << enumerator_5840.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 139)).stringValue () ;
      result << " (const C_String & inSearchedString) {\n"
        "  return searchInList (inSearchedString, ktable_for_" ;
      result << enumerator_5840.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 140)).stringValue () ;
      result << ", ktable_size_" ;
      result << enumerator_5840.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 140)).stringValue () ;
      result << ") ;\n"
        "}\n"
        "\n" ;
      index_5840_.increment () ;
      enumerator_5840.gotoNextObject () ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                          getCurrentTokenString                              *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "C_String C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::getCurrentTokenString (const cToken * inTokenPtr) const {\n"
    "  const cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " * ptr = (const cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " *) inTokenPtr ;\n"
    "  C_String s ;\n"
    "  if (ptr == NULL) {\n"
    "    s.appendCString(\"$$\") ;\n"
    "  }else{\n"
    "    switch (ptr->mTokenCode) {\n"
    "    case kToken_:\n"
    "      s.appendCString(\"$$\") ;\n"
    "      break ;\n" ;
  GALGAS_uint index_7921_ (0) ;
  if (in_TERMINAL_5F_LIST.isValid ()) {
    cEnumerator_terminalList enumerator_7921 (in_TERMINAL_5F_LIST, kEnumeration_up) ;
    while (enumerator_7921.hasCurrentObject ()) {
      result << "    case kToken_" ;
      result << enumerator_7921.current_mTerminalName (HERE).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 161)).reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 161)).stringValue () ;
      result << ":\n"
        "      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;\n"
        "      s.appendCString (" ;
      result << enumerator_7921.current_mTerminalName (HERE).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 163)).reader_utf_38_Representation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 163)).stringValue () ;
      result << ") ;\n"
        "      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;\n" ;
      GALGAS_uint index_8251_ (0) ;
      if (enumerator_7921.current_mSentAttributeList (HERE).isValid ()) {
        cEnumerator_lexicalSentValueList enumerator_8251 (enumerator_7921.current_mSentAttributeList (HERE), kEnumeration_up) ;
        while (enumerator_8251.hasCurrentObject ()) {
          result << "      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;\n"
            "      s." ;
          result << categoryReader_appendMethodName (enumerator_8251.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 167)).stringValue () ;
          result << " (ptr->mLexicalAttribute_" ;
          result << enumerator_8251.current_mLexicalAttributeName (HERE).reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 167)).stringValue () ;
          result << categoryReader_appendArgumentOfMethod (enumerator_8251.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 167)).stringValue () ;
          result << ") ;\n" ;
          index_8251_.increment () ;
          enumerator_8251.gotoNextObject () ;
        }
      }
      result << "      break ;\n" ;
      index_7921_.increment () ;
      enumerator_7921.gotoNextObject () ;
    }
  }
  result << "    default:\n"
    "      break ;\n"
    "    }\n"
    "  }\n"
    "  return s ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                           Template Delimiters                               *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n" ;
  GALGAS_uint index_9199_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 184)).isValid ()) {
    cEnumerator_templateDelimitorList enumerator_9199 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 184)), kEnumeration_up) ;
    const bool nonEmpty_enumerator_9199 = enumerator_9199.hasCurrentObject () ;
    if (nonEmpty_enumerator_9199) {
      result << "static const cTemplateDelimiter kTemplateDefinitionArray [" ;
      result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 185)).reader_length (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 185)).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 185)).stringValue () ;
      result << "] = {\n" ;
    }
    while (enumerator_9199.hasCurrentObject ()) {
      result << "  cTemplateDelimiter (kUnicodeString_" ;
      result << enumerator_9199.current_mStartString (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 186)).stringValue () ;
      result << ", " ;
      result << enumerator_9199.current_mStartString (HERE).mAttribute_string.reader_length (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 186)).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 186)).stringValue () ;
      result << ", " ;
      const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, enumerator_9199.current_mEndString (HERE).mAttribute_string.reader_length (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 187)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
      if (kBoolTrue == test_3) {
        result << "NULL, 0," ;
      }else if (kBoolFalse == test_3) {
        result << "kUnicodeString_" ;
        result << enumerator_9199.current_mEndString (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 190)).stringValue () ;
        result << ", " ;
        result << enumerator_9199.current_mEndString (HERE).mAttribute_string.reader_length (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 190)).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 190)).stringValue () ;
        result << "," ;
      }
      result << " NULL, " ;
      result << enumerator_9199.current_mPreservesStartDelimiter (HERE).operator_not (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 193)).reader_cString (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 193)).stringValue () ;
      result << ")" ;
      if (enumerator_9199.hasNextObject ()) {
        result << ",\n" ;
      }
      index_9199_.increment () ;
      enumerator_9199.gotoNextObject () ;
    }
    if (nonEmpty_enumerator_9199) {
      result << "\n"
        "} ;\n" ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                           Template Replacements                             *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n" ;
  GALGAS_uint index_10238_ (0) ;
  if (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 205)).isValid ()) {
    cEnumerator_templateReplacementListAST enumerator_10238 (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 205)), kEnumeration_up) ;
    const bool nonEmpty_enumerator_10238 = enumerator_10238.hasCurrentObject () ;
    if (nonEmpty_enumerator_10238) {
      result << "static const cTemplateDelimiter kTemplateReplacementArray [" ;
      result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 206)).reader_length (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 206)).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 206)).stringValue () ;
      result << "] = {\n" ;
    }
    while (enumerator_10238.hasCurrentObject ()) {
      result << "  cTemplateDelimiter (kUnicodeString_" ;
      result << enumerator_10238.current_mMatchString (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 208)).stringValue () ;
      result << ", " ;
      result << enumerator_10238.current_mMatchString (HERE).mAttribute_string.reader_length (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 208)).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 208)).stringValue () ;
      result << ", kUnicodeString_" ;
      result << enumerator_10238.current_mReplacementString (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 209)).stringValue () ;
      result << ", " ;
      result << enumerator_10238.current_mReplacementString (HERE).mAttribute_string.reader_length (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 209)).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 209)).stringValue () ;
      result << ", " ;
      const enumGalgasBool test_4 = GALGAS_bool (kIsEqual, enumerator_10238.current_mReplacementFunction (HERE).mAttribute_string.reader_length (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 210)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
      if (kBoolTrue == test_4) {
        result << "NULL" ;
      }else if (kBoolFalse == test_4) {
        result << "scanner_routine_" ;
        result << enumerator_10238.current_mReplacementFunction (HERE).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 213)).stringValue () ;
      }
      result << ", true)" ;
      if (enumerator_10238.hasNextObject ()) {
        result << ",\n" ;
      }
      index_10238_.increment () ;
      enumerator_10238.gotoNextObject () ;
    }
    if (nonEmpty_enumerator_10238) {
      result << "\n"
        "} ;\n" ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//            Terminal Symbols as end of script in template mark               *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n" ;
  const enumGalgasBool test_5 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 226)).reader_length (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 226)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_5) {
    GALGAS_uint index_11352_ (0) ;
    if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 227)).isValid ()) {
      cEnumerator_terminalList enumerator_11352 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 227)), kEnumeration_up) ;
      const bool nonEmpty_enumerator_11352 = enumerator_11352.hasCurrentObject () ;
      if (nonEmpty_enumerator_11352) {
        result << "static const bool kEndOfScriptInTemplateArray [" ;
        result << in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 228)).reader_length (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 228)).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 228)).stringValue () ;
        result << "] = {\n" ;
      }
      while (enumerator_11352.hasCurrentObject ()) {
        result << "  " ;
        result << enumerator_11352.current_mIsEndOfTemplateMark (HERE).reader_cString (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 229)).stringValue () ;
        result << " /* " ;
        result << enumerator_11352.current_mTerminalName (HERE).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 229)).stringValue () ;
        result << " */" ;
        if (enumerator_11352.hasNextObject ()) {
          result << ",\n" ;
        }
        index_11352_.increment () ;
        enumerator_11352.gotoNextObject () ;
      }
      if (nonEmpty_enumerator_11352) {
        result << "\n"
          "} ;\n" ;
      }
    }
  }else if (kBoolFalse == test_5) {
  }
  result << "\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//               P A R S E    L E X I C A L    T O K E N                       *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "bool C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::parseLexicalToken (void) {\n"
    "  cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " token ;\n"
    "  mLoop = true ;\n"
    "  token.mTokenCode = -1 ;\n"
    "  while ((token.mTokenCode < 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n" ;
  const enumGalgasBool test_6 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 248)).reader_length (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 248)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_6) {
    result << "    if ((mMatchedTemplateDelimiterIndex >= 0)\n"
      "     && (kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength > 0)\n"
      "     && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n"
      "      const bool foundEndDelimitor = testForInputUTF32String (kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndString,\n"
      "                                                              kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength,\n"
      "                                                              true) ;\n"
      "      if (foundEndDelimitor) {\n"
      "        mMatchedTemplateDelimiterIndex = -1 ;\n"
      "      }\n"
      "    }\n"
      "    while ((mMatchedTemplateDelimiterIndex < 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n"
      "      int32_t replacementIndex = 0 ;\n"
      "      while (replacementIndex >= 0) {\n"
      "        replacementIndex = findTemplateDelimiterIndex (kTemplateReplacementArray, " ;
    result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 262)).reader_length (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 262)).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 262)).stringValue () ;
    result << ") ;\n"
      "        if (replacementIndex >= 0) {\n"
      "          if (kTemplateReplacementArray [replacementIndex].mReplacementFunction == NULL) {\n"
      "            token.mTemplateStringBeforeToken << kTemplateReplacementArray [replacementIndex].mEndString ;\n"
      "          }else{\n"
      "            C_String s ;\n"
      "            while (notTestForInputUTF32String (kTemplateReplacementArray [replacementIndex].mEndString,\n"
      "                                               kTemplateReplacementArray [replacementIndex].mEndStringLength,\n"
      "                                               kEndOfSourceLexicalErrorMessage\n"
      "                                               COMMA_HERE)) {\n"
      "              s.appendUnicodeCharacter (previousChar () COMMA_HERE) ;\n"
      "            }\n"
      "            kTemplateReplacementArray [replacementIndex].mReplacementFunction (*this, s, token.mTemplateStringBeforeToken) ;\n"
      "          }\n"
      "        }\n"
      "      }\n"
      "      mMatchedTemplateDelimiterIndex = findTemplateDelimiterIndex (kTemplateDefinitionArray, " ;
    result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 278)).reader_length (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 278)).reader_string (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 278)).stringValue () ;
    result << ") ;\n"
      "      if (mMatchedTemplateDelimiterIndex < 0) {\n"
      "        token.mTemplateStringBeforeToken.appendUnicodeCharacter (mCurrentChar COMMA_HERE) ;\n"
      "        advance () ;\n"
      "      }\n"
      "    }\n"
      "    if ((mMatchedTemplateDelimiterIndex >= 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n" ;
    GALGAS_uint index_14465_ (0) ;
    if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
      cEnumerator_lexicalAttributeMap enumerator_14465 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
      while (enumerator_14465.hasCurrentObject ()) {
        result << "    token.mLexicalAttribute_" ;
        result << enumerator_14465.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 286)).stringValue () ;
        result << categoryReader_initialization (enumerator_14465.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 286)).stringValue () ;
        result << " ;\n" ;
        index_14465_.increment () ;
        enumerator_14465.gotoNextObject () ;
      }
    }
    result << "    mTokenStartLocation = mCurrentLocation ;\n"
      "    try{\n" ;
    if (GALGAS_uint ((uint32_t) 8U).isValid ()) {
      result.incIndentation ((int32_t) GALGAS_uint ((uint32_t) 8U).uintValue ()) ;
    }
    GALGAS_uint index_14678_ (0) ;
    if (in_LEXICAL_5F_RULE_5F_LIST.isValid ()) {
      cEnumerator_lexicalRuleListAST enumerator_14678 (in_LEXICAL_5F_RULE_5F_LIST, kEnumeration_up) ;
      while (enumerator_14678.hasCurrentObject ()) {
        result << callCategoryReader_generateCode ((const cPtr_abstractLexicalRuleAST *) enumerator_14678.current_mLexicalRule (HERE).ptr (), in_LEXIQUE_5F_IDENTIFIER, in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT, inCompiler COMMA_SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 293)).stringValue () ;
        index_14678_.increment () ;
        enumerator_14678.gotoNextObject () ;
      }
    }
    if (GALGAS_uint ((uint32_t) 8U).isValid ()) {
      result.incIndentation (- ((int32_t) GALGAS_uint ((uint32_t) 8U).uintValue ())) ;
    }
    result << "if (testForInputUTF32Char (TO_UNICODE ('\\0'))) { // End of source text \? \n"
      "          token.mTokenCode = kToken_ ; // Empty string code\n"
      "        }else{ // Unknown input character\n"
      "          unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;\n"
      "        }\n"
      "      }catch (const C_lexicalErrorException &) {\n"
      "        token.mTokenCode = -1 ; // No token\n"
      "        advance () ; // ... go throught unknown character\n"
      "      }\n"
      "    }\n"
      "    if ((token.mTokenCode > 0) && kEndOfScriptInTemplateArray [token.mTokenCode - 1]) {\n"
      "      mMatchedTemplateDelimiterIndex = -1 ;\n"
      "    }\n"
      "  " ;
  }else if (kBoolFalse == test_6) {
    GALGAS_uint index_15376_ (0) ;
    if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
      cEnumerator_lexicalAttributeMap enumerator_15376 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
      while (enumerator_15376.hasCurrentObject ()) {
        result << "    token.mLexicalAttribute_" ;
        result << enumerator_15376.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 311)).stringValue () ;
        result << categoryReader_initialization (enumerator_15376.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 311)).stringValue () ;
        result << " ;\n" ;
        index_15376_.increment () ;
        enumerator_15376.gotoNextObject () ;
      }
    }
    result << "    mTokenStartLocation = mCurrentLocation ;\n"
      "    try{\n" ;
    if (GALGAS_uint ((uint32_t) 6U).isValid ()) {
      result.incIndentation ((int32_t) GALGAS_uint ((uint32_t) 6U).uintValue ()) ;
    }
    GALGAS_uint index_15589_ (0) ;
    if (in_LEXICAL_5F_RULE_5F_LIST.isValid ()) {
      cEnumerator_lexicalRuleListAST enumerator_15589 (in_LEXICAL_5F_RULE_5F_LIST, kEnumeration_up) ;
      while (enumerator_15589.hasCurrentObject ()) {
        result << callCategoryReader_generateCode ((const cPtr_abstractLexicalRuleAST *) enumerator_15589.current_mLexicalRule (HERE).ptr (), in_LEXIQUE_5F_IDENTIFIER, in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT, inCompiler COMMA_SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 318)).stringValue () ;
        index_15589_.increment () ;
        enumerator_15589.gotoNextObject () ;
      }
    }
    if (GALGAS_uint ((uint32_t) 6U).isValid ()) {
      result.incIndentation (- ((int32_t) GALGAS_uint ((uint32_t) 6U).uintValue ())) ;
    }
    result << "if (testForInputUTF32Char (TO_UNICODE ('\\0'))) { // End of source text \? \n"
      "        token.mTokenCode = kToken_ ; // Empty string code\n"
      "      }else{ // Unknown input character\n"
      "        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;\n"
      "      }\n"
      "    }catch (const C_lexicalErrorException &) {\n"
      "      token.mTokenCode = -1 ; // No token\n"
      "      advance () ; // ... go throught unknown character\n"
      "    }" ;
  }
  result << "\n"
    "  }\n"
    "  if ((UNICODE_VALUE (mCurrentChar) == '\\0') && (token.mTemplateStringBeforeToken.length () > 0)) {\n"
    "    token.mTokenCode = 0 ;\n"
    "    enterToken (token) ;\n"
    "  }\n"
    "  return token.mTokenCode > 0 ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                         E N T E R    T O K E N                              *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "void C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::enterToken (const cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " & inToken) {\n"
    "  cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " * ptr = NULL ;\n"
    "  macroMyNew (ptr, cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " ()) ;\n"
    "  ptr->mTokenCode = inToken.mTokenCode ;\n"
    "  ptr->mStartLocation = mTokenStartLocation ;\n"
    "  ptr->mEndLocation = mTokenEndLocation ;\n"
    "  ptr->mTemplateStringBeforeToken = inToken.mTemplateStringBeforeToken ;\n" ;
  GALGAS_uint index_17136_ (0) ;
  if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_17136 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
    while (enumerator_17136.hasCurrentObject ()) {
      result << "  ptr->mLexicalAttribute_" ;
      result << enumerator_17136.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 353)).stringValue () ;
      result << " = inToken.mLexicalAttribute_" ;
      result << enumerator_17136.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 353)).stringValue () ;
      result << " ;\n" ;
      index_17136_.increment () ;
      enumerator_17136.gotoNextObject () ;
    }
  }
  result << "  enterTokenFromPointer (ptr) ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//               A T T R I B U T E   A C C E S S                               *\n"
    "//                                                                             *\n" ;
  GALGAS_uint index_17672_ (0) ;
  if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_17672 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
    while (enumerator_17672.hasCurrentObject ()) {
      result << "//-----------------------------------------------------------------------------*\n"
        "\n" ;
      result << categoryReader_cppTypeName (enumerator_17672.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 365)).stringValue () ;
      result << " C_Lexique_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << "::attributeValue_" ;
      result << enumerator_17672.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 365)).stringValue () ;
      result << " (void) const {\n"
        "  cTokenFor_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << " * ptr = (cTokenFor_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << " *) mCurrentTokenPtr ;\n"
        "  return ptr->mLexicalAttribute_" ;
      result << enumerator_17672.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 367)).stringValue () ;
      result << " ;\n"
        "}\n"
        "\n" ;
      index_17672_.increment () ;
      enumerator_17672.gotoNextObject () ;
    }
  }
  result << "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//         A S S I G N    F R O M    A T T R I B U T E                         *\n"
    "//                                                                             *\n" ;
  GALGAS_uint index_18459_ (0) ;
  if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_18459 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
    while (enumerator_18459.hasCurrentObject ()) {
      result << "//-----------------------------------------------------------------------------*\n"
        "\n"
        "GALGAS_l" ;
      result << categoryReader_lexicalTypeBaseName (enumerator_18459.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 377)).reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 377)).stringValue () ;
      result << " C_Lexique_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << "::synthetizedAttribute_" ;
      result << enumerator_18459.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 377)).stringValue () ;
      result << " (void) const {\n"
        "  cTokenFor_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << " * ptr = (cTokenFor_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << " *) mCurrentTokenPtr ;\n"
        "  macroValidSharedObject (ptr, cTokenFor_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << ") ;\n"
        "  GALGAS_location currentLocation (ptr->mStartLocation, ptr->mEndLocation, sourceText ()) ;\n"
        "  GALGAS_" ;
      result << categoryReader_lexicalTypeBaseName (enumerator_18459.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 381)).reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 381)).stringValue () ;
      result << " value (ptr->mLexicalAttribute_" ;
      result << enumerator_18459.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 381)).stringValue () ;
      result << ") ;\n"
        "  GALGAS_l" ;
      result << categoryReader_lexicalTypeBaseName (enumerator_18459.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 382)).reader_identifierRepresentation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 382)).stringValue () ;
      result << " result (value, currentLocation) ;\n"
        "  return result ;\n"
        "}\n"
        "\n" ;
      index_18459_.increment () ;
      enumerator_18459.gotoNextObject () ;
    }
  }
  result << "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                         I N T R O S P E C T I O N                           *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "GALGAS_stringlist C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::symbols (LOCATION_ARGS) {\n"
    "  GALGAS_stringlist result = GALGAS_stringlist::constructor_emptyList (THERE) ;\n" ;
  GALGAS_uint index_19944_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 394)).isValid ()) {
    cEnumerator_terminalList enumerator_19944 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 394)), kEnumeration_up) ;
    while (enumerator_19944.hasCurrentObject ()) {
      result << "  result.addAssign_operation (GALGAS_string (" ;
      result << enumerator_19944.current_mTerminalName (HERE).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE ("lexique_implementation.new.cpp.gTemplate", 395)).stringValue () ;
      result << ") COMMA_THERE) ;\n" ;
      index_19944_.increment () ;
      enumerator_19944.gotoNextObject () ;
    }
  }
  result << "  return result ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//     Filewrapper template 'lexiqueGenerationTemplates cocoaHeaderZone2'      *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_cocoaHeaderZone_32_ (C_Compiler * inCompiler,
                                                                                  const GALGAS_string & in_LEXIQUE_5F_CLASS_5F_NAME,
                                                                                  const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT
                                                                                  COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  uint32_t columnMarker = 0 ;
  result << "\n"
    "#import \"OC_Lexique.h\"\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                    E X T E R N    R O U T I N E S                           *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_496_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalRoutineMessageMap (SOURCE_FILE ("lexique_cocoa_header_template_zone_2.h.gTemplate", 10)).isValid ()) {
    cEnumerator_lexicalRoutineMap enumerator_496 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalRoutineMessageMap (SOURCE_FILE ("lexique_cocoa_header_template_zone_2.h.gTemplate", 10)), kEnumeration_up) ;
    while (enumerator_496.hasCurrentObject ()) {
      const enumGalgasBool test_0 = enumerator_496.current_mIsExtern (HERE).boolEnum () ;
      if (kBoolTrue == test_0) {
        result << "\n"
          "void scanner_cocoa_routine_" ;
        result << enumerator_496.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_cocoa_header_template_zone_2.h.gTemplate", 12)).stringValue () ;
        result << " (" ;
        columnMarker = result.currentColumn () ;
        result << "BOOL * ioScanningOk" ;
        GALGAS_uint index_648_ (0) ;
        if (enumerator_496.current_mLexicalRoutineFormalArgumentList (HERE).isValid ()) {
          cEnumerator_lexicalRoutineFormalArgumentList enumerator_648 (enumerator_496.current_mLexicalRoutineFormalArgumentList (HERE), kEnumeration_up) ;
          while (enumerator_648.hasCurrentObject ()) {
            result << ",\n"
              "                " ;
            result.appendSpacesUntilColumn (columnMarker) ;
            result << categoryReader_cppConstInFormalArgument (enumerator_648.current_mLexicalFormalArgumentMode (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_cocoa_header_template_zone_2.h.gTemplate", 14)).stringValue () ;
            result << categoryReader_cocoaTypeName (enumerator_648.current_mLexicalFormalArgumentType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_cocoa_header_template_zone_2.h.gTemplate", 15)).stringValue () ;
            result << categoryReader_cocoaPointerInFormalArgument (enumerator_648.current_mLexicalFormalArgumentMode (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_cocoa_header_template_zone_2.h.gTemplate", 16)).stringValue () ;
            result << " " ;
            result << enumerator_648.current_mArgumentNameForComment (HERE).stringValue () ;
            index_648_.increment () ;
            enumerator_648.gotoNextObject () ;
          }
        }
        result << ") ;\n" ;
      }else if (kBoolFalse == test_0) {
      }
      index_496_.increment () ;
      enumerator_496.gotoNextObject () ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                    E X T E R N    F U N C T I O N S                         *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_1459_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalFunctionMap (SOURCE_FILE ("lexique_cocoa_header_template_zone_2.h.gTemplate", 29)).isValid ()) {
    cEnumerator_lexicalFunctionMap enumerator_1459 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalFunctionMap (SOURCE_FILE ("lexique_cocoa_header_template_zone_2.h.gTemplate", 29)), kEnumeration_up) ;
    while (enumerator_1459.hasCurrentObject ()) {
      const enumGalgasBool test_1 = enumerator_1459.current_mIsExtern (HERE).boolEnum () ;
      if (kBoolTrue == test_1) {
        result << "\n" ;
        result << categoryReader_cppTypeName (enumerator_1459.current_mReturnedLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_cocoa_header_template_zone_2.h.gTemplate", 31)).stringValue () ;
        result << " scanner_cocoa_function_" ;
        result << enumerator_1459.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_cocoa_header_template_zone_2.h.gTemplate", 31)).stringValue () ;
        result << " (" ;
        columnMarker = result.currentColumn () ;
        result << "BOOL * ioScanningOk" ;
        GALGAS_uint index_1628_ (0) ;
        if (enumerator_1459.current_mLexicalTypeList (HERE).isValid ()) {
          cEnumerator_lexicalFunctionFormalArgumentList enumerator_1628 (enumerator_1459.current_mLexicalTypeList (HERE), kEnumeration_up) ;
          while (enumerator_1628.hasCurrentObject ()) {
            result << ",\n"
              "                " ;
            result.appendSpacesUntilColumn (columnMarker) ;
            result << "const " ;
            result << categoryReader_cppTypeName (enumerator_1628.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_cocoa_header_template_zone_2.h.gTemplate", 33)).stringValue () ;
            result << " " ;
            result << enumerator_1628.current_mArgumentNameForComment (HERE).stringValue () ;
            index_1628_.increment () ;
            enumerator_1628.gotoNextObject () ;
          }
        }
        result << ") ;\n" ;
      }else if (kBoolFalse == test_1) {
      }
      index_1459_.increment () ;
      enumerator_1459.gotoNextObject () ;
    }
  }
  result << "\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//         T E R M I N A L    S Y M B O L    E N U M E R A T I O N             *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "enum {" ;
  result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
  result << "_1_" ;
  GALGAS_uint index_2257_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_cocoa_header_template_zone_2.h.gTemplate", 47)).isValid ()) {
    cEnumerator_terminalList enumerator_2257 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_cocoa_header_template_zone_2.h.gTemplate", 47)), kEnumeration_up) ;
    while (enumerator_2257.hasCurrentObject ()) {
      result << ",\n"
        "  " ;
      result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
      result << "_1_" ;
      result << enumerator_2257.current_mTerminalName (HERE).reader_string (SOURCE_FILE ("lexique_cocoa_header_template_zone_2.h.gTemplate", 48)).reader_identifierRepresentation (SOURCE_FILE ("lexique_cocoa_header_template_zone_2.h.gTemplate", 48)).stringValue () ;
      index_2257_.increment () ;
      enumerator_2257.gotoNextObject () ;
    }
  }
  result << "\n"
    "} ;\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                     S C A N N E R    C L A S S                              *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "@interface OC_Lexique_" ;
  result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
  result << " : OC_Lexique {\n"
    "//--- Attributes\n" ;
  GALGAS_uint index_2910_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE ("lexique_cocoa_header_template_zone_2.h.gTemplate", 61)).isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_2910 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE ("lexique_cocoa_header_template_zone_2.h.gTemplate", 61)), kEnumeration_up) ;
    while (enumerator_2910.hasCurrentObject ()) {
      result << "  @private " ;
      result << categoryReader_cocoaTypeName (enumerator_2910.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_cocoa_header_template_zone_2.h.gTemplate", 62)).stringValue () ;
      result << " mLexicalAttribute_" ;
      result << enumerator_2910.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_cocoa_header_template_zone_2.h.gTemplate", 62)).stringValue () ;
      result << " ;\n" ;
      index_2910_.increment () ;
      enumerator_2910.gotoNextObject () ;
    }
  }
  result << "\n"
    "}\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//     Filewrapper template 'lexiqueGenerationTemplates cocoaHeaderZone3'      *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_cocoaHeaderZone_33_ (C_Compiler * /* inCompiler */,
                                                                                  const GALGAS_string & /* in_LEXIQUE_5F_CLASS_5F_NAME */,
                                                                                  const GALGAS_lexiqueAnalysisContext & /* in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT */
                                                                                  COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "\n"
    "- (NSUInteger) terminalVocabularyCount ;\n"
    "\n"
    "- (NSUInteger) styleIndexForTerminal: (NSInteger) inTerminal ;\n"
    "\n"
    "- (void) parseLexicalTokenForLexicalColoring ;\n"
    "\n"
    "- (NSUInteger) styleCount ;\n"
    "\n"
    "- (NSString *) styleNameForStyleIndex: (NSInteger) inIndex ;\n"
    "\n"
    "- (NSString *) styleIdentifierForStyleIndex: (NSInteger) inIndex ;\n"
    "\n"
    "- (NSString *) indexingDirectory ;\n"
    "\n"
    "- (NSArray *) indexingTitles ; // Array of NSString\n"
    "\n"
    "- (BOOL) isTemplateLexique ;\n"
    "\n"
    "- (BOOL) atomicSelectionForToken: (NSUInteger) inTokenIndex ;\n"
    "\n"
    "@end\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
// Filewrapper template 'lexiqueGenerationTemplates cocoaImplementationZone2'  *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_cocoaImplementationZone_32_ (C_Compiler * inCompiler,
                                                                                          const GALGAS_string & in_LEXIQUE_5F_CLASS_5F_NAME,
                                                                                          const GALGAS_lexicalAttributeMap & in_LEXICAL_5F_ATTRIBUTE_5F_MAP,
                                                                                          const GALGAS_lexicalMessageMap & /* in_LEXICAL_5F_MESSAGE_5F_MAP */,
                                                                                          const GALGAS_terminalList & /* in_TERMINAL_5F_LIST */,
                                                                                          const GALGAS_stringset & /* in_STRINGS_5F_IN_5F_EXPLICIT_5F_RULES */,
                                                                                          const GALGAS_lexicalRuleListAST & in_LEXICAL_5F_RULE_5F_LIST,
                                                                                          const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT,
                                                                                          const GALGAS_galgas_33_LexiqueComponentListAST_2D_element & in_LEXIQUE_5F_COMPONENT_5F_ROOT
                                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "\n"
    "#import \"" ;
  result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
  result << "-cocoa.h\"\n"
    "#import \"PMDebug.h\"\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "@implementation OC_Lexique_" ;
  result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
  result << "\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                           Template Replacements                             *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n" ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 15)).reader_length (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 15)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    result << "static NSArray * kTemplateReplacementArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 16)).stringValue () ;
    result << " ; // Of NSString \n" ;
  }else if (kBoolFalse == test_0) {
  }
  result << "\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                           Template Delimiters                               *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n" ;
  const enumGalgasBool test_1 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 25)).reader_length (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 25)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_1) {
    result << "static NSArray * kTemplateDefinitionArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 26)).stringValue () ;
    result << " ;\n" ;
  }else if (kBoolFalse == test_1) {
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (instancetype) init {\n"
    "  self = [super init] ;\n"
    "  if (self) {\n"
    "    noteObjectAllocation (self) ;\n" ;
  GALGAS_uint index_1585_ (0) ;
  if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_1585 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
    while (enumerator_1585.hasCurrentObject ()) {
      result << "    mLexicalAttribute_" ;
      result << enumerator_1585.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 36)).stringValue () ;
      result << " = " ;
      result << categoryReader_cocoaInitializationCode (enumerator_1585.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 36)).stringValue () ;
      result << " ;\n" ;
      index_1585_.increment () ;
      enumerator_1585.gotoNextObject () ;
    }
  }
  result << "  }\n" ;
  const enumGalgasBool test_2 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 39)).reader_length (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 39)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_2) {
    result << "  if (nil == kTemplateDefinitionArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 40)).stringValue () ;
    result << ") {\n"
      "    kTemplateDefinitionArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 41)).stringValue () ;
    result << " = [NSArray arrayWithObjects:\n" ;
    GALGAS_uint index_2032_ (0) ;
    if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 42)).isValid ()) {
      cEnumerator_templateDelimitorList enumerator_2032 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 42)), kEnumeration_up) ;
      while (enumerator_2032.hasCurrentObject ()) {
        result << "      [[OC_GGS_TemplateDelimiter alloc] initWithStartString:@" ;
        result << enumerator_2032.current_mStartString (HERE).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 43)).stringValue () ;
        result << " endString:" ;
        const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, enumerator_2032.current_mEndString (HERE).mAttribute_string.reader_length (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 44)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
        if (kBoolTrue == test_3) {
          result << "nil" ;
        }else if (kBoolFalse == test_3) {
          result << "@" ;
          result << enumerator_2032.current_mEndString (HERE).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 47)).stringValue () ;
        }
        result << " discardStartString:" ;
        result << enumerator_2032.current_mPreservesStartDelimiter (HERE).operator_not (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 50)).reader_ocString (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 50)).stringValue () ;
        result << "],\n" ;
        index_2032_.increment () ;
        enumerator_2032.gotoNextObject () ;
      }
    }
    result << "      nil\n"
      "    ] ;\n"
      "  }\n" ;
  }else if (kBoolFalse == test_2) {
  }
  const enumGalgasBool test_4 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 57)).reader_length (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 57)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_4) {
    result << "  if (nil == kTemplateReplacementArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 58)).stringValue () ;
    result << ") {\n"
      "\n"
      "    kTemplateReplacementArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 59)).stringValue () ;
    result << " = [NSArray arrayWithObjects:\n" ;
    GALGAS_uint index_2753_ (0) ;
    if (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 60)).isValid ()) {
      cEnumerator_templateReplacementListAST enumerator_2753 (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 60)), kEnumeration_up) ;
      while (enumerator_2753.hasCurrentObject ()) {
        result << "      @" ;
        result << enumerator_2753.current_mMatchString (HERE).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 61)).stringValue () ;
        result << ", " ;
        index_2753_.increment () ;
        enumerator_2753.gotoNextObject () ;
      }
    }
    result << "      nil\n"
      "    ] ;\n"
      "  }\n" ;
  }else if (kBoolFalse == test_4) {
  }
  result << "  return self ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (void) FINALIZE_OR_DEALLOC {\n"
    "  noteObjectDeallocation (self) ;\n"
    "  macroSuperFinalize ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                 I N D E X I N G    D I R E C T O R Y                        *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (NSString *) indexingDirectory {\n"
    "  return @" ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mIndexingDirectory (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 84)).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 84)).stringValue () ;
  result << " ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                 I N D E X I N G    T I T L E S                              *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (NSArray *) indexingTitles { // Array of NSString\n"
    "  return [NSArray arrayWithObjects:\n" ;
  GALGAS_uint index_4125_ (0) ;
  if (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mIndexingListAST (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 96)).isValid ()) {
    cEnumerator_indexingListAST enumerator_4125 (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mIndexingListAST (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 96)), kEnumeration_up) ;
    while (enumerator_4125.hasCurrentObject ()) {
      result << "    @" ;
      result << enumerator_4125.current_mIndexComment (HERE).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 97)).stringValue () ;
      result << ",\n" ;
      index_4125_.increment () ;
      enumerator_4125.gotoNextObject () ;
    }
  }
  result << "    NULL\n"
    "  ] ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//            Terminal Symbols as end of script in template mark               *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n" ;
  const enumGalgasBool test_5 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 109)).reader_length (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 109)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_5) {
    GALGAS_uint index_4920_ (0) ;
    if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 110)).isValid ()) {
      cEnumerator_terminalList enumerator_4920 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 110)), kEnumeration_up) ;
      const bool nonEmpty_enumerator_4920 = enumerator_4920.hasCurrentObject () ;
      if (nonEmpty_enumerator_4920) {
        result << "static const BOOL kEndOfScriptInTemplateArray_" ;
        result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 111)).stringValue () ;
        result << " [" ;
        result << in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 111)).reader_length (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 111)).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 111)).stringValue () ;
        result << "] = {\n" ;
      }
      while (enumerator_4920.hasCurrentObject ()) {
        result << "  " ;
        result << enumerator_4920.current_mIsEndOfTemplateMark (HERE).reader_ocString (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 112)).stringValue () ;
        result << " /* " ;
        result << enumerator_4920.current_mTerminalName (HERE).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 112)).stringValue () ;
        result << " */" ;
        if (enumerator_4920.hasNextObject ()) {
          result << ",\n" ;
        }
        index_4920_.increment () ;
        enumerator_4920.gotoNextObject () ;
      }
      if (nonEmpty_enumerator_4920) {
        result << "\n"
          "} ;\n" ;
      }
    }
  }else if (kBoolFalse == test_5) {
  }
  result << "\n"
    "\n" ;
  GALGAS_uint index_5126_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalTokenListMap (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 120)).isValid ()) {
    cEnumerator_lexicalExplicitTokenListMapMap enumerator_5126 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalTokenListMap (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 120)), kEnumeration_up) ;
    while (enumerator_5126.hasCurrentObject ()) {
      const enumGalgasBool test_6 = enumerator_5126.current_mShouldBeGenerated (HERE).boolEnum () ;
      if (kBoolTrue == test_6) {
        result << "//-----------------------------------------------------------------------------*\n"
          "//                                                                             *\n"
          "//             Key words table '" ;
        result << enumerator_5126.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 124)).stringValue () ;
        result << "'                            *\n"
          "//                                                                             *\n"
          "//-----------------------------------------------------------------------------*\n"
          "\n"
          "static const C_cocoa_lexique_table_entry ktable_for_" ;
        result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 127)).stringValue () ;
        result << "_" ;
        result << enumerator_5126.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 127)).stringValue () ;
        result << " [" ;
        result << enumerator_5126.current_mExplicitTokenListMap (HERE).reader_count (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 127)).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 127)).stringValue () ;
        result << "] = {\n" ;
        GALGAS_uint index_5882_ (0) ;
        if (enumerator_5126.current_mTokenSortedList (HERE).isValid ()) {
          cEnumerator_tokenSortedlist enumerator_5882 (enumerator_5126.current_mTokenSortedList (HERE), kEnumeration_up) ;
          while (enumerator_5882.hasCurrentObject ()) {
            result << "  {" ;
            result << enumerator_5882.current_mName (HERE).reader_utf_38_Representation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 129)).stringValue () ;
            result << ", " ;
            result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
            result << "_1_" ;
            result << enumerator_5882.current_mTerminalName (HERE).reader_identifierRepresentation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 129)).stringValue () ;
            result << "}" ;
            if (enumerator_5882.hasNextObject ()) {
              result << ",\n" ;
            }
            index_5882_.increment () ;
            enumerator_5882.gotoNextObject () ;
          }
        }
        result << "\n"
          "} ;\n"
          "\n"
          "static NSInteger search_into_" ;
        result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 133)).stringValue () ;
        result << "_" ;
        result << enumerator_5126.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 133)).stringValue () ;
        result << " (NSString * inSearchedString) {\n"
          "  return searchStringInTable (inSearchedString, ktable_for_" ;
        result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 134)).stringValue () ;
        result << "_" ;
        result << enumerator_5126.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 134)).stringValue () ;
        result << ", " ;
        result << enumerator_5126.current_mExplicitTokenListMap (HERE).reader_count (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 134)).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 134)).stringValue () ;
        result << ") ;\n"
          "}\n"
          "\n" ;
      }else if (kBoolFalse == test_6) {
      }
      index_5126_.increment () ;
      enumerator_5126.gotoNextObject () ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//               P A R S E    L E X I C A L    T O K E N                       *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (void) parseLexicalTokenForLexicalColoring {\n"
    "  mLoop = YES ;\n"
    "  BOOL scanningOk = YES ;\n"
    "  mTokenCode = 0 ;\n"
    "  while ((mTokenCode == 0) && (mCurrentChar != '\\0')) {\n"
    "    mTokenStartLocation = mCurrentLocation ;\n" ;
  const enumGalgasBool test_7 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 152)).reader_length (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 152)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_7) {
    result << "    if ((mMatchedTemplateDelimiterIndex >= 0) && ([[kTemplateDefinitionArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 153)).stringValue () ;
    result << " objectAtIndex:(NSUInteger) mMatchedTemplateDelimiterIndex] startString].length > 0)) {\n"
      "      const BOOL foundEndDelimitor = [self testForInputString:[[kTemplateDefinitionArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 154)).stringValue () ;
    result << " objectAtIndex:(NSUInteger) mMatchedTemplateDelimiterIndex] endString] advance:YES] ;\n"
      "      if (foundEndDelimitor) {\n"
      "        mMatchedTemplateDelimiterIndex = -1 ;\n"
      "      }\n"
      "    }\n"
      "    while ((mMatchedTemplateDelimiterIndex < 0) && (mCurrentChar != '\\0')) {\n"
      "      " ;
    const enumGalgasBool test_8 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 160)).reader_length (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 160)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_8) {
      result << "\n"
        "      [self searchForReplacementPattern:kTemplateReplacementArray_" ;
      result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 161)).stringValue () ;
      result << "] ;\n"
        "      " ;
    }else if (kBoolFalse == test_8) {
    }
    result << "\n"
      "      mMatchedTemplateDelimiterIndex = [self findTemplateDelimiterIndex:kTemplateDefinitionArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 163)).stringValue () ;
    result << "] ;\n"
      "      if (mMatchedTemplateDelimiterIndex < 0) {\n"
      "        [self advance] ;\n"
      "        mTokenCode = -2 ;\n"
      "      }\n"
      "    }\n"
      "    if ((mMatchedTemplateDelimiterIndex >= 0) && (mTokenCode == 0) && (mCurrentChar != '\\0') && scanningOk) {\n" ;
    GALGAS_uint index_8327_ (0) ;
    if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
      cEnumerator_lexicalAttributeMap enumerator_8327 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
      while (enumerator_8327.hasCurrentObject ()) {
        result << "      " ;
        result << categoryReader_cocoaResetPrefix (enumerator_8327.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 171)).stringValue () ;
        result << "mLexicalAttribute_" ;
        result << enumerator_8327.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 171)).stringValue () ;
        result << categoryReader_cocoaReset (enumerator_8327.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 171)).stringValue () ;
        result << " ;\n" ;
        index_8327_.increment () ;
        enumerator_8327.gotoNextObject () ;
      }
    }
    result << "      mTokenStartLocation = mCurrentLocation ;\n" ;
    if (GALGAS_uint ((uint32_t) 6U).isValid ()) {
      result.incIndentation ((int32_t) GALGAS_uint ((uint32_t) 6U).uintValue ()) ;
    }
    GALGAS_uint index_8541_ (0) ;
    if (in_LEXICAL_5F_RULE_5F_LIST.isValid ()) {
      cEnumerator_lexicalRuleListAST enumerator_8541 (in_LEXICAL_5F_RULE_5F_LIST, kEnumeration_up) ;
      while (enumerator_8541.hasCurrentObject ()) {
        result << callCategoryReader_generateCocoaCode ((const cPtr_abstractLexicalRuleAST *) enumerator_8541.current_mLexicalRule (HERE).ptr (), in_LEXIQUE_5F_CLASS_5F_NAME, in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT, inCompiler COMMA_SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 177)).stringValue () ;
        index_8541_.increment () ;
        enumerator_8541.gotoNextObject () ;
      }
    }
    if (GALGAS_uint ((uint32_t) 6U).isValid ()) {
      result.incIndentation (- ((int32_t) GALGAS_uint ((uint32_t) 6U).uintValue ())) ;
    }
    result << "if ([self testForInputChar:'\\0']) { // End of source text \? \n"
      "        mTokenCode = " ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
    result << "_1_ ; // Empty string code\n"
      "      }else{ // Unknown input character\n"
      "        scanningOk = NO ;\n"
      "      }\n"
      "    }\n"
      "    if ((mTokenCode > 0) && kEndOfScriptInTemplateArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 186)).stringValue () ;
    result << " [mTokenCode - 1]) {\n"
      "      mMatchedTemplateDelimiterIndex = -1 ;\n"
      "    }\n"
      "  //--- Error \?\n"
      "    if (! scanningOk) {\n"
      "      mTokenCode = -1 ;\n"
      "      [self advance] ;\n"
      "    }" ;
  }else if (kBoolFalse == test_7) {
    GALGAS_uint index_9166_ (0) ;
    if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
      cEnumerator_lexicalAttributeMap enumerator_9166 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
      while (enumerator_9166.hasCurrentObject ()) {
        result << "    " ;
        result << categoryReader_cocoaResetPrefix (enumerator_9166.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 195)).stringValue () ;
        result << "mLexicalAttribute_" ;
        result << enumerator_9166.current_lkey (HERE).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 195)).stringValue () ;
        result << categoryReader_cocoaReset (enumerator_9166.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 195)).stringValue () ;
        result << " ;\n" ;
        index_9166_.increment () ;
        enumerator_9166.gotoNextObject () ;
      }
    }
    result << "    mTokenStartLocation = mCurrentLocation ;\n" ;
    if (GALGAS_uint ((uint32_t) 4U).isValid ()) {
      result.incIndentation ((int32_t) GALGAS_uint ((uint32_t) 4U).uintValue ()) ;
    }
    GALGAS_uint index_9376_ (0) ;
    if (in_LEXICAL_5F_RULE_5F_LIST.isValid ()) {
      cEnumerator_lexicalRuleListAST enumerator_9376 (in_LEXICAL_5F_RULE_5F_LIST, kEnumeration_up) ;
      while (enumerator_9376.hasCurrentObject ()) {
        result << callCategoryReader_generateCocoaCode ((const cPtr_abstractLexicalRuleAST *) enumerator_9376.current_mLexicalRule (HERE).ptr (), in_LEXIQUE_5F_CLASS_5F_NAME, in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT, inCompiler COMMA_SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 201)).stringValue () ;
        index_9376_.increment () ;
        enumerator_9376.gotoNextObject () ;
      }
    }
    if (GALGAS_uint ((uint32_t) 4U).isValid ()) {
      result.incIndentation (- ((int32_t) GALGAS_uint ((uint32_t) 4U).uintValue ())) ;
    }
    result << "if ([self testForInputChar:'\\0']) { // End of source text \? \n"
      "      mTokenCode = " ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
    result << "_1_ ; // Empty string code\n"
      "    }else{ // Unknown input character\n"
      "      scanningOk = NO ;\n"
      "      [self advance] ;\n"
      "    }\n"
      "  //--- Error \?\n"
      "    if (! scanningOk) {\n"
      "      mTokenCode = -1 ;\n"
      "    }" ;
  }
  result << "\n"
    "  }\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                   T E R M I N A L    C O U N T                              *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (NSUInteger) terminalVocabularyCount {\n"
    "  return " ;
  result << in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 224)).reader_length (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 224)).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 224)).stringValue () ;
  result << " ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                     S T Y L E   C O U N T                                   *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (NSUInteger) styleCount {\n"
    "  return " ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 234)).reader_length (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 234)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 234)).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 234)).stringValue () ;
  result << " ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                I S    T E M P L A T E    L E X I Q U E                      *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (BOOL) isTemplateLexique {\n"
    "  return " ;
  result << GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 244)).reader_length (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 244)).objectCompare (GALGAS_uint ((uint32_t) 0U))).reader_ocString (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 244)).stringValue () ;
  result << " ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//              S T Y L E   F O R    T E R M I N A L                           *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (NSUInteger) styleIndexForTerminal: (NSInteger) inTerminal {\n"
    "  static const NSUInteger kTerminalSymbolStyles [" ;
  result << in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 254)).reader_length (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 254)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 254)).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 254)).stringValue () ;
  result << "] = {0" ;
  GALGAS_uint index_11990_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 255)).isValid ()) {
    cEnumerator_terminalList enumerator_11990 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 255)), kEnumeration_up) ;
    while (enumerator_11990.hasCurrentObject ()) {
      result << ",\n"
        "    " ;
      result << enumerator_11990.current_mStyleIndex (HERE).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 256)).stringValue () ;
      result << " /* " ;
      result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
      result << "_1_" ;
      result << enumerator_11990.current_mTerminalName (HERE).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 256)).reader_identifierRepresentation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 256)).stringValue () ;
      result << " */" ;
      index_11990_.increment () ;
      enumerator_11990.gotoNextObject () ;
    }
  }
  result << "\n"
    "  } ;\n"
    "  return kTerminalSymbolStyles [inTerminal] ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//    A T O M I C    S E L E C T I O N   F O R    T E R M I N A L              *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (BOOL) atomicSelectionForToken: (NSUInteger) inTokenIndex {\n"
    "  static const BOOL kTerminalAtomicSelection [" ;
  result << in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 268)).reader_length (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 268)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 268)).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 268)).stringValue () ;
  result << "] = {NO" ;
  GALGAS_uint index_12809_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 269)).isValid ()) {
    cEnumerator_terminalList enumerator_12809 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 269)), kEnumeration_up) ;
    while (enumerator_12809.hasCurrentObject ()) {
      result << ",\n"
        "    " ;
      result << enumerator_12809.current_mAtomicSelection (HERE).reader_ocString (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 270)).stringValue () ;
      result << " /* " ;
      result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
      result << "_1_" ;
      result << enumerator_12809.current_mTerminalName (HERE).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 270)).reader_identifierRepresentation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 270)).stringValue () ;
      result << " */" ;
      index_12809_.increment () ;
      enumerator_12809.gotoNextObject () ;
    }
  }
  result << "\n"
    "  } ;\n"
    "  return kTerminalAtomicSelection [inTokenIndex] ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//             S T Y L E   N A M E    F O R    I N D E X                       *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (NSString *) styleNameForStyleIndex: (NSInteger) inIndex {\n"
    "  NSString * result = nil ;\n"
    "  if ((inIndex >= 0) && (inIndex < " ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 283)).reader_length (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 283)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 283)).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 283)).stringValue () ;
  result << ")) {\n"
    "    NSString * kStyleArray [" ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 284)).reader_length (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 284)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 284)).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 284)).stringValue () ;
  result << "] = {\n"
    "      @\"Default Style\"" ;
  GALGAS_uint index_13781_ (0) ;
  if (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 286)).isValid ()) {
    cEnumerator_lexicalStyleListAST enumerator_13781 (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 286)), kEnumeration_up) ;
    while (enumerator_13781.hasCurrentObject ()) {
      result << ",\n"
        "      @" ;
      result << enumerator_13781.current_mComment (HERE).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 287)).reader_utf_38_Representation (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 287)).stringValue () ;
      index_13781_.increment () ;
      enumerator_13781.gotoNextObject () ;
    }
  }
  result << "\n"
    "    } ;\n"
    "    result = kStyleArray [inIndex] ;\n"
    "  }\n"
    "  return result ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//         S T Y L E   I D E N T I F I E R    F O R    I N D E X               *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (NSString *) styleIdentifierForStyleIndex: (NSInteger) inIndex {\n"
    "  NSString * result = nil ;\n"
    "  if ((inIndex >= 0) && (inIndex < " ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 302)).reader_length (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 302)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 302)).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 302)).stringValue () ;
  result << ")) {\n"
    "    NSString * kStyleArray [" ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 303)).reader_length (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 303)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 303)).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 303)).stringValue () ;
  result << "] = {\n"
    "      @\"" ;
  result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
  result << "\"" ;
  GALGAS_uint index_14706_ (0) ;
  if (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 305)).isValid ()) {
    cEnumerator_lexicalStyleListAST enumerator_14706 (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 305)), kEnumeration_up) ;
    while (enumerator_14706.hasCurrentObject ()) {
      result << ",\n"
        "      @\"" ;
      result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
      result << "-" ;
      result << enumerator_14706.current_mName (HERE).reader_string (SOURCE_FILE ("lexique_cocoa_implementation.m.gTemplate", 306)).stringValue () ;
      result << "\"" ;
      index_14706_.increment () ;
      enumerator_14706.gotoNextObject () ;
    }
  }
  result << "\n"
    "    } ;\n"
    "    result = kStyleArray [inIndex] ;\n"
    "  }\n"
    "  return result ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//         L E X I Q U E   I D E N T I F I E R                                 *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (NSString *) lexiqueIdentifier {\n"
    "  return @\"" ;
  result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
  result << "\" ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "@end\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                       Routine 'parseLexiqueComponent'                       *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_parseLexiqueComponent (const GALGAS_lstring constinArgument_inSourceFile,
                                    GALGAS_parsedComponentStruct & ioArgument_ioParsedComponentStruct,
                                    GALGAS_galgas_33_LexiqueComponentListAST_2D_element & outArgument_outLexiqueComponentRoot,
                                    C_Compiler * inCompiler
                                    COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outLexiqueComponentRoot.drop () ; // Release 'out' argument
  GALGAS_lstring var_key = GALGAS_lstring::constructor_new (constinArgument_inSourceFile.reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 808)).reader_lastPathComponent (SOURCE_FILE ("lexiqueCompilation.gSemantics", 808)).reader_stringByDeletingPathExtension (SOURCE_FILE ("lexiqueCompilation.gSemantics", 808)), constinArgument_inSourceFile.reader_location (SOURCE_FILE ("lexiqueCompilation.gSemantics", 808)) COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 808)) ;
  const enumGalgasBool test_0 = ioArgument_ioParsedComponentStruct.reader_mParsedLexiqueComponentMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 809)).reader_hasKey (var_key.reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 809)) COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 809)).boolEnum () ;
  if (kBoolTrue == test_0) {
    ioArgument_ioParsedComponentStruct.reader_mParsedLexiqueComponentMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 810)).method_searchKey (var_key, outArgument_outLexiqueComponentRoot, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 810)) ;
  }else if (kBoolFalse == test_0) {
    outArgument_outLexiqueComponentRoot.drop () ;
    C_String syntaxDirectedTranslationResult_33808 ;
    cGrammar_lexiqueLL_31_grammar::_performSourceFileParsing_ (inCompiler, syntaxDirectedTranslationResult_33808, constinArgument_inSourceFile, outArgument_outLexiqueComponentRoot  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 812)) ;
    {
    ioArgument_ioParsedComponentStruct.mAttribute_mParsedLexiqueComponentMap.modifier_insertKey (var_key, outArgument_outLexiqueComponentRoot, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 813)) ;
    }
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                  Routine 'compileLexiqueComponentFromAST'                   *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_compileLexiqueComponentFromAST (const GALGAS_string constinArgument_inComponentNameFromSourceFilePath,
                                             const GALGAS_string constinArgument_inOutputDirectory,
                                             const GALGAS_galgas_33_LexiqueComponentListAST_2D_element constinArgument_inLexiqueComponentRoot,
                                             C_Compiler * inCompiler
                                             COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_lstring var_componentName = constinArgument_inLexiqueComponentRoot.reader_mLexiqueComponentName (SOURCE_FILE ("lexiqueCompilation.gSemantics", 827)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_componentName.reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 828)).objectCompare (constinArgument_inComponentNameFromSourceFilePath)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (var_componentName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticWarning (location_1, GALGAS_string ("GALGAS checks the component name ('").operator_concat (var_componentName.reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 830))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 830)).operator_concat (GALGAS_string ("') against the source file base name ('")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 830)).operator_concat (constinArgument_inComponentNameFromSourceFilePath  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 831)).operator_concat (GALGAS_string ("'): they should be identical")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 831))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 829)) ;
  }
  GALGAS_lexicalTypeMap var_lexicalTypeMap = function_buildLexicalTypeMap (inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 835)) ;
  GALGAS_lexicalRoutineMap var_lexicalRoutineMap ;
  {
  routine_buildLexicalRoutineMap (var_lexicalRoutineMap, inCompiler  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 838)) ;
  }
  cEnumerator_externRoutineListAST enumerator_35250 (constinArgument_inLexiqueComponentRoot.reader_mExternRoutineList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 840)), kEnumeration_up) ;
  while (enumerator_35250.hasCurrentObject ()) {
    GALGAS_lexicalRoutineFormalArgumentList var_lexicalRoutineFormalArgumentList = GALGAS_lexicalRoutineFormalArgumentList::constructor_emptyList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 841)) ;
    cEnumerator_lexicalExternRoutineFormalArgumentListAST enumerator_35384 (enumerator_35250.current_mLexicalRoutineFormalArgumentList (HERE), kEnumeration_up) ;
    while (enumerator_35384.hasCurrentObject ()) {
      GALGAS_lexicalTypeEnum var_lexicalFormalArgumentType ;
      var_lexicalTypeMap.method_searchKey (enumerator_35384.current_mLexicalTypeName (HERE), var_lexicalFormalArgumentType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 844)) ;
      var_lexicalRoutineFormalArgumentList.addAssign_operation (enumerator_35384.current_mPassingMode (HERE), var_lexicalFormalArgumentType, enumerator_35384.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 845))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 845)) ;
      enumerator_35384.gotoNextObject () ;
    }
    {
    var_lexicalRoutineMap.modifier_insertKey (enumerator_35250.current_mRoutineName (HERE), var_lexicalRoutineFormalArgumentList, enumerator_35250.current_mErrorMessageList (HERE), GALGAS_bool (true), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 847)) ;
    }
    enumerator_35250.gotoNextObject () ;
  }
  GALGAS_lexicalFunctionMap var_lexicalFunctionMap ;
  {
  routine_buildLexicalFunctionMap (var_lexicalFunctionMap, inCompiler  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 851)) ;
  }
  cEnumerator_externFunctionListAST enumerator_36054 (constinArgument_inLexiqueComponentRoot.reader_mExternFunctionList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 853)), kEnumeration_up) ;
  while (enumerator_36054.hasCurrentObject ()) {
    GALGAS_lexicalFunctionFormalArgumentList var_lexicalFunctionFormalArgumentList = GALGAS_lexicalFunctionFormalArgumentList::constructor_emptyList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 854)) ;
    cEnumerator_lexicalExternFunctionFormalArgumentListAST enumerator_36191 (enumerator_36054.current_mLexicalFunctionFormalArgumentList (HERE), kEnumeration_up) ;
    while (enumerator_36191.hasCurrentObject ()) {
      GALGAS_lexicalTypeEnum var_lexicalFormalArgumentType ;
      var_lexicalTypeMap.method_searchKey (enumerator_36191.current_mLexicalTypeName (HERE), var_lexicalFormalArgumentType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 857)) ;
      var_lexicalFunctionFormalArgumentList.addAssign_operation (var_lexicalFormalArgumentType, enumerator_36191.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 858))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 858)) ;
      enumerator_36191.gotoNextObject () ;
    }
    GALGAS_lexicalTypeEnum var_returnedArgumentType ;
    var_lexicalTypeMap.method_searchKey (enumerator_36054.current_mReturnedTypeName (HERE), var_returnedArgumentType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 861)) ;
    {
    var_lexicalFunctionMap.modifier_insertKey (enumerator_36054.current_mFunctionName (HERE), var_lexicalFunctionFormalArgumentList, var_returnedArgumentType, GALGAS_string::makeEmptyString (), GALGAS_bool (true), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 862)) ;
    }
    enumerator_36054.gotoNextObject () ;
  }
  GALGAS_stringset var_externUnicodeTestFunctions = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("lexiqueCompilation.gSemantics", 865)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("unicodeToLower")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 866)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("unicodeToUpper")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 867)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeLetter")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 868)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeMark")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 869)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeNumber")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 870)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeDecimalDigit")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 871)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeASCIIHexDigit")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 872)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeSeparator")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 873)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeCommand")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 874)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodePunctuation")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 875)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeSymbol")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 876)) ;
  GALGAS_lexiqueAnalysisContext var_lexiqueAnalysisContext = GALGAS_lexiqueAnalysisContext::constructor_new (var_lexicalRoutineMap, var_lexicalFunctionMap, GALGAS_lexicalMessageMap::constructor_emptyMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 881)), GALGAS_terminalMap::constructor_emptyMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 882)), GALGAS_terminalList::constructor_emptyList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 883)), GALGAS_lexicalAttributeMap::constructor_emptyMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 884)), GALGAS_lexicalExplicitTokenListMapMap::constructor_emptyMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 885)), GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("lexiqueCompilation.gSemantics", 886)), GALGAS_templateDelimitorList::constructor_emptyList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 887)), GALGAS_styleMap::constructor_emptyMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 888)), var_externUnicodeTestFunctions COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 878)) ;
  GALGAS_uint var_styleIndex = GALGAS_uint ((uint32_t) 1U) ;
  cEnumerator_lexicalStyleListAST enumerator_38008 (constinArgument_inLexiqueComponentRoot.reader_mLexicalStyleList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 893)), kEnumeration_up) ;
  while (enumerator_38008.hasCurrentObject ()) {
    {
    var_lexiqueAnalysisContext.mAttribute_mStyleMap.modifier_insertKey (enumerator_38008.current_mName (HERE), enumerator_38008.current_mComment (HERE), var_styleIndex, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 894)) ;
    }
    var_styleIndex.increment_operation (inCompiler  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 895)) ;
    enumerator_38008.gotoNextObject () ;
  }
  {
  routine_buildLexicalAttributeMap (var_lexicalTypeMap, constinArgument_inLexiqueComponentRoot.reader_mLexicalAttributeList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 900)), var_lexiqueAnalysisContext.mAttribute_mLexicalAttributeMap, inCompiler  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 898)) ;
  }
  cEnumerator_terminalDeclarationListAST enumerator_38470 (constinArgument_inLexiqueComponentRoot.reader_mTerminalDeclarationList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 904)), kEnumeration_up) ;
  while (enumerator_38470.hasCurrentObject ()) {
    GALGAS_uint var_terminalStyleIndex = GALGAS_uint ((uint32_t) 0U) ;
    const enumGalgasBool test_2 = GALGAS_bool (kIsStrictSup, enumerator_38470.current_mStyle (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 906)).reader_length (SOURCE_FILE ("lexiqueCompilation.gSemantics", 906)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_2) {
      GALGAS_lstring joker_38612_0 ; // Joker input parameter
      var_lexiqueAnalysisContext.reader_mStyleMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 907)).method_searchKey (enumerator_38470.current_mStyle (HERE), joker_38612_0, var_terminalStyleIndex, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 907)) ;
    }
    GALGAS_lexicalSentValueList var_argumentTypeList = GALGAS_lexicalSentValueList::constructor_emptyList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 909)) ;
    cEnumerator_lstringlist enumerator_38737 (enumerator_38470.current_mSentAttributeList (HERE), kEnumeration_up) ;
    while (enumerator_38737.hasCurrentObject ()) {
      GALGAS_lexicalTypeEnum var_attributeLexicalType ;
      var_lexiqueAnalysisContext.mAttribute_mLexicalAttributeMap.method_searchKey (enumerator_38737.current_mValue (HERE), var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 912)) ;
      var_argumentTypeList.addAssign_operation (enumerator_38737.current_mValue (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 913)), var_attributeLexicalType  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 913)) ;
      enumerator_38737.gotoNextObject () ;
    }
    {
    var_lexiqueAnalysisContext.mAttribute_mTerminalMap.modifier_insertKey (enumerator_38470.current_mName (HERE), var_argumentTypeList, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 915)) ;
    }
    GALGAS_bool var_isEndOfTemplateMark = GALGAS_bool (false) ;
    GALGAS_bool var_atomicSelection = GALGAS_bool (true) ;
    cEnumerator_lstringlist enumerator_39149 (enumerator_38470.current_mOptionList (HERE), kEnumeration_up) ;
    while (enumerator_39149.hasCurrentObject ()) {
      const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, enumerator_39149.current_mValue (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 919)).objectCompare (GALGAS_string ("nonAtomicSelection"))).boolEnum () ;
      if (kBoolTrue == test_3) {
        const enumGalgasBool test_4 = var_atomicSelection.boolEnum () ;
        if (kBoolTrue == test_4) {
          var_atomicSelection = GALGAS_bool (false) ;
        }else if (kBoolFalse == test_4) {
          GALGAS_location location_5 (enumerator_39149.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_5, GALGAS_string ("the 'nonAtomicSelection' feature is already set")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 923)) ;
        }
      }else if (kBoolFalse == test_3) {
        const enumGalgasBool test_6 = GALGAS_bool (kIsNotEqual, enumerator_39149.current_mValue (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 925)).objectCompare (GALGAS_string ("templateEndMark"))).boolEnum () ;
        if (kBoolTrue == test_6) {
          GALGAS_location location_7 (enumerator_39149.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_7, GALGAS_string ("only the 'templateEndMark' and 'nonAtomicSelection' features are allowed here")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 926)) ;
        }else if (kBoolFalse == test_6) {
          const enumGalgasBool test_8 = var_isEndOfTemplateMark.boolEnum () ;
          if (kBoolTrue == test_8) {
            GALGAS_location location_9 (enumerator_39149.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_9, GALGAS_string ("the 'templateEndMark' feature is already set")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 928)) ;
          }else if (kBoolFalse == test_8) {
            var_isEndOfTemplateMark = GALGAS_bool (true) ;
          }
        }
      }
      enumerator_39149.gotoNextObject () ;
    }
    var_lexiqueAnalysisContext.mAttribute_mTerminalList.addAssign_operation (enumerator_38470.current_mName (HERE), var_argumentTypeList, enumerator_38470.current_mSyntaxErrorMessage (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 936)), var_isEndOfTemplateMark, var_atomicSelection, var_terminalStyleIndex  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 933)) ;
    enumerator_38470.gotoNextObject () ;
  }
  cEnumerator_lexicalListDeclarationListAST enumerator_40006 (constinArgument_inLexiqueComponentRoot.reader_mLexicalListDeclarationList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 942)), kEnumeration_up) ;
  while (enumerator_40006.hasCurrentObject ()) {
    GALGAS_uint var_terminalStyleIndex = GALGAS_uint ((uint32_t) 0U) ;
    const enumGalgasBool test_10 = GALGAS_bool (kIsStrictSup, enumerator_40006.current_mStyle (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 944)).reader_length (SOURCE_FILE ("lexiqueCompilation.gSemantics", 944)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_10) {
      GALGAS_lstring joker_40148_0 ; // Joker input parameter
      var_lexiqueAnalysisContext.reader_mStyleMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 945)).method_searchKey (enumerator_40006.current_mStyle (HERE), joker_40148_0, var_terminalStyleIndex, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 945)) ;
    }
    GALGAS_lexicalSentValueList var_argumentTypeList = GALGAS_lexicalSentValueList::constructor_emptyList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 947)) ;
    cEnumerator_sentLexicalAttributeListAST enumerator_40273 (enumerator_40006.current_mSentAttributeList (HERE), kEnumeration_up) ;
    while (enumerator_40273.hasCurrentObject ()) {
      GALGAS_lexicalTypeEnum var_attributeLexicalType ;
      var_lexiqueAnalysisContext.mAttribute_mLexicalAttributeMap.method_searchKey (enumerator_40273.current_mAttributeName (HERE), var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 950)) ;
      var_argumentTypeList.addAssign_operation (enumerator_40273.current_mAttributeName (HERE).mAttribute_string, var_attributeLexicalType  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 951)) ;
      enumerator_40273.gotoNextObject () ;
    }
    GALGAS_lexicalExplicitTokenListMap var_lexicalTokenListMap = GALGAS_lexicalExplicitTokenListMap::constructor_emptyMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 953)) ;
    GALGAS_tokenSortedlist var_tokenSortedlist = GALGAS_tokenSortedlist::constructor_emptySortedList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 954)) ;
    cEnumerator_lexicalListEntryListAST enumerator_40663 (enumerator_40006.current_mEntryList (HERE), kEnumeration_up) ;
    while (enumerator_40663.hasCurrentObject ()) {
      GALGAS_string var_syntaxErrorMessage = enumerator_40006.current_mSyntaxErrorMessage (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 956)).reader_stringByReplacingStringByString (GALGAS_string ("%K"), enumerator_40663.current_mTerminalSpelling (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 956)), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 956)) ;
      GALGAS_bool var_isEndOfTemplateMark = GALGAS_bool (false) ;
      GALGAS_bool var_atomicSelection = GALGAS_bool (true) ;
      cEnumerator_lstringlist enumerator_40909 (enumerator_40663.current_mFeatureList (HERE), kEnumeration_up) ;
      while (enumerator_40909.hasCurrentObject ()) {
        const enumGalgasBool test_11 = GALGAS_bool (kIsEqual, enumerator_40909.current_mValue (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 960)).objectCompare (GALGAS_string ("nonAtomicSelection"))).boolEnum () ;
        if (kBoolTrue == test_11) {
          const enumGalgasBool test_12 = var_atomicSelection.boolEnum () ;
          if (kBoolTrue == test_12) {
            var_atomicSelection = GALGAS_bool (false) ;
          }else if (kBoolFalse == test_12) {
            GALGAS_location location_13 (enumerator_40909.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_13, GALGAS_string ("the 'nonAtomicSelection' feature is already set")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 964)) ;
          }
        }else if (kBoolFalse == test_11) {
          const enumGalgasBool test_14 = GALGAS_bool (kIsNotEqual, enumerator_40909.current_mValue (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 966)).objectCompare (GALGAS_string ("templateEndMark"))).boolEnum () ;
          if (kBoolTrue == test_14) {
            GALGAS_location location_15 (enumerator_40909.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_15, GALGAS_string ("only the 'templateEndMark' and 'nonAtomicSelection' features are allowed here")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 967)) ;
          }else if (kBoolFalse == test_14) {
            const enumGalgasBool test_16 = var_isEndOfTemplateMark.boolEnum () ;
            if (kBoolTrue == test_16) {
              GALGAS_location location_17 (enumerator_40909.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
              inCompiler->emitSemanticError (location_17, GALGAS_string ("the 'templateEndMark' feature is already set")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 969)) ;
            }else if (kBoolFalse == test_16) {
              var_isEndOfTemplateMark = GALGAS_bool (true) ;
            }
          }
        }
        enumerator_40909.gotoNextObject () ;
      }
      var_lexiqueAnalysisContext.mAttribute_mTerminalList.addAssign_operation (enumerator_40663.current_mTerminalSpelling (HERE), var_argumentTypeList, var_syntaxErrorMessage, var_isEndOfTemplateMark, var_atomicSelection, var_terminalStyleIndex  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 974)) ;
      {
      var_lexiqueAnalysisContext.mAttribute_mTerminalMap.modifier_insertKey (enumerator_40663.current_mTerminalSpelling (HERE), var_argumentTypeList, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 982)) ;
      }
      {
      var_lexicalTokenListMap.modifier_insertKey (enumerator_40663.current_mEntrySpelling (HERE), enumerator_40663.current_mTerminalSpelling (HERE), enumerator_40663.current_mFeatureList (HERE), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 983)) ;
      }
      var_tokenSortedlist.addAssign_operation (enumerator_40663.current_mEntrySpelling (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 984)).reader_length (SOURCE_FILE ("lexiqueCompilation.gSemantics", 984)), enumerator_40663.current_mEntrySpelling (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 984)), enumerator_40663.current_mTerminalSpelling (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 984))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 984)) ;
      var_lexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (enumerator_40663.current_mEntrySpelling (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 985))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 985)) ;
      enumerator_40663.gotoNextObject () ;
    }
    {
    var_lexiqueAnalysisContext.mAttribute_mLexicalTokenListMap.modifier_insertKey (enumerator_40006.current_mName (HERE), var_lexicalTokenListMap, var_tokenSortedlist, GALGAS_bool (false), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 987)) ;
    }
    enumerator_40006.gotoNextObject () ;
  }
  cEnumerator_lexicalMessageDeclarationListAST enumerator_42395 (constinArgument_inLexiqueComponentRoot.reader_mLexicalMessageDeclarationList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 990)), kEnumeration_up) ;
  while (enumerator_42395.hasCurrentObject ()) {
    {
    var_lexiqueAnalysisContext.mAttribute_mLexicalMessageMap.modifier_insertKey (enumerator_42395.current_mMessageName (HERE), enumerator_42395.current_mMessageValue (HERE), GALGAS_bool (false), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 991)) ;
    }
    enumerator_42395.gotoNextObject () ;
  }
  cEnumerator_lexicalRuleListAST enumerator_42618 (constinArgument_inLexiqueComponentRoot.reader_mLexicalRuleList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 994)), kEnumeration_up) ;
  while (enumerator_42618.hasCurrentObject ()) {
    callCategoryMethod_checkLexicalRule ((const cPtr_abstractLexicalRuleAST *) enumerator_42618.current_mLexicalRule (HERE).ptr (), var_lexiqueAnalysisContext, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 995)) ;
    enumerator_42618.gotoNextObject () ;
  }
  cEnumerator_lexicalMessageMap enumerator_42820 (var_lexiqueAnalysisContext.reader_mLexicalMessageMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 998)), kEnumeration_up) ;
  while (enumerator_42820.hasCurrentObject ()) {
    const enumGalgasBool test_18 = enumerator_42820.current_mMessageIsUsed (HERE).operator_not (SOURCE_FILE ("lexiqueCompilation.gSemantics", 999)).boolEnum () ;
    if (kBoolTrue == test_18) {
      GALGAS_location location_19 (enumerator_42820.current_lkey (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticWarning (location_19, GALGAS_string ("unused message")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1000)) ;
    }
    enumerator_42820.gotoNextObject () ;
  }
  cEnumerator_metamodelTemplateDelimitorListAST enumerator_43040 (constinArgument_inLexiqueComponentRoot.reader_mTemplateDelimitorList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1004)), kEnumeration_up) ;
  while (enumerator_43040.hasCurrentObject ()) {
    var_lexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (enumerator_43040.current_mStartString (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1005))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1005)) ;
    var_lexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (enumerator_43040.current_mEndString (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1006))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1006)) ;
    GALGAS_bool var_preservesStartDelimiter = GALGAS_bool (false) ;
    cEnumerator_lstringlist enumerator_43268 (enumerator_43040.current_mOptionList (HERE), kEnumeration_up) ;
    while (enumerator_43268.hasCurrentObject ()) {
      const enumGalgasBool test_20 = GALGAS_bool (kIsNotEqual, enumerator_43268.current_mValue (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1009)).objectCompare (GALGAS_string ("preserved"))).boolEnum () ;
      if (kBoolTrue == test_20) {
        GALGAS_location location_21 (enumerator_43268.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_21, GALGAS_string ("only the 'preserved' feature is allowed here")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1010)) ;
      }else if (kBoolFalse == test_20) {
        const enumGalgasBool test_22 = var_preservesStartDelimiter.boolEnum () ;
        if (kBoolTrue == test_22) {
          GALGAS_location location_23 (enumerator_43268.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_23, GALGAS_string ("the 'preserved' feature is already set")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1012)) ;
        }else if (kBoolFalse == test_22) {
          var_preservesStartDelimiter = GALGAS_bool (true) ;
        }
      }
      enumerator_43268.gotoNextObject () ;
    }
    var_lexiqueAnalysisContext.mAttribute_mTemplateDelimitorList.addAssign_operation (enumerator_43040.current_mStartString (HERE), enumerator_43040.current_mEndString (HERE), var_preservesStartDelimiter  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1017)) ;
    enumerator_43040.gotoNextObject () ;
  }
  const enumGalgasBool test_24 = constinArgument_inLexiqueComponentRoot.reader_mIndexingDirectory (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1020)).mAttribute_location.reader_isNowhere (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1020)).boolEnum () ;
  if (kBoolTrue == test_24) {
    cEnumerator_indexingListAST enumerator_43882 (constinArgument_inLexiqueComponentRoot.reader_mIndexingListAST (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1021)), kEnumeration_up) ;
    while (enumerator_43882.hasCurrentObject ()) {
      GALGAS_location location_25 (enumerator_43882.current_mIndexName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_25, GALGAS_string ("indexing declaration requires one 'indexing in \"path\";' declaration")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1022)) ;
      enumerator_43882.gotoNextObject () ;
    }
  }
  GALGAS_stringset var_indexNameSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1025)) ;
  cEnumerator_indexingListAST enumerator_44104 (constinArgument_inLexiqueComponentRoot.reader_mIndexingListAST (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1026)), kEnumeration_up) ;
  while (enumerator_44104.hasCurrentObject ()) {
    const enumGalgasBool test_26 = var_indexNameSet.reader_hasKey (enumerator_44104.current_mIndexName (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1027)) COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1027)).boolEnum () ;
    if (kBoolTrue == test_26) {
      GALGAS_location location_27 (enumerator_44104.current_mIndexName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_27, GALGAS_string ("the '").operator_concat (enumerator_44104.current_mIndexName (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1028))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1028)).operator_concat (GALGAS_string ("' index is already declared")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1028))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1028)) ;
    }
    var_indexNameSet.addAssign_operation (enumerator_44104.current_mIndexName (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1030))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1030)) ;
    enumerator_44104.gotoNextObject () ;
  }
  cEnumerator_templateReplacementListAST enumerator_44437 (constinArgument_inLexiqueComponentRoot.reader_mTemplateReplacementList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1033)), kEnumeration_up) ;
  while (enumerator_44437.hasCurrentObject ()) {
    var_lexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (enumerator_44437.current_mMatchString (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1034))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1034)) ;
    var_lexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (enumerator_44437.current_mReplacementString (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1035))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1035)) ;
    enumerator_44437.gotoNextObject () ;
  }
  GALGAS_string var_lexiqueClassName = var_componentName.reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1039)) ;
  const enumGalgasBool test_28 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1041)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_28) {
    {
    GALGAS_string::class_method_generateFileWithPattern (constinArgument_inOutputDirectory, var_lexiqueClassName.operator_concat (GALGAS_string (".h")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1044)), GALGAS_string ("//"), GALGAS_string ("\n"
      "\n"), GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_newHeaderZone_32_ (inCompiler, var_lexiqueClassName.reader_identifierRepresentation (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1048)), var_lexiqueAnalysisContext, constinArgument_inLexiqueComponentRoot COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1047))), GALGAS_string ("\n"
      "\n"), GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_newHeaderZone_33_ (inCompiler, var_lexiqueClassName.reader_identifierRepresentation (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1054)), constinArgument_inLexiqueComponentRoot.reader_mLexicalListDeclarationList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1055)), var_lexiqueAnalysisContext, constinArgument_inLexiqueComponentRoot.reader_mIndexingListAST (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1057)) COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1053))), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1042)) ;
    }
  }
  const enumGalgasBool test_29 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1062)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_29) {
    {
    GALGAS_string::class_method_generateFileWithPattern (constinArgument_inOutputDirectory, var_lexiqueClassName.operator_concat (GALGAS_string (".cpp")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1065)), GALGAS_string ("//"), GALGAS_string ("\n"
      "\n"), GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_newImplementationZone_32_ (inCompiler, var_lexiqueClassName.reader_identifierRepresentation (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1069)), var_lexiqueAnalysisContext.reader_mLexicalAttributeMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1070)), var_lexiqueAnalysisContext.reader_mLexicalMessageMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1071)), var_lexiqueAnalysisContext.reader_mTerminalList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1072)), var_lexiqueAnalysisContext.reader_mLexicalTokenListMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1073)), var_lexiqueAnalysisContext.reader_mUnicodeStringToGenerate (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1074)), constinArgument_inLexiqueComponentRoot.reader_mLexicalRuleList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1075)), var_lexiqueAnalysisContext, constinArgument_inLexiqueComponentRoot COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1068))), GALGAS_string ("\n"
      "\n"), GALGAS_string ("\n"
      "\n"), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1063)) ;
    }
  }
  const enumGalgasBool test_30 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1084)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_30) {
    {
    GALGAS_string::class_method_generateFileWithPattern (constinArgument_inOutputDirectory, var_lexiqueClassName.operator_concat (GALGAS_string ("-cocoa.h")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1087)), GALGAS_string ("//"), GALGAS_string ("\n"
      "\n"), GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_cocoaHeaderZone_32_ (inCompiler, var_lexiqueClassName, var_lexiqueAnalysisContext COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1090))), GALGAS_string ("\n"
      "\n"), GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_cocoaHeaderZone_33_ (inCompiler, var_lexiqueClassName, var_lexiqueAnalysisContext COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1095))), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1085)) ;
    }
  }
  const enumGalgasBool test_31 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1102)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_31) {
    {
    GALGAS_string::class_method_generateFileWithPattern (constinArgument_inOutputDirectory, var_lexiqueClassName.operator_concat (GALGAS_string ("-cocoa.m")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1105)), GALGAS_string ("//"), GALGAS_string ("\n"
      "\n"), GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_cocoaImplementationZone_32_ (inCompiler, var_lexiqueClassName, var_lexiqueAnalysisContext.reader_mLexicalAttributeMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1110)), var_lexiqueAnalysisContext.reader_mLexicalMessageMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1111)), var_lexiqueAnalysisContext.reader_mTerminalList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1112)), var_lexiqueAnalysisContext.reader_mUnicodeStringToGenerate (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1113)), constinArgument_inLexiqueComponentRoot.reader_mLexicalRuleList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1114)), var_lexiqueAnalysisContext, constinArgument_inLexiqueComponentRoot COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1108))), GALGAS_string ("\n"
      "\n"), GALGAS_string ("\n"
      "\n"), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1103)) ;
    }
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                 Routine 'compileLexiqueComponentFromSource'                 *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_compileLexiqueComponentFromSource (const GALGAS_lstring constinArgument_inSourceFile,
                                                const GALGAS_string constinArgument_inOutputDirectory,
                                                GALGAS_parsedComponentStruct & ioArgument_ioParsedComponentStruct,
                                                C_Compiler * inCompiler
                                                COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_galgas_33_LexiqueComponentListAST_2D_element var_lexiqueComponentRoot ;
  {
  routine_parseLexiqueComponent (constinArgument_inSourceFile, ioArgument_ioParsedComponentStruct, var_lexiqueComponentRoot, inCompiler  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1134)) ;
  }
  {
  routine_compileLexiqueComponentFromAST (constinArgument_inSourceFile.reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1140)).reader_lastPathComponent (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1140)).reader_stringByDeletingPathExtension (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1140)), constinArgument_inOutputDirectory, var_lexiqueComponentRoot, inCompiler  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1139)) ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//         Class for element of '@lexiqueComponentGenerationList' list         *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_lexiqueComponentGenerationList : public cCollectionElement {
  public : GALGAS_lexiqueComponentGenerationList_2D_element mObject ;

//--- Constructor
  public : cCollectionElement_lexiqueComponentGenerationList (const GALGAS_string & in_mLexiqueComponentName,
                                                              const GALGAS_string & in_mCppHeaderContents,
                                                              const GALGAS_string & in_mCppContents,
                                                              const GALGAS_string & in_mCocoaHeaderContents,
                                                              const GALGAS_string & in_mCocoaContents
                                                              COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_lexiqueComponentGenerationList::cCollectionElement_lexiqueComponentGenerationList (const GALGAS_string & in_mLexiqueComponentName,
                                                                                                      const GALGAS_string & in_mCppHeaderContents,
                                                                                                      const GALGAS_string & in_mCppContents,
                                                                                                      const GALGAS_string & in_mCocoaHeaderContents,
                                                                                                      const GALGAS_string & in_mCocoaContents
                                                                                                      COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mLexiqueComponentName, in_mCppHeaderContents, in_mCppContents, in_mCocoaHeaderContents, in_mCocoaContents) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_lexiqueComponentGenerationList::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_lexiqueComponentGenerationList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_lexiqueComponentGenerationList (mObject.mAttribute_mLexiqueComponentName, mObject.mAttribute_mCppHeaderContents, mObject.mAttribute_mCppContents, mObject.mAttribute_mCocoaHeaderContents, mObject.mAttribute_mCocoaContents COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_lexiqueComponentGenerationList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mLexiqueComponentName" ":" ;
  mObject.mAttribute_mLexiqueComponentName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mCppHeaderContents" ":" ;
  mObject.mAttribute_mCppHeaderContents.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mCppContents" ":" ;
  mObject.mAttribute_mCppContents.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mCocoaHeaderContents" ":" ;
  mObject.mAttribute_mCocoaHeaderContents.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mCocoaContents" ":" ;
  mObject.mAttribute_mCocoaContents.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_lexiqueComponentGenerationList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_lexiqueComponentGenerationList * operand = (cCollectionElement_lexiqueComponentGenerationList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_lexiqueComponentGenerationList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lexiqueComponentGenerationList::GALGAS_lexiqueComponentGenerationList (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_lexiqueComponentGenerationList::GALGAS_lexiqueComponentGenerationList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_lexiqueComponentGenerationList GALGAS_lexiqueComponentGenerationList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_lexiqueComponentGenerationList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lexiqueComponentGenerationList GALGAS_lexiqueComponentGenerationList::constructor_listWithValue (const GALGAS_string & inOperand0,
                                                                                                        const GALGAS_string & inOperand1,
                                                                                                        const GALGAS_string & inOperand2,
                                                                                                        const GALGAS_string & inOperand3,
                                                                                                        const GALGAS_string & inOperand4
                                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_lexiqueComponentGenerationList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_lexiqueComponentGenerationList::makeAttributesFromObjects (attributes, inOperand0, inOperand1, inOperand2, inOperand3, inOperand4 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_lexiqueComponentGenerationList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                       const GALGAS_string & in_mLexiqueComponentName,
                                                                       const GALGAS_string & in_mCppHeaderContents,
                                                                       const GALGAS_string & in_mCppContents,
                                                                       const GALGAS_string & in_mCocoaHeaderContents,
                                                                       const GALGAS_string & in_mCocoaContents
                                                                       COMMA_LOCATION_ARGS) {
  cCollectionElement_lexiqueComponentGenerationList * p = NULL ;
  macroMyNew (p, cCollectionElement_lexiqueComponentGenerationList (in_mLexiqueComponentName,
                                                                    in_mCppHeaderContents,
                                                                    in_mCppContents,
                                                                    in_mCocoaHeaderContents,
                                                                    in_mCocoaContents COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_lexiqueComponentGenerationList::addAssign_operation (const GALGAS_string & inOperand0,
                                                                 const GALGAS_string & inOperand1,
                                                                 const GALGAS_string & inOperand2,
                                                                 const GALGAS_string & inOperand3,
                                                                 const GALGAS_string & inOperand4
                                                                 COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_lexiqueComponentGenerationList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_lexiqueComponentGenerationList::modifier_insertAtIndex (const GALGAS_string inOperand0,
                                                                    const GALGAS_string inOperand1,
                                                                    const GALGAS_string inOperand2,
                                                                    const GALGAS_string inOperand3,
                                                                    const GALGAS_string inOperand4,
                                                                    const GALGAS_uint inInsertionIndex,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_lexiqueComponentGenerationList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_lexiqueComponentGenerationList::modifier_removeAtIndex (GALGAS_string & outOperand0,
                                                                    GALGAS_string & outOperand1,
                                                                    GALGAS_string & outOperand2,
                                                                    GALGAS_string & outOperand3,
                                                                    GALGAS_string & outOperand4,
                                                                    const GALGAS_uint inRemoveIndex,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_lexiqueComponentGenerationList * p = (cCollectionElement_lexiqueComponentGenerationList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
      outOperand2.drop () ;
      outOperand3.drop () ;
      outOperand4.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_lexiqueComponentGenerationList) ;
      outOperand0 = p->mObject.mAttribute_mLexiqueComponentName ;
      outOperand1 = p->mObject.mAttribute_mCppHeaderContents ;
      outOperand2 = p->mObject.mAttribute_mCppContents ;
      outOperand3 = p->mObject.mAttribute_mCocoaHeaderContents ;
      outOperand4 = p->mObject.mAttribute_mCocoaContents ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_lexiqueComponentGenerationList::modifier_popFirst (GALGAS_string & outOperand0,
                                                               GALGAS_string & outOperand1,
                                                               GALGAS_string & outOperand2,
                                                               GALGAS_string & outOperand3,
                                                               GALGAS_string & outOperand4,
                                                               C_Compiler * inCompiler
                                                               COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_lexiqueComponentGenerationList * p = (cCollectionElement_lexiqueComponentGenerationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_lexiqueComponentGenerationList) ;
    outOperand0 = p->mObject.mAttribute_mLexiqueComponentName ;
    outOperand1 = p->mObject.mAttribute_mCppHeaderContents ;
    outOperand2 = p->mObject.mAttribute_mCppContents ;
    outOperand3 = p->mObject.mAttribute_mCocoaHeaderContents ;
    outOperand4 = p->mObject.mAttribute_mCocoaContents ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_lexiqueComponentGenerationList::modifier_popLast (GALGAS_string & outOperand0,
                                                              GALGAS_string & outOperand1,
                                                              GALGAS_string & outOperand2,
                                                              GALGAS_string & outOperand3,
                                                              GALGAS_string & outOperand4,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_lexiqueComponentGenerationList * p = (cCollectionElement_lexiqueComponentGenerationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_lexiqueComponentGenerationList) ;
    outOperand0 = p->mObject.mAttribute_mLexiqueComponentName ;
    outOperand1 = p->mObject.mAttribute_mCppHeaderContents ;
    outOperand2 = p->mObject.mAttribute_mCppContents ;
    outOperand3 = p->mObject.mAttribute_mCocoaHeaderContents ;
    outOperand4 = p->mObject.mAttribute_mCocoaContents ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_lexiqueComponentGenerationList::method_first (GALGAS_string & outOperand0,
                                                          GALGAS_string & outOperand1,
                                                          GALGAS_string & outOperand2,
                                                          GALGAS_string & outOperand3,
                                                          GALGAS_string & outOperand4,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_lexiqueComponentGenerationList * p = (cCollectionElement_lexiqueComponentGenerationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_lexiqueComponentGenerationList) ;
    outOperand0 = p->mObject.mAttribute_mLexiqueComponentName ;
    outOperand1 = p->mObject.mAttribute_mCppHeaderContents ;
    outOperand2 = p->mObject.mAttribute_mCppContents ;
    outOperand3 = p->mObject.mAttribute_mCocoaHeaderContents ;
    outOperand4 = p->mObject.mAttribute_mCocoaContents ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_lexiqueComponentGenerationList::method_last (GALGAS_string & outOperand0,
                                                         GALGAS_string & outOperand1,
                                                         GALGAS_string & outOperand2,
                                                         GALGAS_string & outOperand3,
                                                         GALGAS_string & outOperand4,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_lexiqueComponentGenerationList * p = (cCollectionElement_lexiqueComponentGenerationList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_lexiqueComponentGenerationList) ;
    outOperand0 = p->mObject.mAttribute_mLexiqueComponentName ;
    outOperand1 = p->mObject.mAttribute_mCppHeaderContents ;
    outOperand2 = p->mObject.mAttribute_mCppContents ;
    outOperand3 = p->mObject.mAttribute_mCocoaHeaderContents ;
    outOperand4 = p->mObject.mAttribute_mCocoaContents ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_lexiqueComponentGenerationList GALGAS_lexiqueComponentGenerationList::operator_concat (const GALGAS_lexiqueComponentGenerationList & inOperand
                                                                                              COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_lexiqueComponentGenerationList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lexiqueComponentGenerationList GALGAS_lexiqueComponentGenerationList::add_operation (const GALGAS_lexiqueComponentGenerationList & inOperand,
                                                                                            C_Compiler * /* inCompiler */
                                                                                            COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_lexiqueComponentGenerationList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lexiqueComponentGenerationList GALGAS_lexiqueComponentGenerationList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                                      C_Compiler * inCompiler
                                                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_lexiqueComponentGenerationList result = GALGAS_lexiqueComponentGenerationList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lexiqueComponentGenerationList GALGAS_lexiqueComponentGenerationList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                                      C_Compiler * inCompiler
                                                                                                      COMMA_LOCATION_ARGS) const {
  GALGAS_lexiqueComponentGenerationList result = GALGAS_lexiqueComponentGenerationList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_lexiqueComponentGenerationList::dotAssign_operation (const GALGAS_lexiqueComponentGenerationList inOperand
                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_string GALGAS_lexiqueComponentGenerationList::reader_mLexiqueComponentNameAtIndex (const GALGAS_uint & inIndex,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_lexiqueComponentGenerationList * p = (cCollectionElement_lexiqueComponentGenerationList *) attributes.ptr () ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_lexiqueComponentGenerationList) ;
    result = p->mObject.mAttribute_mLexiqueComponentName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_string GALGAS_lexiqueComponentGenerationList::reader_mCppHeaderContentsAtIndex (const GALGAS_uint & inIndex,
                                                                                       C_Compiler * inCompiler
                                                                                       COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_lexiqueComponentGenerationList * p = (cCollectionElement_lexiqueComponentGenerationList *) attributes.ptr () ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_lexiqueComponentGenerationList) ;
    result = p->mObject.mAttribute_mCppHeaderContents ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_string GALGAS_lexiqueComponentGenerationList::reader_mCppContentsAtIndex (const GALGAS_uint & inIndex,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_lexiqueComponentGenerationList * p = (cCollectionElement_lexiqueComponentGenerationList *) attributes.ptr () ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_lexiqueComponentGenerationList) ;
    result = p->mObject.mAttribute_mCppContents ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_string GALGAS_lexiqueComponentGenerationList::reader_mCocoaHeaderContentsAtIndex (const GALGAS_uint & inIndex,
                                                                                         C_Compiler * inCompiler
                                                                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_lexiqueComponentGenerationList * p = (cCollectionElement_lexiqueComponentGenerationList *) attributes.ptr () ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_lexiqueComponentGenerationList) ;
    result = p->mObject.mAttribute_mCocoaHeaderContents ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_string GALGAS_lexiqueComponentGenerationList::reader_mCocoaContentsAtIndex (const GALGAS_uint & inIndex,
                                                                                   C_Compiler * inCompiler
                                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_lexiqueComponentGenerationList * p = (cCollectionElement_lexiqueComponentGenerationList *) attributes.ptr () ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_lexiqueComponentGenerationList) ;
    result = p->mObject.mAttribute_mCocoaContents ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_lexiqueComponentGenerationList::cEnumerator_lexiqueComponentGenerationList (const GALGAS_lexiqueComponentGenerationList & inEnumeratedObject,
                                                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lexiqueComponentGenerationList_2D_element cEnumerator_lexiqueComponentGenerationList::current (LOCATION_ARGS) const {
  const cCollectionElement_lexiqueComponentGenerationList * p = (const cCollectionElement_lexiqueComponentGenerationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_lexiqueComponentGenerationList) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_string cEnumerator_lexiqueComponentGenerationList::current_mLexiqueComponentName (LOCATION_ARGS) const {
  const cCollectionElement_lexiqueComponentGenerationList * p = (const cCollectionElement_lexiqueComponentGenerationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_lexiqueComponentGenerationList) ;
  return p->mObject.mAttribute_mLexiqueComponentName ;
}

//-----------------------------------------------------------------------------*

GALGAS_string cEnumerator_lexiqueComponentGenerationList::current_mCppHeaderContents (LOCATION_ARGS) const {
  const cCollectionElement_lexiqueComponentGenerationList * p = (const cCollectionElement_lexiqueComponentGenerationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_lexiqueComponentGenerationList) ;
  return p->mObject.mAttribute_mCppHeaderContents ;
}

//-----------------------------------------------------------------------------*

GALGAS_string cEnumerator_lexiqueComponentGenerationList::current_mCppContents (LOCATION_ARGS) const {
  const cCollectionElement_lexiqueComponentGenerationList * p = (const cCollectionElement_lexiqueComponentGenerationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_lexiqueComponentGenerationList) ;
  return p->mObject.mAttribute_mCppContents ;
}

//-----------------------------------------------------------------------------*

GALGAS_string cEnumerator_lexiqueComponentGenerationList::current_mCocoaHeaderContents (LOCATION_ARGS) const {
  const cCollectionElement_lexiqueComponentGenerationList * p = (const cCollectionElement_lexiqueComponentGenerationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_lexiqueComponentGenerationList) ;
  return p->mObject.mAttribute_mCocoaHeaderContents ;
}

//-----------------------------------------------------------------------------*

GALGAS_string cEnumerator_lexiqueComponentGenerationList::current_mCocoaContents (LOCATION_ARGS) const {
  const cCollectionElement_lexiqueComponentGenerationList * p = (const cCollectionElement_lexiqueComponentGenerationList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_lexiqueComponentGenerationList) ;
  return p->mObject.mAttribute_mCocoaContents ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                    @lexiqueComponentGenerationList type                     *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_lexiqueComponentGenerationList ("lexiqueComponentGenerationList",
                                                       NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_lexiqueComponentGenerationList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_lexiqueComponentGenerationList ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_lexiqueComponentGenerationList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_lexiqueComponentGenerationList (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lexiqueComponentGenerationList GALGAS_lexiqueComponentGenerationList::extractObject (const GALGAS_object & inObject,
                                                                                            C_Compiler * inCompiler
                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_lexiqueComponentGenerationList result ;
  const GALGAS_lexiqueComponentGenerationList * p = (const GALGAS_lexiqueComponentGenerationList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_lexiqueComponentGenerationList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("lexiqueComponentGenerationList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                  Routine 'compileLexiqueComponentGalgas3'                   *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_compileLexiqueComponentGalgas_33_ (const GALGAS_galgas_33_LexiqueComponentListAST_2D_element constinArgument_inLexiqueComponentAST,
                                                GALGAS_lexiqueComponentGenerationList & ioArgument_ioLexiqueComponentGenerationList,
                                                C_Compiler * inCompiler
                                                COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_lexicalTypeMap var_lexicalTypeMap = function_buildLexicalTypeMap (inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1165)) ;
  GALGAS_lexicalRoutineMap var_lexicalRoutineMap ;
  {
  routine_buildLexicalRoutineMap (var_lexicalRoutineMap, inCompiler  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1168)) ;
  }
  cEnumerator_externRoutineListAST enumerator_49409 (constinArgument_inLexiqueComponentAST.mAttribute_mExternRoutineList, kEnumeration_up) ;
  while (enumerator_49409.hasCurrentObject ()) {
    GALGAS_lexicalRoutineFormalArgumentList var_lexicalRoutineFormalArgumentList = GALGAS_lexicalRoutineFormalArgumentList::constructor_emptyList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1171)) ;
    cEnumerator_lexicalExternRoutineFormalArgumentListAST enumerator_49543 (enumerator_49409.current_mLexicalRoutineFormalArgumentList (HERE), kEnumeration_up) ;
    while (enumerator_49543.hasCurrentObject ()) {
      GALGAS_lexicalTypeEnum var_lexicalFormalArgumentType ;
      var_lexicalTypeMap.method_searchKey (enumerator_49543.current_mLexicalTypeName (HERE), var_lexicalFormalArgumentType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1174)) ;
      var_lexicalRoutineFormalArgumentList.addAssign_operation (enumerator_49543.current_mPassingMode (HERE), var_lexicalFormalArgumentType, enumerator_49543.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1175))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1175)) ;
      enumerator_49543.gotoNextObject () ;
    }
    {
    var_lexicalRoutineMap.modifier_insertKey (enumerator_49409.current_mRoutineName (HERE), var_lexicalRoutineFormalArgumentList, enumerator_49409.current_mErrorMessageList (HERE), GALGAS_bool (true), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1177)) ;
    }
    enumerator_49409.gotoNextObject () ;
  }
  GALGAS_lexicalFunctionMap var_lexicalFunctionMap ;
  {
  routine_buildLexicalFunctionMap (var_lexicalFunctionMap, inCompiler  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1181)) ;
  }
  cEnumerator_externFunctionListAST enumerator_50211 (constinArgument_inLexiqueComponentAST.mAttribute_mExternFunctionList, kEnumeration_up) ;
  while (enumerator_50211.hasCurrentObject ()) {
    GALGAS_lexicalFunctionFormalArgumentList var_lexicalFunctionFormalArgumentList = GALGAS_lexicalFunctionFormalArgumentList::constructor_emptyList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1184)) ;
    cEnumerator_lexicalExternFunctionFormalArgumentListAST enumerator_50348 (enumerator_50211.current_mLexicalFunctionFormalArgumentList (HERE), kEnumeration_up) ;
    while (enumerator_50348.hasCurrentObject ()) {
      GALGAS_lexicalTypeEnum var_lexicalFormalArgumentType ;
      var_lexicalTypeMap.method_searchKey (enumerator_50348.current_mLexicalTypeName (HERE), var_lexicalFormalArgumentType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1187)) ;
      var_lexicalFunctionFormalArgumentList.addAssign_operation (var_lexicalFormalArgumentType, enumerator_50348.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1188))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1188)) ;
      enumerator_50348.gotoNextObject () ;
    }
    GALGAS_lexicalTypeEnum var_returnedArgumentType ;
    var_lexicalTypeMap.method_searchKey (enumerator_50211.current_mReturnedTypeName (HERE), var_returnedArgumentType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1191)) ;
    {
    var_lexicalFunctionMap.modifier_insertKey (enumerator_50211.current_mFunctionName (HERE), var_lexicalFunctionFormalArgumentList, var_returnedArgumentType, GALGAS_string::makeEmptyString (), GALGAS_bool (true), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1192)) ;
    }
    enumerator_50211.gotoNextObject () ;
  }
  GALGAS_stringset var_externUnicodeTestFunctions = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1195)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("unicodeToLower")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1196)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("unicodeToUpper")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1197)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeLetter")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1198)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeMark")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1199)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeNumber")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1200)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeDecimalDigit")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1201)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeASCIIHexDigit")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1202)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeSeparator")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1203)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeCommand")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1204)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodePunctuation")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1205)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeSymbol")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1206)) ;
  GALGAS_lexiqueAnalysisContext var_lexiqueAnalysisContext = GALGAS_lexiqueAnalysisContext::constructor_new (var_lexicalRoutineMap, var_lexicalFunctionMap, GALGAS_lexicalMessageMap::constructor_emptyMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1211)), GALGAS_terminalMap::constructor_emptyMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1212)), GALGAS_terminalList::constructor_emptyList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1213)), GALGAS_lexicalAttributeMap::constructor_emptyMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1214)), GALGAS_lexicalExplicitTokenListMapMap::constructor_emptyMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1215)), GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1216)), GALGAS_templateDelimitorList::constructor_emptyList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1217)), GALGAS_styleMap::constructor_emptyMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1218)), var_externUnicodeTestFunctions COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1208)) ;
  GALGAS_uint var_styleIndex = GALGAS_uint ((uint32_t) 1U) ;
  cEnumerator_lexicalStyleListAST enumerator_52163 (constinArgument_inLexiqueComponentAST.mAttribute_mLexicalStyleList, kEnumeration_up) ;
  while (enumerator_52163.hasCurrentObject ()) {
    {
    var_lexiqueAnalysisContext.mAttribute_mStyleMap.modifier_insertKey (enumerator_52163.current_mName (HERE), enumerator_52163.current_mComment (HERE), var_styleIndex, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1224)) ;
    }
    var_styleIndex.increment_operation (inCompiler  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1225)) ;
    enumerator_52163.gotoNextObject () ;
  }
  {
  routine_buildLexicalAttributeMap (var_lexicalTypeMap, constinArgument_inLexiqueComponentAST.mAttribute_mLexicalAttributeList, var_lexiqueAnalysisContext.mAttribute_mLexicalAttributeMap, inCompiler  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1228)) ;
  }
  cEnumerator_terminalDeclarationListAST enumerator_52621 (constinArgument_inLexiqueComponentAST.mAttribute_mTerminalDeclarationList, kEnumeration_up) ;
  while (enumerator_52621.hasCurrentObject ()) {
    GALGAS_uint var_terminalStyleIndex = GALGAS_uint ((uint32_t) 0U) ;
    const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, enumerator_52621.current_mStyle (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1236)).reader_length (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1236)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_0) {
      GALGAS_lstring joker_52763_0 ; // Joker input parameter
      var_lexiqueAnalysisContext.reader_mStyleMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1237)).method_searchKey (enumerator_52621.current_mStyle (HERE), joker_52763_0, var_terminalStyleIndex, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1237)) ;
    }
    GALGAS_lexicalSentValueList var_argumentTypeList = GALGAS_lexicalSentValueList::constructor_emptyList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1239)) ;
    cEnumerator_lstringlist enumerator_52888 (enumerator_52621.current_mSentAttributeList (HERE), kEnumeration_up) ;
    while (enumerator_52888.hasCurrentObject ()) {
      GALGAS_lexicalTypeEnum var_attributeLexicalType ;
      var_lexiqueAnalysisContext.mAttribute_mLexicalAttributeMap.method_searchKey (enumerator_52888.current_mValue (HERE), var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1242)) ;
      var_argumentTypeList.addAssign_operation (enumerator_52888.current_mValue (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1243)), var_attributeLexicalType  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1243)) ;
      enumerator_52888.gotoNextObject () ;
    }
    {
    var_lexiqueAnalysisContext.mAttribute_mTerminalMap.modifier_insertKey (enumerator_52621.current_mName (HERE), var_argumentTypeList, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1245)) ;
    }
    GALGAS_bool var_isEndOfTemplateMark = GALGAS_bool (false) ;
    GALGAS_bool var_atomicSelection = GALGAS_bool (true) ;
    cEnumerator_lstringlist enumerator_53300 (enumerator_52621.current_mOptionList (HERE), kEnumeration_up) ;
    while (enumerator_53300.hasCurrentObject ()) {
      const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, enumerator_53300.current_mValue (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1249)).objectCompare (GALGAS_string ("nonAtomicSelection"))).boolEnum () ;
      if (kBoolTrue == test_1) {
        const enumGalgasBool test_2 = var_atomicSelection.boolEnum () ;
        if (kBoolTrue == test_2) {
          var_atomicSelection = GALGAS_bool (false) ;
        }else if (kBoolFalse == test_2) {
          GALGAS_location location_3 (enumerator_53300.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_3, GALGAS_string ("the 'nonAtomicSelection' feature is already set")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1253)) ;
        }
      }else if (kBoolFalse == test_1) {
        const enumGalgasBool test_4 = GALGAS_bool (kIsNotEqual, enumerator_53300.current_mValue (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1255)).objectCompare (GALGAS_string ("templateEndMark"))).boolEnum () ;
        if (kBoolTrue == test_4) {
          GALGAS_location location_5 (enumerator_53300.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_5, GALGAS_string ("only the 'templateEndMark' and 'nonAtomicSelection' features are allowed here")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1256)) ;
        }else if (kBoolFalse == test_4) {
          const enumGalgasBool test_6 = var_isEndOfTemplateMark.boolEnum () ;
          if (kBoolTrue == test_6) {
            GALGAS_location location_7 (enumerator_53300.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_7, GALGAS_string ("the 'templateEndMark' feature is already set")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1258)) ;
          }else if (kBoolFalse == test_6) {
            var_isEndOfTemplateMark = GALGAS_bool (true) ;
          }
        }
      }
      enumerator_53300.gotoNextObject () ;
    }
    var_lexiqueAnalysisContext.mAttribute_mTerminalList.addAssign_operation (enumerator_52621.current_mName (HERE), var_argumentTypeList, enumerator_52621.current_mSyntaxErrorMessage (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1266)), var_isEndOfTemplateMark, var_atomicSelection, var_terminalStyleIndex  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1263)) ;
    enumerator_52621.gotoNextObject () ;
  }
  cEnumerator_lexicalListDeclarationListAST enumerator_54155 (constinArgument_inLexiqueComponentAST.mAttribute_mLexicalListDeclarationList, kEnumeration_up) ;
  while (enumerator_54155.hasCurrentObject ()) {
    GALGAS_uint var_terminalStyleIndex = GALGAS_uint ((uint32_t) 0U) ;
    const enumGalgasBool test_8 = GALGAS_bool (kIsStrictSup, enumerator_54155.current_mStyle (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1274)).reader_length (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1274)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_8) {
      GALGAS_lstring joker_54297_0 ; // Joker input parameter
      var_lexiqueAnalysisContext.reader_mStyleMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1275)).method_searchKey (enumerator_54155.current_mStyle (HERE), joker_54297_0, var_terminalStyleIndex, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1275)) ;
    }
    GALGAS_lexicalSentValueList var_argumentTypeList = GALGAS_lexicalSentValueList::constructor_emptyList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1277)) ;
    cEnumerator_sentLexicalAttributeListAST enumerator_54422 (enumerator_54155.current_mSentAttributeList (HERE), kEnumeration_up) ;
    while (enumerator_54422.hasCurrentObject ()) {
      GALGAS_lexicalTypeEnum var_attributeLexicalType ;
      var_lexiqueAnalysisContext.mAttribute_mLexicalAttributeMap.method_searchKey (enumerator_54422.current_mAttributeName (HERE), var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1280)) ;
      var_argumentTypeList.addAssign_operation (enumerator_54422.current_mAttributeName (HERE).mAttribute_string, var_attributeLexicalType  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1281)) ;
      enumerator_54422.gotoNextObject () ;
    }
    GALGAS_lexicalExplicitTokenListMap var_lexicalTokenListMap = GALGAS_lexicalExplicitTokenListMap::constructor_emptyMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1283)) ;
    GALGAS_tokenSortedlist var_tokenSortedlist = GALGAS_tokenSortedlist::constructor_emptySortedList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1284)) ;
    cEnumerator_lexicalListEntryListAST enumerator_54812 (enumerator_54155.current_mEntryList (HERE), kEnumeration_up) ;
    while (enumerator_54812.hasCurrentObject ()) {
      GALGAS_string var_syntaxErrorMessage = enumerator_54155.current_mSyntaxErrorMessage (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1286)).reader_stringByReplacingStringByString (GALGAS_string ("%K"), enumerator_54812.current_mTerminalSpelling (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1286)), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1286)) ;
      GALGAS_bool var_isEndOfTemplateMark = GALGAS_bool (false) ;
      GALGAS_bool var_atomicSelection = GALGAS_bool (true) ;
      cEnumerator_lstringlist enumerator_55058 (enumerator_54812.current_mFeatureList (HERE), kEnumeration_up) ;
      while (enumerator_55058.hasCurrentObject ()) {
        const enumGalgasBool test_9 = GALGAS_bool (kIsEqual, enumerator_55058.current_mValue (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1290)).objectCompare (GALGAS_string ("nonAtomicSelection"))).boolEnum () ;
        if (kBoolTrue == test_9) {
          const enumGalgasBool test_10 = var_atomicSelection.boolEnum () ;
          if (kBoolTrue == test_10) {
            var_atomicSelection = GALGAS_bool (false) ;
          }else if (kBoolFalse == test_10) {
            GALGAS_location location_11 (enumerator_55058.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_11, GALGAS_string ("the 'nonAtomicSelection' feature is already set")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1294)) ;
          }
        }else if (kBoolFalse == test_9) {
          const enumGalgasBool test_12 = GALGAS_bool (kIsNotEqual, enumerator_55058.current_mValue (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1296)).objectCompare (GALGAS_string ("templateEndMark"))).boolEnum () ;
          if (kBoolTrue == test_12) {
            GALGAS_location location_13 (enumerator_55058.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_13, GALGAS_string ("only the 'templateEndMark' and 'nonAtomicSelection' features are allowed here")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1297)) ;
          }else if (kBoolFalse == test_12) {
            const enumGalgasBool test_14 = var_isEndOfTemplateMark.boolEnum () ;
            if (kBoolTrue == test_14) {
              GALGAS_location location_15 (enumerator_55058.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
              inCompiler->emitSemanticError (location_15, GALGAS_string ("the 'templateEndMark' feature is already set")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1299)) ;
            }else if (kBoolFalse == test_14) {
              var_isEndOfTemplateMark = GALGAS_bool (true) ;
            }
          }
        }
        enumerator_55058.gotoNextObject () ;
      }
      var_lexiqueAnalysisContext.mAttribute_mTerminalList.addAssign_operation (enumerator_54812.current_mTerminalSpelling (HERE), var_argumentTypeList, var_syntaxErrorMessage, var_isEndOfTemplateMark, var_atomicSelection, var_terminalStyleIndex  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1304)) ;
      {
      var_lexiqueAnalysisContext.mAttribute_mTerminalMap.modifier_insertKey (enumerator_54812.current_mTerminalSpelling (HERE), var_argumentTypeList, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1312)) ;
      }
      {
      var_lexicalTokenListMap.modifier_insertKey (enumerator_54812.current_mEntrySpelling (HERE), enumerator_54812.current_mTerminalSpelling (HERE), enumerator_54812.current_mFeatureList (HERE), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1313)) ;
      }
      var_tokenSortedlist.addAssign_operation (enumerator_54812.current_mEntrySpelling (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1314)).reader_length (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1314)), enumerator_54812.current_mEntrySpelling (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1314)), enumerator_54812.current_mTerminalSpelling (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1314))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1314)) ;
      var_lexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (enumerator_54812.current_mEntrySpelling (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1315))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1315)) ;
      enumerator_54812.gotoNextObject () ;
    }
    {
    var_lexiqueAnalysisContext.mAttribute_mLexicalTokenListMap.modifier_insertKey (enumerator_54155.current_mName (HERE), var_lexicalTokenListMap, var_tokenSortedlist, GALGAS_bool (false), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1317)) ;
    }
    enumerator_54155.gotoNextObject () ;
  }
  cEnumerator_lexicalMessageDeclarationListAST enumerator_56542 (constinArgument_inLexiqueComponentAST.mAttribute_mLexicalMessageDeclarationList, kEnumeration_up) ;
  while (enumerator_56542.hasCurrentObject ()) {
    {
    var_lexiqueAnalysisContext.mAttribute_mLexicalMessageMap.modifier_insertKey (enumerator_56542.current_mMessageName (HERE), enumerator_56542.current_mMessageValue (HERE), GALGAS_bool (false), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1321)) ;
    }
    enumerator_56542.gotoNextObject () ;
  }
  cEnumerator_lexicalRuleListAST enumerator_56763 (constinArgument_inLexiqueComponentAST.mAttribute_mLexicalRuleList, kEnumeration_up) ;
  while (enumerator_56763.hasCurrentObject ()) {
    callCategoryMethod_checkLexicalRule ((const cPtr_abstractLexicalRuleAST *) enumerator_56763.current_mLexicalRule (HERE).ptr (), var_lexiqueAnalysisContext, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1325)) ;
    enumerator_56763.gotoNextObject () ;
  }
  cEnumerator_lexicalMessageMap enumerator_56965 (var_lexiqueAnalysisContext.reader_mLexicalMessageMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1328)), kEnumeration_up) ;
  while (enumerator_56965.hasCurrentObject ()) {
    const enumGalgasBool test_16 = enumerator_56965.current_mMessageIsUsed (HERE).operator_not (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1329)).boolEnum () ;
    if (kBoolTrue == test_16) {
      GALGAS_location location_17 (enumerator_56965.current_lkey (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticWarning (location_17, GALGAS_string ("unused message")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1330)) ;
    }
    enumerator_56965.gotoNextObject () ;
  }
  cEnumerator_metamodelTemplateDelimitorListAST enumerator_57183 (constinArgument_inLexiqueComponentAST.mAttribute_mTemplateDelimitorList, kEnumeration_up) ;
  while (enumerator_57183.hasCurrentObject ()) {
    var_lexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (enumerator_57183.current_mStartString (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1335))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1335)) ;
    var_lexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (enumerator_57183.current_mEndString (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1336))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1336)) ;
    GALGAS_bool var_preservesStartDelimiter = GALGAS_bool (false) ;
    cEnumerator_lstringlist enumerator_57411 (enumerator_57183.current_mOptionList (HERE), kEnumeration_up) ;
    while (enumerator_57411.hasCurrentObject ()) {
      const enumGalgasBool test_18 = GALGAS_bool (kIsNotEqual, enumerator_57411.current_mValue (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1339)).objectCompare (GALGAS_string ("preserved"))).boolEnum () ;
      if (kBoolTrue == test_18) {
        GALGAS_location location_19 (enumerator_57411.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_19, GALGAS_string ("only the 'preserved' feature is allowed here")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1340)) ;
      }else if (kBoolFalse == test_18) {
        const enumGalgasBool test_20 = var_preservesStartDelimiter.boolEnum () ;
        if (kBoolTrue == test_20) {
          GALGAS_location location_21 (enumerator_57411.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_21, GALGAS_string ("the 'preserved' feature is already set")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1342)) ;
        }else if (kBoolFalse == test_20) {
          var_preservesStartDelimiter = GALGAS_bool (true) ;
        }
      }
      enumerator_57411.gotoNextObject () ;
    }
    var_lexiqueAnalysisContext.mAttribute_mTemplateDelimitorList.addAssign_operation (enumerator_57183.current_mStartString (HERE), enumerator_57183.current_mEndString (HERE), var_preservesStartDelimiter  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1347)) ;
    enumerator_57183.gotoNextObject () ;
  }
  const enumGalgasBool test_22 = constinArgument_inLexiqueComponentAST.mAttribute_mIndexingDirectory.mAttribute_location.reader_isNowhere (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1350)).boolEnum () ;
  if (kBoolTrue == test_22) {
    cEnumerator_indexingListAST enumerator_58021 (constinArgument_inLexiqueComponentAST.mAttribute_mIndexingListAST, kEnumeration_up) ;
    while (enumerator_58021.hasCurrentObject ()) {
      GALGAS_location location_23 (enumerator_58021.current_mIndexName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_23, GALGAS_string ("indexing declaration requires one 'indexing in \"path\";' declaration")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1352)) ;
      enumerator_58021.gotoNextObject () ;
    }
  }
  GALGAS_stringset var_indexNameSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1355)) ;
  cEnumerator_indexingListAST enumerator_58241 (constinArgument_inLexiqueComponentAST.mAttribute_mIndexingListAST, kEnumeration_up) ;
  while (enumerator_58241.hasCurrentObject ()) {
    const enumGalgasBool test_24 = var_indexNameSet.reader_hasKey (enumerator_58241.current_mIndexName (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1357)) COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1357)).boolEnum () ;
    if (kBoolTrue == test_24) {
      GALGAS_location location_25 (enumerator_58241.current_mIndexName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_25, GALGAS_string ("the '").operator_concat (enumerator_58241.current_mIndexName (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1358))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1358)).operator_concat (GALGAS_string ("' index is already declared")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1358))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1358)) ;
    }
    var_indexNameSet.addAssign_operation (enumerator_58241.current_mIndexName (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1360))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1360)) ;
    enumerator_58241.gotoNextObject () ;
  }
  cEnumerator_templateReplacementListAST enumerator_58572 (constinArgument_inLexiqueComponentAST.mAttribute_mTemplateReplacementList, kEnumeration_up) ;
  while (enumerator_58572.hasCurrentObject ()) {
    var_lexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (enumerator_58572.current_mMatchString (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1364))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1364)) ;
    var_lexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (enumerator_58572.current_mReplacementString (HERE).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1365))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1365)) ;
    enumerator_58572.gotoNextObject () ;
  }
  const enumGalgasBool test_26 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1369)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_26) {
    GALGAS_string var_lexiqueClassName = constinArgument_inLexiqueComponentAST.mAttribute_mLexiqueComponentName.mAttribute_string ;
    GALGAS_string var_headerContents = GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_newHeaderZone_32_ (inCompiler, var_lexiqueClassName.reader_identifierRepresentation (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1373)), var_lexiqueAnalysisContext, constinArgument_inLexiqueComponentAST COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1372))) ;
    var_headerContents.dotAssign_operation (GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_newHeaderZone_33_ (inCompiler, var_lexiqueClassName.reader_identifierRepresentation (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1378)), constinArgument_inLexiqueComponentAST.mAttribute_mLexicalListDeclarationList, var_lexiqueAnalysisContext, constinArgument_inLexiqueComponentAST.mAttribute_mIndexingListAST COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1377)))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1377)) ;
    GALGAS_string var_cppContents = GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_newImplementationZone_32_Galgas_33_ (inCompiler, var_lexiqueClassName.reader_identifierRepresentation (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1385)), var_lexiqueAnalysisContext.reader_mLexicalAttributeMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1386)), var_lexiqueAnalysisContext.reader_mLexicalMessageMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1387)), var_lexiqueAnalysisContext.reader_mTerminalList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1388)), var_lexiqueAnalysisContext.reader_mLexicalTokenListMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1389)), var_lexiqueAnalysisContext.reader_mUnicodeStringToGenerate (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1390)), constinArgument_inLexiqueComponentAST.mAttribute_mLexicalRuleList, var_lexiqueAnalysisContext, constinArgument_inLexiqueComponentAST COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1384))) ;
    GALGAS_string var_cocoaHeader = GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_cocoaHeaderZone_32_ (inCompiler, var_lexiqueClassName, var_lexiqueAnalysisContext COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1396))) ;
    var_cocoaHeader.dotAssign_operation (GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_cocoaHeaderZone_33_ (inCompiler, var_lexiqueClassName, var_lexiqueAnalysisContext COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1400)))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1400)) ;
    GALGAS_string var_cocoaImplementation = GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_cocoaImplementationZone_32_ (inCompiler, var_lexiqueClassName, var_lexiqueAnalysisContext.reader_mLexicalAttributeMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1407)), var_lexiqueAnalysisContext.reader_mLexicalMessageMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1408)), var_lexiqueAnalysisContext.reader_mTerminalList (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1409)), var_lexiqueAnalysisContext.reader_mUnicodeStringToGenerate (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1410)), constinArgument_inLexiqueComponentAST.mAttribute_mLexicalRuleList, var_lexiqueAnalysisContext, constinArgument_inLexiqueComponentAST COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1405))) ;
    ioArgument_ioLexiqueComponentGenerationList.addAssign_operation (var_lexiqueClassName, var_headerContents, var_cppContents, var_cocoaHeader, var_cocoaImplementation  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1416)) ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                 Routine 'generateLexiqueComponentsGalgas3'                  *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_generateLexiqueComponentsGalgas_33_ (const GALGAS_string constinArgument_inOutputDirectory,
                                                  const GALGAS_lexiqueComponentGenerationList constinArgument_inLexiqueComponentGenerationList,
                                                  GALGAS_stringlist & ioArgument_ioToolProductFileList,
                                                  GALGAS_stringlist & ioArgument_ioAppProductFileList,
                                                  GALGAS_stringset & ioArgument_ioAllProductFileSet,
                                                  C_Compiler * inCompiler
                                                  COMMA_UNUSED_LOCATION_ARGS) {
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("lexiqueCompilation.gSemantics", 1437)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    cEnumerator_lexiqueComponentGenerationList enumerator_61542 (constinArgument_inLexiqueComponentGenerationList, kEnumeration_up) ;
    while (enumerator_61542.hasCurrentObject ()) {
      ioArgument_ioAllProductFileSet.addAssign_operation (GALGAS_string ("lexique-").add_operation (enumerator_61542.current_mLexiqueComponentName (HERE), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1440)).operator_concat (GALGAS_string (".h")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1440))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1440)) ;
      {
      GALGAS_string::class_method_generateFileWithPattern (constinArgument_inOutputDirectory, GALGAS_string ("lexique-").add_operation (enumerator_61542.current_mLexiqueComponentName (HERE), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1443)).operator_concat (GALGAS_string (".h")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1443)), GALGAS_string ("//"), GALGAS_string ("\n"
        "\n"), enumerator_61542.current_mCppHeaderContents (HERE), GALGAS_string ("\n"
        "\n"), GALGAS_string ("\n"), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1441)) ;
      }
      ioArgument_ioAllProductFileSet.addAssign_operation (GALGAS_string ("lexique-").add_operation (enumerator_61542.current_mLexiqueComponentName (HERE), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1451)).operator_concat (GALGAS_string (".cpp")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1451))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1451)) ;
      ioArgument_ioToolProductFileList.addAssign_operation (GALGAS_string ("lexique-").add_operation (enumerator_61542.current_mLexiqueComponentName (HERE), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1452)).add_operation (GALGAS_string (".cpp"), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1452))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1452)) ;
      {
      GALGAS_string::class_method_generateFileWithPattern (constinArgument_inOutputDirectory, GALGAS_string ("lexique-").add_operation (enumerator_61542.current_mLexiqueComponentName (HERE), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1455)).operator_concat (GALGAS_string (".cpp")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1455)), GALGAS_string ("//"), GALGAS_string ("\n"
        "\n"), enumerator_61542.current_mCppContents (HERE), GALGAS_string ("\n"
        "\n"), GALGAS_string ("\n"
        "\n"), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1453)) ;
      }
      ioArgument_ioAllProductFileSet.addAssign_operation (GALGAS_string ("lexique-").add_operation (enumerator_61542.current_mLexiqueComponentName (HERE), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1463)).operator_concat (GALGAS_string ("-cocoa.h")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1463))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1463)) ;
      {
      GALGAS_string::class_method_generateFileWithPattern (constinArgument_inOutputDirectory, GALGAS_string ("lexique-").add_operation (enumerator_61542.current_mLexiqueComponentName (HERE), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1466)).operator_concat (GALGAS_string ("-cocoa.h")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1466)), GALGAS_string ("//"), GALGAS_string ("\n"
        "\n"), enumerator_61542.current_mCocoaHeaderContents (HERE), GALGAS_string ("\n"
        "\n"), GALGAS_string ("\n"), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1464)) ;
      }
      ioArgument_ioAppProductFileList.addAssign_operation (GALGAS_string ("lexique-").add_operation (enumerator_61542.current_mLexiqueComponentName (HERE), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1474)).add_operation (GALGAS_string ("-cocoa.m"), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1474))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1474)) ;
      ioArgument_ioAllProductFileSet.addAssign_operation (GALGAS_string ("lexique-").add_operation (enumerator_61542.current_mLexiqueComponentName (HERE), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1475)).operator_concat (GALGAS_string ("-cocoa.m")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1475))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1475)) ;
      {
      GALGAS_string::class_method_generateFileWithPattern (constinArgument_inOutputDirectory, GALGAS_string ("lexique-").add_operation (enumerator_61542.current_mLexiqueComponentName (HERE), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1478)).operator_concat (GALGAS_string ("-cocoa.m")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1478)), GALGAS_string ("//"), GALGAS_string ("\n"
        "\n"), enumerator_61542.current_mCocoaContents (HERE), GALGAS_string ("\n"
        "\n"), GALGAS_string ("\n"
        "\n"), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 1476)) ;
      }
      enumerator_61542.gotoNextObject () ;
    }
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//               Category Reader '@lexicalTypeEnum cppTypeName'                *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string categoryReader_cppTypeName (const GALGAS_lexicalTypeEnum & inObject,
                                          C_Compiler * /* inCompiler */
                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      result_outResult = GALGAS_string ("C_String") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      result_outResult = GALGAS_string ("utf32") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      result_outResult = GALGAS_string ("uint32_t") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      result_outResult = GALGAS_string ("uint64_t") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      result_outResult = GALGAS_string ("int32_t") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      result_outResult = GALGAS_string ("int64_t") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      result_outResult = GALGAS_string ("double") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//             Category Reader '@lexicalTypeEnum appendMethodName'             *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string categoryReader_appendMethodName (const GALGAS_lexicalTypeEnum & inObject,
                                               C_Compiler * /* inCompiler */
                                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      result_outResult = GALGAS_string ("appendCLiteralStringConstant") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      result_outResult = GALGAS_string ("appendUnicodeCharacter") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      result_outResult = GALGAS_string ("appendUnsigned") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      result_outResult = GALGAS_string ("appendUnsigned") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      result_outResult = GALGAS_string ("appendSigned") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      result_outResult = GALGAS_string ("appendSigned") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      result_outResult = GALGAS_string ("appendDouble") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//          Category Reader '@lexicalTypeEnum appendArgumentOfMethod'          *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string categoryReader_appendArgumentOfMethod (const GALGAS_lexicalTypeEnum & inObject,
                                                     C_Compiler * /* inCompiler */
                                                     COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      result_outResult = GALGAS_string (" COMMA_HERE") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//              Category Reader '@lexicalTypeEnum initialization'              *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string categoryReader_initialization (const GALGAS_lexicalTypeEnum & inObject,
                                             C_Compiler * /* inCompiler */
                                             COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      result_outResult = GALGAS_string (".setLengthToZero ()") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      result_outResult = GALGAS_string (" = TO_UNICODE (0)") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      result_outResult = GALGAS_string (" = 0.0") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//              Category Reader '@lexicalTypeEnum cocoaTypeName'               *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string categoryReader_cocoaTypeName (const GALGAS_lexicalTypeEnum & inObject,
                                            C_Compiler * /* inCompiler */
                                            COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      result_outResult = GALGAS_string ("NSMutableString *") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      result_outResult = GALGAS_string ("UInt32") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      result_outResult = GALGAS_string ("UInt32") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      result_outResult = GALGAS_string ("UInt64") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      result_outResult = GALGAS_string ("SInt32") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      result_outResult = GALGAS_string ("SInt64") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      result_outResult = GALGAS_string ("double") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//         Category Reader '@lexicalTypeEnum cocoaInitializationCode'          *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string categoryReader_cocoaInitializationCode (const GALGAS_lexicalTypeEnum & inObject,
                                                      C_Compiler * /* inCompiler */
                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      result_outResult = GALGAS_string ("[[NSMutableString alloc] init]") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      result_outResult = GALGAS_string ("0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      result_outResult = GALGAS_string ("0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      result_outResult = GALGAS_string ("0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      result_outResult = GALGAS_string ("0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      result_outResult = GALGAS_string ("0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      result_outResult = GALGAS_string ("0.0") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//             Category Reader '@lexicalTypeEnum cocoaResetPrefix'             *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string categoryReader_cocoaResetPrefix (const GALGAS_lexicalTypeEnum & inObject,
                                               C_Compiler * /* inCompiler */
                                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      result_outResult = GALGAS_string ("[") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                Category Reader '@lexicalTypeEnum cocoaReset'                *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string categoryReader_cocoaReset (const GALGAS_lexicalTypeEnum & inObject,
                                         C_Compiler * /* inCompiler */
                                         COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      result_outResult = GALGAS_string (" setString:@\"\"]") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      result_outResult = GALGAS_string (" = 0.0") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//Abstract category method '@lexicalSendDefaultActionAST checkLexicalDefaultAction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_lexicalSendDefaultActionAST_checkLexicalDefaultAction> gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalDefaultAction (const int32_t inClassIndex,
                                                    categoryMethodSignature_lexicalSendDefaultActionAST_checkLexicalDefaultAction inMethod) {
  gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_lexicalSendDefaultActionAST_checkLexicalDefaultAction (void) {
  gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalSendDefaultActionAST_checkLexicalDefaultAction (NULL,
                                                                                  freeCategoryMethod_lexicalSendDefaultActionAST_checkLexicalDefaultAction) ;

//-----------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalDefaultAction (const cPtr_lexicalSendDefaultActionAST * inObject,
                                                   GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, cPtr_lexicalSendDefaultActionAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const int32_t classIndex = info->mSlotID ;
    categoryMethodSignature_lexicalSendDefaultActionAST_checkLexicalDefaultAction f = NULL ;
    if (classIndex < gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction.count ()) {
      f = gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction.count ()) {
           f = gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioLexiqueAnalysisContext, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalSendTerminalByDefaultAST checkLexicalDefaultAction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalSendTerminalByDefaultAST_checkLexicalDefaultAction (const cPtr_lexicalSendDefaultActionAST * inObject,
                                                                                      GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalSendTerminalByDefaultAST * object = (const cPtr_lexicalSendTerminalByDefaultAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalSendTerminalByDefaultAST) ;
  GALGAS_lexicalSentValueList joker_6897_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mTerminalMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 154)).method_searchKey (object->mAttribute_mDefaultSentTerminal, joker_6897_0, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 154)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalSendTerminalByDefaultAST_checkLexicalDefaultAction (void) {
  enterCategoryMethod_checkLexicalDefaultAction (kTypeDescriptor_GALGAS_lexicalSendTerminalByDefaultAST.mSlotID,
                                                 categoryMethod_lexicalSendTerminalByDefaultAST_checkLexicalDefaultAction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalSendTerminalByDefaultAST_checkLexicalDefaultAction (defineCategoryMethod_lexicalSendTerminalByDefaultAST_checkLexicalDefaultAction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalErrorByDefaultAST checkLexicalDefaultAction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalErrorByDefaultAST_checkLexicalDefaultAction (const cPtr_lexicalSendDefaultActionAST * inObject,
                                                                               GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalErrorByDefaultAST * object = (const cPtr_lexicalErrorByDefaultAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalErrorByDefaultAST) ;
  {
  ioArgument_ioLexiqueAnalysisContext.mAttribute_mLexicalMessageMap.modifier_setMMessageIsUsedForKey (GALGAS_bool (true), object->mAttribute_mDefaultErrorMessageName.mAttribute_string, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 165)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalErrorByDefaultAST_checkLexicalDefaultAction (void) {
  enterCategoryMethod_checkLexicalDefaultAction (kTypeDescriptor_GALGAS_lexicalErrorByDefaultAST.mSlotID,
                                                 categoryMethod_lexicalErrorByDefaultAST_checkLexicalDefaultAction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalErrorByDefaultAST_checkLexicalDefaultAction (defineCategoryMethod_lexicalErrorByDefaultAST_checkLexicalDefaultAction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//   Abstract category method '@lexicalExpressionAST checkLexicalExpression'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_lexicalExpressionAST_checkLexicalExpression> gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalExpression (const int32_t inClassIndex,
                                                 categoryMethodSignature_lexicalExpressionAST_checkLexicalExpression inMethod) {
  gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_lexicalExpressionAST_checkLexicalExpression (void) {
  gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalExpressionAST_checkLexicalExpression (NULL,
                                                                        freeCategoryMethod_lexicalExpressionAST_checkLexicalExpression) ;

//-----------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalExpression (const cPtr_lexicalExpressionAST * inObject,
                                                GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, cPtr_lexicalExpressionAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const int32_t classIndex = info->mSlotID ;
    categoryMethodSignature_lexicalExpressionAST_checkLexicalExpression f = NULL ;
    if (classIndex < gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression.count ()) {
      f = gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression.count ()) {
           f = gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioLexiqueAnalysisContext, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
// Overriding category method '@lexicalOrExpressionAST checkLexicalExpression' *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalOrExpressionAST_checkLexicalExpression (const cPtr_lexicalExpressionAST * inObject,
                                                                          GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalOrExpressionAST * object = (const cPtr_lexicalOrExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalOrExpressionAST) ;
  callCategoryMethod_checkLexicalExpression ((const cPtr_lexicalExpressionAST *) object->mAttribute_mLeftOperand.ptr (), ioArgument_ioLexiqueAnalysisContext, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 181)) ;
  callCategoryMethod_checkLexicalExpression ((const cPtr_lexicalExpressionAST *) object->mAttribute_mRightOperand.ptr (), ioArgument_ioLexiqueAnalysisContext, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 182)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalOrExpressionAST_checkLexicalExpression (void) {
  enterCategoryMethod_checkLexicalExpression (kTypeDescriptor_GALGAS_lexicalOrExpressionAST.mSlotID,
                                              categoryMethod_lexicalOrExpressionAST_checkLexicalExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalOrExpressionAST_checkLexicalExpression (defineCategoryMethod_lexicalOrExpressionAST_checkLexicalExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalCharacterMatchAST checkLexicalExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalCharacterMatchAST_checkLexicalExpression (const cPtr_lexicalExpressionAST * /* inObject */,
                                                                            GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                            C_Compiler * /* inCompiler */
                                                                            COMMA_UNUSED_LOCATION_ARGS) {
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalCharacterMatchAST_checkLexicalExpression (void) {
  enterCategoryMethod_checkLexicalExpression (kTypeDescriptor_GALGAS_lexicalCharacterMatchAST.mSlotID,
                                              categoryMethod_lexicalCharacterMatchAST_checkLexicalExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalCharacterMatchAST_checkLexicalExpression (defineCategoryMethod_lexicalCharacterMatchAST_checkLexicalExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalCharacterSetMatchAST checkLexicalExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalCharacterSetMatchAST_checkLexicalExpression (const cPtr_lexicalExpressionAST * inObject,
                                                                               GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalCharacterSetMatchAST * object = (const cPtr_lexicalCharacterSetMatchAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalCharacterSetMatchAST) ;
  const enumGalgasBool test_0 = ioArgument_ioLexiqueAnalysisContext.mAttribute_mExternUnicodeTestFunctions.reader_hasKey (object->mAttribute_mCharacterSetName.reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 197)) COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 197)).operator_not (SOURCE_FILE ("lexiqueCompilation.gSemantics", 197)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_string var_s = GALGAS_string ("undefined test function; available functions are:") ;
    cEnumerator_stringset enumerator_8772 (ioArgument_ioLexiqueAnalysisContext.mAttribute_mExternUnicodeTestFunctions, kEnumeration_up) ;
    while (enumerator_8772.hasCurrentObject ()) {
      var_s.dotAssign_operation (GALGAS_string ("\n"
        "-  ").operator_concat (enumerator_8772.current_key (HERE)  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 200))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 200)) ;
      enumerator_8772.gotoNextObject () ;
    }
    GALGAS_location location_1 (object->mAttribute_mCharacterSetName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, var_s  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 202)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalCharacterSetMatchAST_checkLexicalExpression (void) {
  enterCategoryMethod_checkLexicalExpression (kTypeDescriptor_GALGAS_lexicalCharacterSetMatchAST.mSlotID,
                                              categoryMethod_lexicalCharacterSetMatchAST_checkLexicalExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalCharacterSetMatchAST_checkLexicalExpression (defineCategoryMethod_lexicalCharacterSetMatchAST_checkLexicalExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalCharacterIntervalMatchAST checkLexicalExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalCharacterIntervalMatchAST_checkLexicalExpression (const cPtr_lexicalExpressionAST * /* inObject */,
                                                                                    GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                                    C_Compiler * /* inCompiler */
                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalCharacterIntervalMatchAST_checkLexicalExpression (void) {
  enterCategoryMethod_checkLexicalExpression (kTypeDescriptor_GALGAS_lexicalCharacterIntervalMatchAST.mSlotID,
                                              categoryMethod_lexicalCharacterIntervalMatchAST_checkLexicalExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalCharacterIntervalMatchAST_checkLexicalExpression (defineCategoryMethod_lexicalCharacterIntervalMatchAST_checkLexicalExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
// Overriding category method '@lexicalStringMatchAST checkLexicalExpression'  *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalStringMatchAST_checkLexicalExpression (const cPtr_lexicalExpressionAST * inObject,
                                                                         GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                         C_Compiler * /* inCompiler */
                                                                         COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalStringMatchAST * object = (const cPtr_lexicalStringMatchAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalStringMatchAST) ;
  ioArgument_ioLexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (object->mAttribute_mString.reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 218))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 218)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalStringMatchAST_checkLexicalExpression (void) {
  enterCategoryMethod_checkLexicalExpression (kTypeDescriptor_GALGAS_lexicalStringMatchAST.mSlotID,
                                              categoryMethod_lexicalStringMatchAST_checkLexicalExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalStringMatchAST_checkLexicalExpression (defineCategoryMethod_lexicalStringMatchAST_checkLexicalExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalStringNotMatchAST checkLexicalExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalStringNotMatchAST_checkLexicalExpression (const cPtr_lexicalExpressionAST * inObject,
                                                                            GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalStringNotMatchAST * object = (const cPtr_lexicalStringNotMatchAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalStringNotMatchAST) ;
  ioArgument_ioLexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (object->mAttribute_mString.reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 226))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 226)) ;
  {
  ioArgument_ioLexiqueAnalysisContext.mAttribute_mLexicalMessageMap.modifier_setMMessageIsUsedForKey (GALGAS_bool (true), object->mAttribute_mErrorMessage.mAttribute_string, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 230)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalStringNotMatchAST_checkLexicalExpression (void) {
  enterCategoryMethod_checkLexicalExpression (kTypeDescriptor_GALGAS_lexicalStringNotMatchAST.mSlotID,
                                              categoryMethod_lexicalStringNotMatchAST_checkLexicalExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalStringNotMatchAST_checkLexicalExpression (defineCategoryMethod_lexicalStringNotMatchAST_checkLexicalExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Abstract category method '@lexicalRoutineOrFunctionFormalInputArgumentAST checkLexicalFunctionCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument> gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalFunctionCallArgument (const int32_t inClassIndex,
                                                           categoryMethodSignature_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument inMethod) {
  gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument (void) {
  gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument (NULL,
                                                                                                            freeCategoryMethod_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument) ;

//-----------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalFunctionCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                          GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                          GALGAS_lexicalTypeEnum in_inLexicalRoutineFormalArgumentType,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const int32_t classIndex = info->mSlotID ;
    categoryMethodSignature_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument f = NULL ;
    if (classIndex < gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument.count ()) {
      f = gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument.count ()) {
           f = gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioLexiqueAnalysisContext, in_inLexicalRoutineFormalArgumentType, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalAttributeInputArgumentAST checkLexicalFunctionCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalAttributeInputArgumentAST_checkLexicalFunctionCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                              GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                              GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                              C_Compiler * inCompiler
                                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalAttributeInputArgumentAST * object = (const cPtr_lexicalAttributeInputArgumentAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalAttributeInputArgumentAST) ;
  GALGAS_lexicalTypeEnum var_attributeLexicalType ;
  ioArgument_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 250)).method_searchKey (object->mAttribute_mAttributeName, var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 250)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_attributeLexicalType.objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mAttributeName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("type error, attribute type is @").operator_concat (categoryReader_lexicalTypeBaseName (var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 257))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 256)).operator_concat (GALGAS_string (" type, but lexical routine prototype requires @")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 257)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 259))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 258)).operator_concat (GALGAS_string (" type")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 259))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 256)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalAttributeInputArgumentAST_checkLexicalFunctionCallArgument (void) {
  enterCategoryMethod_checkLexicalFunctionCallArgument (kTypeDescriptor_GALGAS_lexicalAttributeInputArgumentAST.mSlotID,
                                                        categoryMethod_lexicalAttributeInputArgumentAST_checkLexicalFunctionCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalAttributeInputArgumentAST_checkLexicalFunctionCallArgument (defineCategoryMethod_lexicalAttributeInputArgumentAST_checkLexicalFunctionCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalCharacterInputArgumentAST checkLexicalFunctionCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalCharacterInputArgumentAST_checkLexicalFunctionCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                              GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                                              GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                              C_Compiler * inCompiler
                                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalCharacterInputArgumentAST * object = (const cPtr_lexicalCharacterInputArgumentAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalCharacterInputArgumentAST) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_char (SOURCE_FILE ("lexiqueCompilation.gSemantics", 271)).objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mCharacter.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("type error, a literal character has @char").operator_concat (GALGAS_string (" type, but lexical routine prototype requires an @")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 272)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 274))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 273)).operator_concat (GALGAS_string (" type value")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 274))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 272)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalCharacterInputArgumentAST_checkLexicalFunctionCallArgument (void) {
  enterCategoryMethod_checkLexicalFunctionCallArgument (kTypeDescriptor_GALGAS_lexicalCharacterInputArgumentAST.mSlotID,
                                                        categoryMethod_lexicalCharacterInputArgumentAST_checkLexicalFunctionCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalCharacterInputArgumentAST_checkLexicalFunctionCallArgument (defineCategoryMethod_lexicalCharacterInputArgumentAST_checkLexicalFunctionCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalUnsignedInputArgumentAST checkLexicalFunctionCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalFunctionCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                             GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                                             GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                             C_Compiler * inCompiler
                                                                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalUnsignedInputArgumentAST * object = (const cPtr_lexicalUnsignedInputArgumentAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalUnsignedInputArgumentAST) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_uint (SOURCE_FILE ("lexiqueCompilation.gSemantics", 286)).objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mUnsigned.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("type error, a literal character has @uint").operator_concat (GALGAS_string (" type, but lexical routine prototype requires an @")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 287)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 289))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 288)).operator_concat (GALGAS_string (" type value")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 289))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 287)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalFunctionCallArgument (void) {
  enterCategoryMethod_checkLexicalFunctionCallArgument (kTypeDescriptor_GALGAS_lexicalUnsignedInputArgumentAST.mSlotID,
                                                        categoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalFunctionCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalUnsignedInputArgumentAST_checkLexicalFunctionCallArgument (defineCategoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalFunctionCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalCurrentCharacterInputArgumentAST checkLexicalFunctionCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalFunctionCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                                     GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                                                     GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                                     C_Compiler * inCompiler
                                                                                                     COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalCurrentCharacterInputArgumentAST * object = (const cPtr_lexicalCurrentCharacterInputArgumentAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalCurrentCharacterInputArgumentAST) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_char (SOURCE_FILE ("lexiqueCompilation.gSemantics", 301)).objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (object->mAttribute_mLocation, GALGAS_string ("type error, current character value has @char").operator_concat (GALGAS_string (" type, but lexical routine prototype requires an @")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 302)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 304))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 303)).operator_concat (GALGAS_string (" type value")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 304))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 302)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalFunctionCallArgument (void) {
  enterCategoryMethod_checkLexicalFunctionCallArgument (kTypeDescriptor_GALGAS_lexicalCurrentCharacterInputArgumentAST.mSlotID,
                                                        categoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalFunctionCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalFunctionCallArgument (defineCategoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalFunctionCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalFunctionInputArgumentAST checkLexicalFunctionCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalFunctionInputArgumentAST_checkLexicalFunctionCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                             GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                             GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                             C_Compiler * inCompiler
                                                                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalFunctionInputArgumentAST * object = (const cPtr_lexicalFunctionInputArgumentAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalFunctionInputArgumentAST) ;
  GALGAS_lexicalFunctionFormalArgumentList var_lexicalFormalTypeList ;
  GALGAS_lexicalTypeEnum var_returnedLexicalFormalType ;
  GALGAS_string var_replacementFunctionName ;
  GALGAS_bool joker_13650_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mLexicalFunctionMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 319)).method_searchKey (object->mAttribute_mFunctionName, var_lexicalFormalTypeList, var_returnedLexicalFormalType, var_replacementFunctionName, joker_13650_0, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 319)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_replacementFunctionName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mFunctionName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticWarning (location_1, GALGAS_string ("obsolete lexical function, replaced by '").operator_concat (var_replacementFunctionName  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 328)).operator_concat (GALGAS_string ("'")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 328))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 328)) ;
  }
  const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, var_returnedLexicalFormalType.objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_2) {
    GALGAS_location location_3 (object->mAttribute_mFunctionName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_3, GALGAS_string ("type error, the function returns an @").operator_concat (categoryReader_lexicalTypeBaseName (var_returnedLexicalFormalType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 333))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 332)).operator_concat (GALGAS_string (" value, but lexical routine prototype requires an @")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 333)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 335))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 334)).operator_concat (GALGAS_string (" value")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 335))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 332)) ;
  }
  const enumGalgasBool test_4 = GALGAS_bool (kIsNotEqual, var_lexicalFormalTypeList.reader_length (SOURCE_FILE ("lexiqueCompilation.gSemantics", 339)).objectCompare (object->mAttribute_mFunctionActualArgumentList.reader_length (SOURCE_FILE ("lexiqueCompilation.gSemantics", 339)))).boolEnum () ;
  if (kBoolTrue == test_4) {
    GALGAS_location location_5 (object->mAttribute_mFunctionName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_5, GALGAS_string ("this lexical function names ").operator_concat (object->mAttribute_mFunctionActualArgumentList.reader_length (SOURCE_FILE ("lexiqueCompilation.gSemantics", 341)).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 341))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 340)).operator_concat (GALGAS_string (" actual argument(s), but the prototype requires ")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 341)).operator_concat (var_lexicalFormalTypeList.reader_length (SOURCE_FILE ("lexiqueCompilation.gSemantics", 343)).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 343))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 342)).operator_concat (GALGAS_string (" actual argument(s)")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 343))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 340)) ;
  }
  cEnumerator_lexicalFunctionFormalArgumentList enumerator_14651 (var_lexicalFormalTypeList, kEnumeration_up) ;
  cEnumerator_lexicalFunctionCallActualArgumentListAST enumerator_14680 (object->mAttribute_mFunctionActualArgumentList, kEnumeration_up) ;
  while (enumerator_14651.hasCurrentObject () && enumerator_14680.hasCurrentObject ()) {
    callCategoryMethod_checkLexicalFunctionCallArgument ((const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST *) enumerator_14680.current_mLexicalActualInputArgument (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, enumerator_14651.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 347)) ;
    enumerator_14651.gotoNextObject () ;
    enumerator_14680.gotoNextObject () ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalFunctionInputArgumentAST_checkLexicalFunctionCallArgument (void) {
  enterCategoryMethod_checkLexicalFunctionCallArgument (kTypeDescriptor_GALGAS_lexicalFunctionInputArgumentAST.mSlotID,
                                                        categoryMethod_lexicalFunctionInputArgumentAST_checkLexicalFunctionCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalFunctionInputArgumentAST_checkLexicalFunctionCallArgument (defineCategoryMethod_lexicalFunctionInputArgumentAST_checkLexicalFunctionCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Abstract category method '@lexicalRoutineOrFunctionFormalInputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument> gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalRoutineCallArgument (const int32_t inClassIndex,
                                                          categoryMethodSignature_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument inMethod) {
  gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument (void) {
  gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument (NULL,
                                                                                                           freeCategoryMethod_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument) ;

//-----------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalRoutineCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                         GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                         GALGAS_lexicalTypeEnum in_inLexicalRoutineFormalArgumentType,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const int32_t classIndex = info->mSlotID ;
    categoryMethodSignature_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument f = NULL ;
    if (classIndex < gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument.count ()) {
      f = gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument.count ()) {
           f = gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioLexiqueAnalysisContext, in_inLexicalRoutineFormalArgumentType, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalAttributeInputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalAttributeInputArgumentAST_checkLexicalRoutineCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                             GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                             GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                             C_Compiler * inCompiler
                                                                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalAttributeInputArgumentAST * object = (const cPtr_lexicalAttributeInputArgumentAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalAttributeInputArgumentAST) ;
  GALGAS_lexicalTypeEnum var_attributeLexicalType ;
  ioArgument_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 371)).method_searchKey (object->mAttribute_mAttributeName, var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 371)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_attributeLexicalType.objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mAttributeName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("type error, attribute type is @").operator_concat (categoryReader_lexicalTypeBaseName (var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 378))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 377)).operator_concat (GALGAS_string (" type, but lexical routine prototype requires @")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 378)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 380))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 379)).operator_concat (GALGAS_string (" type")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 380))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 377)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalAttributeInputArgumentAST_checkLexicalRoutineCallArgument (void) {
  enterCategoryMethod_checkLexicalRoutineCallArgument (kTypeDescriptor_GALGAS_lexicalAttributeInputArgumentAST.mSlotID,
                                                       categoryMethod_lexicalAttributeInputArgumentAST_checkLexicalRoutineCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalAttributeInputArgumentAST_checkLexicalRoutineCallArgument (defineCategoryMethod_lexicalAttributeInputArgumentAST_checkLexicalRoutineCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalCharacterInputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalCharacterInputArgumentAST_checkLexicalRoutineCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                             GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                                             GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                             C_Compiler * inCompiler
                                                                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalCharacterInputArgumentAST * object = (const cPtr_lexicalCharacterInputArgumentAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalCharacterInputArgumentAST) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_char (SOURCE_FILE ("lexiqueCompilation.gSemantics", 392)).objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mCharacter.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("type error, a literal character has @char").operator_concat (GALGAS_string (" type, but lexical routine prototype requires an @")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 393)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 395))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 394)).operator_concat (GALGAS_string (" type value")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 395))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 393)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalCharacterInputArgumentAST_checkLexicalRoutineCallArgument (void) {
  enterCategoryMethod_checkLexicalRoutineCallArgument (kTypeDescriptor_GALGAS_lexicalCharacterInputArgumentAST.mSlotID,
                                                       categoryMethod_lexicalCharacterInputArgumentAST_checkLexicalRoutineCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalCharacterInputArgumentAST_checkLexicalRoutineCallArgument (defineCategoryMethod_lexicalCharacterInputArgumentAST_checkLexicalRoutineCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalUnsignedInputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalRoutineCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                            GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                                            GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                            C_Compiler * inCompiler
                                                                                            COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalUnsignedInputArgumentAST * object = (const cPtr_lexicalUnsignedInputArgumentAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalUnsignedInputArgumentAST) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_uint (SOURCE_FILE ("lexiqueCompilation.gSemantics", 407)).objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mUnsigned.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("type error, a literal unsigned value has @uint").operator_concat (GALGAS_string (" type, but lexical routine prototype requires an @")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 408)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 410))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 409)).operator_concat (GALGAS_string (" type value")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 410))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 408)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalRoutineCallArgument (void) {
  enterCategoryMethod_checkLexicalRoutineCallArgument (kTypeDescriptor_GALGAS_lexicalUnsignedInputArgumentAST.mSlotID,
                                                       categoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalRoutineCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalUnsignedInputArgumentAST_checkLexicalRoutineCallArgument (defineCategoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalRoutineCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalCurrentCharacterInputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalRoutineCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                                    GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                                                    GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                                    C_Compiler * inCompiler
                                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalCurrentCharacterInputArgumentAST * object = (const cPtr_lexicalCurrentCharacterInputArgumentAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalCurrentCharacterInputArgumentAST) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_char (SOURCE_FILE ("lexiqueCompilation.gSemantics", 422)).objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (object->mAttribute_mLocation, GALGAS_string ("type error, current character value has @char").operator_concat (GALGAS_string (" type, but lexical routine prototype requires an @")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 423)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 425))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 424)).operator_concat (GALGAS_string (" type value")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 425))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 423)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalRoutineCallArgument (void) {
  enterCategoryMethod_checkLexicalRoutineCallArgument (kTypeDescriptor_GALGAS_lexicalCurrentCharacterInputArgumentAST.mSlotID,
                                                       categoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalRoutineCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalRoutineCallArgument (defineCategoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalRoutineCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalFunctionInputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalFunctionInputArgumentAST_checkLexicalRoutineCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                            GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                            GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                            C_Compiler * inCompiler
                                                                                            COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalFunctionInputArgumentAST * object = (const cPtr_lexicalFunctionInputArgumentAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalFunctionInputArgumentAST) ;
  GALGAS_lexicalFunctionFormalArgumentList var_lexicalFormalTypeList ;
  GALGAS_lexicalTypeEnum var_returnedLexicalFormalType ;
  GALGAS_string var_replacementFunctionName ;
  GALGAS_bool joker_18574_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mLexicalFunctionMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 440)).method_searchKey (object->mAttribute_mFunctionName, var_lexicalFormalTypeList, var_returnedLexicalFormalType, var_replacementFunctionName, joker_18574_0, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 440)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_replacementFunctionName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mFunctionName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticWarning (location_1, GALGAS_string ("obsolete lexical function, replaced by '").operator_concat (var_replacementFunctionName  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 449)).operator_concat (GALGAS_string ("'")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 449))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 449)) ;
  }
  const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, var_returnedLexicalFormalType.objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_2) {
    GALGAS_location location_3 (object->mAttribute_mFunctionName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_3, GALGAS_string ("type error, the function returns an @").operator_concat (categoryReader_lexicalTypeBaseName (var_returnedLexicalFormalType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 454))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 453)).operator_concat (GALGAS_string (" value, but lexical routine prototype requires an @")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 454)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 456))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 455)).operator_concat (GALGAS_string (" value")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 456))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 453)) ;
  }
  const enumGalgasBool test_4 = GALGAS_bool (kIsNotEqual, var_lexicalFormalTypeList.reader_length (SOURCE_FILE ("lexiqueCompilation.gSemantics", 460)).objectCompare (object->mAttribute_mFunctionActualArgumentList.reader_length (SOURCE_FILE ("lexiqueCompilation.gSemantics", 460)))).boolEnum () ;
  if (kBoolTrue == test_4) {
    GALGAS_location location_5 (object->mAttribute_mFunctionName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_5, GALGAS_string ("this lexical function names ").operator_concat (object->mAttribute_mFunctionActualArgumentList.reader_length (SOURCE_FILE ("lexiqueCompilation.gSemantics", 462)).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 462))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 461)).operator_concat (GALGAS_string (" actual argument(s), but the prototype requires ")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 462)).operator_concat (var_lexicalFormalTypeList.reader_length (SOURCE_FILE ("lexiqueCompilation.gSemantics", 464)).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 464))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 463)).operator_concat (GALGAS_string (" actual argument(s)")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 464))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 461)) ;
  }
  cEnumerator_lexicalFunctionFormalArgumentList enumerator_19575 (var_lexicalFormalTypeList, kEnumeration_up) ;
  cEnumerator_lexicalFunctionCallActualArgumentListAST enumerator_19604 (object->mAttribute_mFunctionActualArgumentList, kEnumeration_up) ;
  while (enumerator_19575.hasCurrentObject () && enumerator_19604.hasCurrentObject ()) {
    callCategoryMethod_checkLexicalFunctionCallArgument ((const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST *) enumerator_19604.current_mLexicalActualInputArgument (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, enumerator_19575.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 468)) ;
    enumerator_19575.gotoNextObject () ;
    enumerator_19604.gotoNextObject () ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalFunctionInputArgumentAST_checkLexicalRoutineCallArgument (void) {
  enterCategoryMethod_checkLexicalRoutineCallArgument (kTypeDescriptor_GALGAS_lexicalFunctionInputArgumentAST.mSlotID,
                                                       categoryMethod_lexicalFunctionInputArgumentAST_checkLexicalRoutineCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalFunctionInputArgumentAST_checkLexicalRoutineCallArgument (defineCategoryMethod_lexicalFunctionInputArgumentAST_checkLexicalRoutineCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Abstract category method '@abstractLexicalRoutineActualArgumentAST checkLexicalRoutineCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument> gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalRoutineCallArgument (const int32_t inClassIndex,
                                                          categoryMethodSignature_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument inMethod) {
  gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument (void) {
  gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument (NULL,
                                                                                                    freeCategoryMethod_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument) ;

//-----------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalRoutineCallArgument (const cPtr_abstractLexicalRoutineActualArgumentAST * inObject,
                                                         GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                         GALGAS_lexicalArgumentModeAST in_inLexicalRoutineFormalArgumentMode,
                                                         GALGAS_lexicalTypeEnum in_inLexicalRoutineFormalArgumentType,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, cPtr_abstractLexicalRoutineActualArgumentAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const int32_t classIndex = info->mSlotID ;
    categoryMethodSignature_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument f = NULL ;
    if (classIndex < gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument.count ()) {
      f = gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument.count ()) {
           f = gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioLexiqueAnalysisContext, in_inLexicalRoutineFormalArgumentMode, in_inLexicalRoutineFormalArgumentType, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalAttributeInputOutputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalAttributeInputOutputArgumentAST_checkLexicalRoutineCallArgument (const cPtr_abstractLexicalRoutineActualArgumentAST * inObject,
                                                                                                   GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                                   GALGAS_lexicalArgumentModeAST inArgument_inLexicalRoutineFormalArgumentMode,
                                                                                                   GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                                   C_Compiler * inCompiler
                                                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalAttributeInputOutputArgumentAST * object = (const cPtr_lexicalAttributeInputOutputArgumentAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalAttributeInputOutputArgumentAST) ;
  GALGAS_lexicalTypeEnum var_attributeLexicalType ;
  ioArgument_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 494)).method_searchKey (object->mAttribute_mAttributeName, var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 494)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_attributeLexicalType.objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mAttributeName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("type error, attribute type is @").operator_concat (categoryReader_lexicalTypeBaseName (var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 501))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 500)).operator_concat (GALGAS_string (" type, but lexical routine prototype requires @")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 501)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 503))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 502)).operator_concat (GALGAS_string (" type")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 503))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 500)) ;
  }
  const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, inArgument_inLexicalRoutineFormalArgumentMode.objectCompare (GALGAS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (SOURCE_FILE ("lexiqueCompilation.gSemantics", 507)))).boolEnum () ;
  if (kBoolTrue == test_2) {
    inCompiler->emitSemanticError (object->mAttribute_mActualPassingModeLocation, GALGAS_string ("the output mode (!) is required here, not an output/input mode")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 508)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalAttributeInputOutputArgumentAST_checkLexicalRoutineCallArgument (void) {
  enterCategoryMethod_checkLexicalRoutineCallArgument (kTypeDescriptor_GALGAS_lexicalAttributeInputOutputArgumentAST.mSlotID,
                                                       categoryMethod_lexicalAttributeInputOutputArgumentAST_checkLexicalRoutineCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalAttributeInputOutputArgumentAST_checkLexicalRoutineCallArgument (defineCategoryMethod_lexicalAttributeInputOutputArgumentAST_checkLexicalRoutineCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalFormalInputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalFormalInputArgumentAST_checkLexicalRoutineCallArgument (const cPtr_abstractLexicalRoutineActualArgumentAST * inObject,
                                                                                          GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                          GALGAS_lexicalArgumentModeAST inArgument_inLexicalRoutineFormalArgumentMode,
                                                                                          GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalFormalInputArgumentAST * object = (const cPtr_lexicalFormalInputArgumentAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalFormalInputArgumentAST) ;
  callCategoryMethod_checkLexicalRoutineCallArgument ((const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST *) object->mAttribute_mRoutineOrFunctionFormalInputArgument.ptr (), ioArgument_ioLexiqueAnalysisContext, inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 520)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, inArgument_inLexicalRoutineFormalArgumentMode.objectCompare (GALGAS_lexicalArgumentModeAST::constructor_lexicalInputMode (SOURCE_FILE ("lexiqueCompilation.gSemantics", 525)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (object->mAttribute_mActualPassingModeLocation, GALGAS_string ("the output/input mode (!\?) is required here, not an input mode")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 526)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalFormalInputArgumentAST_checkLexicalRoutineCallArgument (void) {
  enterCategoryMethod_checkLexicalRoutineCallArgument (kTypeDescriptor_GALGAS_lexicalFormalInputArgumentAST.mSlotID,
                                                       categoryMethod_lexicalFormalInputArgumentAST_checkLexicalRoutineCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalFormalInputArgumentAST_checkLexicalRoutineCallArgument (defineCategoryMethod_lexicalFormalInputArgumentAST_checkLexicalRoutineCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//  Abstract category method '@lexicalInstructionAST checkLexicalInstruction'  *
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_lexicalInstructionAST_checkLexicalInstruction> gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalInstruction (const int32_t inClassIndex,
                                                  categoryMethodSignature_lexicalInstructionAST_checkLexicalInstruction inMethod) {
  gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_lexicalInstructionAST_checkLexicalInstruction (void) {
  gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalInstructionAST_checkLexicalInstruction (NULL,
                                                                          freeCategoryMethod_lexicalInstructionAST_checkLexicalInstruction) ;

//-----------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                 GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                 GALGAS_lexicalTagMap & io_ioTagMap,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, cPtr_lexicalInstructionAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const int32_t classIndex = info->mSlotID ;
    categoryMethodSignature_lexicalInstructionAST_checkLexicalInstruction f = NULL ;
    if (classIndex < gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction.count ()) {
      f = gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction.count ()) {
           f = gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioLexiqueAnalysisContext, io_ioTagMap, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalStructuredSendInstructionAST checkLexicalInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalStructuredSendInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                                        GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                        GALGAS_lexicalTagMap & /* ioArgument_ioTagMap */,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalStructuredSendInstructionAST * object = (const cPtr_lexicalStructuredSendInstructionAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalStructuredSendInstructionAST) ;
  cEnumerator_lexicalSendSearchListAST enumerator_22828 (object->mAttribute_mLexicalSendSearchList, kEnumeration_up) ;
  while (enumerator_22828.hasCurrentObject ()) {
    {
    ioArgument_ioLexiqueAnalysisContext.mAttribute_mLexicalTokenListMap.modifier_setMShouldBeGeneratedForKey (GALGAS_bool (true), enumerator_22828.current_mSearchListName (HERE).mAttribute_string, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 549)) ;
    }
    GALGAS_lexicalTypeEnum joker_23169_0 ; // Joker input parameter
    ioArgument_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 550)).method_searchKey (enumerator_22828.current_mAttributeName (HERE), joker_23169_0, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 550)) ;
    enumerator_22828.gotoNextObject () ;
  }
  callCategoryMethod_checkLexicalDefaultAction ((const cPtr_lexicalSendDefaultActionAST *) object->mAttribute_mLexicalSendDefaultAction.ptr (), ioArgument_ioLexiqueAnalysisContext, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 552)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalStructuredSendInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalStructuredSendInstructionAST.mSlotID,
                                               categoryMethod_lexicalStructuredSendInstructionAST_checkLexicalInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalStructuredSendInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalStructuredSendInstructionAST_checkLexicalInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalSimpleSendInstructionAST checkLexicalInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalSimpleSendInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                                    GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                    GALGAS_lexicalTagMap & /* ioArgument_ioTagMap */,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalSimpleSendInstructionAST * object = (const cPtr_lexicalSimpleSendInstructionAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalSimpleSendInstructionAST) ;
  GALGAS_lexicalSentValueList joker_23600_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mTerminalMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 561)).method_searchKey (object->mAttribute_mSentTerminal, joker_23600_0, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 561)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalSimpleSendInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalSimpleSendInstructionAST.mSlotID,
                                               categoryMethod_lexicalSimpleSendInstructionAST_checkLexicalInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalSimpleSendInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalSimpleSendInstructionAST_checkLexicalInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalRepeatInstructionAST checkLexicalInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalRepeatInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                                GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                GALGAS_lexicalTagMap & ioArgument_ioTagMap,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalRepeatInstructionAST * object = (const cPtr_lexicalRepeatInstructionAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalRepeatInstructionAST) ;
  cEnumerator_lexicalWhileBranchListAST enumerator_23883 (object->mAttribute_mLexicalWhileBranchList, kEnumeration_up) ;
  while (enumerator_23883.hasCurrentObject ()) {
    callCategoryMethod_checkLexicalExpression ((const cPtr_lexicalExpressionAST *) enumerator_23883.current_mWhileExpression (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 571)) ;
    GALGAS_lexicalTagMap var_tagMap = GALGAS_lexicalTagMap::constructor_mapWithMapToOverride (ioArgument_ioTagMap COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 572)) ;
    cEnumerator_lexicalInstructionListAST enumerator_24056 (enumerator_23883.current_mWhileInstructionList (HERE), kEnumeration_up) ;
    while (enumerator_24056.hasCurrentObject ()) {
      callCategoryMethod_checkLexicalInstruction ((const cPtr_lexicalInstructionAST *) enumerator_24056.current_mInstruction (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, var_tagMap, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 574)) ;
      enumerator_24056.gotoNextObject () ;
    }
    enumerator_23883.gotoNextObject () ;
  }
  GALGAS_lexicalTagMap var_tagMap = GALGAS_lexicalTagMap::constructor_mapWithMapToOverride (ioArgument_ioTagMap COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 577)) ;
  cEnumerator_lexicalInstructionListAST enumerator_24270 (object->mAttribute_mRepeatedInstructionList, kEnumeration_up) ;
  while (enumerator_24270.hasCurrentObject ()) {
    callCategoryMethod_checkLexicalInstruction ((const cPtr_lexicalInstructionAST *) enumerator_24270.current_mInstruction (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, var_tagMap, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 579)) ;
    enumerator_24270.gotoNextObject () ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalRepeatInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalRepeatInstructionAST.mSlotID,
                                               categoryMethod_lexicalRepeatInstructionAST_checkLexicalInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalRepeatInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalRepeatInstructionAST_checkLexicalInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalSelectInstructionAST checkLexicalInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalSelectInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                                GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                GALGAS_lexicalTagMap & ioArgument_ioTagMap,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalSelectInstructionAST * object = (const cPtr_lexicalSelectInstructionAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalSelectInstructionAST) ;
  cEnumerator_lexicalSelectBranchListAST enumerator_24651 (object->mAttribute_mLexicalSelectBranchList, kEnumeration_up) ;
  while (enumerator_24651.hasCurrentObject ()) {
    callCategoryMethod_checkLexicalExpression ((const cPtr_lexicalExpressionAST *) enumerator_24651.current_mSelectExpression (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 590)) ;
    GALGAS_lexicalTagMap var_tagMap = GALGAS_lexicalTagMap::constructor_mapWithMapToOverride (ioArgument_ioTagMap COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 591)) ;
    cEnumerator_lexicalInstructionListAST enumerator_24826 (enumerator_24651.current_mSelectInstructionList (HERE), kEnumeration_up) ;
    while (enumerator_24826.hasCurrentObject ()) {
      callCategoryMethod_checkLexicalInstruction ((const cPtr_lexicalInstructionAST *) enumerator_24826.current_mInstruction (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, var_tagMap, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 593)) ;
      enumerator_24826.gotoNextObject () ;
    }
    enumerator_24651.gotoNextObject () ;
  }
  GALGAS_lexicalTagMap var_tagMap = GALGAS_lexicalTagMap::constructor_mapWithMapToOverride (ioArgument_ioTagMap COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 596)) ;
  cEnumerator_lexicalInstructionListAST enumerator_25039 (object->mAttribute_mDefaultInstructionList, kEnumeration_up) ;
  while (enumerator_25039.hasCurrentObject ()) {
    callCategoryMethod_checkLexicalInstruction ((const cPtr_lexicalInstructionAST *) enumerator_25039.current_mInstruction (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, var_tagMap, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 598)) ;
    enumerator_25039.gotoNextObject () ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalSelectInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalSelectInstructionAST.mSlotID,
                                               categoryMethod_lexicalSelectInstructionAST_checkLexicalInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalSelectInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalSelectInstructionAST_checkLexicalInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalRoutineInstructionAST checkLexicalInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalRoutineInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                                 GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                 GALGAS_lexicalTagMap & /* ioArgument_ioTagMap */,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalRoutineInstructionAST * object = (const cPtr_lexicalRoutineInstructionAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalRoutineInstructionAST) ;
  GALGAS_lexicalRoutineFormalArgumentList var_lexicalRoutineFormalArgumentList ;
  GALGAS_stringlist var_routineErrorMessageList ;
  GALGAS_bool joker_25660_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mLexicalRoutineMessageMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 610)).method_searchKey (object->mAttribute_mRoutineName, var_lexicalRoutineFormalArgumentList, var_routineErrorMessageList, joker_25660_0, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 610)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_lexicalRoutineFormalArgumentList.reader_length (SOURCE_FILE ("lexiqueCompilation.gSemantics", 617)).objectCompare (object->mAttribute_mActualArgumentList.reader_length (SOURCE_FILE ("lexiqueCompilation.gSemantics", 617)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mRoutineName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("this lexical routine call names ").operator_concat (object->mAttribute_mActualArgumentList.reader_length (SOURCE_FILE ("lexiqueCompilation.gSemantics", 619)).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 619))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 618)).operator_concat (GALGAS_string (" actual argument(s), but the lexical routine prototype requires ")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 619)).operator_concat (var_lexicalRoutineFormalArgumentList.reader_length (SOURCE_FILE ("lexiqueCompilation.gSemantics", 621)).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 621))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 620)).operator_concat (GALGAS_string (" actual argument(s)")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 621))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 618)) ;
  }
  cEnumerator_lexicalRoutineFormalArgumentList enumerator_26150 (var_lexicalRoutineFormalArgumentList, kEnumeration_up) ;
  cEnumerator_lexicalRoutineCallActualArgumentListAST enumerator_26171 (object->mAttribute_mActualArgumentList, kEnumeration_up) ;
  while (enumerator_26150.hasCurrentObject () && enumerator_26171.hasCurrentObject ()) {
    callCategoryMethod_checkLexicalRoutineCallArgument ((const cPtr_abstractLexicalRoutineActualArgumentAST *) enumerator_26171.current_mLexicalRoutineActualArgument (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, enumerator_26150.current_mLexicalFormalArgumentMode (HERE), enumerator_26150.current_mLexicalFormalArgumentType (HERE), inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 625)) ;
    enumerator_26150.gotoNextObject () ;
    enumerator_26171.gotoNextObject () ;
  }
  const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, var_routineErrorMessageList.reader_length (SOURCE_FILE ("lexiqueCompilation.gSemantics", 632)).objectCompare (object->mAttribute_mErrorMessageList.reader_length (SOURCE_FILE ("lexiqueCompilation.gSemantics", 632)))).boolEnum () ;
  if (kBoolTrue == test_2) {
    GALGAS_location location_3 (object->mAttribute_mRoutineName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_3, GALGAS_string ("this lexical routine call names ").operator_concat (object->mAttribute_mErrorMessageList.reader_length (SOURCE_FILE ("lexiqueCompilation.gSemantics", 634)).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 634))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 633)).operator_concat (GALGAS_string (" error message(s), but the lexical routine prototype requires ")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 634)).operator_concat (var_routineErrorMessageList.reader_length (SOURCE_FILE ("lexiqueCompilation.gSemantics", 636)).reader_string (SOURCE_FILE ("lexiqueCompilation.gSemantics", 636))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 635)).operator_concat (GALGAS_string (" error message(s)")  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 636))  COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 633)) ;
  }
  cEnumerator_lstringlist enumerator_26800 (object->mAttribute_mErrorMessageList, kEnumeration_up) ;
  while (enumerator_26800.hasCurrentObject ()) {
    {
    ioArgument_ioLexiqueAnalysisContext.mAttribute_mLexicalMessageMap.modifier_setMMessageIsUsedForKey (GALGAS_bool (true), enumerator_26800.current_mValue (HERE).mAttribute_string, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 643)) ;
    }
    enumerator_26800.gotoNextObject () ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalRoutineInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalRoutineInstructionAST.mSlotID,
                                               categoryMethod_lexicalRoutineInstructionAST_checkLexicalInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalRoutineInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalRoutineInstructionAST_checkLexicalInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalLogInstructionAST checkLexicalInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalLogInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * /* inObject */,
                                                                             GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                             GALGAS_lexicalTagMap & /* ioArgument_ioTagMap */,
                                                                             C_Compiler * /* inCompiler */
                                                                             COMMA_UNUSED_LOCATION_ARGS) {
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalLogInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalLogInstructionAST.mSlotID,
                                               categoryMethod_lexicalLogInstructionAST_checkLexicalInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalLogInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalLogInstructionAST_checkLexicalInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalRewindInstructionAST checkLexicalInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalRewindInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                                GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                GALGAS_lexicalTagMap & ioArgument_ioTagMap,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalRewindInstructionAST * object = (const cPtr_lexicalRewindInstructionAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalRewindInstructionAST) ;
  ioArgument_ioTagMap.method_searchKey (object->mAttribute_mLexicalTagName, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 661)) ;
  GALGAS_lexicalSentValueList joker_27670_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mTerminalMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 662)).method_searchKey (object->mAttribute_mTerminalName, joker_27670_0, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 662)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalRewindInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalRewindInstructionAST.mSlotID,
                                               categoryMethod_lexicalRewindInstructionAST_checkLexicalInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalRewindInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalRewindInstructionAST_checkLexicalInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalDropInstructionAST checkLexicalInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalDropInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                              GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                              GALGAS_lexicalTagMap & /* ioArgument_ioTagMap */,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalDropInstructionAST * object = (const cPtr_lexicalDropInstructionAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalDropInstructionAST) ;
  GALGAS_lexicalSentValueList joker_27995_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mTerminalMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 671)).method_searchKey (object->mAttribute_mTerminalName, joker_27995_0, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 671)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalDropInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalDropInstructionAST.mSlotID,
                                               categoryMethod_lexicalDropInstructionAST_checkLexicalInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalDropInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalDropInstructionAST_checkLexicalInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalTagInstructionAST checkLexicalInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalTagInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                             GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                             GALGAS_lexicalTagMap & ioArgument_ioTagMap,
                                                                             C_Compiler * inCompiler
                                                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalTagInstructionAST * object = (const cPtr_lexicalTagInstructionAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalTagInstructionAST) ;
  {
  ioArgument_ioTagMap.modifier_insertKey (object->mAttribute_mLexicalTagName, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 680)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalTagInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalTagInstructionAST.mSlotID,
                                               categoryMethod_lexicalTagInstructionAST_checkLexicalInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalTagInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalTagInstructionAST_checkLexicalInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalErrorInstructionAST checkLexicalInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalErrorInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                               GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                               GALGAS_lexicalTagMap & /* ioArgument_ioTagMap */,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalErrorInstructionAST * object = (const cPtr_lexicalErrorInstructionAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalErrorInstructionAST) ;
  {
  ioArgument_ioLexiqueAnalysisContext.mAttribute_mLexicalMessageMap.modifier_setMMessageIsUsedForKey (GALGAS_bool (true), object->mAttribute_mErrorMessageName.mAttribute_string, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 692)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalErrorInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalErrorInstructionAST.mSlotID,
                                               categoryMethod_lexicalErrorInstructionAST_checkLexicalInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalErrorInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalErrorInstructionAST_checkLexicalInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalWarningInstructionAST checkLexicalInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalWarningInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                                 GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                 GALGAS_lexicalTagMap & /* ioArgument_ioTagMap */,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalWarningInstructionAST * object = (const cPtr_lexicalWarningInstructionAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalWarningInstructionAST) ;
  {
  ioArgument_ioLexiqueAnalysisContext.mAttribute_mLexicalMessageMap.modifier_setMMessageIsUsedForKey (GALGAS_bool (true), object->mAttribute_mWarningMessageName.mAttribute_string, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 704)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalWarningInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalWarningInstructionAST.mSlotID,
                                               categoryMethod_lexicalWarningInstructionAST_checkLexicalInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalWarningInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalWarningInstructionAST_checkLexicalInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//     Abstract category method '@abstractLexicalRuleAST checkLexicalRule'     *
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_abstractLexicalRuleAST_checkLexicalRule> gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalRule (const int32_t inClassIndex,
                                           categoryMethodSignature_abstractLexicalRuleAST_checkLexicalRule inMethod) {
  gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_abstractLexicalRuleAST_checkLexicalRule (void) {
  gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_abstractLexicalRuleAST_checkLexicalRule (NULL,
                                                                    freeCategoryMethod_abstractLexicalRuleAST_checkLexicalRule) ;

//-----------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalRule (const cPtr_abstractLexicalRuleAST * inObject,
                                          GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, cPtr_abstractLexicalRuleAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const int32_t classIndex = info->mSlotID ;
    categoryMethodSignature_abstractLexicalRuleAST_checkLexicalRule f = NULL ;
    if (classIndex < gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule.count ()) {
      f = gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule.count ()) {
           f = gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioLexiqueAnalysisContext, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
//    Overriding category method '@lexicalImplicitRuleAST checkLexicalRule'    *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalImplicitRuleAST_checkLexicalRule (const cPtr_abstractLexicalRuleAST * inObject,
                                                                    GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalImplicitRuleAST * object = (const cPtr_lexicalImplicitRuleAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalImplicitRuleAST) ;
  GALGAS_lexicalExplicitTokenListMap joker_29909_0 ; // Joker input parameter
  GALGAS_tokenSortedlist joker_29912_0 ; // Joker input parameter
  GALGAS_bool joker_29915_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mLexicalTokenListMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 720)).method_searchKey (object->mAttribute_mListName, joker_29909_0, joker_29912_0, joker_29915_0, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 720)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalImplicitRuleAST_checkLexicalRule (void) {
  enterCategoryMethod_checkLexicalRule (kTypeDescriptor_GALGAS_lexicalImplicitRuleAST.mSlotID,
                                        categoryMethod_lexicalImplicitRuleAST_checkLexicalRule) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalImplicitRuleAST_checkLexicalRule (defineCategoryMethod_lexicalImplicitRuleAST_checkLexicalRule, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//    Overriding category method '@lexicalExplicitRuleAST checkLexicalRule'    *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalExplicitRuleAST_checkLexicalRule (const cPtr_abstractLexicalRuleAST * inObject,
                                                                    GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalExplicitRuleAST * object = (const cPtr_lexicalExplicitRuleAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexicalExplicitRuleAST) ;
  callCategoryMethod_checkLexicalExpression ((const cPtr_lexicalExpressionAST *) object->mAttribute_mLexicalRuleExpression.ptr (), ioArgument_ioLexiqueAnalysisContext, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 728)) ;
  GALGAS_lexicalTagMap var_tagMap = GALGAS_lexicalTagMap::constructor_emptyMap (SOURCE_FILE ("lexiqueCompilation.gSemantics", 729)) ;
  cEnumerator_lexicalInstructionListAST enumerator_30267 (object->mAttribute_mInstructionList, kEnumeration_up) ;
  while (enumerator_30267.hasCurrentObject ()) {
    callCategoryMethod_checkLexicalInstruction ((const cPtr_lexicalInstructionAST *) enumerator_30267.current_mInstruction (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, var_tagMap, inCompiler COMMA_SOURCE_FILE ("lexiqueCompilation.gSemantics", 731)) ;
    enumerator_30267.gotoNextObject () ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalExplicitRuleAST_checkLexicalRule (void) {
  enterCategoryMethod_checkLexicalRule (kTypeDescriptor_GALGAS_lexicalExplicitRuleAST.mSlotID,
                                        categoryMethod_lexicalExplicitRuleAST_checkLexicalRule) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalExplicitRuleAST_checkLexicalRule (defineCategoryMethod_lexicalExplicitRuleAST_checkLexicalRule, NULL) ;

//-----------------------------------------------------------------------------*

GALGAS_lexiqueComponentGenerationList_2D_element::GALGAS_lexiqueComponentGenerationList_2D_element (void) :
mAttribute_mLexiqueComponentName (),
mAttribute_mCppHeaderContents (),
mAttribute_mCppContents (),
mAttribute_mCocoaHeaderContents (),
mAttribute_mCocoaContents () {
}

//-----------------------------------------------------------------------------*

GALGAS_lexiqueComponentGenerationList_2D_element::~ GALGAS_lexiqueComponentGenerationList_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_lexiqueComponentGenerationList_2D_element::GALGAS_lexiqueComponentGenerationList_2D_element (const GALGAS_string & inOperand0,
                                                                                                    const GALGAS_string & inOperand1,
                                                                                                    const GALGAS_string & inOperand2,
                                                                                                    const GALGAS_string & inOperand3,
                                                                                                    const GALGAS_string & inOperand4) :
mAttribute_mLexiqueComponentName (inOperand0),
mAttribute_mCppHeaderContents (inOperand1),
mAttribute_mCppContents (inOperand2),
mAttribute_mCocoaHeaderContents (inOperand3),
mAttribute_mCocoaContents (inOperand4) {
}

//-----------------------------------------------------------------------------*

GALGAS_lexiqueComponentGenerationList_2D_element GALGAS_lexiqueComponentGenerationList_2D_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_lexiqueComponentGenerationList_2D_element (GALGAS_string::constructor_default (HERE),
                                                           GALGAS_string::constructor_default (HERE),
                                                           GALGAS_string::constructor_default (HERE),
                                                           GALGAS_string::constructor_default (HERE),
                                                           GALGAS_string::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lexiqueComponentGenerationList_2D_element GALGAS_lexiqueComponentGenerationList_2D_element::constructor_new (const GALGAS_string & inOperand0,
                                                                                                                    const GALGAS_string & inOperand1,
                                                                                                                    const GALGAS_string & inOperand2,
                                                                                                                    const GALGAS_string & inOperand3,
                                                                                                                    const GALGAS_string & inOperand4 
                                                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_lexiqueComponentGenerationList_2D_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    result = GALGAS_lexiqueComponentGenerationList_2D_element (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_lexiqueComponentGenerationList_2D_element::objectCompare (const GALGAS_lexiqueComponentGenerationList_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mLexiqueComponentName.objectCompare (inOperand.mAttribute_mLexiqueComponentName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mCppHeaderContents.objectCompare (inOperand.mAttribute_mCppHeaderContents) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mCppContents.objectCompare (inOperand.mAttribute_mCppContents) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mCocoaHeaderContents.objectCompare (inOperand.mAttribute_mCocoaHeaderContents) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mCocoaContents.objectCompare (inOperand.mAttribute_mCocoaContents) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_lexiqueComponentGenerationList_2D_element::isValid (void) const {
  return mAttribute_mLexiqueComponentName.isValid () && mAttribute_mCppHeaderContents.isValid () && mAttribute_mCppContents.isValid () && mAttribute_mCocoaHeaderContents.isValid () && mAttribute_mCocoaContents.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_lexiqueComponentGenerationList_2D_element::drop (void) {
  mAttribute_mLexiqueComponentName.drop () ;
  mAttribute_mCppHeaderContents.drop () ;
  mAttribute_mCppContents.drop () ;
  mAttribute_mCocoaHeaderContents.drop () ;
  mAttribute_mCocoaContents.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_lexiqueComponentGenerationList_2D_element::description (C_String & ioString,
                                                                    const int32_t inIndentation) const {
  ioString << "<struct @lexiqueComponentGenerationList-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mLexiqueComponentName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mCppHeaderContents.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mCppContents.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mCocoaHeaderContents.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mCocoaContents.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_string GALGAS_lexiqueComponentGenerationList_2D_element::reader_mLexiqueComponentName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mLexiqueComponentName ;
}

//-----------------------------------------------------------------------------*

GALGAS_string GALGAS_lexiqueComponentGenerationList_2D_element::reader_mCppHeaderContents (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mCppHeaderContents ;
}

//-----------------------------------------------------------------------------*

GALGAS_string GALGAS_lexiqueComponentGenerationList_2D_element::reader_mCppContents (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mCppContents ;
}

//-----------------------------------------------------------------------------*

GALGAS_string GALGAS_lexiqueComponentGenerationList_2D_element::reader_mCocoaHeaderContents (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mCocoaHeaderContents ;
}

//-----------------------------------------------------------------------------*

GALGAS_string GALGAS_lexiqueComponentGenerationList_2D_element::reader_mCocoaContents (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mCocoaContents ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                @lexiqueComponentGenerationList-element type                 *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_lexiqueComponentGenerationList_2D_element ("lexiqueComponentGenerationList-element",
                                                                  NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_lexiqueComponentGenerationList_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_lexiqueComponentGenerationList_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_lexiqueComponentGenerationList_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_lexiqueComponentGenerationList_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_lexiqueComponentGenerationList_2D_element GALGAS_lexiqueComponentGenerationList_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                                                  C_Compiler * inCompiler
                                                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_lexiqueComponentGenerationList_2D_element result ;
  const GALGAS_lexiqueComponentGenerationList_2D_element * p = (const GALGAS_lexiqueComponentGenerationList_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_lexiqueComponentGenerationList_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("lexiqueComponentGenerationList-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


