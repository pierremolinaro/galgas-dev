//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'lexiqueCompilation.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 29th, 2009, at 15h30'22"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "lexiqueCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "lexiqueCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "lexiqueLL1grammar.h"

//--- START OF USER ZONE 2

//---------------------------------------------------------------------------*

//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalInstruction.checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalInstruction__checkLexicalInstruction> gDispatchTableFor__lexicalInstruction__checkLexicalInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalInstruction__checkLexicalInstruction (typeCategoryMethod__lexicalInstruction__checkLexicalInstruction inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__lexicalInstruction__checkLexicalInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalInstruction__checkLexicalInstruction
findCategoryMethod__lexicalInstruction__checkLexicalInstruction (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalInstruction__checkLexicalInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__lexicalInstruction__checkLexicalInstruction.count ()) {
    result = gDispatchTableFor__lexicalInstruction__checkLexicalInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (superClassPtr) ;
      gDispatchTableFor__lexicalInstruction__checkLexicalInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalStructuredSendInstruction.checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStructuredSendInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalStructuredSendInstruction * operand_1986,
                                GGS_lexicalMessageMap  & /* var_cas_ioLexicalMessageMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_1986 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@lexicalSimpleSendInstruction.checkLexicalInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSimpleSendInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalSimpleSendInstruction * operand_2201,
                                GGS_lexicalMessageMap  & /* var_cas_ioLexicalMessageMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2201 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalRepeatInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRepeatInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalRepeatInstruction * operand_2412,
                                GGS_lexicalMessageMap  & var_cas_ioLexicalMessageMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2412 != NULL) {
    {
      GGS_lexicalWhileBranchList::cEnumerator enumerator_2491 (operand_2412->mLexicalWhileBranchList, true) ;
      const GGS_lexicalWhileBranchList::cElement * operand_2491 = NULL ;
      while (((operand_2491 = enumerator_2491.nextObject ()))) {
        macroValidPointer (operand_2491) ;
        {
          GGS_lexicalInstructionList::cEnumerator enumerator_2528 (operand_2491->mWhileInstructionList, true) ;
          const GGS_lexicalInstructionList::cElement * operand_2528 = NULL ;
          while (((operand_2528 = enumerator_2528.nextObject ()))) {
            macroValidPointer (operand_2528) ;
            const GGS_lexicalInstruction  _temp_2575 = operand_2528->mInstruction ;
            if (_temp_2575.isBuilt ()) {
              typeCategoryMethod__lexicalInstruction__checkLexicalInstruction _method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (_temp_2575._galgasObjectRunTimeInfo ()) ;
              if (_method != NULL) {
                _method (inLexique, _temp_2575 (HERE), var_cas_ioLexicalMessageMap COMMA_SOURCE_FILE_AT_LINE (53)) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_lexicalInstructionList::cEnumerator enumerator_2669 (operand_2412->mRepeatedInstructionList, true) ;
      const GGS_lexicalInstructionList::cElement * operand_2669 = NULL ;
      while (((operand_2669 = enumerator_2669.nextObject ()))) {
        macroValidPointer (operand_2669) ;
        const GGS_lexicalInstruction  _temp_2714 = operand_2669->mInstruction ;
        if (_temp_2714.isBuilt ()) {
          typeCategoryMethod__lexicalInstruction__checkLexicalInstruction _method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (_temp_2714._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (inLexique, _temp_2714 (HERE), var_cas_ioLexicalMessageMap COMMA_SOURCE_FILE_AT_LINE (57)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalSelectInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSelectInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalSelectInstruction * operand_2914,
                                GGS_lexicalMessageMap  & var_cas_ioLexicalMessageMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2914 != NULL) {
    {
      GGS_lexicalSelectBranchList::cEnumerator enumerator_2994 (operand_2914->mLexicalSelectBranchList, true) ;
      const GGS_lexicalSelectBranchList::cElement * operand_2994 = NULL ;
      while (((operand_2994 = enumerator_2994.nextObject ()))) {
        macroValidPointer (operand_2994) ;
        {
          GGS_lexicalInstructionList::cEnumerator enumerator_3032 (operand_2994->mSelectInstructionList, true) ;
          const GGS_lexicalInstructionList::cElement * operand_3032 = NULL ;
          while (((operand_3032 = enumerator_3032.nextObject ()))) {
            macroValidPointer (operand_3032) ;
            const GGS_lexicalInstruction  _temp_3079 = operand_3032->mInstruction ;
            if (_temp_3079.isBuilt ()) {
              typeCategoryMethod__lexicalInstruction__checkLexicalInstruction _method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (_temp_3079._galgasObjectRunTimeInfo ()) ;
              if (_method != NULL) {
                _method (inLexique, _temp_3079 (HERE), var_cas_ioLexicalMessageMap COMMA_SOURCE_FILE_AT_LINE (68)) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_lexicalInstructionList::cEnumerator enumerator_3172 (operand_2914->mDefaultInstructionList, true) ;
      const GGS_lexicalInstructionList::cElement * operand_3172 = NULL ;
      while (((operand_3172 = enumerator_3172.nextObject ()))) {
        macroValidPointer (operand_3172) ;
        const GGS_lexicalInstruction  _temp_3217 = operand_3172->mInstruction ;
        if (_temp_3217.isBuilt ()) {
          typeCategoryMethod__lexicalInstruction__checkLexicalInstruction _method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (_temp_3217._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (inLexique, _temp_3217 (HERE), var_cas_ioLexicalMessageMap COMMA_SOURCE_FILE_AT_LINE (72)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalActionInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalActionInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalActionInstruction * operand_3417,
                                GGS_lexicalMessageMap  & /* var_cas_ioLexicalMessageMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3417 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalLogInstruction.checkLexicalInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalLogInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalLogInstruction * operand_3625,
                                GGS_lexicalMessageMap  & /* var_cas_ioLexicalMessageMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3625 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalRewindInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRewindInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalRewindInstruction * operand_3836,
                                GGS_lexicalMessageMap  & /* var_cas_ioLexicalMessageMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3836 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalDropInstruction.checkLexicalInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalDropInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalDropInstruction * operand_4045,
                                GGS_lexicalMessageMap  & /* var_cas_ioLexicalMessageMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4045 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalTagInstruction.checkLexicalInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalTagInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalTagInstruction * operand_4253,
                                GGS_lexicalMessageMap  & /* var_cas_ioLexicalMessageMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4253 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalErrorInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalErrorInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalErrorInstruction * operand_4463,
                                GGS_lexicalMessageMap  & var_cas_ioLexicalMessageMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4463 != NULL) {
    if ((var_cas_ioLexicalMessageMap.reader_hasKey (inLexique, operand_4463->mErrorMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (116)) COMMA_SOURCE_FILE_AT_LINE (116))).isBuiltAndTrue ()) {
    }else{
      GGS_lstring  automatic_var_0 ;
      GGS_bool automatic_var_1 ;
      const GGS_lexicalMessageMap  _temp_4618 = var_cas_ioLexicalMessageMap ;
      if (_temp_4618.isBuilt ()) {
        _temp_4618 (HERE)->method_searchKey (inLexique, operand_4463->mErrorMessageName, automatic_var_0, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (119)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalWarningInstruction.checkLexicalInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalWarningInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalWarningInstruction * operand_4817,
                                GGS_lexicalMessageMap  & var_cas_ioLexicalMessageMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4817 != NULL) {
    GGS_lstring  automatic_var_2 ;
    GGS_bool automatic_var_3 ;
    const GGS_lexicalMessageMap  _temp_4895 = var_cas_ioLexicalMessageMap ;
    if (_temp_4895.isBuilt ()) {
      _temp_4895 (HERE)->method_searchKey (inLexique, operand_4817->mWarningMessageName, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (128)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "compileLexiqueComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileLexiqueComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  /* var_cas_inOutputDirectory */ COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileLexiqueComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lexiqueComponentRoot  var_cas_lexiqueComponentRoot ;
  const GGS_string _depExtension = GGS_string ("") ;
  const GGS_string _depPath = GGS_string ("") ;
  if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
    lexiqueLL1grammar::_performSourceFileParsing_ (inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_inSourceFile,
                                  var_cas_lexiqueComponentRoot
                                  COMMA_SOURCE_FILE_AT_LINE (138)) ;
  }
  GGS_lstring  var_cas_componentName ;
  var_cas_componentName = var_cas_lexiqueComponentRoot.reader_mLexiqueComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (140)) ;
  GGS_string var_cas_basename ;
  var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (141)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (141)) ;
  if (((var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (142)))._operator_isNotEqual (var_cas_basename)).isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS checks "
      "the component name ('"))._operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (144))))._operator_concat (GGS_string ("') against the source file base name ('")))._operator_concat (var_cas_basename))._operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (146)) ;
  }
  GGS_lexicalTypeMap  var_cas_lexicalTypeMap ;
  var_cas_lexicalTypeMap = GGS_lexicalTypeMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (150)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("char"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (151)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (152)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint64"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (153)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (154)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint64"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint64 (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (155)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("double"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_double (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (156)) ;
  GGS_lexicalAttributeMap  var_cas_lexicalAttributeMap ;
  var_cas_lexicalAttributeMap = GGS_lexicalAttributeMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_lexicalAttributeList::cEnumerator enumerator_6688 (var_cas_lexiqueComponentRoot.reader_mLexicalAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (159)), true) ;
    const GGS_lexicalAttributeList::cElement * operand_6688 = NULL ;
    while (((operand_6688 = enumerator_6688.nextObject ()))) {
      macroValidPointer (operand_6688) ;
      if ((var_cas_lexicalTypeMap.reader_hasKey (inLexique, operand_6688->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (160)) COMMA_SOURCE_FILE_AT_LINE (160))).isBuiltAndTrue ()) {
        GGS_lexicalTypeEnum var_cas_lexicalType ;
        const GGS_lexicalTypeMap  _temp_6859 = var_cas_lexicalTypeMap ;
        if (_temp_6859.isBuilt ()) {
          _temp_6859 (HERE)->method_searchKey (inLexique, operand_6688->mTypeName, var_cas_lexicalType COMMA_SOURCE_FILE_AT_LINE (162)) ;
        }
        var_cas_lexicalAttributeMap.modifier_insertKey (inLexique, operand_6688->mName, var_cas_lexicalType COMMA_SOURCE_FILE_AT_LINE (163)) ;
      }else{
        GGS_string var_cas_m ;
        var_cas_m = GGS_string ("") ;
        var_cas_m.appendCString ("the @") ;
        var_cas_m._dotAssign_operation (operand_6688->mTypeName) ;
        var_cas_m.appendCString (" type is not a valid lexical attribute type; are allowed:") ;
        GGS_bool var_cas_firstLoop ;
        var_cas_firstLoop = GGS_bool (true) ;
        {
          GGS_lexicalTypeMap::cEnumerator enumerator_7137 (var_cas_lexicalTypeMap, true) ;
          const GGS_lexicalTypeMap::cElement * operand_7137 = enumerator_7137.nextObject () ;
          if ((operand_7137 != NULL)) {
            bool _foreach_loop_7137 ;
            do{
              macroValidPointer (operand_7137) ;
              var_cas_m.appendCString (" @") ;
              var_cas_m._dotAssign_operation (operand_7137->mKey) ;
              operand_7137 = enumerator_7137.nextObject () ;
              _foreach_loop_7137 = ((operand_7137 != NULL)) ;
              if (_foreach_loop_7137) {
                var_cas_m.appendCString (",") ;
              }
            }while (_foreach_loop_7137) ;
          }
        }
        operand_6688->mTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_m COMMA_SOURCE_FILE_AT_LINE (174)) ;
      }
    }
  }
  GGS_terminalMap  var_cas_terminalMap ;
  var_cas_terminalMap = GGS_terminalMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_terminalDeclarationList::cEnumerator enumerator_7387 (var_cas_lexiqueComponentRoot.reader_mTerminalDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (178)), true) ;
    const GGS_terminalDeclarationList::cElement * operand_7387 = NULL ;
    while (((operand_7387 = enumerator_7387.nextObject ()))) {
      macroValidPointer (operand_7387) ;
      GGS_lexicalTypeList  var_cas_argumentTypeList ;
      var_cas_argumentTypeList = GGS_lexicalTypeList ::constructor_emptyList () ;
      {
        GGS_lstringlist::cEnumerator enumerator_7519 (operand_7387->mSentAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_7519 = NULL ;
        while (((operand_7519 = enumerator_7519.nextObject ()))) {
          macroValidPointer (operand_7519) ;
          GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
          const GGS_lexicalAttributeMap  _temp_7631 = var_cas_lexicalAttributeMap ;
          if (_temp_7631.isBuilt ()) {
            _temp_7631 (HERE)->method_searchKey (inLexique, operand_7519->mValue, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (182)) ;
          }
          var_cas_argumentTypeList._addAssign_operation (var_cas_attributeLexicalType) ;
        }
      }
      var_cas_terminalMap.modifier_insertKey (inLexique, operand_7387->mName, var_cas_argumentTypeList COMMA_SOURCE_FILE_AT_LINE (185)) ;
    }
  }
  {
    GGS_lexicalListDeclarationList::cEnumerator enumerator_7825 (var_cas_lexiqueComponentRoot.reader_mLexicalListDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (187)), true) ;
    const GGS_lexicalListDeclarationList::cElement * operand_7825 = NULL ;
    while (((operand_7825 = enumerator_7825.nextObject ()))) {
      macroValidPointer (operand_7825) ;
      GGS_lexicalTypeList  var_cas_argumentTypeList ;
      var_cas_argumentTypeList = GGS_lexicalTypeList ::constructor_emptyList () ;
      {
        GGS_lstringlist::cEnumerator enumerator_7960 (operand_7825->mSentAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_7960 = NULL ;
        while (((operand_7960 = enumerator_7960.nextObject ()))) {
          macroValidPointer (operand_7960) ;
          GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
          const GGS_lexicalAttributeMap  _temp_8072 = var_cas_lexicalAttributeMap ;
          if (_temp_8072.isBuilt ()) {
            _temp_8072 (HERE)->method_searchKey (inLexique, operand_7960->mValue, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (191)) ;
          }
          var_cas_argumentTypeList._addAssign_operation (var_cas_attributeLexicalType) ;
        }
      }
      {
        GGS_lexicalListEntryList::cEnumerator enumerator_8204 (operand_7825->mEntryList, true) ;
        const GGS_lexicalListEntryList::cElement * operand_8204 = NULL ;
        while (((operand_8204 = enumerator_8204.nextObject ()))) {
          macroValidPointer (operand_8204) ;
          var_cas_terminalMap.modifier_insertKey (inLexique, operand_8204->mTerminalSpelling, var_cas_argumentTypeList COMMA_SOURCE_FILE_AT_LINE (195)) ;
        }
      }
    }
  }
  GGS_lexicalMessageMap  var_cas_lexicalMessageMap ;
  var_cas_lexicalMessageMap = GGS_lexicalMessageMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_lexicalMessageDeclarationList::cEnumerator enumerator_8435 (var_cas_lexiqueComponentRoot.reader_mLexicalMessageDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (200)), true) ;
    const GGS_lexicalMessageDeclarationList::cElement * operand_8435 = NULL ;
    while (((operand_8435 = enumerator_8435.nextObject ()))) {
      macroValidPointer (operand_8435) ;
      var_cas_lexicalMessageMap.modifier_insertKey (inLexique, operand_8435->mMessageName, operand_8435->mMessageValue, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (201)) ;
    }
  }
  {
    GGS_lexicalExplicitRuleList::cEnumerator enumerator_8645 (var_cas_lexiqueComponentRoot.reader_mLexicalExplicitRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (204)), true) ;
    const GGS_lexicalExplicitRuleList::cElement * operand_8645 = NULL ;
    while (((operand_8645 = enumerator_8645.nextObject ()))) {
      macroValidPointer (operand_8645) ;
      {
        GGS_lexicalInstructionList::cEnumerator enumerator_8723 (operand_8645->mInstructionList, true) ;
        const GGS_lexicalInstructionList::cElement * operand_8723 = NULL ;
        while (((operand_8723 = enumerator_8723.nextObject ()))) {
          macroValidPointer (operand_8723) ;
          const GGS_lexicalInstruction  _temp_8770 = operand_8723->mInstruction ;
          if (_temp_8770.isBuilt ()) {
            typeCategoryMethod__lexicalInstruction__checkLexicalInstruction _method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (_temp_8770._galgasObjectRunTimeInfo ()) ;
            if (_method != NULL) {
              _method (inLexique, _temp_8770 (HERE), var_cas_lexicalMessageMap COMMA_SOURCE_FILE_AT_LINE (206)) ;
            }
          }
        }
      }
    }
  }
  inLexique.printMessage (C_String ("LOGGING lexicalMessageMap: ") + var_cas_lexicalMessageMap.reader_description (inLexique COMMA_HERE).string () + "\n" COMMA_SOURCE_FILE_AT_LINE (209)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileLexiqueComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_lexiqueCompilation (void) {
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalStructuredSendInstruction__checkLexicalInstruction, gClassInfoFor__lexicalStructuredSendInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalSimpleSendInstruction__checkLexicalInstruction, gClassInfoFor__lexicalSimpleSendInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalRepeatInstruction__checkLexicalInstruction, gClassInfoFor__lexicalRepeatInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalSelectInstruction__checkLexicalInstruction, gClassInfoFor__lexicalSelectInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalActionInstruction__checkLexicalInstruction, gClassInfoFor__lexicalActionInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalLogInstruction__checkLexicalInstruction, gClassInfoFor__lexicalLogInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalRewindInstruction__checkLexicalInstruction, gClassInfoFor__lexicalRewindInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalDropInstruction__checkLexicalInstruction, gClassInfoFor__lexicalDropInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalTagInstruction__checkLexicalInstruction, gClassInfoFor__lexicalTagInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalErrorInstruction__checkLexicalInstruction, gClassInfoFor__lexicalErrorInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalWarningInstruction__checkLexicalInstruction, gClassInfoFor__lexicalWarningInstruction.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_lexiqueCompilation (prologueRoutineFor_lexiqueCompilation,
                                   NULL) ;

//---------------------------------------------------------------------------*

