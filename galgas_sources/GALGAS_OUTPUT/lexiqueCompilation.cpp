//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'lexiqueCompilation.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      march 16th, 2010, at 20h46'14"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "lexiqueCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "lexiqueCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "lexiqueLL1grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalSendDefaultActionAST.checkLexicalDefaultAction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction> gDispatchTableForMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction (typeCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction
findCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction.count ()) {
    result = gDispatchTableForMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction (superClassPtr) ;
      gDispatchTableForMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalSendTerminalByDefaultAST.checkLexicalDefaultAction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSendTerminalByDefaultAST__checkLexicalDefaultAction (C_Compiler & inLexique,
                                const cPtr_lexicalSendTerminalByDefaultAST * operand_2425,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2425 != NULL) {
    GGS_lexicalSentValueList  automatic_var_2559_0 ;
    const GGS_terminalMap  temp_2533 = var_cas_ioLexiqueAnalysisContext.reader_mTerminalMap (inLexique COMMA_SOURCE_FILE_AT_LINE (44)) ;
    if (temp_2533.isBuilt ()) {
      temp_2533 (HERE)->method_searchKey (inLexique, operand_2425->mDefaultSentTerminal, automatic_var_2559_0 COMMA_SOURCE_FILE_AT_LINE (44)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@lexicalErrorByDefaultAST.checkLexicalDefaultAction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalErrorByDefaultAST__checkLexicalDefaultAction (C_Compiler & inLexique,
                                const cPtr_lexicalErrorByDefaultAST * operand_2722,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2722 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_2838 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_2722->mDefaultErrorMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (52)) ;
    if (NULL != operand_2838) {
      operand_2838->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalExpressionAST.checkLexicalExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression> gDispatchTableForMethod__lexicalExpressionAST__checkLexicalExpression ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalExpressionAST__checkLexicalExpression (typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__lexicalExpressionAST__checkLexicalExpression.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression
findCategoryMethod__lexicalExpressionAST__checkLexicalExpression (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalExpressionAST__checkLexicalExpression.count ()) {
    result = gDispatchTableForMethod__lexicalExpressionAST__checkLexicalExpression (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalExpressionAST__checkLexicalExpression (superClassPtr) ;
      gDispatchTableForMethod__lexicalExpressionAST__checkLexicalExpression.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalOrExpressionAST.checkLexicalExpression'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalOrExpressionAST__checkLexicalExpression (C_Compiler & inLexique,
                                const cPtr_lexicalOrExpressionAST * operand_3438,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3438 != NULL) {
    const GGS_lexicalExpressionAST  temp_3532 = operand_3438->mLeftOperand ;
    if (temp_3532.isBuilt ()) {
      typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression method = findCategoryMethod__lexicalExpressionAST__checkLexicalExpression (temp_3532.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_3532 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (70)) ;
      }
    }
    const GGS_lexicalExpressionAST  temp_3603 = operand_3438->mRightOperand ;
    if (temp_3603.isBuilt ()) {
      typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression method = findCategoryMethod__lexicalExpressionAST__checkLexicalExpression (temp_3603.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_3603 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (71)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalCharacterMatchAST.checkLexicalExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterMatchAST__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalCharacterMatchAST * operand_3792,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3792 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@lexicalCharacterSetMatchAST.checkLexicalExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterSetMatchAST__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalCharacterSetMatchAST * operand_4015,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4015 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCharacterIntervalMatchAST.checkLexicalExpression' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterIntervalMatchAST__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalCharacterIntervalMatchAST * operand_4243,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4243 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalStringMatchAST.checkLexicalExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStringMatchAST__checkLexicalExpression (C_Compiler & inLexique,
                                const cPtr_lexicalStringMatchAST * operand_4460,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4460 != NULL) {
    var_cas_ioLexiqueAnalysisContext.mUnicodeStringToGenerate.addAssign_operation (operand_4460->mString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (100))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalStringNotMatchAST.checkLexicalExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStringNotMatchAST__checkLexicalExpression (C_Compiler & inLexique,
                                const cPtr_lexicalStringNotMatchAST * operand_4749,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4749 != NULL) {
    var_cas_ioLexiqueAnalysisContext.mUnicodeStringToGenerate.addAssign_operation (operand_4749->mString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (108))) ;
    elementOf_GGS_lexicalMessageMap * operand_4934 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_4749->mErrorMessage, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (109)) ;
    if (NULL != operand_4934) {
      operand_4934->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalRoutineOrFunctionFormalInputArgumentAST.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument> gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument (typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument
findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument.count ()) {
    result = gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument (superClassPtr) ;
      gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputArgumentAST.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputArgumentAST__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalAttributeInputArgumentAST * operand_5637,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5637 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  temp_5882 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (131)) ;
    if (temp_5882.isBuilt ()) {
      temp_5882 (HERE)->method_searchKey (inLexique, operand_5637->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (131)) ;
    }
    const GGS_bool cond_6268 = (var_cas_attributeLexicalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType) ;
    if (cond_6268.isBuiltAndTrue ()) {
      operand_5637->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is @")).operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (138)))).operator_concat (GGS_string (" type, but lexical routine prototype requires @"))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (140)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (142)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCharacterInputArgumentAST.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterInputArgumentAST__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCharacterInputArgumentAST * operand_6449,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6449 != NULL) {
    const GGS_bool cond_6881 = (GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType) ;
    if (cond_6881.isBuiltAndTrue ()) {
      operand_6449->mCharacter.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal character has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an @"))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (155)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (157)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalUnsignedInputArgumentAST.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalUnsignedInputArgumentAST__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalUnsignedInputArgumentAST * operand_7061,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7061 != NULL) {
    const GGS_bool cond_7492 = (GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType) ;
    if (cond_7492.isBuiltAndTrue ()) {
      operand_7061->mUnsigned.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal character has @uint")).operator_concat (GGS_string (" type, but lexical routine prototype requires an @"))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (170)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (172)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCurrentCharacterInputArgumentAST.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCurrentCharacterInputArgumentAST__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCurrentCharacterInputArgumentAST * operand_7680,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7680 != NULL) {
    const GGS_bool cond_8115 = (GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType) ;
    if (cond_8115.isBuiltAndTrue ()) {
      operand_7680->mLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, current character value has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an @"))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (185)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (187)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFunctionInputArgumentAST.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFunctionInputArgumentAST__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalFunctionInputArgumentAST * operand_8295,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8295 != NULL) {
    GGS_lexicalFunctionFormalArgumentList  var_cas_lexicalFormalTypeList ;
    GGS_lexicalTypeEnum var_cas_returnedLexicalFormalType ;
    GGS_string var_cas_replacementFunctionName ;
    GGS_bool automatic_var_8758_0 ;
    const GGS_lexicalFunctionMap  temp_8641 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (200)) ;
    if (temp_8641.isBuilt ()) {
      temp_8641 (HERE)->method_searchKey (inLexique, operand_8295->mFunctionName, var_cas_lexicalFormalTypeList, var_cas_returnedLexicalFormalType, var_cas_replacementFunctionName, automatic_var_8758_0 COMMA_SOURCE_FILE_AT_LINE (200)) ;
    }
    const GGS_bool cond_8934 = (var_cas_replacementFunctionName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_8934.isBuiltAndTrue ()) {
      operand_8295->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("obsolete lexical function, replaced by '")).operator_concat (var_cas_replacementFunctionName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (209)) ;
    }
    const GGS_bool cond_9302 = (var_cas_returnedLexicalFormalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType) ;
    if (cond_9302.isBuiltAndTrue ()) {
      operand_8295->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, the function returns an @")).operator_concat (var_cas_returnedLexicalFormalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (214)))).operator_concat (GGS_string (" value, but lexical routine prototype requires an @"))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (216)))).operator_concat (GGS_string (" value")) COMMA_SOURCE_FILE_AT_LINE (218)) ;
    }
    const GGS_bool cond_9664 = (var_cas_lexicalFormalTypeList.reader_length ()).operator_isNotEqual (operand_8295->mFunctionActualArgumentList.reader_length ()) ;
    if (cond_9664.isBuiltAndTrue ()) {
      operand_8295->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical function names ")).operator_concat (operand_8295->mFunctionActualArgumentList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (222)))).operator_concat (GGS_string (" actual argument(s), but the prototype requires "))).operator_concat (var_cas_lexicalFormalTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (224)))).operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (225)) ;
    }
    {
      GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_9754 (var_cas_lexicalFormalTypeList, true) ;
      const GGS_lexicalFunctionFormalArgumentList::cElement * operand_9754 = NULL ;
      GGS_lexicalFunctionCallActualArgumentListAST::cEnumerator enumerator_9783 (operand_8295->mFunctionActualArgumentList, true) ;
      const GGS_lexicalFunctionCallActualArgumentListAST::cElement * operand_9783 = NULL ;
      while (((operand_9754 = enumerator_9754.nextObject ()))
          && ((operand_9783 = enumerator_9783.nextObject ()))) {
        macroValidPointer (operand_9754) ;
        macroValidPointer (operand_9783) ;
        const GGS_lexicalRoutineOrFunctionFormalInputArgumentAST  temp_9852 = operand_9783->mLexicalActualInputArgument ;
        if (temp_9852.isBuilt ()) {
          typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument method = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument (temp_9852.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_9852 (HERE), var_cas_ioLexiqueAnalysisContext, operand_9754->mLexicalType COMMA_SOURCE_FILE_AT_LINE (228)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalRoutineOrFunctionFormalInputArgumentAST.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument> gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument (typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument
findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument.count ()) {
    result = gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument (superClassPtr) ;
      gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputArgumentAST.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputArgumentAST__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalAttributeInputArgumentAST * operand_10560,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10560 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  temp_10805 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (252)) ;
    if (temp_10805.isBuilt ()) {
      temp_10805 (HERE)->method_searchKey (inLexique, operand_10560->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (252)) ;
    }
    const GGS_bool cond_11191 = (var_cas_attributeLexicalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType) ;
    if (cond_11191.isBuiltAndTrue ()) {
      operand_10560->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is @")).operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (259)))).operator_concat (GGS_string (" type, but lexical routine prototype requires @"))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (261)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (263)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCharacterInputArgumentAST.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterInputArgumentAST__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCharacterInputArgumentAST * operand_11371,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11371 != NULL) {
    const GGS_bool cond_11803 = (GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType) ;
    if (cond_11803.isBuiltAndTrue ()) {
      operand_11371->mCharacter.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal character has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an @"))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (276)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (278)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalUnsignedInputArgumentAST.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalUnsignedInputArgumentAST__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalUnsignedInputArgumentAST * operand_11982,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11982 != NULL) {
    const GGS_bool cond_12418 = (GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType) ;
    if (cond_12418.isBuiltAndTrue ()) {
      operand_11982->mUnsigned.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal unsigned value has @uint")).operator_concat (GGS_string (" type, but lexical routine prototype requires an @"))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (291)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (293)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCurrentCharacterInputArgumentAST.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCurrentCharacterInputArgumentAST__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCurrentCharacterInputArgumentAST * operand_12605,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12605 != NULL) {
    const GGS_bool cond_13040 = (GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType) ;
    if (cond_13040.isBuiltAndTrue ()) {
      operand_12605->mLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, current character value has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an @"))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (306)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (308)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFunctionInputArgumentAST.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFunctionInputArgumentAST__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalFunctionInputArgumentAST * operand_13219,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13219 != NULL) {
    GGS_lexicalFunctionFormalArgumentList  var_cas_lexicalFormalTypeList ;
    GGS_lexicalTypeEnum var_cas_returnedLexicalFormalType ;
    GGS_string var_cas_replacementFunctionName ;
    GGS_bool automatic_var_13682_0 ;
    const GGS_lexicalFunctionMap  temp_13565 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (321)) ;
    if (temp_13565.isBuilt ()) {
      temp_13565 (HERE)->method_searchKey (inLexique, operand_13219->mFunctionName, var_cas_lexicalFormalTypeList, var_cas_returnedLexicalFormalType, var_cas_replacementFunctionName, automatic_var_13682_0 COMMA_SOURCE_FILE_AT_LINE (321)) ;
    }
    const GGS_bool cond_13858 = (var_cas_replacementFunctionName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_13858.isBuiltAndTrue ()) {
      operand_13219->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("obsolete lexical function, replaced by '")).operator_concat (var_cas_replacementFunctionName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (330)) ;
    }
    const GGS_bool cond_14226 = (var_cas_returnedLexicalFormalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType) ;
    if (cond_14226.isBuiltAndTrue ()) {
      operand_13219->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, the function returns an @")).operator_concat (var_cas_returnedLexicalFormalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (335)))).operator_concat (GGS_string (" value, but lexical routine prototype requires an @"))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (337)))).operator_concat (GGS_string (" value")) COMMA_SOURCE_FILE_AT_LINE (339)) ;
    }
    const GGS_bool cond_14588 = (var_cas_lexicalFormalTypeList.reader_length ()).operator_isNotEqual (operand_13219->mFunctionActualArgumentList.reader_length ()) ;
    if (cond_14588.isBuiltAndTrue ()) {
      operand_13219->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical function names ")).operator_concat (operand_13219->mFunctionActualArgumentList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (343)))).operator_concat (GGS_string (" actual argument(s), but the prototype requires "))).operator_concat (var_cas_lexicalFormalTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (345)))).operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (346)) ;
    }
    {
      GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_14678 (var_cas_lexicalFormalTypeList, true) ;
      const GGS_lexicalFunctionFormalArgumentList::cElement * operand_14678 = NULL ;
      GGS_lexicalFunctionCallActualArgumentListAST::cEnumerator enumerator_14707 (operand_13219->mFunctionActualArgumentList, true) ;
      const GGS_lexicalFunctionCallActualArgumentListAST::cElement * operand_14707 = NULL ;
      while (((operand_14678 = enumerator_14678.nextObject ()))
          && ((operand_14707 = enumerator_14707.nextObject ()))) {
        macroValidPointer (operand_14678) ;
        macroValidPointer (operand_14707) ;
        const GGS_lexicalRoutineOrFunctionFormalInputArgumentAST  temp_14776 = operand_14707->mLexicalActualInputArgument ;
        if (temp_14776.isBuilt ()) {
          typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument method = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument (temp_14776.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_14776 (HERE), var_cas_ioLexiqueAnalysisContext, operand_14678->mLexicalType COMMA_SOURCE_FILE_AT_LINE (349)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@abstractLexicalRoutineActualArgumentAST.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument> gDispatchTableForMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument (typeCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument
findCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument.count ()) {
    result = gDispatchTableForMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument (superClassPtr) ;
      gDispatchTableForMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputOutputArgumentAST.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputOutputArgumentAST__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalAttributeInputOutputArgumentAST * operand_15552,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalArgumentModeAST  var_cas_inLexicalRoutineFormalArgumentMode,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15552 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  temp_15859 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (375)) ;
    if (temp_15859.isBuilt ()) {
      temp_15859 (HERE)->method_searchKey (inLexique, operand_15552->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (375)) ;
    }
    const GGS_bool cond_16245 = (var_cas_attributeLexicalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType) ;
    if (cond_16245.isBuiltAndTrue ()) {
      operand_15552->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is @")).operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (382)))).operator_concat (GGS_string (" type, but lexical routine prototype requires @"))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (384)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (386)) ;
    }
    const GGS_bool cond_16481 = (var_cas_inLexicalRoutineFormalArgumentMode).operator_isNotEqual (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_HERE)) ;
    if (cond_16481.isBuiltAndTrue ()) {
      operand_15552->mActualPassingModeLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the output mode (!) is required here, not an output/input mode") COMMA_SOURCE_FILE_AT_LINE (390)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFormalInputArgumentAST.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFormalInputArgumentAST__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalFormalInputArgumentAST * operand_16658,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalArgumentModeAST  var_cas_inLexicalRoutineFormalArgumentMode,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16658 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalRoutineOrFunctionFormalInputArgumentAST  temp_16977 = operand_16658->mRoutineOrFunctionFormalInputArgument ;
    if (temp_16977.isBuilt ()) {
      typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument method = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument (temp_16977.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_16977 (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_inLexicalRoutineFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (402)) ;
      }
    }
    const GGS_bool cond_17279 = (var_cas_inLexicalRoutineFormalArgumentMode).operator_isNotEqual (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_HERE)) ;
    if (cond_17279.isBuiltAndTrue ()) {
      operand_16658->mActualPassingModeLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the output/input mode (!\?) is required here, not an input mode") COMMA_SOURCE_FILE_AT_LINE (409)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalInstructionAST.checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction> gDispatchTableForMethod__lexicalInstructionAST__checkLexicalInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction (typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__lexicalInstructionAST__checkLexicalInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction
findCategoryMethod__lexicalInstructionAST__checkLexicalInstruction (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalInstructionAST__checkLexicalInstruction.count ()) {
    result = gDispatchTableForMethod__lexicalInstructionAST__checkLexicalInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalInstructionAST__checkLexicalInstruction (superClassPtr) ;
      gDispatchTableForMethod__lexicalInstructionAST__checkLexicalInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalStructuredSendInstructionAST.checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStructuredSendInstructionAST__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalStructuredSendInstructionAST * operand_17850,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & /* var_cas_ioTagMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17850 != NULL) {
    {
      GGS_lexicalSendSearchListAST::cEnumerator enumerator_17973 (operand_17850->mLexicalSendSearchList, true) ;
      const GGS_lexicalSendSearchListAST::cElement * operand_17973 = NULL ;
      while (((operand_17973 = enumerator_17973.nextObject ()))) {
        macroValidPointer (operand_17973) ;
        elementOf_GGS_lexicalExplicitTokenListMapMap * operand_18034 = (elementOf_GGS_lexicalExplicitTokenListMapMap *) var_cas_ioLexiqueAnalysisContext.mLexicalTokenListMap.searchForWithInstruction (inLexique, operand_17973->mSearchListName, GGS_lexicalExplicitTokenListMapMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (428)) ;
        if (NULL != operand_18034) {
          operand_18034->mInfo.mShouldBeGenerated = GGS_bool (true) ;
        }
        GGS_lexicalTypeEnum automatic_var_18197_0 ;
        const GGS_lexicalAttributeMap  temp_18177 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (431)) ;
        if (temp_18177.isBuilt ()) {
          temp_18177 (HERE)->method_searchKey (inLexique, operand_17973->mAttributeName, automatic_var_18197_0 COMMA_SOURCE_FILE_AT_LINE (431)) ;
        }
      }
    }
    const GGS_lexicalSendDefaultActionAST  temp_18270 = operand_17850->mLexicalSendDefaultAction ;
    if (temp_18270.isBuilt ()) {
      typeCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction method = findCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction (temp_18270.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_18270 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (433)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalSimpleSendInstructionAST.checkLexicalInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSimpleSendInstructionAST__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalSimpleSendInstructionAST * operand_18466,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & /* var_cas_ioTagMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18466 != NULL) {
    GGS_lexicalSentValueList  automatic_var_18628_0 ;
    const GGS_terminalMap  temp_18609 = var_cas_ioLexiqueAnalysisContext.reader_mTerminalMap (inLexique COMMA_SOURCE_FILE_AT_LINE (442)) ;
    if (temp_18609.isBuilt ()) {
      temp_18609 (HERE)->method_searchKey (inLexique, operand_18466->mSentTerminal, automatic_var_18628_0 COMMA_SOURCE_FILE_AT_LINE (442)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@lexicalRepeatInstructionAST.checkLexicalInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRepeatInstructionAST__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalRepeatInstructionAST * operand_18792,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & var_cas_ioTagMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18792 != NULL) {
    {
      GGS_lexicalWhileBranchListAST::cEnumerator enumerator_18909 (operand_18792->mLexicalWhileBranchList, true) ;
      const GGS_lexicalWhileBranchListAST::cElement * operand_18909 = NULL ;
      while (((operand_18909 = enumerator_18909.nextObject ()))) {
        macroValidPointer (operand_18909) ;
        const GGS_lexicalExpressionAST  temp_18957 = operand_18909->mWhileExpression ;
        if (temp_18957.isBuilt ()) {
          typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression method = findCategoryMethod__lexicalExpressionAST__checkLexicalExpression (temp_18957.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_18957 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (452)) ;
          }
        }
        GGS_lexicalTagMap  var_cas_tagMap = GGS_lexicalTagMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTagMap COMMA_HERE) ;
        {
          GGS_lexicalInstructionListAST::cEnumerator enumerator_19082 (operand_18909->mWhileInstructionList, true) ;
          const GGS_lexicalInstructionListAST::cElement * operand_19082 = NULL ;
          while (((operand_19082 = enumerator_19082.nextObject ()))) {
            macroValidPointer (operand_19082) ;
            const GGS_lexicalInstructionAST  temp_19129 = operand_19082->mInstruction ;
            if (temp_19129.isBuilt ()) {
              typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction method = findCategoryMethod__lexicalInstructionAST__checkLexicalInstruction (temp_19129.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, temp_19129 (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_tagMap COMMA_SOURCE_FILE_AT_LINE (455)) ;
              }
            }
          }
        }
      }
    }
    GGS_lexicalTagMap  var_cas_tagMap = GGS_lexicalTagMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTagMap COMMA_HERE) ;
    {
      GGS_lexicalInstructionListAST::cEnumerator enumerator_19296 (operand_18792->mRepeatedInstructionList, true) ;
      const GGS_lexicalInstructionListAST::cElement * operand_19296 = NULL ;
      while (((operand_19296 = enumerator_19296.nextObject ()))) {
        macroValidPointer (operand_19296) ;
        const GGS_lexicalInstructionAST  temp_19341 = operand_19296->mInstruction ;
        if (temp_19341.isBuilt ()) {
          typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction method = findCategoryMethod__lexicalInstructionAST__checkLexicalInstruction (temp_19341.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_19341 (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_tagMap COMMA_SOURCE_FILE_AT_LINE (460)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@lexicalSelectInstructionAST.checkLexicalInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSelectInstructionAST__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalSelectInstructionAST * operand_19558,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & var_cas_ioTagMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19558 != NULL) {
    {
      GGS_lexicalSelectBranchListAST::cEnumerator enumerator_19677 (operand_19558->mLexicalSelectBranchList, true) ;
      const GGS_lexicalSelectBranchListAST::cElement * operand_19677 = NULL ;
      while (((operand_19677 = enumerator_19677.nextObject ()))) {
        macroValidPointer (operand_19677) ;
        const GGS_lexicalExpressionAST  temp_19726 = operand_19677->mSelectExpression ;
        if (temp_19726.isBuilt ()) {
          typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression method = findCategoryMethod__lexicalExpressionAST__checkLexicalExpression (temp_19726.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_19726 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (471)) ;
          }
        }
        GGS_lexicalTagMap  var_cas_tagMap = GGS_lexicalTagMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTagMap COMMA_HERE) ;
        {
          GGS_lexicalInstructionListAST::cEnumerator enumerator_19852 (operand_19677->mSelectInstructionList, true) ;
          const GGS_lexicalInstructionListAST::cElement * operand_19852 = NULL ;
          while (((operand_19852 = enumerator_19852.nextObject ()))) {
            macroValidPointer (operand_19852) ;
            const GGS_lexicalInstructionAST  temp_19899 = operand_19852->mInstruction ;
            if (temp_19899.isBuilt ()) {
              typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction method = findCategoryMethod__lexicalInstructionAST__checkLexicalInstruction (temp_19899.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, temp_19899 (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_tagMap COMMA_SOURCE_FILE_AT_LINE (474)) ;
              }
            }
          }
        }
      }
    }
    GGS_lexicalTagMap  var_cas_tagMap = GGS_lexicalTagMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTagMap COMMA_HERE) ;
    {
      GGS_lexicalInstructionListAST::cEnumerator enumerator_20065 (operand_19558->mDefaultInstructionList, true) ;
      const GGS_lexicalInstructionListAST::cElement * operand_20065 = NULL ;
      while (((operand_20065 = enumerator_20065.nextObject ()))) {
        macroValidPointer (operand_20065) ;
        const GGS_lexicalInstructionAST  temp_20110 = operand_20065->mInstruction ;
        if (temp_20110.isBuilt ()) {
          typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction method = findCategoryMethod__lexicalInstructionAST__checkLexicalInstruction (temp_20110.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_20110 (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_tagMap COMMA_SOURCE_FILE_AT_LINE (479)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@lexicalRoutineInstructionAST.checkLexicalInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRoutineInstructionAST__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalRoutineInstructionAST * operand_20328,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & /* var_cas_ioTagMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20328 != NULL) {
    GGS_lexicalRoutineFormalArgumentList  var_cas_lexicalRoutineFormalArgumentList ;
    GGS_stringlist  var_cas_routineErrorMessageList ;
    GGS_string var_cas_replacementRoutineName ;
    GGS_bool automatic_var_20754_0 ;
    const GGS_lexicalRoutineMap  temp_20630 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalRoutineMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (492)) ;
    if (temp_20630.isBuilt ()) {
      temp_20630 (HERE)->method_searchKey (inLexique, operand_20328->mRoutineName, var_cas_lexicalRoutineFormalArgumentList, var_cas_routineErrorMessageList, var_cas_replacementRoutineName, automatic_var_20754_0 COMMA_SOURCE_FILE_AT_LINE (492)) ;
    }
    const GGS_bool cond_20925 = (var_cas_replacementRoutineName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_20925.isBuiltAndTrue ()) {
      operand_20328->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("obsolete lexical routine, replaced by '")).operator_concat (var_cas_replacementRoutineName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (501)) ;
    }
    const GGS_bool cond_21312 = (var_cas_lexicalRoutineFormalArgumentList.reader_length ()).operator_isNotEqual (operand_20328->mActualArgumentList.reader_length ()) ;
    if (cond_21312.isBuiltAndTrue ()) {
      operand_20328->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical routine call names ")).operator_concat (operand_20328->mActualArgumentList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (506)))).operator_concat (GGS_string (" actual argument(s), but the lexical routine prototype requires "))).operator_concat (var_cas_lexicalRoutineFormalArgumentList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (508)))).operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (509)) ;
    }
    {
      GGS_lexicalRoutineFormalArgumentList::cEnumerator enumerator_21413 (var_cas_lexicalRoutineFormalArgumentList, true) ;
      const GGS_lexicalRoutineFormalArgumentList::cElement * operand_21413 = NULL ;
      GGS_lexicalRoutineCallActualArgumentListAST::cEnumerator enumerator_21434 (operand_20328->mActualArgumentList, true) ;
      const GGS_lexicalRoutineCallActualArgumentListAST::cElement * operand_21434 = NULL ;
      while (((operand_21413 = enumerator_21413.nextObject ()))
          && ((operand_21434 = enumerator_21434.nextObject ()))) {
        macroValidPointer (operand_21413) ;
        macroValidPointer (operand_21434) ;
        const GGS_abstractLexicalRoutineActualArgumentAST  temp_21504 = operand_21434->mLexicalRoutineActualArgument ;
        if (temp_21504.isBuilt ()) {
          typeCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument method = findCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument (temp_21504.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_21504 (HERE), var_cas_ioLexiqueAnalysisContext, operand_21413->mLexicalFormalArgumentMode, operand_21413->mLexicalFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (512)) ;
          }
        }
      }
    }
    const GGS_bool cond_21983 = (var_cas_routineErrorMessageList.reader_length ()).operator_isNotEqual (operand_20328->mErrorMessageList.reader_length ()) ;
    if (cond_21983.isBuiltAndTrue ()) {
      operand_20328->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical routine call names ")).operator_concat (operand_20328->mErrorMessageList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (521)))).operator_concat (GGS_string (" error message(s), but the lexical routine prototype requires "))).operator_concat (var_cas_routineErrorMessageList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (523)))).operator_concat (GGS_string (" error message(s)")) COMMA_SOURCE_FILE_AT_LINE (524)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_22063 (operand_20328->mErrorMessageList, true) ;
      const GGS_lstringlist::cElement * operand_22063 = NULL ;
      while (((operand_22063 = enumerator_22063.nextObject ()))) {
        macroValidPointer (operand_22063) ;
        elementOf_GGS_lexicalMessageMap * operand_22129 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_22063->mValue, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (527)) ;
        if (NULL != operand_22129) {
          operand_22129->mInfo.mMessageIsUsed = GGS_bool (true) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalLogInstructionAST.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalLogInstructionAST__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalLogInstructionAST * operand_22375,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTagMap  & /* var_cas_ioTagMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22375 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@lexicalRewindInstructionAST.checkLexicalInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRewindInstructionAST__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalRewindInstructionAST * operand_22634,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & var_cas_ioTagMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22634 != NULL) {
    const GGS_lexicalTagMap  temp_22739 = var_cas_ioTagMap ;
    if (temp_22739.isBuilt ()) {
      temp_22739 (HERE)->method_searchKey (inLexique, operand_22634->mLexicalTagName COMMA_SOURCE_FILE_AT_LINE (547)) ;
    }
    GGS_lexicalSentValueList  automatic_var_22831_0 ;
    const GGS_terminalMap  temp_22812 = var_cas_ioLexiqueAnalysisContext.reader_mTerminalMap (inLexique COMMA_SOURCE_FILE_AT_LINE (548)) ;
    if (temp_22812.isBuilt ()) {
      temp_22812 (HERE)->method_searchKey (inLexique, operand_22634->mTerminalName, automatic_var_22831_0 COMMA_SOURCE_FILE_AT_LINE (548)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalDropInstructionAST.checkLexicalInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalDropInstructionAST__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalDropInstructionAST * operand_22993,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & /* var_cas_ioTagMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22993 != NULL) {
    GGS_lexicalSentValueList  automatic_var_23156_0 ;
    const GGS_terminalMap  temp_23137 = var_cas_ioLexiqueAnalysisContext.reader_mTerminalMap (inLexique COMMA_SOURCE_FILE_AT_LINE (557)) ;
    if (temp_23137.isBuilt ()) {
      temp_23137 (HERE)->method_searchKey (inLexique, operand_22993->mTerminalName, automatic_var_23156_0 COMMA_SOURCE_FILE_AT_LINE (557)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalTagInstructionAST.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalTagInstructionAST__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalTagInstructionAST * operand_23317,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTagMap  & var_cas_ioTagMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23317 != NULL) {
    var_cas_ioTagMap.modifier_insertKey (inLexique, operand_23317->mLexicalTagName COMMA_SOURCE_FILE_AT_LINE (566)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@lexicalErrorInstructionAST.checkLexicalInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalErrorInstructionAST__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalErrorInstructionAST * operand_23612,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & /* var_cas_ioTagMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23612 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_23756 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_23612->mErrorMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (575)) ;
    if (NULL != operand_23756) {
      operand_23756->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@lexicalWarningInstructionAST.checkLexicalInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalWarningInstructionAST__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalWarningInstructionAST * operand_23993,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & /* var_cas_ioTagMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23993 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_24137 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_23993->mWarningMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (586)) ;
    if (NULL != operand_24137) {
      operand_24137->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@abstractLexicalRuleAST.checkLexicalRule'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__abstractLexicalRuleAST__checkLexicalRule> gDispatchTableForMethod__abstractLexicalRuleAST__checkLexicalRule ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__abstractLexicalRuleAST__checkLexicalRule (typeCategoryMethod__abstractLexicalRuleAST__checkLexicalRule inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__abstractLexicalRuleAST__checkLexicalRule.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__abstractLexicalRuleAST__checkLexicalRule
findCategoryMethod__abstractLexicalRuleAST__checkLexicalRule (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__abstractLexicalRuleAST__checkLexicalRule result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__abstractLexicalRuleAST__checkLexicalRule.count ()) {
    result = gDispatchTableForMethod__abstractLexicalRuleAST__checkLexicalRule (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__abstractLexicalRuleAST__checkLexicalRule (superClassPtr) ;
      gDispatchTableForMethod__abstractLexicalRuleAST__checkLexicalRule.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@lexicalImplicitRuleAST.checkLexicalRule'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalImplicitRuleAST__checkLexicalRule (C_Compiler & inLexique,
                                const cPtr_lexicalImplicitRuleAST * operand_24711,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24711 != NULL) {
    GGS_lexicalExplicitTokenListMap  automatic_var_24848_0 ;
    GGS_tokenSortedlist  automatic_var_24848_1 ;
    GGS_bool automatic_var_24848_2 ;
    const GGS_lexicalExplicitTokenListMapMap  temp_24827 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalTokenListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (604)) ;
    if (temp_24827.isBuilt ()) {
      temp_24827 (HERE)->method_searchKey (inLexique, operand_24711->mListName, automatic_var_24848_0, automatic_var_24848_1, automatic_var_24848_2 COMMA_SOURCE_FILE_AT_LINE (604)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@lexicalExplicitRuleAST.checkLexicalRule'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalExplicitRuleAST__checkLexicalRule (C_Compiler & inLexique,
                                const cPtr_lexicalExplicitRuleAST * operand_25000,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25000 != NULL) {
    const GGS_lexicalExpressionAST  temp_25104 = operand_25000->mLexicalRuleExpression ;
    if (temp_25104.isBuilt ()) {
      typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression method = findCategoryMethod__lexicalExpressionAST__checkLexicalExpression (temp_25104.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_25104 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (612)) ;
      }
    }
    GGS_lexicalTagMap  var_cas_tagMap = GGS_lexicalTagMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
    {
      GGS_lexicalInstructionListAST::cEnumerator enumerator_25198 (operand_25000->mInstructionList, true) ;
      const GGS_lexicalInstructionListAST::cElement * operand_25198 = NULL ;
      while (((operand_25198 = enumerator_25198.nextObject ()))) {
        macroValidPointer (operand_25198) ;
        const GGS_lexicalInstructionAST  temp_25243 = operand_25198->mInstruction ;
        if (temp_25243.isBuilt ()) {
          typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction method = findCategoryMethod__lexicalInstructionAST__checkLexicalInstruction (temp_25243.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_25243 (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_tagMap COMMA_SOURCE_FILE_AT_LINE (615)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of wrapper 'lexiqueGenerationTemplates'           *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_lexiqueGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_lexiqueGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_lexiqueGenerationTemplates (
  "",
  0,
  gWrapperAllFiles_lexiqueGenerationTemplates_0,
  0,
  gWrapperAllDirectories_lexiqueGenerationTemplates_0
) ;

//---------------------------------------------------------------------------*
//                                                                           *
//    'headerZone2' template of 'lexiqueGenerationTemplates' filewrapper     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_headerZone2 (C_Compiler & inLexique,
                                const GGS_string& var_cas_LEXIQUE_IDENTIFIER,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT,
                                const GGS_lexiqueComponentAST & var_cas_LEXIQUE_COMPONENT_ROOT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_IDENTIFIER.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt ()
    && var_cas_LEXIQUE_COMPONENT_ROOT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "#ifndef " ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "_0_DEFINED\n"
      "#define " ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "_0_DEFINED\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"galgas/GGS_lstring.h\"\n"
      "#include \"galgas/GGS_luint.h\"\n"
      "#include \"galgas/GGS_lsint.h\"\n"
      "#include \"galgas/GGS_luint64.h\"\n"
      "#include \"galgas/GGS_lsint64.h\"\n"
      "#include \"galgas/GGS_lchar.h\"\n"
      "#include \"galgas/GGS_ldouble.h\"\n"
      "#include \"galgas/GGS_lbool.h\"\n"
      "#include \"galgas-utilities/C_Lexique.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"galgas2/predefined-types.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                    E X T E R N    R O U T I N E S                         *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalRoutineMap::cEnumerator enumerator_1031 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalRoutineMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (27)), true) ;
    const GGS_lexicalRoutineMap::cElement * operand_1031 = NULL ;
    while (((operand_1031 = enumerator_1031.nextObject ()))) {
      macroValidPointer (operand_1031) ;
      if (operand_1031->mInfo.mIsExtern.boolValue ()) {
        result << "\n"
          "void scanner_routine_" ;
        result << operand_1031->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (29)) ;
        result << " (C_Lexique & inLexique" ;
        GGS_lexicalRoutineFormalArgumentList::cEnumerator enumerator_1174 (operand_1031->mInfo.mLexicalRoutineFormalArgumentList, true) ;
        const GGS_lexicalRoutineFormalArgumentList::cElement * operand_1174 = NULL ;
        while (((operand_1174 = enumerator_1174.nextObject ()))) {
          macroValidPointer (operand_1174) ;
          result << ",\n"
            "                " ;
          result << operand_1174->mLexicalFormalArgumentMode.reader_cppConstInFormalArgument (inLexique COMMA_SOURCE_FILE_AT_LINE (31)) ;
          result << operand_1174->mLexicalFormalArgumentType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (32)) ;
          result << operand_1174->mLexicalFormalArgumentMode.reader_cppReferenceInFormalArgument (inLexique COMMA_SOURCE_FILE_AT_LINE (33)) ;
          result << " " ;
          result << operand_1174->mArgumentNameForComment ;
        }
        GGS_stringlist::cEnumerator enumerator_1527 (operand_1031->mInfo.mErrorMessageList, true) ;
        const GGS_stringlist::cElement * operand_1527 = NULL ;
        while (((operand_1527 = enumerator_1527.nextObject ()))) {
          macroValidPointer (operand_1527) ;
          result << ",\n"
            "                const char * " ;
          result << operand_1527->mValue ;
        }
        result << ") ;\n" ;
      }else {
      }
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                    E X T E R N    F U N C T I O N S                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalFunctionMap::cEnumerator enumerator_2093 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (49)), true) ;
    const GGS_lexicalFunctionMap::cElement * operand_2093 = NULL ;
    while (((operand_2093 = enumerator_2093.nextObject ()))) {
      macroValidPointer (operand_2093) ;
      if (operand_2093->mInfo.mIsExtern.boolValue ()) {
        result << "\n" ;
        result << operand_2093->mInfo.mReturnedLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (51)) ;
        result << " scanner_function_" ;
        result << operand_2093->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (51)) ;
        result << " (C_Lexique & inLexique" ;
        GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_2253 (operand_2093->mInfo.mLexicalTypeList, true) ;
        const GGS_lexicalFunctionFormalArgumentList::cElement * operand_2253 = NULL ;
        while (((operand_2253 = enumerator_2253.nextObject ()))) {
          macroValidPointer (operand_2253) ;
          result << ",\n"
            "                const " ;
          result << operand_2253->mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (53)) ;
          result << " " ;
          result << operand_2253->mArgumentNameForComment ;
        }
        result << ") ;\n" ;
      }else {
      }
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                       T O K E N    C L A S S                              *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " : public cToken {\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_2917 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (67)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_2917 = NULL ;
    while (((operand_2917 = enumerator_2917.nextObject ()))) {
      macroValidPointer (operand_2917) ;
      result << "  public : " ;
      result << operand_2917->mInfo.mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (68)) ;
      result << " mLexicalAttribute_" ;
      result << operand_2917->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " ;\n" ;
    }
    result << "\n"
      "  public : cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " (void) ;\n"
      "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                     S C A N N E R    C L A S S                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " : public C_Lexique {\n"
      "//--- Constructors\n"
      "  public : C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                       const C_String & inDependencyFileExtension,\n"
      "                       const C_String & inDependencyFilePath,\n"
      "                       C_galgas_io * inParametersPtr,\n"
      "                       const C_String & inSourceFileName\n"
      "                       COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "  public : C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                       C_galgas_io * inParametersPtr,\n"
      "                       const C_String & inSourceString,\n"
      "                       const C_String & inStringForError\n"
      "                       COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "//--- Declaring a protected virtual destructor enables the compiler to raise\n"
      "//    an error if a direct delete is performed; only the static method\n"
      "//    C_GGS_Object::detachPointer may invoke delete.\n"
      "  #ifndef DO_NOT_GENERATE_CHECKINGS\n"
      "    protected : virtual ~ C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " (void) {}\n"
      "  #endif\n" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (101)).reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << "\n"
        "//--- Scanner mode for template scanner\n"
        "  private : PMSInt32 mMatchedTemplateDelimiterIndex ;\n" ;
    }else {
    }
    result << "\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    'headerZone3' template of 'lexiqueGenerationTemplates' filewrapper     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_headerZone3 (C_Compiler & inLexique,
                                const GGS_string& var_cas_LEXIQUE_IDENTIFIER,
                                const GGS_lexicalListDeclarationListAST & var_cas_DELIMITOR_LIST_LIST,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_IDENTIFIER.isBuilt ()
    && var_cas_DELIMITOR_LIST_LIST.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//--- Terminal symbols enumeration\n"
      "  public : enum {kToken_" ;
    GGS_terminalList::cEnumerator enumerator_116 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (4)), true) ;
    const GGS_terminalList::cElement * operand_116 = NULL ;
    while (((operand_116 = enumerator_116.nextObject ()))) {
      macroValidPointer (operand_116) ;
      result << ",\n"
        "   kToken_" ;
      result << operand_116->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5)).reader_identifierRepresentation () ;
    }
    result << "} ;\n" ;
    GGS_lexicalListDeclarationListAST::cEnumerator enumerator_247 (var_cas_DELIMITOR_LIST_LIST, true) ;
    const GGS_lexicalListDeclarationListAST::cElement * operand_247 = NULL ;
    while (((operand_247 = enumerator_247.nextObject ()))) {
      macroValidPointer (operand_247) ;
      result << "\n"
        "//--- Key words table '" ;
      result << operand_247->mName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (10)) ;
      result << "'\n"
        "  public : static PMSInt16 search_into_" ;
      result << operand_247->mName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (11)) ;
      result << " (const C_String & inSearchedString) ;\n" ;
    }
    result << "  \n"
      "\n"
      "//--- Assign from attribute (v1)\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_517 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (17)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_517 = NULL ;
    while (((operand_517 = enumerator_517.nextObject ()))) {
      macroValidPointer (operand_517) ;
      result << "  public : void assignFromAttribute_" ;
      result << operand_517->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " (GGS_l" ;
      result << operand_517->mInfo.mLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (18)) ;
      result << " & outValue) const ;\n" ;
    }
    result << "\n"
      "\n"
      "//--- Assign from attribute (v2)\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_772 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (24)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_772 = NULL ;
    while (((operand_772 = enumerator_772.nextObject ()))) {
      macroValidPointer (operand_772) ;
      result << "  public : GALGAS_l" ;
      result << operand_772->mInfo.mLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (25)).reader_identifierRepresentation () ;
      result << " * synthetizedAttribute_" ;
      result << operand_772->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " (void) const ;\n" ;
    }
    result << "\n"
      "\n"
      "//--- Attribute access\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_1039 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (31)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_1039 = NULL ;
    while (((operand_1039 = enumerator_1039.nextObject ()))) {
      macroValidPointer (operand_1039) ;
      result << "  public : " ;
      result << operand_1039->mInfo.mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (32)) ;
      result << " attributeValue_" ;
      result << operand_1039->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " (void) const ;\n" ;
    }
    result << "\n"
      "\n"
      "//--- Parse lexical token\n"
      "  protected : virtual bool parseLexicalToken (void) ;\n"
      "\n"
      "//--- Append terminal message\n"
      "  protected : virtual void appendTerminalMessageToSyntaxErrorMessage (const PMSInt16 numeroTerminal,\n"
      "                                                              C_String & messageErreur) ;\n"
      "\n"
      "//--- Get terminal count\n"
      "  public : virtual PMSInt16 terminalVocabularyCount (void) const { return " ;
    result << var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (44)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (44)) ;
    result << " ; }\n"
      "\n"
      "//--- Get Token String\n"
      "  public : virtual C_String getCurrentTokenString (const cToken * inTokenPtr) const ;\n"
      "\n"
      "//--- Enter Token\n"
      "  protected : void enterToken (const cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " & inToken) ;\n"
      "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#endif\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'implementationZone2' template of 'lexiqueGenerationTemplates' filewrapper *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_implementationZone2 (C_Compiler & inLexique,
                                const GGS_string& var_cas_LEXIQUE_IDENTIFIER,
                                const GGS_lexicalAttributeMap & var_cas_LEXICAL_ATTRIBUTE_MAP,
                                const GGS_lexicalMessageMap & var_cas_LEXICAL_MESSAGE_MAP,
                                const GGS_terminalList & var_cas_TERMINAL_LIST,
                                const GGS_lexicalExplicitTokenListMapMap & var_cas_LEXICAL_TOKEN_LIST_MAP,
                                const GGS_stringset & var_cas_STRINGS_IN_EXPLICIT_RULES,
                                const GGS_lexicalRuleListAST & var_cas_LEXICAL_RULE_LIST,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT,
                                const GGS_lexiqueComponentAST & var_cas_LEXIQUE_COMPONENT_ROOT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_IDENTIFIER.isBuilt ()
    && var_cas_LEXICAL_ATTRIBUTE_MAP.isBuilt ()
    && var_cas_LEXICAL_MESSAGE_MAP.isBuilt ()
    && var_cas_TERMINAL_LIST.isBuilt ()
    && var_cas_LEXICAL_TOKEN_LIST_MAP.isBuilt ()
    && var_cas_STRINGS_IN_EXPLICIT_RULES.isBuilt ()
    && var_cas_LEXICAL_RULE_LIST.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt ()
    && var_cas_LEXIQUE_COMPONENT_ROOT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"version_libpm.h\"\n"
      "#if LIBPM_VERSION != THE_LIBPM_VERSION\n"
      "  #error \"This file has been compiled with a version of GALGAS different than the version of libpm\"\n"
      "#endif\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include <ctype.h>\n"
      "#include <string.h>\n"
      "\n"
      "#include \"utilities/MF_MemoryControl.h\"\n"
      "#include \"" ;
    result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexiqueComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (15)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (15)) ;
    result << ".h\"\n"
      "\n"
      "#include \"strings/unicode_character_cpp.h\"\n"
      "#include \"galgas/scanner_actions.h\"\n"
      "#ifndef DO_NOT_GENERATE_CHECKINGS\n"
      "  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFileName ().cString (HERE), lineNumber ()\n"
      "  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE\n"
      "#else\n"
      "  #define LINE_AND_SOURCE_FILE\n"
      "  #define COMMA_LINE_AND_SOURCE_FILE\n"
      "#endif\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                               Constructors                                *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "::cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " (void)" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_1345 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_1345 = NULL ;
    if (enumerator_1345.hasCurrentObject ()) {
      result << " :\n" ;
      while (((operand_1345 = enumerator_1345.nextObject ()))) {
        macroValidPointer (operand_1345) ;
        result << "mLexicalAttribute_" ;
        result << operand_1345->mKey.ggs_string ().reader_identifierRepresentation () ;
        result << " ()" ;
        if (enumerator_1345.hasNextObject ()) {
          result << ",\n" ;
        }
      }
    }
    result << " {\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "::C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                const C_String & inDependencyFileExtension,\n"
      "                const C_String & inDependencyFilePath,\n"
      "                C_galgas_io * inParametersPtr,\n"
      "                const C_String & inSourceFileName\n"
      "                COMMA_LOCATION_ARGS) :\n"
      "C_Lexique (inCallerCompiler, inDependencyFileExtension, inDependencyFilePath, inParametersPtr, inSourceFileName COMMA_THERE)" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (51)).reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << ",\n"
        "mMatchedTemplateDelimiterIndex (-1)" ;
    }else {
    }
    result << " {\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "::C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                C_galgas_io * inParametersPtr,\n"
      "                const C_String & inSourceString,\n"
      "                const C_String & inStringForError\n"
      "                COMMA_LOCATION_ARGS) :\n"
      "C_Lexique (inCallerCompiler, inParametersPtr, inSourceString, inStringForError COMMA_THERE)" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (65)).reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << ",\n"
        "mMatchedTemplateDelimiterIndex (-1)" ;
    }else {
    }
    result << " {\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                        Lexical error message list                         *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalMessageMap::cEnumerator enumerator_3154 (var_cas_LEXICAL_MESSAGE_MAP, true) ;
    const GGS_lexicalMessageMap::cElement * operand_3154 = NULL ;
    while (((operand_3154 = enumerator_3154.nextObject ()))) {
      macroValidPointer (operand_3154) ;
      result << "\n"
        "static const utf32 gLexicalMessage_" ;
      result << operand_3154->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (78)) ;
      result << " [] = " ;
      result << operand_3154->mInfo.mLexicalMessage.ggs_string ().reader_utf32Representation () ;
      result << " ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//          Syntax error messages, for every terminal symbol                 *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_terminalList::cEnumerator enumerator_3703 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_3703 = NULL ;
    while (((operand_3703 = enumerator_3703.nextObject ()))) {
      macroValidPointer (operand_3703) ;
      result << "\n"
        "//--- Syntax error message for terminal '$" ;
      result << operand_3703->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (88)) ;
      result << "$' :\n"
        "static const utf32 gSyntaxErrorMessage_" ;
      result << operand_3703->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (89)).reader_identifierRepresentation () ;
      result << " [] = " ;
      result << operand_3703->mSyntaxErrorMessage.reader_utf32Representation () ;
      result << " ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                appendTerminalMessageToSyntaxErrorMessage                  *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "void C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "::appendTerminalMessageToSyntaxErrorMessage (const PMSInt16 inTerminalIndex,\n"
      "                                           C_String & outSyntaxErrorMessage) {\n"
      "  static const utf32 * syntaxErrorMessageArray [" ;
    result << var_cas_TERMINAL_LIST.reader_length ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (100)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (100)) ;
    result << "] = {kEndOfSourceLexicalErrorMessage" ;
    GGS_terminalList::cEnumerator enumerator_4690 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_4690 = NULL ;
    while (((operand_4690 = enumerator_4690.nextObject ()))) {
      macroValidPointer (operand_4690) ;
      result << ",\n"
        "    gSyntaxErrorMessage_" ;
      result << operand_4690->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (102)).reader_identifierRepresentation () ;
    }
    result << "} ;\n"
      "  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                      U N I C O D E    S T R I N G S                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_stringset::cEnumerator enumerator_5302 (var_cas_STRINGS_IN_EXPLICIT_RULES, true) ;
    while (enumerator_5302.hasCurrentObject ()) {
      result << "\n"
        "//--- Unicode string for '$" ;
      result << enumerator_5302._key (HERE).reader_identifierRepresentation () ;
      result << "$'\n"
        "static const utf32 kUnicodeString_" ;
      result << enumerator_5302._key (HERE).reader_identifierRepresentation () ;
      result << " [] = " ;
      result << enumerator_5302._key (HERE).reader_utf32Representation () ;
      result << " ;\n" ;
      enumerator_5302.next () ;
    }
    result << "\n" ;
    GGS_lexicalExplicitTokenListMapMap::cEnumerator enumerator_5562 (var_cas_LEXICAL_TOKEN_LIST_MAP, true) ;
    const GGS_lexicalExplicitTokenListMapMap::cElement * operand_5562 = NULL ;
    while (((operand_5562 = enumerator_5562.nextObject ()))) {
      macroValidPointer (operand_5562) ;
      result << "//---------------------------------------------------------------------------*\n"
        "//                                                                           *\n"
        "//             Key words table '" ;
      result << operand_5562->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (123)) ;
      result << "'                            *\n"
        "//                                                                           *\n"
        "//---------------------------------------------------------------------------*\n"
        "\n"
        "static const PMSInt32 ktable_size_" ;
      result << operand_5562->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (126)) ;
      result << " = " ;
      result << operand_5562->mInfo.mExplicitTokenListMap.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (126)) ;
      result << " ;\n"
        "\n"
        "static const C_unicode_lexique_table_entry ktable_for_" ;
      result << operand_5562->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (127)) ;
      result << " [ktable_size_" ;
      result << operand_5562->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (127)) ;
      result << "] = {\n" ;
      GGS_tokenSortedlist::cEnumerator enumerator_6316 (operand_5562->mInfo.mTokenSortedList, true) ;
      const GGS_tokenSortedlist::cElement * operand_6316 = NULL ;
      while (((operand_6316 = enumerator_6316.nextObject ()))) {
        macroValidPointer (operand_6316) ;
        result << "  C_unicode_lexique_table_entry (kUnicodeString_" ;
        result << operand_6316->mName.reader_identifierRepresentation () ;
        result << ", " ;
        result << operand_6316->mLength.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (129)) ;
        result << ", C_Lexique_" ;
        result << var_cas_LEXIQUE_IDENTIFIER ;
        result << "::kToken_" ;
        result << operand_6316->mTerminalName.reader_identifierRepresentation () ;
        result << ")" ;
        if (enumerator_6316.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n"
        "\n"
        "PMSInt16 C_Lexique_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << "::search_into_" ;
      result << operand_5562->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (133)) ;
      result << " (const C_String & inSearchedString) {\n"
        "  return searchInList (inSearchedString, ktable_for_" ;
      result << operand_5562->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (134)) ;
      result << ", ktable_size_" ;
      result << operand_5562->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (134)) ;
      result << ") ;\n"
        "}\n"
        "\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                          getCurrentTokenString                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "C_String C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "::getCurrentTokenString (const cToken * inTokenPtr) const {\n"
      "  const cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " * ptr = (const cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " *) inTokenPtr ;\n"
      "  C_String s ;\n"
      "  if (ptr == NULL) {\n"
      "    s.appendCString(\"$$\") ;\n"
      "  }else{\n"
      "    switch (ptr->mTokenCode) {\n"
      "    case kToken_:\n"
      "      s.appendCString(\"$$\") ;\n"
      "      break ;\n" ;
    GGS_terminalList::cEnumerator enumerator_7636 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_7636 = NULL ;
    while (((operand_7636 = enumerator_7636.nextObject ()))) {
      macroValidPointer (operand_7636) ;
      result << "    case kToken_" ;
      result << operand_7636->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (155)).reader_identifierRepresentation () ;
      result << ":\n"
        "      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;\n"
        "      s.appendCString (" ;
      result << operand_7636->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (157)).reader_utf8Representation () ;
      result << ") ;\n"
        "      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;\n" ;
      GGS_lexicalSentValueList::cEnumerator enumerator_7966 (operand_7636->mSentAttributeList, true) ;
      const GGS_lexicalSentValueList::cElement * operand_7966 = NULL ;
      while (((operand_7966 = enumerator_7966.nextObject ()))) {
        macroValidPointer (operand_7966) ;
        result << "      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;\n"
          "      s." ;
        result << operand_7966->mLexicalType.reader_appendMethodName (inLexique COMMA_SOURCE_FILE_AT_LINE (161)) ;
        result << " (ptr->mLexicalAttribute_" ;
        result << operand_7966->mAttributeName.reader_identifierRepresentation () ;
        result << operand_7966->mLexicalType.reader_appendArgumentOfMethod (inLexique COMMA_SOURCE_FILE_AT_LINE (161)) ;
        result << ") ;\n" ;
      }
      result << "      break ;\n" ;
    }
    result << "    default:\n"
      "      break ;\n"
      "    }\n"
      "  }\n"
      "  return s ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                           Template Delimiters                             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_templateDelimitorList::cEnumerator enumerator_8770 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (178)), true) ;
    const GGS_templateDelimitorList::cElement * operand_8770 = NULL ;
    if (enumerator_8770.hasCurrentObject ()) {
      result << "static const cTemplateDelimiter kTemplateDefinitionArray [" ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (179)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (179)) ;
      result << "] = {\n" ;
      while (((operand_8770 = enumerator_8770.nextObject ()))) {
        macroValidPointer (operand_8770) ;
        result << "  cTemplateDelimiter (kUnicodeString_" ;
        result << operand_8770->mStartString.ggs_string ().reader_identifierRepresentation () ;
        result << ", " ;
        result << operand_8770->mStartString.ggs_string ().reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (180)) ;
        result << ", " ;
        if ((operand_8770->mEndString.ggs_string ().reader_length ()).operator_isEqual (GGS_uint (0U)).boolValue ()) {
          result << "NULL, 0," ;
        }else {
          result << "kUnicodeString_" ;
          result << operand_8770->mEndString.ggs_string ().reader_identifierRepresentation () ;
          result << ", " ;
          result << operand_8770->mEndString.ggs_string ().reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (184)) ;
          result << "," ;
        }
        result << " NULL, " ;
        result << (operand_8770->mPreservesStartDelimiter).operator_not ().reader_cString (inLexique COMMA_SOURCE_FILE_AT_LINE (187)) ;
        result << ")" ;
        if (enumerator_8770.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                           Template Replacements                           *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_templateReplacementListAST::cEnumerator enumerator_9807 (var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (199)), true) ;
    const GGS_templateReplacementListAST::cElement * operand_9807 = NULL ;
    if (enumerator_9807.hasCurrentObject ()) {
      result << "static const cTemplateDelimiter kTemplateReplacementArray [" ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (200)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (200)) ;
      result << "] = {\n" ;
      while (((operand_9807 = enumerator_9807.nextObject ()))) {
        macroValidPointer (operand_9807) ;
        result << "  cTemplateDelimiter (kUnicodeString_" ;
        result << operand_9807->mMatchString.ggs_string ().reader_identifierRepresentation () ;
        result << ", " ;
        result << operand_9807->mMatchString.ggs_string ().reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (202)) ;
        result << ", kUnicodeString_" ;
        result << operand_9807->mReplacementString.ggs_string ().reader_identifierRepresentation () ;
        result << ", " ;
        result << operand_9807->mReplacementString.ggs_string ().reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ;
        result << ", " ;
        if ((operand_9807->mReplacementFunction.ggs_string ().reader_length ()).operator_isEqual (GGS_uint (0U)).boolValue ()) {
          result << "NULL" ;
        }else {
          result << "scanner_routine_" ;
          result << operand_9807->mReplacementFunction.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (207)) ;
        }
        result << ", true)" ;
        if (enumerator_9807.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//            Terminal Symbols as end of script in template mark             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_terminalList::cEnumerator enumerator_10866 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (220)), true) ;
    const GGS_terminalList::cElement * operand_10866 = NULL ;
    if (enumerator_10866.hasCurrentObject ()) {
      result << "static const bool kEndOfScriptInTemplateArray [" ;
      result << var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (221)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (221)) ;
      result << "] = {\n" ;
      while (((operand_10866 = enumerator_10866.nextObject ()))) {
        macroValidPointer (operand_10866) ;
        result << "  " ;
        result << operand_10866->mIsEndOfTemplateMark.reader_cString (inLexique COMMA_SOURCE_FILE_AT_LINE (222)) ;
        result << " /* " ;
        result << operand_10866->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (222)) ;
        result << " */" ;
        if (enumerator_10866.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//               P A R S E    L E X I C A L    T O K E N                     *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "bool C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "::parseLexicalToken (void) {\n"
      "  cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " token ;\n"
      "  mLoop = true ;\n"
      "  token.mTokenCode = -1 ;\n"
      "  while ((token.mTokenCode < 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (240)).reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << "    if ((mMatchedTemplateDelimiterIndex >= 0)\n"
        "     && (kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength > 0)\n"
        "     && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n"
        "      const bool foundEndDelimitor = testForInputUTF32String (kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndString,\n"
        "                                                              kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength,\n"
        "                                                              true) ;\n"
        "      if (foundEndDelimitor) {\n"
        "        mMatchedTemplateDelimiterIndex = -1 ;\n"
        "      }\n"
        "    }\n"
        "    while ((mMatchedTemplateDelimiterIndex < 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n"
        "      PMSInt32 replacementIndex = 0 ;\n"
        "      while (replacementIndex >= 0) {\n"
        "        replacementIndex = findTemplateDelimiterIndex (kTemplateReplacementArray, " ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (254)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (254)) ;
      result << ") ;\n"
        "        if (replacementIndex >= 0) {\n"
        "          if (kTemplateReplacementArray [replacementIndex].mReplacementFunction == NULL) {\n"
        "            token.mTemplateStringBeforeToken << kTemplateReplacementArray [replacementIndex].mEndString ;\n"
        "          }else{\n"
        "            C_String s ;\n"
        "            while (notTestForInputUTF32String (kTemplateReplacementArray [replacementIndex].mEndString,\n"
        "                                               kTemplateReplacementArray [replacementIndex].mEndStringLength,\n"
        "                                               kEndOfSourceLexicalErrorMessage\n"
        "                                               COMMA_HERE)) {\n"
        "              s.appendUnicodeCharacter (previousChar () COMMA_HERE) ;\n"
        "            }\n"
        "            kTemplateReplacementArray [replacementIndex].mReplacementFunction (*this, s, token.mTemplateStringBeforeToken) ;\n"
        "          }\n"
        "        }\n"
        "      }\n"
        "      mMatchedTemplateDelimiterIndex = findTemplateDelimiterIndex (kTemplateDefinitionArray, " ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (270)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (270)) ;
      result << ") ;\n"
        "      if (mMatchedTemplateDelimiterIndex < 0) {\n"
        "        token.mTemplateStringBeforeToken.appendUnicodeCharacter (mCurrentChar COMMA_HERE) ;\n"
        "        advance () ;\n"
        "      }\n"
        "    }\n"
        "    if ((mMatchedTemplateDelimiterIndex >= 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n" ;
      GGS_lexicalAttributeMap::cEnumerator enumerator_14091 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
      const GGS_lexicalAttributeMap::cElement * operand_14091 = NULL ;
      while (((operand_14091 = enumerator_14091.nextObject ()))) {
        macroValidPointer (operand_14091) ;
        result << "    token.mLexicalAttribute_" ;
        result << operand_14091->mKey.ggs_string ().reader_identifierRepresentation () ;
        result << operand_14091->mInfo.mLexicalType.reader_initialization (inLexique COMMA_SOURCE_FILE_AT_LINE (278)) ;
        result << " ;\n" ;
      }
      result << "    mTokenFirstLocation = mCurrentLocation ;\n"
        "    try{\n" ;
      const GGS_uint indentation_14982 = GGS_uint (8U) ;
      if (indentation_14982.isBuilt ()) {
        result.incIndentation ((PMSInt32) indentation_14982.uintValue ()) ;
      }
      GGS_lexicalRuleListAST::cEnumerator enumerator_14311 (var_cas_LEXICAL_RULE_LIST, true) ;
      const GGS_lexicalRuleListAST::cElement * operand_14311 = NULL ;
      while (((operand_14311 = enumerator_14311.nextObject ()))) {
        macroValidPointer (operand_14311) ;
        result << (findCategoryReader__abstractLexicalRuleAST__generateCode (operand_14311->mLexicalRule (HERE)->galgasRTTI ()) (inLexique, operand_14311->mLexicalRule.getPtr (), var_cas_LEXIQUE_IDENTIFIER, var_cas_LEXIQUE_ANALYSIS_CONTEXT COMMA_SOURCE_FILE_AT_LINE (285))) ;
      }
       ;
      if (indentation_14982.isBuilt ()) {
        result.incIndentation (- ((PMSInt32) indentation_14982.uintValue ())) ;
      }
      result << "if (testForInputUTF32Char (TO_UNICODE ('\\0'))) { // End of source text \? \n"
        "          token.mTokenCode = kToken_ ; // Empty string code\n"
        "        }else{ // Unknown input character\n"
        "          unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;\n"
        "        }\n"
        "      }catch (const C_lexicalErrorException &) {\n"
        "        token.mTokenCode = -1 ; // No token\n"
        "        advance () ; // ... go throught unknown character\n"
        "      }\n"
        "    }\n"
        "    if ((token.mTokenCode > 0) && kEndOfScriptInTemplateArray [token.mTokenCode - 1]) {\n"
        "      mMatchedTemplateDelimiterIndex = -1 ;\n"
        "    }\n"
        "  " ;
    }else {
      GGS_lexicalAttributeMap::cEnumerator enumerator_15017 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
      const GGS_lexicalAttributeMap::cElement * operand_15017 = NULL ;
      while (((operand_15017 = enumerator_15017.nextObject ()))) {
        macroValidPointer (operand_15017) ;
        result << "    token.mLexicalAttribute_" ;
        result << operand_15017->mKey.ggs_string ().reader_identifierRepresentation () ;
        result << operand_15017->mInfo.mLexicalType.reader_initialization (inLexique COMMA_SOURCE_FILE_AT_LINE (303)) ;
        result << " ;\n" ;
      }
      result << "    mTokenFirstLocation = mCurrentLocation ;\n"
        "    try{\n" ;
      const GGS_uint indentation_15744 = GGS_uint (6U) ;
      if (indentation_15744.isBuilt ()) {
        result.incIndentation ((PMSInt32) indentation_15744.uintValue ()) ;
      }
      GGS_lexicalRuleListAST::cEnumerator enumerator_15237 (var_cas_LEXICAL_RULE_LIST, true) ;
      const GGS_lexicalRuleListAST::cElement * operand_15237 = NULL ;
      while (((operand_15237 = enumerator_15237.nextObject ()))) {
        macroValidPointer (operand_15237) ;
        result << (findCategoryReader__abstractLexicalRuleAST__generateCode (operand_15237->mLexicalRule (HERE)->galgasRTTI ()) (inLexique, operand_15237->mLexicalRule.getPtr (), var_cas_LEXIQUE_IDENTIFIER, var_cas_LEXIQUE_ANALYSIS_CONTEXT COMMA_SOURCE_FILE_AT_LINE (310))) ;
      }
       ;
      if (indentation_15744.isBuilt ()) {
        result.incIndentation (- ((PMSInt32) indentation_15744.uintValue ())) ;
      }
      result << "if (testForInputUTF32Char (TO_UNICODE ('\\0'))) { // End of source text \? \n"
        "        token.mTokenCode = kToken_ ; // Empty string code\n"
        "      }else{ // Unknown input character\n"
        "        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;\n"
        "      }\n"
        "    }catch (const C_lexicalErrorException &) {\n"
        "      token.mTokenCode = -1 ; // No token\n"
        "      advance () ; // ... go throught unknown character\n"
        "    }" ;
    }
    result << "\n"
      "  }\n"
      "  if ((UNICODE_VALUE (mCurrentChar) == '\\0') && (token.mTemplateStringBeforeToken.length () > 0)) {\n"
      "    token.mTokenCode = 0 ;\n"
      "    enterToken (token) ;\n"
      "  }\n"
      "  return token.mTokenCode > 0 ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                         E N T E R    T O K E N                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "void C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "::enterToken (const cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " & inToken) {\n"
      "  cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " * ptr = NULL ;\n"
      "  macroMyNew (ptr, cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " ()) ;\n"
      "  ptr->mTokenCode = inToken.mTokenCode ;\n"
      "  ptr->mStartLocation = mTokenFirstLocation ;\n"
      "  ptr->mEndLocation = mTokenLastLocation ;\n"
      "  ptr->mTemplateStringBeforeToken = inToken.mTemplateStringBeforeToken ;\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_16786 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_16786 = NULL ;
    while (((operand_16786 = enumerator_16786.nextObject ()))) {
      macroValidPointer (operand_16786) ;
      result << "  ptr->mLexicalAttribute_" ;
      result << operand_16786->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " = inToken.mLexicalAttribute_" ;
      result << operand_16786->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " ;\n" ;
    }
    result << "  enterTokenFromPointer (ptr) ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//               A T T R I B U T E   A C C E S S                             *\n"
      "//                                                                           *\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_17320 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_17320 = NULL ;
    while (((operand_17320 = enumerator_17320.nextObject ()))) {
      macroValidPointer (operand_17320) ;
      result << "//---------------------------------------------------------------------------*\n"
        "\n" ;
      result << operand_17320->mInfo.mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (357)) ;
      result << " C_Lexique_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << "::attributeValue_" ;
      result << operand_17320->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " (void) const {\n"
        "  cTokenFor_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << " * ptr = (cTokenFor_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << " *) mCurrentTokenPtr ;\n"
        "  return ptr->mLexicalAttribute_" ;
      result << operand_17320->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " ;\n"
        "}\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//         A S S I G N    F R O M    A T T R I B U T E    ( V 1 )            *\n"
      "//                                                                           *\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_18103 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_18103 = NULL ;
    while (((operand_18103 = enumerator_18103.nextObject ()))) {
      macroValidPointer (operand_18103) ;
      result << "//---------------------------------------------------------------------------*\n"
        "\n"
        "void C_Lexique_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << "::assignFromAttribute_" ;
      result << operand_18103->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " (GGS_l" ;
      result << operand_18103->mInfo.mLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (369)) ;
      result << " & outValue) const {\n"
        "  cTokenFor_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << " * ptr = (cTokenFor_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << " *) mCurrentTokenPtr ;\n"
        "  outValue = GGS_l" ;
      result << operand_18103->mInfo.mLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (371)) ;
      result << " (* this, ptr->mLexicalAttribute_" ;
      result << operand_18103->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << ") ;\n"
        "}\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//         A S S I G N    F R O M    A T T R I B U T E    ( V 2 )            *\n"
      "//                                                                           *\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_18974 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_18974 = NULL ;
    while (((operand_18974 = enumerator_18974.nextObject ()))) {
      macroValidPointer (operand_18974) ;
      result << "//---------------------------------------------------------------------------*\n"
        "\n"
        "GALGAS_l" ;
      result << operand_18974->mInfo.mLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (381)).reader_identifierRepresentation () ;
      result << " * C_Lexique_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << "::synthetizedAttribute_" ;
      result << operand_18974->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " (void) const {\n"
        "  cTokenFor_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << " * ptr = (cTokenFor_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << " *) mCurrentTokenPtr ;\n"
        "  macroValidObject (ptr, cTokenFor_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << ") ;\n"
        "  GALGAS_location * currentLocation = GALGAS_location::constructor_new (ptr->mStartLocation, ptr->mEndLocation, sourceText () COMMA_HERE) ;\n"
        "  GALGAS_" ;
      result << operand_18974->mInfo.mLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (385)).reader_identifierRepresentation () ;
      result << " * value = GALGAS_" ;
      result << operand_18974->mInfo.mLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (385)).reader_identifierRepresentation () ;
      result << "::constructor_new (ptr->mLexicalAttribute_" ;
      result << operand_18974->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " COMMA_HERE) ;\n"
        "  return GALGAS_l" ;
      result << operand_18974->mInfo.mLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (386)).reader_identifierRepresentation () ;
      result << "::constructor_new (value, currentLocation COMMA_HERE) ;\n"
        "}\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// 'cocoaHeaderZone2' template of 'lexiqueGenerationTemplates' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_cocoaHeaderZone2 (C_Compiler & inLexique,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "#import \"OC_Lexique.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                    E X T E R N    R O U T I N E S                         *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalRoutineMap::cEnumerator enumerator_486 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalRoutineMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (10)), true) ;
    const GGS_lexicalRoutineMap::cElement * operand_486 = NULL ;
    while (((operand_486 = enumerator_486.nextObject ()))) {
      macroValidPointer (operand_486) ;
      if (operand_486->mInfo.mIsExtern.boolValue ()) {
        result << "\n"
          "void scanner_cocoa_routine_" ;
        result << operand_486->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (12)) ;
        result << " (BOOL * ioScanningOk" ;
        GGS_lexicalRoutineFormalArgumentList::cEnumerator enumerator_633 (operand_486->mInfo.mLexicalRoutineFormalArgumentList, true) ;
        const GGS_lexicalRoutineFormalArgumentList::cElement * operand_633 = NULL ;
        while (((operand_633 = enumerator_633.nextObject ()))) {
          macroValidPointer (operand_633) ;
          result << ",\n"
            "                " ;
          result << operand_633->mLexicalFormalArgumentMode.reader_cppConstInFormalArgument (inLexique COMMA_SOURCE_FILE_AT_LINE (14)) ;
          result << operand_633->mLexicalFormalArgumentType.reader_cocoaTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (15)) ;
          result << operand_633->mLexicalFormalArgumentMode.reader_cocoaPointerInFormalArgument (inLexique COMMA_SOURCE_FILE_AT_LINE (16)) ;
          result << " " ;
          result << operand_633->mArgumentNameForComment ;
        }
        result << ") ;\n" ;
      }else {
      }
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                    E X T E R N    F U N C T I O N S                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalFunctionMap::cEnumerator enumerator_1451 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (29)), true) ;
    const GGS_lexicalFunctionMap::cElement * operand_1451 = NULL ;
    while (((operand_1451 = enumerator_1451.nextObject ()))) {
      macroValidPointer (operand_1451) ;
      if (operand_1451->mInfo.mIsExtern.boolValue ()) {
        result << "\n" ;
        result << operand_1451->mInfo.mReturnedLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (31)) ;
        result << " scanner_cocoa_function_" ;
        result << operand_1451->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (31)) ;
        result << " (BOOL * ioScanningOk" ;
        GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_1615 (operand_1451->mInfo.mLexicalTypeList, true) ;
        const GGS_lexicalFunctionFormalArgumentList::cElement * operand_1615 = NULL ;
        while (((operand_1615 = enumerator_1615.nextObject ()))) {
          macroValidPointer (operand_1615) ;
          result << ",\n"
            "                const " ;
          result << operand_1615->mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (33)) ;
          result << " " ;
          result << operand_1615->mArgumentNameForComment ;
        }
        result << ") ;\n" ;
      }else {
      }
    }
    result << "\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//         T E R M I N A L    S Y M B O L    E N U M E R A T I O N           *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "enum {" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "_1_" ;
    GGS_terminalList::cEnumerator enumerator_2249 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (47)), true) ;
    const GGS_terminalList::cElement * operand_2249 = NULL ;
    while (((operand_2249 = enumerator_2249.nextObject ()))) {
      macroValidPointer (operand_2249) ;
      result << ",\n"
        "  " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_" ;
      result << operand_2249->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (48)).reader_identifierRepresentation () ;
    }
    result << "\n"
      "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                     S C A N N E R    C L A S S                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "@interface OC_Lexique_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " : OC_Lexique {\n"
      "//--- Attributes\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_2900 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (61)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_2900 = NULL ;
    while (((operand_2900 = enumerator_2900.nextObject ()))) {
      macroValidPointer (operand_2900) ;
      result << "  @private " ;
      result << operand_2900->mInfo.mLexicalType.reader_cocoaTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (62)) ;
      result << " mLexicalAttribute_" ;
      result << operand_2900->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (62)) ;
      result << " ;\n" ;
    }
    result << "\n"
      "}\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// 'cocoaHeaderZone3' template of 'lexiqueGenerationTemplates' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_cocoaHeaderZone3 (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "- (UInt32) terminalVocabularyCount ;\n"
      "\n"
      "- (UInt32) styleIndexForTerminal: (SInt32) inTerminal ;\n"
      "\n"
      "- (void) parseLexicalTokenForLexicalColoring ;\n"
      "\n"
      "- (UInt32) styleCount ;\n"
      "\n"
      "- (NSString *) styleNameForStyleIndex: (SInt32) inIndex ;\n"
      "\n"
      "- (NSString *) styleIdentifierForStyleIndex: (SInt32) inIndex ;\n"
      "\n"
      "- (BOOL) isTemplateLexique ;\n"
      "@end\n"
      "\n"
      "//---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'cocoaImplementationZone2' template of 'lexiqueGenerationTemplates' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_cocoaImplementationZone2 (C_Compiler & inLexique,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_lexicalAttributeMap & var_cas_LEXICAL_ATTRIBUTE_MAP,
                                const GGS_lexicalMessageMap & var_cas_LEXICAL_MESSAGE_MAP,
                                const GGS_terminalList & var_cas_TERMINAL_LIST,
                                const GGS_stringset & var_cas_STRINGS_IN_EXPLICIT_RULES,
                                const GGS_lexicalRuleListAST & var_cas_LEXICAL_RULE_LIST,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT,
                                const GGS_lexiqueComponentAST & var_cas_LEXIQUE_COMPONENT_ROOT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_LEXICAL_ATTRIBUTE_MAP.isBuilt ()
    && var_cas_LEXICAL_MESSAGE_MAP.isBuilt ()
    && var_cas_TERMINAL_LIST.isBuilt ()
    && var_cas_STRINGS_IN_EXPLICIT_RULES.isBuilt ()
    && var_cas_LEXICAL_RULE_LIST.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt ()
    && var_cas_LEXIQUE_COMPONENT_ROOT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#import \"version_libpm.h\"\n"
      "#if LIBPM_VERSION != THE_LIBPM_VERSION\n"
      "  #error \"This file has been compiled with a version of GALGAS different than the version of libpm\"\n"
      "#endif\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#import \"" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "-cocoa.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "@implementation OC_Lexique_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (id) init {\n"
      "  self = [super init] ;\n"
      "  if (self) {\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_673 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_673 = NULL ;
    while (((operand_673 = enumerator_673.nextObject ()))) {
      macroValidPointer (operand_673) ;
      result << "    mLexicalAttribute_" ;
      result << operand_673->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (23)) ;
      result << " = " ;
      result << operand_673->mInfo.mLexicalType.reader_cocoaInitializationCode (inLexique COMMA_SOURCE_FILE_AT_LINE (23)) ;
      result << " ;\n" ;
    }
    result << "  }\n"
      "  return self ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (void) dealloc {\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_940 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_940 = NULL ;
    while (((operand_940 = enumerator_940.nextObject ()))) {
      macroValidPointer (operand_940) ;
      if ((operand_940->mInfo.mLexicalType).operator_isEqual (GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE)).boolValue ()) {
        result << "  [mLexicalAttribute_" ;
        result << operand_940->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (34)) ;
        result << " release] ;\n" ;
      }else {
      }
    }
    result << "  [super dealloc] ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                           Template Delimiters                             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_templateDelimitorList::cEnumerator enumerator_1579 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (46)), true) ;
    const GGS_templateDelimitorList::cElement * operand_1579 = NULL ;
    if (enumerator_1579.hasCurrentObject ()) {
      result << "static const templateDelimiterStructForCocoa kTemplateDefinitionArray_" ;
      result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation () ;
      result << " [" ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (47)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
      result << "] = {\n" ;
      while (((operand_1579 = enumerator_1579.nextObject ()))) {
        macroValidPointer (operand_1579) ;
        result << "  {@" ;
        result << operand_1579->mStartString.ggs_string ().reader_utf8Representation () ;
        result << ", " ;
        if ((operand_1579->mEndString.ggs_string ().reader_length ()).operator_isEqual (GGS_uint (0U)).boolValue ()) {
          result << "nil," ;
        }else {
          result << "@" ;
          result << operand_1579->mEndString.ggs_string ().reader_utf8Representation () ;
          result << "," ;
        }
        result << " " ;
        result << (operand_1579->mPreservesStartDelimiter).operator_not ().reader_ocString (inLexique COMMA_SOURCE_FILE_AT_LINE (55)) ;
        result << "}" ;
        if (enumerator_1579.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                           Template Replacments                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_templateReplacementListAST::cEnumerator enumerator_2542 (var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (67)), true) ;
    const GGS_templateReplacementListAST::cElement * operand_2542 = NULL ;
    if (enumerator_2542.hasCurrentObject ()) {
      result << "static NSString * kTemplateReplacementArray_" ;
      result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation () ;
      result << " [" ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (68)).reader_length ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (68)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (68)) ;
      result << "] = {\n"
        "  " ;
      while (((operand_2542 = enumerator_2542.nextObject ()))) {
        macroValidPointer (operand_2542) ;
        result << "@" ;
        result << operand_2542->mMatchString.ggs_string ().reader_utf8Representation () ;
        result << ", " ;
      }
      result << "nil\n"
        "} ;" ;
    }
    result << "\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//            Terminal Symbols as end of script in template mark             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_terminalList::cEnumerator enumerator_3267 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (80)), true) ;
    const GGS_terminalList::cElement * operand_3267 = NULL ;
    if (enumerator_3267.hasCurrentObject ()) {
      result << "static const BOOL kEndOfScriptInTemplateArray_" ;
      result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation () ;
      result << " [" ;
      result << var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (81)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (81)) ;
      result << "] = {\n" ;
      while (((operand_3267 = enumerator_3267.nextObject ()))) {
        macroValidPointer (operand_3267) ;
        result << "  " ;
        result << operand_3267->mIsEndOfTemplateMark.reader_ocString (inLexique COMMA_SOURCE_FILE_AT_LINE (82)) ;
        result << " /* " ;
        result << operand_3267->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (82)) ;
        result << " */" ;
        if (enumerator_3267.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "\n" ;
    GGS_lexicalExplicitTokenListMapMap::cEnumerator enumerator_3652 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalTokenListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (89)), true) ;
    const GGS_lexicalExplicitTokenListMapMap::cElement * operand_3652 = NULL ;
    while (((operand_3652 = enumerator_3652.nextObject ()))) {
      macroValidPointer (operand_3652) ;
      if (operand_3652->mInfo.mShouldBeGenerated.boolValue ()) {
        result << "//---------------------------------------------------------------------------*\n"
          "//                                                                           *\n"
          "//             Key words table '" ;
        result << operand_3652->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (93)) ;
        result << "'                            *\n"
          "//                                                                           *\n"
          "//---------------------------------------------------------------------------*\n"
          "\n"
          "static const C_cocoa_lexique_table_entry ktable_for_" ;
        result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation () ;
        result << "_" ;
        result << operand_3652->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (96)) ;
        result << " [" ;
        result << operand_3652->mInfo.mExplicitTokenListMap.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (96)) ;
        result << "] = {\n" ;
        GGS_tokenSortedlist::cEnumerator enumerator_4398 (operand_3652->mInfo.mTokenSortedList, true) ;
        const GGS_tokenSortedlist::cElement * operand_4398 = NULL ;
        while (((operand_4398 = enumerator_4398.nextObject ()))) {
          macroValidPointer (operand_4398) ;
          result << "  {@" ;
          result << operand_4398->mName.reader_utf8Representation () ;
          result << ", " ;
          result << var_cas_LEXIQUE_CLASS_NAME ;
          result << "_1_" ;
          result << operand_4398->mTerminalName.reader_identifierRepresentation () ;
          result << "}" ;
          if (enumerator_4398.hasNextObject ()) {
            result << ",\n" ;
          }
        }
        result << "\n"
          "} ;\n"
          "\n"
          "static SInt32 search_into_" ;
        result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation () ;
        result << "_" ;
        result << operand_3652->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (102)) ;
        result << " (NSString * inSearchedString) {\n"
          "  return searchStringInTable (inSearchedString, ktable_for_" ;
        result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation () ;
        result << "_" ;
        result << operand_3652->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (103)) ;
        result << ", " ;
        result << operand_3652->mInfo.mExplicitTokenListMap.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (103)) ;
        result << ") ;\n"
          "}\n"
          "\n" ;
      }else {
      }
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//               P A R S E    L E X I C A L    T O K E N                     *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (void) parseLexicalTokenForLexicalColoring {\n"
      "  mLoop = YES ;\n"
      "  BOOL scanningOk = YES ;\n"
      "  mTokenCode = 0 ;\n"
      "  while ((mTokenCode == 0) && (mCurrentChar != '\\0')) {\n"
      "    mTokenFirstLocation = mCurrentLocation ;\n" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (121)).reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << "    if ((mMatchedTemplateDelimiterIndex >= 0) && ([kTemplateDefinitionArray_" ;
      result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation () ;
      result << " [mMatchedTemplateDelimiterIndex].mStartString length] > 0)) {\n"
        "      const BOOL foundEndDelimitor = [self testForInputString:kTemplateDefinitionArray_" ;
      result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation () ;
      result << " [mMatchedTemplateDelimiterIndex].mEndString advance:YES] ;\n"
        "      if (foundEndDelimitor) {\n"
        "        mMatchedTemplateDelimiterIndex = -1 ;\n"
        "      }\n"
        "    }\n"
        "    while ((mMatchedTemplateDelimiterIndex < 0) && (mCurrentChar != '\\0')) {\n"
        "      " ;
      if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (129)).reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
        result << "\n"
          "      [self searchForReplacementPattern:kTemplateReplacementArray_" ;
        result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation () ;
        result << "] ;\n"
          "      " ;
      }else {
      }
      result << "\n"
        "      mMatchedTemplateDelimiterIndex = [self findTemplateDelimiterIndex:kTemplateDefinitionArray_" ;
      result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation () ;
      result << " listLength:" ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (132)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (132)) ;
      result << "] ;\n"
        "      if (mMatchedTemplateDelimiterIndex < 0) {\n"
        "        [self advance] ;\n"
        "        mTokenCode = -2 ;\n"
        "      }\n"
        "    }\n"
        "    if ((mMatchedTemplateDelimiterIndex >= 0) && (mTokenCode == 0) && (mCurrentChar != '\\0') && scanningOk) {\n" ;
      GGS_lexicalAttributeMap::cEnumerator enumerator_6877 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
      const GGS_lexicalAttributeMap::cElement * operand_6877 = NULL ;
      while (((operand_6877 = enumerator_6877.nextObject ()))) {
        macroValidPointer (operand_6877) ;
        result << "      " ;
        result << operand_6877->mInfo.mLexicalType.reader_cocoaResetPrefix (inLexique COMMA_SOURCE_FILE_AT_LINE (140)) ;
        result << "mLexicalAttribute_" ;
        result << operand_6877->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (140)) ;
        result << operand_6877->mInfo.mLexicalType.reader_cocoaReset (inLexique COMMA_SOURCE_FILE_AT_LINE (140)) ;
        result << " ;\n" ;
      }
      result << "      mTokenFirstLocation = mCurrentLocation ;\n" ;
      const GGS_uint indentation_7298 = GGS_uint (6U) ;
      if (indentation_7298.isBuilt ()) {
        result.incIndentation ((PMSInt32) indentation_7298.uintValue ()) ;
      }
      GGS_lexicalRuleListAST::cEnumerator enumerator_7098 (var_cas_LEXICAL_RULE_LIST, true) ;
      const GGS_lexicalRuleListAST::cElement * operand_7098 = NULL ;
      while (((operand_7098 = enumerator_7098.nextObject ()))) {
        macroValidPointer (operand_7098) ;
        result << (findCategoryReader__abstractLexicalRuleAST__generateCocoaCode (operand_7098->mLexicalRule (HERE)->galgasRTTI ()) (inLexique, operand_7098->mLexicalRule.getPtr (), var_cas_LEXIQUE_CLASS_NAME, var_cas_LEXIQUE_ANALYSIS_CONTEXT COMMA_SOURCE_FILE_AT_LINE (146))) ;
      }
       ;
      if (indentation_7298.isBuilt ()) {
        result.incIndentation (- ((PMSInt32) indentation_7298.uintValue ())) ;
      }
      result << "if ([self testForInputChar:'\\0']) { // End of source text \? \n"
        "        mTokenCode = " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_ ; // Empty string code\n"
        "      }else{ // Unknown input character\n"
        "        scanningOk = NO ;\n"
        "      }\n"
        "    }\n"
        "    if ((mTokenCode > 0) && kEndOfScriptInTemplateArray_" ;
      result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation () ;
      result << " [mTokenCode - 1]) {\n"
        "      mMatchedTemplateDelimiterIndex = -1 ;\n"
        "    }\n"
        "  //--- Error \?\n"
        "    if (! scanningOk) {\n"
        "      mTokenCode = -1 ;\n"
        "      [self advance] ;\n"
        "    }" ;
    }else {
      GGS_lexicalAttributeMap::cEnumerator enumerator_7731 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
      const GGS_lexicalAttributeMap::cElement * operand_7731 = NULL ;
      while (((operand_7731 = enumerator_7731.nextObject ()))) {
        macroValidPointer (operand_7731) ;
        result << "    " ;
        result << operand_7731->mInfo.mLexicalType.reader_cocoaResetPrefix (inLexique COMMA_SOURCE_FILE_AT_LINE (164)) ;
        result << "mLexicalAttribute_" ;
        result << operand_7731->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (164)) ;
        result << operand_7731->mInfo.mLexicalType.reader_cocoaReset (inLexique COMMA_SOURCE_FILE_AT_LINE (164)) ;
        result << " ;\n" ;
      }
      result << "    mTokenFirstLocation = mCurrentLocation ;\n" ;
      const GGS_uint indentation_8146 = GGS_uint (4U) ;
      if (indentation_8146.isBuilt ()) {
        result.incIndentation ((PMSInt32) indentation_8146.uintValue ()) ;
      }
      GGS_lexicalRuleListAST::cEnumerator enumerator_7948 (var_cas_LEXICAL_RULE_LIST, true) ;
      const GGS_lexicalRuleListAST::cElement * operand_7948 = NULL ;
      while (((operand_7948 = enumerator_7948.nextObject ()))) {
        macroValidPointer (operand_7948) ;
        result << (findCategoryReader__abstractLexicalRuleAST__generateCocoaCode (operand_7948->mLexicalRule (HERE)->galgasRTTI ()) (inLexique, operand_7948->mLexicalRule.getPtr (), var_cas_LEXIQUE_CLASS_NAME, var_cas_LEXIQUE_ANALYSIS_CONTEXT COMMA_SOURCE_FILE_AT_LINE (170))) ;
      }
       ;
      if (indentation_8146.isBuilt ()) {
        result.incIndentation (- ((PMSInt32) indentation_8146.uintValue ())) ;
      }
      result << "if ([self testForInputChar:'\\0']) { // End of source text \? \n"
        "      mTokenCode = " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_ ; // Empty string code\n"
        "    }else{ // Unknown input character\n"
        "      scanningOk = NO ;\n"
        "    }\n"
        "  //--- Error \?\n"
        "    if (! scanningOk) {\n"
        "      mTokenCode = -1 ;\n"
        "      [self advance] ;\n"
        "    }" ;
    }
    result << "\n"
      "  }\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                   T E R M I N A L    C O U N T                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (UInt32) terminalVocabularyCount {\n"
      "  return " ;
    result << var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (193)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (193)) ;
    result << " ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                     S T Y L E   C O U N T                                 *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (UInt32) styleCount {\n"
      "  return " ;
    result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (203)).reader_length ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (203)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ;
    result << " ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                I S    T E M P L A T E    L E X I Q U E                    *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (BOOL) isTemplateLexique {\n"
      "  return " ;
    result << (var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (213)).reader_length ()).operator_strictSup (GGS_uint (0U)).reader_ocString (inLexique COMMA_SOURCE_FILE_AT_LINE (213)) ;
    result << " ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//              S T Y L E   F O R    T E R M I N A L                         *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (UInt32) styleIndexForTerminal: (SInt32) inTerminal {\n"
      "  static const UInt32 kTerminalSymbolStyles [" ;
    result << var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (223)).reader_length ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (223)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (223)) ;
    result << "] = {0" ;
    GGS_terminalList::cEnumerator enumerator_10514 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (224)), true) ;
    const GGS_terminalList::cElement * operand_10514 = NULL ;
    while (((operand_10514 = enumerator_10514.nextObject ()))) {
      macroValidPointer (operand_10514) ;
      result << ",\n"
        "    " ;
      result << operand_10514->mStyleIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (225)) ;
      result << " /* " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_" ;
      result << operand_10514->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (225)).reader_identifierRepresentation () ;
      result << " */" ;
    }
    result << "\n"
      "  } ;\n"
      "  return kTerminalSymbolStyles [inTerminal] ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//             S T Y L E   N A M E    F O R    I N D E X                     *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (NSString *) styleNameForStyleIndex: (SInt32) inIndex {\n"
      "  NSString * kStyleArray [" ;
    result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (237)).reader_length ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (237)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (237)) ;
    result << "] = {\n"
      "    @\"Default Style\"" ;
    GGS_lexicalStyleListAST::cEnumerator enumerator_11330 (var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (239)), true) ;
    const GGS_lexicalStyleListAST::cElement * operand_11330 = NULL ;
    while (((operand_11330 = enumerator_11330.nextObject ()))) {
      macroValidPointer (operand_11330) ;
      result << ",\n"
        "    @" ;
      result << operand_11330->mComment.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (240)).reader_utf8Representation () ;
    }
    result << "\n"
      "  } ;\n"
      "  return kStyleArray [inIndex] ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//         S T Y L E   I D E N T I F I E R    F O R    I N D E X             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (NSString *) styleIdentifierForStyleIndex: (SInt32) inIndex {\n"
      "  NSString * kStyleArray [" ;
    result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (252)).reader_length ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (252)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (252)) ;
    result << "] = {\n"
      "    @\"" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "\"" ;
    GGS_lexicalStyleListAST::cEnumerator enumerator_12081 (var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (254)), true) ;
    const GGS_lexicalStyleListAST::cElement * operand_12081 = NULL ;
    while (((operand_12081 = enumerator_12081.nextObject ()))) {
      macroValidPointer (operand_12081) ;
      result << ",\n"
        "    @\"" ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "-" ;
      result << operand_12081->mName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (255)) ;
      result << "\"" ;
    }
    result << "\n"
      "  } ;\n"
      "  return kStyleArray [inIndex] ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "@end\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "parseLexiqueComponent"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_parseLexiqueComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct,
                                GGS_lexiqueComponentAST  & var_cas_outLexiqueComponentRoot COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_parseLexiqueComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, var_cas_inSourceFile.ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension (), var_cas_inSourceFile.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (675)) COMMA_HERE) ;
  const GGS_bool cond_28045 = var_cas_ioParsedComponentStruct.reader_mParsedLexiqueComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (676)).reader_hasKey (var_cas_key.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (676))) ;
  if (cond_28045.isBuiltAndTrue ()) {
    const GGS_parsedLexiqueComponentMap  temp_28005 = var_cas_ioParsedComponentStruct.reader_mParsedLexiqueComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (677)) ;
    if (temp_28005.isBuilt ()) {
      temp_28005 (HERE)->method_searchKey (inLexique, var_cas_key, var_cas_outLexiqueComponentRoot COMMA_SOURCE_FILE_AT_LINE (677)) ;
    }
  }else if (cond_28045.isBuiltAndFalse ()) {
    const GGS_string _depExtension = GGS_string ("") ;
    const GGS_string _depPath = GGS_string ("") ;
    if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
      C_Grammar_lexiqueLL_31_grammar::_performSourceFileParsing_ (inLexique,
                                    _depExtension.string (),
                                    _depPath.string (),
                                    NULL,
                                    var_cas_inSourceFile,
                                    var_cas_outLexiqueComponentRoot
                                    COMMA_SOURCE_FILE_AT_LINE (679)) ;
    }
    var_cas_ioParsedComponentStruct.mParsedLexiqueComponentMap.modifier_insertKey (inLexique, var_cas_key, var_cas_outLexiqueComponentRoot COMMA_SOURCE_FILE_AT_LINE (680)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_parseLexiqueComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "compileLexiqueComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileLexiqueComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  var_cas_inOutputDirectory,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileLexiqueComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lexiqueComponentAST  var_cas_lexiqueComponentRoot ;
  ::routine_parseLexiqueComponent (inLexique,  var_cas_inSourceFile,  var_cas_ioParsedComponentStruct,  var_cas_lexiqueComponentRoot COMMA_SOURCE_FILE_AT_LINE (694)) ;
  GGS_lstring  var_cas_componentName = var_cas_lexiqueComponentRoot.reader_mLexiqueComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (700)) ;
  GGS_string var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
  const GGS_bool cond_29244 = (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (702))).operator_isNotEqual (var_cas_basename) ;
  if (cond_29244.isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS checks "
      "the component name ('")).operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (704)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (706)) ;
  }
  GGS_lexicalTypeMap  var_cas_lexicalTypeMap = GGS_lexicalTypeMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (710)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("char"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (711)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (712)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint64"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (713)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (714)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint64"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint64 (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (715)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("double"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_double (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (716)) ;
  GGS_lexicalRoutineMap  var_cas_lexicalRoutineMap ;
  ::routine_buildLexicalRoutineMap (inLexique,  var_cas_lexicalRoutineMap COMMA_SOURCE_FILE_AT_LINE (719)) ;
  {
    GGS_externRoutineListAST::cEnumerator enumerator_30318 (var_cas_lexiqueComponentRoot.reader_mExternRoutineList (inLexique COMMA_SOURCE_FILE_AT_LINE (721)), true) ;
    const GGS_externRoutineListAST::cElement * operand_30318 = NULL ;
    while (((operand_30318 = enumerator_30318.nextObject ()))) {
      macroValidPointer (operand_30318) ;
      GGS_lexicalRoutineFormalArgumentList  var_cas_lexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
      {
        GGS_lexicalExternRoutineFormalArgumentListAST::cEnumerator enumerator_30492 (operand_30318->mLexicalRoutineFormalArgumentList, true) ;
        const GGS_lexicalExternRoutineFormalArgumentListAST::cElement * operand_30492 = NULL ;
        while (((operand_30492 = enumerator_30492.nextObject ()))) {
          macroValidPointer (operand_30492) ;
          GGS_lexicalTypeEnum var_cas_lexicalFormalArgumentType ;
          const GGS_lexicalTypeMap  temp_30578 = var_cas_lexicalTypeMap ;
          if (temp_30578.isBuilt ()) {
            temp_30578 (HERE)->method_searchKey (inLexique, operand_30492->mLexicalTypeName, var_cas_lexicalFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (725)) ;
          }
          var_cas_lexicalRoutineFormalArgumentList.addAssign_operation (operand_30492->mPassingMode, var_cas_lexicalFormalArgumentType, operand_30492->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (726))) ;
        }
      }
      var_cas_lexicalRoutineMap.modifier_insertKey (inLexique, operand_30318->mRoutineName, var_cas_lexicalRoutineFormalArgumentList, operand_30318->mErrorMessageList, GGS_string (""), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (728)) ;
    }
  }
  GGS_lexicalFunctionMap  var_cas_lexicalFunctionMap ;
  ::routine_buildLexicalFunctionMap (inLexique,  var_cas_lexicalFunctionMap COMMA_SOURCE_FILE_AT_LINE (732)) ;
  {
    GGS_externFunctionListAST::cEnumerator enumerator_31123 (var_cas_lexiqueComponentRoot.reader_mExternFunctionList (inLexique COMMA_SOURCE_FILE_AT_LINE (734)), true) ;
    const GGS_externFunctionListAST::cElement * operand_31123 = NULL ;
    while (((operand_31123 = enumerator_31123.nextObject ()))) {
      macroValidPointer (operand_31123) ;
      GGS_lexicalFunctionFormalArgumentList  var_cas_lexicalFunctionFormalArgumentList = GGS_lexicalFunctionFormalArgumentList ::constructor_emptyList () ;
      {
        GGS_lexicalExternFunctionFormalArgumentListAST::cEnumerator enumerator_31301 (operand_31123->mLexicalFunctionFormalArgumentList, true) ;
        const GGS_lexicalExternFunctionFormalArgumentListAST::cElement * operand_31301 = NULL ;
        while (((operand_31301 = enumerator_31301.nextObject ()))) {
          macroValidPointer (operand_31301) ;
          GGS_lexicalTypeEnum var_cas_lexicalFormalArgumentType ;
          const GGS_lexicalTypeMap  temp_31387 = var_cas_lexicalTypeMap ;
          if (temp_31387.isBuilt ()) {
            temp_31387 (HERE)->method_searchKey (inLexique, operand_31301->mLexicalTypeName, var_cas_lexicalFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (738)) ;
          }
          var_cas_lexicalFunctionFormalArgumentList.addAssign_operation (var_cas_lexicalFormalArgumentType, operand_31301->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (739))) ;
        }
      }
      GGS_lexicalTypeEnum var_cas_returnedArgumentType ;
      const GGS_lexicalTypeMap  temp_31629 = var_cas_lexicalTypeMap ;
      if (temp_31629.isBuilt ()) {
        temp_31629 (HERE)->method_searchKey (inLexique, operand_31123->mReturnedTypeName, var_cas_returnedArgumentType COMMA_SOURCE_FILE_AT_LINE (742)) ;
      }
      var_cas_lexicalFunctionMap.modifier_insertKey (inLexique, operand_31123->mFunctionName, var_cas_lexicalFunctionFormalArgumentList, var_cas_returnedArgumentType, GGS_string (""), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (743)) ;
    }
  }
  GGS_lexiqueAnalysisContext var_cas_lexiqueAnalysisContext = GGS_lexiqueAnalysisContext::constructor_new (var_cas_lexicalRoutineMap, var_cas_lexicalFunctionMap, GGS_lexicalMessageMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_terminalMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_terminalList ::constructor_emptyList (), GGS_lexicalAttributeMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_lexicalExplicitTokenListMapMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_stringset ::constructor_emptySet (), GGS_templateDelimitorList ::constructor_emptyList (), GGS_styleMap ::constructor_emptyMap (inLexique COMMA_HERE)) ;
  GGS_uint  var_cas_styleIndex = GGS_uint (1U) ;
  {
    GGS_lexicalStyleListAST::cEnumerator enumerator_32327 (var_cas_lexiqueComponentRoot.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (760)), true) ;
    const GGS_lexicalStyleListAST::cElement * operand_32327 = NULL ;
    while (((operand_32327 = enumerator_32327.nextObject ()))) {
      macroValidPointer (operand_32327) ;
      var_cas_lexiqueAnalysisContext.mStyleMap.modifier_insertKey (inLexique, operand_32327->mName, operand_32327->mComment, var_cas_styleIndex COMMA_SOURCE_FILE_AT_LINE (761)) ;
      var_cas_styleIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (762)) ;
    }
  }
  {
    GGS_lexicalAttributeListAST::cEnumerator enumerator_32579 (var_cas_lexiqueComponentRoot.reader_mLexicalAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (765)), true) ;
    const GGS_lexicalAttributeListAST::cElement * operand_32579 = NULL ;
    while (((operand_32579 = enumerator_32579.nextObject ()))) {
      macroValidPointer (operand_32579) ;
      const GGS_bool cond_32873 = var_cas_lexicalTypeMap.reader_hasKey (operand_32579->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (766))) ;
      if (cond_32873.isBuiltAndTrue ()) {
        GGS_lexicalTypeEnum var_cas_lexicalType ;
        const GGS_lexicalTypeMap  temp_32750 = var_cas_lexicalTypeMap ;
        if (temp_32750.isBuilt ()) {
          temp_32750 (HERE)->method_searchKey (inLexique, operand_32579->mTypeName, var_cas_lexicalType COMMA_SOURCE_FILE_AT_LINE (768)) ;
        }
        var_cas_lexiqueAnalysisContext.mLexicalAttributeMap.modifier_insertKey (inLexique, operand_32579->mName, var_cas_lexicalType COMMA_SOURCE_FILE_AT_LINE (769)) ;
      }else if (cond_32873.isBuiltAndFalse ()) {
        GGS_string var_cas_m = GGS_string ("") ;
        var_cas_m.appendCString ("the @") ;
        var_cas_m.dotAssign_operation (operand_32579->mTypeName) ;
        var_cas_m.appendCString (" type is not a valid lexical attribute type; are allowed:") ;
        GGS_bool var_cas_firstLoop = GGS_bool (true) ;
        {
          GGS_lexicalTypeMap::cEnumerator enumerator_33053 (var_cas_lexicalTypeMap, true) ;
          const GGS_lexicalTypeMap::cElement * operand_33053 = enumerator_33053.nextObject () ;
          if ((operand_33053 != NULL)) {
            bool _foreach_loop_33053 ;
            do{
              macroValidPointer (operand_33053) ;
              var_cas_m.appendCString (" @") ;
              var_cas_m.dotAssign_operation (operand_33053->mKey) ;
              operand_33053 = enumerator_33053.nextObject () ;
              _foreach_loop_33053 = ((operand_33053 != NULL)) ;
              if (_foreach_loop_33053) {
                var_cas_m.appendCString (",") ;
              }
            }while (_foreach_loop_33053) ;
          }
        }
        operand_32579->mTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_m COMMA_SOURCE_FILE_AT_LINE (780)) ;
      }
    }
  }
  {
    GGS_terminalDeclarationListAST::cEnumerator enumerator_33263 (var_cas_lexiqueComponentRoot.reader_mTerminalDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (783)), true) ;
    const GGS_terminalDeclarationListAST::cElement * operand_33263 = NULL ;
    while (((operand_33263 = enumerator_33263.nextObject ()))) {
      macroValidPointer (operand_33263) ;
      GGS_uint  var_cas_terminalStyleIndex = GGS_uint (0U) ;
      const GGS_bool cond_33483 = (operand_33263->mStyle.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (785)).reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_33483.isBuiltAndTrue ()) {
        GGS_lstring  automatic_var_33473_0 ;
        const GGS_styleMap  temp_33441 = var_cas_lexiqueAnalysisContext.reader_mStyleMap (inLexique COMMA_SOURCE_FILE_AT_LINE (786)) ;
        if (temp_33441.isBuilt ()) {
          temp_33441 (HERE)->method_searchKey (inLexique, operand_33263->mStyle, automatic_var_33473_0, var_cas_terminalStyleIndex COMMA_SOURCE_FILE_AT_LINE (786)) ;
        }
      }
      GGS_lexicalSentValueList  var_cas_argumentTypeList = GGS_lexicalSentValueList ::constructor_emptyList () ;
      {
        GGS_lstringlist::cEnumerator enumerator_33576 (operand_33263->mSentAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_33576 = NULL ;
        while (((operand_33576 = enumerator_33576.nextObject ()))) {
          macroValidPointer (operand_33576) ;
          GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
          const GGS_lexicalAttributeMap  temp_33689 = var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (791)) ;
          if (temp_33689.isBuilt ()) {
            temp_33689 (HERE)->method_searchKey (inLexique, operand_33576->mValue, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (791)) ;
          }
          var_cas_argumentTypeList.addAssign_operation (operand_33576->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (792)), var_cas_attributeLexicalType) ;
        }
      }
      var_cas_lexiqueAnalysisContext.mTerminalMap.modifier_insertKey (inLexique, operand_33263->mName, var_cas_argumentTypeList COMMA_SOURCE_FILE_AT_LINE (794)) ;
      GGS_bool var_cas_isEndOfTemplateMark = GGS_bool (false) ;
      {
        GGS_lstringlist::cEnumerator enumerator_33954 (operand_33263->mOptionList, true) ;
        const GGS_lstringlist::cElement * operand_33954 = NULL ;
        while (((operand_33954 = enumerator_33954.nextObject ()))) {
          macroValidPointer (operand_33954) ;
          const GGS_bool cond_34096 = (operand_33954->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (797))).operator_isNotEqual (GGS_string ("templateEndMark")) ;
          if (cond_34096.isBuiltAndTrue ()) {
            operand_33954->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'templateEndMark' feature is allowed here") COMMA_SOURCE_FILE_AT_LINE (799)) ;
          }else if (cond_34096.isBuiltAndFalse ()) {
            const GGS_bool cond_34202 = var_cas_isEndOfTemplateMark ;
            if (cond_34202.isBuiltAndTrue ()) {
              operand_33954->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'templateEndMark' feature is already set") COMMA_SOURCE_FILE_AT_LINE (801)) ;
            }else if (cond_34202.isBuiltAndFalse ()) {
              var_cas_isEndOfTemplateMark = GGS_bool (true) ;
            }
          }
        }
      }
      var_cas_lexiqueAnalysisContext.mTerminalList.addAssign_operation (operand_33263->mName, var_cas_argumentTypeList, operand_33263->mSyntaxErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (808)), var_cas_isEndOfTemplateMark, var_cas_terminalStyleIndex) ;
    }
  }
  {
    GGS_lexicalListDeclarationListAST::cEnumerator enumerator_34478 (var_cas_lexiqueComponentRoot.reader_mLexicalListDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (813)), true) ;
    const GGS_lexicalListDeclarationListAST::cElement * operand_34478 = NULL ;
    while (((operand_34478 = enumerator_34478.nextObject ()))) {
      macroValidPointer (operand_34478) ;
      GGS_uint  var_cas_terminalStyleIndex = GGS_uint (0U) ;
      const GGS_bool cond_34701 = (operand_34478->mStyle.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (815)).reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_34701.isBuiltAndTrue ()) {
        GGS_lstring  automatic_var_34691_0 ;
        const GGS_styleMap  temp_34659 = var_cas_lexiqueAnalysisContext.reader_mStyleMap (inLexique COMMA_SOURCE_FILE_AT_LINE (816)) ;
        if (temp_34659.isBuilt ()) {
          temp_34659 (HERE)->method_searchKey (inLexique, operand_34478->mStyle, automatic_var_34691_0, var_cas_terminalStyleIndex COMMA_SOURCE_FILE_AT_LINE (816)) ;
        }
      }
      GGS_lexicalSentValueList  var_cas_argumentTypeList = GGS_lexicalSentValueList ::constructor_emptyList () ;
      {
        GGS_lstringlist::cEnumerator enumerator_34794 (operand_34478->mSentAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_34794 = NULL ;
        while (((operand_34794 = enumerator_34794.nextObject ()))) {
          macroValidPointer (operand_34794) ;
          GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
          const GGS_lexicalAttributeMap  temp_34906 = var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (821)) ;
          if (temp_34906.isBuilt ()) {
            temp_34906 (HERE)->method_searchKey (inLexique, operand_34794->mValue, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (821)) ;
          }
          var_cas_argumentTypeList.addAssign_operation (operand_34794->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (822)), var_cas_attributeLexicalType) ;
        }
      }
      GGS_lexicalExplicitTokenListMap  var_cas_lexicalTokenListMap = GGS_lexicalExplicitTokenListMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_tokenSortedlist  var_cas_tokenSortedlist = GGS_tokenSortedlist ::constructor_emptySortedList () ;
      {
        GGS_lexicalListEntryListAST::cEnumerator enumerator_35170 (operand_34478->mEntryList, true) ;
        const GGS_lexicalListEntryListAST::cElement * operand_35170 = NULL ;
        while (((operand_35170 = enumerator_35170.nextObject ()))) {
          macroValidPointer (operand_35170) ;
          GGS_string var_cas_syntaxErrorMessage = operand_34478->mSyntaxErrorMessage.ggs_string ().reader_stringByReplacingStringByString (inLexique, GGS_string ("%K"), operand_35170->mTerminalSpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (827)) COMMA_SOURCE_FILE_AT_LINE (827)) ;
          GGS_bool var_cas_isEndOfTemplateMark = GGS_bool (false) ;
          {
            GGS_lstringlist::cEnumerator enumerator_35369 (operand_35170->mFeatureList, true) ;
            const GGS_lstringlist::cElement * operand_35369 = NULL ;
            while (((operand_35369 = enumerator_35369.nextObject ()))) {
              macroValidPointer (operand_35369) ;
              const GGS_bool cond_35517 = (operand_35369->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (830))).operator_isNotEqual (GGS_string ("templateEndMark")) ;
              if (cond_35517.isBuiltAndTrue ()) {
                operand_35369->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'templateEndMark' feature is allowed here") COMMA_SOURCE_FILE_AT_LINE (832)) ;
              }else if (cond_35517.isBuiltAndFalse ()) {
                const GGS_bool cond_35627 = var_cas_isEndOfTemplateMark ;
                if (cond_35627.isBuiltAndTrue ()) {
                  operand_35369->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'templateEndMark' feature is already set") COMMA_SOURCE_FILE_AT_LINE (834)) ;
                }else if (cond_35627.isBuiltAndFalse ()) {
                  var_cas_isEndOfTemplateMark = GGS_bool (true) ;
                }
              }
            }
          }
          var_cas_lexiqueAnalysisContext.mTerminalList.addAssign_operation (operand_35170->mTerminalSpelling, var_cas_argumentTypeList, var_cas_syntaxErrorMessage, var_cas_isEndOfTemplateMark, var_cas_terminalStyleIndex) ;
          var_cas_lexiqueAnalysisContext.mTerminalMap.modifier_insertKey (inLexique, operand_35170->mTerminalSpelling, var_cas_argumentTypeList COMMA_SOURCE_FILE_AT_LINE (845)) ;
          var_cas_lexicalTokenListMap.modifier_insertKey (inLexique, operand_35170->mEntrySpelling, operand_35170->mTerminalSpelling, operand_35170->mFeatureList COMMA_SOURCE_FILE_AT_LINE (846)) ;
          var_cas_tokenSortedlist.addAssign_operation (operand_35170->mEntrySpelling.ggs_string ().reader_length (), operand_35170->mEntrySpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (847)), operand_35170->mTerminalSpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (847))) ;
          var_cas_lexiqueAnalysisContext.mUnicodeStringToGenerate.addAssign_operation (operand_35170->mEntrySpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (848))) ;
        }
      }
      var_cas_lexiqueAnalysisContext.mLexicalTokenListMap.modifier_insertKey (inLexique, operand_34478->mName, var_cas_lexicalTokenListMap, var_cas_tokenSortedlist, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (850)) ;
    }
  }
  {
    GGS_lexicalMessageDeclarationListAST::cEnumerator enumerator_36496 (var_cas_lexiqueComponentRoot.reader_mLexicalMessageDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (853)), true) ;
    const GGS_lexicalMessageDeclarationListAST::cElement * operand_36496 = NULL ;
    while (((operand_36496 = enumerator_36496.nextObject ()))) {
      macroValidPointer (operand_36496) ;
      var_cas_lexiqueAnalysisContext.mLexicalMessageMap.modifier_insertKey (inLexique, operand_36496->mMessageName, operand_36496->mMessageValue, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (854)) ;
    }
  }
  {
    GGS_lexicalRuleListAST::cEnumerator enumerator_36731 (var_cas_lexiqueComponentRoot.reader_mLexicalRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (857)), true) ;
    const GGS_lexicalRuleListAST::cElement * operand_36731 = NULL ;
    while (((operand_36731 = enumerator_36731.nextObject ()))) {
      macroValidPointer (operand_36731) ;
      const GGS_abstractLexicalRuleAST  temp_36807 = operand_36731->mLexicalRule ;
      if (temp_36807.isBuilt ()) {
        typeCategoryMethod__abstractLexicalRuleAST__checkLexicalRule method = findCategoryMethod__abstractLexicalRuleAST__checkLexicalRule (temp_36807.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_36807 (HERE), var_cas_lexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (858)) ;
        }
      }
    }
  }
  {
    GGS_lexicalMessageMap::cEnumerator enumerator_36929 (var_cas_lexiqueAnalysisContext.reader_mLexicalMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (861)), true) ;
    const GGS_lexicalMessageMap::cElement * operand_36929 = NULL ;
    while (((operand_36929 = enumerator_36929.nextObject ()))) {
      macroValidPointer (operand_36929) ;
      const GGS_bool cond_37050 = (operand_36929->mInfo.mMessageIsUsed).operator_not () ;
      if (cond_37050.isBuiltAndTrue ()) {
        operand_36929->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("unused message") COMMA_SOURCE_FILE_AT_LINE (863)) ;
      }
    }
  }
  {
    GGS_metamodelTemplateDelimitorListAST::cEnumerator enumerator_37144 (var_cas_lexiqueComponentRoot.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (867)), true) ;
    const GGS_metamodelTemplateDelimitorListAST::cElement * operand_37144 = NULL ;
    while (((operand_37144 = enumerator_37144.nextObject ()))) {
      macroValidPointer (operand_37144) ;
      var_cas_lexiqueAnalysisContext.mUnicodeStringToGenerate.addAssign_operation (operand_37144->mStartString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (868))) ;
      var_cas_lexiqueAnalysisContext.mUnicodeStringToGenerate.addAssign_operation (operand_37144->mEndString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (869))) ;
      GGS_bool var_cas_preservesStartDelimiter = GGS_bool (false) ;
      {
        GGS_lstringlist::cEnumerator enumerator_37416 (operand_37144->mOptionList, true) ;
        const GGS_lstringlist::cElement * operand_37416 = NULL ;
        while (((operand_37416 = enumerator_37416.nextObject ()))) {
          macroValidPointer (operand_37416) ;
          const GGS_bool cond_37543 = (operand_37416->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (872))).operator_isNotEqual (GGS_string ("preserved")) ;
          if (cond_37543.isBuiltAndTrue ()) {
            operand_37416->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'preserved' feature is allowed here") COMMA_SOURCE_FILE_AT_LINE (874)) ;
          }else if (cond_37543.isBuiltAndFalse ()) {
            const GGS_bool cond_37645 = var_cas_preservesStartDelimiter ;
            if (cond_37645.isBuiltAndTrue ()) {
              operand_37416->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'preserved' feature is already set") COMMA_SOURCE_FILE_AT_LINE (876)) ;
            }else if (cond_37645.isBuiltAndFalse ()) {
              var_cas_preservesStartDelimiter = GGS_bool (true) ;
            }
          }
        }
      }
      var_cas_lexiqueAnalysisContext.mTemplateDelimitorList.addAssign_operation (operand_37144->mStartString, operand_37144->mEndString, var_cas_preservesStartDelimiter) ;
    }
  }
  {
    GGS_templateReplacementListAST::cEnumerator enumerator_37914 (var_cas_lexiqueComponentRoot.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (883)), true) ;
    const GGS_templateReplacementListAST::cElement * operand_37914 = NULL ;
    while (((operand_37914 = enumerator_37914.nextObject ()))) {
      macroValidPointer (operand_37914) ;
      var_cas_lexiqueAnalysisContext.mUnicodeStringToGenerate.addAssign_operation (operand_37914->mMatchString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (884))) ;
      var_cas_lexiqueAnalysisContext.mUnicodeStringToGenerate.addAssign_operation (operand_37914->mReplacementString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (885))) ;
    }
  }
  GGS_string var_cas_lexiqueClassName = var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (889)) ;
  const GGS_bool cond_38936 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
  if (cond_38936.isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string (".h")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_headerZone2 (inLexique, var_cas_lexiqueClassName.reader_identifierRepresentation (), var_cas_lexiqueAnalysisContext, var_cas_lexiqueComponentRoot), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_headerZone3 (inLexique, var_cas_lexiqueClassName.reader_identifierRepresentation (), var_cas_lexiqueComponentRoot.reader_mLexicalListDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (905)), var_cas_lexiqueAnalysisContext) COMMA_SOURCE_FILE_AT_LINE (892)) ;
  }
  const GGS_bool cond_39729 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
  if (cond_39729.isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string (".cpp")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_implementationZone2 (inLexique, var_cas_lexiqueClassName.reader_identifierRepresentation (), var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (919)), var_cas_lexiqueAnalysisContext.reader_mLexicalMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (920)), var_cas_lexiqueAnalysisContext.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (921)), var_cas_lexiqueAnalysisContext.reader_mLexicalTokenListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (922)), var_cas_lexiqueAnalysisContext.reader_mUnicodeStringToGenerate (inLexique COMMA_SOURCE_FILE_AT_LINE (923)), var_cas_lexiqueComponentRoot.reader_mLexicalRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (924)), var_cas_lexiqueAnalysisContext, var_cas_lexiqueComponentRoot), GGS_string ("\n"
      "\n"), GGS_string ("\n"
      "\n") COMMA_SOURCE_FILE_AT_LINE (912)) ;
  }
  const GGS_bool cond_40248 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
  if (cond_40248.isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string ("-cocoa.h")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_cocoaHeaderZone2 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueAnalysisContext), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_cocoaHeaderZone3 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueAnalysisContext) COMMA_SOURCE_FILE_AT_LINE (934)) ;
  }
  const GGS_bool cond_40973 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
  if (cond_40973.isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string ("-cocoa.m")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_cocoaImplementationZone2 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (959)), var_cas_lexiqueAnalysisContext.reader_mLexicalMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (960)), var_cas_lexiqueAnalysisContext.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (961)), var_cas_lexiqueAnalysisContext.reader_mUnicodeStringToGenerate (inLexique COMMA_SOURCE_FILE_AT_LINE (962)), var_cas_lexiqueComponentRoot.reader_mLexicalRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (963)), var_cas_lexiqueAnalysisContext, var_cas_lexiqueComponentRoot), GGS_string ("\n"
      "\n"), GGS_string ("\n"
      "\n") COMMA_SOURCE_FILE_AT_LINE (952)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileLexiqueComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_lexiqueCompilation (void) {
  enterCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction ((typeCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction) category_method__lexicalSendTerminalByDefaultAST__checkLexicalDefaultAction, gClassInfoFor__lexicalSendTerminalByDefaultAST.slotID ()) ;
  enterCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction ((typeCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction) category_method__lexicalErrorByDefaultAST__checkLexicalDefaultAction, gClassInfoFor__lexicalErrorByDefaultAST.slotID ()) ;
  enterCategoryMethod__lexicalExpressionAST__checkLexicalExpression ((typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression) category_method__lexicalOrExpressionAST__checkLexicalExpression, gClassInfoFor__lexicalOrExpressionAST.slotID ()) ;
  enterCategoryMethod__lexicalExpressionAST__checkLexicalExpression ((typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression) category_method__lexicalCharacterMatchAST__checkLexicalExpression, gClassInfoFor__lexicalCharacterMatchAST.slotID ()) ;
  enterCategoryMethod__lexicalExpressionAST__checkLexicalExpression ((typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression) category_method__lexicalCharacterSetMatchAST__checkLexicalExpression, gClassInfoFor__lexicalCharacterSetMatchAST.slotID ()) ;
  enterCategoryMethod__lexicalExpressionAST__checkLexicalExpression ((typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression) category_method__lexicalCharacterIntervalMatchAST__checkLexicalExpression, gClassInfoFor__lexicalCharacterIntervalMatchAST.slotID ()) ;
  enterCategoryMethod__lexicalExpressionAST__checkLexicalExpression ((typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression) category_method__lexicalStringMatchAST__checkLexicalExpression, gClassInfoFor__lexicalStringMatchAST.slotID ()) ;
  enterCategoryMethod__lexicalExpressionAST__checkLexicalExpression ((typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression) category_method__lexicalStringNotMatchAST__checkLexicalExpression, gClassInfoFor__lexicalStringNotMatchAST.slotID ()) ;
  enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument) category_method__lexicalAttributeInputArgumentAST__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalAttributeInputArgumentAST.slotID ()) ;
  enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument) category_method__lexicalCharacterInputArgumentAST__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalCharacterInputArgumentAST.slotID ()) ;
  enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument) category_method__lexicalUnsignedInputArgumentAST__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalUnsignedInputArgumentAST.slotID ()) ;
  enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument) category_method__lexicalCurrentCharacterInputArgumentAST__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalCurrentCharacterInputArgumentAST.slotID ()) ;
  enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument) category_method__lexicalFunctionInputArgumentAST__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalFunctionInputArgumentAST.slotID ()) ;
  enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument) category_method__lexicalAttributeInputArgumentAST__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalAttributeInputArgumentAST.slotID ()) ;
  enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument) category_method__lexicalCharacterInputArgumentAST__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalCharacterInputArgumentAST.slotID ()) ;
  enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument) category_method__lexicalUnsignedInputArgumentAST__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalUnsignedInputArgumentAST.slotID ()) ;
  enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument) category_method__lexicalCurrentCharacterInputArgumentAST__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalCurrentCharacterInputArgumentAST.slotID ()) ;
  enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument) category_method__lexicalFunctionInputArgumentAST__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalFunctionInputArgumentAST.slotID ()) ;
  enterCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument ((typeCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument) category_method__lexicalAttributeInputOutputArgumentAST__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalAttributeInputOutputArgumentAST.slotID ()) ;
  enterCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument ((typeCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument) category_method__lexicalFormalInputArgumentAST__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalFormalInputArgumentAST.slotID ()) ;
  enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction ((typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction) category_method__lexicalStructuredSendInstructionAST__checkLexicalInstruction, gClassInfoFor__lexicalStructuredSendInstructionAST.slotID ()) ;
  enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction ((typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction) category_method__lexicalSimpleSendInstructionAST__checkLexicalInstruction, gClassInfoFor__lexicalSimpleSendInstructionAST.slotID ()) ;
  enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction ((typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction) category_method__lexicalRepeatInstructionAST__checkLexicalInstruction, gClassInfoFor__lexicalRepeatInstructionAST.slotID ()) ;
  enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction ((typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction) category_method__lexicalSelectInstructionAST__checkLexicalInstruction, gClassInfoFor__lexicalSelectInstructionAST.slotID ()) ;
  enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction ((typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction) category_method__lexicalRoutineInstructionAST__checkLexicalInstruction, gClassInfoFor__lexicalRoutineInstructionAST.slotID ()) ;
  enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction ((typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction) category_method__lexicalLogInstructionAST__checkLexicalInstruction, gClassInfoFor__lexicalLogInstructionAST.slotID ()) ;
  enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction ((typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction) category_method__lexicalRewindInstructionAST__checkLexicalInstruction, gClassInfoFor__lexicalRewindInstructionAST.slotID ()) ;
  enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction ((typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction) category_method__lexicalDropInstructionAST__checkLexicalInstruction, gClassInfoFor__lexicalDropInstructionAST.slotID ()) ;
  enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction ((typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction) category_method__lexicalTagInstructionAST__checkLexicalInstruction, gClassInfoFor__lexicalTagInstructionAST.slotID ()) ;
  enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction ((typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction) category_method__lexicalErrorInstructionAST__checkLexicalInstruction, gClassInfoFor__lexicalErrorInstructionAST.slotID ()) ;
  enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction ((typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction) category_method__lexicalWarningInstructionAST__checkLexicalInstruction, gClassInfoFor__lexicalWarningInstructionAST.slotID ()) ;
  enterCategoryMethod__abstractLexicalRuleAST__checkLexicalRule ((typeCategoryMethod__abstractLexicalRuleAST__checkLexicalRule) category_method__lexicalImplicitRuleAST__checkLexicalRule, gClassInfoFor__lexicalImplicitRuleAST.slotID ()) ;
  enterCategoryMethod__abstractLexicalRuleAST__checkLexicalRule ((typeCategoryMethod__abstractLexicalRuleAST__checkLexicalRule) category_method__lexicalExplicitRuleAST__checkLexicalRule, gClassInfoFor__lexicalExplicitRuleAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_lexiqueCompilation (void) {
  gDispatchTableForMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction.free () ;
  gDispatchTableForMethod__lexicalExpressionAST__checkLexicalExpression.free () ;
  gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument.free () ;
  gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument.free () ;
  gDispatchTableForMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument.free () ;
  gDispatchTableForMethod__lexicalInstructionAST__checkLexicalInstruction.free () ;
  gDispatchTableForMethod__abstractLexicalRuleAST__checkLexicalRule.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_lexiqueCompilation (prologueRoutineFor_lexiqueCompilation, epilogueRoutineFor_lexiqueCompilation) ;

//---------------------------------------------------------------------------*

