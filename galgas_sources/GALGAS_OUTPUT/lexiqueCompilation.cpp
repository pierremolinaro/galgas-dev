//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'lexiqueCompilation.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 8th, 2009, at 19h40'30"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "lexiqueCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "lexiqueCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "lexiqueLL1grammar.h"

//--- START OF USER ZONE 2

//---------------------------------------------------------------------------*

//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of wrapper 'lexiqueGenerationTemplates'           *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- File '/lexique_header_template_zone_2.h'

const char * gWrapperFileContent_0_lexiqueGenerationTemplates = // 2381 bytes
  "\n"
  "#ifndef %LEXIQUE_CLASS_NAME%_0_DEFINED\n"
  "#define %LEXIQUE_CLASS_NAME%_0_DEFINED\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#include \"galgas/GGS_lstring.h\"\n"
  "#include \"galgas/GGS_luint.h\"\n"
  "#include \"galgas/GGS_lsint.h\"\n"
  "#include \"galgas/GGS_luint64.h\"\n"
  "#include \"galgas/GGS_lsint64.h\"\n"
  "#include \"galgas/GGS_lchar.h\"\n"
  "#include \"galgas/GGS_ldouble.h\"\n"
  "#include \"galgas/GGS_lbool.h\"\n"
  "#include \"galgas/C_Lexique.h\"\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//                          Lexical scanner class                            *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "class cTokenFor_%LEXIQUE_CLASS_NAME% : public cToken {\n"
  "  %USER_DEFINED_ATTRIBUTE_DECLARATION%\n"
  "\n"
  "  public : cTokenFor_%LEXIQUE_CLASS_NAME% (void) ;\n"
  "} ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//                          Lexical scanner class                            *\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "class %LEXIQUE_CLASS_NAME% : public C_Lexique {\n"
  "//--- Constructors\n"
  "  public : %LEXIQUE_CLASS_NAME% (C_Compiler * inCallerCompiler,\n"
  "                       const C_String & inDependencyFileExtension,\n"
  "                       const C_String & inDependencyFilePath,\n"
  "                       C_galgas_io * inParametersPtr,\n"
  "                       const C_String & inSourceFileName\n"
  "                       COMMA_LOCATION_ARGS) ;\n"
  "\n"
  "  public : %LEXIQUE_CLASS_NAME% (C_Compiler * inCallerCompiler,\n"
  "                       C_galgas_io * inParametersPtr,\n"
  "                       const C_String & inSourceString,\n"
  "                       const C_String & inStringForError\n"
  "                       COMMA_LOCATION_ARGS) ;\n"
  "\n"
  "//--- Declaring a protected virtual destructor enables the compiler to raise\n"
  "//    an error if a direct delete is performed; only the static method\n"
  "//    C_GGS_Object::detachPointer may invoke delete.\n"
  "  #ifndef DO_NOT_GENERATE_CHECKINGS\n"
  "    protected : virtual ~%LEXIQUE_CLASS_NAME% (void) {}\n"
  "  #endif\n"
;

static const cRegularFileWrapper gWrapperFile_0_lexiqueGenerationTemplates = {
  "lexique_header_template_zone_2.h",
  "h",
  gWrapperFileContent_0_lexiqueGenerationTemplates
} ;

//---------------------------------------------------------------------------*

//--- File '/lexique_header_template_zone_3.h'

const char * gWrapperFileContent_1_lexiqueGenerationTemplates = // 1173 bytes
  "\n"
  "//--- Terminal symbols enumeration\n"
  "  public : enum {xml_parsing_lexique_1_,\n"
  "  xml_parsing_lexique_1_comment,\n"
  "  xml_parsing_lexique_1__3C,\n"
  "  xml_parsing_lexique_1__3C_3F,\n"
  "  xml_parsing_lexique_1__3E,\n"
  "  xml_parsing_lexique_1__3F_3E,\n"
  "  xml_parsing_lexique_1__2F_3E,\n"
  "  xml_parsing_lexique_1__3C_2F,\n"
  "  xml_parsing_lexique_1__3D,\n"
  "  xml_parsing_lexique_1_name,\n"
  "  xml_parsing_lexique_1_value} ;\n"
  "\n"
  "//--- Key words table 'xmlDelimitorsList'\n"
  "  public : static sint16 search_into_xmlDelimitorsList (const C_String & inSearchedString) ;\n"
  "\n"
  "  protected : virtual bool parseLexicalToken (void) ;\n"
  "  protected : virtual void appendTerminalMessageToSyntaxErrorMessage (const sint16 numeroTerminal,\n"
  "                                                              C_String & messageErreur) ;\n"
  "\n"
  "//--- Get terminal count\n"
  "  public : virtual sint16 terminalVocabularyCount (void) const { return 10 ; }\n"
  "//--- Get Token String\n"
  "  public : virtual C_String getCurrentTokenString (const cToken * inTokenPtr) const ;\n"
  "//--- Enter Token\n"
  "  protected : void enterToken (const cTokenFor_xml_parsing_lexique & inToken) ;\n"
  "} ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#endif\n"
;

static const cRegularFileWrapper gWrapperFile_1_lexiqueGenerationTemplates = {
  "lexique_header_template_zone_3.h",
  "h",
  gWrapperFileContent_1_lexiqueGenerationTemplates
} ;

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_lexiqueGenerationTemplates_0 [3] = {
  & gWrapperFile_0_lexiqueGenerationTemplates,
  & gWrapperFile_1_lexiqueGenerationTemplates,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_lexiqueGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_lexiqueGenerationTemplates = {
  "",
  2,
  gWrapperAllFiles_lexiqueGenerationTemplates_0,
  0,
  gWrapperAllDirectories_lexiqueGenerationTemplates_0
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//    'headerZone2' template of 'lexiqueGenerationTemplates' filewrapper     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_lexiqueGenerationTemplates_headerZone2 (const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_string& var_cas_USER_DEFINED_ATTRIBUTE_DECLARATION) {
  C_String _result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_USER_DEFINED_ATTRIBUTE_DECLARATION.isBuilt () ;
  if (isBuilt) {
    _result << "\n"
    "#ifndef " ;
    _result << var_cas_LEXIQUE_CLASS_NAME ;
    _result << "_0_DEFINED\n"
    "#define " ;
    _result << var_cas_LEXIQUE_CLASS_NAME ;
    _result << "_0_DEFINED\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "#include \"galgas/GGS_lstring.h\"\n"
    "#include \"galgas/GGS_luint.h\"\n"
    "#include \"galgas/GGS_lsint.h\"\n"
    "#include \"galgas/GGS_luint64.h\"\n"
    "#include \"galgas/GGS_lsint64.h\"\n"
    "#include \"galgas/GGS_lchar.h\"\n"
    "#include \"galgas/GGS_ldouble.h\"\n"
    "#include \"galgas/GGS_lbool.h\"\n"
    "#include \"galgas/C_Lexique.h\"\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                          Lexical scanner class                            *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "class cTokenFor_" ;
    _result << var_cas_LEXIQUE_CLASS_NAME ;
    _result << " : public cToken {\n"
    "  " ;
    _result << var_cas_USER_DEFINED_ATTRIBUTE_DECLARATION ;
    _result << "\n"
    "\n"
    "  public : cTokenFor_" ;
    _result << var_cas_LEXIQUE_CLASS_NAME ;
    _result << " (void) ;\n"
    "} ;\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                          Lexical scanner class                            *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "class " ;
    _result << var_cas_LEXIQUE_CLASS_NAME ;
    _result << " : public C_Lexique {\n"
    "//--- Constructors\n"
    "  public : " ;
    _result << var_cas_LEXIQUE_CLASS_NAME ;
    _result << " (C_Compiler * inCallerCompiler,\n"
    "                       const C_String & inDependencyFileExtension,\n"
    "                       const C_String & inDependencyFilePath,\n"
    "                       C_galgas_io * inParametersPtr,\n"
    "                       const C_String & inSourceFileName\n"
    "                       COMMA_LOCATION_ARGS) ;\n"
    "\n"
    "  public : " ;
    _result << var_cas_LEXIQUE_CLASS_NAME ;
    _result << " (C_Compiler * inCallerCompiler,\n"
    "                       C_galgas_io * inParametersPtr,\n"
    "                       const C_String & inSourceString,\n"
    "                       const C_String & inStringForError\n"
    "                       COMMA_LOCATION_ARGS) ;\n"
    "\n"
    "//--- Declaring a protected virtual destructor enables the compiler to raise\n"
    "//    an error if a direct delete is performed; only the static method\n"
    "//    C_GGS_Object::detachPointer may invoke delete.\n"
    "  #ifndef DO_NOT_GENERATE_CHECKINGS\n"
    "    protected : virtual ~" ;
    _result << var_cas_LEXIQUE_CLASS_NAME ;
    _result << " (void) {}\n"
    "  #endif\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    'headerZone3' template of 'lexiqueGenerationTemplates' filewrapper     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_lexiqueGenerationTemplates_headerZone3 (void) {
  C_String _result ;
  _result << "\n"
  "//--- Terminal symbols enumeration\n"
  "  public : enum {xml_parsing_lexique_1_,\n"
  "  xml_parsing_lexique_1_comment,\n"
  "  xml_parsing_lexique_1__3C,\n"
  "  xml_parsing_lexique_1__3C_3F,\n"
  "  xml_parsing_lexique_1__3E,\n"
  "  xml_parsing_lexique_1__3F_3E,\n"
  "  xml_parsing_lexique_1__2F_3E,\n"
  "  xml_parsing_lexique_1__3C_2F,\n"
  "  xml_parsing_lexique_1__3D,\n"
  "  xml_parsing_lexique_1_name,\n"
  "  xml_parsing_lexique_1_value} ;\n"
  "\n"
  "//--- Key words table 'xmlDelimitorsList'\n"
  "  public : static sint16 search_into_xmlDelimitorsList (const C_String & inSearchedString) ;\n"
  "\n"
  "  protected : virtual bool parseLexicalToken (void) ;\n"
  "  protected : virtual void appendTerminalMessageToSyntaxErrorMessage (const sint16 numeroTerminal,\n"
  "                                                              C_String & messageErreur) ;\n"
  "\n"
  "//--- Get terminal count\n"
  "  public : virtual sint16 terminalVocabularyCount (void) const { return 10 ; }\n"
  "//--- Get Token String\n"
  "  public : virtual C_String getCurrentTokenString (const cToken * inTokenPtr) const ;\n"
  "//--- Enter Token\n"
  "  protected : void enterToken (const cTokenFor_xml_parsing_lexique & inToken) ;\n"
  "} ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#endif\n" ;
  return GGS_string (true, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalSendDefaultAction.checkLexicalDefaultAction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction> gDispatchTableFor__lexicalSendDefaultAction__checkLexicalDefaultAction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__lexicalSendDefaultAction__checkLexicalDefaultAction.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction
findCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__lexicalSendDefaultAction__checkLexicalDefaultAction.count ()) {
    result = gDispatchTableFor__lexicalSendDefaultAction__checkLexicalDefaultAction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (superClassPtr) ;
      gDispatchTableFor__lexicalSendDefaultAction__checkLexicalDefaultAction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalSendTerminalByDefault.checkLexicalDefaultAction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSendTerminalByDefault__checkLexicalDefaultAction (C_Compiler & inLexique,
                                const cPtr_lexicalSendTerminalByDefault * operand_2835,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2835 != NULL) {
    GGS_lexicalTypeList  automatic_var_0 ;
    const GGS_terminalMap  _temp_2943 = var_cas_ioLexiqueAnalysisContext.reader_mTerminalMap (inLexique COMMA_SOURCE_FILE_AT_LINE (55)) ;
    if (_temp_2943.isBuilt ()) {
      _temp_2943 (HERE)->method_searchKey (inLexique, operand_2835->mDefaultSentTerminal, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (55)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalErrorByDefault.checkLexicalDefaultAction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalErrorByDefault__checkLexicalDefaultAction (C_Compiler & inLexique,
                                const cPtr_lexicalErrorByDefault * operand_3129,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3129 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_3244 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_3129->mDefaultErrorMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (63)) ;
    if (NULL != operand_3244) {
      operand_3244->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalExpression.checkLexicalExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalExpression__checkLexicalExpression> gDispatchTableFor__lexicalExpression__checkLexicalExpression ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalExpression__checkLexicalExpression (typeCategoryMethod__lexicalExpression__checkLexicalExpression inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__lexicalExpression__checkLexicalExpression.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalExpression__checkLexicalExpression
findCategoryMethod__lexicalExpression__checkLexicalExpression (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalExpression__checkLexicalExpression result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__lexicalExpression__checkLexicalExpression.count ()) {
    result = gDispatchTableFor__lexicalExpression__checkLexicalExpression (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalExpression__checkLexicalExpression (superClassPtr) ;
      gDispatchTableFor__lexicalExpression__checkLexicalExpression.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@lexicalOrExpression.checkLexicalExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalOrExpression__checkLexicalExpression (C_Compiler & inLexique,
                                const cPtr_lexicalOrExpression * operand_3838,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3838 != NULL) {
    const GGS_lexicalExpression  _temp_3932 = operand_3838->mLeftOperand ;
    if (_temp_3932.isBuilt ()) {
      typeCategoryMethod__lexicalExpression__checkLexicalExpression _method = findCategoryMethod__lexicalExpression__checkLexicalExpression (_temp_3932._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (inLexique, _temp_3932 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (81)) ;
      }
    }
    const GGS_lexicalExpression  _temp_4003 = operand_3838->mRightOperand ;
    if (_temp_4003.isBuilt ()) {
      typeCategoryMethod__lexicalExpression__checkLexicalExpression _method = findCategoryMethod__lexicalExpression__checkLexicalExpression (_temp_4003._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (inLexique, _temp_4003 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (82)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalCharacterMatch.checkLexicalExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterMatch__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalCharacterMatch * operand_4189,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4189 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalCharacterSetMatch.checkLexicalExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterSetMatch__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalCharacterSetMatch * operand_4409,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4409 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@lexicalCharacterIntervalMatch.checkLexicalExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterIntervalMatch__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalCharacterIntervalMatch * operand_4634,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4634 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@lexicalStringMatch.checkLexicalExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStringMatch__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalStringMatch * operand_4848,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4848 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalStringNotMatch.checkLexicalExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStringNotMatch__checkLexicalExpression (C_Compiler & inLexique,
                                const cPtr_lexicalStringNotMatch * operand_5065,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5065 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_5173 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_5065->mErrorMessage, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (118)) ;
    if (NULL != operand_5173) {
      operand_5173->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalRoutineOrFunctionFormalInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument> gDispatchTableFor__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument
findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument.count ()) {
    result = gDispatchTableFor__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (superClassPtr) ;
      gDispatchTableFor__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalAttributeInputArgument * operand_5870,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5870 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  _temp_6115 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (140)) ;
    if (_temp_6115.isBuilt ()) {
      _temp_6115 (HERE)->method_searchKey (inLexique, operand_5870->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (140)) ;
    }
    if (((var_cas_attributeLexicalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_5870->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is ")).operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (147)))).operator_concat (GGS_string (" type, but lexical routine prototype requires "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (149)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (151)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCharacterInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCharacterInputArgument * operand_6669,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6669 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_6669->mCharacter.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal character has @char ")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (164)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (166)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCurrentCharacterInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCurrentCharacterInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCurrentCharacterInputArgument * operand_7282,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7282 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_7282->mLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, current character value has @char ")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (179)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (181)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFunctionInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFunctionInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalFunctionInputArgument * operand_7890,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7890 != NULL) {
    GGS_lexicalFunctionFormalArgumentList  var_cas_lexicalFormalTypeList ;
    GGS_lexicalTypeEnum var_cas_returnedLexicalFormalType ;
    GGS_string var_cas_replacementFunctionName ;
    const GGS_lexicalFunctionMap  _temp_8236 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (194)) ;
    if (_temp_8236.isBuilt ()) {
      _temp_8236 (HERE)->method_searchKey (inLexique, operand_7890->mFunctionName, var_cas_lexicalFormalTypeList, var_cas_returnedLexicalFormalType, var_cas_replacementFunctionName COMMA_SOURCE_FILE_AT_LINE (194)) ;
    }
    if (((var_cas_replacementFunctionName).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
      operand_7890->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("obsolete lexical function, replaced by '")).operator_concat (var_cas_replacementFunctionName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (202)) ;
    }
    if (((var_cas_returnedLexicalFormalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_7890->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, the function returns an ")).operator_concat (var_cas_returnedLexicalFormalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (207)))).operator_concat (GGS_string (" value, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (209)))).operator_concat (GGS_string (" value")) COMMA_SOURCE_FILE_AT_LINE (211)) ;
    }
    if (((var_cas_lexicalFormalTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (213))).operator_isNotEqual (operand_7890->mFunctionActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (213)))).isBuiltAndTrue ()) {
      operand_7890->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical function names ")).operator_concat (operand_7890->mFunctionActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (215)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (215)))).operator_concat (GGS_string (" actual argument(s), but the prototype requires "))).operator_concat (var_cas_lexicalFormalTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (217)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (217)))).operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (218)) ;
    }
    {
      GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_9332 (var_cas_lexicalFormalTypeList, true) ;
      const GGS_lexicalFunctionFormalArgumentList::cElement * operand_9332 = NULL ;
      GGS_lexicalFunctionCallActualArgumentList::cEnumerator enumerator_9361 (operand_7890->mFunctionActualArgumentList, true) ;
      const GGS_lexicalFunctionCallActualArgumentList::cElement * operand_9361 = NULL ;
      while (((operand_9332 = enumerator_9332.nextObject ()))
          && ((operand_9361 = enumerator_9361.nextObject ()))) {
        macroValidPointer (operand_9332) ;
        macroValidPointer (operand_9361) ;
        const GGS_lexicalRoutineOrFunctionFormalInputArgument  _temp_9430 = operand_9361->mLexicalActualInputArgument ;
        if (_temp_9430.isBuilt ()) {
          typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument _method = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (_temp_9430._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (inLexique, _temp_9430 (HERE), var_cas_ioLexiqueAnalysisContext, operand_9332->mLexicalType COMMA_SOURCE_FILE_AT_LINE (221)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalRoutineOrFunctionFormalInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument> gDispatchTableFor__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument
findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument.count ()) {
    result = gDispatchTableFor__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (superClassPtr) ;
      gDispatchTableFor__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalAttributeInputArgument * operand_10132,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10132 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  _temp_10377 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (245)) ;
    if (_temp_10377.isBuilt ()) {
      _temp_10377 (HERE)->method_searchKey (inLexique, operand_10132->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (245)) ;
    }
    if (((var_cas_attributeLexicalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_10132->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is ")).operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (252)))).operator_concat (GGS_string (" type, but lexical routine prototype requires "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (254)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (256)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCharacterInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCharacterInputArgument * operand_10930,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10930 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_10930->mCharacter.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal character has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (269)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (271)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalUnsignedInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalUnsignedInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalUnsignedInputArgument * operand_11533,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11533 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_11533->mUnsigned.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal unsigned value has @uint")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (284)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (286)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCurrentCharacterInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCurrentCharacterInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCurrentCharacterInputArgument * operand_12148,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12148 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_12148->mLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, current character value has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (299)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (301)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFunctionInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFunctionInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalFunctionInputArgument * operand_12754,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12754 != NULL) {
    GGS_lexicalFunctionFormalArgumentList  var_cas_lexicalFormalTypeList ;
    GGS_lexicalTypeEnum var_cas_returnedLexicalFormalType ;
    GGS_string var_cas_replacementFunctionName ;
    const GGS_lexicalFunctionMap  _temp_13100 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (314)) ;
    if (_temp_13100.isBuilt ()) {
      _temp_13100 (HERE)->method_searchKey (inLexique, operand_12754->mFunctionName, var_cas_lexicalFormalTypeList, var_cas_returnedLexicalFormalType, var_cas_replacementFunctionName COMMA_SOURCE_FILE_AT_LINE (314)) ;
    }
    if (((var_cas_replacementFunctionName).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
      operand_12754->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("obsolete lexical function, replaced by '")).operator_concat (var_cas_replacementFunctionName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (322)) ;
    }
    if (((var_cas_returnedLexicalFormalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_12754->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, the function returns an ")).operator_concat (var_cas_returnedLexicalFormalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (327)))).operator_concat (GGS_string (" value, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (329)))).operator_concat (GGS_string (" value")) COMMA_SOURCE_FILE_AT_LINE (331)) ;
    }
    if (((var_cas_lexicalFormalTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (333))).operator_isNotEqual (operand_12754->mFunctionActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (333)))).isBuiltAndTrue ()) {
      operand_12754->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical function names ")).operator_concat (operand_12754->mFunctionActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (335)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (335)))).operator_concat (GGS_string (" actual argument(s), but the prototype requires "))).operator_concat (var_cas_lexicalFormalTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (337)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (337)))).operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (338)) ;
    }
    {
      GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_14196 (var_cas_lexicalFormalTypeList, true) ;
      const GGS_lexicalFunctionFormalArgumentList::cElement * operand_14196 = NULL ;
      GGS_lexicalFunctionCallActualArgumentList::cEnumerator enumerator_14225 (operand_12754->mFunctionActualArgumentList, true) ;
      const GGS_lexicalFunctionCallActualArgumentList::cElement * operand_14225 = NULL ;
      while (((operand_14196 = enumerator_14196.nextObject ()))
          && ((operand_14225 = enumerator_14225.nextObject ()))) {
        macroValidPointer (operand_14196) ;
        macroValidPointer (operand_14225) ;
        const GGS_lexicalRoutineOrFunctionFormalInputArgument  _temp_14294 = operand_14225->mLexicalActualInputArgument ;
        if (_temp_14294.isBuilt ()) {
          typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument _method = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (_temp_14294._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (inLexique, _temp_14294 (HERE), var_cas_ioLexiqueAnalysisContext, operand_14196->mLexicalType COMMA_SOURCE_FILE_AT_LINE (341)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@abstractLexicalRoutineActualArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument> gDispatchTableFor__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument
findCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument.count ()) {
    result = gDispatchTableFor__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (superClassPtr) ;
      gDispatchTableFor__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputOutputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputOutputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalAttributeInputOutputArgument * operand_15061,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalArgumentMode  var_cas_inLexicalRoutineFormalArgumentMode,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15061 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  _temp_15365 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (367)) ;
    if (_temp_15365.isBuilt ()) {
      _temp_15365 (HERE)->method_searchKey (inLexique, operand_15061->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (367)) ;
    }
    if (((var_cas_attributeLexicalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_15061->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is ")).operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (374)))).operator_concat (GGS_string (" type, but lexical routine prototype requires "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (376)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (378)) ;
    }
    if (((var_cas_inLexicalRoutineFormalArgumentMode).operator_isNotEqual (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
      operand_15061->mActualPassingModeLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the output mode (!) is required here, not an output/input mode") COMMA_SOURCE_FILE_AT_LINE (382)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFormalInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFormalInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalFormalInputArgument * operand_16148,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalArgumentMode  var_cas_inLexicalRoutineFormalArgumentMode,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16148 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalRoutineOrFunctionFormalInputArgument  _temp_16464 = operand_16148->mRoutineOrFunctionFormalInputArgument ;
    if (_temp_16464.isBuilt ()) {
      typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument _method = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (_temp_16464._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (inLexique, _temp_16464 (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_inLexicalRoutineFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (394)) ;
      }
    }
    if (((var_cas_inLexicalRoutineFormalArgumentMode).operator_isNotEqual (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
      operand_16148->mActualPassingModeLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the output/input mode (!\?) is required here, not an input mode") COMMA_SOURCE_FILE_AT_LINE (401)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalInstruction.checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalInstruction__checkLexicalInstruction> gDispatchTableFor__lexicalInstruction__checkLexicalInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalInstruction__checkLexicalInstruction (typeCategoryMethod__lexicalInstruction__checkLexicalInstruction inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__lexicalInstruction__checkLexicalInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalInstruction__checkLexicalInstruction
findCategoryMethod__lexicalInstruction__checkLexicalInstruction (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalInstruction__checkLexicalInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__lexicalInstruction__checkLexicalInstruction.count ()) {
    result = gDispatchTableFor__lexicalInstruction__checkLexicalInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (superClassPtr) ;
      gDispatchTableFor__lexicalInstruction__checkLexicalInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalStructuredSendInstruction.checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStructuredSendInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalStructuredSendInstruction * operand_17293,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17293 != NULL) {
    {
      GGS_lexicalSendSearchList::cEnumerator enumerator_17381 (operand_17293->mLexicalSendSearchList, true) ;
      const GGS_lexicalSendSearchList::cElement * operand_17381 = NULL ;
      while (((operand_17381 = enumerator_17381.nextObject ()))) {
        macroValidPointer (operand_17381) ;
        GGS_lexicalTypeEnum automatic_var_1 ;
        const GGS_lexicalAttributeMap  _temp_17447 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (418)) ;
        if (_temp_17447.isBuilt ()) {
          _temp_17447 (HERE)->method_searchKey (inLexique, operand_17381->mAttributeName, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (418)) ;
        }
      }
    }
    const GGS_lexicalSendDefaultAction  _temp_17540 = operand_17293->mLexicalSendDefaultAction ;
    if (_temp_17540.isBuilt ()) {
      typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction _method = findCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (_temp_17540._galgasObjectRunTimeInfo ()) ;
      if (_method != NULL) {
        _method (inLexique, _temp_17540 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (420)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@lexicalSimpleSendInstruction.checkLexicalInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSimpleSendInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalSimpleSendInstruction * operand_17733,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17733 != NULL) {
    GGS_lexicalTypeList  automatic_var_2 ;
    const GGS_terminalMap  _temp_17841 = var_cas_ioLexiqueAnalysisContext.reader_mTerminalMap (inLexique COMMA_SOURCE_FILE_AT_LINE (428)) ;
    if (_temp_17841.isBuilt ()) {
      _temp_17841 (HERE)->method_searchKey (inLexique, operand_17733->mSentTerminal, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (428)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalRepeatInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRepeatInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalRepeatInstruction * operand_18021,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18021 != NULL) {
    {
      GGS_lexicalWhileBranchList::cEnumerator enumerator_18110 (operand_18021->mLexicalWhileBranchList, true) ;
      const GGS_lexicalWhileBranchList::cElement * operand_18110 = NULL ;
      while (((operand_18110 = enumerator_18110.nextObject ()))) {
        macroValidPointer (operand_18110) ;
        const GGS_lexicalExpression  _temp_18158 = operand_18110->mWhileExpression ;
        if (_temp_18158.isBuilt ()) {
          typeCategoryMethod__lexicalExpression__checkLexicalExpression _method = findCategoryMethod__lexicalExpression__checkLexicalExpression (_temp_18158._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (inLexique, _temp_18158 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (437)) ;
          }
        }
        {
          GGS_lexicalInstructionList::cEnumerator enumerator_18223 (operand_18110->mWhileInstructionList, true) ;
          const GGS_lexicalInstructionList::cElement * operand_18223 = NULL ;
          while (((operand_18223 = enumerator_18223.nextObject ()))) {
            macroValidPointer (operand_18223) ;
            const GGS_lexicalInstruction  _temp_18270 = operand_18223->mInstruction ;
            if (_temp_18270.isBuilt ()) {
              typeCategoryMethod__lexicalInstruction__checkLexicalInstruction _method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (_temp_18270._galgasObjectRunTimeInfo ()) ;
              if (_method != NULL) {
                _method (inLexique, _temp_18270 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (439)) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_lexicalInstructionList::cEnumerator enumerator_18370 (operand_18021->mRepeatedInstructionList, true) ;
      const GGS_lexicalInstructionList::cElement * operand_18370 = NULL ;
      while (((operand_18370 = enumerator_18370.nextObject ()))) {
        macroValidPointer (operand_18370) ;
        const GGS_lexicalInstruction  _temp_18415 = operand_18370->mInstruction ;
        if (_temp_18415.isBuilt ()) {
          typeCategoryMethod__lexicalInstruction__checkLexicalInstruction _method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (_temp_18415._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (inLexique, _temp_18415 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (443)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalSelectInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSelectInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalSelectInstruction * operand_18621,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18621 != NULL) {
    {
      GGS_lexicalSelectBranchList::cEnumerator enumerator_18711 (operand_18621->mLexicalSelectBranchList, true) ;
      const GGS_lexicalSelectBranchList::cElement * operand_18711 = NULL ;
      while (((operand_18711 = enumerator_18711.nextObject ()))) {
        macroValidPointer (operand_18711) ;
        {
          GGS_lexicalInstructionList::cEnumerator enumerator_18749 (operand_18711->mSelectInstructionList, true) ;
          const GGS_lexicalInstructionList::cElement * operand_18749 = NULL ;
          while (((operand_18749 = enumerator_18749.nextObject ()))) {
            macroValidPointer (operand_18749) ;
            const GGS_lexicalInstruction  _temp_18796 = operand_18749->mInstruction ;
            if (_temp_18796.isBuilt ()) {
              typeCategoryMethod__lexicalInstruction__checkLexicalInstruction _method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (_temp_18796._galgasObjectRunTimeInfo ()) ;
              if (_method != NULL) {
                _method (inLexique, _temp_18796 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (454)) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_lexicalInstructionList::cEnumerator enumerator_18895 (operand_18621->mDefaultInstructionList, true) ;
      const GGS_lexicalInstructionList::cElement * operand_18895 = NULL ;
      while (((operand_18895 = enumerator_18895.nextObject ()))) {
        macroValidPointer (operand_18895) ;
        const GGS_lexicalInstruction  _temp_18940 = operand_18895->mInstruction ;
        if (_temp_18940.isBuilt ()) {
          typeCategoryMethod__lexicalInstruction__checkLexicalInstruction _method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (_temp_18940._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (inLexique, _temp_18940 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (458)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalRoutineInstruction.checkLexicalInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRoutineInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalRoutineInstruction * operand_19147,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19147 != NULL) {
    GGS_lexicalRoutineFormalArgumentList  var_cas_lexicalRoutineFormalArgumentList ;
    GGS_stringlist  var_cas_routineErrorMessageList ;
    GGS_string var_cas_replacementRoutineName ;
    const GGS_lexicalRoutineMap  _temp_19414 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalRoutineMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (470)) ;
    if (_temp_19414.isBuilt ()) {
      _temp_19414 (HERE)->method_searchKey (inLexique, operand_19147->mRoutineName, var_cas_lexicalRoutineFormalArgumentList, var_cas_routineErrorMessageList, var_cas_replacementRoutineName COMMA_SOURCE_FILE_AT_LINE (470)) ;
    }
    if (((var_cas_replacementRoutineName).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
      operand_19147->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("obsolete lexical routine, replaced by '")).operator_concat (var_cas_replacementRoutineName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (478)) ;
    }
    if (((var_cas_lexicalRoutineFormalArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (481))).operator_isNotEqual (operand_19147->mActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (481)))).isBuiltAndTrue ()) {
      operand_19147->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical routine call names ")).operator_concat (operand_19147->mActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (483)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (483)))).operator_concat (GGS_string (" actual argument(s), but the lexical routine prototype requires "))).operator_concat (var_cas_lexicalRoutineFormalArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (485)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (485)))).operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (486)) ;
    }
    {
      GGS_lexicalRoutineFormalArgumentList::cEnumerator enumerator_20190 (var_cas_lexicalRoutineFormalArgumentList, true) ;
      const GGS_lexicalRoutineFormalArgumentList::cElement * operand_20190 = NULL ;
      GGS_lexicalRoutineCallActualArgumentList::cEnumerator enumerator_20211 (operand_19147->mActualArgumentList, true) ;
      const GGS_lexicalRoutineCallActualArgumentList::cElement * operand_20211 = NULL ;
      while (((operand_20190 = enumerator_20190.nextObject ()))
          && ((operand_20211 = enumerator_20211.nextObject ()))) {
        macroValidPointer (operand_20190) ;
        macroValidPointer (operand_20211) ;
        const GGS_abstractLexicalRoutineActualArgument  _temp_20281 = operand_20211->mLexicalRoutineActualArgument ;
        if (_temp_20281.isBuilt ()) {
          typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument _method = findCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (_temp_20281._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (inLexique, _temp_20281 (HERE), var_cas_ioLexiqueAnalysisContext, operand_20190->mLexicalFormalArgumentMode, operand_20190->mLexicalFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (489)) ;
          }
        }
      }
    }
    if (((var_cas_routineErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (496))).operator_isNotEqual (operand_19147->mErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (496)))).isBuiltAndTrue ()) {
      operand_19147->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical routine call names ")).operator_concat (operand_19147->mErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (498)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (498)))).operator_concat (GGS_string (" error message(s), but the lexical routine prototype requires "))).operator_concat (var_cas_routineErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (500)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (500)))).operator_concat (GGS_string (" error message(s)")) COMMA_SOURCE_FILE_AT_LINE (501)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_20840 (operand_19147->mErrorMessageList, true) ;
      const GGS_lstringlist::cElement * operand_20840 = NULL ;
      while (((operand_20840 = enumerator_20840.nextObject ()))) {
        macroValidPointer (operand_20840) ;
        elementOf_GGS_lexicalMessageMap * operand_20905 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_20840->mValue, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (504)) ;
        if (NULL != operand_20905) {
          operand_20905->mInfo.mMessageIsUsed = GGS_bool (true) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalLogInstruction.checkLexicalInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalLogInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalLogInstruction * operand_21148,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21148 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalRewindInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRewindInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalRewindInstruction * operand_21369,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21369 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalDropInstruction.checkLexicalInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalDropInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalDropInstruction * operand_21588,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21588 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalTagInstruction.checkLexicalInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalTagInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalTagInstruction * operand_21806,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21806 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalErrorInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalErrorInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalErrorInstruction * operand_22026,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22026 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_22134 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_22026->mErrorMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (543)) ;
    if (NULL != operand_22134) {
      operand_22134->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalWarningInstruction.checkLexicalInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalWarningInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalWarningInstruction * operand_22368,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22368 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_22476 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_22368->mWarningMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (553)) ;
    if (NULL != operand_22476) {
      operand_22476->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@abstractLexicalRule.checkLexicalRule'  *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__abstractLexicalRule__checkLexicalRule> gDispatchTableFor__abstractLexicalRule__checkLexicalRule ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__abstractLexicalRule__checkLexicalRule (typeCategoryMethod__abstractLexicalRule__checkLexicalRule inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__abstractLexicalRule__checkLexicalRule.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__abstractLexicalRule__checkLexicalRule
findCategoryMethod__abstractLexicalRule__checkLexicalRule (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__abstractLexicalRule__checkLexicalRule result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableFor__abstractLexicalRule__checkLexicalRule.count ()) {
    result = gDispatchTableFor__abstractLexicalRule__checkLexicalRule (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__abstractLexicalRule__checkLexicalRule (superClassPtr) ;
      gDispatchTableFor__abstractLexicalRule__checkLexicalRule.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@lexicalImplicitRule.checkLexicalRule'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalImplicitRule__checkLexicalRule (C_Compiler &,
                                const cPtr_lexicalImplicitRule * operand_23051,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23051 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@lexicalExplicitRule.checkLexicalRule'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalExplicitRule__checkLexicalRule (C_Compiler & inLexique,
                                const cPtr_lexicalExplicitRule * operand_23260,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23260 != NULL) {
    {
      GGS_lexicalInstructionList::cEnumerator enumerator_23342 (operand_23260->mInstructionList, true) ;
      const GGS_lexicalInstructionList::cElement * operand_23342 = NULL ;
      while (((operand_23342 = enumerator_23342.nextObject ()))) {
        macroValidPointer (operand_23342) ;
        const GGS_lexicalInstruction  _temp_23387 = operand_23342->mInstruction ;
        if (_temp_23387.isBuilt ()) {
          typeCategoryMethod__lexicalInstruction__checkLexicalInstruction _method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (_temp_23387._galgasObjectRunTimeInfo ()) ;
          if (_method != NULL) {
            _method (inLexique, _temp_23387 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (579)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "compileLexiqueComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileLexiqueComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  var_cas_inOutputDirectory COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileLexiqueComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lexiqueComponentRoot  var_cas_lexiqueComponentRoot ;
  const GGS_string _depExtension = GGS_string ("") ;
  const GGS_string _depPath = GGS_string ("") ;
  if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
    lexiqueLL1grammar::_performSourceFileParsing_ (inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_inSourceFile,
                                  var_cas_lexiqueComponentRoot
                                  COMMA_SOURCE_FILE_AT_LINE (592)) ;
  }
  GGS_lstring  var_cas_componentName ;
  var_cas_componentName = var_cas_lexiqueComponentRoot.reader_mLexiqueComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (594)) ;
  GGS_string var_cas_basename ;
  var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (595)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (595)) ;
  if (((var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (596))).operator_isNotEqual (var_cas_basename)).isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS checks "
      "the component name ('")).operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (598)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (600)) ;
  }
  GGS_lexicalTypeMap  var_cas_lexicalTypeMap ;
  var_cas_lexicalTypeMap = GGS_lexicalTypeMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (604)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("char"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (605)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (606)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint64"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (607)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (608)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint64"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint64 (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (609)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("double"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_double (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (610)) ;
  GGS_lexicalRoutineMap  var_cas_lexicalRoutineMap ;
  ::routine_buildLexicalRoutineMap (inLexique,  var_cas_lexicalRoutineMap COMMA_SOURCE_FILE_AT_LINE (613)) ;
  GGS_lexicalFunctionMap  var_cas_lexicalFunctionMap ;
  ::routine_buildLexicalFunctionMap (inLexique,  var_cas_lexicalFunctionMap COMMA_SOURCE_FILE_AT_LINE (616)) ;
  GGS_lexiqueAnalysisContext var_cas_lexiqueAnalysisContext ;
  var_cas_lexiqueAnalysisContext = GGS_lexiqueAnalysisContext::constructor_new (var_cas_lexicalRoutineMap, var_cas_lexicalFunctionMap, GGS_lexicalMessageMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_terminalMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_lexicalAttributeMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_lexicalExplicitTokenListMapMap ::constructor_emptyMap (inLexique COMMA_HERE)) ;
  {
    GGS_lexicalAttributeList::cEnumerator enumerator_25859 (var_cas_lexiqueComponentRoot.reader_mLexicalAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (626)), true) ;
    const GGS_lexicalAttributeList::cElement * operand_25859 = NULL ;
    while (((operand_25859 = enumerator_25859.nextObject ()))) {
      macroValidPointer (operand_25859) ;
      if ((var_cas_lexicalTypeMap.reader_hasKey (inLexique, operand_25859->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (627)) COMMA_SOURCE_FILE_AT_LINE (627))).isBuiltAndTrue ()) {
        GGS_lexicalTypeEnum var_cas_lexicalType ;
        const GGS_lexicalTypeMap  _temp_26030 = var_cas_lexicalTypeMap ;
        if (_temp_26030.isBuilt ()) {
          _temp_26030 (HERE)->method_searchKey (inLexique, operand_25859->mTypeName, var_cas_lexicalType COMMA_SOURCE_FILE_AT_LINE (629)) ;
        }
        var_cas_lexiqueAnalysisContext.mLexicalAttributeMap.modifier_insertKey (inLexique, operand_25859->mName, var_cas_lexicalType COMMA_SOURCE_FILE_AT_LINE (630)) ;
      }else{
        GGS_string var_cas_m ;
        var_cas_m = GGS_string ("") ;
        var_cas_m.appendCString ("the @") ;
        var_cas_m.dotAssign_operation (operand_25859->mTypeName) ;
        var_cas_m.appendCString (" type is not a valid lexical attribute type; are allowed:") ;
        GGS_bool var_cas_firstLoop ;
        var_cas_firstLoop = GGS_bool (true) ;
        {
          GGS_lexicalTypeMap::cEnumerator enumerator_26332 (var_cas_lexicalTypeMap, true) ;
          const GGS_lexicalTypeMap::cElement * operand_26332 = enumerator_26332.nextObject () ;
          if ((operand_26332 != NULL)) {
            bool _foreach_loop_26332 ;
            do{
              macroValidPointer (operand_26332) ;
              var_cas_m.appendCString (" @") ;
              var_cas_m.dotAssign_operation (operand_26332->mKey) ;
              operand_26332 = enumerator_26332.nextObject () ;
              _foreach_loop_26332 = ((operand_26332 != NULL)) ;
              if (_foreach_loop_26332) {
                var_cas_m.appendCString (",") ;
              }
            }while (_foreach_loop_26332) ;
          }
        }
        operand_25859->mTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_m COMMA_SOURCE_FILE_AT_LINE (641)) ;
      }
    }
  }
  {
    GGS_terminalDeclarationList::cEnumerator enumerator_26542 (var_cas_lexiqueComponentRoot.reader_mTerminalDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (644)), true) ;
    const GGS_terminalDeclarationList::cElement * operand_26542 = NULL ;
    while (((operand_26542 = enumerator_26542.nextObject ()))) {
      macroValidPointer (operand_26542) ;
      GGS_lexicalTypeList  var_cas_argumentTypeList ;
      var_cas_argumentTypeList = GGS_lexicalTypeList ::constructor_emptyList () ;
      {
        GGS_lstringlist::cEnumerator enumerator_26674 (operand_26542->mSentAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_26674 = NULL ;
        while (((operand_26674 = enumerator_26674.nextObject ()))) {
          macroValidPointer (operand_26674) ;
          GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
          const GGS_lexicalAttributeMap  _temp_26813 = var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (648)) ;
          if (_temp_26813.isBuilt ()) {
            _temp_26813 (HERE)->method_searchKey (inLexique, operand_26674->mValue, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (648)) ;
          }
          var_cas_argumentTypeList._addAssign_operation (var_cas_attributeLexicalType) ;
        }
      }
      var_cas_lexiqueAnalysisContext.mTerminalMap.modifier_insertKey (inLexique, operand_26542->mName, var_cas_argumentTypeList COMMA_SOURCE_FILE_AT_LINE (651)) ;
    }
  }
  {
    GGS_lexicalListDeclarationList::cEnumerator enumerator_27031 (var_cas_lexiqueComponentRoot.reader_mLexicalListDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (653)), true) ;
    const GGS_lexicalListDeclarationList::cElement * operand_27031 = NULL ;
    while (((operand_27031 = enumerator_27031.nextObject ()))) {
      macroValidPointer (operand_27031) ;
      GGS_lexicalTypeList  var_cas_argumentTypeList ;
      var_cas_argumentTypeList = GGS_lexicalTypeList ::constructor_emptyList () ;
      {
        GGS_lstringlist::cEnumerator enumerator_27166 (operand_27031->mSentAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_27166 = NULL ;
        while (((operand_27166 = enumerator_27166.nextObject ()))) {
          macroValidPointer (operand_27166) ;
          GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
          const GGS_lexicalAttributeMap  _temp_27304 = var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (657)) ;
          if (_temp_27304.isBuilt ()) {
            _temp_27304 (HERE)->method_searchKey (inLexique, operand_27166->mValue, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (657)) ;
          }
          var_cas_argumentTypeList._addAssign_operation (var_cas_attributeLexicalType) ;
        }
      }
      GGS_lexicalExplicitTokenListMap  var_cas_lexicalTokenListMap ;
      var_cas_lexicalTokenListMap = GGS_lexicalExplicitTokenListMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      {
        GGS_lexicalListEntryList::cEnumerator enumerator_27502 (operand_27031->mEntryList, true) ;
        const GGS_lexicalListEntryList::cElement * operand_27502 = NULL ;
        while (((operand_27502 = enumerator_27502.nextObject ()))) {
          macroValidPointer (operand_27502) ;
          var_cas_lexiqueAnalysisContext.mTerminalMap.modifier_insertKey (inLexique, operand_27502->mTerminalSpelling, var_cas_argumentTypeList COMMA_SOURCE_FILE_AT_LINE (662)) ;
          var_cas_lexicalTokenListMap.modifier_insertKey (inLexique, operand_27502->mEntrySpelling, operand_27502->mTerminalSpelling, operand_27502->mFeatureList COMMA_SOURCE_FILE_AT_LINE (663)) ;
        }
      }
      var_cas_lexiqueAnalysisContext.mLexicalTokenListMapMap.modifier_insertKey (inLexique, operand_27031->mName, var_cas_lexicalTokenListMap COMMA_SOURCE_FILE_AT_LINE (665)) ;
    }
  }
  {
    GGS_lexicalMessageDeclarationList::cEnumerator enumerator_27891 (var_cas_lexiqueComponentRoot.reader_mLexicalMessageDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (668)), true) ;
    const GGS_lexicalMessageDeclarationList::cElement * operand_27891 = NULL ;
    while (((operand_27891 = enumerator_27891.nextObject ()))) {
      macroValidPointer (operand_27891) ;
      var_cas_lexiqueAnalysisContext.mLexicalMessageMap.modifier_insertKey (inLexique, operand_27891->mMessageName, operand_27891->mMessageValue, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (669)) ;
    }
  }
  {
    GGS_lexicalRuleList::cEnumerator enumerator_28125 (var_cas_lexiqueComponentRoot.reader_mLexicalRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (672)), true) ;
    const GGS_lexicalRuleList::cElement * operand_28125 = NULL ;
    while (((operand_28125 = enumerator_28125.nextObject ()))) {
      macroValidPointer (operand_28125) ;
      const GGS_abstractLexicalRule  _temp_28201 = operand_28125->mLexicalRule ;
      if (_temp_28201.isBuilt ()) {
        typeCategoryMethod__abstractLexicalRule__checkLexicalRule _method = findCategoryMethod__abstractLexicalRule__checkLexicalRule (_temp_28201._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (inLexique, _temp_28201 (HERE), var_cas_lexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (673)) ;
        }
      }
    }
  }
  {
    GGS_lexicalMessageMap::cEnumerator enumerator_28323 (var_cas_lexiqueAnalysisContext.reader_mLexicalMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (676)), true) ;
    const GGS_lexicalMessageMap::cElement * operand_28323 = NULL ;
    while (((operand_28323 = enumerator_28323.nextObject ()))) {
      macroValidPointer (operand_28323) ;
      if (((operand_28323->mInfo.mMessageIsUsed).operator_not ()).isBuiltAndTrue ()) {
        operand_28323->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("unused message") COMMA_SOURCE_FILE_AT_LINE (678)) ;
      }
    }
  }
  GGS_string var_cas_lexiqueClassName ;
  var_cas_lexiqueClassName = var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (682)) ;
  GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string (".h")), GGS_string ("//"), GGS_string ("\n"
    "\n"), _template_filewrapper_lexiqueGenerationTemplates_headerZone2 (var_cas_lexiqueClassName, GGS_string ("")), GGS_string ("\n"
    "\n"), _template_filewrapper_lexiqueGenerationTemplates_headerZone3 () COMMA_SOURCE_FILE_AT_LINE (684)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileLexiqueComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_lexiqueCompilation (void) {
 enterCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction ((typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction) category_method__lexicalSendTerminalByDefault__checkLexicalDefaultAction, gClassInfoFor__lexicalSendTerminalByDefault.slotID ()) ;
 enterCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction ((typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction) category_method__lexicalErrorByDefault__checkLexicalDefaultAction, gClassInfoFor__lexicalErrorByDefault.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalOrExpression__checkLexicalExpression, gClassInfoFor__lexicalOrExpression.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalCharacterMatch__checkLexicalExpression, gClassInfoFor__lexicalCharacterMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalCharacterSetMatch__checkLexicalExpression, gClassInfoFor__lexicalCharacterSetMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalCharacterIntervalMatch__checkLexicalExpression, gClassInfoFor__lexicalCharacterIntervalMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalStringMatch__checkLexicalExpression, gClassInfoFor__lexicalStringMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalStringNotMatch__checkLexicalExpression, gClassInfoFor__lexicalStringNotMatch.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalAttributeInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalAttributeInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalCharacterInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalCharacterInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalCurrentCharacterInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalCurrentCharacterInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalFunctionInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalFunctionInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalAttributeInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalAttributeInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalCharacterInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalCharacterInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalUnsignedInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalUnsignedInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalCurrentCharacterInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalCurrentCharacterInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalFunctionInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalFunctionInputArgument.slotID ()) ;
 enterCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument) category_method__lexicalAttributeInputOutputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalAttributeInputOutputArgument.slotID ()) ;
 enterCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument) category_method__lexicalFormalInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalFormalInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalStructuredSendInstruction__checkLexicalInstruction, gClassInfoFor__lexicalStructuredSendInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalSimpleSendInstruction__checkLexicalInstruction, gClassInfoFor__lexicalSimpleSendInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalRepeatInstruction__checkLexicalInstruction, gClassInfoFor__lexicalRepeatInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalSelectInstruction__checkLexicalInstruction, gClassInfoFor__lexicalSelectInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalRoutineInstruction__checkLexicalInstruction, gClassInfoFor__lexicalRoutineInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalLogInstruction__checkLexicalInstruction, gClassInfoFor__lexicalLogInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalRewindInstruction__checkLexicalInstruction, gClassInfoFor__lexicalRewindInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalDropInstruction__checkLexicalInstruction, gClassInfoFor__lexicalDropInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalTagInstruction__checkLexicalInstruction, gClassInfoFor__lexicalTagInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalErrorInstruction__checkLexicalInstruction, gClassInfoFor__lexicalErrorInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalWarningInstruction__checkLexicalInstruction, gClassInfoFor__lexicalWarningInstruction.slotID ()) ;
 enterCategoryMethod__abstractLexicalRule__checkLexicalRule ((typeCategoryMethod__abstractLexicalRule__checkLexicalRule) category_method__lexicalImplicitRule__checkLexicalRule, gClassInfoFor__lexicalImplicitRule.slotID ()) ;
 enterCategoryMethod__abstractLexicalRule__checkLexicalRule ((typeCategoryMethod__abstractLexicalRule__checkLexicalRule) category_method__lexicalExplicitRule__checkLexicalRule, gClassInfoFor__lexicalExplicitRule.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_lexiqueCompilation (prologueRoutineFor_lexiqueCompilation,
                                   NULL) ;

//---------------------------------------------------------------------------*

