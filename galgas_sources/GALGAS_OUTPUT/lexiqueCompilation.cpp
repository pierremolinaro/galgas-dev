//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'lexiqueCompilation.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      october 28th, 2010, at 0h2'54"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "lexiqueCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "lexiqueCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "lexiqueLL1grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalSendDefaultActionAST.checkLexicalDefaultAction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction> gDispatchTableForMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction (typeCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction
findCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction.count ()) {
    result = gDispatchTableForMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction (superClassPtr) ;
      gDispatchTableForMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalSendTerminalByDefaultAST.checkLexicalDefaultAction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSendTerminalByDefaultAST__checkLexicalDefaultAction (C_CompilerEx & inLexique,
                                const cPtr_lexicalSendTerminalByDefaultAST * operand_2607,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2607 != NULL) {
    GGS_lexicalSentValueList  automatic_var_2741_0 ;
    const GGS_terminalMap  temp_2715 = var_cas_ioLexiqueAnalysisContext.reader_mTerminalMap (inLexique COMMA_SOURCE_FILE_AT_LINE (48)) ;
    if (temp_2715.isBuilt ()) {
      temp_2715 (HERE)->method_searchKey (inLexique, operand_2607->mDefaultSentTerminal, automatic_var_2741_0 COMMA_SOURCE_FILE_AT_LINE (48)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@lexicalErrorByDefaultAST.checkLexicalDefaultAction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalErrorByDefaultAST__checkLexicalDefaultAction (C_CompilerEx & inLexique,
                                const cPtr_lexicalErrorByDefaultAST * operand_2904,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2904 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_3013 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_2904->mDefaultErrorMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (56)) ;
    if (NULL != operand_3013) {
      operand_3013->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalExpressionAST.checkLexicalExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression> gDispatchTableForMethod__lexicalExpressionAST__checkLexicalExpression ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalExpressionAST__checkLexicalExpression (typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__lexicalExpressionAST__checkLexicalExpression.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression
findCategoryMethod__lexicalExpressionAST__checkLexicalExpression (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalExpressionAST__checkLexicalExpression.count ()) {
    result = gDispatchTableForMethod__lexicalExpressionAST__checkLexicalExpression (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalExpressionAST__checkLexicalExpression (superClassPtr) ;
      gDispatchTableForMethod__lexicalExpressionAST__checkLexicalExpression.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalOrExpressionAST.checkLexicalExpression'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalOrExpressionAST__checkLexicalExpression (C_CompilerEx & inLexique,
                                const cPtr_lexicalOrExpressionAST * operand_3629,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3629 != NULL) {
    { typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression method = findCategoryMethod__lexicalExpressionAST__checkLexicalExpression (operand_3629->mLeftOperand.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_3629->mLeftOperand (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (74)) ;
      }
    }
    { typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression method = findCategoryMethod__lexicalExpressionAST__checkLexicalExpression (operand_3629->mRightOperand.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_3629->mRightOperand (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (75)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalCharacterMatchAST.checkLexicalExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterMatchAST__checkLexicalExpression (C_CompilerEx &,
                                const cPtr_lexicalCharacterMatchAST * operand_3983,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3983 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@lexicalCharacterSetMatchAST.checkLexicalExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterSetMatchAST__checkLexicalExpression (C_CompilerEx &,
                                const cPtr_lexicalCharacterSetMatchAST * operand_4206,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4206 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCharacterIntervalMatchAST.checkLexicalExpression' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterIntervalMatchAST__checkLexicalExpression (C_CompilerEx &,
                                const cPtr_lexicalCharacterIntervalMatchAST * operand_4434,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4434 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalStringMatchAST.checkLexicalExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStringMatchAST__checkLexicalExpression (C_CompilerEx & inLexique,
                                const cPtr_lexicalStringMatchAST * operand_4651,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4651 != NULL) {
    var_cas_ioLexiqueAnalysisContext.mUnicodeStringToGenerate.addAssign_operation (operand_4651->mString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (104))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalStringNotMatchAST.checkLexicalExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStringNotMatchAST__checkLexicalExpression (C_CompilerEx & inLexique,
                                const cPtr_lexicalStringNotMatchAST * operand_4940,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4940 != NULL) {
    var_cas_ioLexiqueAnalysisContext.mUnicodeStringToGenerate.addAssign_operation (operand_4940->mString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (112))) ;
    elementOf_GGS_lexicalMessageMap * operand_5125 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_4940->mErrorMessage, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (113)) ;
    if (NULL != operand_5125) {
      operand_5125->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalRoutineOrFunctionFormalInputArgumentAST.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument> gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument (typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument
findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument.count ()) {
    result = gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument (superClassPtr) ;
      gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputArgumentAST.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputArgumentAST__checkLexicalFunctionCallArgument (C_CompilerEx & inLexique,
                                const cPtr_lexicalAttributeInputArgumentAST * operand_5828,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5828 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  temp_6073 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (135)) ;
    if (temp_6073.isBuilt ()) {
      temp_6073 (HERE)->method_searchKey (inLexique, operand_5828->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (135)) ;
    }
    const GGS_bool cond_6459 = (var_cas_attributeLexicalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType) ;
    if (cond_6459.isBuiltAndTrue ()) {
      operand_5828->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is @")).operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (142)))).operator_concat (GGS_string (" type, but lexical routine prototype requires @"))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (144)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (146)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCharacterInputArgumentAST.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterInputArgumentAST__checkLexicalFunctionCallArgument (C_CompilerEx & inLexique,
                                const cPtr_lexicalCharacterInputArgumentAST * operand_6640,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6640 != NULL) {
    const GGS_bool cond_7072 = (GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (156))).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType) ;
    if (cond_7072.isBuiltAndTrue ()) {
      operand_6640->mCharacter.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal character has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an @"))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (159)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (161)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalUnsignedInputArgumentAST.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalUnsignedInputArgumentAST__checkLexicalFunctionCallArgument (C_CompilerEx & inLexique,
                                const cPtr_lexicalUnsignedInputArgumentAST * operand_7252,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7252 != NULL) {
    const GGS_bool cond_7683 = (GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (171))).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType) ;
    if (cond_7683.isBuiltAndTrue ()) {
      operand_7252->mUnsigned.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal character has @uint")).operator_concat (GGS_string (" type, but lexical routine prototype requires an @"))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (174)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (176)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCurrentCharacterInputArgumentAST.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCurrentCharacterInputArgumentAST__checkLexicalFunctionCallArgument (C_CompilerEx & inLexique,
                                const cPtr_lexicalCurrentCharacterInputArgumentAST * operand_7871,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7871 != NULL) {
    const GGS_bool cond_8306 = (GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (186))).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType) ;
    if (cond_8306.isBuiltAndTrue ()) {
      operand_7871->mLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, current character value has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an @"))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (189)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (191)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFunctionInputArgumentAST.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFunctionInputArgumentAST__checkLexicalFunctionCallArgument (C_CompilerEx & inLexique,
                                const cPtr_lexicalFunctionInputArgumentAST * operand_8486,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8486 != NULL) {
    GGS_lexicalFunctionFormalArgumentList  var_cas_lexicalFormalTypeList ;
    GGS_lexicalTypeEnum var_cas_returnedLexicalFormalType ;
    GGS_string var_cas_replacementFunctionName ;
    GGS_bool automatic_var_8949_0 ;
    const GGS_lexicalFunctionMap  temp_8832 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (204)) ;
    if (temp_8832.isBuilt ()) {
      temp_8832 (HERE)->method_searchKey (inLexique, operand_8486->mFunctionName, var_cas_lexicalFormalTypeList, var_cas_returnedLexicalFormalType, var_cas_replacementFunctionName, automatic_var_8949_0 COMMA_SOURCE_FILE_AT_LINE (204)) ;
    }
    const GGS_bool cond_9125 = (var_cas_replacementFunctionName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_9125.isBuiltAndTrue ()) {
      operand_8486->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("obsolete lexical function, replaced by '")).operator_concat (var_cas_replacementFunctionName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (213)) ;
    }
    const GGS_bool cond_9493 = (var_cas_returnedLexicalFormalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType) ;
    if (cond_9493.isBuiltAndTrue ()) {
      operand_8486->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, the function returns an @")).operator_concat (var_cas_returnedLexicalFormalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (218)))).operator_concat (GGS_string (" value, but lexical routine prototype requires an @"))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (220)))).operator_concat (GGS_string (" value")) COMMA_SOURCE_FILE_AT_LINE (222)) ;
    }
    const GGS_bool cond_9855 = (var_cas_lexicalFormalTypeList.reader_length ()).operator_isNotEqual (operand_8486->mFunctionActualArgumentList.reader_length ()) ;
    if (cond_9855.isBuiltAndTrue ()) {
      operand_8486->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical function names ")).operator_concat (operand_8486->mFunctionActualArgumentList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (226)))).operator_concat (GGS_string (" actual argument(s), but the prototype requires "))).operator_concat (var_cas_lexicalFormalTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (228)))).operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (229)) ;
    }
    {
      GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_9945 (var_cas_lexicalFormalTypeList, true) ;
      const GGS_lexicalFunctionFormalArgumentList::cElement * operand_9945 = NULL ;
      GGS_lexicalFunctionCallActualArgumentListAST::cEnumerator enumerator_9974 (operand_8486->mFunctionActualArgumentList, true) ;
      const GGS_lexicalFunctionCallActualArgumentListAST::cElement * operand_9974 = NULL ;
      while (((operand_9945 = enumerator_9945.nextObject ()))
          && ((operand_9974 = enumerator_9974.nextObject ()))) {
        macroValidPointer (operand_9945) ;
        macroValidPointer (operand_9974) ;
        { typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument method = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument (operand_9974->mLexicalActualInputArgument.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_9974->mLexicalActualInputArgument (HERE), var_cas_ioLexiqueAnalysisContext, operand_9945->mLexicalType COMMA_SOURCE_FILE_AT_LINE (232)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalRoutineOrFunctionFormalInputArgumentAST.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument> gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument (typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument
findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument.count ()) {
    result = gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument (superClassPtr) ;
      gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputArgumentAST.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputArgumentAST__checkLexicalRoutineCallArgument (C_CompilerEx & inLexique,
                                const cPtr_lexicalAttributeInputArgumentAST * operand_10751,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10751 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  temp_10996 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (256)) ;
    if (temp_10996.isBuilt ()) {
      temp_10996 (HERE)->method_searchKey (inLexique, operand_10751->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (256)) ;
    }
    const GGS_bool cond_11382 = (var_cas_attributeLexicalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType) ;
    if (cond_11382.isBuiltAndTrue ()) {
      operand_10751->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is @")).operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (263)))).operator_concat (GGS_string (" type, but lexical routine prototype requires @"))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (265)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (267)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCharacterInputArgumentAST.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterInputArgumentAST__checkLexicalRoutineCallArgument (C_CompilerEx & inLexique,
                                const cPtr_lexicalCharacterInputArgumentAST * operand_11562,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11562 != NULL) {
    const GGS_bool cond_11994 = (GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (277))).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType) ;
    if (cond_11994.isBuiltAndTrue ()) {
      operand_11562->mCharacter.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal character has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an @"))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (280)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (282)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalUnsignedInputArgumentAST.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalUnsignedInputArgumentAST__checkLexicalRoutineCallArgument (C_CompilerEx & inLexique,
                                const cPtr_lexicalUnsignedInputArgumentAST * operand_12173,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12173 != NULL) {
    const GGS_bool cond_12609 = (GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (292))).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType) ;
    if (cond_12609.isBuiltAndTrue ()) {
      operand_12173->mUnsigned.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal unsigned value has @uint")).operator_concat (GGS_string (" type, but lexical routine prototype requires an @"))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (295)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (297)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCurrentCharacterInputArgumentAST.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCurrentCharacterInputArgumentAST__checkLexicalRoutineCallArgument (C_CompilerEx & inLexique,
                                const cPtr_lexicalCurrentCharacterInputArgumentAST * operand_12796,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12796 != NULL) {
    const GGS_bool cond_13231 = (GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (307))).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType) ;
    if (cond_13231.isBuiltAndTrue ()) {
      operand_12796->mLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, current character value has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an @"))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (310)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (312)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFunctionInputArgumentAST.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFunctionInputArgumentAST__checkLexicalRoutineCallArgument (C_CompilerEx & inLexique,
                                const cPtr_lexicalFunctionInputArgumentAST * operand_13410,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13410 != NULL) {
    GGS_lexicalFunctionFormalArgumentList  var_cas_lexicalFormalTypeList ;
    GGS_lexicalTypeEnum var_cas_returnedLexicalFormalType ;
    GGS_string var_cas_replacementFunctionName ;
    GGS_bool automatic_var_13873_0 ;
    const GGS_lexicalFunctionMap  temp_13756 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (325)) ;
    if (temp_13756.isBuilt ()) {
      temp_13756 (HERE)->method_searchKey (inLexique, operand_13410->mFunctionName, var_cas_lexicalFormalTypeList, var_cas_returnedLexicalFormalType, var_cas_replacementFunctionName, automatic_var_13873_0 COMMA_SOURCE_FILE_AT_LINE (325)) ;
    }
    const GGS_bool cond_14049 = (var_cas_replacementFunctionName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_14049.isBuiltAndTrue ()) {
      operand_13410->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("obsolete lexical function, replaced by '")).operator_concat (var_cas_replacementFunctionName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (334)) ;
    }
    const GGS_bool cond_14417 = (var_cas_returnedLexicalFormalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType) ;
    if (cond_14417.isBuiltAndTrue ()) {
      operand_13410->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, the function returns an @")).operator_concat (var_cas_returnedLexicalFormalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (339)))).operator_concat (GGS_string (" value, but lexical routine prototype requires an @"))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (341)))).operator_concat (GGS_string (" value")) COMMA_SOURCE_FILE_AT_LINE (343)) ;
    }
    const GGS_bool cond_14779 = (var_cas_lexicalFormalTypeList.reader_length ()).operator_isNotEqual (operand_13410->mFunctionActualArgumentList.reader_length ()) ;
    if (cond_14779.isBuiltAndTrue ()) {
      operand_13410->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical function names ")).operator_concat (operand_13410->mFunctionActualArgumentList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (347)))).operator_concat (GGS_string (" actual argument(s), but the prototype requires "))).operator_concat (var_cas_lexicalFormalTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (349)))).operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (350)) ;
    }
    {
      GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_14869 (var_cas_lexicalFormalTypeList, true) ;
      const GGS_lexicalFunctionFormalArgumentList::cElement * operand_14869 = NULL ;
      GGS_lexicalFunctionCallActualArgumentListAST::cEnumerator enumerator_14898 (operand_13410->mFunctionActualArgumentList, true) ;
      const GGS_lexicalFunctionCallActualArgumentListAST::cElement * operand_14898 = NULL ;
      while (((operand_14869 = enumerator_14869.nextObject ()))
          && ((operand_14898 = enumerator_14898.nextObject ()))) {
        macroValidPointer (operand_14869) ;
        macroValidPointer (operand_14898) ;
        { typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument method = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument (operand_14898->mLexicalActualInputArgument.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_14898->mLexicalActualInputArgument (HERE), var_cas_ioLexiqueAnalysisContext, operand_14869->mLexicalType COMMA_SOURCE_FILE_AT_LINE (353)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@abstractLexicalRoutineActualArgumentAST.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument> gDispatchTableForMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument (typeCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument
findCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument.count ()) {
    result = gDispatchTableForMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument (superClassPtr) ;
      gDispatchTableForMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputOutputArgumentAST.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputOutputArgumentAST__checkLexicalRoutineCallArgument (C_CompilerEx & inLexique,
                                const cPtr_lexicalAttributeInputOutputArgumentAST * operand_15743,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalArgumentModeAST  var_cas_inLexicalRoutineFormalArgumentMode,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15743 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  temp_16050 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (379)) ;
    if (temp_16050.isBuilt ()) {
      temp_16050 (HERE)->method_searchKey (inLexique, operand_15743->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (379)) ;
    }
    const GGS_bool cond_16436 = (var_cas_attributeLexicalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType) ;
    if (cond_16436.isBuiltAndTrue ()) {
      operand_15743->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is @")).operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (386)))).operator_concat (GGS_string (" type, but lexical routine prototype requires @"))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (388)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (390)) ;
    }
    const GGS_bool cond_16672 = (var_cas_inLexicalRoutineFormalArgumentMode).operator_isNotEqual (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (392))) ;
    if (cond_16672.isBuiltAndTrue ()) {
      operand_15743->mActualPassingModeLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the output mode (!) is required here, not an output/input mode") COMMA_SOURCE_FILE_AT_LINE (394)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFormalInputArgumentAST.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFormalInputArgumentAST__checkLexicalRoutineCallArgument (C_CompilerEx & inLexique,
                                const cPtr_lexicalFormalInputArgumentAST * operand_16849,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalArgumentModeAST  var_cas_inLexicalRoutineFormalArgumentMode,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16849 != NULL) {
    { typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument method = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument (operand_16849->mRoutineOrFunctionFormalInputArgument.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_16849->mRoutineOrFunctionFormalInputArgument (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_inLexicalRoutineFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (405)) ;
      }
    }
    const GGS_bool cond_17428 = (var_cas_inLexicalRoutineFormalArgumentMode).operator_isNotEqual (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (410))) ;
    if (cond_17428.isBuiltAndTrue ()) {
      operand_16849->mActualPassingModeLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the output/input mode (!\?) is required here, not an input mode") COMMA_SOURCE_FILE_AT_LINE (412)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalInstructionAST.checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction> gDispatchTableForMethod__lexicalInstructionAST__checkLexicalInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction (typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__lexicalInstructionAST__checkLexicalInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction
findCategoryMethod__lexicalInstructionAST__checkLexicalInstruction (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalInstructionAST__checkLexicalInstruction.count ()) {
    result = gDispatchTableForMethod__lexicalInstructionAST__checkLexicalInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalInstructionAST__checkLexicalInstruction (superClassPtr) ;
      gDispatchTableForMethod__lexicalInstructionAST__checkLexicalInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalStructuredSendInstructionAST.checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStructuredSendInstructionAST__checkLexicalInstruction (C_CompilerEx & inLexique,
                                const cPtr_lexicalStructuredSendInstructionAST * operand_17999,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & /* var_cas_ioTagMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17999 != NULL) {
    {
      GGS_lexicalSendSearchListAST::cEnumerator enumerator_18122 (operand_17999->mLexicalSendSearchList, true) ;
      const GGS_lexicalSendSearchListAST::cElement * operand_18122 = NULL ;
      while (((operand_18122 = enumerator_18122.nextObject ()))) {
        macroValidPointer (operand_18122) ;
        elementOf_GGS_lexicalExplicitTokenListMapMap * operand_18183 = (elementOf_GGS_lexicalExplicitTokenListMapMap *) var_cas_ioLexiqueAnalysisContext.mLexicalTokenListMap.searchForWithInstruction (inLexique, operand_18122->mSearchListName, GGS_lexicalExplicitTokenListMapMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (431)) ;
        if (NULL != operand_18183) {
          operand_18183->mInfo.mShouldBeGenerated = GGS_bool (true) ;
        }
        GGS_lexicalTypeEnum automatic_var_18346_0 ;
        const GGS_lexicalAttributeMap  temp_18326 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (434)) ;
        if (temp_18326.isBuilt ()) {
          temp_18326 (HERE)->method_searchKey (inLexique, operand_18122->mAttributeName, automatic_var_18346_0 COMMA_SOURCE_FILE_AT_LINE (434)) ;
        }
      }
    }
    { typeCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction method = findCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction (operand_17999->mLexicalSendDefaultAction.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_17999->mLexicalSendDefaultAction (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (436)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalSimpleSendInstructionAST.checkLexicalInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSimpleSendInstructionAST__checkLexicalInstruction (C_CompilerEx & inLexique,
                                const cPtr_lexicalSimpleSendInstructionAST * operand_18615,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & /* var_cas_ioTagMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18615 != NULL) {
    GGS_lexicalSentValueList  automatic_var_18777_0 ;
    const GGS_terminalMap  temp_18758 = var_cas_ioLexiqueAnalysisContext.reader_mTerminalMap (inLexique COMMA_SOURCE_FILE_AT_LINE (445)) ;
    if (temp_18758.isBuilt ()) {
      temp_18758 (HERE)->method_searchKey (inLexique, operand_18615->mSentTerminal, automatic_var_18777_0 COMMA_SOURCE_FILE_AT_LINE (445)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@lexicalRepeatInstructionAST.checkLexicalInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRepeatInstructionAST__checkLexicalInstruction (C_CompilerEx & inLexique,
                                const cPtr_lexicalRepeatInstructionAST * operand_18941,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & var_cas_ioTagMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18941 != NULL) {
    {
      GGS_lexicalWhileBranchListAST::cEnumerator enumerator_19058 (operand_18941->mLexicalWhileBranchList, true) ;
      const GGS_lexicalWhileBranchListAST::cElement * operand_19058 = NULL ;
      while (((operand_19058 = enumerator_19058.nextObject ()))) {
        macroValidPointer (operand_19058) ;
        { typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression method = findCategoryMethod__lexicalExpressionAST__checkLexicalExpression (operand_19058->mWhileExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_19058->mWhileExpression (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (455)) ;
          }
        }
        GGS_lexicalTagMap  var_cas_tagMap = GGS_lexicalTagMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTagMap COMMA_SOURCE_FILE_AT_LINE (456)) ;
        {
          GGS_lexicalInstructionListAST::cEnumerator enumerator_19231 (operand_19058->mWhileInstructionList, true) ;
          const GGS_lexicalInstructionListAST::cElement * operand_19231 = NULL ;
          while (((operand_19231 = enumerator_19231.nextObject ()))) {
            macroValidPointer (operand_19231) ;
            { typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction method = findCategoryMethod__lexicalInstructionAST__checkLexicalInstruction (operand_19231->mInstruction.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, operand_19231->mInstruction (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_tagMap COMMA_SOURCE_FILE_AT_LINE (458)) ;
              }
            }
          }
        }
      }
    }
    GGS_lexicalTagMap  var_cas_tagMap = GGS_lexicalTagMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTagMap COMMA_SOURCE_FILE_AT_LINE (461)) ;
    {
      GGS_lexicalInstructionListAST::cEnumerator enumerator_19445 (operand_18941->mRepeatedInstructionList, true) ;
      const GGS_lexicalInstructionListAST::cElement * operand_19445 = NULL ;
      while (((operand_19445 = enumerator_19445.nextObject ()))) {
        macroValidPointer (operand_19445) ;
        { typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction method = findCategoryMethod__lexicalInstructionAST__checkLexicalInstruction (operand_19445->mInstruction.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_19445->mInstruction (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_tagMap COMMA_SOURCE_FILE_AT_LINE (463)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@lexicalSelectInstructionAST.checkLexicalInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSelectInstructionAST__checkLexicalInstruction (C_CompilerEx & inLexique,
                                const cPtr_lexicalSelectInstructionAST * operand_19707,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & var_cas_ioTagMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19707 != NULL) {
    {
      GGS_lexicalSelectBranchListAST::cEnumerator enumerator_19826 (operand_19707->mLexicalSelectBranchList, true) ;
      const GGS_lexicalSelectBranchListAST::cElement * operand_19826 = NULL ;
      while (((operand_19826 = enumerator_19826.nextObject ()))) {
        macroValidPointer (operand_19826) ;
        { typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression method = findCategoryMethod__lexicalExpressionAST__checkLexicalExpression (operand_19826->mSelectExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_19826->mSelectExpression (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (474)) ;
          }
        }
        GGS_lexicalTagMap  var_cas_tagMap = GGS_lexicalTagMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTagMap COMMA_SOURCE_FILE_AT_LINE (475)) ;
        {
          GGS_lexicalInstructionListAST::cEnumerator enumerator_20001 (operand_19826->mSelectInstructionList, true) ;
          const GGS_lexicalInstructionListAST::cElement * operand_20001 = NULL ;
          while (((operand_20001 = enumerator_20001.nextObject ()))) {
            macroValidPointer (operand_20001) ;
            { typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction method = findCategoryMethod__lexicalInstructionAST__checkLexicalInstruction (operand_20001->mInstruction.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, operand_20001->mInstruction (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_tagMap COMMA_SOURCE_FILE_AT_LINE (477)) ;
              }
            }
          }
        }
      }
    }
    GGS_lexicalTagMap  var_cas_tagMap = GGS_lexicalTagMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTagMap COMMA_SOURCE_FILE_AT_LINE (480)) ;
    {
      GGS_lexicalInstructionListAST::cEnumerator enumerator_20214 (operand_19707->mDefaultInstructionList, true) ;
      const GGS_lexicalInstructionListAST::cElement * operand_20214 = NULL ;
      while (((operand_20214 = enumerator_20214.nextObject ()))) {
        macroValidPointer (operand_20214) ;
        { typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction method = findCategoryMethod__lexicalInstructionAST__checkLexicalInstruction (operand_20214->mInstruction.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_20214->mInstruction (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_tagMap COMMA_SOURCE_FILE_AT_LINE (482)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@lexicalRoutineInstructionAST.checkLexicalInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRoutineInstructionAST__checkLexicalInstruction (C_CompilerEx & inLexique,
                                const cPtr_lexicalRoutineInstructionAST * operand_20477,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & /* var_cas_ioTagMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20477 != NULL) {
    GGS_lexicalRoutineFormalArgumentList  var_cas_lexicalRoutineFormalArgumentList ;
    GGS_stringlist  var_cas_routineErrorMessageList ;
    GGS_string var_cas_replacementRoutineName ;
    GGS_bool automatic_var_20903_0 ;
    const GGS_lexicalRoutineMap  temp_20779 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalRoutineMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (495)) ;
    if (temp_20779.isBuilt ()) {
      temp_20779 (HERE)->method_searchKey (inLexique, operand_20477->mRoutineName, var_cas_lexicalRoutineFormalArgumentList, var_cas_routineErrorMessageList, var_cas_replacementRoutineName, automatic_var_20903_0 COMMA_SOURCE_FILE_AT_LINE (495)) ;
    }
    const GGS_bool cond_21074 = (var_cas_replacementRoutineName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_21074.isBuiltAndTrue ()) {
      operand_20477->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("obsolete lexical routine, replaced by '")).operator_concat (var_cas_replacementRoutineName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (504)) ;
    }
    const GGS_bool cond_21461 = (var_cas_lexicalRoutineFormalArgumentList.reader_length ()).operator_isNotEqual (operand_20477->mActualArgumentList.reader_length ()) ;
    if (cond_21461.isBuiltAndTrue ()) {
      operand_20477->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical routine call names ")).operator_concat (operand_20477->mActualArgumentList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (509)))).operator_concat (GGS_string (" actual argument(s), but the lexical routine prototype requires "))).operator_concat (var_cas_lexicalRoutineFormalArgumentList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (511)))).operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (512)) ;
    }
    {
      GGS_lexicalRoutineFormalArgumentList::cEnumerator enumerator_21562 (var_cas_lexicalRoutineFormalArgumentList, true) ;
      const GGS_lexicalRoutineFormalArgumentList::cElement * operand_21562 = NULL ;
      GGS_lexicalRoutineCallActualArgumentListAST::cEnumerator enumerator_21583 (operand_20477->mActualArgumentList, true) ;
      const GGS_lexicalRoutineCallActualArgumentListAST::cElement * operand_21583 = NULL ;
      while (((operand_21562 = enumerator_21562.nextObject ()))
          && ((operand_21583 = enumerator_21583.nextObject ()))) {
        macroValidPointer (operand_21562) ;
        macroValidPointer (operand_21583) ;
        { typeCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument method = findCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument (operand_21583->mLexicalRoutineActualArgument.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_21583->mLexicalRoutineActualArgument (HERE), var_cas_ioLexiqueAnalysisContext, operand_21562->mLexicalFormalArgumentMode, operand_21562->mLexicalFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (515)) ;
          }
        }
      }
    }
    const GGS_bool cond_22132 = (var_cas_routineErrorMessageList.reader_length ()).operator_isNotEqual (operand_20477->mErrorMessageList.reader_length ()) ;
    if (cond_22132.isBuiltAndTrue ()) {
      operand_20477->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical routine call names ")).operator_concat (operand_20477->mErrorMessageList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (524)))).operator_concat (GGS_string (" error message(s), but the lexical routine prototype requires "))).operator_concat (var_cas_routineErrorMessageList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (526)))).operator_concat (GGS_string (" error message(s)")) COMMA_SOURCE_FILE_AT_LINE (527)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_22212 (operand_20477->mErrorMessageList, true) ;
      const GGS_lstringlist::cElement * operand_22212 = NULL ;
      while (((operand_22212 = enumerator_22212.nextObject ()))) {
        macroValidPointer (operand_22212) ;
        elementOf_GGS_lexicalMessageMap * operand_22271 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_22212->mValue, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (530)) ;
        if (NULL != operand_22271) {
          operand_22271->mInfo.mMessageIsUsed = GGS_bool (true) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalLogInstructionAST.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalLogInstructionAST__checkLexicalInstruction (C_CompilerEx &,
                                const cPtr_lexicalLogInstructionAST * operand_22533,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTagMap  & /* var_cas_ioTagMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22533 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@lexicalRewindInstructionAST.checkLexicalInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRewindInstructionAST__checkLexicalInstruction (C_CompilerEx & inLexique,
                                const cPtr_lexicalRewindInstructionAST * operand_22792,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & var_cas_ioTagMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22792 != NULL) {
    if (var_cas_ioTagMap.isBuilt ()) {
      var_cas_ioTagMap (HERE)->method_searchKey (inLexique, operand_22792->mLexicalTagName COMMA_SOURCE_FILE_AT_LINE (550)) ;
    }
    GGS_lexicalSentValueList  automatic_var_22989_0 ;
    const GGS_terminalMap  temp_22970 = var_cas_ioLexiqueAnalysisContext.reader_mTerminalMap (inLexique COMMA_SOURCE_FILE_AT_LINE (551)) ;
    if (temp_22970.isBuilt ()) {
      temp_22970 (HERE)->method_searchKey (inLexique, operand_22792->mTerminalName, automatic_var_22989_0 COMMA_SOURCE_FILE_AT_LINE (551)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalDropInstructionAST.checkLexicalInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalDropInstructionAST__checkLexicalInstruction (C_CompilerEx & inLexique,
                                const cPtr_lexicalDropInstructionAST * operand_23151,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & /* var_cas_ioTagMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23151 != NULL) {
    GGS_lexicalSentValueList  automatic_var_23314_0 ;
    const GGS_terminalMap  temp_23295 = var_cas_ioLexiqueAnalysisContext.reader_mTerminalMap (inLexique COMMA_SOURCE_FILE_AT_LINE (560)) ;
    if (temp_23295.isBuilt ()) {
      temp_23295 (HERE)->method_searchKey (inLexique, operand_23151->mTerminalName, automatic_var_23314_0 COMMA_SOURCE_FILE_AT_LINE (560)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalTagInstructionAST.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalTagInstructionAST__checkLexicalInstruction (C_CompilerEx & inLexique,
                                const cPtr_lexicalTagInstructionAST * operand_23475,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTagMap  & var_cas_ioTagMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23475 != NULL) {
    var_cas_ioTagMap.modifier_insertKey (inLexique, operand_23475->mLexicalTagName COMMA_SOURCE_FILE_AT_LINE (569)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@lexicalErrorInstructionAST.checkLexicalInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalErrorInstructionAST__checkLexicalInstruction (C_CompilerEx & inLexique,
                                const cPtr_lexicalErrorInstructionAST * operand_23770,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & /* var_cas_ioTagMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23770 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_23914 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_23770->mErrorMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (578)) ;
    if (NULL != operand_23914) {
      operand_23914->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@lexicalWarningInstructionAST.checkLexicalInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalWarningInstructionAST__checkLexicalInstruction (C_CompilerEx & inLexique,
                                const cPtr_lexicalWarningInstructionAST * operand_24151,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTagMap  & /* var_cas_ioTagMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24151 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_24295 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_24151->mWarningMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (589)) ;
    if (NULL != operand_24295) {
      operand_24295->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@abstractLexicalRuleAST.checkLexicalRule'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__abstractLexicalRuleAST__checkLexicalRule> gDispatchTableForMethod__abstractLexicalRuleAST__checkLexicalRule ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__abstractLexicalRuleAST__checkLexicalRule (typeCategoryMethod__abstractLexicalRuleAST__checkLexicalRule inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__abstractLexicalRuleAST__checkLexicalRule.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__abstractLexicalRuleAST__checkLexicalRule
findCategoryMethod__abstractLexicalRuleAST__checkLexicalRule (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__abstractLexicalRuleAST__checkLexicalRule result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__abstractLexicalRuleAST__checkLexicalRule.count ()) {
    result = gDispatchTableForMethod__abstractLexicalRuleAST__checkLexicalRule (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__abstractLexicalRuleAST__checkLexicalRule (superClassPtr) ;
      gDispatchTableForMethod__abstractLexicalRuleAST__checkLexicalRule.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@lexicalImplicitRuleAST.checkLexicalRule'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalImplicitRuleAST__checkLexicalRule (C_CompilerEx & inLexique,
                                const cPtr_lexicalImplicitRuleAST * operand_24869,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24869 != NULL) {
    GGS_lexicalExplicitTokenListMap  automatic_var_25006_0 ;
    GGS_tokenSortedlist  automatic_var_25006_1 ;
    GGS_bool automatic_var_25006_2 ;
    const GGS_lexicalExplicitTokenListMapMap  temp_24985 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalTokenListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (607)) ;
    if (temp_24985.isBuilt ()) {
      temp_24985 (HERE)->method_searchKey (inLexique, operand_24869->mListName, automatic_var_25006_0, automatic_var_25006_1, automatic_var_25006_2 COMMA_SOURCE_FILE_AT_LINE (607)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@lexicalExplicitRuleAST.checkLexicalRule'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalExplicitRuleAST__checkLexicalRule (C_CompilerEx & inLexique,
                                const cPtr_lexicalExplicitRuleAST * operand_25158,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25158 != NULL) {
    { typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression method = findCategoryMethod__lexicalExpressionAST__checkLexicalExpression (operand_25158->mLexicalRuleExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_25158->mLexicalRuleExpression (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (615)) ;
      }
    }
    GGS_lexicalTagMap  var_cas_tagMap = GGS_lexicalTagMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (616)) ;
    {
      GGS_lexicalInstructionListAST::cEnumerator enumerator_25356 (operand_25158->mInstructionList, true) ;
      const GGS_lexicalInstructionListAST::cElement * operand_25356 = NULL ;
      while (((operand_25356 = enumerator_25356.nextObject ()))) {
        macroValidPointer (operand_25356) ;
        { typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction method = findCategoryMethod__lexicalInstructionAST__checkLexicalInstruction (operand_25356->mInstruction.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_25356->mInstruction (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_tagMap COMMA_SOURCE_FILE_AT_LINE (618)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of wrapper 'lexiqueGenerationTemplates'           *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_lexiqueGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_lexiqueGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapperEx gWrapperDirectory_0_lexiqueGenerationTemplates (
  "",
  0,
  gWrapperAllFiles_lexiqueGenerationTemplates_0,
  0,
  gWrapperAllDirectories_lexiqueGenerationTemplates_0
) ;

//---------------------------------------------------------------------------*
//                                                                           *
//  'oldHeaderZone2' template of 'lexiqueGenerationTemplates' filewrapper    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_oldHeaderZone2 (C_CompilerEx & inLexique,
                                const GGS_string& var_cas_LEXIQUE_IDENTIFIER,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT,
                                const GGS_lexiqueComponentAST & var_cas_LEXIQUE_COMPONENT_ROOT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_IDENTIFIER.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt ()
    && var_cas_LEXIQUE_COMPONENT_ROOT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "#ifndef " ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "_0_DEFINED\n"
      "#define " ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "_0_DEFINED\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"galgas/GGS_lstring.h\"\n"
      "#include \"galgas/GGS_luint.h\"\n"
      "#include \"galgas/GGS_lsint.h\"\n"
      "#include \"galgas/GGS_luint64.h\"\n"
      "#include \"galgas/GGS_lsint64.h\"\n"
      "#include \"galgas/GGS_lchar.h\"\n"
      "#include \"galgas/GGS_ldouble.h\"\n"
      "#include \"galgas/GGS_lbool.h\"\n"
      "#include \"galgas/C_LexiqueEx.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                    E X T E R N    R O U T I N E S                         *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalRoutineMap::cEnumerator enumerator_904 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalRoutineMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (23)), true) ;
    const GGS_lexicalRoutineMap::cElement * operand_904 = NULL ;
    while (((operand_904 = enumerator_904.nextObject ()))) {
      macroValidPointer (operand_904) ;
      if (operand_904->mInfo.mIsExtern.boolValue ()) {
        result << "\n"
          "void scanner_routine_" ;
        result << operand_904->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (25)) ;
        result << " (C_LexiqueEx & inLexique" ;
        GGS_lexicalRoutineFormalArgumentList::cEnumerator enumerator_1050 (operand_904->mInfo.mLexicalRoutineFormalArgumentList, true) ;
        const GGS_lexicalRoutineFormalArgumentList::cElement * operand_1050 = NULL ;
        while (((operand_1050 = enumerator_1050.nextObject ()))) {
          macroValidPointer (operand_1050) ;
          result << ",\n"
            "                " ;
          result << operand_1050->mLexicalFormalArgumentMode.reader_cppConstInFormalArgument (inLexique COMMA_SOURCE_FILE_AT_LINE (27)) ;
          result << operand_1050->mLexicalFormalArgumentType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (28)) ;
          result << operand_1050->mLexicalFormalArgumentMode.reader_cppReferenceInFormalArgument (inLexique COMMA_SOURCE_FILE_AT_LINE (29)) ;
          result << " " ;
          result << operand_1050->mArgumentNameForComment ;
        }
        GGS_stringlist::cEnumerator enumerator_1403 (operand_904->mInfo.mErrorMessageList, true) ;
        const GGS_stringlist::cElement * operand_1403 = NULL ;
        while (((operand_1403 = enumerator_1403.nextObject ()))) {
          macroValidPointer (operand_1403) ;
          result << ",\n"
            "                const char * " ;
          result << operand_1403->mValue ;
        }
        result << ") ;\n" ;
      }else {
      }
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                    E X T E R N    F U N C T I O N S                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalFunctionMap::cEnumerator enumerator_1969 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (45)), true) ;
    const GGS_lexicalFunctionMap::cElement * operand_1969 = NULL ;
    while (((operand_1969 = enumerator_1969.nextObject ()))) {
      macroValidPointer (operand_1969) ;
      if (operand_1969->mInfo.mIsExtern.boolValue ()) {
        result << "\n" ;
        result << operand_1969->mInfo.mReturnedLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
        result << " scanner_function_" ;
        result << operand_1969->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
        result << " (C_LexiqueEx & inLexique" ;
        GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_2132 (operand_1969->mInfo.mLexicalTypeList, true) ;
        const GGS_lexicalFunctionFormalArgumentList::cElement * operand_2132 = NULL ;
        while (((operand_2132 = enumerator_2132.nextObject ()))) {
          macroValidPointer (operand_2132) ;
          result << ",\n"
            "                const " ;
          result << operand_2132->mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (49)) ;
          result << " " ;
          result << operand_2132->mArgumentNameForComment ;
        }
        result << ") ;\n" ;
      }else {
      }
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                       T O K E N    C L A S S                              *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " : public cToken {\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_2796 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (63)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_2796 = NULL ;
    while (((operand_2796 = enumerator_2796.nextObject ()))) {
      macroValidPointer (operand_2796) ;
      result << "  public : " ;
      result << operand_2796->mInfo.mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (64)) ;
      result << " mLexicalAttribute_" ;
      result << operand_2796->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " ;\n" ;
    }
    result << "\n"
      "  public : cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " (void) ;\n"
      "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                     S C A N N E R    C L A S S                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " : public C_LexiqueEx {\n"
      "//--- Constructors\n"
      "  public : C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " (C_CompilerEx * inCallerCompiler,\n"
      "                       const C_String & inDependencyFileExtension,\n"
      "                       const C_String & inDependencyFilePath,\n"
      "                       C_galgas_io * inParametersPtr,\n"
      "                       const C_String & inSourceFileName\n"
      "                       COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "  public : C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " (C_CompilerEx * inCallerCompiler,\n"
      "                       C_galgas_io * inParametersPtr,\n"
      "                       const C_String & inSourceString,\n"
      "                       const C_String & inStringForError\n"
      "                       COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "//--- Declaring a protected virtual destructor enables the compiler to raise\n"
      "//    an error if a direct delete is performed; only the static method\n"
      "//    C_GGS_Object::detachPointer may invoke delete.\n"
      "  #ifndef DO_NOT_GENERATE_CHECKINGS\n"
      "    protected : virtual ~ C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " (void) {}\n"
      "  #endif\n" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (97)).reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << "\n"
        "//--- Scanner mode for template scanner\n"
        "  private : PMSInt32 mMatchedTemplateDelimiterIndex ;\n" ;
    }else {
    }
    result << "\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'newHeaderZone2' template of 'lexiqueGenerationTemplates' filewrapper    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_newHeaderZone2 (C_CompilerEx & inLexique,
                                const GGS_string& var_cas_LEXIQUE_IDENTIFIER,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT,
                                const GGS_lexiqueComponentAST & var_cas_LEXIQUE_COMPONENT_ROOT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_IDENTIFIER.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt ()
    && var_cas_LEXIQUE_COMPONENT_ROOT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "#ifndef " ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "_0_DEFINED\n"
      "#define " ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "_0_DEFINED\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"galgas/GGS_lstring.h\"\n"
      "#include \"galgas/GGS_luint.h\"\n"
      "#include \"galgas/GGS_lsint.h\"\n"
      "#include \"galgas/GGS_luint64.h\"\n"
      "#include \"galgas/GGS_lsint64.h\"\n"
      "#include \"galgas/GGS_lchar.h\"\n"
      "#include \"galgas/GGS_ldouble.h\"\n"
      "#include \"galgas/GGS_lbool.h\"\n"
      "#include \"galgas2/C_Lexique.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"galgas2/predefined-types.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                    E X T E R N    R O U T I N E S                         *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalRoutineMap::cEnumerator enumerator_1022 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalRoutineMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (27)), true) ;
    const GGS_lexicalRoutineMap::cElement * operand_1022 = NULL ;
    while (((operand_1022 = enumerator_1022.nextObject ()))) {
      macroValidPointer (operand_1022) ;
      if (operand_1022->mInfo.mIsExtern.boolValue ()) {
        result << "\n"
          "void scanner_routine_" ;
        result << operand_1022->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (29)) ;
        result << " (C_Lexique & inLexique" ;
        GGS_lexicalRoutineFormalArgumentList::cEnumerator enumerator_1166 (operand_1022->mInfo.mLexicalRoutineFormalArgumentList, true) ;
        const GGS_lexicalRoutineFormalArgumentList::cElement * operand_1166 = NULL ;
        while (((operand_1166 = enumerator_1166.nextObject ()))) {
          macroValidPointer (operand_1166) ;
          result << ",\n"
            "                " ;
          result << operand_1166->mLexicalFormalArgumentMode.reader_cppConstInFormalArgument (inLexique COMMA_SOURCE_FILE_AT_LINE (31)) ;
          result << operand_1166->mLexicalFormalArgumentType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (32)) ;
          result << operand_1166->mLexicalFormalArgumentMode.reader_cppReferenceInFormalArgument (inLexique COMMA_SOURCE_FILE_AT_LINE (33)) ;
          result << " " ;
          result << operand_1166->mArgumentNameForComment ;
        }
        GGS_stringlist::cEnumerator enumerator_1519 (operand_1022->mInfo.mErrorMessageList, true) ;
        const GGS_stringlist::cElement * operand_1519 = NULL ;
        while (((operand_1519 = enumerator_1519.nextObject ()))) {
          macroValidPointer (operand_1519) ;
          result << ",\n"
            "                const char * " ;
          result << operand_1519->mValue ;
        }
        result << ") ;\n" ;
      }else {
      }
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                    E X T E R N    F U N C T I O N S                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalFunctionMap::cEnumerator enumerator_2085 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (49)), true) ;
    const GGS_lexicalFunctionMap::cElement * operand_2085 = NULL ;
    while (((operand_2085 = enumerator_2085.nextObject ()))) {
      macroValidPointer (operand_2085) ;
      if (operand_2085->mInfo.mIsExtern.boolValue ()) {
        result << "\n" ;
        result << operand_2085->mInfo.mReturnedLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (51)) ;
        result << " scanner_function_" ;
        result << operand_2085->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (51)) ;
        result << " (C_Lexique & inLexique" ;
        GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_2246 (operand_2085->mInfo.mLexicalTypeList, true) ;
        const GGS_lexicalFunctionFormalArgumentList::cElement * operand_2246 = NULL ;
        while (((operand_2246 = enumerator_2246.nextObject ()))) {
          macroValidPointer (operand_2246) ;
          result << ",\n"
            "                const " ;
          result << operand_2246->mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (53)) ;
          result << " " ;
          result << operand_2246->mArgumentNameForComment ;
        }
        result << ") ;\n" ;
      }else {
      }
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                       T O K E N    C L A S S                              *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " : public cToken {\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_2910 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (67)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_2910 = NULL ;
    while (((operand_2910 = enumerator_2910.nextObject ()))) {
      macroValidPointer (operand_2910) ;
      result << "  public : " ;
      result << operand_2910->mInfo.mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (68)) ;
      result << " mLexicalAttribute_" ;
      result << operand_2910->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " ;\n" ;
    }
    result << "\n"
      "  public : cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " (void) ;\n"
      "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                     S C A N N E R    C L A S S                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " : public C_Lexique {\n"
      "//--- Constructors\n"
      "  public : C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                       const C_String & inDependencyFileExtension,\n"
      "                       const C_String & inDependencyFilePath,\n"
      "                       C_galgas_io * inParametersPtr,\n"
      "                       const C_String & inSourceFileName\n"
      "                       COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "  public : C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                       C_galgas_io * inParametersPtr,\n"
      "                       const C_String & inSourceString,\n"
      "                       const C_String & inStringForError\n"
      "                       COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "//--- Declaring a protected virtual destructor enables the compiler to raise\n"
      "//    an error if a direct delete is performed; only the static method\n"
      "//    C_GGS_Object::detachPointer may invoke delete.\n"
      "  #ifndef DO_NOT_GENERATE_CHECKINGS\n"
      "    protected : virtual ~ C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " (void) {}\n"
      "  #endif\n" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (101)).reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << "\n"
        "//--- Scanner mode for template scanner\n"
        "  private : PMSInt32 mMatchedTemplateDelimiterIndex ;\n" ;
    }else {
    }
    result << "\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'oldHeaderZone3' template of 'lexiqueGenerationTemplates' filewrapper    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_oldHeaderZone3 (C_CompilerEx & inLexique,
                                const GGS_string& var_cas_LEXIQUE_IDENTIFIER,
                                const GGS_lexicalListDeclarationListAST & var_cas_DELIMITOR_LIST_LIST,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_IDENTIFIER.isBuilt ()
    && var_cas_DELIMITOR_LIST_LIST.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//--- Terminal symbols enumeration\n"
      "  public : enum {kToken_" ;
    GGS_terminalList::cEnumerator enumerator_116 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (4)), true) ;
    const GGS_terminalList::cElement * operand_116 = NULL ;
    while (((operand_116 = enumerator_116.nextObject ()))) {
      macroValidPointer (operand_116) ;
      result << ",\n"
        "   kToken_" ;
      result << operand_116->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5)).reader_identifierRepresentation () ;
    }
    result << "} ;\n" ;
    GGS_lexicalListDeclarationListAST::cEnumerator enumerator_247 (var_cas_DELIMITOR_LIST_LIST, true) ;
    const GGS_lexicalListDeclarationListAST::cElement * operand_247 = NULL ;
    while (((operand_247 = enumerator_247.nextObject ()))) {
      macroValidPointer (operand_247) ;
      result << "\n"
        "//--- Key words table '" ;
      result << operand_247->mName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (10)) ;
      result << "'\n"
        "  public : static PMSInt16 search_into_" ;
      result << operand_247->mName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (11)) ;
      result << " (const C_String & inSearchedString) ;\n" ;
    }
    result << "  \n"
      "\n"
      "//--- Assign from attribute (v1)\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_517 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (17)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_517 = NULL ;
    while (((operand_517 = enumerator_517.nextObject ()))) {
      macroValidPointer (operand_517) ;
      result << "  public : void assignFromAttribute_" ;
      result << operand_517->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " (GGS_l" ;
      result << operand_517->mInfo.mLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (18)) ;
      result << " & outValue) const ;\n" ;
    }
    result << "\n"
      "\n"
      "//--- Attribute access\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_763 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (24)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_763 = NULL ;
    while (((operand_763 = enumerator_763.nextObject ()))) {
      macroValidPointer (operand_763) ;
      result << "  public : " ;
      result << operand_763->mInfo.mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (25)) ;
      result << " attributeValue_" ;
      result << operand_763->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " (void) const ;\n" ;
    }
    result << "\n"
      "\n"
      "//--- Parse lexical token\n"
      "  protected : virtual bool parseLexicalToken (void) ;\n"
      "\n"
      "//--- Append terminal message\n"
      "  protected : virtual void appendTerminalMessageToSyntaxErrorMessage (const PMSInt16 numeroTerminal,\n"
      "                                                              C_String & messageErreur) ;\n"
      "\n"
      "//--- Get terminal count\n"
      "  public : virtual PMSInt16 terminalVocabularyCount (void) const { return " ;
    result << var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (37)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (37)) ;
    result << " ; }\n"
      "\n"
      "//--- Get Token String\n"
      "  public : virtual C_String getCurrentTokenString (const cToken * inTokenPtr) const ;\n"
      "\n"
      "//--- Enter Token\n"
      "  protected : void enterToken (const cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " & inToken) ;\n"
      "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#endif\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'newHeaderZone3' template of 'lexiqueGenerationTemplates' filewrapper    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_newHeaderZone3 (C_CompilerEx & inLexique,
                                const GGS_string& var_cas_LEXIQUE_IDENTIFIER,
                                const GGS_lexicalListDeclarationListAST & var_cas_DELIMITOR_LIST_LIST,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_IDENTIFIER.isBuilt ()
    && var_cas_DELIMITOR_LIST_LIST.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//--- Terminal symbols enumeration\n"
      "  public : enum {kToken_" ;
    GGS_terminalList::cEnumerator enumerator_116 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (4)), true) ;
    const GGS_terminalList::cElement * operand_116 = NULL ;
    while (((operand_116 = enumerator_116.nextObject ()))) {
      macroValidPointer (operand_116) ;
      result << ",\n"
        "   kToken_" ;
      result << operand_116->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5)).reader_identifierRepresentation () ;
    }
    result << "} ;\n" ;
    GGS_lexicalListDeclarationListAST::cEnumerator enumerator_247 (var_cas_DELIMITOR_LIST_LIST, true) ;
    const GGS_lexicalListDeclarationListAST::cElement * operand_247 = NULL ;
    while (((operand_247 = enumerator_247.nextObject ()))) {
      macroValidPointer (operand_247) ;
      result << "\n"
        "//--- Key words table '" ;
      result << operand_247->mName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (10)) ;
      result << "'\n"
        "  public : static PMSInt16 search_into_" ;
      result << operand_247->mName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (11)) ;
      result << " (const C_String & inSearchedString) ;\n" ;
    }
    result << "  \n"
      "\n"
      "//--- Assign from attribute (v1)\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_517 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (17)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_517 = NULL ;
    while (((operand_517 = enumerator_517.nextObject ()))) {
      macroValidPointer (operand_517) ;
      result << "  public : void assignFromAttribute_" ;
      result << operand_517->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " (GGS_l" ;
      result << operand_517->mInfo.mLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (18)) ;
      result << " & outValue) const ;\n" ;
    }
    result << "\n"
      "\n"
      "//--- Assign from attribute (v2)\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_773 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (24)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_773 = NULL ;
    while (((operand_773 = enumerator_773.nextObject ()))) {
      macroValidPointer (operand_773) ;
      result << "  public : GALGAS_l" ;
      result << operand_773->mInfo.mLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (25)).reader_identifierRepresentation () ;
      result << " synthetizedAttribute_" ;
      result << operand_773->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " (void) const ;\n" ;
    }
    result << "\n"
      "\n"
      "//--- Attribute access\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_1039 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (31)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_1039 = NULL ;
    while (((operand_1039 = enumerator_1039.nextObject ()))) {
      macroValidPointer (operand_1039) ;
      result << "  public : " ;
      result << operand_1039->mInfo.mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (32)) ;
      result << " attributeValue_" ;
      result << operand_1039->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " (void) const ;\n" ;
    }
    result << "\n"
      "\n"
      "//--- Parse lexical token\n"
      "  protected : virtual bool parseLexicalToken (void) ;\n"
      "\n"
      "//--- Append terminal message\n"
      "  protected : virtual void appendTerminalMessageToSyntaxErrorMessage (const PMSInt16 numeroTerminal,\n"
      "                                                              C_String & messageErreur) ;\n"
      "\n"
      "//--- Get terminal count\n"
      "  public : virtual PMSInt16 terminalVocabularyCount (void) const { return " ;
    result << var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (44)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (44)) ;
    result << " ; }\n"
      "\n"
      "//--- Get Token String\n"
      "  public : virtual C_String getCurrentTokenString (const cToken * inTokenPtr) const ;\n"
      "\n"
      "//--- Enter Token\n"
      "  protected : void enterToken (const cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " & inToken) ;\n"
      "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#endif\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'oldImplementationZone2' template of 'lexiqueGenerationTemplates' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_oldImplementationZone2 (C_CompilerEx & inLexique,
                                const GGS_string& var_cas_LEXIQUE_IDENTIFIER,
                                const GGS_lexicalAttributeMap & var_cas_LEXICAL_ATTRIBUTE_MAP,
                                const GGS_lexicalMessageMap & var_cas_LEXICAL_MESSAGE_MAP,
                                const GGS_terminalList & var_cas_TERMINAL_LIST,
                                const GGS_lexicalExplicitTokenListMapMap & var_cas_LEXICAL_TOKEN_LIST_MAP,
                                const GGS_stringset & var_cas_STRINGS_IN_EXPLICIT_RULES,
                                const GGS_lexicalRuleListAST & var_cas_LEXICAL_RULE_LIST,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT,
                                const GGS_lexiqueComponentAST & var_cas_LEXIQUE_COMPONENT_ROOT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_IDENTIFIER.isBuilt ()
    && var_cas_LEXICAL_ATTRIBUTE_MAP.isBuilt ()
    && var_cas_LEXICAL_MESSAGE_MAP.isBuilt ()
    && var_cas_TERMINAL_LIST.isBuilt ()
    && var_cas_LEXICAL_TOKEN_LIST_MAP.isBuilt ()
    && var_cas_STRINGS_IN_EXPLICIT_RULES.isBuilt ()
    && var_cas_LEXICAL_RULE_LIST.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt ()
    && var_cas_LEXIQUE_COMPONENT_ROOT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"version_libpm.h\"\n"
      "#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER\n"
      "  #error \"This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm\"\n"
      "#endif\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include <ctype.h>\n"
      "#include <string.h>\n"
      "\n"
      "#include \"utilities/MF_MemoryControl.h\"\n"
      "#include \"" ;
    result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexiqueComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (15)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (15)) ;
    result << ".h\"\n"
      "\n"
      "#include \"strings/unicode_character_cpp.h\"\n"
      "#include \"galgas/scanner_actionsEx.h\"\n"
      "#ifndef DO_NOT_GENERATE_CHECKINGS\n"
      "  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFileName ().cString (HERE), lineNumber ()\n"
      "  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE\n"
      "#else\n"
      "  #define LINE_AND_SOURCE_FILE\n"
      "  #define COMMA_LINE_AND_SOURCE_FILE\n"
      "#endif\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                               Constructors                                *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "::cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " (void)" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_1476 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_1476 = NULL ;
    if (enumerator_1476.hasCurrentObject ()) {
      result << " :\n" ;
      while (((operand_1476 = enumerator_1476.nextObject ()))) {
        macroValidPointer (operand_1476) ;
        result << "mLexicalAttribute_" ;
        result << operand_1476->mKey.ggs_string ().reader_identifierRepresentation () ;
        result << " ()" ;
        if (enumerator_1476.hasNextObject ()) {
          result << ",\n" ;
        }
      }
    }
    result << " {\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "::C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " (C_CompilerEx * inCallerCompiler,\n"
      "                const C_String & inDependencyFileExtension,\n"
      "                const C_String & inDependencyFilePath,\n"
      "                C_galgas_io * inParametersPtr,\n"
      "                const C_String & inSourceFileName\n"
      "                COMMA_LOCATION_ARGS) :\n"
      "C_LexiqueEx (inCallerCompiler, inDependencyFileExtension, inDependencyFilePath, inParametersPtr, inSourceFileName COMMA_THERE)" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (51)).reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << ",\n"
        "mMatchedTemplateDelimiterIndex (-1)" ;
    }else {
    }
    result << " {\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "::C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " (C_CompilerEx * inCallerCompiler,\n"
      "                C_galgas_io * inParametersPtr,\n"
      "                const C_String & inSourceString,\n"
      "                const C_String & inStringForError\n"
      "                COMMA_LOCATION_ARGS) :\n"
      "C_LexiqueEx (inCallerCompiler, inParametersPtr, inSourceString, inStringForError COMMA_THERE)" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (65)).reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << ",\n"
        "mMatchedTemplateDelimiterIndex (-1)" ;
    }else {
    }
    result << " {\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                        Lexical error message list                         *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalMessageMap::cEnumerator enumerator_3294 (var_cas_LEXICAL_MESSAGE_MAP, true) ;
    const GGS_lexicalMessageMap::cElement * operand_3294 = NULL ;
    while (((operand_3294 = enumerator_3294.nextObject ()))) {
      macroValidPointer (operand_3294) ;
      result << "\n"
        "static const utf32 gLexicalMessage_" ;
      result << operand_3294->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (78)) ;
      result << " [] = " ;
      result << operand_3294->mInfo.mLexicalMessage.ggs_string ().reader_utf32Representation () ;
      result << " ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//          Syntax error messages, for every terminal symbol                 *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_terminalList::cEnumerator enumerator_3844 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_3844 = NULL ;
    while (((operand_3844 = enumerator_3844.nextObject ()))) {
      macroValidPointer (operand_3844) ;
      result << "\n"
        "//--- Syntax error message for terminal '$" ;
      result << operand_3844->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (88)) ;
      result << "$' :\n"
        "static const utf32 gSyntaxErrorMessage_" ;
      result << operand_3844->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (89)).reader_identifierRepresentation () ;
      result << " [] = " ;
      result << operand_3844->mSyntaxErrorMessage.reader_utf32Representation () ;
      result << " ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                appendTerminalMessageToSyntaxErrorMessage                  *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "void C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "::appendTerminalMessageToSyntaxErrorMessage (const PMSInt16 inTerminalIndex,\n"
      "                                           C_String & outSyntaxErrorMessage) {\n"
      "  static const utf32 * syntaxErrorMessageArray [" ;
    result << var_cas_TERMINAL_LIST.reader_length ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (100)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (100)) ;
    result << "] = {kEndOfSourceLexicalErrorMessage" ;
    GGS_terminalList::cEnumerator enumerator_4831 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_4831 = NULL ;
    while (((operand_4831 = enumerator_4831.nextObject ()))) {
      macroValidPointer (operand_4831) ;
      result << ",\n"
        "    gSyntaxErrorMessage_" ;
      result << operand_4831->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (102)).reader_identifierRepresentation () ;
    }
    result << "} ;\n"
      "  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                      U N I C O D E    S T R I N G S                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_stringset::cEnumerator enumerator_5443 (var_cas_STRINGS_IN_EXPLICIT_RULES, true) ;
    while (enumerator_5443.hasCurrentObject ()) {
      result << "\n"
        "//--- Unicode string for '$" ;
      result << enumerator_5443._key (HERE).reader_identifierRepresentation () ;
      result << "$'\n"
        "static const utf32 kUnicodeString_" ;
      result << enumerator_5443._key (HERE).reader_identifierRepresentation () ;
      result << " [] = " ;
      result << enumerator_5443._key (HERE).reader_utf32Representation () ;
      result << " ;\n" ;
      enumerator_5443.next () ;
    }
    result << "\n" ;
    GGS_lexicalExplicitTokenListMapMap::cEnumerator enumerator_5703 (var_cas_LEXICAL_TOKEN_LIST_MAP, true) ;
    const GGS_lexicalExplicitTokenListMapMap::cElement * operand_5703 = NULL ;
    while (((operand_5703 = enumerator_5703.nextObject ()))) {
      macroValidPointer (operand_5703) ;
      result << "//---------------------------------------------------------------------------*\n"
        "//                                                                           *\n"
        "//             Key words table '" ;
      result << operand_5703->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (123)) ;
      result << "'                            *\n"
        "//                                                                           *\n"
        "//---------------------------------------------------------------------------*\n"
        "\n"
        "static const PMSInt32 ktable_size_" ;
      result << operand_5703->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (126)) ;
      result << " = " ;
      result << operand_5703->mInfo.mExplicitTokenListMap.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (126)) ;
      result << " ;\n"
        "\n"
        "static const C_unicode_lexique_table_entry ktable_for_" ;
      result << operand_5703->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (127)) ;
      result << " [ktable_size_" ;
      result << operand_5703->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (127)) ;
      result << "] = {\n" ;
      GGS_tokenSortedlist::cEnumerator enumerator_6461 (operand_5703->mInfo.mTokenSortedList, true) ;
      const GGS_tokenSortedlist::cElement * operand_6461 = NULL ;
      while (((operand_6461 = enumerator_6461.nextObject ()))) {
        macroValidPointer (operand_6461) ;
        result << "  C_unicode_lexique_table_entry (kUnicodeString_" ;
        result << operand_6461->mName.reader_identifierRepresentation () ;
        result << ", " ;
        result << operand_6461->mLength.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (129)) ;
        result << ", C_Lexique_" ;
        result << var_cas_LEXIQUE_IDENTIFIER ;
        result << "::kToken_" ;
        result << operand_6461->mTerminalName.reader_identifierRepresentation () ;
        result << ")" ;
        if (enumerator_6461.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n"
        "\n"
        "PMSInt16 C_Lexique_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << "::search_into_" ;
      result << operand_5703->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (133)) ;
      result << " (const C_String & inSearchedString) {\n"
        "  return searchInList (inSearchedString, ktable_for_" ;
      result << operand_5703->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (134)) ;
      result << ", ktable_size_" ;
      result << operand_5703->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (134)) ;
      result << ") ;\n"
        "}\n"
        "\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                          getCurrentTokenString                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "C_String C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "::getCurrentTokenString (const cToken * inTokenPtr) const {\n"
      "  const cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " * ptr = (const cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " *) inTokenPtr ;\n"
      "  C_String s ;\n"
      "  if (ptr == NULL) {\n"
      "    s.appendCString(\"$$\") ;\n"
      "  }else{\n"
      "    switch (ptr->mTokenCode) {\n"
      "    case kToken_:\n"
      "      s.appendCString(\"$$\") ;\n"
      "      break ;\n" ;
    GGS_terminalList::cEnumerator enumerator_7784 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_7784 = NULL ;
    while (((operand_7784 = enumerator_7784.nextObject ()))) {
      macroValidPointer (operand_7784) ;
      result << "    case kToken_" ;
      result << operand_7784->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (155)).reader_identifierRepresentation () ;
      result << ":\n"
        "      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;\n"
        "      s.appendCString (" ;
      result << operand_7784->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (157)).reader_utf8Representation () ;
      result << ") ;\n"
        "      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;\n" ;
      GGS_lexicalSentValueList::cEnumerator enumerator_8114 (operand_7784->mSentAttributeList, true) ;
      const GGS_lexicalSentValueList::cElement * operand_8114 = NULL ;
      while (((operand_8114 = enumerator_8114.nextObject ()))) {
        macroValidPointer (operand_8114) ;
        result << "      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;\n"
          "      s." ;
        result << operand_8114->mLexicalType.reader_appendMethodName (inLexique COMMA_SOURCE_FILE_AT_LINE (161)) ;
        result << " (ptr->mLexicalAttribute_" ;
        result << operand_8114->mLexicalAttributeName.reader_identifierRepresentation () ;
        result << operand_8114->mLexicalType.reader_appendArgumentOfMethod (inLexique COMMA_SOURCE_FILE_AT_LINE (161)) ;
        result << ") ;\n" ;
      }
      result << "      break ;\n" ;
    }
    result << "    default:\n"
      "      break ;\n"
      "    }\n"
      "  }\n"
      "  return s ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                           Template Delimiters                             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_templateDelimitorList::cEnumerator enumerator_8925 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (178)), true) ;
    const GGS_templateDelimitorList::cElement * operand_8925 = NULL ;
    if (enumerator_8925.hasCurrentObject ()) {
      result << "static const cTemplateDelimiterEx kTemplateDefinitionArray [" ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (179)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (179)) ;
      result << "] = {\n" ;
      while (((operand_8925 = enumerator_8925.nextObject ()))) {
        macroValidPointer (operand_8925) ;
        result << "  cTemplateDelimiterEx (kUnicodeString_" ;
        result << operand_8925->mStartString.ggs_string ().reader_identifierRepresentation () ;
        result << ", " ;
        result << operand_8925->mStartString.ggs_string ().reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (180)) ;
        result << ", " ;
        if ((operand_8925->mEndString.ggs_string ().reader_length ()).operator_isEqual (GGS_uint (0U)).boolValue ()) {
          result << "NULL, 0," ;
        }else {
          result << "kUnicodeString_" ;
          result << operand_8925->mEndString.ggs_string ().reader_identifierRepresentation () ;
          result << ", " ;
          result << operand_8925->mEndString.ggs_string ().reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (184)) ;
          result << "," ;
        }
        result << " NULL, " ;
        result << (operand_8925->mPreservesStartDelimiter).operator_not ().reader_cString (inLexique COMMA_SOURCE_FILE_AT_LINE (187)) ;
        result << ")" ;
        if (enumerator_8925.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                           Template Replacements                           *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_templateReplacementListAST::cEnumerator enumerator_9966 (var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (199)), true) ;
    const GGS_templateReplacementListAST::cElement * operand_9966 = NULL ;
    if (enumerator_9966.hasCurrentObject ()) {
      result << "static const cTemplateDelimiterEx kTemplateReplacementArray [" ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (200)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (200)) ;
      result << "] = {\n" ;
      while (((operand_9966 = enumerator_9966.nextObject ()))) {
        macroValidPointer (operand_9966) ;
        result << "  cTemplateDelimiterEx (kUnicodeString_" ;
        result << operand_9966->mMatchString.ggs_string ().reader_identifierRepresentation () ;
        result << ", " ;
        result << operand_9966->mMatchString.ggs_string ().reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (202)) ;
        result << ", kUnicodeString_" ;
        result << operand_9966->mReplacementString.ggs_string ().reader_identifierRepresentation () ;
        result << ", " ;
        result << operand_9966->mReplacementString.ggs_string ().reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ;
        result << ", " ;
        if ((operand_9966->mReplacementFunction.ggs_string ().reader_length ()).operator_isEqual (GGS_uint (0U)).boolValue ()) {
          result << "NULL" ;
        }else {
          result << "scanner_routine_" ;
          result << operand_9966->mReplacementFunction.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (207)) ;
        }
        result << ", true)" ;
        if (enumerator_9966.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//            Terminal Symbols as end of script in template mark             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_terminalList::cEnumerator enumerator_11029 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (220)), true) ;
    const GGS_terminalList::cElement * operand_11029 = NULL ;
    if (enumerator_11029.hasCurrentObject ()) {
      result << "static const bool kEndOfScriptInTemplateArray [" ;
      result << var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (221)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (221)) ;
      result << "] = {\n" ;
      while (((operand_11029 = enumerator_11029.nextObject ()))) {
        macroValidPointer (operand_11029) ;
        result << "  " ;
        result << operand_11029->mIsEndOfTemplateMark.reader_cString (inLexique COMMA_SOURCE_FILE_AT_LINE (222)) ;
        result << " /* " ;
        result << operand_11029->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (222)) ;
        result << " */" ;
        if (enumerator_11029.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//               P A R S E    L E X I C A L    T O K E N                     *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "bool C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "::parseLexicalToken (void) {\n"
      "  cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " token ;\n"
      "  mLoop = true ;\n"
      "  token.mTokenCode = -1 ;\n"
      "  while ((token.mTokenCode < 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (240)).reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << "    if ((mMatchedTemplateDelimiterIndex >= 0)\n"
        "     && (kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength > 0)\n"
        "     && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n"
        "      const bool foundEndDelimitor = testForInputUTF32String (kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndString,\n"
        "                                                              kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength,\n"
        "                                                              true) ;\n"
        "      if (foundEndDelimitor) {\n"
        "        mMatchedTemplateDelimiterIndex = -1 ;\n"
        "      }\n"
        "    }\n"
        "    while ((mMatchedTemplateDelimiterIndex < 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n"
        "      PMSInt32 replacementIndex = 0 ;\n"
        "      while (replacementIndex >= 0) {\n"
        "        replacementIndex = findTemplateDelimiterIndex (kTemplateReplacementArray, " ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (254)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (254)) ;
      result << ") ;\n"
        "        if (replacementIndex >= 0) {\n"
        "          if (kTemplateReplacementArray [replacementIndex].mReplacementFunction == NULL) {\n"
        "            token.mTemplateStringBeforeToken << kTemplateReplacementArray [replacementIndex].mEndString ;\n"
        "          }else{\n"
        "            C_String s ;\n"
        "            while (notTestForInputUTF32String (kTemplateReplacementArray [replacementIndex].mEndString,\n"
        "                                               kTemplateReplacementArray [replacementIndex].mEndStringLength,\n"
        "                                               kEndOfSourceLexicalErrorMessage\n"
        "                                               COMMA_HERE)) {\n"
        "              s.appendUnicodeCharacter (previousChar () COMMA_HERE) ;\n"
        "            }\n"
        "            kTemplateReplacementArray [replacementIndex].mReplacementFunction (*this, s, token.mTemplateStringBeforeToken) ;\n"
        "          }\n"
        "        }\n"
        "      }\n"
        "      mMatchedTemplateDelimiterIndex = findTemplateDelimiterIndex (kTemplateDefinitionArray, " ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (270)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (270)) ;
      result << ") ;\n"
        "      if (mMatchedTemplateDelimiterIndex < 0) {\n"
        "        token.mTemplateStringBeforeToken.appendUnicodeCharacter (mCurrentChar COMMA_HERE) ;\n"
        "        advance () ;\n"
        "      }\n"
        "    }\n"
        "    if ((mMatchedTemplateDelimiterIndex >= 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n" ;
      GGS_lexicalAttributeMap::cEnumerator enumerator_14254 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
      const GGS_lexicalAttributeMap::cElement * operand_14254 = NULL ;
      while (((operand_14254 = enumerator_14254.nextObject ()))) {
        macroValidPointer (operand_14254) ;
        result << "    token.mLexicalAttribute_" ;
        result << operand_14254->mKey.ggs_string ().reader_identifierRepresentation () ;
        result << operand_14254->mInfo.mLexicalType.reader_initialization (inLexique COMMA_SOURCE_FILE_AT_LINE (278)) ;
        result << " ;\n" ;
      }
      result << "    mTokenFirstLocation = mCurrentLocation ;\n"
        "    try{\n" ;
      const GGS_uint indentation_15146 = GGS_uint (8U) ;
      if (indentation_15146.isBuilt ()) {
        result.incIndentation ((PMSInt32) indentation_15146.uintValue ()) ;
      }
      GGS_lexicalRuleListAST::cEnumerator enumerator_14475 (var_cas_LEXICAL_RULE_LIST, true) ;
      const GGS_lexicalRuleListAST::cElement * operand_14475 = NULL ;
      while (((operand_14475 = enumerator_14475.nextObject ()))) {
        macroValidPointer (operand_14475) ;
        result << (findCategoryReader__abstractLexicalRuleAST__generateCode (operand_14475->mLexicalRule (HERE)->galgasRTTI ()) (inLexique, operand_14475->mLexicalRule.getPtr (), var_cas_LEXIQUE_IDENTIFIER, var_cas_LEXIQUE_ANALYSIS_CONTEXT COMMA_SOURCE_FILE_AT_LINE (285))) ;
      }
       ;
      if (indentation_15146.isBuilt ()) {
        result.incIndentation (- ((PMSInt32) indentation_15146.uintValue ())) ;
      }
      result << "if (testForInputUTF32Char (TO_UNICODE ('\\0'))) { // End of source text \? \n"
        "          token.mTokenCode = kToken_ ; // Empty string code\n"
        "        }else{ // Unknown input character\n"
        "          unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;\n"
        "        }\n"
        "      }catch (const C_lexicalErrorException &) {\n"
        "        token.mTokenCode = -1 ; // No token\n"
        "        advance () ; // ... go throught unknown character\n"
        "      }\n"
        "    }\n"
        "    if ((token.mTokenCode > 0) && kEndOfScriptInTemplateArray [token.mTokenCode - 1]) {\n"
        "      mMatchedTemplateDelimiterIndex = -1 ;\n"
        "    }\n"
        "  " ;
    }else {
      GGS_lexicalAttributeMap::cEnumerator enumerator_15181 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
      const GGS_lexicalAttributeMap::cElement * operand_15181 = NULL ;
      while (((operand_15181 = enumerator_15181.nextObject ()))) {
        macroValidPointer (operand_15181) ;
        result << "    token.mLexicalAttribute_" ;
        result << operand_15181->mKey.ggs_string ().reader_identifierRepresentation () ;
        result << operand_15181->mInfo.mLexicalType.reader_initialization (inLexique COMMA_SOURCE_FILE_AT_LINE (303)) ;
        result << " ;\n" ;
      }
      result << "    mTokenFirstLocation = mCurrentLocation ;\n"
        "    try{\n" ;
      const GGS_uint indentation_15909 = GGS_uint (6U) ;
      if (indentation_15909.isBuilt ()) {
        result.incIndentation ((PMSInt32) indentation_15909.uintValue ()) ;
      }
      GGS_lexicalRuleListAST::cEnumerator enumerator_15402 (var_cas_LEXICAL_RULE_LIST, true) ;
      const GGS_lexicalRuleListAST::cElement * operand_15402 = NULL ;
      while (((operand_15402 = enumerator_15402.nextObject ()))) {
        macroValidPointer (operand_15402) ;
        result << (findCategoryReader__abstractLexicalRuleAST__generateCode (operand_15402->mLexicalRule (HERE)->galgasRTTI ()) (inLexique, operand_15402->mLexicalRule.getPtr (), var_cas_LEXIQUE_IDENTIFIER, var_cas_LEXIQUE_ANALYSIS_CONTEXT COMMA_SOURCE_FILE_AT_LINE (310))) ;
      }
       ;
      if (indentation_15909.isBuilt ()) {
        result.incIndentation (- ((PMSInt32) indentation_15909.uintValue ())) ;
      }
      result << "if (testForInputUTF32Char (TO_UNICODE ('\\0'))) { // End of source text \? \n"
        "        token.mTokenCode = kToken_ ; // Empty string code\n"
        "      }else{ // Unknown input character\n"
        "        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;\n"
        "      }\n"
        "    }catch (const C_lexicalErrorException &) {\n"
        "      token.mTokenCode = -1 ; // No token\n"
        "      advance () ; // ... go throught unknown character\n"
        "    }" ;
    }
    result << "\n"
      "  }\n"
      "  if ((UNICODE_VALUE (mCurrentChar) == '\\0') && (token.mTemplateStringBeforeToken.length () > 0)) {\n"
      "    token.mTokenCode = 0 ;\n"
      "    enterToken (token) ;\n"
      "  }\n"
      "  return token.mTokenCode > 0 ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                         E N T E R    T O K E N                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "void C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "::enterToken (const cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " & inToken) {\n"
      "  cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " * ptr = NULL ;\n"
      "  macroMyNew (ptr, cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " ()) ;\n"
      "  ptr->mTokenCode = inToken.mTokenCode ;\n"
      "  ptr->mStartLocation = mTokenFirstLocation ;\n"
      "  ptr->mEndLocation = mTokenLastLocation ;\n"
      "  ptr->mTemplateStringBeforeToken = inToken.mTemplateStringBeforeToken ;\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_16951 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_16951 = NULL ;
    while (((operand_16951 = enumerator_16951.nextObject ()))) {
      macroValidPointer (operand_16951) ;
      result << "  ptr->mLexicalAttribute_" ;
      result << operand_16951->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " = inToken.mLexicalAttribute_" ;
      result << operand_16951->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " ;\n" ;
    }
    result << "  enterTokenFromPointer (ptr) ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//               A T T R I B U T E   A C C E S S                             *\n"
      "//                                                                           *\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_17487 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_17487 = NULL ;
    while (((operand_17487 = enumerator_17487.nextObject ()))) {
      macroValidPointer (operand_17487) ;
      result << "//---------------------------------------------------------------------------*\n"
        "\n" ;
      result << operand_17487->mInfo.mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (357)) ;
      result << " C_Lexique_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << "::attributeValue_" ;
      result << operand_17487->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " (void) const {\n"
        "  cTokenFor_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << " * ptr = (cTokenFor_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << " *) mCurrentTokenPtr ;\n"
        "  return ptr->mLexicalAttribute_" ;
      result << operand_17487->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " ;\n"
        "}\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//         A S S I G N    F R O M    A T T R I B U T E    ( V 1 )            *\n"
      "//                                                                           *\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_18272 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_18272 = NULL ;
    while (((operand_18272 = enumerator_18272.nextObject ()))) {
      macroValidPointer (operand_18272) ;
      result << "//---------------------------------------------------------------------------*\n"
        "\n"
        "void C_Lexique_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << "::assignFromAttribute_" ;
      result << operand_18272->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " (GGS_l" ;
      result << operand_18272->mInfo.mLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (369)) ;
      result << " & outValue) const {\n"
        "  cTokenFor_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << " * ptr = (cTokenFor_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << " *) mCurrentTokenPtr ;\n"
        "  outValue = GGS_l" ;
      result << operand_18272->mInfo.mLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (371)) ;
      result << " (* this, ptr->mLexicalAttribute_" ;
      result << operand_18272->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << ") ;\n"
        "}\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'newImplementationZone2' template of 'lexiqueGenerationTemplates' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_newImplementationZone2 (C_CompilerEx & inLexique,
                                const GGS_string& var_cas_LEXIQUE_IDENTIFIER,
                                const GGS_lexicalAttributeMap & var_cas_LEXICAL_ATTRIBUTE_MAP,
                                const GGS_lexicalMessageMap & var_cas_LEXICAL_MESSAGE_MAP,
                                const GGS_terminalList & var_cas_TERMINAL_LIST,
                                const GGS_lexicalExplicitTokenListMapMap & var_cas_LEXICAL_TOKEN_LIST_MAP,
                                const GGS_stringset & var_cas_STRINGS_IN_EXPLICIT_RULES,
                                const GGS_lexicalRuleListAST & var_cas_LEXICAL_RULE_LIST,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT,
                                const GGS_lexiqueComponentAST & var_cas_LEXIQUE_COMPONENT_ROOT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_IDENTIFIER.isBuilt ()
    && var_cas_LEXICAL_ATTRIBUTE_MAP.isBuilt ()
    && var_cas_LEXICAL_MESSAGE_MAP.isBuilt ()
    && var_cas_TERMINAL_LIST.isBuilt ()
    && var_cas_LEXICAL_TOKEN_LIST_MAP.isBuilt ()
    && var_cas_STRINGS_IN_EXPLICIT_RULES.isBuilt ()
    && var_cas_LEXICAL_RULE_LIST.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt ()
    && var_cas_LEXIQUE_COMPONENT_ROOT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"version_libpm.h\"\n"
      "#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER\n"
      "  #error \"This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm\"\n"
      "#endif\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include <ctype.h>\n"
      "#include <string.h>\n"
      "\n"
      "#include \"utilities/MF_MemoryControl.h\"\n"
      "#include \"" ;
    result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexiqueComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (15)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (15)) ;
    result << ".h\"\n"
      "\n"
      "#include \"strings/unicode_character_cpp.h\"\n"
      "#include \"galgas/scanner_actions.h\"\n"
      "#ifndef DO_NOT_GENERATE_CHECKINGS\n"
      "  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFileName ().cString (HERE), lineNumber ()\n"
      "  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE\n"
      "#else\n"
      "  #define LINE_AND_SOURCE_FILE\n"
      "  #define COMMA_LINE_AND_SOURCE_FILE\n"
      "#endif\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                               Constructors                                *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "::cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " (void)" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_1474 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_1474 = NULL ;
    if (enumerator_1474.hasCurrentObject ()) {
      result << " :\n" ;
      while (((operand_1474 = enumerator_1474.nextObject ()))) {
        macroValidPointer (operand_1474) ;
        result << "mLexicalAttribute_" ;
        result << operand_1474->mKey.ggs_string ().reader_identifierRepresentation () ;
        result << " ()" ;
        if (enumerator_1474.hasNextObject ()) {
          result << ",\n" ;
        }
      }
    }
    result << " {\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "::C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                const C_String & inDependencyFileExtension,\n"
      "                const C_String & inDependencyFilePath,\n"
      "                C_galgas_io * inParametersPtr,\n"
      "                const C_String & inSourceFileName\n"
      "                COMMA_LOCATION_ARGS) :\n"
      "C_Lexique (inCallerCompiler, inDependencyFileExtension, inDependencyFilePath, inParametersPtr, inSourceFileName COMMA_THERE)" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (51)).reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << ",\n"
        "mMatchedTemplateDelimiterIndex (-1)" ;
    }else {
    }
    result << " {\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "::C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                C_galgas_io * inParametersPtr,\n"
      "                const C_String & inSourceString,\n"
      "                const C_String & inStringForError\n"
      "                COMMA_LOCATION_ARGS) :\n"
      "C_Lexique (inCallerCompiler, inParametersPtr, inSourceString, inStringForError COMMA_THERE)" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (65)).reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << ",\n"
        "mMatchedTemplateDelimiterIndex (-1)" ;
    }else {
    }
    result << " {\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                        Lexical error message list                         *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalMessageMap::cEnumerator enumerator_3284 (var_cas_LEXICAL_MESSAGE_MAP, true) ;
    const GGS_lexicalMessageMap::cElement * operand_3284 = NULL ;
    while (((operand_3284 = enumerator_3284.nextObject ()))) {
      macroValidPointer (operand_3284) ;
      result << "\n"
        "static const utf32 gLexicalMessage_" ;
      result << operand_3284->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (78)) ;
      result << " [] = " ;
      result << operand_3284->mInfo.mLexicalMessage.ggs_string ().reader_utf32Representation () ;
      result << " ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//          Syntax error messages, for every terminal symbol                 *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_terminalList::cEnumerator enumerator_3834 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_3834 = NULL ;
    while (((operand_3834 = enumerator_3834.nextObject ()))) {
      macroValidPointer (operand_3834) ;
      result << "\n"
        "//--- Syntax error message for terminal '$" ;
      result << operand_3834->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (88)) ;
      result << "$' :\n"
        "static const utf32 gSyntaxErrorMessage_" ;
      result << operand_3834->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (89)).reader_identifierRepresentation () ;
      result << " [] = " ;
      result << operand_3834->mSyntaxErrorMessage.reader_utf32Representation () ;
      result << " ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                appendTerminalMessageToSyntaxErrorMessage                  *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "void C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "::appendTerminalMessageToSyntaxErrorMessage (const PMSInt16 inTerminalIndex,\n"
      "                                           C_String & outSyntaxErrorMessage) {\n"
      "  static const utf32 * syntaxErrorMessageArray [" ;
    result << var_cas_TERMINAL_LIST.reader_length ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (100)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (100)) ;
    result << "] = {kEndOfSourceLexicalErrorMessage" ;
    GGS_terminalList::cEnumerator enumerator_4821 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_4821 = NULL ;
    while (((operand_4821 = enumerator_4821.nextObject ()))) {
      macroValidPointer (operand_4821) ;
      result << ",\n"
        "    gSyntaxErrorMessage_" ;
      result << operand_4821->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (102)).reader_identifierRepresentation () ;
    }
    result << "} ;\n"
      "  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                      U N I C O D E    S T R I N G S                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_stringset::cEnumerator enumerator_5433 (var_cas_STRINGS_IN_EXPLICIT_RULES, true) ;
    while (enumerator_5433.hasCurrentObject ()) {
      result << "\n"
        "//--- Unicode string for '$" ;
      result << enumerator_5433._key (HERE).reader_identifierRepresentation () ;
      result << "$'\n"
        "static const utf32 kUnicodeString_" ;
      result << enumerator_5433._key (HERE).reader_identifierRepresentation () ;
      result << " [] = " ;
      result << enumerator_5433._key (HERE).reader_utf32Representation () ;
      result << " ;\n" ;
      enumerator_5433.next () ;
    }
    result << "\n" ;
    GGS_lexicalExplicitTokenListMapMap::cEnumerator enumerator_5693 (var_cas_LEXICAL_TOKEN_LIST_MAP, true) ;
    const GGS_lexicalExplicitTokenListMapMap::cElement * operand_5693 = NULL ;
    while (((operand_5693 = enumerator_5693.nextObject ()))) {
      macroValidPointer (operand_5693) ;
      result << "//---------------------------------------------------------------------------*\n"
        "//                                                                           *\n"
        "//             Key words table '" ;
      result << operand_5693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (123)) ;
      result << "'                            *\n"
        "//                                                                           *\n"
        "//---------------------------------------------------------------------------*\n"
        "\n"
        "static const PMSInt32 ktable_size_" ;
      result << operand_5693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (126)) ;
      result << " = " ;
      result << operand_5693->mInfo.mExplicitTokenListMap.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (126)) ;
      result << " ;\n"
        "\n"
        "static const C_unicode_lexique_table_entry ktable_for_" ;
      result << operand_5693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (127)) ;
      result << " [ktable_size_" ;
      result << operand_5693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (127)) ;
      result << "] = {\n" ;
      GGS_tokenSortedlist::cEnumerator enumerator_6451 (operand_5693->mInfo.mTokenSortedList, true) ;
      const GGS_tokenSortedlist::cElement * operand_6451 = NULL ;
      while (((operand_6451 = enumerator_6451.nextObject ()))) {
        macroValidPointer (operand_6451) ;
        result << "  C_unicode_lexique_table_entry (kUnicodeString_" ;
        result << operand_6451->mName.reader_identifierRepresentation () ;
        result << ", " ;
        result << operand_6451->mLength.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (129)) ;
        result << ", C_Lexique_" ;
        result << var_cas_LEXIQUE_IDENTIFIER ;
        result << "::kToken_" ;
        result << operand_6451->mTerminalName.reader_identifierRepresentation () ;
        result << ")" ;
        if (enumerator_6451.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n"
        "\n"
        "PMSInt16 C_Lexique_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << "::search_into_" ;
      result << operand_5693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (133)) ;
      result << " (const C_String & inSearchedString) {\n"
        "  return searchInList (inSearchedString, ktable_for_" ;
      result << operand_5693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (134)) ;
      result << ", ktable_size_" ;
      result << operand_5693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (134)) ;
      result << ") ;\n"
        "}\n"
        "\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                          getCurrentTokenString                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "C_String C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "::getCurrentTokenString (const cToken * inTokenPtr) const {\n"
      "  const cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " * ptr = (const cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " *) inTokenPtr ;\n"
      "  C_String s ;\n"
      "  if (ptr == NULL) {\n"
      "    s.appendCString(\"$$\") ;\n"
      "  }else{\n"
      "    switch (ptr->mTokenCode) {\n"
      "    case kToken_:\n"
      "      s.appendCString(\"$$\") ;\n"
      "      break ;\n" ;
    GGS_terminalList::cEnumerator enumerator_7774 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_7774 = NULL ;
    while (((operand_7774 = enumerator_7774.nextObject ()))) {
      macroValidPointer (operand_7774) ;
      result << "    case kToken_" ;
      result << operand_7774->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (155)).reader_identifierRepresentation () ;
      result << ":\n"
        "      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;\n"
        "      s.appendCString (" ;
      result << operand_7774->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (157)).reader_utf8Representation () ;
      result << ") ;\n"
        "      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;\n" ;
      GGS_lexicalSentValueList::cEnumerator enumerator_8104 (operand_7774->mSentAttributeList, true) ;
      const GGS_lexicalSentValueList::cElement * operand_8104 = NULL ;
      while (((operand_8104 = enumerator_8104.nextObject ()))) {
        macroValidPointer (operand_8104) ;
        result << "      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;\n"
          "      s." ;
        result << operand_8104->mLexicalType.reader_appendMethodName (inLexique COMMA_SOURCE_FILE_AT_LINE (161)) ;
        result << " (ptr->mLexicalAttribute_" ;
        result << operand_8104->mLexicalAttributeName.reader_identifierRepresentation () ;
        result << operand_8104->mLexicalType.reader_appendArgumentOfMethod (inLexique COMMA_SOURCE_FILE_AT_LINE (161)) ;
        result << ") ;\n" ;
      }
      result << "      break ;\n" ;
    }
    result << "    default:\n"
      "      break ;\n"
      "    }\n"
      "  }\n"
      "  return s ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                           Template Delimiters                             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_templateDelimitorList::cEnumerator enumerator_8915 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (178)), true) ;
    const GGS_templateDelimitorList::cElement * operand_8915 = NULL ;
    if (enumerator_8915.hasCurrentObject ()) {
      result << "static const cTemplateDelimiter kTemplateDefinitionArray [" ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (179)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (179)) ;
      result << "] = {\n" ;
      while (((operand_8915 = enumerator_8915.nextObject ()))) {
        macroValidPointer (operand_8915) ;
        result << "  cTemplateDelimiter (kUnicodeString_" ;
        result << operand_8915->mStartString.ggs_string ().reader_identifierRepresentation () ;
        result << ", " ;
        result << operand_8915->mStartString.ggs_string ().reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (180)) ;
        result << ", " ;
        if ((operand_8915->mEndString.ggs_string ().reader_length ()).operator_isEqual (GGS_uint (0U)).boolValue ()) {
          result << "NULL, 0," ;
        }else {
          result << "kUnicodeString_" ;
          result << operand_8915->mEndString.ggs_string ().reader_identifierRepresentation () ;
          result << ", " ;
          result << operand_8915->mEndString.ggs_string ().reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (184)) ;
          result << "," ;
        }
        result << " NULL, " ;
        result << (operand_8915->mPreservesStartDelimiter).operator_not ().reader_cString (inLexique COMMA_SOURCE_FILE_AT_LINE (187)) ;
        result << ")" ;
        if (enumerator_8915.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                           Template Replacements                           *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_templateReplacementListAST::cEnumerator enumerator_9952 (var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (199)), true) ;
    const GGS_templateReplacementListAST::cElement * operand_9952 = NULL ;
    if (enumerator_9952.hasCurrentObject ()) {
      result << "static const cTemplateDelimiter kTemplateReplacementArray [" ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (200)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (200)) ;
      result << "] = {\n" ;
      while (((operand_9952 = enumerator_9952.nextObject ()))) {
        macroValidPointer (operand_9952) ;
        result << "  cTemplateDelimiter (kUnicodeString_" ;
        result << operand_9952->mMatchString.ggs_string ().reader_identifierRepresentation () ;
        result << ", " ;
        result << operand_9952->mMatchString.ggs_string ().reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (202)) ;
        result << ", kUnicodeString_" ;
        result << operand_9952->mReplacementString.ggs_string ().reader_identifierRepresentation () ;
        result << ", " ;
        result << operand_9952->mReplacementString.ggs_string ().reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ;
        result << ", " ;
        if ((operand_9952->mReplacementFunction.ggs_string ().reader_length ()).operator_isEqual (GGS_uint (0U)).boolValue ()) {
          result << "NULL" ;
        }else {
          result << "scanner_routine_" ;
          result << operand_9952->mReplacementFunction.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (207)) ;
        }
        result << ", true)" ;
        if (enumerator_9952.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//            Terminal Symbols as end of script in template mark             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_terminalList::cEnumerator enumerator_11011 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (220)), true) ;
    const GGS_terminalList::cElement * operand_11011 = NULL ;
    if (enumerator_11011.hasCurrentObject ()) {
      result << "static const bool kEndOfScriptInTemplateArray [" ;
      result << var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (221)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (221)) ;
      result << "] = {\n" ;
      while (((operand_11011 = enumerator_11011.nextObject ()))) {
        macroValidPointer (operand_11011) ;
        result << "  " ;
        result << operand_11011->mIsEndOfTemplateMark.reader_cString (inLexique COMMA_SOURCE_FILE_AT_LINE (222)) ;
        result << " /* " ;
        result << operand_11011->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (222)) ;
        result << " */" ;
        if (enumerator_11011.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//               P A R S E    L E X I C A L    T O K E N                     *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "bool C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "::parseLexicalToken (void) {\n"
      "  cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " token ;\n"
      "  mLoop = true ;\n"
      "  token.mTokenCode = -1 ;\n"
      "  while ((token.mTokenCode < 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (240)).reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << "    if ((mMatchedTemplateDelimiterIndex >= 0)\n"
        "     && (kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength > 0)\n"
        "     && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n"
        "      const bool foundEndDelimitor = testForInputUTF32String (kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndString,\n"
        "                                                              kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength,\n"
        "                                                              true) ;\n"
        "      if (foundEndDelimitor) {\n"
        "        mMatchedTemplateDelimiterIndex = -1 ;\n"
        "      }\n"
        "    }\n"
        "    while ((mMatchedTemplateDelimiterIndex < 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n"
        "      PMSInt32 replacementIndex = 0 ;\n"
        "      while (replacementIndex >= 0) {\n"
        "        replacementIndex = findTemplateDelimiterIndex (kTemplateReplacementArray, " ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (254)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (254)) ;
      result << ") ;\n"
        "        if (replacementIndex >= 0) {\n"
        "          if (kTemplateReplacementArray [replacementIndex].mReplacementFunction == NULL) {\n"
        "            token.mTemplateStringBeforeToken << kTemplateReplacementArray [replacementIndex].mEndString ;\n"
        "          }else{\n"
        "            C_String s ;\n"
        "            while (notTestForInputUTF32String (kTemplateReplacementArray [replacementIndex].mEndString,\n"
        "                                               kTemplateReplacementArray [replacementIndex].mEndStringLength,\n"
        "                                               kEndOfSourceLexicalErrorMessage\n"
        "                                               COMMA_HERE)) {\n"
        "              s.appendUnicodeCharacter (previousChar () COMMA_HERE) ;\n"
        "            }\n"
        "            kTemplateReplacementArray [replacementIndex].mReplacementFunction (*this, s, token.mTemplateStringBeforeToken) ;\n"
        "          }\n"
        "        }\n"
        "      }\n"
        "      mMatchedTemplateDelimiterIndex = findTemplateDelimiterIndex (kTemplateDefinitionArray, " ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (270)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (270)) ;
      result << ") ;\n"
        "      if (mMatchedTemplateDelimiterIndex < 0) {\n"
        "        token.mTemplateStringBeforeToken.appendUnicodeCharacter (mCurrentChar COMMA_HERE) ;\n"
        "        advance () ;\n"
        "      }\n"
        "    }\n"
        "    if ((mMatchedTemplateDelimiterIndex >= 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n" ;
      GGS_lexicalAttributeMap::cEnumerator enumerator_14236 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
      const GGS_lexicalAttributeMap::cElement * operand_14236 = NULL ;
      while (((operand_14236 = enumerator_14236.nextObject ()))) {
        macroValidPointer (operand_14236) ;
        result << "    token.mLexicalAttribute_" ;
        result << operand_14236->mKey.ggs_string ().reader_identifierRepresentation () ;
        result << operand_14236->mInfo.mLexicalType.reader_initialization (inLexique COMMA_SOURCE_FILE_AT_LINE (278)) ;
        result << " ;\n" ;
      }
      result << "    mTokenFirstLocation = mCurrentLocation ;\n"
        "    try{\n" ;
      const GGS_uint indentation_15128 = GGS_uint (8U) ;
      if (indentation_15128.isBuilt ()) {
        result.incIndentation ((PMSInt32) indentation_15128.uintValue ()) ;
      }
      GGS_lexicalRuleListAST::cEnumerator enumerator_14457 (var_cas_LEXICAL_RULE_LIST, true) ;
      const GGS_lexicalRuleListAST::cElement * operand_14457 = NULL ;
      while (((operand_14457 = enumerator_14457.nextObject ()))) {
        macroValidPointer (operand_14457) ;
        result << (findCategoryReader__abstractLexicalRuleAST__generateCode (operand_14457->mLexicalRule (HERE)->galgasRTTI ()) (inLexique, operand_14457->mLexicalRule.getPtr (), var_cas_LEXIQUE_IDENTIFIER, var_cas_LEXIQUE_ANALYSIS_CONTEXT COMMA_SOURCE_FILE_AT_LINE (285))) ;
      }
       ;
      if (indentation_15128.isBuilt ()) {
        result.incIndentation (- ((PMSInt32) indentation_15128.uintValue ())) ;
      }
      result << "if (testForInputUTF32Char (TO_UNICODE ('\\0'))) { // End of source text \? \n"
        "          token.mTokenCode = kToken_ ; // Empty string code\n"
        "        }else{ // Unknown input character\n"
        "          unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;\n"
        "        }\n"
        "      }catch (const C_lexicalErrorException &) {\n"
        "        token.mTokenCode = -1 ; // No token\n"
        "        advance () ; // ... go throught unknown character\n"
        "      }\n"
        "    }\n"
        "    if ((token.mTokenCode > 0) && kEndOfScriptInTemplateArray [token.mTokenCode - 1]) {\n"
        "      mMatchedTemplateDelimiterIndex = -1 ;\n"
        "    }\n"
        "  " ;
    }else {
      GGS_lexicalAttributeMap::cEnumerator enumerator_15163 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
      const GGS_lexicalAttributeMap::cElement * operand_15163 = NULL ;
      while (((operand_15163 = enumerator_15163.nextObject ()))) {
        macroValidPointer (operand_15163) ;
        result << "    token.mLexicalAttribute_" ;
        result << operand_15163->mKey.ggs_string ().reader_identifierRepresentation () ;
        result << operand_15163->mInfo.mLexicalType.reader_initialization (inLexique COMMA_SOURCE_FILE_AT_LINE (303)) ;
        result << " ;\n" ;
      }
      result << "    mTokenFirstLocation = mCurrentLocation ;\n"
        "    try{\n" ;
      const GGS_uint indentation_15891 = GGS_uint (6U) ;
      if (indentation_15891.isBuilt ()) {
        result.incIndentation ((PMSInt32) indentation_15891.uintValue ()) ;
      }
      GGS_lexicalRuleListAST::cEnumerator enumerator_15384 (var_cas_LEXICAL_RULE_LIST, true) ;
      const GGS_lexicalRuleListAST::cElement * operand_15384 = NULL ;
      while (((operand_15384 = enumerator_15384.nextObject ()))) {
        macroValidPointer (operand_15384) ;
        result << (findCategoryReader__abstractLexicalRuleAST__generateCode (operand_15384->mLexicalRule (HERE)->galgasRTTI ()) (inLexique, operand_15384->mLexicalRule.getPtr (), var_cas_LEXIQUE_IDENTIFIER, var_cas_LEXIQUE_ANALYSIS_CONTEXT COMMA_SOURCE_FILE_AT_LINE (310))) ;
      }
       ;
      if (indentation_15891.isBuilt ()) {
        result.incIndentation (- ((PMSInt32) indentation_15891.uintValue ())) ;
      }
      result << "if (testForInputUTF32Char (TO_UNICODE ('\\0'))) { // End of source text \? \n"
        "        token.mTokenCode = kToken_ ; // Empty string code\n"
        "      }else{ // Unknown input character\n"
        "        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;\n"
        "      }\n"
        "    }catch (const C_lexicalErrorException &) {\n"
        "      token.mTokenCode = -1 ; // No token\n"
        "      advance () ; // ... go throught unknown character\n"
        "    }" ;
    }
    result << "\n"
      "  }\n"
      "  if ((UNICODE_VALUE (mCurrentChar) == '\\0') && (token.mTemplateStringBeforeToken.length () > 0)) {\n"
      "    token.mTokenCode = 0 ;\n"
      "    enterToken (token) ;\n"
      "  }\n"
      "  return token.mTokenCode > 0 ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                         E N T E R    T O K E N                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "void C_Lexique_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << "::enterToken (const cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " & inToken) {\n"
      "  cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " * ptr = NULL ;\n"
      "  macroMyNew (ptr, cTokenFor_" ;
    result << var_cas_LEXIQUE_IDENTIFIER ;
    result << " ()) ;\n"
      "  ptr->mTokenCode = inToken.mTokenCode ;\n"
      "  ptr->mStartLocation = mTokenFirstLocation ;\n"
      "  ptr->mEndLocation = mTokenLastLocation ;\n"
      "  ptr->mTemplateStringBeforeToken = inToken.mTemplateStringBeforeToken ;\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_16933 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_16933 = NULL ;
    while (((operand_16933 = enumerator_16933.nextObject ()))) {
      macroValidPointer (operand_16933) ;
      result << "  ptr->mLexicalAttribute_" ;
      result << operand_16933->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " = inToken.mLexicalAttribute_" ;
      result << operand_16933->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " ;\n" ;
    }
    result << "  enterTokenFromPointer (ptr) ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//               A T T R I B U T E   A C C E S S                             *\n"
      "//                                                                           *\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_17469 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_17469 = NULL ;
    while (((operand_17469 = enumerator_17469.nextObject ()))) {
      macroValidPointer (operand_17469) ;
      result << "//---------------------------------------------------------------------------*\n"
        "\n" ;
      result << operand_17469->mInfo.mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (357)) ;
      result << " C_Lexique_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << "::attributeValue_" ;
      result << operand_17469->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " (void) const {\n"
        "  cTokenFor_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << " * ptr = (cTokenFor_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << " *) mCurrentTokenPtr ;\n"
        "  return ptr->mLexicalAttribute_" ;
      result << operand_17469->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " ;\n"
        "}\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//         A S S I G N    F R O M    A T T R I B U T E    ( V 1 )            *\n"
      "//                                                                           *\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_18254 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_18254 = NULL ;
    while (((operand_18254 = enumerator_18254.nextObject ()))) {
      macroValidPointer (operand_18254) ;
      result << "//---------------------------------------------------------------------------*\n"
        "\n"
        "void C_Lexique_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << "::assignFromAttribute_" ;
      result << operand_18254->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " (GGS_l" ;
      result << operand_18254->mInfo.mLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (369)) ;
      result << " & outValue) const {\n"
        "  cTokenFor_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << " * ptr = (cTokenFor_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << " *) mCurrentTokenPtr ;\n"
        "  outValue = GGS_l" ;
      result << operand_18254->mInfo.mLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (371)) ;
      result << " (* this, ptr->mLexicalAttribute_" ;
      result << operand_18254->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << ") ;\n"
        "}\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//         A S S I G N    F R O M    A T T R I B U T E    ( V 2 )            *\n"
      "//                                                                           *\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_19127 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_19127 = NULL ;
    while (((operand_19127 = enumerator_19127.nextObject ()))) {
      macroValidPointer (operand_19127) ;
      result << "//---------------------------------------------------------------------------*\n"
        "\n"
        "GALGAS_l" ;
      result << operand_19127->mInfo.mLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (381)).reader_identifierRepresentation () ;
      result << " C_Lexique_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << "::synthetizedAttribute_" ;
      result << operand_19127->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " (void) const {\n"
        "  cTokenFor_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << " * ptr = (cTokenFor_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << " *) mCurrentTokenPtr ;\n"
        "  macroValidObject (ptr, cTokenFor_" ;
      result << var_cas_LEXIQUE_IDENTIFIER ;
      result << ") ;\n"
        "  GALGAS_location currentLocation (ptr->mStartLocation, ptr->mEndLocation, sourceText ()) ;\n"
        "  GALGAS_" ;
      result << operand_19127->mInfo.mLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (385)).reader_identifierRepresentation () ;
      result << " value (ptr->mLexicalAttribute_" ;
      result << operand_19127->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << ") ;\n"
        "  GALGAS_l" ;
      result << operand_19127->mInfo.mLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (386)).reader_identifierRepresentation () ;
      result << " result (value, currentLocation) ;\n"
        "  return result ;\n"
        "}\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// 'cocoaHeaderZone2' template of 'lexiqueGenerationTemplates' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_cocoaHeaderZone2 (C_CompilerEx & inLexique,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "#import \"OC_Lexique.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                    E X T E R N    R O U T I N E S                         *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalRoutineMap::cEnumerator enumerator_486 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalRoutineMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (10)), true) ;
    const GGS_lexicalRoutineMap::cElement * operand_486 = NULL ;
    while (((operand_486 = enumerator_486.nextObject ()))) {
      macroValidPointer (operand_486) ;
      if (operand_486->mInfo.mIsExtern.boolValue ()) {
        result << "\n"
          "void scanner_cocoa_routine_" ;
        result << operand_486->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (12)) ;
        result << " (BOOL * ioScanningOk" ;
        GGS_lexicalRoutineFormalArgumentList::cEnumerator enumerator_634 (operand_486->mInfo.mLexicalRoutineFormalArgumentList, true) ;
        const GGS_lexicalRoutineFormalArgumentList::cElement * operand_634 = NULL ;
        while (((operand_634 = enumerator_634.nextObject ()))) {
          macroValidPointer (operand_634) ;
          result << ",\n"
            "                " ;
          result << operand_634->mLexicalFormalArgumentMode.reader_cppConstInFormalArgument (inLexique COMMA_SOURCE_FILE_AT_LINE (14)) ;
          result << operand_634->mLexicalFormalArgumentType.reader_cocoaTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (15)) ;
          result << operand_634->mLexicalFormalArgumentMode.reader_cocoaPointerInFormalArgument (inLexique COMMA_SOURCE_FILE_AT_LINE (16)) ;
          result << " " ;
          result << operand_634->mArgumentNameForComment ;
        }
        result << ") ;\n" ;
      }else {
      }
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                    E X T E R N    F U N C T I O N S                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalFunctionMap::cEnumerator enumerator_1452 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (29)), true) ;
    const GGS_lexicalFunctionMap::cElement * operand_1452 = NULL ;
    while (((operand_1452 = enumerator_1452.nextObject ()))) {
      macroValidPointer (operand_1452) ;
      if (operand_1452->mInfo.mIsExtern.boolValue ()) {
        result << "\n" ;
        result << operand_1452->mInfo.mReturnedLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (31)) ;
        result << " scanner_cocoa_function_" ;
        result << operand_1452->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (31)) ;
        result << " (BOOL * ioScanningOk" ;
        GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_1617 (operand_1452->mInfo.mLexicalTypeList, true) ;
        const GGS_lexicalFunctionFormalArgumentList::cElement * operand_1617 = NULL ;
        while (((operand_1617 = enumerator_1617.nextObject ()))) {
          macroValidPointer (operand_1617) ;
          result << ",\n"
            "                const " ;
          result << operand_1617->mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (33)) ;
          result << " " ;
          result << operand_1617->mArgumentNameForComment ;
        }
        result << ") ;\n" ;
      }else {
      }
    }
    result << "\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//         T E R M I N A L    S Y M B O L    E N U M E R A T I O N           *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "enum {" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "_1_" ;
    GGS_terminalList::cEnumerator enumerator_2251 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (47)), true) ;
    const GGS_terminalList::cElement * operand_2251 = NULL ;
    while (((operand_2251 = enumerator_2251.nextObject ()))) {
      macroValidPointer (operand_2251) ;
      result << ",\n"
        "  " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_" ;
      result << operand_2251->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (48)).reader_identifierRepresentation () ;
    }
    result << "\n"
      "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                     S C A N N E R    C L A S S                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "@interface OC_Lexique_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " : OC_Lexique {\n"
      "//--- Attributes\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_2902 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (61)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_2902 = NULL ;
    while (((operand_2902 = enumerator_2902.nextObject ()))) {
      macroValidPointer (operand_2902) ;
      result << "  @private " ;
      result << operand_2902->mInfo.mLexicalType.reader_cocoaTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (62)) ;
      result << " mLexicalAttribute_" ;
      result << operand_2902->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (62)) ;
      result << " ;\n" ;
    }
    result << "\n"
      "}\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// 'cocoaHeaderZone3' template of 'lexiqueGenerationTemplates' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_cocoaHeaderZone3 (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "- (UInt32) terminalVocabularyCount ;\n"
      "\n"
      "- (UInt32) styleIndexForTerminal: (SInt32) inTerminal ;\n"
      "\n"
      "- (void) parseLexicalTokenForLexicalColoring ;\n"
      "\n"
      "- (UInt32) styleCount ;\n"
      "\n"
      "- (NSString *) styleNameForStyleIndex: (SInt32) inIndex ;\n"
      "\n"
      "- (NSString *) styleIdentifierForStyleIndex: (SInt32) inIndex ;\n"
      "\n"
      "- (BOOL) isTemplateLexique ;\n"
      "@end\n"
      "\n"
      "//---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'cocoaImplementationZone2' template of 'lexiqueGenerationTemplates' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_cocoaImplementationZone2 (C_CompilerEx & inLexique,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_lexicalAttributeMap & var_cas_LEXICAL_ATTRIBUTE_MAP,
                                const GGS_lexicalMessageMap & var_cas_LEXICAL_MESSAGE_MAP,
                                const GGS_terminalList & var_cas_TERMINAL_LIST,
                                const GGS_stringset & var_cas_STRINGS_IN_EXPLICIT_RULES,
                                const GGS_lexicalRuleListAST & var_cas_LEXICAL_RULE_LIST,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT,
                                const GGS_lexiqueComponentAST & var_cas_LEXIQUE_COMPONENT_ROOT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_LEXICAL_ATTRIBUTE_MAP.isBuilt ()
    && var_cas_LEXICAL_MESSAGE_MAP.isBuilt ()
    && var_cas_TERMINAL_LIST.isBuilt ()
    && var_cas_STRINGS_IN_EXPLICIT_RULES.isBuilt ()
    && var_cas_LEXICAL_RULE_LIST.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt ()
    && var_cas_LEXIQUE_COMPONENT_ROOT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#import \"version_libpm.h\"\n"
      "#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER\n"
      "  #error \"This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm\"\n"
      "#endif\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#import \"" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "-cocoa.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "@implementation OC_Lexique_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (id) init {\n"
      "  self = [super init] ;\n"
      "  if (self) {\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_802 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_802 = NULL ;
    while (((operand_802 = enumerator_802.nextObject ()))) {
      macroValidPointer (operand_802) ;
      result << "    mLexicalAttribute_" ;
      result << operand_802->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (23)) ;
      result << " = " ;
      result << operand_802->mInfo.mLexicalType.reader_cocoaInitializationCode (inLexique COMMA_SOURCE_FILE_AT_LINE (23)) ;
      result << " ;\n" ;
    }
    result << "  }\n"
      "  return self ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (void) dealloc {\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_1070 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_1070 = NULL ;
    while (((operand_1070 = enumerator_1070.nextObject ()))) {
      macroValidPointer (operand_1070) ;
      if ((operand_1070->mInfo.mLexicalType).operator_isEqual (GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_SOURCE_FILE_AT_LINE (33))).boolValue ()) {
        result << "  [mLexicalAttribute_" ;
        result << operand_1070->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (34)) ;
        result << " release] ;\n" ;
      }else {
      }
    }
    result << "  [super dealloc] ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                           Template Delimiters                             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_templateDelimitorList::cEnumerator enumerator_1710 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (46)), true) ;
    const GGS_templateDelimitorList::cElement * operand_1710 = NULL ;
    if (enumerator_1710.hasCurrentObject ()) {
      result << "static const templateDelimiterStructForCocoa kTemplateDefinitionArray_" ;
      result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation () ;
      result << " [" ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (47)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
      result << "] = {\n" ;
      while (((operand_1710 = enumerator_1710.nextObject ()))) {
        macroValidPointer (operand_1710) ;
        result << "  {@" ;
        result << operand_1710->mStartString.ggs_string ().reader_utf8Representation () ;
        result << ", " ;
        if ((operand_1710->mEndString.ggs_string ().reader_length ()).operator_isEqual (GGS_uint (0U)).boolValue ()) {
          result << "nil," ;
        }else {
          result << "@" ;
          result << operand_1710->mEndString.ggs_string ().reader_utf8Representation () ;
          result << "," ;
        }
        result << " " ;
        result << (operand_1710->mPreservesStartDelimiter).operator_not ().reader_ocString (inLexique COMMA_SOURCE_FILE_AT_LINE (55)) ;
        result << "}" ;
        if (enumerator_1710.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                           Template Replacments                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_templateReplacementListAST::cEnumerator enumerator_2673 (var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (67)), true) ;
    const GGS_templateReplacementListAST::cElement * operand_2673 = NULL ;
    if (enumerator_2673.hasCurrentObject ()) {
      result << "static NSString * kTemplateReplacementArray_" ;
      result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation () ;
      result << " [" ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (68)).reader_length ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (68)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (68)) ;
      result << "] = {\n"
        "  " ;
      while (((operand_2673 = enumerator_2673.nextObject ()))) {
        macroValidPointer (operand_2673) ;
        result << "@" ;
        result << operand_2673->mMatchString.ggs_string ().reader_utf8Representation () ;
        result << ", " ;
      }
      result << "nil\n"
        "} ;" ;
    }
    result << "\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//            Terminal Symbols as end of script in template mark             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_terminalList::cEnumerator enumerator_3398 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (80)), true) ;
    const GGS_terminalList::cElement * operand_3398 = NULL ;
    if (enumerator_3398.hasCurrentObject ()) {
      result << "static const BOOL kEndOfScriptInTemplateArray_" ;
      result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation () ;
      result << " [" ;
      result << var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (81)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (81)) ;
      result << "] = {\n" ;
      while (((operand_3398 = enumerator_3398.nextObject ()))) {
        macroValidPointer (operand_3398) ;
        result << "  " ;
        result << operand_3398->mIsEndOfTemplateMark.reader_ocString (inLexique COMMA_SOURCE_FILE_AT_LINE (82)) ;
        result << " /* " ;
        result << operand_3398->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (82)) ;
        result << " */" ;
        if (enumerator_3398.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n" ;
    }
    result << "\n"
      "\n" ;
    GGS_lexicalExplicitTokenListMapMap::cEnumerator enumerator_3783 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalTokenListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (89)), true) ;
    const GGS_lexicalExplicitTokenListMapMap::cElement * operand_3783 = NULL ;
    while (((operand_3783 = enumerator_3783.nextObject ()))) {
      macroValidPointer (operand_3783) ;
      if (operand_3783->mInfo.mShouldBeGenerated.boolValue ()) {
        result << "//---------------------------------------------------------------------------*\n"
          "//                                                                           *\n"
          "//             Key words table '" ;
        result << operand_3783->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (93)) ;
        result << "'                            *\n"
          "//                                                                           *\n"
          "//---------------------------------------------------------------------------*\n"
          "\n"
          "static const C_cocoa_lexique_table_entry ktable_for_" ;
        result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation () ;
        result << "_" ;
        result << operand_3783->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (96)) ;
        result << " [" ;
        result << operand_3783->mInfo.mExplicitTokenListMap.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (96)) ;
        result << "] = {\n" ;
        GGS_tokenSortedlist::cEnumerator enumerator_4531 (operand_3783->mInfo.mTokenSortedList, true) ;
        const GGS_tokenSortedlist::cElement * operand_4531 = NULL ;
        while (((operand_4531 = enumerator_4531.nextObject ()))) {
          macroValidPointer (operand_4531) ;
          result << "  {@" ;
          result << operand_4531->mName.reader_utf8Representation () ;
          result << ", " ;
          result << var_cas_LEXIQUE_CLASS_NAME ;
          result << "_1_" ;
          result << operand_4531->mTerminalName.reader_identifierRepresentation () ;
          result << "}" ;
          if (enumerator_4531.hasNextObject ()) {
            result << ",\n" ;
          }
        }
        result << "\n"
          "} ;\n"
          "\n"
          "static SInt32 search_into_" ;
        result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation () ;
        result << "_" ;
        result << operand_3783->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (102)) ;
        result << " (NSString * inSearchedString) {\n"
          "  return searchStringInTable (inSearchedString, ktable_for_" ;
        result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation () ;
        result << "_" ;
        result << operand_3783->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (103)) ;
        result << ", " ;
        result << operand_3783->mInfo.mExplicitTokenListMap.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (103)) ;
        result << ") ;\n"
          "}\n"
          "\n" ;
      }else {
      }
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//               P A R S E    L E X I C A L    T O K E N                     *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (void) parseLexicalTokenForLexicalColoring {\n"
      "  mLoop = YES ;\n"
      "  BOOL scanningOk = YES ;\n"
      "  mTokenCode = 0 ;\n"
      "  while ((mTokenCode == 0) && (mCurrentChar != '\\0')) {\n"
      "    mTokenFirstLocation = mCurrentLocation ;\n" ;
    if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (121)).reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << "    if ((mMatchedTemplateDelimiterIndex >= 0) && ([kTemplateDefinitionArray_" ;
      result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation () ;
      result << " [mMatchedTemplateDelimiterIndex].mStartString length] > 0)) {\n"
        "      const BOOL foundEndDelimitor = [self testForInputString:kTemplateDefinitionArray_" ;
      result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation () ;
      result << " [mMatchedTemplateDelimiterIndex].mEndString advance:YES] ;\n"
        "      if (foundEndDelimitor) {\n"
        "        mMatchedTemplateDelimiterIndex = -1 ;\n"
        "      }\n"
        "    }\n"
        "    while ((mMatchedTemplateDelimiterIndex < 0) && (mCurrentChar != '\\0')) {\n"
        "      " ;
      if ((var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (129)).reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
        result << "\n"
          "      [self searchForReplacementPattern:kTemplateReplacementArray_" ;
        result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation () ;
        result << "] ;\n"
          "      " ;
      }else {
      }
      result << "\n"
        "      mMatchedTemplateDelimiterIndex = [self findTemplateDelimiterIndex:kTemplateDefinitionArray_" ;
      result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation () ;
      result << " listLength:" ;
      result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (132)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (132)) ;
      result << "] ;\n"
        "      if (mMatchedTemplateDelimiterIndex < 0) {\n"
        "        [self advance] ;\n"
        "        mTokenCode = -2 ;\n"
        "      }\n"
        "    }\n"
        "    if ((mMatchedTemplateDelimiterIndex >= 0) && (mTokenCode == 0) && (mCurrentChar != '\\0') && scanningOk) {\n" ;
      GGS_lexicalAttributeMap::cEnumerator enumerator_7012 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
      const GGS_lexicalAttributeMap::cElement * operand_7012 = NULL ;
      while (((operand_7012 = enumerator_7012.nextObject ()))) {
        macroValidPointer (operand_7012) ;
        result << "      " ;
        result << operand_7012->mInfo.mLexicalType.reader_cocoaResetPrefix (inLexique COMMA_SOURCE_FILE_AT_LINE (140)) ;
        result << "mLexicalAttribute_" ;
        result << operand_7012->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (140)) ;
        result << operand_7012->mInfo.mLexicalType.reader_cocoaReset (inLexique COMMA_SOURCE_FILE_AT_LINE (140)) ;
        result << " ;\n" ;
      }
      result << "      mTokenFirstLocation = mCurrentLocation ;\n" ;
      const GGS_uint indentation_7434 = GGS_uint (6U) ;
      if (indentation_7434.isBuilt ()) {
        result.incIndentation ((PMSInt32) indentation_7434.uintValue ()) ;
      }
      GGS_lexicalRuleListAST::cEnumerator enumerator_7234 (var_cas_LEXICAL_RULE_LIST, true) ;
      const GGS_lexicalRuleListAST::cElement * operand_7234 = NULL ;
      while (((operand_7234 = enumerator_7234.nextObject ()))) {
        macroValidPointer (operand_7234) ;
        result << (findCategoryReader__abstractLexicalRuleAST__generateCocoaCode (operand_7234->mLexicalRule (HERE)->galgasRTTI ()) (inLexique, operand_7234->mLexicalRule.getPtr (), var_cas_LEXIQUE_CLASS_NAME, var_cas_LEXIQUE_ANALYSIS_CONTEXT COMMA_SOURCE_FILE_AT_LINE (146))) ;
      }
       ;
      if (indentation_7434.isBuilt ()) {
        result.incIndentation (- ((PMSInt32) indentation_7434.uintValue ())) ;
      }
      result << "if ([self testForInputChar:'\\0']) { // End of source text \? \n"
        "        mTokenCode = " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_ ; // Empty string code\n"
        "      }else{ // Unknown input character\n"
        "        scanningOk = NO ;\n"
        "      }\n"
        "    }\n"
        "    if ((mTokenCode > 0) && kEndOfScriptInTemplateArray_" ;
      result << var_cas_LEXIQUE_CLASS_NAME.reader_identifierRepresentation () ;
      result << " [mTokenCode - 1]) {\n"
        "      mMatchedTemplateDelimiterIndex = -1 ;\n"
        "    }\n"
        "  //--- Error \?\n"
        "    if (! scanningOk) {\n"
        "      mTokenCode = -1 ;\n"
        "      [self advance] ;\n"
        "    }" ;
    }else {
      GGS_lexicalAttributeMap::cEnumerator enumerator_7867 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
      const GGS_lexicalAttributeMap::cElement * operand_7867 = NULL ;
      while (((operand_7867 = enumerator_7867.nextObject ()))) {
        macroValidPointer (operand_7867) ;
        result << "    " ;
        result << operand_7867->mInfo.mLexicalType.reader_cocoaResetPrefix (inLexique COMMA_SOURCE_FILE_AT_LINE (164)) ;
        result << "mLexicalAttribute_" ;
        result << operand_7867->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (164)) ;
        result << operand_7867->mInfo.mLexicalType.reader_cocoaReset (inLexique COMMA_SOURCE_FILE_AT_LINE (164)) ;
        result << " ;\n" ;
      }
      result << "    mTokenFirstLocation = mCurrentLocation ;\n" ;
      const GGS_uint indentation_8283 = GGS_uint (4U) ;
      if (indentation_8283.isBuilt ()) {
        result.incIndentation ((PMSInt32) indentation_8283.uintValue ()) ;
      }
      GGS_lexicalRuleListAST::cEnumerator enumerator_8085 (var_cas_LEXICAL_RULE_LIST, true) ;
      const GGS_lexicalRuleListAST::cElement * operand_8085 = NULL ;
      while (((operand_8085 = enumerator_8085.nextObject ()))) {
        macroValidPointer (operand_8085) ;
        result << (findCategoryReader__abstractLexicalRuleAST__generateCocoaCode (operand_8085->mLexicalRule (HERE)->galgasRTTI ()) (inLexique, operand_8085->mLexicalRule.getPtr (), var_cas_LEXIQUE_CLASS_NAME, var_cas_LEXIQUE_ANALYSIS_CONTEXT COMMA_SOURCE_FILE_AT_LINE (170))) ;
      }
       ;
      if (indentation_8283.isBuilt ()) {
        result.incIndentation (- ((PMSInt32) indentation_8283.uintValue ())) ;
      }
      result << "if ([self testForInputChar:'\\0']) { // End of source text \? \n"
        "      mTokenCode = " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_ ; // Empty string code\n"
        "    }else{ // Unknown input character\n"
        "      scanningOk = NO ;\n"
        "    }\n"
        "  //--- Error \?\n"
        "    if (! scanningOk) {\n"
        "      mTokenCode = -1 ;\n"
        "      [self advance] ;\n"
        "    }" ;
    }
    result << "\n"
      "  }\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                   T E R M I N A L    C O U N T                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (UInt32) terminalVocabularyCount {\n"
      "  return " ;
    result << var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (193)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (193)) ;
    result << " ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                     S T Y L E   C O U N T                                 *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (UInt32) styleCount {\n"
      "  return " ;
    result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (203)).reader_length ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (203)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ;
    result << " ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                I S    T E M P L A T E    L E X I Q U E                    *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (BOOL) isTemplateLexique {\n"
      "  return " ;
    result << (var_cas_LEXIQUE_COMPONENT_ROOT.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (213)).reader_length ()).operator_strictSup (GGS_uint (0U)).reader_ocString (inLexique COMMA_SOURCE_FILE_AT_LINE (213)) ;
    result << " ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//              S T Y L E   F O R    T E R M I N A L                         *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (UInt32) styleIndexForTerminal: (SInt32) inTerminal {\n"
      "  static const UInt32 kTerminalSymbolStyles [" ;
    result << var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (223)).reader_length ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (223)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (223)) ;
    result << "] = {0" ;
    GGS_terminalList::cEnumerator enumerator_10651 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (224)), true) ;
    const GGS_terminalList::cElement * operand_10651 = NULL ;
    while (((operand_10651 = enumerator_10651.nextObject ()))) {
      macroValidPointer (operand_10651) ;
      result << ",\n"
        "    " ;
      result << operand_10651->mStyleIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (225)) ;
      result << " /* " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_" ;
      result << operand_10651->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (225)).reader_identifierRepresentation () ;
      result << " */" ;
    }
    result << "\n"
      "  } ;\n"
      "  return kTerminalSymbolStyles [inTerminal] ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//             S T Y L E   N A M E    F O R    I N D E X                     *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (NSString *) styleNameForStyleIndex: (SInt32) inIndex {\n"
      "  NSString * kStyleArray [" ;
    result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (237)).reader_length ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (237)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (237)) ;
    result << "] = {\n"
      "    @\"Default Style\"" ;
    GGS_lexicalStyleListAST::cEnumerator enumerator_11467 (var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (239)), true) ;
    const GGS_lexicalStyleListAST::cElement * operand_11467 = NULL ;
    while (((operand_11467 = enumerator_11467.nextObject ()))) {
      macroValidPointer (operand_11467) ;
      result << ",\n"
        "    @" ;
      result << operand_11467->mComment.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (240)).reader_utf8Representation () ;
    }
    result << "\n"
      "  } ;\n"
      "  return kStyleArray [inIndex] ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//         S T Y L E   I D E N T I F I E R    F O R    I N D E X             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "- (NSString *) styleIdentifierForStyleIndex: (SInt32) inIndex {\n"
      "  NSString * kStyleArray [" ;
    result << var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (252)).reader_length ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (252)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (252)) ;
    result << "] = {\n"
      "    @\"" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "\"" ;
    GGS_lexicalStyleListAST::cEnumerator enumerator_12218 (var_cas_LEXIQUE_COMPONENT_ROOT.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (254)), true) ;
    const GGS_lexicalStyleListAST::cElement * operand_12218 = NULL ;
    while (((operand_12218 = enumerator_12218.nextObject ()))) {
      macroValidPointer (operand_12218) ;
      result << ",\n"
        "    @\"" ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "-" ;
      result << operand_12218->mName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (255)) ;
      result << "\"" ;
    }
    result << "\n"
      "  } ;\n"
      "  return kStyleArray [inIndex] ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "@end\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "parseLexiqueComponent"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_parseLexiqueComponent (C_CompilerEx & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct,
                                GGS_lexiqueComponentAST  & var_cas_outLexiqueComponentRoot
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_parseLexiqueComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, var_cas_inSourceFile.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (705)).reader_lastPathComponent ().reader_stringByDeletingPathExtension (), var_cas_inSourceFile.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (705)) COMMA_SOURCE_FILE_AT_LINE (705)) ;
  const GGS_bool cond_29160 = var_cas_ioParsedComponentStruct.reader_mParsedLexiqueComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (706)).reader_hasKey (var_cas_key.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (706))) ;
  if (cond_29160.isBuiltAndTrue ()) {
    const GGS_parsedLexiqueComponentMap  temp_29120 = var_cas_ioParsedComponentStruct.reader_mParsedLexiqueComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (707)) ;
    if (temp_29120.isBuilt ()) {
      temp_29120 (HERE)->method_searchKey (inLexique, var_cas_key, var_cas_outLexiqueComponentRoot COMMA_SOURCE_FILE_AT_LINE (707)) ;
    }
  }else if (cond_29160.isBuiltAndFalse ()) {
    const GGS_string _depExtension = GGS_string ("") ;
    const GGS_string _depPath = GGS_string ("") ;
    if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
      C_Grammar_lexiqueLL_31_grammar::_performSourceFileParsing_ (inLexique,
                                    _depExtension.string (),
                                    _depPath.string (),
                                    NULL,
                                    var_cas_inSourceFile,
                                    var_cas_outLexiqueComponentRoot
                                    COMMA_SOURCE_FILE_AT_LINE (709)) ;
    }
    var_cas_ioParsedComponentStruct.mParsedLexiqueComponentMap.modifier_insertKey (inLexique, var_cas_key, var_cas_outLexiqueComponentRoot COMMA_SOURCE_FILE_AT_LINE (710)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_parseLexiqueComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of once function "buildLexicalTypeMap"            *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_lexicalTypeMap  gCachedResultForOnceFunction_buildLexicalTypeMap ;
static bool gCacheFlagForOnceFunction_buildLexicalTypeMap = false ;

//---------------------------------------------------------------------------*

GGS_lexicalTypeMap  function_buildLexicalTypeMap (C_CompilerEx & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  if (! gCacheFlagForOnceFunction_buildLexicalTypeMap) {
    #ifdef DEBUG_TRACE_ENABLED
      printf ("ENTER function_buildLexicalTypeMap at %s:%d\n", __FILE__, __LINE__) ;
    #endif
  GGS_lexicalTypeMap  var_cas_outLexicalTypeMap ;
    var_cas_outLexicalTypeMap = GGS_lexicalTypeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (721)) ;
    var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (722)), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_SOURCE_FILE_AT_LINE (722)) COMMA_SOURCE_FILE_AT_LINE (722)) ;
    var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("char"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (723)), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (723)) COMMA_SOURCE_FILE_AT_LINE (723)) ;
    var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (724)), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (724)) COMMA_SOURCE_FILE_AT_LINE (724)) ;
    var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (725)), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (725)) COMMA_SOURCE_FILE_AT_LINE (725)) ;
    var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (726)), GGS_lexicalTypeEnum::constructor_lexicalType_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (726)) COMMA_SOURCE_FILE_AT_LINE (726)) ;
    var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (727)), GGS_lexicalTypeEnum::constructor_lexicalType_sint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (727)) COMMA_SOURCE_FILE_AT_LINE (727)) ;
    var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("double"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (728)), GGS_lexicalTypeEnum::constructor_lexicalType_double (inLexique COMMA_SOURCE_FILE_AT_LINE (728)) COMMA_SOURCE_FILE_AT_LINE (728)) ;
    #ifdef DEBUG_TRACE_ENABLED
      printf ("LEAVE function_buildLexicalTypeMap\n") ;
    #endif
    gCacheFlagForOnceFunction_buildLexicalTypeMap = true ;
    gCachedResultForOnceFunction_buildLexicalTypeMap = var_cas_outLexicalTypeMap ;
  }
  return gCachedResultForOnceFunction_buildLexicalTypeMap ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_buildLexicalTypeMap (C_CompilerEx & inLexique,
                           const GGS_objectlist & /* inEffectiveParameterArray */,
                           const GGS_location & /* inErrorLocation */
                           COMMA_LOCATION_ARGS) {
  const GGS_lexicalTypeMap  result = function_buildLexicalTypeMap (inLexique
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

const C_galgas_function_descriptorEX kFunction_descriptor_buildLexicalTypeMap ("buildLexicalTypeMap",
                              functionForGenericCall_buildLexicalTypeMap,
                              & kTypeDescriptor_GGS_lexicalTypeMap ,
                              0,
                              NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "buildLexicalAttributeMap"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildLexicalAttributeMap (C_CompilerEx & inLexique,
                                const GGS_lexicalTypeMap   var_cas_inLexicalTypeMap,
                                const GGS_lexicalAttributeListAST   var_cas_inLexicalAttributeList,
                                GGS_lexicalAttributeMap  & var_cas_ioLexicalAttributeMap
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildLexicalAttributeMap at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_lexicalAttributeListAST::cEnumerator enumerator_30907 (var_cas_inLexicalAttributeList, true) ;
    const GGS_lexicalAttributeListAST::cElement * operand_30907 = NULL ;
    while (((operand_30907 = enumerator_30907.nextObject ()))) {
      macroValidPointer (operand_30907) ;
      const GGS_bool cond_31139 = var_cas_inLexicalTypeMap.reader_hasKey (operand_30907->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (741))) ;
      if (cond_31139.isBuiltAndTrue ()) {
        GGS_lexicalTypeEnum var_cas_lexicalType ;
        if (var_cas_inLexicalTypeMap.isBuilt ()) {
          var_cas_inLexicalTypeMap (HERE)->method_searchKey (inLexique, operand_30907->mTypeName, var_cas_lexicalType COMMA_SOURCE_FILE_AT_LINE (743)) ;
        }
        var_cas_ioLexicalAttributeMap.modifier_insertKey (inLexique, operand_30907->mName, var_cas_lexicalType COMMA_SOURCE_FILE_AT_LINE (744)) ;
      }else if (cond_31139.isBuiltAndFalse ()) {
        GGS_string var_cas_m = GGS_string ("") ;
        var_cas_m.appendCString ("the @") ;
        var_cas_m.dotAssign_operation (operand_30907->mTypeName) ;
        var_cas_m.appendCString (" type is not a valid lexical attribute type; are allowed:") ;
        GGS_bool var_cas_firstLoop = GGS_bool (true) ;
        {
          GGS_lexicalTypeMap::cEnumerator enumerator_31321 (var_cas_inLexicalTypeMap, true) ;
          const GGS_lexicalTypeMap::cElement * operand_31321 = enumerator_31321.nextObject () ;
          if ((operand_31321 != NULL)) {
            bool _foreach_loop_31321 ;
            do{
              macroValidPointer (operand_31321) ;
              var_cas_m.appendCString (" @") ;
              var_cas_m.dotAssign_operation (operand_31321->mKey) ;
              operand_31321 = enumerator_31321.nextObject () ;
              _foreach_loop_31321 = ((operand_31321 != NULL)) ;
              if (_foreach_loop_31321) {
                var_cas_m.appendCString (",") ;
              }
            }while (_foreach_loop_31321) ;
          }
        }
        operand_30907->mTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_m COMMA_SOURCE_FILE_AT_LINE (755)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildLexicalAttributeMap\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "compileLexiqueComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileLexiqueComponent (C_CompilerEx & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  var_cas_inOutputDirectory,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileLexiqueComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lexiqueComponentAST  var_cas_lexiqueComponentRoot ;
  ::routine_parseLexiqueComponent (inLexique,  var_cas_inSourceFile,  var_cas_ioParsedComponentStruct,  var_cas_lexiqueComponentRoot COMMA_SOURCE_FILE_AT_LINE (769)) ;
  GGS_lstring  var_cas_componentName = var_cas_lexiqueComponentRoot.reader_mLexiqueComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (775)) ;
  GGS_string var_cas_basename = var_cas_inSourceFile.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (776)).reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
  const GGS_bool cond_32482 = (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (777))).operator_isNotEqual (var_cas_basename) ;
  if (cond_32482.isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS checks "
      "the component name ('")).operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (779)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (781)) ;
  }
  const GGS_lexicalTypeMap  var_cas_lexicalTypeMap = function_buildLexicalTypeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (784)) ;
  GGS_lexicalRoutineMap  var_cas_lexicalRoutineMap ;
  ::routine_buildLexicalRoutineMap (inLexique,  var_cas_lexicalRoutineMap COMMA_SOURCE_FILE_AT_LINE (787)) ;
  {
    GGS_externRoutineListAST::cEnumerator enumerator_32855 (var_cas_lexiqueComponentRoot.reader_mExternRoutineList (inLexique COMMA_SOURCE_FILE_AT_LINE (789)), true) ;
    const GGS_externRoutineListAST::cElement * operand_32855 = NULL ;
    while (((operand_32855 = enumerator_32855.nextObject ()))) {
      macroValidPointer (operand_32855) ;
      GGS_lexicalRoutineFormalArgumentList  var_cas_lexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
      {
        GGS_lexicalExternRoutineFormalArgumentListAST::cEnumerator enumerator_33029 (operand_32855->mLexicalRoutineFormalArgumentList, true) ;
        const GGS_lexicalExternRoutineFormalArgumentListAST::cElement * operand_33029 = NULL ;
        while (((operand_33029 = enumerator_33029.nextObject ()))) {
          macroValidPointer (operand_33029) ;
          GGS_lexicalTypeEnum var_cas_lexicalFormalArgumentType ;
          if (var_cas_lexicalTypeMap.isBuilt ()) {
            var_cas_lexicalTypeMap (HERE)->method_searchKey (inLexique, operand_33029->mLexicalTypeName, var_cas_lexicalFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (793)) ;
          }
          var_cas_lexicalRoutineFormalArgumentList.addAssign_operation (operand_33029->mPassingMode, var_cas_lexicalFormalArgumentType, operand_33029->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (794))) ;
        }
      }
      var_cas_lexicalRoutineMap.modifier_insertKey (inLexique, operand_32855->mRoutineName, var_cas_lexicalRoutineFormalArgumentList, operand_32855->mErrorMessageList, GGS_string (""), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (796)) ;
    }
  }
  GGS_lexicalFunctionMap  var_cas_lexicalFunctionMap ;
  ::routine_buildLexicalFunctionMap (inLexique,  var_cas_lexicalFunctionMap COMMA_SOURCE_FILE_AT_LINE (800)) ;
  {
    GGS_externFunctionListAST::cEnumerator enumerator_33660 (var_cas_lexiqueComponentRoot.reader_mExternFunctionList (inLexique COMMA_SOURCE_FILE_AT_LINE (802)), true) ;
    const GGS_externFunctionListAST::cElement * operand_33660 = NULL ;
    while (((operand_33660 = enumerator_33660.nextObject ()))) {
      macroValidPointer (operand_33660) ;
      GGS_lexicalFunctionFormalArgumentList  var_cas_lexicalFunctionFormalArgumentList = GGS_lexicalFunctionFormalArgumentList ::constructor_emptyList () ;
      {
        GGS_lexicalExternFunctionFormalArgumentListAST::cEnumerator enumerator_33838 (operand_33660->mLexicalFunctionFormalArgumentList, true) ;
        const GGS_lexicalExternFunctionFormalArgumentListAST::cElement * operand_33838 = NULL ;
        while (((operand_33838 = enumerator_33838.nextObject ()))) {
          macroValidPointer (operand_33838) ;
          GGS_lexicalTypeEnum var_cas_lexicalFormalArgumentType ;
          if (var_cas_lexicalTypeMap.isBuilt ()) {
            var_cas_lexicalTypeMap (HERE)->method_searchKey (inLexique, operand_33838->mLexicalTypeName, var_cas_lexicalFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (806)) ;
          }
          var_cas_lexicalFunctionFormalArgumentList.addAssign_operation (var_cas_lexicalFormalArgumentType, operand_33838->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (807))) ;
        }
      }
      GGS_lexicalTypeEnum var_cas_returnedArgumentType ;
      if (var_cas_lexicalTypeMap.isBuilt ()) {
        var_cas_lexicalTypeMap (HERE)->method_searchKey (inLexique, operand_33660->mReturnedTypeName, var_cas_returnedArgumentType COMMA_SOURCE_FILE_AT_LINE (810)) ;
      }
      var_cas_lexicalFunctionMap.modifier_insertKey (inLexique, operand_33660->mFunctionName, var_cas_lexicalFunctionFormalArgumentList, var_cas_returnedArgumentType, GGS_string (""), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (811)) ;
    }
  }
  GGS_lexiqueAnalysisContext var_cas_lexiqueAnalysisContext = GGS_lexiqueAnalysisContext::constructor_new (var_cas_lexicalRoutineMap, var_cas_lexicalFunctionMap, GGS_lexicalMessageMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (817)), GGS_terminalMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (818)), GGS_terminalList ::constructor_emptyList (), GGS_lexicalAttributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (820)), GGS_lexicalExplicitTokenListMapMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (821)), GGS_stringset ::constructor_emptySet (), GGS_templateDelimitorList ::constructor_emptyList (), GGS_styleMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (824))) ;
  GGS_uint  var_cas_styleIndex = GGS_uint (1U) ;
  {
    GGS_lexicalStyleListAST::cEnumerator enumerator_34864 (var_cas_lexiqueComponentRoot.reader_mLexicalStyleList (inLexique COMMA_SOURCE_FILE_AT_LINE (828)), true) ;
    const GGS_lexicalStyleListAST::cElement * operand_34864 = NULL ;
    while (((operand_34864 = enumerator_34864.nextObject ()))) {
      macroValidPointer (operand_34864) ;
      var_cas_lexiqueAnalysisContext.mStyleMap.modifier_insertKey (inLexique, operand_34864->mName, operand_34864->mComment, var_cas_styleIndex COMMA_SOURCE_FILE_AT_LINE (829)) ;
      var_cas_styleIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (830)) ;
    }
  }
  ::routine_buildLexicalAttributeMap (inLexique,  var_cas_lexicalTypeMap,  var_cas_lexiqueComponentRoot.reader_mLexicalAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (835)),  var_cas_lexiqueAnalysisContext.mLexicalAttributeMap COMMA_SOURCE_FILE_AT_LINE (833)) ;
  {
    GGS_terminalDeclarationListAST::cEnumerator enumerator_35315 (var_cas_lexiqueComponentRoot.reader_mTerminalDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (839)), true) ;
    const GGS_terminalDeclarationListAST::cElement * operand_35315 = NULL ;
    while (((operand_35315 = enumerator_35315.nextObject ()))) {
      macroValidPointer (operand_35315) ;
      GGS_uint  var_cas_terminalStyleIndex = GGS_uint (0U) ;
      const GGS_bool cond_35535 = (operand_35315->mStyle.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (841)).reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_35535.isBuiltAndTrue ()) {
        GGS_lstring  automatic_var_35525_0 ;
        const GGS_styleMap  temp_35493 = var_cas_lexiqueAnalysisContext.reader_mStyleMap (inLexique COMMA_SOURCE_FILE_AT_LINE (842)) ;
        if (temp_35493.isBuilt ()) {
          temp_35493 (HERE)->method_searchKey (inLexique, operand_35315->mStyle, automatic_var_35525_0, var_cas_terminalStyleIndex COMMA_SOURCE_FILE_AT_LINE (842)) ;
        }
      }
      GGS_lexicalSentValueList  var_cas_argumentTypeList = GGS_lexicalSentValueList ::constructor_emptyList () ;
      {
        GGS_lstringlist::cEnumerator enumerator_35628 (operand_35315->mSentAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_35628 = NULL ;
        while (((operand_35628 = enumerator_35628.nextObject ()))) {
          macroValidPointer (operand_35628) ;
          GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
          if (var_cas_lexiqueAnalysisContext.mLexicalAttributeMap.isBuilt ()) {
            var_cas_lexiqueAnalysisContext.mLexicalAttributeMap (HERE)->method_searchKey (inLexique, operand_35628->mValue, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (847)) ;
          }
          var_cas_argumentTypeList.addAssign_operation (operand_35628->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (848)), var_cas_attributeLexicalType) ;
        }
      }
      var_cas_lexiqueAnalysisContext.mTerminalMap.modifier_insertKey (inLexique, operand_35315->mName, var_cas_argumentTypeList COMMA_SOURCE_FILE_AT_LINE (850)) ;
      GGS_bool var_cas_isEndOfTemplateMark = GGS_bool (false) ;
      {
        GGS_lstringlist::cEnumerator enumerator_36004 (operand_35315->mOptionList, true) ;
        const GGS_lstringlist::cElement * operand_36004 = NULL ;
        while (((operand_36004 = enumerator_36004.nextObject ()))) {
          macroValidPointer (operand_36004) ;
          const GGS_bool cond_36146 = (operand_36004->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (853))).operator_isNotEqual (GGS_string ("templateEndMark")) ;
          if (cond_36146.isBuiltAndTrue ()) {
            operand_36004->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'templateEndMark' feature is allowed here") COMMA_SOURCE_FILE_AT_LINE (855)) ;
          }else if (cond_36146.isBuiltAndFalse ()) {
            const GGS_bool cond_36252 = var_cas_isEndOfTemplateMark ;
            if (cond_36252.isBuiltAndTrue ()) {
              operand_36004->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'templateEndMark' feature is already set") COMMA_SOURCE_FILE_AT_LINE (857)) ;
            }else if (cond_36252.isBuiltAndFalse ()) {
              var_cas_isEndOfTemplateMark = GGS_bool (true) ;
            }
          }
        }
      }
      var_cas_lexiqueAnalysisContext.mTerminalList.addAssign_operation (operand_35315->mName, var_cas_argumentTypeList, operand_35315->mSyntaxErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (864)), var_cas_isEndOfTemplateMark, var_cas_terminalStyleIndex) ;
    }
  }
  {
    GGS_lexicalListDeclarationListAST::cEnumerator enumerator_36528 (var_cas_lexiqueComponentRoot.reader_mLexicalListDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (869)), true) ;
    const GGS_lexicalListDeclarationListAST::cElement * operand_36528 = NULL ;
    while (((operand_36528 = enumerator_36528.nextObject ()))) {
      macroValidPointer (operand_36528) ;
      GGS_uint  var_cas_terminalStyleIndex = GGS_uint (0U) ;
      const GGS_bool cond_36751 = (operand_36528->mStyle.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (871)).reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_36751.isBuiltAndTrue ()) {
        GGS_lstring  automatic_var_36741_0 ;
        const GGS_styleMap  temp_36709 = var_cas_lexiqueAnalysisContext.reader_mStyleMap (inLexique COMMA_SOURCE_FILE_AT_LINE (872)) ;
        if (temp_36709.isBuilt ()) {
          temp_36709 (HERE)->method_searchKey (inLexique, operand_36528->mStyle, automatic_var_36741_0, var_cas_terminalStyleIndex COMMA_SOURCE_FILE_AT_LINE (872)) ;
        }
      }
      GGS_lexicalSentValueList  var_cas_argumentTypeList = GGS_lexicalSentValueList ::constructor_emptyList () ;
      {
        GGS_lstringlist::cEnumerator enumerator_36844 (operand_36528->mSentAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_36844 = NULL ;
        while (((operand_36844 = enumerator_36844.nextObject ()))) {
          macroValidPointer (operand_36844) ;
          GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
          if (var_cas_lexiqueAnalysisContext.mLexicalAttributeMap.isBuilt ()) {
            var_cas_lexiqueAnalysisContext.mLexicalAttributeMap (HERE)->method_searchKey (inLexique, operand_36844->mValue, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (877)) ;
          }
          var_cas_argumentTypeList.addAssign_operation (operand_36844->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (878)), var_cas_attributeLexicalType) ;
        }
      }
      GGS_lexicalExplicitTokenListMap  var_cas_lexicalTokenListMap = GGS_lexicalExplicitTokenListMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (880)) ;
      GGS_tokenSortedlist  var_cas_tokenSortedlist = GGS_tokenSortedlist ::constructor_emptySortedList () ;
      {
        GGS_lexicalListEntryListAST::cEnumerator enumerator_37219 (operand_36528->mEntryList, true) ;
        const GGS_lexicalListEntryListAST::cElement * operand_37219 = NULL ;
        while (((operand_37219 = enumerator_37219.nextObject ()))) {
          macroValidPointer (operand_37219) ;
          GGS_string var_cas_syntaxErrorMessage = operand_36528->mSyntaxErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (883)).reader_stringByReplacingStringByString (inLexique, GGS_string ("%K"), operand_37219->mTerminalSpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (883)) COMMA_SOURCE_FILE_AT_LINE (883)) ;
          GGS_bool var_cas_isEndOfTemplateMark = GGS_bool (false) ;
          {
            GGS_lstringlist::cEnumerator enumerator_37427 (operand_37219->mFeatureList, true) ;
            const GGS_lstringlist::cElement * operand_37427 = NULL ;
            while (((operand_37427 = enumerator_37427.nextObject ()))) {
              macroValidPointer (operand_37427) ;
              const GGS_bool cond_37575 = (operand_37427->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (886))).operator_isNotEqual (GGS_string ("templateEndMark")) ;
              if (cond_37575.isBuiltAndTrue ()) {
                operand_37427->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'templateEndMark' feature is allowed here") COMMA_SOURCE_FILE_AT_LINE (888)) ;
              }else if (cond_37575.isBuiltAndFalse ()) {
                const GGS_bool cond_37685 = var_cas_isEndOfTemplateMark ;
                if (cond_37685.isBuiltAndTrue ()) {
                  operand_37427->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'templateEndMark' feature is already set") COMMA_SOURCE_FILE_AT_LINE (890)) ;
                }else if (cond_37685.isBuiltAndFalse ()) {
                  var_cas_isEndOfTemplateMark = GGS_bool (true) ;
                }
              }
            }
          }
          var_cas_lexiqueAnalysisContext.mTerminalList.addAssign_operation (operand_37219->mTerminalSpelling, var_cas_argumentTypeList, var_cas_syntaxErrorMessage, var_cas_isEndOfTemplateMark, var_cas_terminalStyleIndex) ;
          var_cas_lexiqueAnalysisContext.mTerminalMap.modifier_insertKey (inLexique, operand_37219->mTerminalSpelling, var_cas_argumentTypeList COMMA_SOURCE_FILE_AT_LINE (901)) ;
          var_cas_lexicalTokenListMap.modifier_insertKey (inLexique, operand_37219->mEntrySpelling, operand_37219->mTerminalSpelling, operand_37219->mFeatureList COMMA_SOURCE_FILE_AT_LINE (902)) ;
          var_cas_tokenSortedlist.addAssign_operation (operand_37219->mEntrySpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (903)).reader_length (), operand_37219->mEntrySpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (903)), operand_37219->mTerminalSpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (903))) ;
          var_cas_lexiqueAnalysisContext.mUnicodeStringToGenerate.addAssign_operation (operand_37219->mEntrySpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (904))) ;
        }
      }
      var_cas_lexiqueAnalysisContext.mLexicalTokenListMap.modifier_insertKey (inLexique, operand_36528->mName, var_cas_lexicalTokenListMap, var_cas_tokenSortedlist, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (906)) ;
    }
  }
  {
    GGS_lexicalMessageDeclarationListAST::cEnumerator enumerator_38563 (var_cas_lexiqueComponentRoot.reader_mLexicalMessageDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (909)), true) ;
    const GGS_lexicalMessageDeclarationListAST::cElement * operand_38563 = NULL ;
    while (((operand_38563 = enumerator_38563.nextObject ()))) {
      macroValidPointer (operand_38563) ;
      var_cas_lexiqueAnalysisContext.mLexicalMessageMap.modifier_insertKey (inLexique, operand_38563->mMessageName, operand_38563->mMessageValue, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (910)) ;
    }
  }
  {
    GGS_lexicalRuleListAST::cEnumerator enumerator_38798 (var_cas_lexiqueComponentRoot.reader_mLexicalRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (913)), true) ;
    const GGS_lexicalRuleListAST::cElement * operand_38798 = NULL ;
    while (((operand_38798 = enumerator_38798.nextObject ()))) {
      macroValidPointer (operand_38798) ;
      { typeCategoryMethod__abstractLexicalRuleAST__checkLexicalRule method = findCategoryMethod__abstractLexicalRuleAST__checkLexicalRule (operand_38798->mLexicalRule.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_38798->mLexicalRule (HERE), var_cas_lexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (914)) ;
        }
      }
    }
  }
  {
    GGS_lexicalMessageMap::cEnumerator enumerator_38996 (var_cas_lexiqueAnalysisContext.reader_mLexicalMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (917)), true) ;
    const GGS_lexicalMessageMap::cElement * operand_38996 = NULL ;
    while (((operand_38996 = enumerator_38996.nextObject ()))) {
      macroValidPointer (operand_38996) ;
      const GGS_bool cond_39118 = (operand_38996->mInfo.mMessageIsUsed).operator_not () ;
      if (cond_39118.isBuiltAndTrue ()) {
        operand_38996->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("unused message") COMMA_SOURCE_FILE_AT_LINE (919)) ;
      }
    }
  }
  {
    GGS_metamodelTemplateDelimitorListAST::cEnumerator enumerator_39212 (var_cas_lexiqueComponentRoot.reader_mTemplateDelimitorList (inLexique COMMA_SOURCE_FILE_AT_LINE (923)), true) ;
    const GGS_metamodelTemplateDelimitorListAST::cElement * operand_39212 = NULL ;
    while (((operand_39212 = enumerator_39212.nextObject ()))) {
      macroValidPointer (operand_39212) ;
      var_cas_lexiqueAnalysisContext.mUnicodeStringToGenerate.addAssign_operation (operand_39212->mStartString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (924))) ;
      var_cas_lexiqueAnalysisContext.mUnicodeStringToGenerate.addAssign_operation (operand_39212->mEndString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (925))) ;
      GGS_bool var_cas_preservesStartDelimiter = GGS_bool (false) ;
      {
        GGS_lstringlist::cEnumerator enumerator_39484 (operand_39212->mOptionList, true) ;
        const GGS_lstringlist::cElement * operand_39484 = NULL ;
        while (((operand_39484 = enumerator_39484.nextObject ()))) {
          macroValidPointer (operand_39484) ;
          const GGS_bool cond_39611 = (operand_39484->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (928))).operator_isNotEqual (GGS_string ("preserved")) ;
          if (cond_39611.isBuiltAndTrue ()) {
            operand_39484->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'preserved' feature is allowed here") COMMA_SOURCE_FILE_AT_LINE (930)) ;
          }else if (cond_39611.isBuiltAndFalse ()) {
            const GGS_bool cond_39713 = var_cas_preservesStartDelimiter ;
            if (cond_39713.isBuiltAndTrue ()) {
              operand_39484->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'preserved' feature is already set") COMMA_SOURCE_FILE_AT_LINE (932)) ;
            }else if (cond_39713.isBuiltAndFalse ()) {
              var_cas_preservesStartDelimiter = GGS_bool (true) ;
            }
          }
        }
      }
      var_cas_lexiqueAnalysisContext.mTemplateDelimitorList.addAssign_operation (operand_39212->mStartString, operand_39212->mEndString, var_cas_preservesStartDelimiter) ;
    }
  }
  {
    GGS_templateReplacementListAST::cEnumerator enumerator_39982 (var_cas_lexiqueComponentRoot.reader_mTemplateReplacementList (inLexique COMMA_SOURCE_FILE_AT_LINE (939)), true) ;
    const GGS_templateReplacementListAST::cElement * operand_39982 = NULL ;
    while (((operand_39982 = enumerator_39982.nextObject ()))) {
      macroValidPointer (operand_39982) ;
      var_cas_lexiqueAnalysisContext.mUnicodeStringToGenerate.addAssign_operation (operand_39982->mMatchString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (940))) ;
      var_cas_lexiqueAnalysisContext.mUnicodeStringToGenerate.addAssign_operation (operand_39982->mReplacementString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (941))) ;
    }
  }
  GGS_string var_cas_lexiqueClassName = var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (945)) ;
  const GGS_bool cond_41749 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (947))).operator_isEqual (GGS_uint (0U)) ;
  if (cond_41749.isBuiltAndTrue ()) {
    const GGS_bool cond_41118 = (gOption_galgas_5F_cli_5F_options_legacyCodeGeneration.reader_value ()).operator_not () ;
    if (cond_41118.isBuiltAndTrue ()) {
      GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string (".h")), GGS_string ("//"), GGS_string ("\n"
        "\n"), template_filewrapper_lexiqueGenerationTemplates_newHeaderZone2 (inLexique, var_cas_lexiqueClassName.reader_identifierRepresentation (), var_cas_lexiqueAnalysisContext, var_cas_lexiqueComponentRoot), GGS_string ("\n"
        "\n"), template_filewrapper_lexiqueGenerationTemplates_newHeaderZone3 (inLexique, var_cas_lexiqueClassName.reader_identifierRepresentation (), var_cas_lexiqueComponentRoot.reader_mLexicalListDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (962)), var_cas_lexiqueAnalysisContext) COMMA_SOURCE_FILE_AT_LINE (949)) ;
    }else if (cond_41118.isBuiltAndFalse ()) {
      GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string (".h")), GGS_string ("//"), GGS_string ("\n"
        "\n"), template_filewrapper_lexiqueGenerationTemplates_oldHeaderZone2 (inLexique, var_cas_lexiqueClassName.reader_identifierRepresentation (), var_cas_lexiqueAnalysisContext, var_cas_lexiqueComponentRoot), GGS_string ("\n"
        "\n"), template_filewrapper_lexiqueGenerationTemplates_oldHeaderZone3 (inLexique, var_cas_lexiqueClassName.reader_identifierRepresentation (), var_cas_lexiqueComponentRoot.reader_mLexicalListDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (980)), var_cas_lexiqueAnalysisContext) COMMA_SOURCE_FILE_AT_LINE (967)) ;
    }
  }
  const GGS_bool cond_43431 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (987))).operator_isEqual (GGS_uint (0U)) ;
  if (cond_43431.isBuiltAndTrue ()) {
    const GGS_bool cond_42657 = (gOption_galgas_5F_cli_5F_options_legacyCodeGeneration.reader_value ()).operator_not () ;
    if (cond_42657.isBuiltAndTrue ()) {
      GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string (".cpp")), GGS_string ("//"), GGS_string ("\n"
        "\n"), template_filewrapper_lexiqueGenerationTemplates_newImplementationZone2 (inLexique, var_cas_lexiqueClassName.reader_identifierRepresentation (), var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (996)), var_cas_lexiqueAnalysisContext.reader_mLexicalMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (997)), var_cas_lexiqueAnalysisContext.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (998)), var_cas_lexiqueAnalysisContext.reader_mLexicalTokenListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (999)), var_cas_lexiqueAnalysisContext.reader_mUnicodeStringToGenerate (inLexique COMMA_SOURCE_FILE_AT_LINE (1000)), var_cas_lexiqueComponentRoot.reader_mLexicalRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (1001)), var_cas_lexiqueAnalysisContext, var_cas_lexiqueComponentRoot), GGS_string ("\n"
        "\n"), GGS_string ("\n"
        "\n") COMMA_SOURCE_FILE_AT_LINE (989)) ;
    }else if (cond_42657.isBuiltAndFalse ()) {
      GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string (".cpp")), GGS_string ("//"), GGS_string ("\n"
        "\n"), template_filewrapper_lexiqueGenerationTemplates_oldImplementationZone2 (inLexique, var_cas_lexiqueClassName.reader_identifierRepresentation (), var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1016)), var_cas_lexiqueAnalysisContext.reader_mLexicalMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1017)), var_cas_lexiqueAnalysisContext.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (1018)), var_cas_lexiqueAnalysisContext.reader_mLexicalTokenListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1019)), var_cas_lexiqueAnalysisContext.reader_mUnicodeStringToGenerate (inLexique COMMA_SOURCE_FILE_AT_LINE (1020)), var_cas_lexiqueComponentRoot.reader_mLexicalRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (1021)), var_cas_lexiqueAnalysisContext, var_cas_lexiqueComponentRoot), GGS_string ("\n"
        "\n"), GGS_string ("\n"
        "\n") COMMA_SOURCE_FILE_AT_LINE (1009)) ;
    }
  }
  const GGS_bool cond_43950 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (1031))).operator_isEqual (GGS_uint (0U)) ;
  if (cond_43950.isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string ("-cocoa.h")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_cocoaHeaderZone2 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueAnalysisContext), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_cocoaHeaderZone3 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueAnalysisContext) COMMA_SOURCE_FILE_AT_LINE (1032)) ;
  }
  const GGS_bool cond_44675 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (1049))).operator_isEqual (GGS_uint (0U)) ;
  if (cond_44675.isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string ("-cocoa.m")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_cocoaImplementationZone2 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1057)), var_cas_lexiqueAnalysisContext.reader_mLexicalMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1058)), var_cas_lexiqueAnalysisContext.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (1059)), var_cas_lexiqueAnalysisContext.reader_mUnicodeStringToGenerate (inLexique COMMA_SOURCE_FILE_AT_LINE (1060)), var_cas_lexiqueComponentRoot.reader_mLexicalRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (1061)), var_cas_lexiqueAnalysisContext, var_cas_lexiqueComponentRoot), GGS_string ("\n"
      "\n"), GGS_string ("\n"
      "\n") COMMA_SOURCE_FILE_AT_LINE (1050)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileLexiqueComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_lexiqueCompilation (void) {
  enterCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction ((typeCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction) category_method__lexicalSendTerminalByDefaultAST__checkLexicalDefaultAction, gClassInfoFor__lexicalSendTerminalByDefaultAST.slotID ()) ;
  enterCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction ((typeCategoryMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction) category_method__lexicalErrorByDefaultAST__checkLexicalDefaultAction, gClassInfoFor__lexicalErrorByDefaultAST.slotID ()) ;
  enterCategoryMethod__lexicalExpressionAST__checkLexicalExpression ((typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression) category_method__lexicalOrExpressionAST__checkLexicalExpression, gClassInfoFor__lexicalOrExpressionAST.slotID ()) ;
  enterCategoryMethod__lexicalExpressionAST__checkLexicalExpression ((typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression) category_method__lexicalCharacterMatchAST__checkLexicalExpression, gClassInfoFor__lexicalCharacterMatchAST.slotID ()) ;
  enterCategoryMethod__lexicalExpressionAST__checkLexicalExpression ((typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression) category_method__lexicalCharacterSetMatchAST__checkLexicalExpression, gClassInfoFor__lexicalCharacterSetMatchAST.slotID ()) ;
  enterCategoryMethod__lexicalExpressionAST__checkLexicalExpression ((typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression) category_method__lexicalCharacterIntervalMatchAST__checkLexicalExpression, gClassInfoFor__lexicalCharacterIntervalMatchAST.slotID ()) ;
  enterCategoryMethod__lexicalExpressionAST__checkLexicalExpression ((typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression) category_method__lexicalStringMatchAST__checkLexicalExpression, gClassInfoFor__lexicalStringMatchAST.slotID ()) ;
  enterCategoryMethod__lexicalExpressionAST__checkLexicalExpression ((typeCategoryMethod__lexicalExpressionAST__checkLexicalExpression) category_method__lexicalStringNotMatchAST__checkLexicalExpression, gClassInfoFor__lexicalStringNotMatchAST.slotID ()) ;
  enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument) category_method__lexicalAttributeInputArgumentAST__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalAttributeInputArgumentAST.slotID ()) ;
  enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument) category_method__lexicalCharacterInputArgumentAST__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalCharacterInputArgumentAST.slotID ()) ;
  enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument) category_method__lexicalUnsignedInputArgumentAST__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalUnsignedInputArgumentAST.slotID ()) ;
  enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument) category_method__lexicalCurrentCharacterInputArgumentAST__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalCurrentCharacterInputArgumentAST.slotID ()) ;
  enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument) category_method__lexicalFunctionInputArgumentAST__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalFunctionInputArgumentAST.slotID ()) ;
  enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument) category_method__lexicalAttributeInputArgumentAST__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalAttributeInputArgumentAST.slotID ()) ;
  enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument) category_method__lexicalCharacterInputArgumentAST__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalCharacterInputArgumentAST.slotID ()) ;
  enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument) category_method__lexicalUnsignedInputArgumentAST__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalUnsignedInputArgumentAST.slotID ()) ;
  enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument) category_method__lexicalCurrentCharacterInputArgumentAST__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalCurrentCharacterInputArgumentAST.slotID ()) ;
  enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument) category_method__lexicalFunctionInputArgumentAST__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalFunctionInputArgumentAST.slotID ()) ;
  enterCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument ((typeCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument) category_method__lexicalAttributeInputOutputArgumentAST__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalAttributeInputOutputArgumentAST.slotID ()) ;
  enterCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument ((typeCategoryMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument) category_method__lexicalFormalInputArgumentAST__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalFormalInputArgumentAST.slotID ()) ;
  enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction ((typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction) category_method__lexicalStructuredSendInstructionAST__checkLexicalInstruction, gClassInfoFor__lexicalStructuredSendInstructionAST.slotID ()) ;
  enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction ((typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction) category_method__lexicalSimpleSendInstructionAST__checkLexicalInstruction, gClassInfoFor__lexicalSimpleSendInstructionAST.slotID ()) ;
  enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction ((typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction) category_method__lexicalRepeatInstructionAST__checkLexicalInstruction, gClassInfoFor__lexicalRepeatInstructionAST.slotID ()) ;
  enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction ((typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction) category_method__lexicalSelectInstructionAST__checkLexicalInstruction, gClassInfoFor__lexicalSelectInstructionAST.slotID ()) ;
  enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction ((typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction) category_method__lexicalRoutineInstructionAST__checkLexicalInstruction, gClassInfoFor__lexicalRoutineInstructionAST.slotID ()) ;
  enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction ((typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction) category_method__lexicalLogInstructionAST__checkLexicalInstruction, gClassInfoFor__lexicalLogInstructionAST.slotID ()) ;
  enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction ((typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction) category_method__lexicalRewindInstructionAST__checkLexicalInstruction, gClassInfoFor__lexicalRewindInstructionAST.slotID ()) ;
  enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction ((typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction) category_method__lexicalDropInstructionAST__checkLexicalInstruction, gClassInfoFor__lexicalDropInstructionAST.slotID ()) ;
  enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction ((typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction) category_method__lexicalTagInstructionAST__checkLexicalInstruction, gClassInfoFor__lexicalTagInstructionAST.slotID ()) ;
  enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction ((typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction) category_method__lexicalErrorInstructionAST__checkLexicalInstruction, gClassInfoFor__lexicalErrorInstructionAST.slotID ()) ;
  enterCategoryMethod__lexicalInstructionAST__checkLexicalInstruction ((typeCategoryMethod__lexicalInstructionAST__checkLexicalInstruction) category_method__lexicalWarningInstructionAST__checkLexicalInstruction, gClassInfoFor__lexicalWarningInstructionAST.slotID ()) ;
  enterCategoryMethod__abstractLexicalRuleAST__checkLexicalRule ((typeCategoryMethod__abstractLexicalRuleAST__checkLexicalRule) category_method__lexicalImplicitRuleAST__checkLexicalRule, gClassInfoFor__lexicalImplicitRuleAST.slotID ()) ;
  enterCategoryMethod__abstractLexicalRuleAST__checkLexicalRule ((typeCategoryMethod__abstractLexicalRuleAST__checkLexicalRule) category_method__lexicalExplicitRuleAST__checkLexicalRule, gClassInfoFor__lexicalExplicitRuleAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_lexiqueCompilation (void) {
  gDispatchTableForMethod__lexicalSendDefaultActionAST__checkLexicalDefaultAction.free () ;
  gDispatchTableForMethod__lexicalExpressionAST__checkLexicalExpression.free () ;
  gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalFunctionCallArgument.free () ;
  gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgumentAST__checkLexicalRoutineCallArgument.free () ;
  gDispatchTableForMethod__abstractLexicalRoutineActualArgumentAST__checkLexicalRoutineCallArgument.free () ;
  gDispatchTableForMethod__lexicalInstructionAST__checkLexicalInstruction.free () ;
  gDispatchTableForMethod__abstractLexicalRuleAST__checkLexicalRule.free () ;
  gCachedResultForOnceFunction_buildLexicalTypeMap.drop () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_lexiqueCompilation (prologueRoutineFor_lexiqueCompilation, epilogueRoutineFor_lexiqueCompilation) ;

//---------------------------------------------------------------------------*

