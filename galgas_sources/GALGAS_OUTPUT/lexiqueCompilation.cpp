//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'lexiqueCompilation.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 15th, 2009, at 20h49'20"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "lexiqueCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "lexiqueCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "lexiqueLL1grammar.h"

//--- START OF USER ZONE 2

//---------------------------------------------------------------------------*

//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category reader '@lexicalExpression.generateConditionCode'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryReader__lexicalExpression__generateConditionCode> gDispatchTableForReader__lexicalExpression__generateConditionCode ;

//---------------------------------------------------------------------------*

void
enterCategoryReader__lexicalExpression__generateConditionCode (typeCategoryReader__lexicalExpression__generateConditionCode inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForReader__lexicalExpression__generateConditionCode.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalExpression_defaultReader (C_Compiler &,
                                const cPtr_lexicalExpression *,
                                GGS_lexiqueAnalysisContext  
                                COMMA_UNUSED_LOCATION_ARGS) {
  return GGS_string () ;
}

//---------------------------------------------------------------------------*

typeCategoryReader__lexicalExpression__generateConditionCode
findCategoryReader__lexicalExpression__generateConditionCode (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryReader__lexicalExpression__generateConditionCode result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForReader__lexicalExpression__generateConditionCode.count ()) {
    result = gDispatchTableForReader__lexicalExpression__generateConditionCode (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryReader__lexicalExpression__generateConditionCode (superClassPtr) ;
      gDispatchTableForReader__lexicalExpression__generateConditionCode.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  if (NULL == result) {
    result = category_reader__lexicalExpression_defaultReader ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category reader '@lexicalOrExpression.generateConditionCode'        *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalOrExpression__generateConditionCode (C_Compiler & inLexique,
                                const cPtr_lexicalOrExpression * operand_2295,
                                GGS_lexiqueAnalysisContext  var_cas_inLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_2295 != NULL) {
    var_cas_outGeneratedCode = (findCategoryReader__lexicalExpression__generateConditionCode (operand_2295->mLeftOperand (HERE)->galgasRTTI ()) (inLexique, operand_2295->mLeftOperand.getPtr (), var_cas_inLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (43))) ;
    var_cas_outGeneratedCode.appendCString (" || ") ;
    var_cas_outGeneratedCode.dotAssign_operation ((findCategoryReader__lexicalExpression__generateConditionCode (operand_2295->mRightOperand (HERE)->galgasRTTI ()) (inLexique, operand_2295->mRightOperand.getPtr (), var_cas_inLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (45)))) ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category reader '@lexicalCharacterIntervalMatch.generateConditionCode'   *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalCharacterIntervalMatch__generateConditionCode (C_Compiler & inLexique,
                                const cPtr_lexicalCharacterIntervalMatch * operand_2747,
                                GGS_lexiqueAnalysisContext  /* var_cas_inLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_2747 != NULL) {
    var_cas_outGeneratedCode = GGS_string ("") ;
    var_cas_outGeneratedCode = GGS_string ("testForInputUTF32CharRange (") ;
    var_cas_outGeneratedCode.dotAssign_operation (operand_2747->mLowerBound.reader_char (inLexique COMMA_SOURCE_FILE_AT_LINE (56)).reader_utf32CharConstantRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (56))) ;
    var_cas_outGeneratedCode.appendCString (", ") ;
    var_cas_outGeneratedCode.dotAssign_operation (operand_2747->mUpperBound.reader_char (inLexique COMMA_SOURCE_FILE_AT_LINE (58)).reader_utf32CharConstantRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (58))) ;
    var_cas_outGeneratedCode.appendCString (")") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category reader '@lexicalStringMatch.generateConditionCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalStringMatch__generateConditionCode (C_Compiler & inLexique,
                                const cPtr_lexicalStringMatch * operand_3282,
                                GGS_lexiqueAnalysisContext  /* var_cas_inLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_3282 != NULL) {
    var_cas_outGeneratedCode = (GGS_string ("testForInputUTF32String (kUnicodeString_")).operator_concat (operand_3282->mString.ggs_string ().reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (68))) ;
    var_cas_outGeneratedCode.appendCString (", ") ;
    var_cas_outGeneratedCode.dotAssign_operation (operand_3282->mString.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (70)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (70))) ;
    var_cas_outGeneratedCode.appendCString (", true)") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category reader '@lexicalStringNotMatch.generateConditionCode'       *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalStringNotMatch__generateConditionCode (C_Compiler & inLexique,
                                const cPtr_lexicalStringNotMatch * operand_3744,
                                GGS_lexiqueAnalysisContext  /* var_cas_inLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_3744 != NULL) {
    var_cas_outGeneratedCode = GGS_string ("notTestForInputUTF32String (kUnicodeString_") ;
    var_cas_outGeneratedCode.dotAssign_operation (operand_3744->mString.ggs_string ().reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (81))) ;
    var_cas_outGeneratedCode.appendCString (", ") ;
    var_cas_outGeneratedCode.dotAssign_operation (operand_3744->mString.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (83)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (83))) ;
    var_cas_outGeneratedCode.appendCString (", gLexicalMessage_") ;
    var_cas_outGeneratedCode.dotAssign_operation (operand_3744->mErrorMessage.ggs_string ()) ;
    var_cas_outGeneratedCode.appendCString (" COMMA_LINE_AND_SOURCE_FILE)") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category reader '@lexicalCharacterMatch.generateConditionCode'       *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalCharacterMatch__generateConditionCode (C_Compiler & inLexique,
                                const cPtr_lexicalCharacterMatch * operand_4335,
                                GGS_lexiqueAnalysisContext  /* var_cas_inLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_4335 != NULL) {
    var_cas_outGeneratedCode = GGS_string ("testForInputUTF32Char (") ;
    var_cas_outGeneratedCode.dotAssign_operation (operand_4335->mCharacter.reader_char (inLexique COMMA_SOURCE_FILE_AT_LINE (96)).reader_utf32CharConstantRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (96))) ;
    var_cas_outGeneratedCode.appendCString (")") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category reader '@lexicalCharacterSetMatch.generateConditionCode'      *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalCharacterSetMatch__generateConditionCode (C_Compiler &,
                                const cPtr_lexicalCharacterSetMatch * operand_4737,
                                GGS_lexiqueAnalysisContext  /* var_cas_inLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_4737 != NULL) {
    var_cas_outGeneratedCode = GGS_string ("testForCharWithFunction (") ;
    var_cas_outGeneratedCode.dotAssign_operation (operand_4737->mCharacterSetName.ggs_string ()) ;
    var_cas_outGeneratedCode.appendCString (")") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category reader '@lexicalRoutineOrFunctionFormalInputArgument.generateRoutineOrFunctionArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument> gDispatchTableForReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument (typeCategoryReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalRoutineOrFunctionFormalInputArgument_defaultReader (C_Compiler &,
                                const cPtr_lexicalRoutineOrFunctionFormalInputArgument *
                                COMMA_UNUSED_LOCATION_ARGS) {
  return GGS_string () ;
}

//---------------------------------------------------------------------------*

typeCategoryReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument
findCategoryReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument.count ()) {
    result = gDispatchTableForReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument (superClassPtr) ;
      gDispatchTableForReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  if (NULL == result) {
    result = category_reader__lexicalRoutineOrFunctionFormalInputArgument_defaultReader ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category reader '@lexicalAttributeInputArgument.generateRoutineOrFunctionArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalAttributeInputArgument__generateRoutineOrFunctionArgument (C_Compiler &,
                                const cPtr_lexicalAttributeInputArgument * operand_5487
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_5487 != NULL) {
    var_cas_outGeneratedCode = (GGS_string ("token.mLexicalAttribute_")).operator_concat (operand_5487->mAttributeName) ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category reader '@lexicalCharacterInputArgument.generateRoutineOrFunctionArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalCharacterInputArgument__generateRoutineOrFunctionArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCharacterInputArgument * operand_5761
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_5761 != NULL) {
    var_cas_outGeneratedCode = operand_5761->mCharacter.reader_char (inLexique COMMA_SOURCE_FILE_AT_LINE (132)).reader_utf32CharConstantRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (132)) ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category reader '@lexicalUnsignedInputArgument.generateRoutineOrFunctionArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalUnsignedInputArgument__generateRoutineOrFunctionArgument (C_Compiler & inLexique,
                                const cPtr_lexicalUnsignedInputArgument * operand_6042
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_6042 != NULL) {
    var_cas_outGeneratedCode = operand_6042->mUnsigned.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (140)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (140)) ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category reader '@lexicalCurrentCharacterInputArgument.generateRoutineOrFunctionArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalCurrentCharacterInputArgument__generateRoutineOrFunctionArgument (C_Compiler &,
                                const cPtr_lexicalCurrentCharacterInputArgument * operand_6305
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_6305 != NULL) {
    var_cas_outGeneratedCode = GGS_string ("previousChar ()") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category reader '@lexicalFunctionInputArgument.generateRoutineOrFunctionArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalFunctionInputArgument__generateRoutineOrFunctionArgument (C_Compiler & inLexique,
                                const cPtr_lexicalFunctionInputArgument * operand_6552
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_6552 != NULL) {
    var_cas_outGeneratedCode = ((GGS_string ("::scanner_function_")).operator_concat (operand_6552->mFunctionName)).operator_concat (GGS_string (" (*this")) ;
    {
      GGS_lexicalFunctionCallActualArgumentList::cEnumerator enumerator_6696 (operand_6552->mFunctionActualArgumentList, true) ;
      const GGS_lexicalFunctionCallActualArgumentList::cElement * operand_6696 = NULL ;
      while (((operand_6696 = enumerator_6696.nextObject ()))) {
        macroValidPointer (operand_6696) ;
        var_cas_outGeneratedCode.appendCString (", ") ;
        var_cas_outGeneratedCode.dotAssign_operation ((findCategoryReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument (operand_6696->mLexicalActualInputArgument (HERE)->galgasRTTI ()) (inLexique, operand_6696->mLexicalActualInputArgument.getPtr () COMMA_SOURCE_FILE_AT_LINE (158)))) ;
      }
    }
    var_cas_outGeneratedCode.appendCString (")") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category reader '@abstractLexicalRoutineActualArgument.generateRoutineArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryReader__abstractLexicalRoutineActualArgument__generateRoutineArgument> gDispatchTableForReader__abstractLexicalRoutineActualArgument__generateRoutineArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryReader__abstractLexicalRoutineActualArgument__generateRoutineArgument (typeCategoryReader__abstractLexicalRoutineActualArgument__generateRoutineArgument inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForReader__abstractLexicalRoutineActualArgument__generateRoutineArgument.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

static GGS_string
category_reader__abstractLexicalRoutineActualArgument_defaultReader (C_Compiler &,
                                const cPtr_abstractLexicalRoutineActualArgument *
                                COMMA_UNUSED_LOCATION_ARGS) {
  return GGS_string () ;
}

//---------------------------------------------------------------------------*

typeCategoryReader__abstractLexicalRoutineActualArgument__generateRoutineArgument
findCategoryReader__abstractLexicalRoutineActualArgument__generateRoutineArgument (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryReader__abstractLexicalRoutineActualArgument__generateRoutineArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForReader__abstractLexicalRoutineActualArgument__generateRoutineArgument.count ()) {
    result = gDispatchTableForReader__abstractLexicalRoutineActualArgument__generateRoutineArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryReader__abstractLexicalRoutineActualArgument__generateRoutineArgument (superClassPtr) ;
      gDispatchTableForReader__abstractLexicalRoutineActualArgument__generateRoutineArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  if (NULL == result) {
    result = category_reader__abstractLexicalRoutineActualArgument_defaultReader ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category reader '@lexicalAttributeInputOutputArgument.generateRoutineArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalAttributeInputOutputArgument__generateRoutineArgument (C_Compiler &,
                                const cPtr_lexicalAttributeInputOutputArgument * operand_7356
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_7356 != NULL) {
    var_cas_outGeneratedCode = (GGS_string ("token.mLexicalAttribute_")).operator_concat (operand_7356->mAttributeName) ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category reader '@lexicalFormalInputArgument.generateRoutineArgument'    *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalFormalInputArgument__generateRoutineArgument (C_Compiler & inLexique,
                                const cPtr_lexicalFormalInputArgument * operand_7617
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_7617 != NULL) {
    var_cas_outGeneratedCode = (findCategoryReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument (operand_7617->mRoutineOrFunctionFormalInputArgument (HERE)->galgasRTTI ()) (inLexique, operand_7617->mRoutineOrFunctionFormalInputArgument.getPtr () COMMA_SOURCE_FILE_AT_LINE (184))) ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category reader '@lexicalSendDefaultAction.generateDefaultSendCode'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryReader__lexicalSendDefaultAction__generateDefaultSendCode> gDispatchTableForReader__lexicalSendDefaultAction__generateDefaultSendCode ;

//---------------------------------------------------------------------------*

void
enterCategoryReader__lexicalSendDefaultAction__generateDefaultSendCode (typeCategoryReader__lexicalSendDefaultAction__generateDefaultSendCode inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForReader__lexicalSendDefaultAction__generateDefaultSendCode.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalSendDefaultAction_defaultReader (C_Compiler &,
                                const cPtr_lexicalSendDefaultAction *,
                                GGS_string  
                                COMMA_UNUSED_LOCATION_ARGS) {
  return GGS_string () ;
}

//---------------------------------------------------------------------------*

typeCategoryReader__lexicalSendDefaultAction__generateDefaultSendCode
findCategoryReader__lexicalSendDefaultAction__generateDefaultSendCode (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryReader__lexicalSendDefaultAction__generateDefaultSendCode result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForReader__lexicalSendDefaultAction__generateDefaultSendCode.count ()) {
    result = gDispatchTableForReader__lexicalSendDefaultAction__generateDefaultSendCode (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryReader__lexicalSendDefaultAction__generateDefaultSendCode (superClassPtr) ;
      gDispatchTableForReader__lexicalSendDefaultAction__generateDefaultSendCode.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  if (NULL == result) {
    result = category_reader__lexicalSendDefaultAction_defaultReader ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category reader '@lexicalSendTerminalByDefault.generateDefaultSendCode'   *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalSendTerminalByDefault__generateDefaultSendCode (C_Compiler &,
                                const cPtr_lexicalSendTerminalByDefault * operand_8274,
                                GGS_string  var_cas_inScannerClassName
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_8274 != NULL) {
    var_cas_outGeneratedCode = ((((GGS_string ("token.mTokenCode = ")).operator_concat (var_cas_inScannerClassName)).operator_concat (GGS_string ("_1_"))).operator_concat (operand_8274->mDefaultSentTerminal)).operator_concat (GGS_string (" ;\n")) ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category reader '@lexicalErrorByDefault.generateDefaultSendCode'      *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalErrorByDefault__generateDefaultSendCode (C_Compiler &,
                                const cPtr_lexicalErrorByDefault * operand_8599,
                                GGS_string  /* var_cas_inScannerClassName */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_8599 != NULL) {
    var_cas_outGeneratedCode = ((GGS_string ("lexicalError (gLexicalMessage_")).operator_concat (operand_8599->mDefaultErrorMessageName)).operator_concat (GGS_string (" COMMA_LINE_AND_SOURCE_FILE) ;\n")) ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category reader '@lexicalInstruction.generateInstructionCode'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryReader__lexicalInstruction__generateInstructionCode> gDispatchTableForReader__lexicalInstruction__generateInstructionCode ;

//---------------------------------------------------------------------------*

void
enterCategoryReader__lexicalInstruction__generateInstructionCode (typeCategoryReader__lexicalInstruction__generateInstructionCode inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForReader__lexicalInstruction__generateInstructionCode.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalInstruction_defaultReader (C_Compiler &,
                                const cPtr_lexicalInstruction *,
                                GGS_string  ,
                                GGS_lexiqueAnalysisContext  
                                COMMA_UNUSED_LOCATION_ARGS) {
  return GGS_string () ;
}

//---------------------------------------------------------------------------*

typeCategoryReader__lexicalInstruction__generateInstructionCode
findCategoryReader__lexicalInstruction__generateInstructionCode (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryReader__lexicalInstruction__generateInstructionCode result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForReader__lexicalInstruction__generateInstructionCode.count ()) {
    result = gDispatchTableForReader__lexicalInstruction__generateInstructionCode (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryReader__lexicalInstruction__generateInstructionCode (superClassPtr) ;
      gDispatchTableForReader__lexicalInstruction__generateInstructionCode.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  if (NULL == result) {
    result = category_reader__lexicalInstruction_defaultReader ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category reader '@lexicalStructuredSendInstruction.generateInstructionCode'*
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalStructuredSendInstruction__generateInstructionCode (C_Compiler & inLexique,
                                const cPtr_lexicalStructuredSendInstruction * operand_9366,
                                GGS_string  var_cas_inScannerClassName,
                                GGS_lexiqueAnalysisContext  /* var_cas_inLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_9366 != NULL) {
    var_cas_outGeneratedCode = GGS_string ("") ;
    {
      GGS_lexicalSendSearchList::cEnumerator enumerator_9547 (operand_9366->mLexicalSendSearchList, true) ;
      const GGS_lexicalSendSearchList::cElement * operand_9547 = NULL ;
      while (((operand_9547 = enumerator_9547.nextObject ()))) {
        macroValidPointer (operand_9547) ;
        var_cas_outGeneratedCode.appendCString ("if (token.mTokenCode == -1) {\n") ;
        var_cas_outGeneratedCode.appendCString ("  token.mTokenCode = search_into_") ;
        var_cas_outGeneratedCode.dotAssign_operation (operand_9547->mSearchListName) ;
        var_cas_outGeneratedCode.appendCString (" (token.mLexicalAttribute_") ;
        var_cas_outGeneratedCode.dotAssign_operation (operand_9547->mAttributeName) ;
        var_cas_outGeneratedCode.appendCString (") ;\n") ;
        var_cas_outGeneratedCode.appendCString ("}\n") ;
      }
    }
    var_cas_outGeneratedCode.appendCString ("if (token.mTokenCode == -1) {\n") ;
    var_cas_outGeneratedCode.appendCString ("  ") ;
    var_cas_outGeneratedCode.dotAssign_operation ((findCategoryReader__lexicalSendDefaultAction__generateDefaultSendCode (operand_9366->mLexicalSendDefaultAction (HERE)->galgasRTTI ()) (inLexique, operand_9366->mLexicalSendDefaultAction.getPtr (), var_cas_inScannerClassName COMMA_SOURCE_FILE_AT_LINE (238)))) ;
    var_cas_outGeneratedCode.appendCString ("}\n") ;
    var_cas_outGeneratedCode.appendCString ("enterToken (token) ;\n") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category reader '@lexicalSimpleSendInstruction.generateInstructionCode'   *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalSimpleSendInstruction__generateInstructionCode (C_Compiler & inLexique,
                                const cPtr_lexicalSimpleSendInstruction * operand_10199,
                                GGS_string  var_cas_inScannerClassName,
                                GGS_lexiqueAnalysisContext  /* var_cas_inLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_10199 != NULL) {
    var_cas_outGeneratedCode = ((((GGS_string ("token.mTokenCode = ")).operator_concat (var_cas_inScannerClassName)).operator_concat (GGS_string ("_1_"))).operator_concat (operand_10199->mSentTerminal.ggs_string ().reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (250)))).operator_concat (GGS_string (" ;\n")) ;
    var_cas_outGeneratedCode.appendCString ("enterToken (token) ;\n") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category reader '@lexicalRepeatInstruction.generateInstructionCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalRepeatInstruction__generateInstructionCode (C_Compiler & inLexique,
                                const cPtr_lexicalRepeatInstruction * operand_10655,
                                GGS_string  var_cas_inScannerClassName,
                                GGS_lexiqueAnalysisContext  var_cas_inLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_10655 != NULL) {
    var_cas_outGeneratedCode = GGS_string ("do {\n") ;
    var_cas_outGeneratedCode.modifier_incIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (262)) ;
    {
      GGS_lexicalInstructionList::cEnumerator enumerator_10906 (operand_10655->mRepeatedInstructionList, true) ;
      const GGS_lexicalInstructionList::cElement * operand_10906 = NULL ;
      while (((operand_10906 = enumerator_10906.nextObject ()))) {
        macroValidPointer (operand_10906) ;
        var_cas_outGeneratedCode.dotAssign_operation ((findCategoryReader__lexicalInstruction__generateInstructionCode (operand_10906->mInstruction (HERE)->galgasRTTI ()) (inLexique, operand_10906->mInstruction.getPtr (), var_cas_inScannerClassName, var_cas_inLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (265)))) ;
      }
    }
    {
      GGS_lexicalWhileBranchList::cEnumerator enumerator_11075 (operand_10655->mLexicalWhileBranchList, true) ;
      const GGS_lexicalWhileBranchList::cElement * operand_11075 = enumerator_11075.nextObject () ;
      if ((operand_11075 != NULL)) {
        bool _foreach_loop_11075 ;
        do{
          macroValidPointer (operand_11075) ;
          var_cas_outGeneratedCode.appendCString ("if (") ;
          var_cas_outGeneratedCode.dotAssign_operation ((findCategoryReader__lexicalExpression__generateConditionCode (operand_11075->mWhileExpression (HERE)->galgasRTTI ()) (inLexique, operand_11075->mWhileExpression.getPtr (), var_cas_inLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (271)))) ;
          var_cas_outGeneratedCode.appendCString (") {\n") ;
          var_cas_outGeneratedCode.modifier_incIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (273)) ;
          {
            GGS_lexicalInstructionList::cEnumerator enumerator_11319 (operand_11075->mWhileInstructionList, true) ;
            const GGS_lexicalInstructionList::cElement * operand_11319 = NULL ;
            while (((operand_11319 = enumerator_11319.nextObject ()))) {
              macroValidPointer (operand_11319) ;
              var_cas_outGeneratedCode.dotAssign_operation ((findCategoryReader__lexicalInstruction__generateInstructionCode (operand_11319->mInstruction (HERE)->galgasRTTI ()) (inLexique, operand_11319->mInstruction.getPtr (), var_cas_inScannerClassName, var_cas_inLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (275)))) ;
            }
          }
          var_cas_outGeneratedCode.modifier_decIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (277)) ;
          operand_11075 = enumerator_11075.nextObject () ;
          _foreach_loop_11075 = ((operand_11075 != NULL)) ;
          if (_foreach_loop_11075) {
            var_cas_outGeneratedCode.appendCString ("}else ") ;
          }
        }while (_foreach_loop_11075) ;
      }
    }
    var_cas_outGeneratedCode.appendCString ("}else{\n"
    "  mLoop = false ;\n"
    "}\n") ;
    var_cas_outGeneratedCode.modifier_decIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (284)) ;
    var_cas_outGeneratedCode.appendCString ("}while (mLoop) ;\n"
    "mLoop = true ;\n") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category reader '@lexicalSelectInstruction.generateInstructionCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalSelectInstruction__generateInstructionCode (C_Compiler & inLexique,
                                const cPtr_lexicalSelectInstruction * operand_11954,
                                GGS_string  var_cas_inScannerClassName,
                                GGS_lexiqueAnalysisContext  var_cas_inLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_11954 != NULL) {
    var_cas_outGeneratedCode = GGS_string ("") ;
    {
      GGS_lexicalSelectBranchList::cEnumerator enumerator_12135 (operand_11954->mLexicalSelectBranchList, true) ;
      const GGS_lexicalSelectBranchList::cElement * operand_12135 = enumerator_12135.nextObject () ;
      if ((operand_12135 != NULL)) {
        bool _foreach_loop_12135 ;
        do{
          macroValidPointer (operand_12135) ;
          var_cas_outGeneratedCode.appendCString ("if (") ;
          var_cas_outGeneratedCode.dotAssign_operation ((findCategoryReader__lexicalExpression__generateConditionCode (operand_12135->mSelectExpression (HERE)->galgasRTTI ()) (inLexique, operand_12135->mSelectExpression.getPtr (), var_cas_inLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (301)))) ;
          var_cas_outGeneratedCode.appendCString (") {\n") ;
          var_cas_outGeneratedCode.modifier_incIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (303)) ;
          {
            GGS_lexicalInstructionList::cEnumerator enumerator_12381 (operand_12135->mSelectInstructionList, true) ;
            const GGS_lexicalInstructionList::cElement * operand_12381 = NULL ;
            while (((operand_12381 = enumerator_12381.nextObject ()))) {
              macroValidPointer (operand_12381) ;
              var_cas_outGeneratedCode.dotAssign_operation ((findCategoryReader__lexicalInstruction__generateInstructionCode (operand_12381->mInstruction (HERE)->galgasRTTI ()) (inLexique, operand_12381->mInstruction.getPtr (), var_cas_inScannerClassName, var_cas_inLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (305)))) ;
            }
          }
          var_cas_outGeneratedCode.modifier_decIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (307)) ;
          operand_12135 = enumerator_12135.nextObject () ;
          _foreach_loop_12135 = ((operand_12135 != NULL)) ;
          if (_foreach_loop_12135) {
            var_cas_outGeneratedCode.appendCString ("}else ") ;
          }
        }while (_foreach_loop_12135) ;
      }
    }
    if (((operand_11954->mDefaultInstructionList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (312))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
      var_cas_outGeneratedCode.appendCString ("}else{\n") ;
      var_cas_outGeneratedCode.modifier_incIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (314)) ;
      {
        GGS_lexicalInstructionList::cEnumerator enumerator_12806 (operand_11954->mDefaultInstructionList, true) ;
        const GGS_lexicalInstructionList::cElement * operand_12806 = NULL ;
        while (((operand_12806 = enumerator_12806.nextObject ()))) {
          macroValidPointer (operand_12806) ;
          var_cas_outGeneratedCode.dotAssign_operation ((findCategoryReader__lexicalInstruction__generateInstructionCode (operand_12806->mInstruction (HERE)->galgasRTTI ()) (inLexique, operand_12806->mInstruction.getPtr (), var_cas_inScannerClassName, var_cas_inLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (316)))) ;
        }
      }
      var_cas_outGeneratedCode.modifier_decIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (318)) ;
    }
    var_cas_outGeneratedCode.appendCString ("}\n") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category reader '@lexicalRoutineInstruction.generateInstructionCode'    *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalRoutineInstruction__generateInstructionCode (C_Compiler & inLexique,
                                const cPtr_lexicalRoutineInstruction * operand_13186,
                                GGS_string  /* var_cas_inScannerClassName */,
                                GGS_lexiqueAnalysisContext  /* var_cas_inLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_13186 != NULL) {
    var_cas_outGeneratedCode = ((GGS_string ("::scanner_routine_")).operator_concat (operand_13186->mRoutineName)).operator_concat (GGS_string (" (*this")) ;
    {
      GGS_lexicalRoutineCallActualArgumentList::cEnumerator enumerator_13416 (operand_13186->mActualArgumentList, true) ;
      const GGS_lexicalRoutineCallActualArgumentList::cElement * operand_13416 = NULL ;
      while (((operand_13416 = enumerator_13416.nextObject ()))) {
        macroValidPointer (operand_13416) ;
        var_cas_outGeneratedCode.appendCString (", ") ;
        var_cas_outGeneratedCode.dotAssign_operation ((findCategoryReader__abstractLexicalRoutineActualArgument__generateRoutineArgument (operand_13416->mLexicalRoutineActualArgument (HERE)->galgasRTTI ()) (inLexique, operand_13416->mLexicalRoutineActualArgument.getPtr () COMMA_SOURCE_FILE_AT_LINE (332)))) ;
      }
    }
    {
      GGS_lstringlist::cEnumerator enumerator_13552 (operand_13186->mErrorMessageList, true) ;
      const GGS_lstringlist::cElement * operand_13552 = NULL ;
      while (((operand_13552 = enumerator_13552.nextObject ()))) {
        macroValidPointer (operand_13552) ;
        var_cas_outGeneratedCode.appendCString (", gLexicalMessage_") ;
        var_cas_outGeneratedCode.dotAssign_operation (operand_13552->mValue) ;
      }
    }
    var_cas_outGeneratedCode.appendCString (") ;\n") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category reader '@lexicalDropInstruction.generateInstructionCode'      *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalDropInstruction__generateInstructionCode (C_Compiler &,
                                const cPtr_lexicalDropInstruction * operand_13816,
                                GGS_string  /* var_cas_inScannerClassName */,
                                GGS_lexiqueAnalysisContext  /* var_cas_inLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_13816 != NULL) {
    var_cas_outGeneratedCode = GGS_string ("") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category reader '@lexicalErrorInstruction.generateInstructionCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalErrorInstruction__generateInstructionCode (C_Compiler &,
                                const cPtr_lexicalErrorInstruction * operand_14149,
                                GGS_string  /* var_cas_inScannerClassName */,
                                GGS_lexiqueAnalysisContext  /* var_cas_inLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_14149 != NULL) {
    var_cas_outGeneratedCode = ((GGS_string ("lexicalError (gLexicalMessage_")).operator_concat (operand_14149->mErrorMessageName)).operator_concat (GGS_string (" COMMA_LINE_AND_SOURCE_FILE) ;\n")) ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category reader '@lexicalWarningInstruction.generateInstructionCode'    *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalWarningInstruction__generateInstructionCode (C_Compiler &,
                                const cPtr_lexicalWarningInstruction * operand_14551,
                                GGS_string  /* var_cas_inScannerClassName */,
                                GGS_lexiqueAnalysisContext  /* var_cas_inLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_14551 != NULL) {
    var_cas_outGeneratedCode = ((GGS_string ("lexicalWarning (gLexicalMessage_")).operator_concat (operand_14551->mWarningMessageName)).operator_concat (GGS_string (" COMMA_LINE_AND_SOURCE_FILE) ;\n")) ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category reader '@lexicalTagInstruction.generateInstructionCode'      *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalTagInstruction__generateInstructionCode (C_Compiler &,
                                const cPtr_lexicalTagInstruction * operand_14953,
                                GGS_string  /* var_cas_inScannerClassName */,
                                GGS_lexiqueAnalysisContext  /* var_cas_inLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_14953 != NULL) {
    var_cas_outGeneratedCode = ((GGS_string ("const C_LocationInSource locationForTag_")).operator_concat (operand_14953->mLexicalTagName)).operator_concat (GGS_string (" = mCurrentLocation ;\n")) ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category reader '@lexicalRewindInstruction.generateInstructionCode'     *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalRewindInstruction__generateInstructionCode (C_Compiler & inLexique,
                                const cPtr_lexicalRewindInstruction * operand_15353,
                                GGS_string  var_cas_inScannerClassName,
                                GGS_lexiqueAnalysisContext  /* var_cas_inLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_15353 != NULL) {
    var_cas_outGeneratedCode = ((GGS_string ("mCurrentLocation = locationForTag_")).operator_concat (operand_15353->mLexicalTagName)).operator_concat (GGS_string (" ;\n")) ;
    var_cas_outGeneratedCode.appendCString ("token.mTokenCode = ") ;
    var_cas_outGeneratedCode.dotAssign_operation (var_cas_inScannerClassName) ;
    var_cas_outGeneratedCode.appendCString ("_1_") ;
    var_cas_outGeneratedCode.dotAssign_operation (operand_15353->mTerminalName.ggs_string ().reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (388))) ;
    var_cas_outGeneratedCode.appendCString (" ;\n") ;
    var_cas_outGeneratedCode.appendCString ("enterToken (token) ;\n") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category reader '@lexicalLogInstruction.generateInstructionCode'      *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalLogInstruction__generateInstructionCode (C_Compiler &,
                                const cPtr_lexicalLogInstruction * operand_15894,
                                GGS_string  /* var_cas_inScannerClassName */,
                                GGS_lexiqueAnalysisContext  /* var_cas_inLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_15894 != NULL) {
    var_cas_outGeneratedCode = GGS_string ("lexicalLog (LINE_AND_SOURCE_FILE) ;\n") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category reader '@abstractLexicalRule.generateCode'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryReader__abstractLexicalRule__generateCode> gDispatchTableForReader__abstractLexicalRule__generateCode ;

//---------------------------------------------------------------------------*

void
enterCategoryReader__abstractLexicalRule__generateCode (typeCategoryReader__abstractLexicalRule__generateCode inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForReader__abstractLexicalRule__generateCode.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

static GGS_string
category_reader__abstractLexicalRule_defaultReader (C_Compiler &,
                                const cPtr_abstractLexicalRule *,
                                GGS_string  ,
                                GGS_lexiqueAnalysisContext  
                                COMMA_UNUSED_LOCATION_ARGS) {
  return GGS_string () ;
}

//---------------------------------------------------------------------------*

typeCategoryReader__abstractLexicalRule__generateCode
findCategoryReader__abstractLexicalRule__generateCode (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryReader__abstractLexicalRule__generateCode result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForReader__abstractLexicalRule__generateCode.count ()) {
    result = gDispatchTableForReader__abstractLexicalRule__generateCode (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryReader__abstractLexicalRule__generateCode (superClassPtr) ;
      gDispatchTableForReader__abstractLexicalRule__generateCode.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  if (NULL == result) {
    result = category_reader__abstractLexicalRule_defaultReader ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category reader '@lexicalImplicitRule.generateCode'             *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalImplicitRule__generateCode (C_Compiler & inLexique,
                                const cPtr_lexicalImplicitRule * operand_16636,
                                GGS_string  var_cas_inScannerClassName,
                                GGS_lexiqueAnalysisContext  var_cas_inLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_16636 != NULL) {
    GGS_tokenSortedlist  var_cas_tokenSortedList ;
    GGS_lexicalExplicitTokenListMap  automatic_var_0 ;
    const GGS_lexicalExplicitTokenListMapMap  temp_16848 = var_cas_inLexiqueAnalysisContext.reader_mLexicalTokenListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (420)) ;
    if (temp_16848.isBuilt ()) {
      temp_16848 (HERE)->method_searchKey (inLexique, operand_16636->mListName, automatic_var_0, var_cas_tokenSortedList COMMA_SOURCE_FILE_AT_LINE (420)) ;
    }
    var_cas_outGeneratedCode = GGS_string ("") ;
    {
      GGS_tokenSortedlist::cEnumerator enumerator_16921 (var_cas_tokenSortedList, false) ;
      const GGS_tokenSortedlist::cElement * operand_16921 = NULL ;
      while (((operand_16921 = enumerator_16921.nextObject ()))) {
        macroValidPointer (operand_16921) ;
        var_cas_outGeneratedCode.appendCString ("if (testForInputUTF32String (kUnicodeString_") ;
        var_cas_outGeneratedCode.dotAssign_operation (operand_16921->mName.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (424))) ;
        var_cas_outGeneratedCode.appendCString (", ") ;
        var_cas_outGeneratedCode.dotAssign_operation (operand_16921->mName.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (426)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (426))) ;
        var_cas_outGeneratedCode.appendCString (", true)) {\n") ;
        var_cas_outGeneratedCode.appendCString ("  token.mTokenCode = ") ;
        var_cas_outGeneratedCode.dotAssign_operation (var_cas_inScannerClassName) ;
        var_cas_outGeneratedCode.appendCString ("_1_") ;
        var_cas_outGeneratedCode.dotAssign_operation (operand_16921->mTerminalName.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (428))) ;
        var_cas_outGeneratedCode.appendCString (" ;\n") ;
        var_cas_outGeneratedCode.appendCString ("  enterToken (token) ;\n") ;
        var_cas_outGeneratedCode.appendCString ("}else ") ;
      }
    }
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category reader '@lexicalExplicitRule.generateCode'             *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__lexicalExplicitRule__generateCode (C_Compiler & inLexique,
                                const cPtr_lexicalExplicitRule * operand_17572,
                                GGS_string  var_cas_inScannerClassName,
                                GGS_lexiqueAnalysisContext  var_cas_inLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outGeneratedCode ;
  if (operand_17572 != NULL) {
    var_cas_outGeneratedCode = GGS_string ("if (") ;
    var_cas_outGeneratedCode.dotAssign_operation ((findCategoryReader__lexicalExpression__generateConditionCode (operand_17572->mLexicalRuleExpression (HERE)->galgasRTTI ()) (inLexique, operand_17572->mLexicalRuleExpression.getPtr (), var_cas_inLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (442)))) ;
    var_cas_outGeneratedCode.appendCString (") {\n") ;
    var_cas_outGeneratedCode.modifier_incIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (444)) ;
    {
      GGS_lexicalInstructionList::cEnumerator enumerator_17916 (operand_17572->mInstructionList, true) ;
      const GGS_lexicalInstructionList::cElement * operand_17916 = NULL ;
      while (((operand_17916 = enumerator_17916.nextObject ()))) {
        macroValidPointer (operand_17916) ;
        var_cas_outGeneratedCode.dotAssign_operation ((findCategoryReader__lexicalInstruction__generateInstructionCode (operand_17916->mInstruction (HERE)->galgasRTTI ()) (inLexique, operand_17916->mInstruction.getPtr (), var_cas_inScannerClassName, var_cas_inLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (446)))) ;
      }
    }
    var_cas_outGeneratedCode.modifier_decIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (448)) ;
    var_cas_outGeneratedCode.appendCString ("}else ") ;
  }
  return var_cas_outGeneratedCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of wrapper 'lexiqueGenerationTemplates'           *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_lexiqueGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_lexiqueGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_lexiqueGenerationTemplates = {
  "",
  0,
  gWrapperAllFiles_lexiqueGenerationTemplates_0,
  0,
  gWrapperAllDirectories_lexiqueGenerationTemplates_0
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//    'headerZone2' template of 'lexiqueGenerationTemplates' filewrapper     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_headerZone2 (C_Compiler & inLexique,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "#ifndef " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "_0_DEFINED\n"
      "#define " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "_0_DEFINED\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"galgas/GGS_lstring.h\"\n"
      "#include \"galgas/GGS_luint.h\"\n"
      "#include \"galgas/GGS_lsint.h\"\n"
      "#include \"galgas/GGS_luint64.h\"\n"
      "#include \"galgas/GGS_lsint64.h\"\n"
      "#include \"galgas/GGS_lchar.h\"\n"
      "#include \"galgas/GGS_ldouble.h\"\n"
      "#include \"galgas/GGS_lbool.h\"\n"
      "#include \"galgas/C_Lexique.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                    E X T E R N    R O U T I N E S                         *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalRoutineMap::cEnumerator enumerator_900 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalRoutineMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (23)), true) ;
    const GGS_lexicalRoutineMap::cElement * operand_900 = NULL ;
    while (((operand_900 = enumerator_900.nextObject ()))) {
      macroValidPointer (operand_900) ;
      if (operand_900->mInfo.mIsExtern.boolValue ()) {
        result << "\n"
          "void scanner_routine_" ;
        result << operand_900->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (25)) ;
        result << " (C_Lexique & inLexique" ;
        GGS_lexicalRoutineFormalArgumentList::cEnumerator enumerator_1044 (operand_900->mInfo.mLexicalRoutineFormalArgumentList, true) ;
        const GGS_lexicalRoutineFormalArgumentList::cElement * operand_1044 = NULL ;
        while (((operand_1044 = enumerator_1044.nextObject ()))) {
          macroValidPointer (operand_1044) ;
          result << ",\n"
            "                " ;
          result << operand_1044->mLexicalFormalArgumentMode.reader_cppConstInFormalArgument (inLexique COMMA_SOURCE_FILE_AT_LINE (27)) ;
          result << operand_1044->mLexicalFormalArgumentType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (28)) ;
          result << operand_1044->mLexicalFormalArgumentMode.reader_cppReferenceInFormalArgument (inLexique COMMA_SOURCE_FILE_AT_LINE (29)) ;
          result << " " ;
          result << operand_1044->mArgumentNameForComment ;
        }
        GGS_stringlist::cEnumerator enumerator_1399 (operand_900->mInfo.mErrorMessageList, true) ;
        const GGS_stringlist::cElement * operand_1399 = NULL ;
        while (((operand_1399 = enumerator_1399.nextObject ()))) {
          macroValidPointer (operand_1399) ;
          result << ",\n"
            "                const char * " ;
          result << operand_1399->mValue ;
        }
        result << ") ;\n" ;
      }else {
      }
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                    E X T E R N    F U N C T I O N S                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalFunctionMap::cEnumerator enumerator_1964 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (45)), true) ;
    const GGS_lexicalFunctionMap::cElement * operand_1964 = NULL ;
    while (((operand_1964 = enumerator_1964.nextObject ()))) {
      macroValidPointer (operand_1964) ;
      if (operand_1964->mInfo.mIsExtern.boolValue ()) {
        result << "\n" ;
        result << operand_1964->mInfo.mReturnedLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
        result << " scanner_function_" ;
        result << operand_1964->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
        result << " (C_Lexique & inLexique" ;
        GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_2126 (operand_1964->mInfo.mLexicalTypeList, true) ;
        const GGS_lexicalFunctionFormalArgumentList::cElement * operand_2126 = NULL ;
        while (((operand_2126 = enumerator_2126.nextObject ()))) {
          macroValidPointer (operand_2126) ;
          result << ",\n"
            "                const " ;
          result << operand_2126->mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (49)) ;
          result << " " ;
          result << operand_2126->mArgumentNameForComment ;
        }
        result << ") ;\n" ;
      }else {
      }
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                       T O K E N    C L A S S                              *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " : public cToken {\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_2789 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (63)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_2789 = NULL ;
    while (((operand_2789 = enumerator_2789.nextObject ()))) {
      macroValidPointer (operand_2789) ;
      result << "  public : " ;
      result << operand_2789->mInfo.mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (64)) ;
      result << " mLexicalAttribute_" ;
      result << operand_2789->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (64)) ;
      result << " ;\n" ;
    }
    result << "\n"
      "  public : cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (void) ;\n"
      "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                     S C A N N E R    C L A S S                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " : public C_Lexique {\n"
      "//--- Constructors\n"
      "  public : " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                       const C_String & inDependencyFileExtension,\n"
      "                       const C_String & inDependencyFilePath,\n"
      "                       C_galgas_io * inParametersPtr,\n"
      "                       const C_String & inSourceFileName\n"
      "                       COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "  public : " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                       C_galgas_io * inParametersPtr,\n"
      "                       const C_String & inSourceString,\n"
      "                       const C_String & inStringForError\n"
      "                       COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "//--- Declaring a protected virtual destructor enables the compiler to raise\n"
      "//    an error if a direct delete is performed; only the static method\n"
      "//    C_GGS_Object::detachPointer may invoke delete.\n"
      "  #ifndef DO_NOT_GENERATE_CHECKINGS\n"
      "    protected : virtual ~" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (void) {}\n"
      "  #endif\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    'headerZone3' template of 'lexiqueGenerationTemplates' filewrapper     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_headerZone3 (C_Compiler & inLexique,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_terminalList & var_cas_TERMINAL_LIST,
                                const GGS_lexicalListDeclarationList & var_cas_DELIMITOR_LIST_LIST,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_TERMINAL_LIST.isBuilt ()
    && var_cas_DELIMITOR_LIST_LIST.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//--- Terminal symbols enumeration\n"
      "  public : enum {" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "_1_" ;
    GGS_terminalList::cEnumerator enumerator_105 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_105 = NULL ;
    while (((operand_105 = enumerator_105.nextObject ()))) {
      macroValidPointer (operand_105) ;
      result << ",\n"
        "  " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_" ;
      result << operand_105->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (5)) ;
    }
    result << "} ;\n" ;
    GGS_lexicalListDeclarationList::cEnumerator enumerator_254 (var_cas_DELIMITOR_LIST_LIST, true) ;
    const GGS_lexicalListDeclarationList::cElement * operand_254 = NULL ;
    while (((operand_254 = enumerator_254.nextObject ()))) {
      macroValidPointer (operand_254) ;
      result << "\n"
        "//--- Key words table '" ;
      result << operand_254->mName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (10)) ;
      result << "'\n"
        "  public : static sint16 search_into_" ;
      result << operand_254->mName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (11)) ;
      result << " (const C_String & inSearchedString) ;\n" ;
    }
    result << "  \n"
      "\n"
      "//--- Assign from attribute\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_519 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (17)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_519 = NULL ;
    while (((operand_519 = enumerator_519.nextObject ()))) {
      macroValidPointer (operand_519) ;
      result << "  public : void assignFromAttribute_" ;
      result << operand_519->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (18)) ;
      result << " (" ;
      result << operand_519->mInfo.mLexicalType.reader_exportedCPPTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (18)) ;
      result << " & outValue) const ;\n" ;
    }
    result << "\n"
      "\n"
      "//--- Attribute access\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_743 (var_cas_LEXIQUE_ANALYSIS_CONTEXT.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (24)), true) ;
    const GGS_lexicalAttributeMap::cElement * operand_743 = NULL ;
    while (((operand_743 = enumerator_743.nextObject ()))) {
      macroValidPointer (operand_743) ;
      result << "  public : " ;
      result << operand_743->mInfo.mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (25)) ;
      result << " attributeValue_" ;
      result << operand_743->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (25)) ;
      result << " (void) const ;\n" ;
    }
    result << "\n"
      "\n"
      "//--- Parse lexical token\n"
      "  protected : virtual bool parseLexicalToken (void) ;\n"
      "\n"
      "//--- Append terminal message\n"
      "  protected : virtual void appendTerminalMessageToSyntaxErrorMessage (const sint16 numeroTerminal,\n"
      "                                                              C_String & messageErreur) ;\n"
      "\n"
      "//--- Get terminal count\n"
      "  public : virtual sint16 terminalVocabularyCount (void) const { return " ;
    result << var_cas_TERMINAL_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (37)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (37)) ;
    result << " ; }\n"
      "\n"
      "//--- Get Token String\n"
      "  public : virtual C_String getCurrentTokenString (const cToken * inTokenPtr) const ;\n"
      "\n"
      "//--- Enter Token\n"
      "  protected : void enterToken (const cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " & inToken) ;\n"
      "\n"
      "//--- TEMPORARY\n"
      "  public : virtual uint8 terminalStyleIndex (const sint32 /* inTerminal */) { return 0 ; }\n"
      "  protected : virtual sint16 parseLexicalTokenForLexicalColoring (void) { return 0 ; }\n"
      "  public : static sint32 getStylesCount (void) { return 0 ; }\n"
      "  public : static const char * getStyleName (const sint32 /* inIndex */) { return \"\" ; }\n"
      "  public : static const char * getStyleIdentifier (const sint32 /* inIndex */) { return \"\" ; }\n"
      "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#endif\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'implementationZone2' template of 'lexiqueGenerationTemplates' filewrapper *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_lexiqueGenerationTemplates_implementationZone2 (C_Compiler & inLexique,
                                const GGS_string& var_cas_LEXIQUE_CLASS_NAME,
                                const GGS_lexicalAttributeMap & var_cas_LEXICAL_ATTRIBUTE_MAP,
                                const GGS_lexicalMessageMap & var_cas_LEXICAL_MESSAGE_MAP,
                                const GGS_terminalList & var_cas_TERMINAL_LIST,
                                const GGS_lexicalExplicitTokenListMapMap & var_cas_LEXICAL_TOKEN_LIST_MAP,
                                const GGS_stringset & var_cas_STRINGS_IN_EXPLICIT_RULES,
                                const GGS_lexicalRuleList & var_cas_LEXICAL_RULE_LIST,
                                const GGS_lexiqueAnalysisContext& var_cas_LEXIQUE_ANALYSIS_CONTEXT) {
  C_String result ;
  const bool isBuilt = var_cas_LEXIQUE_CLASS_NAME.isBuilt ()
    && var_cas_LEXICAL_ATTRIBUTE_MAP.isBuilt ()
    && var_cas_LEXICAL_MESSAGE_MAP.isBuilt ()
    && var_cas_TERMINAL_LIST.isBuilt ()
    && var_cas_LEXICAL_TOKEN_LIST_MAP.isBuilt ()
    && var_cas_STRINGS_IN_EXPLICIT_RULES.isBuilt ()
    && var_cas_LEXICAL_RULE_LIST.isBuilt ()
    && var_cas_LEXIQUE_ANALYSIS_CONTEXT.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"version_libpm.h\"\n"
      "#if LIBPM_VERSION != THE_LIBPM_VERSION\n"
      "  #error \"This file has been compiled with a version of GALGAS different than the version of libpm\"\n"
      "#endif\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include <ctype.h>\n"
      "#include <string.h>\n"
      "\n"
      "#include \"utilities/MF_MemoryControl.h\"\n"
      "#include \"" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << ".h\"\n"
      "\n"
      "#include \"strings/unicode_character.h\"\n"
      "#include \"galgas/scanner_actions.h\"\n"
      "#ifndef DO_NOT_GENERATE_CHECKINGS\n"
      "  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFileName ().cString (HERE), lineNumber ()\n"
      "  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE\n"
      "#else\n"
      "  #define LINE_AND_SOURCE_FILE\n"
      "  #define COMMA_LINE_AND_SOURCE_FILE\n"
      "#endif\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                               Constructors                                *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (void)" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_1301 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_1301 = NULL ;
    if (enumerator_1301.hasCurrentObject ()) {
      result << " :\n" ;
      while (((operand_1301 = enumerator_1301.nextObject ()))) {
        macroValidPointer (operand_1301) ;
        result << "mLexicalAttribute_" ;
        result << operand_1301->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (36)) ;
        result << " ()" ;
        if (enumerator_1301.hasNextObject ()) {
          result << ",\n" ;
        }
      }
    }
    result << " {\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::\n" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                const C_String & inDependencyFileExtension,\n"
      "                const C_String & inDependencyFilePath,\n"
      "                C_galgas_io * inParametersPtr,\n"
      "                const C_String & inSourceFileName\n"
      "                COMMA_LOCATION_ARGS) :\n"
      "C_Lexique (inCallerCompiler, inDependencyFileExtension, inDependencyFilePath, inParametersPtr, inSourceFileName COMMA_THERE) {\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::\n" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " (C_Compiler * inCallerCompiler,\n"
      "                C_galgas_io * inParametersPtr,\n"
      "                const C_String & inSourceString,\n"
      "                const C_String & inStringForError\n"
      "                COMMA_LOCATION_ARGS) :\n"
      "C_Lexique (inCallerCompiler, inParametersPtr, inSourceString, inStringForError COMMA_THERE) {\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                        Lexical error message list                         *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalMessageMap::cEnumerator enumerator_2795 (var_cas_LEXICAL_MESSAGE_MAP, true) ;
    const GGS_lexicalMessageMap::cElement * operand_2795 = NULL ;
    while (((operand_2795 = enumerator_2795.nextObject ()))) {
      macroValidPointer (operand_2795) ;
      result << "\n"
        "static const utf32 gLexicalMessage_" ;
      result << operand_2795->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (72)) ;
      result << " [] = " ;
      result << operand_2795->mInfo.mLexicalMessage.ggs_string ().reader_utf32StringConstantRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (72)) ;
      result << " ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//          Syntax error messages, for every terminal symbol                 *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_terminalList::cEnumerator enumerator_3360 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_3360 = NULL ;
    while (((operand_3360 = enumerator_3360.nextObject ()))) {
      macroValidPointer (operand_3360) ;
      result << "\n"
        "//--- Syntax error message for terminal '$" ;
      result << operand_3360->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (82)) ;
      result << "$' :\n"
        "static const utf32 gSyntaxErrorMessage_" ;
      result << operand_3360->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (83)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (83)) ;
      result << " [] = " ;
      result << operand_3360->mSyntaxErrorMessage.reader_utf32StringConstantRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (83)) ;
      result << " ;\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                appendTerminalMessageToSyntaxErrorMessage                  *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "void " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::\n"
      "appendTerminalMessageToSyntaxErrorMessage (const sint16 inTerminalIndex,\n"
      "                                           C_String & outSyntaxErrorMessage) {\n"
      "  static const utf32 * syntaxErrorMessageArray [" ;
    result << var_cas_TERMINAL_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (95)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (95)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (95)) ;
    result << "] = {kEndOfSourceLexicalErrorMessage" ;
    GGS_terminalList::cEnumerator enumerator_4354 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_4354 = NULL ;
    while (((operand_4354 = enumerator_4354.nextObject ()))) {
      macroValidPointer (operand_4354) ;
      result << ",\n"
        "    gSyntaxErrorMessage_" ;
      result << operand_4354->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (97)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (97)) ;
    }
    result << "} ;\n"
      "  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                      U N I C O D E    S T R I N G S                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_stringset::cEnumerator enumerator_4967 (var_cas_STRINGS_IN_EXPLICIT_RULES, true) ;
    while (enumerator_4967.hasCurrentObject ()) {
      result << "\n"
        "//--- Unicode string for '$" ;
      result << enumerator_4967._key (HERE) ;
      result << "$'\n"
        "static const utf32 kUnicodeString_" ;
      result << enumerator_4967._key (HERE).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (111)) ;
      result << " [] = " ;
      result << enumerator_4967._key (HERE).reader_utf32StringConstantRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (111)) ;
      result << " ;\n" ;
      enumerator_4967.next () ;
    }
    result << "\n" ;
    GGS_lexicalExplicitTokenListMapMap::cEnumerator enumerator_5205 (var_cas_LEXICAL_TOKEN_LIST_MAP, true) ;
    const GGS_lexicalExplicitTokenListMapMap::cElement * operand_5205 = NULL ;
    while (((operand_5205 = enumerator_5205.nextObject ()))) {
      macroValidPointer (operand_5205) ;
      result << "//---------------------------------------------------------------------------*\n"
        "//                                                                           *\n"
        "//             Key words table '" ;
      result << operand_5205->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (118)) ;
      result << "'                            *\n"
        "//                                                                           *\n"
        "//---------------------------------------------------------------------------*\n"
        "\n"
        "static const sint32 ktable_size_" ;
      result << operand_5205->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (121)) ;
      result << " = " ;
      result << operand_5205->mInfo.mExplicitTokenListMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (121)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (121)) ;
      result << " ;\n"
        "\n"
        "static const C_unicode_lexique_table_entry ktable_for_" ;
      result << operand_5205->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (122)) ;
      result << " [ktable_size_" ;
      result << operand_5205->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (122)) ;
      result << "] = {\n" ;
      GGS_tokenSortedlist::cEnumerator enumerator_5962 (operand_5205->mInfo.mTokenSortedList, true) ;
      const GGS_tokenSortedlist::cElement * operand_5962 = NULL ;
      while (((operand_5962 = enumerator_5962.nextObject ()))) {
        macroValidPointer (operand_5962) ;
        result << "  {kUnicodeString_" ;
        result << operand_5962->mName.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (124)) ;
        result << ", " ;
        result << operand_5962->mLength.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (124)) ;
        result << ", " ;
        result << var_cas_LEXIQUE_CLASS_NAME ;
        result << "::" ;
        result << var_cas_LEXIQUE_CLASS_NAME ;
        result << "_1_" ;
        result << operand_5962->mTerminalName.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (124)) ;
        result << "}" ;
        if (enumerator_5962.hasNextObject ()) {
          result << ",\n" ;
        }
      }
      result << "\n"
        "} ;\n"
        "\n"
        "sint16 " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "::search_into_" ;
      result << operand_5205->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (128)) ;
      result << " (const C_String & inSearchedString) {\n"
        "  return searchInList (inSearchedString, ktable_for_" ;
      result << operand_5205->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (129)) ;
      result << ", ktable_size_" ;
      result << operand_5205->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (129)) ;
      result << ") ;\n"
        "}\n"
        "\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                          getCurrentTokenString                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "C_String " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::\n"
      "getCurrentTokenString (const cToken * inTokenPtr) const {\n"
      "  cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " * ptr = (cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " *) inTokenPtr ;\n"
      "  C_String s ;\n"
      "  if (ptr == NULL) {\n"
      "    s.appendCString(\"$$\") ;\n"
      "  }else{\n"
      "    switch (ptr->mTokenCode) {\n"
      "    case " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "_1_:\n"
      "      s.appendCString(\"$$\") ;\n"
      "      break ;\n" ;
    GGS_terminalList::cEnumerator enumerator_7242 (var_cas_TERMINAL_LIST, true) ;
    const GGS_terminalList::cElement * operand_7242 = NULL ;
    while (((operand_7242 = enumerator_7242.nextObject ()))) {
      macroValidPointer (operand_7242) ;
      result << "    case " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "_1_" ;
      result << operand_7242->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (151)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (151)) ;
      result << ":\n"
        "      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;\n"
        "      s.appendCString (" ;
      result << operand_7242->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (153)).reader_CStringConstantRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (153)) ;
      result << ") ;\n"
        "      s.appendCString(\"$ \") ;\n" ;
      GGS_lexicalSentValueList::cEnumerator enumerator_7568 (operand_7242->mSentAttributeList, true) ;
      const GGS_lexicalSentValueList::cElement * operand_7568 = NULL ;
      while (((operand_7568 = enumerator_7568.nextObject ()))) {
        macroValidPointer (operand_7568) ;
        result << "      s." ;
        result << operand_7568->mLexicalType.reader_appendMethodName (inLexique COMMA_SOURCE_FILE_AT_LINE (156)) ;
        result << " (ptr->mLexicalAttribute_" ;
        result << operand_7568->mAttributeName ;
        result << operand_7568->mLexicalType.reader_appendArgumentOfMethod (inLexique COMMA_SOURCE_FILE_AT_LINE (156)) ;
        result << ") ;\n" ;
      }
      result << "      break ;\n" ;
    }
    result << "    default:\n"
      "      break ;\n"
      "    }\n"
      "  }\n"
      "  return s ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//               P A R S E    L E X I C A L    T O K E N                     *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "bool " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::\n"
      "parseLexicalToken (void) {\n"
      "  cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " token ;\n"
      "  mLoop = true ;\n"
      "  token.mTokenCode = -1 ;\n"
      "  while ((token.mTokenCode < 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_8456 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_8456 = NULL ;
    while (((operand_8456 = enumerator_8456.nextObject ()))) {
      macroValidPointer (operand_8456) ;
      result << "    token.mLexicalAttribute_" ;
      result << operand_8456->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (181)) ;
      result << operand_8456->mInfo.mLexicalType.reader_initialization (inLexique COMMA_SOURCE_FILE_AT_LINE (181)) ;
      result << " ;\n" ;
    }
    result << "    mTokenFirstLocation = mCurrentLocation ;\n"
      "    try{\n" ;
    const GGS_uint indentation_8892 = GGS_uint (6U) ;
    if (indentation_8892.isBuilt ()) {
      result.incIndentation ((sint32) indentation_8892.uintValue ()) ;
    }
    GGS_lexicalRuleList::cEnumerator enumerator_8660 (var_cas_LEXICAL_RULE_LIST, true) ;
    const GGS_lexicalRuleList::cElement * operand_8660 = NULL ;
    while (((operand_8660 = enumerator_8660.nextObject ()))) {
      macroValidPointer (operand_8660) ;
      result << (findCategoryReader__abstractLexicalRule__generateCode (operand_8660->mLexicalRule (HERE)->galgasRTTI ()) (inLexique, operand_8660->mLexicalRule.getPtr (), var_cas_LEXIQUE_CLASS_NAME, var_cas_LEXIQUE_ANALYSIS_CONTEXT COMMA_SOURCE_FILE_AT_LINE (188))) ;
    }
     ;
    if (indentation_8892.isBuilt ()) {
      result.incIndentation (- ((sint32) indentation_8892.uintValue ())) ;
    }
    result << "if (testForInputUTF32Char (TO_UNICODE ('\\0'))) { // End of source text \? \n"
      "        token.mTokenCode = " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "_1_ ; // Empty string code\n"
      "      }else{ // Unknown input character\n"
      "        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;\n"
      "      }\n"
      "    }catch (const C_lexicalErrorException &) {\n"
      "      token.mTokenCode = -1 ; // No token\n"
      "      advance () ; // ... go throught unknown character\n"
      "    }\n"
      "  }\n"
      "  if ((UNICODE_VALUE (mCurrentChar) == '\\0') && (token.mTemplateStringBeforeToken.length () > 0)) {\n"
      "    token.mTokenCode = 0 ;\n"
      "    enterToken (token) ;\n"
      "  }\n"
      "  return token.mTokenCode > 0 ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                         E N T E R    T O K E N                            *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "void " ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << "::enterToken (const cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " & inToken) {\n"
      "  cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " * ptr = NULL ;\n"
      "  macroMyNew (ptr, cTokenFor_" ;
    result << var_cas_LEXIQUE_CLASS_NAME ;
    result << " ()) ;\n"
      "  ptr->mTokenCode = inToken.mTokenCode ;\n"
      "  ptr->mFirstLocation = mTokenFirstLocation ;\n"
      "  ptr->mLastLocation  = mTokenLastLocation ;\n"
      "  ptr->mTemplateStringBeforeToken  = inToken.mTemplateStringBeforeToken ;\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_10207 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_10207 = NULL ;
    while (((operand_10207 = enumerator_10207.nextObject ()))) {
      macroValidPointer (operand_10207) ;
      result << "  ptr->mLexicalAttribute_" ;
      result << operand_10207->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (223)) ;
      result << " = inToken.mLexicalAttribute_" ;
      result << operand_10207->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (223)) ;
      result << " ;\n" ;
    }
    result << "  enterTokenFromPointer (ptr) ;\n"
      "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//         A S S I G N    F R O M    A T T R I B U T E                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_10786 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_10786 = NULL ;
    while (((operand_10786 = enumerator_10786.nextObject ()))) {
      macroValidPointer (operand_10786) ;
      result << "void " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "::\n"
        "assignFromAttribute_" ;
      result << operand_10786->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (236)) ;
      result << " (" ;
      result << operand_10786->mInfo.mLexicalType.reader_exportedCPPTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (236)) ;
      result << " & outValue) const {\n"
        "  cTokenFor_" ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << " * ptr = (cTokenFor_" ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << " *) mCurrentTokenPtr ;\n"
        "  outValue = " ;
      result << operand_10786->mInfo.mLexicalType.reader_exportedCPPTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (238)) ;
      result << " (* this, ptr->mLexicalAttribute_" ;
      result << operand_10786->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (238)) ;
      result << ") ;\n"
        "}\n"
        "\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//               A T T R I B U T E   A C C E S S                             *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n" ;
    GGS_lexicalAttributeMap::cEnumerator enumerator_11602 (var_cas_LEXICAL_ATTRIBUTE_MAP, true) ;
    const GGS_lexicalAttributeMap::cElement * operand_11602 = NULL ;
    while (((operand_11602 = enumerator_11602.nextObject ()))) {
      macroValidPointer (operand_11602) ;
      result << operand_11602->mInfo.mLexicalType.reader_cppTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (249)) ;
      result << " " ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << "::\n"
        "attributeValue_" ;
      result << operand_11602->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (250)) ;
      result << " (void) const {\n"
        "  cTokenFor_" ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << " * ptr = (cTokenFor_" ;
      result << var_cas_LEXIQUE_CLASS_NAME ;
      result << " *) mCurrentTokenPtr ;\n"
        "  return ptr->mLexicalAttribute_" ;
      result << operand_11602->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (252)) ;
      result << " ;\n"
        "}\n"
        "\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalSendDefaultAction.checkLexicalDefaultAction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction> gDispatchTableForMethod__lexicalSendDefaultAction__checkLexicalDefaultAction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__lexicalSendDefaultAction__checkLexicalDefaultAction.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction
findCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalSendDefaultAction__checkLexicalDefaultAction.count ()) {
    result = gDispatchTableForMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (superClassPtr) ;
      gDispatchTableForMethod__lexicalSendDefaultAction__checkLexicalDefaultAction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalSendTerminalByDefault.checkLexicalDefaultAction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSendTerminalByDefault__checkLexicalDefaultAction (C_Compiler & inLexique,
                                const cPtr_lexicalSendTerminalByDefault * operand_19804,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19804 != NULL) {
    GGS_lexicalSentValueList  automatic_var_1 ;
    const GGS_terminalMap  temp_19912 = var_cas_ioLexiqueAnalysisContext.reader_mTerminalMap (inLexique COMMA_SOURCE_FILE_AT_LINE (493)) ;
    if (temp_19912.isBuilt ()) {
      temp_19912 (HERE)->method_searchKey (inLexique, operand_19804->mDefaultSentTerminal, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (493)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalErrorByDefault.checkLexicalDefaultAction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalErrorByDefault__checkLexicalDefaultAction (C_Compiler & inLexique,
                                const cPtr_lexicalErrorByDefault * operand_20098,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20098 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_20213 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_20098->mDefaultErrorMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (501)) ;
    if (NULL != operand_20213) {
      operand_20213->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalExpression.checkLexicalExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalExpression__checkLexicalExpression> gDispatchTableForMethod__lexicalExpression__checkLexicalExpression ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalExpression__checkLexicalExpression (typeCategoryMethod__lexicalExpression__checkLexicalExpression inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__lexicalExpression__checkLexicalExpression.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalExpression__checkLexicalExpression
findCategoryMethod__lexicalExpression__checkLexicalExpression (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalExpression__checkLexicalExpression result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalExpression__checkLexicalExpression.count ()) {
    result = gDispatchTableForMethod__lexicalExpression__checkLexicalExpression (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalExpression__checkLexicalExpression (superClassPtr) ;
      gDispatchTableForMethod__lexicalExpression__checkLexicalExpression.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@lexicalOrExpression.checkLexicalExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalOrExpression__checkLexicalExpression (C_Compiler & inLexique,
                                const cPtr_lexicalOrExpression * operand_20807,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20807 != NULL) {
    const GGS_lexicalExpression  temp_20901 = operand_20807->mLeftOperand ;
    if (temp_20901.isBuilt ()) {
      typeCategoryMethod__lexicalExpression__checkLexicalExpression method = findCategoryMethod__lexicalExpression__checkLexicalExpression (temp_20901.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_20901 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (519)) ;
      }
    }
    const GGS_lexicalExpression  temp_20972 = operand_20807->mRightOperand ;
    if (temp_20972.isBuilt ()) {
      typeCategoryMethod__lexicalExpression__checkLexicalExpression method = findCategoryMethod__lexicalExpression__checkLexicalExpression (temp_20972.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_20972 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (520)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalCharacterMatch.checkLexicalExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterMatch__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalCharacterMatch * operand_21158,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21158 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalCharacterSetMatch.checkLexicalExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterSetMatch__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalCharacterSetMatch * operand_21378,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21378 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@lexicalCharacterIntervalMatch.checkLexicalExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterIntervalMatch__checkLexicalExpression (C_Compiler &,
                                const cPtr_lexicalCharacterIntervalMatch * operand_21603,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21603 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@lexicalStringMatch.checkLexicalExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStringMatch__checkLexicalExpression (C_Compiler & inLexique,
                                const cPtr_lexicalStringMatch * operand_21817,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21817 != NULL) {
    var_cas_ioLexiqueAnalysisContext.mUnicodeStringToGenerate._addAssign_operation (operand_21817->mString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (549))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalStringNotMatch.checkLexicalExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStringNotMatch__checkLexicalExpression (C_Compiler & inLexique,
                                const cPtr_lexicalStringNotMatch * operand_22102,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22102 != NULL) {
    var_cas_ioLexiqueAnalysisContext.mUnicodeStringToGenerate._addAssign_operation (operand_22102->mString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (557))) ;
    elementOf_GGS_lexicalMessageMap * operand_22285 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_22102->mErrorMessage, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (558)) ;
    if (NULL != operand_22285) {
      operand_22285->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalRoutineOrFunctionFormalInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument> gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument
findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument.count ()) {
    result = gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (superClassPtr) ;
      gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalAttributeInputArgument * operand_22982,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22982 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  temp_23227 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (580)) ;
    if (temp_23227.isBuilt ()) {
      temp_23227 (HERE)->method_searchKey (inLexique, operand_22982->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (580)) ;
    }
    if (((var_cas_attributeLexicalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_22982->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is ")).operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (587)))).operator_concat (GGS_string (" type, but lexical routine prototype requires "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (589)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (591)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCharacterInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCharacterInputArgument * operand_23781,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23781 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_23781->mCharacter.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal character has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (604)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (606)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalUnsignedInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalUnsignedInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalUnsignedInputArgument * operand_24385,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24385 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_24385->mUnsigned.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal character has @uint")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (619)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (621)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCurrentCharacterInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCurrentCharacterInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCurrentCharacterInputArgument * operand_24996,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24996 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_24996->mLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, current character value has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (634)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (636)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFunctionInputArgument.checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFunctionInputArgument__checkLexicalFunctionCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalFunctionInputArgument * operand_25603,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25603 != NULL) {
    GGS_lexicalFunctionFormalArgumentList  var_cas_lexicalFormalTypeList ;
    GGS_lexicalTypeEnum var_cas_returnedLexicalFormalType ;
    GGS_string var_cas_replacementFunctionName ;
    GGS_bool automatic_var_2 ;
    const GGS_lexicalFunctionMap  temp_25949 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (649)) ;
    if (temp_25949.isBuilt ()) {
      temp_25949 (HERE)->method_searchKey (inLexique, operand_25603->mFunctionName, var_cas_lexicalFormalTypeList, var_cas_returnedLexicalFormalType, var_cas_replacementFunctionName, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (649)) ;
    }
    if (((var_cas_replacementFunctionName).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
      operand_25603->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("obsolete lexical function, replaced by '")).operator_concat (var_cas_replacementFunctionName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (658)) ;
    }
    if (((var_cas_returnedLexicalFormalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_25603->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, the function returns an ")).operator_concat (var_cas_returnedLexicalFormalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (663)))).operator_concat (GGS_string (" value, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (665)))).operator_concat (GGS_string (" value")) COMMA_SOURCE_FILE_AT_LINE (667)) ;
    }
    if (((var_cas_lexicalFormalTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (669))).operator_isNotEqual (operand_25603->mFunctionActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (669)))).isBuiltAndTrue ()) {
      operand_25603->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical function names ")).operator_concat (operand_25603->mFunctionActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (671)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (671)))).operator_concat (GGS_string (" actual argument(s), but the prototype requires "))).operator_concat (var_cas_lexicalFormalTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (673)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (673)))).operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (674)) ;
    }
    {
      GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_27052 (var_cas_lexicalFormalTypeList, true) ;
      const GGS_lexicalFunctionFormalArgumentList::cElement * operand_27052 = NULL ;
      GGS_lexicalFunctionCallActualArgumentList::cEnumerator enumerator_27081 (operand_25603->mFunctionActualArgumentList, true) ;
      const GGS_lexicalFunctionCallActualArgumentList::cElement * operand_27081 = NULL ;
      while (((operand_27052 = enumerator_27052.nextObject ()))
          && ((operand_27081 = enumerator_27081.nextObject ()))) {
        macroValidPointer (operand_27052) ;
        macroValidPointer (operand_27081) ;
        const GGS_lexicalRoutineOrFunctionFormalInputArgument  temp_27150 = operand_27081->mLexicalActualInputArgument ;
        if (temp_27150.isBuilt ()) {
          typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument method = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (temp_27150.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_27150 (HERE), var_cas_ioLexiqueAnalysisContext, operand_27052->mLexicalType COMMA_SOURCE_FILE_AT_LINE (677)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalRoutineOrFunctionFormalInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument> gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument
findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument.count ()) {
    result = gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (superClassPtr) ;
      gDispatchTableForMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalAttributeInputArgument * operand_27852,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27852 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  temp_28097 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (701)) ;
    if (temp_28097.isBuilt ()) {
      temp_28097 (HERE)->method_searchKey (inLexique, operand_27852->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (701)) ;
    }
    if (((var_cas_attributeLexicalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_27852->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is ")).operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (708)))).operator_concat (GGS_string (" type, but lexical routine prototype requires "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (710)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (712)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCharacterInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCharacterInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCharacterInputArgument * operand_28650,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_28650 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_28650->mCharacter.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal character has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (725)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (727)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalUnsignedInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalUnsignedInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalUnsignedInputArgument * operand_29253,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29253 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_29253->mUnsigned.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, a literal unsigned value has @uint")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (740)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (742)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalCurrentCharacterInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalCurrentCharacterInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalCurrentCharacterInputArgument * operand_29868,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29868 != NULL) {
    if (((GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE)).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_29868->mLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("type error, current character value has @char")).operator_concat (GGS_string (" type, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (755)))).operator_concat (GGS_string (" type value")) COMMA_SOURCE_FILE_AT_LINE (757)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFunctionInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFunctionInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalFunctionInputArgument * operand_30474,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_30474 != NULL) {
    GGS_lexicalFunctionFormalArgumentList  var_cas_lexicalFormalTypeList ;
    GGS_lexicalTypeEnum var_cas_returnedLexicalFormalType ;
    GGS_string var_cas_replacementFunctionName ;
    GGS_bool automatic_var_3 ;
    const GGS_lexicalFunctionMap  temp_30820 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalFunctionMap (inLexique COMMA_SOURCE_FILE_AT_LINE (770)) ;
    if (temp_30820.isBuilt ()) {
      temp_30820 (HERE)->method_searchKey (inLexique, operand_30474->mFunctionName, var_cas_lexicalFormalTypeList, var_cas_returnedLexicalFormalType, var_cas_replacementFunctionName, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (770)) ;
    }
    if (((var_cas_replacementFunctionName).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
      operand_30474->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("obsolete lexical function, replaced by '")).operator_concat (var_cas_replacementFunctionName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (779)) ;
    }
    if (((var_cas_returnedLexicalFormalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_30474->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, the function returns an ")).operator_concat (var_cas_returnedLexicalFormalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (784)))).operator_concat (GGS_string (" value, but lexical routine prototype requires an "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (786)))).operator_concat (GGS_string (" value")) COMMA_SOURCE_FILE_AT_LINE (788)) ;
    }
    if (((var_cas_lexicalFormalTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (790))).operator_isNotEqual (operand_30474->mFunctionActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (790)))).isBuiltAndTrue ()) {
      operand_30474->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical function names ")).operator_concat (operand_30474->mFunctionActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (792)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (792)))).operator_concat (GGS_string (" actual argument(s), but the prototype requires "))).operator_concat (var_cas_lexicalFormalTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (794)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (794)))).operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (795)) ;
    }
    {
      GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_31923 (var_cas_lexicalFormalTypeList, true) ;
      const GGS_lexicalFunctionFormalArgumentList::cElement * operand_31923 = NULL ;
      GGS_lexicalFunctionCallActualArgumentList::cEnumerator enumerator_31952 (operand_30474->mFunctionActualArgumentList, true) ;
      const GGS_lexicalFunctionCallActualArgumentList::cElement * operand_31952 = NULL ;
      while (((operand_31923 = enumerator_31923.nextObject ()))
          && ((operand_31952 = enumerator_31952.nextObject ()))) {
        macroValidPointer (operand_31923) ;
        macroValidPointer (operand_31952) ;
        const GGS_lexicalRoutineOrFunctionFormalInputArgument  temp_32021 = operand_31952->mLexicalActualInputArgument ;
        if (temp_32021.isBuilt ()) {
          typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument method = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument (temp_32021.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_32021 (HERE), var_cas_ioLexiqueAnalysisContext, operand_31923->mLexicalType COMMA_SOURCE_FILE_AT_LINE (798)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@abstractLexicalRoutineActualArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument> gDispatchTableForMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument
findCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument.count ()) {
    result = gDispatchTableForMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (superClassPtr) ;
      gDispatchTableForMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalAttributeInputOutputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalAttributeInputOutputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalAttributeInputOutputArgument * operand_32788,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalArgumentMode  var_cas_inLexicalRoutineFormalArgumentMode,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_32788 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalAttributeMap  temp_33092 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (824)) ;
    if (temp_33092.isBuilt ()) {
      temp_33092 (HERE)->method_searchKey (inLexique, operand_32788->mAttributeName, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (824)) ;
    }
    if (((var_cas_attributeLexicalType).operator_isNotEqual (var_cas_inLexicalRoutineFormalArgumentType)).isBuiltAndTrue ()) {
      operand_32788->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("type error, attribute type is ")).operator_concat (var_cas_attributeLexicalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (831)))).operator_concat (GGS_string (" type, but lexical routine prototype requires "))).operator_concat (var_cas_inLexicalRoutineFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (833)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (835)) ;
    }
    if (((var_cas_inLexicalRoutineFormalArgumentMode).operator_isNotEqual (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
      operand_32788->mActualPassingModeLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the output mode (!) is required here, not an output/input mode") COMMA_SOURCE_FILE_AT_LINE (839)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalFormalInputArgument.checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalFormalInputArgument__checkLexicalRoutineCallArgument (C_Compiler & inLexique,
                                const cPtr_lexicalFormalInputArgument * operand_33875,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext,
                                GGS_lexicalArgumentMode  var_cas_inLexicalRoutineFormalArgumentMode,
                                GGS_lexicalTypeEnum  var_cas_inLexicalRoutineFormalArgumentType
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_33875 != NULL) {
    GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
    const GGS_lexicalRoutineOrFunctionFormalInputArgument  temp_34191 = operand_33875->mRoutineOrFunctionFormalInputArgument ;
    if (temp_34191.isBuilt ()) {
      typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument method = findCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument (temp_34191.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_34191 (HERE), var_cas_ioLexiqueAnalysisContext, var_cas_inLexicalRoutineFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (851)) ;
      }
    }
    if (((var_cas_inLexicalRoutineFormalArgumentMode).operator_isNotEqual (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
      operand_33875->mActualPassingModeLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the output/input mode (!\?) is required here, not an input mode") COMMA_SOURCE_FILE_AT_LINE (858)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@lexicalInstruction.checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__lexicalInstruction__checkLexicalInstruction> gDispatchTableForMethod__lexicalInstruction__checkLexicalInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__lexicalInstruction__checkLexicalInstruction (typeCategoryMethod__lexicalInstruction__checkLexicalInstruction inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__lexicalInstruction__checkLexicalInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__lexicalInstruction__checkLexicalInstruction
findCategoryMethod__lexicalInstruction__checkLexicalInstruction (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__lexicalInstruction__checkLexicalInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__lexicalInstruction__checkLexicalInstruction.count ()) {
    result = gDispatchTableForMethod__lexicalInstruction__checkLexicalInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (superClassPtr) ;
      gDispatchTableForMethod__lexicalInstruction__checkLexicalInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@lexicalStructuredSendInstruction.checkLexicalInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalStructuredSendInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalStructuredSendInstruction * operand_35020,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_35020 != NULL) {
    {
      GGS_lexicalSendSearchList::cEnumerator enumerator_35108 (operand_35020->mLexicalSendSearchList, true) ;
      const GGS_lexicalSendSearchList::cElement * operand_35108 = NULL ;
      while (((operand_35108 = enumerator_35108.nextObject ()))) {
        macroValidPointer (operand_35108) ;
        GGS_lexicalTypeEnum automatic_var_4 ;
        const GGS_lexicalAttributeMap  temp_35174 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (875)) ;
        if (temp_35174.isBuilt ()) {
          temp_35174 (HERE)->method_searchKey (inLexique, operand_35108->mAttributeName, automatic_var_4 COMMA_SOURCE_FILE_AT_LINE (875)) ;
        }
      }
    }
    const GGS_lexicalSendDefaultAction  temp_35267 = operand_35020->mLexicalSendDefaultAction ;
    if (temp_35267.isBuilt ()) {
      typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction method = findCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction (temp_35267.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_35267 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (877)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@lexicalSimpleSendInstruction.checkLexicalInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSimpleSendInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalSimpleSendInstruction * operand_35460,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_35460 != NULL) {
    GGS_lexicalSentValueList  automatic_var_5 ;
    const GGS_terminalMap  temp_35568 = var_cas_ioLexiqueAnalysisContext.reader_mTerminalMap (inLexique COMMA_SOURCE_FILE_AT_LINE (885)) ;
    if (temp_35568.isBuilt ()) {
      temp_35568 (HERE)->method_searchKey (inLexique, operand_35460->mSentTerminal, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (885)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalRepeatInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRepeatInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalRepeatInstruction * operand_35748,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_35748 != NULL) {
    {
      GGS_lexicalWhileBranchList::cEnumerator enumerator_35837 (operand_35748->mLexicalWhileBranchList, true) ;
      const GGS_lexicalWhileBranchList::cElement * operand_35837 = NULL ;
      while (((operand_35837 = enumerator_35837.nextObject ()))) {
        macroValidPointer (operand_35837) ;
        const GGS_lexicalExpression  temp_35885 = operand_35837->mWhileExpression ;
        if (temp_35885.isBuilt ()) {
          typeCategoryMethod__lexicalExpression__checkLexicalExpression method = findCategoryMethod__lexicalExpression__checkLexicalExpression (temp_35885.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_35885 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (894)) ;
          }
        }
        {
          GGS_lexicalInstructionList::cEnumerator enumerator_35949 (operand_35837->mWhileInstructionList, true) ;
          const GGS_lexicalInstructionList::cElement * operand_35949 = NULL ;
          while (((operand_35949 = enumerator_35949.nextObject ()))) {
            macroValidPointer (operand_35949) ;
            const GGS_lexicalInstruction  temp_35996 = operand_35949->mInstruction ;
            if (temp_35996.isBuilt ()) {
              typeCategoryMethod__lexicalInstruction__checkLexicalInstruction method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (temp_35996.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, temp_35996 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (896)) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_lexicalInstructionList::cEnumerator enumerator_36095 (operand_35748->mRepeatedInstructionList, true) ;
      const GGS_lexicalInstructionList::cElement * operand_36095 = NULL ;
      while (((operand_36095 = enumerator_36095.nextObject ()))) {
        macroValidPointer (operand_36095) ;
        const GGS_lexicalInstruction  temp_36140 = operand_36095->mInstruction ;
        if (temp_36140.isBuilt ()) {
          typeCategoryMethod__lexicalInstruction__checkLexicalInstruction method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (temp_36140.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_36140 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (900)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalSelectInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalSelectInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalSelectInstruction * operand_36345,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_36345 != NULL) {
    {
      GGS_lexicalSelectBranchList::cEnumerator enumerator_36435 (operand_36345->mLexicalSelectBranchList, true) ;
      const GGS_lexicalSelectBranchList::cElement * operand_36435 = NULL ;
      while (((operand_36435 = enumerator_36435.nextObject ()))) {
        macroValidPointer (operand_36435) ;
        const GGS_lexicalExpression  temp_36484 = operand_36435->mSelectExpression ;
        if (temp_36484.isBuilt ()) {
          typeCategoryMethod__lexicalExpression__checkLexicalExpression method = findCategoryMethod__lexicalExpression__checkLexicalExpression (temp_36484.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_36484 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (910)) ;
          }
        }
        {
          GGS_lexicalInstructionList::cEnumerator enumerator_36549 (operand_36435->mSelectInstructionList, true) ;
          const GGS_lexicalInstructionList::cElement * operand_36549 = NULL ;
          while (((operand_36549 = enumerator_36549.nextObject ()))) {
            macroValidPointer (operand_36549) ;
            const GGS_lexicalInstruction  temp_36596 = operand_36549->mInstruction ;
            if (temp_36596.isBuilt ()) {
              typeCategoryMethod__lexicalInstruction__checkLexicalInstruction method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (temp_36596.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, temp_36596 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (912)) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_lexicalInstructionList::cEnumerator enumerator_36694 (operand_36345->mDefaultInstructionList, true) ;
      const GGS_lexicalInstructionList::cElement * operand_36694 = NULL ;
      while (((operand_36694 = enumerator_36694.nextObject ()))) {
        macroValidPointer (operand_36694) ;
        const GGS_lexicalInstruction  temp_36739 = operand_36694->mInstruction ;
        if (temp_36739.isBuilt ()) {
          typeCategoryMethod__lexicalInstruction__checkLexicalInstruction method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (temp_36739.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_36739 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (916)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalRoutineInstruction.checkLexicalInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRoutineInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalRoutineInstruction * operand_36945,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_36945 != NULL) {
    GGS_lexicalRoutineFormalArgumentList  var_cas_lexicalRoutineFormalArgumentList ;
    GGS_stringlist  var_cas_routineErrorMessageList ;
    GGS_string var_cas_replacementRoutineName ;
    GGS_bool automatic_var_6 ;
    const GGS_lexicalRoutineMap  temp_37212 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalRoutineMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (928)) ;
    if (temp_37212.isBuilt ()) {
      temp_37212 (HERE)->method_searchKey (inLexique, operand_36945->mRoutineName, var_cas_lexicalRoutineFormalArgumentList, var_cas_routineErrorMessageList, var_cas_replacementRoutineName, automatic_var_6 COMMA_SOURCE_FILE_AT_LINE (928)) ;
    }
    if (((var_cas_replacementRoutineName).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
      operand_36945->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("obsolete lexical routine, replaced by '")).operator_concat (var_cas_replacementRoutineName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (937)) ;
    }
    if (((var_cas_lexicalRoutineFormalArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (940))).operator_isNotEqual (operand_36945->mActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (940)))).isBuiltAndTrue ()) {
      operand_36945->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical routine call names ")).operator_concat (operand_36945->mActualArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (942)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (942)))).operator_concat (GGS_string (" actual argument(s), but the lexical routine prototype requires "))).operator_concat (var_cas_lexicalRoutineFormalArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (944)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (944)))).operator_concat (GGS_string (" actual argument(s)")) COMMA_SOURCE_FILE_AT_LINE (945)) ;
    }
    {
      GGS_lexicalRoutineFormalArgumentList::cEnumerator enumerator_37995 (var_cas_lexicalRoutineFormalArgumentList, true) ;
      const GGS_lexicalRoutineFormalArgumentList::cElement * operand_37995 = NULL ;
      GGS_lexicalRoutineCallActualArgumentList::cEnumerator enumerator_38016 (operand_36945->mActualArgumentList, true) ;
      const GGS_lexicalRoutineCallActualArgumentList::cElement * operand_38016 = NULL ;
      while (((operand_37995 = enumerator_37995.nextObject ()))
          && ((operand_38016 = enumerator_38016.nextObject ()))) {
        macroValidPointer (operand_37995) ;
        macroValidPointer (operand_38016) ;
        const GGS_abstractLexicalRoutineActualArgument  temp_38086 = operand_38016->mLexicalRoutineActualArgument ;
        if (temp_38086.isBuilt ()) {
          typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument method = findCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument (temp_38086.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_38086 (HERE), var_cas_ioLexiqueAnalysisContext, operand_37995->mLexicalFormalArgumentMode, operand_37995->mLexicalFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (948)) ;
          }
        }
      }
    }
    if (((var_cas_routineErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (955))).operator_isNotEqual (operand_36945->mErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (955)))).isBuiltAndTrue ()) {
      operand_36945->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this lexical routine call names ")).operator_concat (operand_36945->mErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (957)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (957)))).operator_concat (GGS_string (" error message(s), but the lexical routine prototype requires "))).operator_concat (var_cas_routineErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (959)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (959)))).operator_concat (GGS_string (" error message(s)")) COMMA_SOURCE_FILE_AT_LINE (960)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_38645 (operand_36945->mErrorMessageList, true) ;
      const GGS_lstringlist::cElement * operand_38645 = NULL ;
      while (((operand_38645 = enumerator_38645.nextObject ()))) {
        macroValidPointer (operand_38645) ;
        elementOf_GGS_lexicalMessageMap * operand_38710 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_38645->mValue, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (963)) ;
        if (NULL != operand_38710) {
          operand_38710->mInfo.mMessageIsUsed = GGS_bool (true) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalLogInstruction.checkLexicalInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalLogInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalLogInstruction * operand_38953,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_38953 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalRewindInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalRewindInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalRewindInstruction * operand_39174,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_39174 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalDropInstruction.checkLexicalInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalDropInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalDropInstruction * operand_39393,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_39393 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@lexicalTagInstruction.checkLexicalInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalTagInstruction__checkLexicalInstruction (C_Compiler &,
                                const cPtr_lexicalTagInstruction * operand_39611,
                                GGS_lexiqueAnalysisContext & /* var_cas_ioLexiqueAnalysisContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_39611 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@lexicalErrorInstruction.checkLexicalInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalErrorInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalErrorInstruction * operand_39831,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_39831 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_39939 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_39831->mErrorMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (1002)) ;
    if (NULL != operand_39939) {
      operand_39939->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@lexicalWarningInstruction.checkLexicalInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalWarningInstruction__checkLexicalInstruction (C_Compiler & inLexique,
                                const cPtr_lexicalWarningInstruction * operand_40173,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_40173 != NULL) {
    elementOf_GGS_lexicalMessageMap * operand_40281 = (elementOf_GGS_lexicalMessageMap *) var_cas_ioLexiqueAnalysisContext.mLexicalMessageMap.searchForWithInstruction (inLexique, operand_40173->mWarningMessageName, GGS_lexicalMessageMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (1012)) ;
    if (NULL != operand_40281) {
      operand_40281->mInfo.mMessageIsUsed = GGS_bool (true) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@abstractLexicalRule.checkLexicalRule'  *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__abstractLexicalRule__checkLexicalRule> gDispatchTableForMethod__abstractLexicalRule__checkLexicalRule ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__abstractLexicalRule__checkLexicalRule (typeCategoryMethod__abstractLexicalRule__checkLexicalRule inRoutine,
                     const sint32 inClassID) {
  gDispatchTableForMethod__abstractLexicalRule__checkLexicalRule.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__abstractLexicalRule__checkLexicalRule
findCategoryMethod__abstractLexicalRule__checkLexicalRule (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__abstractLexicalRule__checkLexicalRule result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__abstractLexicalRule__checkLexicalRule.count ()) {
    result = gDispatchTableForMethod__abstractLexicalRule__checkLexicalRule (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__abstractLexicalRule__checkLexicalRule (superClassPtr) ;
      gDispatchTableForMethod__abstractLexicalRule__checkLexicalRule.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@lexicalImplicitRule.checkLexicalRule'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalImplicitRule__checkLexicalRule (C_Compiler & inLexique,
                                const cPtr_lexicalImplicitRule * operand_40856,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_40856 != NULL) {
    GGS_lexicalExplicitTokenListMap  automatic_var_7 ;
    GGS_tokenSortedlist  automatic_var_8 ;
    const GGS_lexicalExplicitTokenListMapMap  temp_40972 = var_cas_ioLexiqueAnalysisContext.reader_mLexicalTokenListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1030)) ;
    if (temp_40972.isBuilt ()) {
      temp_40972 (HERE)->method_searchKey (inLexique, operand_40856->mListName, automatic_var_7, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (1030)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@lexicalExplicitRule.checkLexicalRule'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lexicalExplicitRule__checkLexicalRule (C_Compiler & inLexique,
                                const cPtr_lexicalExplicitRule * operand_41140,
                                GGS_lexiqueAnalysisContext & var_cas_ioLexiqueAnalysisContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41140 != NULL) {
    const GGS_lexicalExpression  temp_41244 = operand_41140->mLexicalRuleExpression ;
    if (temp_41244.isBuilt ()) {
      typeCategoryMethod__lexicalExpression__checkLexicalExpression method = findCategoryMethod__lexicalExpression__checkLexicalExpression (temp_41244.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, temp_41244 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (1038)) ;
      }
    }
    {
      GGS_lexicalInstructionList::cEnumerator enumerator_41301 (operand_41140->mInstructionList, true) ;
      const GGS_lexicalInstructionList::cElement * operand_41301 = NULL ;
      while (((operand_41301 = enumerator_41301.nextObject ()))) {
        macroValidPointer (operand_41301) ;
        const GGS_lexicalInstruction  temp_41346 = operand_41301->mInstruction ;
        if (temp_41346.isBuilt ()) {
          typeCategoryMethod__lexicalInstruction__checkLexicalInstruction method = findCategoryMethod__lexicalInstruction__checkLexicalInstruction (temp_41346.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_41346 (HERE), var_cas_ioLexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (1040)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "compileLexiqueComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileLexiqueComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  var_cas_inOutputDirectory COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileLexiqueComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lexiqueComponentRoot  var_cas_lexiqueComponentRoot ;
  const GGS_string _depExtension = GGS_string ("") ;
  const GGS_string _depPath = GGS_string ("") ;
  if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
    lexiqueLL1grammar::_performSourceFileParsing_ (inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_inSourceFile,
                                  var_cas_lexiqueComponentRoot
                                  COMMA_SOURCE_FILE_AT_LINE (1053)) ;
  }
  GGS_lstring  var_cas_componentName ;
  var_cas_componentName = var_cas_lexiqueComponentRoot.reader_mLexiqueComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (1055)) ;
  GGS_string var_cas_basename ;
  var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (1056)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (1056)) ;
  if (((var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1057))).operator_isNotEqual (var_cas_basename)).isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS checks "
      "the component name ('")).operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1059)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (1061)) ;
  }
  GGS_lexicalTypeMap  var_cas_lexicalTypeMap ;
  var_cas_lexicalTypeMap = GGS_lexicalTypeMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (1065)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("char"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (1066)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (1067)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint64"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (1068)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (1069)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint64"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint64 (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (1070)) ;
  var_cas_lexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("double"), GGS_location (inLexique) COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_double (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (1071)) ;
  GGS_lexicalRoutineMap  var_cas_lexicalRoutineMap ;
  ::routine_buildLexicalRoutineMap (inLexique,  var_cas_lexicalRoutineMap COMMA_SOURCE_FILE_AT_LINE (1074)) ;
  {
    GGS_externRoutineList::cEnumerator enumerator_43394 (var_cas_lexiqueComponentRoot.reader_mExternRoutineList (inLexique COMMA_SOURCE_FILE_AT_LINE (1076)), true) ;
    const GGS_externRoutineList::cElement * operand_43394 = NULL ;
    while (((operand_43394 = enumerator_43394.nextObject ()))) {
      macroValidPointer (operand_43394) ;
      GGS_lexicalRoutineFormalArgumentList  var_cas_lexicalRoutineFormalArgumentList ;
      var_cas_lexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
      {
        GGS_lexicalExternRoutineFormalArgumentList::cEnumerator enumerator_43568 (operand_43394->mLexicalRoutineFormalArgumentList, true) ;
        const GGS_lexicalExternRoutineFormalArgumentList::cElement * operand_43568 = NULL ;
        while (((operand_43568 = enumerator_43568.nextObject ()))) {
          macroValidPointer (operand_43568) ;
          GGS_lexicalTypeEnum var_cas_lexicalFormalArgumentType ;
          const GGS_lexicalTypeMap  temp_43654 = var_cas_lexicalTypeMap ;
          if (temp_43654.isBuilt ()) {
            temp_43654 (HERE)->method_searchKey (inLexique, operand_43568->mLexicalTypeName, var_cas_lexicalFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (1080)) ;
          }
          var_cas_lexicalRoutineFormalArgumentList._addAssign_operation (operand_43568->mPassingMode, var_cas_lexicalFormalArgumentType, operand_43568->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1081))) ;
        }
      }
      var_cas_lexicalRoutineMap.modifier_insertKey (inLexique, operand_43394->mRoutineName, var_cas_lexicalRoutineFormalArgumentList, operand_43394->mErrorMessageList, GGS_string (""), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1083)) ;
    }
  }
  GGS_lexicalFunctionMap  var_cas_lexicalFunctionMap ;
  ::routine_buildLexicalFunctionMap (inLexique,  var_cas_lexicalFunctionMap COMMA_SOURCE_FILE_AT_LINE (1087)) ;
  {
    GGS_externFunctionList::cEnumerator enumerator_44199 (var_cas_lexiqueComponentRoot.reader_mExternFunctionList (inLexique COMMA_SOURCE_FILE_AT_LINE (1089)), true) ;
    const GGS_externFunctionList::cElement * operand_44199 = NULL ;
    while (((operand_44199 = enumerator_44199.nextObject ()))) {
      macroValidPointer (operand_44199) ;
      GGS_lexicalFunctionFormalArgumentList  var_cas_lexicalFunctionFormalArgumentList ;
      var_cas_lexicalFunctionFormalArgumentList = GGS_lexicalFunctionFormalArgumentList ::constructor_emptyList () ;
      {
        GGS_lexicalExternFunctionFormalArgumentList::cEnumerator enumerator_44377 (operand_44199->mLexicalFunctionFormalArgumentList, true) ;
        const GGS_lexicalExternFunctionFormalArgumentList::cElement * operand_44377 = NULL ;
        while (((operand_44377 = enumerator_44377.nextObject ()))) {
          macroValidPointer (operand_44377) ;
          GGS_lexicalTypeEnum var_cas_lexicalFormalArgumentType ;
          const GGS_lexicalTypeMap  temp_44463 = var_cas_lexicalTypeMap ;
          if (temp_44463.isBuilt ()) {
            temp_44463 (HERE)->method_searchKey (inLexique, operand_44377->mLexicalTypeName, var_cas_lexicalFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (1093)) ;
          }
          var_cas_lexicalFunctionFormalArgumentList._addAssign_operation (var_cas_lexicalFormalArgumentType, operand_44377->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1094))) ;
        }
      }
      GGS_lexicalTypeEnum var_cas_returnedArgumentType ;
      const GGS_lexicalTypeMap  temp_44705 = var_cas_lexicalTypeMap ;
      if (temp_44705.isBuilt ()) {
        temp_44705 (HERE)->method_searchKey (inLexique, operand_44199->mReturnedTypeName, var_cas_returnedArgumentType COMMA_SOURCE_FILE_AT_LINE (1097)) ;
      }
      var_cas_lexicalFunctionMap.modifier_insertKey (inLexique, operand_44199->mFunctionName, var_cas_lexicalFunctionFormalArgumentList, var_cas_returnedArgumentType, GGS_string (""), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1098)) ;
    }
  }
  GGS_lexiqueAnalysisContext var_cas_lexiqueAnalysisContext ;
  var_cas_lexiqueAnalysisContext = GGS_lexiqueAnalysisContext::constructor_new (var_cas_lexicalRoutineMap, var_cas_lexicalFunctionMap, GGS_lexicalMessageMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_terminalMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_terminalList ::constructor_emptyList (), GGS_lexicalAttributeMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_lexicalExplicitTokenListMapMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_stringset ::constructor_emptySet ()) ;
  {
    GGS_lexicalAttributeList::cEnumerator enumerator_45282 (var_cas_lexiqueComponentRoot.reader_mLexicalAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1111)), true) ;
    const GGS_lexicalAttributeList::cElement * operand_45282 = NULL ;
    while (((operand_45282 = enumerator_45282.nextObject ()))) {
      macroValidPointer (operand_45282) ;
      if ((var_cas_lexicalTypeMap.reader_hasKey (inLexique, operand_45282->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1112)) COMMA_SOURCE_FILE_AT_LINE (1112))).isBuiltAndTrue ()) {
        GGS_lexicalTypeEnum var_cas_lexicalType ;
        const GGS_lexicalTypeMap  temp_45453 = var_cas_lexicalTypeMap ;
        if (temp_45453.isBuilt ()) {
          temp_45453 (HERE)->method_searchKey (inLexique, operand_45282->mTypeName, var_cas_lexicalType COMMA_SOURCE_FILE_AT_LINE (1114)) ;
        }
        var_cas_lexiqueAnalysisContext.mLexicalAttributeMap.modifier_insertKey (inLexique, operand_45282->mName, var_cas_lexicalType COMMA_SOURCE_FILE_AT_LINE (1115)) ;
      }else{
        GGS_string var_cas_m ;
        var_cas_m = GGS_string ("") ;
        var_cas_m.appendCString ("the @") ;
        var_cas_m.dotAssign_operation (operand_45282->mTypeName) ;
        var_cas_m.appendCString (" type is not a valid lexical attribute type; are allowed:") ;
        GGS_bool var_cas_firstLoop ;
        var_cas_firstLoop = GGS_bool (true) ;
        {
          GGS_lexicalTypeMap::cEnumerator enumerator_45755 (var_cas_lexicalTypeMap, true) ;
          const GGS_lexicalTypeMap::cElement * operand_45755 = enumerator_45755.nextObject () ;
          if ((operand_45755 != NULL)) {
            bool _foreach_loop_45755 ;
            do{
              macroValidPointer (operand_45755) ;
              var_cas_m.appendCString (" @") ;
              var_cas_m.dotAssign_operation (operand_45755->mKey) ;
              operand_45755 = enumerator_45755.nextObject () ;
              _foreach_loop_45755 = ((operand_45755 != NULL)) ;
              if (_foreach_loop_45755) {
                var_cas_m.appendCString (",") ;
              }
            }while (_foreach_loop_45755) ;
          }
        }
        operand_45282->mTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_m COMMA_SOURCE_FILE_AT_LINE (1126)) ;
      }
    }
  }
  {
    GGS_terminalDeclarationList::cEnumerator enumerator_45965 (var_cas_lexiqueComponentRoot.reader_mTerminalDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (1129)), true) ;
    const GGS_terminalDeclarationList::cElement * operand_45965 = NULL ;
    while (((operand_45965 = enumerator_45965.nextObject ()))) {
      macroValidPointer (operand_45965) ;
      GGS_lexicalSentValueList  var_cas_argumentTypeList ;
      var_cas_argumentTypeList = GGS_lexicalSentValueList ::constructor_emptyList () ;
      {
        GGS_lstringlist::cEnumerator enumerator_46102 (operand_45965->mSentAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_46102 = NULL ;
        while (((operand_46102 = enumerator_46102.nextObject ()))) {
          macroValidPointer (operand_46102) ;
          GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
          const GGS_lexicalAttributeMap  temp_46241 = var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1133)) ;
          if (temp_46241.isBuilt ()) {
            temp_46241 (HERE)->method_searchKey (inLexique, operand_46102->mValue, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (1133)) ;
          }
          var_cas_argumentTypeList._addAssign_operation (operand_46102->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1134)), var_cas_attributeLexicalType) ;
        }
      }
      var_cas_lexiqueAnalysisContext.mTerminalMap.modifier_insertKey (inLexique, operand_45965->mName, var_cas_argumentTypeList COMMA_SOURCE_FILE_AT_LINE (1136)) ;
      var_cas_lexiqueAnalysisContext.mTerminalList._addAssign_operation (operand_45965->mName, var_cas_argumentTypeList, operand_45965->mSyntaxErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1137))) ;
    }
  }
  {
    GGS_lexicalListDeclarationList::cEnumerator enumerator_46585 (var_cas_lexiqueComponentRoot.reader_mLexicalListDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (1139)), true) ;
    const GGS_lexicalListDeclarationList::cElement * operand_46585 = NULL ;
    while (((operand_46585 = enumerator_46585.nextObject ()))) {
      macroValidPointer (operand_46585) ;
      GGS_lexicalSentValueList  var_cas_argumentTypeList ;
      var_cas_argumentTypeList = GGS_lexicalSentValueList ::constructor_emptyList () ;
      {
        GGS_lstringlist::cEnumerator enumerator_46725 (operand_46585->mSentAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_46725 = NULL ;
        while (((operand_46725 = enumerator_46725.nextObject ()))) {
          macroValidPointer (operand_46725) ;
          GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
          const GGS_lexicalAttributeMap  temp_46863 = var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1143)) ;
          if (temp_46863.isBuilt ()) {
            temp_46863 (HERE)->method_searchKey (inLexique, operand_46725->mValue, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (1143)) ;
          }
          var_cas_argumentTypeList._addAssign_operation (operand_46725->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1144)), var_cas_attributeLexicalType) ;
        }
      }
      GGS_lexicalExplicitTokenListMap  var_cas_lexicalTokenListMap ;
      var_cas_lexicalTokenListMap = GGS_lexicalExplicitTokenListMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_tokenSortedlist  var_cas_tokenSortedlist ;
      var_cas_tokenSortedlist = GGS_tokenSortedlist ::constructor_emptySortedList () ;
      {
        GGS_lexicalListEntryList::cEnumerator enumerator_47143 (operand_46585->mEntryList, true) ;
        const GGS_lexicalListEntryList::cElement * operand_47143 = NULL ;
        while (((operand_47143 = enumerator_47143.nextObject ()))) {
          macroValidPointer (operand_47143) ;
          GGS_string var_cas_syntaxErrorMessage ;
          var_cas_syntaxErrorMessage = operand_46585->mSyntaxErrorMessage.ggs_string ().reader_stringByReplacingStringByString (inLexique, GGS_string ("%K"), operand_47143->mTerminalSpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1149)) COMMA_SOURCE_FILE_AT_LINE (1149)) ;
          var_cas_lexiqueAnalysisContext.mTerminalList._addAssign_operation (operand_47143->mTerminalSpelling, var_cas_argumentTypeList, var_cas_syntaxErrorMessage) ;
          var_cas_lexiqueAnalysisContext.mTerminalMap.modifier_insertKey (inLexique, operand_47143->mTerminalSpelling, var_cas_argumentTypeList COMMA_SOURCE_FILE_AT_LINE (1151)) ;
          var_cas_lexicalTokenListMap.modifier_insertKey (inLexique, operand_47143->mEntrySpelling, operand_47143->mTerminalSpelling, operand_47143->mFeatureList COMMA_SOURCE_FILE_AT_LINE (1152)) ;
          var_cas_tokenSortedlist._addAssign_operation (operand_47143->mEntrySpelling.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1153)), operand_47143->mEntrySpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1153)), operand_47143->mTerminalSpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1153))) ;
          var_cas_lexiqueAnalysisContext.mUnicodeStringToGenerate._addAssign_operation (operand_47143->mEntrySpelling.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1154))) ;
        }
      }
      var_cas_lexiqueAnalysisContext.mLexicalTokenListMap.modifier_insertKey (inLexique, operand_46585->mName, var_cas_lexicalTokenListMap, var_cas_tokenSortedlist COMMA_SOURCE_FILE_AT_LINE (1156)) ;
    }
  }
  {
    GGS_lexicalMessageDeclarationList::cEnumerator enumerator_47966 (var_cas_lexiqueComponentRoot.reader_mLexicalMessageDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (1159)), true) ;
    const GGS_lexicalMessageDeclarationList::cElement * operand_47966 = NULL ;
    while (((operand_47966 = enumerator_47966.nextObject ()))) {
      macroValidPointer (operand_47966) ;
      var_cas_lexiqueAnalysisContext.mLexicalMessageMap.modifier_insertKey (inLexique, operand_47966->mMessageName, operand_47966->mMessageValue, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1160)) ;
    }
  }
  {
    GGS_lexicalRuleList::cEnumerator enumerator_48200 (var_cas_lexiqueComponentRoot.reader_mLexicalRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (1163)), true) ;
    const GGS_lexicalRuleList::cElement * operand_48200 = NULL ;
    while (((operand_48200 = enumerator_48200.nextObject ()))) {
      macroValidPointer (operand_48200) ;
      const GGS_abstractLexicalRule  temp_48276 = operand_48200->mLexicalRule ;
      if (temp_48276.isBuilt ()) {
        typeCategoryMethod__abstractLexicalRule__checkLexicalRule method = findCategoryMethod__abstractLexicalRule__checkLexicalRule (temp_48276.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_48276 (HERE), var_cas_lexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (1164)) ;
        }
      }
    }
  }
  {
    GGS_lexicalMessageMap::cEnumerator enumerator_48398 (var_cas_lexiqueAnalysisContext.reader_mLexicalMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1167)), true) ;
    const GGS_lexicalMessageMap::cElement * operand_48398 = NULL ;
    while (((operand_48398 = enumerator_48398.nextObject ()))) {
      macroValidPointer (operand_48398) ;
      if (((operand_48398->mInfo.mMessageIsUsed).operator_not ()).isBuiltAndTrue ()) {
        operand_48398->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("unused message") COMMA_SOURCE_FILE_AT_LINE (1169)) ;
      }
    }
  }
  GGS_string var_cas_lexiqueClassName ;
  var_cas_lexiqueClassName = var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1173)) ;
  if (((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string (".h")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_headerZone2 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueAnalysisContext), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_headerZone3 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueAnalysisContext.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (1188)), var_cas_lexiqueComponentRoot.reader_mLexicalListDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (1189)), var_cas_lexiqueAnalysisContext) COMMA_SOURCE_FILE_AT_LINE (1176)) ;
  }
  if (((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_lexiqueClassName).operator_concat (GGS_string (".cpp")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_lexiqueGenerationTemplates_implementationZone2 (inLexique, var_cas_lexiqueClassName, var_cas_lexiqueAnalysisContext.reader_mLexicalAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1203)), var_cas_lexiqueAnalysisContext.reader_mLexicalMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1204)), var_cas_lexiqueAnalysisContext.reader_mTerminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (1205)), var_cas_lexiqueAnalysisContext.reader_mLexicalTokenListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1206)), var_cas_lexiqueAnalysisContext.reader_mUnicodeStringToGenerate (inLexique COMMA_SOURCE_FILE_AT_LINE (1207)), var_cas_lexiqueComponentRoot.reader_mLexicalRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (1208)), var_cas_lexiqueAnalysisContext), GGS_string ("\n"
      "\n"), GGS_string ("\n"
      "\n") COMMA_SOURCE_FILE_AT_LINE (1196)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileLexiqueComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_lexiqueCompilation (void) {
 enterCategoryReader__lexicalExpression__generateConditionCode ((typeCategoryReader__lexicalExpression__generateConditionCode) category_reader__lexicalOrExpression__generateConditionCode, gClassInfoFor__lexicalOrExpression.slotID ()) ;
 enterCategoryReader__lexicalExpression__generateConditionCode ((typeCategoryReader__lexicalExpression__generateConditionCode) category_reader__lexicalCharacterIntervalMatch__generateConditionCode, gClassInfoFor__lexicalCharacterIntervalMatch.slotID ()) ;
 enterCategoryReader__lexicalExpression__generateConditionCode ((typeCategoryReader__lexicalExpression__generateConditionCode) category_reader__lexicalStringMatch__generateConditionCode, gClassInfoFor__lexicalStringMatch.slotID ()) ;
 enterCategoryReader__lexicalExpression__generateConditionCode ((typeCategoryReader__lexicalExpression__generateConditionCode) category_reader__lexicalStringNotMatch__generateConditionCode, gClassInfoFor__lexicalStringNotMatch.slotID ()) ;
 enterCategoryReader__lexicalExpression__generateConditionCode ((typeCategoryReader__lexicalExpression__generateConditionCode) category_reader__lexicalCharacterMatch__generateConditionCode, gClassInfoFor__lexicalCharacterMatch.slotID ()) ;
 enterCategoryReader__lexicalExpression__generateConditionCode ((typeCategoryReader__lexicalExpression__generateConditionCode) category_reader__lexicalCharacterSetMatch__generateConditionCode, gClassInfoFor__lexicalCharacterSetMatch.slotID ()) ;
 enterCategoryReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument ((typeCategoryReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument) category_reader__lexicalAttributeInputArgument__generateRoutineOrFunctionArgument, gClassInfoFor__lexicalAttributeInputArgument.slotID ()) ;
 enterCategoryReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument ((typeCategoryReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument) category_reader__lexicalCharacterInputArgument__generateRoutineOrFunctionArgument, gClassInfoFor__lexicalCharacterInputArgument.slotID ()) ;
 enterCategoryReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument ((typeCategoryReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument) category_reader__lexicalUnsignedInputArgument__generateRoutineOrFunctionArgument, gClassInfoFor__lexicalUnsignedInputArgument.slotID ()) ;
 enterCategoryReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument ((typeCategoryReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument) category_reader__lexicalCurrentCharacterInputArgument__generateRoutineOrFunctionArgument, gClassInfoFor__lexicalCurrentCharacterInputArgument.slotID ()) ;
 enterCategoryReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument ((typeCategoryReader__lexicalRoutineOrFunctionFormalInputArgument__generateRoutineOrFunctionArgument) category_reader__lexicalFunctionInputArgument__generateRoutineOrFunctionArgument, gClassInfoFor__lexicalFunctionInputArgument.slotID ()) ;
 enterCategoryReader__abstractLexicalRoutineActualArgument__generateRoutineArgument ((typeCategoryReader__abstractLexicalRoutineActualArgument__generateRoutineArgument) category_reader__lexicalAttributeInputOutputArgument__generateRoutineArgument, gClassInfoFor__lexicalAttributeInputOutputArgument.slotID ()) ;
 enterCategoryReader__abstractLexicalRoutineActualArgument__generateRoutineArgument ((typeCategoryReader__abstractLexicalRoutineActualArgument__generateRoutineArgument) category_reader__lexicalFormalInputArgument__generateRoutineArgument, gClassInfoFor__lexicalFormalInputArgument.slotID ()) ;
 enterCategoryReader__lexicalSendDefaultAction__generateDefaultSendCode ((typeCategoryReader__lexicalSendDefaultAction__generateDefaultSendCode) category_reader__lexicalSendTerminalByDefault__generateDefaultSendCode, gClassInfoFor__lexicalSendTerminalByDefault.slotID ()) ;
 enterCategoryReader__lexicalSendDefaultAction__generateDefaultSendCode ((typeCategoryReader__lexicalSendDefaultAction__generateDefaultSendCode) category_reader__lexicalErrorByDefault__generateDefaultSendCode, gClassInfoFor__lexicalErrorByDefault.slotID ()) ;
 enterCategoryReader__lexicalInstruction__generateInstructionCode ((typeCategoryReader__lexicalInstruction__generateInstructionCode) category_reader__lexicalStructuredSendInstruction__generateInstructionCode, gClassInfoFor__lexicalStructuredSendInstruction.slotID ()) ;
 enterCategoryReader__lexicalInstruction__generateInstructionCode ((typeCategoryReader__lexicalInstruction__generateInstructionCode) category_reader__lexicalSimpleSendInstruction__generateInstructionCode, gClassInfoFor__lexicalSimpleSendInstruction.slotID ()) ;
 enterCategoryReader__lexicalInstruction__generateInstructionCode ((typeCategoryReader__lexicalInstruction__generateInstructionCode) category_reader__lexicalRepeatInstruction__generateInstructionCode, gClassInfoFor__lexicalRepeatInstruction.slotID ()) ;
 enterCategoryReader__lexicalInstruction__generateInstructionCode ((typeCategoryReader__lexicalInstruction__generateInstructionCode) category_reader__lexicalSelectInstruction__generateInstructionCode, gClassInfoFor__lexicalSelectInstruction.slotID ()) ;
 enterCategoryReader__lexicalInstruction__generateInstructionCode ((typeCategoryReader__lexicalInstruction__generateInstructionCode) category_reader__lexicalRoutineInstruction__generateInstructionCode, gClassInfoFor__lexicalRoutineInstruction.slotID ()) ;
 enterCategoryReader__lexicalInstruction__generateInstructionCode ((typeCategoryReader__lexicalInstruction__generateInstructionCode) category_reader__lexicalDropInstruction__generateInstructionCode, gClassInfoFor__lexicalDropInstruction.slotID ()) ;
 enterCategoryReader__lexicalInstruction__generateInstructionCode ((typeCategoryReader__lexicalInstruction__generateInstructionCode) category_reader__lexicalErrorInstruction__generateInstructionCode, gClassInfoFor__lexicalErrorInstruction.slotID ()) ;
 enterCategoryReader__lexicalInstruction__generateInstructionCode ((typeCategoryReader__lexicalInstruction__generateInstructionCode) category_reader__lexicalWarningInstruction__generateInstructionCode, gClassInfoFor__lexicalWarningInstruction.slotID ()) ;
 enterCategoryReader__lexicalInstruction__generateInstructionCode ((typeCategoryReader__lexicalInstruction__generateInstructionCode) category_reader__lexicalTagInstruction__generateInstructionCode, gClassInfoFor__lexicalTagInstruction.slotID ()) ;
 enterCategoryReader__lexicalInstruction__generateInstructionCode ((typeCategoryReader__lexicalInstruction__generateInstructionCode) category_reader__lexicalRewindInstruction__generateInstructionCode, gClassInfoFor__lexicalRewindInstruction.slotID ()) ;
 enterCategoryReader__lexicalInstruction__generateInstructionCode ((typeCategoryReader__lexicalInstruction__generateInstructionCode) category_reader__lexicalLogInstruction__generateInstructionCode, gClassInfoFor__lexicalLogInstruction.slotID ()) ;
 enterCategoryReader__abstractLexicalRule__generateCode ((typeCategoryReader__abstractLexicalRule__generateCode) category_reader__lexicalImplicitRule__generateCode, gClassInfoFor__lexicalImplicitRule.slotID ()) ;
 enterCategoryReader__abstractLexicalRule__generateCode ((typeCategoryReader__abstractLexicalRule__generateCode) category_reader__lexicalExplicitRule__generateCode, gClassInfoFor__lexicalExplicitRule.slotID ()) ;
 enterCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction ((typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction) category_method__lexicalSendTerminalByDefault__checkLexicalDefaultAction, gClassInfoFor__lexicalSendTerminalByDefault.slotID ()) ;
 enterCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction ((typeCategoryMethod__lexicalSendDefaultAction__checkLexicalDefaultAction) category_method__lexicalErrorByDefault__checkLexicalDefaultAction, gClassInfoFor__lexicalErrorByDefault.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalOrExpression__checkLexicalExpression, gClassInfoFor__lexicalOrExpression.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalCharacterMatch__checkLexicalExpression, gClassInfoFor__lexicalCharacterMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalCharacterSetMatch__checkLexicalExpression, gClassInfoFor__lexicalCharacterSetMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalCharacterIntervalMatch__checkLexicalExpression, gClassInfoFor__lexicalCharacterIntervalMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalStringMatch__checkLexicalExpression, gClassInfoFor__lexicalStringMatch.slotID ()) ;
 enterCategoryMethod__lexicalExpression__checkLexicalExpression ((typeCategoryMethod__lexicalExpression__checkLexicalExpression) category_method__lexicalStringNotMatch__checkLexicalExpression, gClassInfoFor__lexicalStringNotMatch.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalAttributeInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalAttributeInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalCharacterInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalCharacterInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalUnsignedInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalUnsignedInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalCurrentCharacterInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalCurrentCharacterInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalFunctionCallArgument) category_method__lexicalFunctionInputArgument__checkLexicalFunctionCallArgument, gClassInfoFor__lexicalFunctionInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalAttributeInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalAttributeInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalCharacterInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalCharacterInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalUnsignedInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalUnsignedInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalCurrentCharacterInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalCurrentCharacterInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__lexicalRoutineOrFunctionFormalInputArgument__checkLexicalRoutineCallArgument) category_method__lexicalFunctionInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalFunctionInputArgument.slotID ()) ;
 enterCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument) category_method__lexicalAttributeInputOutputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalAttributeInputOutputArgument.slotID ()) ;
 enterCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument ((typeCategoryMethod__abstractLexicalRoutineActualArgument__checkLexicalRoutineCallArgument) category_method__lexicalFormalInputArgument__checkLexicalRoutineCallArgument, gClassInfoFor__lexicalFormalInputArgument.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalStructuredSendInstruction__checkLexicalInstruction, gClassInfoFor__lexicalStructuredSendInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalSimpleSendInstruction__checkLexicalInstruction, gClassInfoFor__lexicalSimpleSendInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalRepeatInstruction__checkLexicalInstruction, gClassInfoFor__lexicalRepeatInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalSelectInstruction__checkLexicalInstruction, gClassInfoFor__lexicalSelectInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalRoutineInstruction__checkLexicalInstruction, gClassInfoFor__lexicalRoutineInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalLogInstruction__checkLexicalInstruction, gClassInfoFor__lexicalLogInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalRewindInstruction__checkLexicalInstruction, gClassInfoFor__lexicalRewindInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalDropInstruction__checkLexicalInstruction, gClassInfoFor__lexicalDropInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalTagInstruction__checkLexicalInstruction, gClassInfoFor__lexicalTagInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalErrorInstruction__checkLexicalInstruction, gClassInfoFor__lexicalErrorInstruction.slotID ()) ;
 enterCategoryMethod__lexicalInstruction__checkLexicalInstruction ((typeCategoryMethod__lexicalInstruction__checkLexicalInstruction) category_method__lexicalWarningInstruction__checkLexicalInstruction, gClassInfoFor__lexicalWarningInstruction.slotID ()) ;
 enterCategoryMethod__abstractLexicalRule__checkLexicalRule ((typeCategoryMethod__abstractLexicalRule__checkLexicalRule) category_method__lexicalImplicitRule__checkLexicalRule, gClassInfoFor__lexicalImplicitRule.slotID ()) ;
 enterCategoryMethod__abstractLexicalRule__checkLexicalRule ((typeCategoryMethod__abstractLexicalRule__checkLexicalRule) category_method__lexicalExplicitRule__checkLexicalRule, gClassInfoFor__lexicalExplicitRule.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_lexiqueCompilation (prologueRoutineFor_lexiqueCompilation,
                                   NULL) ;

//---------------------------------------------------------------------------*

