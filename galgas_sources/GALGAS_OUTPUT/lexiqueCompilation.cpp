//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'lexiqueCompilation.cpp'                        *
//                        Generated by version 2.5.5                         *
//                       march 13th, 2014, at 12h5'3"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "lexiqueCompilation.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//-----------------------------------------------------------------------------*

#include "lexiqueLL1grammar.h"
#include "galgas_cli_options.h"

//-----------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "lexiqueCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//-----------------------------------------------------------------------------*
//                                                                             *
//                 Filewrapper 'lexiqueGenerationTemplates'                  *
//                                                                             *
//-----------------------------------------------------------------------------*

extern const cDirectoryWrapper gWrapperDirectory_0_lexiqueGenerationTemplates ;

//-----------------------------------------------------------------------------*
//                                                                             *
//     Filewrapper template 'lexiqueGenerationTemplates newHeaderZone2'      *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_newHeaderZone_32_ (C_Compiler * inCompiler,
                                                                                const GALGAS_string & in_LEXIQUE_5F_IDENTIFIER,
                                                                                const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT,
                                                                                const GALGAS_lexiqueComponentAST & in_LEXIQUE_5F_COMPONENT_5F_ROOT
                                                                                COMMA_LOCATION_ARGS) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//     Filewrapper template 'lexiqueGenerationTemplates newHeaderZone3'      *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_newHeaderZone_33_ (C_Compiler * inCompiler,
                                                                                const GALGAS_string & in_LEXIQUE_5F_IDENTIFIER,
                                                                                const GALGAS_lexicalListDeclarationListAST & in_DELIMITOR_5F_LIST_5F_LIST,
                                                                                const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT,
                                                                                const GALGAS_indexingListAST & in_INDEXING_5F_LIST
                                                                                COMMA_LOCATION_ARGS) ;

//-----------------------------------------------------------------------------*
//                                                                             *
// Filewrapper template 'lexiqueGenerationTemplates newImplementationZone2'  *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_newImplementationZone_32_ (C_Compiler * inCompiler,
                                                                                        const GALGAS_string & in_LEXIQUE_5F_IDENTIFIER,
                                                                                        const GALGAS_lexicalAttributeMap & in_LEXICAL_5F_ATTRIBUTE_5F_MAP,
                                                                                        const GALGAS_lexicalMessageMap & in_LEXICAL_5F_MESSAGE_5F_MAP,
                                                                                        const GALGAS_terminalList & in_TERMINAL_5F_LIST,
                                                                                        const GALGAS_lexicalExplicitTokenListMapMap & in_LEXICAL_5F_TOKEN_5F_LIST_5F_MAP,
                                                                                        const GALGAS_stringset & in_STRINGS_5F_IN_5F_EXPLICIT_5F_RULES,
                                                                                        const GALGAS_lexicalRuleListAST & in_LEXICAL_5F_RULE_5F_LIST,
                                                                                        const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT,
                                                                                        const GALGAS_lexiqueComponentAST & in_LEXIQUE_5F_COMPONENT_5F_ROOT
                                                                                        COMMA_LOCATION_ARGS) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//    Filewrapper template 'lexiqueGenerationTemplates cocoaHeaderZone2'     *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_cocoaHeaderZone_32_ (C_Compiler * inCompiler,
                                                                                  const GALGAS_string & in_LEXIQUE_5F_CLASS_5F_NAME,
                                                                                  const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT
                                                                                  COMMA_LOCATION_ARGS) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//    Filewrapper template 'lexiqueGenerationTemplates cocoaHeaderZone3'     *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_cocoaHeaderZone_33_ (C_Compiler * inCompiler,
                                                                                  const GALGAS_string & in_LEXIQUE_5F_CLASS_5F_NAME,
                                                                                  const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT
                                                                                  COMMA_LOCATION_ARGS) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Filewrapper template 'lexiqueGenerationTemplates cocoaImplementationZone2' *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_cocoaImplementationZone_32_ (C_Compiler * inCompiler,
                                                                                          const GALGAS_string & in_LEXIQUE_5F_CLASS_5F_NAME,
                                                                                          const GALGAS_lexicalAttributeMap & in_LEXICAL_5F_ATTRIBUTE_5F_MAP,
                                                                                          const GALGAS_lexicalMessageMap & in_LEXICAL_5F_MESSAGE_5F_MAP,
                                                                                          const GALGAS_terminalList & in_TERMINAL_5F_LIST,
                                                                                          const GALGAS_stringset & in_STRINGS_5F_IN_5F_EXPLICIT_5F_RULES,
                                                                                          const GALGAS_lexicalRuleListAST & in_LEXICAL_5F_RULE_5F_LIST,
                                                                                          const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT,
                                                                                          const GALGAS_lexiqueComponentAST & in_LEXIQUE_5F_COMPONENT_5F_ROOT
                                                                                          COMMA_LOCATION_ARGS) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//                 Filewrapper 'lexiqueGenerationTemplates'                  *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_lexiqueGenerationTemplates_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_lexiqueGenerationTemplates_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_lexiqueGenerationTemplates (
  "",
  0,
  gWrapperAllFiles_lexiqueGenerationTemplates_0,
  0,
  gWrapperAllDirectories_lexiqueGenerationTemplates_0
) ;


//-----------------------------------------------------------------------------*
//                                                                             *
//     Filewrapper template 'lexiqueGenerationTemplates newHeaderZone2'      *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_newHeaderZone_32_ (C_Compiler * inCompiler,
                                                                                const GALGAS_string & in_LEXIQUE_5F_IDENTIFIER,
                                                                                const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT,
                                                                                const GALGAS_lexiqueComponentAST & in_LEXIQUE_5F_COMPONENT_5F_ROOT
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "\n"
    "#ifndef " ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "_CLASS_DEFINED\n"
    "#define " ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "_CLASS_DEFINED\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "#include \"galgas2/C_Lexique.h\"\n"
    "#include \"galgas2/predefined-types.h\"\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                    E X T E R N    R O U T I N E S                         *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_711_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalRoutineMessageMap (SOURCE_FILE_AT_LINE (16)).isValid ()) {
    cEnumerator_lexicalRoutineMap enumerator_711 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalRoutineMessageMap (SOURCE_FILE_AT_LINE (16)), kEnumeration_up) ;
    while (enumerator_711.hasCurrentObject ()) {
      const enumGalgasBool test_0 = enumerator_711.current_mIsExtern (HERE).boolEnum () ;
      if (kBoolTrue == test_0) {
        result << "\n"
          "void scanner_routine_" ;
        result << enumerator_711.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (18)).stringValue () ;
        result << " (C_Lexique & inLexique" ;
        GALGAS_uint index_855_ (0) ;
        if (enumerator_711.current_mLexicalRoutineFormalArgumentList (HERE).isValid ()) {
          cEnumerator_lexicalRoutineFormalArgumentList enumerator_855 (enumerator_711.current_mLexicalRoutineFormalArgumentList (HERE), kEnumeration_up) ;
          while (enumerator_855.hasCurrentObject ()) {
            result << ",\n"
              "                " ;
            result << categoryReader_cppConstInFormalArgument (enumerator_855.current_mLexicalFormalArgumentMode (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (20)).stringValue () ;
            result << categoryReader_cppTypeName (enumerator_855.current_mLexicalFormalArgumentType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (21)).stringValue () ;
            result << categoryReader_cppReferenceInFormalArgument (enumerator_855.current_mLexicalFormalArgumentMode (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (22)).stringValue () ;
            result << " " ;
            result << enumerator_855.current_mArgumentNameForComment (HERE).stringValue () ;
            index_855_.increment () ;
            enumerator_855.gotoNextObject () ;
          }
        }
        GALGAS_uint index_1208_ (0) ;
        if (enumerator_711.current_mErrorMessageList (HERE).isValid ()) {
          cEnumerator_stringlist enumerator_1208 (enumerator_711.current_mErrorMessageList (HERE), kEnumeration_up) ;
          while (enumerator_1208.hasCurrentObject ()) {
            result << ",\n"
              "                const char * " ;
            result << enumerator_1208.current_mValue (HERE).stringValue () ;
            index_1208_.increment () ;
            enumerator_1208.gotoNextObject () ;
          }
        }
        result << ") ;\n" ;
      }else if (kBoolFalse == test_0) {
      }
      index_711_.increment () ;
      enumerator_711.gotoNextObject () ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                    E X T E R N    F U N C T I O N S                       *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_1782_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalFunctionMap (SOURCE_FILE_AT_LINE (38)).isValid ()) {
    cEnumerator_lexicalFunctionMap enumerator_1782 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalFunctionMap (SOURCE_FILE_AT_LINE (38)), kEnumeration_up) ;
    while (enumerator_1782.hasCurrentObject ()) {
      const enumGalgasBool test_1 = enumerator_1782.current_mIsExtern (HERE).boolEnum () ;
      if (kBoolTrue == test_1) {
        result << "\n" ;
        result << categoryReader_cppTypeName (enumerator_1782.current_mReturnedLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (40)).stringValue () ;
        result << " scanner_function_" ;
        result << enumerator_1782.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (40)).stringValue () ;
        result << " (C_Lexique & inLexique" ;
        GALGAS_uint index_1943_ (0) ;
        if (enumerator_1782.current_mLexicalTypeList (HERE).isValid ()) {
          cEnumerator_lexicalFunctionFormalArgumentList enumerator_1943 (enumerator_1782.current_mLexicalTypeList (HERE), kEnumeration_up) ;
          while (enumerator_1943.hasCurrentObject ()) {
            result << ",\n"
              "                const " ;
            result << categoryReader_cppTypeName (enumerator_1943.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (42)).stringValue () ;
            result << " " ;
            result << enumerator_1943.current_mArgumentNameForComment (HERE).stringValue () ;
            index_1943_.increment () ;
            enumerator_1943.gotoNextObject () ;
          }
        }
        result << ") ;\n" ;
      }else if (kBoolFalse == test_1) {
      }
      index_1782_.increment () ;
      enumerator_1782.gotoNextObject () ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                       T O K E N    C L A S S                              *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "class cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " : public cToken {\n" ;
  GALGAS_uint index_2615_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (56)).isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_2615 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (56)), kEnumeration_up) ;
    while (enumerator_2615.hasCurrentObject ()) {
      result << "  public : " ;
      result << categoryReader_cppTypeName (enumerator_2615.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (57)).stringValue () ;
      result << " mLexicalAttribute_" ;
      result << enumerator_2615.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (57)).stringValue () ;
      result << " ;\n" ;
      index_2615_.increment () ;
      enumerator_2615.gotoNextObject () ;
    }
  }
  result << "\n"
    "  public : cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (void) ;\n"
    "} ;\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                     S C A N N E R    C L A S S                            *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "class C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " : public C_Lexique {\n"
    "//--- Constructors\n"
    "  public : C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (C_Compiler * inCallerCompiler,\n"
    "                       const C_String & inDependencyFileExtension,\n"
    "                       const C_String & inDependencyFilePath,\n"
    "                       const C_String & inSourceFileName\n"
    "                       COMMA_LOCATION_ARGS) ;\n"
    "\n"
    "  public : C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (C_Compiler * inCallerCompiler,\n"
    "                       const C_String & inSourceString,\n"
    "                       const C_String & inStringForError\n"
    "                       COMMA_LOCATION_ARGS) ;\n"
    "\n"
    "//--- Instrospection\n"
    "  public : static GALGAS_stringlist symbols (LOCATION_ARGS) ;\n"
    "\n"
    "//--- Declaring a protected virtual destructor enables the compiler to raise\n"
    "//    an error if a direct delete is performed; only the static method\n"
    "//    C_SharedObject::detachPointer may invoke delete.\n"
    "  #ifndef DO_NOT_GENERATE_CHECKINGS\n"
    "    protected : virtual ~ C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (void) {}\n"
    "  #endif\n" ;
  const enumGalgasBool test_2 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (91)).reader_length (SOURCE_FILE_AT_LINE (91)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_2) {
    result << "\n"
      "//--- Scanner mode for template scanner\n"
      "  private : PMSInt32 mMatchedTemplateDelimiterIndex ;\n" ;
  }else if (kBoolFalse == test_2) {
  }
  result << "\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//     Filewrapper template 'lexiqueGenerationTemplates newHeaderZone3'      *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_newHeaderZone_33_ (C_Compiler * inCompiler,
                                                                                const GALGAS_string & in_LEXIQUE_5F_IDENTIFIER,
                                                                                const GALGAS_lexicalListDeclarationListAST & in_DELIMITOR_5F_LIST_5F_LIST,
                                                                                const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT,
                                                                                const GALGAS_indexingListAST & in_INDEXING_5F_LIST
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "\n"
    "//--- Terminal symbols enumeration\n"
    "  public : enum {kToken_" ;
  GALGAS_uint index_116_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (4)).isValid ()) {
    cEnumerator_terminalList enumerator_116 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (4)), kEnumeration_up) ;
    while (enumerator_116.hasCurrentObject ()) {
      result << ",\n"
        "   kToken_" ;
      result << enumerator_116.current_mTerminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (5)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (5)).stringValue () ;
      index_116_.increment () ;
      enumerator_116.gotoNextObject () ;
    }
  }
  result << "} ;\n" ;
  GALGAS_uint index_247_ (0) ;
  if (in_DELIMITOR_5F_LIST_5F_LIST.isValid ()) {
    cEnumerator_lexicalListDeclarationListAST enumerator_247 (in_DELIMITOR_5F_LIST_5F_LIST, kEnumeration_up) ;
    while (enumerator_247.hasCurrentObject ()) {
      result << "\n"
        "//--- Key words table '" ;
      result << enumerator_247.current_mName (HERE).reader_string (SOURCE_FILE_AT_LINE (10)).stringValue () ;
      result << "'\n"
        "  public : static PMSInt16 search_into_" ;
      result << enumerator_247.current_mName (HERE).reader_string (SOURCE_FILE_AT_LINE (11)).stringValue () ;
      result << " (const C_String & inSearchedString) ;\n" ;
      index_247_.increment () ;
      enumerator_247.gotoNextObject () ;
    }
  }
  result << "  \n"
    "\n"
    "//--- Assign from attribute\n" ;
  GALGAS_uint index_512_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (17)).isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_512 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (17)), kEnumeration_up) ;
    while (enumerator_512.hasCurrentObject ()) {
      result << "  public : GALGAS_l" ;
      result << categoryReader_lexicalTypeBaseName (enumerator_512.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (18)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (18)).stringValue () ;
      result << " synthetizedAttribute_" ;
      result << enumerator_512.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (18)).stringValue () ;
      result << " (void) const ;\n" ;
      index_512_.increment () ;
      enumerator_512.gotoNextObject () ;
    }
  }
  result << "\n"
    "\n"
    "//--- Attribute access\n" ;
  GALGAS_uint index_778_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (24)).isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_778 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (24)), kEnumeration_up) ;
    while (enumerator_778.hasCurrentObject ()) {
      result << "  public : " ;
      result << categoryReader_cppTypeName (enumerator_778.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (25)).stringValue () ;
      result << " attributeValue_" ;
      result << enumerator_778.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (25)).stringValue () ;
      result << " (void) const ;\n" ;
      index_778_.increment () ;
      enumerator_778.gotoNextObject () ;
    }
  }
  result << "\n"
    "\n"
    "//--- Indexing keys\n" ;
  GALGAS_uint index_989_ (0) ;
  if (in_INDEXING_5F_LIST.isValid ()) {
    cEnumerator_indexingListAST enumerator_989 (in_INDEXING_5F_LIST, kEnumeration_up) ;
    const bool nonEmpty_enumerator_989 = enumerator_989.hasCurrentObject () ;
    if (nonEmpty_enumerator_989) {
      result << "  public : enum {" ;
    }
    while (enumerator_989.hasCurrentObject ()) {
      result << "\n"
        "    kIndexing_" ;
      result << enumerator_989.current_mIndexName (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (33)).stringValue () ;
      if (enumerator_989.hasNextObject ()) {
        result << "," ;
      }
      index_989_.increment () ;
      enumerator_989.gotoNextObject () ;
    }
    if (nonEmpty_enumerator_989) {
      result << "\n"
        "  } ;\n" ;
    }
  }
  result << "\n"
    "//--- Indexing directory\n"
    "  protected : virtual C_String indexingDirectory (void) const ;\n"
    "\n"
    "//--- Parse lexical token\n"
    "  protected : virtual bool parseLexicalToken (void) ;\n"
    "\n"
    "//--- Append terminal message\n"
    "  protected : virtual void appendTerminalMessageToSyntaxErrorMessage (const PMSInt16 numeroTerminal,\n"
    "                                                              C_String & messageErreur) ;\n"
    "\n"
    "//--- Get terminal count\n"
    "  public : virtual PMSInt16 terminalVocabularyCount (void) const { return " ;
  result << in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (49)).reader_length (SOURCE_FILE_AT_LINE (49)).reader_string (SOURCE_FILE_AT_LINE (49)).stringValue () ;
  result << " ; }\n"
    "\n"
    "//--- Get Token String\n"
    "  public : virtual C_String getCurrentTokenString (const cToken * inTokenPtr) const ;\n"
    "\n"
    "//--- Enter Token\n"
    "  protected : void enterToken (const cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " & inToken) ;\n"
    "} ;\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "#endif\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
// Filewrapper template 'lexiqueGenerationTemplates newImplementationZone2'  *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_newImplementationZone_32_ (C_Compiler * inCompiler,
                                                                                        const GALGAS_string & in_LEXIQUE_5F_IDENTIFIER,
                                                                                        const GALGAS_lexicalAttributeMap & in_LEXICAL_5F_ATTRIBUTE_5F_MAP,
                                                                                        const GALGAS_lexicalMessageMap & in_LEXICAL_5F_MESSAGE_5F_MAP,
                                                                                        const GALGAS_terminalList & in_TERMINAL_5F_LIST,
                                                                                        const GALGAS_lexicalExplicitTokenListMapMap & in_LEXICAL_5F_TOKEN_5F_LIST_5F_MAP,
                                                                                        const GALGAS_stringset & in_STRINGS_5F_IN_5F_EXPLICIT_5F_RULES,
                                                                                        const GALGAS_lexicalRuleListAST & in_LEXICAL_5F_RULE_5F_LIST,
                                                                                        const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT,
                                                                                        const GALGAS_lexiqueComponentAST & in_LEXIQUE_5F_COMPONENT_5F_ROOT
                                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "#include <ctype.h>\n"
    "#include <string.h>\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "#include \"utilities/MF_MemoryControl.h\"\n"
    "#include \"strings/unicode_character_cpp.h\"\n"
    "#include \"galgas2/scanner_actions.h\"\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "#include \"" ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexiqueComponentName (SOURCE_FILE_AT_LINE (12)).reader_string (SOURCE_FILE_AT_LINE (12)).stringValue () ;
  result << ".h\"\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "#ifndef DO_NOT_GENERATE_CHECKINGS\n"
    "  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFilePath ().cString (HERE), lineNumber ()\n"
    "  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE\n"
    "#else\n"
    "  #define LINE_AND_SOURCE_FILE\n"
    "  #define COMMA_LINE_AND_SOURCE_FILE\n"
    "#endif\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                               Constructors                                  *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (void)" ;
  GALGAS_uint index_1280_ (0) ;
  if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_1280 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
    const bool nonEmpty_enumerator_1280 = enumerator_1280.hasCurrentObject () ;
    if (nonEmpty_enumerator_1280) {
      result << " :\n" ;
    }
    while (enumerator_1280.hasCurrentObject ()) {
      result << "mLexicalAttribute_" ;
      result << enumerator_1280.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (33)).stringValue () ;
      result << " ()" ;
      if (enumerator_1280.hasNextObject ()) {
        result << ",\n" ;
      }
      index_1280_.increment () ;
      enumerator_1280.gotoNextObject () ;
    }
  }
  result << " {\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (C_Compiler * inCallerCompiler,\n"
    "                const C_String & inDependencyFileExtension,\n"
    "                const C_String & inDependencyFilePath,\n"
    "                const C_String & inSourceFileName\n"
    "                COMMA_LOCATION_ARGS) :\n"
    "C_Lexique (inCallerCompiler, inDependencyFileExtension, inDependencyFilePath, inSourceFileName COMMA_THERE)" ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (47)).reader_length (SOURCE_FILE_AT_LINE (47)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    result << ",\n"
      "mMatchedTemplateDelimiterIndex (-1)" ;
  }else if (kBoolFalse == test_0) {
  }
  result << " {\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " (C_Compiler * inCallerCompiler,\n"
    "                const C_String & inSourceString,\n"
    "                const C_String & inStringForError\n"
    "                COMMA_LOCATION_ARGS) :\n"
    "C_Lexique (inCallerCompiler, inSourceString, inStringForError COMMA_THERE)" ;
  const enumGalgasBool test_1 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (60)).reader_length (SOURCE_FILE_AT_LINE (60)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_1) {
    result << ",\n"
      "mMatchedTemplateDelimiterIndex (-1)" ;
  }else if (kBoolFalse == test_1) {
  }
  result << " {\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                 I N D E X I N G    D I R E C T O R Y                        *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "C_String C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::indexingDirectory (void) const {\n"
    "  return " ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mIndexingDirectory (SOURCE_FILE_AT_LINE (73)).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE_AT_LINE (73)).stringValue () ;
  result << " ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                        Lexical error message list                           *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_3527_ (0) ;
  if (in_LEXICAL_5F_MESSAGE_5F_MAP.isValid ()) {
    cEnumerator_lexicalMessageMap enumerator_3527 (in_LEXICAL_5F_MESSAGE_5F_MAP, kEnumeration_up) ;
    while (enumerator_3527.hasCurrentObject ()) {
      result << "\n"
        "static const utf32 gLexicalMessage_" ;
      result << enumerator_3527.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (83)).stringValue () ;
      result << " [] = " ;
      result << enumerator_3527.current_mLexicalMessage (HERE).mAttribute_string.reader_utf_33__32_Representation (SOURCE_FILE_AT_LINE (83)).stringValue () ;
      result << " ;\n" ;
      index_3527_.increment () ;
      enumerator_3527.gotoNextObject () ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//          Syntax error messages, for every terminal symbol                   *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_4087_ (0) ;
  if (in_TERMINAL_5F_LIST.isValid ()) {
    cEnumerator_terminalList enumerator_4087 (in_TERMINAL_5F_LIST, kEnumeration_up) ;
    while (enumerator_4087.hasCurrentObject ()) {
      result << "\n"
        "//--- Syntax error message for terminal '$" ;
      result << enumerator_4087.current_mTerminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (93)).stringValue () ;
      result << "$' :\n"
        "static const utf32 gSyntaxErrorMessage_" ;
      result << enumerator_4087.current_mTerminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (94)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (94)).stringValue () ;
      result << " [] = " ;
      result << enumerator_4087.current_mSyntaxErrorMessage (HERE).reader_utf_33__32_Representation (SOURCE_FILE_AT_LINE (94)).stringValue () ;
      result << " ;\n" ;
      index_4087_.increment () ;
      enumerator_4087.gotoNextObject () ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                appendTerminalMessageToSyntaxErrorMessage                    *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "void C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::appendTerminalMessageToSyntaxErrorMessage (const PMSInt16 inTerminalIndex,\n"
    "                                           C_String & outSyntaxErrorMessage) {\n"
    "  static const utf32 * syntaxErrorMessageArray [" ;
  result << in_TERMINAL_5F_LIST.reader_length (SOURCE_FILE_AT_LINE (105)).add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (105)).reader_string (SOURCE_FILE_AT_LINE (105)).stringValue () ;
  result << "] = {kEndOfSourceLexicalErrorMessage" ;
  GALGAS_uint index_5084_ (0) ;
  if (in_TERMINAL_5F_LIST.isValid ()) {
    cEnumerator_terminalList enumerator_5084 (in_TERMINAL_5F_LIST, kEnumeration_up) ;
    while (enumerator_5084.hasCurrentObject ()) {
      result << ",\n"
        "    gSyntaxErrorMessage_" ;
      result << enumerator_5084.current_mTerminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (107)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (107)).stringValue () ;
      index_5084_.increment () ;
      enumerator_5084.gotoNextObject () ;
    }
  }
  result << "} ;\n"
    "  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                      U N I C O D E    S T R I N G S                         *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_5706_ (0) ;
  if (in_STRINGS_5F_IN_5F_EXPLICIT_5F_RULES.isValid ()) {
    cEnumerator_stringset enumerator_5706 (in_STRINGS_5F_IN_5F_EXPLICIT_5F_RULES, kEnumeration_up) ;
    while (enumerator_5706.hasCurrentObject ()) {
      result << "\n"
        "//--- Unicode string for '$" ;
      result << enumerator_5706.current_key (HERE).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (120)).stringValue () ;
      result << "$'\n"
        "static const utf32 kUnicodeString_" ;
      result << enumerator_5706.current_key (HERE).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (121)).stringValue () ;
      result << " [] = " ;
      result << enumerator_5706.current_key (HERE).reader_utf_33__32_Representation (SOURCE_FILE_AT_LINE (121)).stringValue () ;
      result << " ;\n" ;
      index_5706_.increment () ;
      enumerator_5706.gotoNextObject () ;
    }
  }
  result << "\n" ;
  GALGAS_uint index_5957_ (0) ;
  if (in_LEXICAL_5F_TOKEN_5F_LIST_5F_MAP.isValid ()) {
    cEnumerator_lexicalExplicitTokenListMapMap enumerator_5957 (in_LEXICAL_5F_TOKEN_5F_LIST_5F_MAP, kEnumeration_up) ;
    while (enumerator_5957.hasCurrentObject ()) {
      result << "//-----------------------------------------------------------------------------*\n"
        "//                                                                             *\n"
        "//             Key words table '" ;
      result << enumerator_5957.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (128)).stringValue () ;
      result << "'                            *\n"
        "//                                                                             *\n"
        "//-----------------------------------------------------------------------------*\n"
        "\n"
        "static const PMSInt32 ktable_size_" ;
      result << enumerator_5957.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (131)).stringValue () ;
      result << " = " ;
      result << enumerator_5957.current_mExplicitTokenListMap (HERE).reader_count (SOURCE_FILE_AT_LINE (131)).reader_string (SOURCE_FILE_AT_LINE (131)).stringValue () ;
      result << " ;\n"
        "\n"
        "static const C_unicode_lexique_table_entry ktable_for_" ;
      result << enumerator_5957.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (132)).stringValue () ;
      result << " [ktable_size_" ;
      result << enumerator_5957.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (132)).stringValue () ;
      result << "] = {\n" ;
      GALGAS_uint index_6723_ (0) ;
      if (enumerator_5957.current_mTokenSortedList (HERE).isValid ()) {
        cEnumerator_tokenSortedlist enumerator_6723 (enumerator_5957.current_mTokenSortedList (HERE), kEnumeration_up) ;
        while (enumerator_6723.hasCurrentObject ()) {
          result << "  C_unicode_lexique_table_entry (kUnicodeString_" ;
          result << enumerator_6723.current_mName (HERE).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (134)).stringValue () ;
          result << ", " ;
          result << enumerator_6723.current_mLength (HERE).reader_string (SOURCE_FILE_AT_LINE (134)).stringValue () ;
          result << ", C_Lexique_" ;
          result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
          result << "::kToken_" ;
          result << enumerator_6723.current_mTerminalName (HERE).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (134)).stringValue () ;
          result << ")" ;
          if (enumerator_6723.hasNextObject ()) {
            result << ",\n" ;
          }
          index_6723_.increment () ;
          enumerator_6723.gotoNextObject () ;
        }
      }
      result << "\n"
        "} ;\n"
        "\n"
        "PMSInt16 C_Lexique_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << "::search_into_" ;
      result << enumerator_5957.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (138)).stringValue () ;
      result << " (const C_String & inSearchedString) {\n"
        "  return searchInList (inSearchedString, ktable_for_" ;
      result << enumerator_5957.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (139)).stringValue () ;
      result << ", ktable_size_" ;
      result << enumerator_5957.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (139)).stringValue () ;
      result << ") ;\n"
        "}\n"
        "\n" ;
      index_5957_.increment () ;
      enumerator_5957.gotoNextObject () ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                          getCurrentTokenString                              *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "C_String C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::getCurrentTokenString (const cToken * inTokenPtr) const {\n"
    "  const cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " * ptr = (const cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " *) inTokenPtr ;\n"
    "  C_String s ;\n"
    "  if (ptr == NULL) {\n"
    "    s.appendCString(\"$$\") ;\n"
    "  }else{\n"
    "    switch (ptr->mTokenCode) {\n"
    "    case kToken_:\n"
    "      s.appendCString(\"$$\") ;\n"
    "      break ;\n" ;
  GALGAS_uint index_8056_ (0) ;
  if (in_TERMINAL_5F_LIST.isValid ()) {
    cEnumerator_terminalList enumerator_8056 (in_TERMINAL_5F_LIST, kEnumeration_up) ;
    while (enumerator_8056.hasCurrentObject ()) {
      result << "    case kToken_" ;
      result << enumerator_8056.current_mTerminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (160)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (160)).stringValue () ;
      result << ":\n"
        "      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;\n"
        "      s.appendCString (" ;
      result << enumerator_8056.current_mTerminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (162)).reader_utf_38_Representation (SOURCE_FILE_AT_LINE (162)).stringValue () ;
      result << ") ;\n"
        "      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;\n" ;
      GALGAS_uint index_8386_ (0) ;
      if (enumerator_8056.current_mSentAttributeList (HERE).isValid ()) {
        cEnumerator_lexicalSentValueList enumerator_8386 (enumerator_8056.current_mSentAttributeList (HERE), kEnumeration_up) ;
        while (enumerator_8386.hasCurrentObject ()) {
          result << "      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;\n"
            "      s." ;
          result << categoryReader_appendMethodName (enumerator_8386.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (166)).stringValue () ;
          result << " (ptr->mLexicalAttribute_" ;
          result << enumerator_8386.current_mLexicalAttributeName (HERE).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (166)).stringValue () ;
          result << categoryReader_appendArgumentOfMethod (enumerator_8386.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (166)).stringValue () ;
          result << ") ;\n" ;
          index_8386_.increment () ;
          enumerator_8386.gotoNextObject () ;
        }
      }
      result << "      break ;\n" ;
      index_8056_.increment () ;
      enumerator_8056.gotoNextObject () ;
    }
  }
  result << "    default:\n"
    "      break ;\n"
    "    }\n"
    "  }\n"
    "  return s ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                           Template Delimiters                               *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n" ;
  GALGAS_uint index_9350_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (183)).isValid ()) {
    cEnumerator_templateDelimitorList enumerator_9350 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (183)), kEnumeration_up) ;
    const bool nonEmpty_enumerator_9350 = enumerator_9350.hasCurrentObject () ;
    if (nonEmpty_enumerator_9350) {
      result << "static const cTemplateDelimiter kTemplateDefinitionArray [" ;
      result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (184)).reader_length (SOURCE_FILE_AT_LINE (184)).reader_string (SOURCE_FILE_AT_LINE (184)).stringValue () ;
      result << "] = {\n" ;
    }
    while (enumerator_9350.hasCurrentObject ()) {
      result << "  cTemplateDelimiter (kUnicodeString_" ;
      result << enumerator_9350.current_mStartString (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (185)).stringValue () ;
      result << ", " ;
      result << enumerator_9350.current_mStartString (HERE).mAttribute_string.reader_length (SOURCE_FILE_AT_LINE (185)).reader_string (SOURCE_FILE_AT_LINE (185)).stringValue () ;
      result << ", " ;
      const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, enumerator_9350.current_mEndString (HERE).mAttribute_string.reader_length (SOURCE_FILE_AT_LINE (186)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
      if (kBoolTrue == test_2) {
        result << "NULL, 0," ;
      }else if (kBoolFalse == test_2) {
        result << "kUnicodeString_" ;
        result << enumerator_9350.current_mEndString (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (189)).stringValue () ;
        result << ", " ;
        result << enumerator_9350.current_mEndString (HERE).mAttribute_string.reader_length (SOURCE_FILE_AT_LINE (189)).reader_string (SOURCE_FILE_AT_LINE (189)).stringValue () ;
        result << "," ;
      }
      result << " NULL, " ;
      result << enumerator_9350.current_mPreservesStartDelimiter (HERE).operator_not (SOURCE_FILE_AT_LINE (192)).reader_cString (SOURCE_FILE_AT_LINE (192)).stringValue () ;
      result << ")" ;
      if (enumerator_9350.hasNextObject ()) {
        result << ",\n" ;
      }
      index_9350_.increment () ;
      enumerator_9350.gotoNextObject () ;
    }
    if (nonEmpty_enumerator_9350) {
      result << "\n"
        "} ;\n" ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                           Template Replacements                             *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n" ;
  GALGAS_uint index_10400_ (0) ;
  if (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE_AT_LINE (204)).isValid ()) {
    cEnumerator_templateReplacementListAST enumerator_10400 (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE_AT_LINE (204)), kEnumeration_up) ;
    const bool nonEmpty_enumerator_10400 = enumerator_10400.hasCurrentObject () ;
    if (nonEmpty_enumerator_10400) {
      result << "static const cTemplateDelimiter kTemplateReplacementArray [" ;
      result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE_AT_LINE (205)).reader_length (SOURCE_FILE_AT_LINE (205)).reader_string (SOURCE_FILE_AT_LINE (205)).stringValue () ;
      result << "] = {\n" ;
    }
    while (enumerator_10400.hasCurrentObject ()) {
      result << "  cTemplateDelimiter (kUnicodeString_" ;
      result << enumerator_10400.current_mMatchString (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (207)).stringValue () ;
      result << ", " ;
      result << enumerator_10400.current_mMatchString (HERE).mAttribute_string.reader_length (SOURCE_FILE_AT_LINE (207)).reader_string (SOURCE_FILE_AT_LINE (207)).stringValue () ;
      result << ", kUnicodeString_" ;
      result << enumerator_10400.current_mReplacementString (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (208)).stringValue () ;
      result << ", " ;
      result << enumerator_10400.current_mReplacementString (HERE).mAttribute_string.reader_length (SOURCE_FILE_AT_LINE (208)).reader_string (SOURCE_FILE_AT_LINE (208)).stringValue () ;
      result << ", " ;
      const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, enumerator_10400.current_mReplacementFunction (HERE).mAttribute_string.reader_length (SOURCE_FILE_AT_LINE (209)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
      if (kBoolTrue == test_3) {
        result << "NULL" ;
      }else if (kBoolFalse == test_3) {
        result << "scanner_routine_" ;
        result << enumerator_10400.current_mReplacementFunction (HERE).reader_string (SOURCE_FILE_AT_LINE (212)).stringValue () ;
      }
      result << ", true)" ;
      if (enumerator_10400.hasNextObject ()) {
        result << ",\n" ;
      }
      index_10400_.increment () ;
      enumerator_10400.gotoNextObject () ;
    }
    if (nonEmpty_enumerator_10400) {
      result << "\n"
        "} ;\n" ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//            Terminal Symbols as end of script in template mark               *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n" ;
  const enumGalgasBool test_4 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (225)).reader_length (SOURCE_FILE_AT_LINE (225)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_4) {
    GALGAS_uint index_11525_ (0) ;
    if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (226)).isValid ()) {
      cEnumerator_terminalList enumerator_11525 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (226)), kEnumeration_up) ;
      const bool nonEmpty_enumerator_11525 = enumerator_11525.hasCurrentObject () ;
      if (nonEmpty_enumerator_11525) {
        result << "static const bool kEndOfScriptInTemplateArray [" ;
        result << in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (227)).reader_length (SOURCE_FILE_AT_LINE (227)).reader_string (SOURCE_FILE_AT_LINE (227)).stringValue () ;
        result << "] = {\n" ;
      }
      while (enumerator_11525.hasCurrentObject ()) {
        result << "  " ;
        result << enumerator_11525.current_mIsEndOfTemplateMark (HERE).reader_cString (SOURCE_FILE_AT_LINE (228)).stringValue () ;
        result << " /* " ;
        result << enumerator_11525.current_mTerminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (228)).stringValue () ;
        result << " */" ;
        if (enumerator_11525.hasNextObject ()) {
          result << ",\n" ;
        }
        index_11525_.increment () ;
        enumerator_11525.gotoNextObject () ;
      }
      if (nonEmpty_enumerator_11525) {
        result << "\n"
          "} ;\n" ;
      }
    }
  }else if (kBoolFalse == test_4) {
  }
  result << "\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//               P A R S E    L E X I C A L    T O K E N                       *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "bool C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::parseLexicalToken (void) {\n"
    "  cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " token ;\n"
    "  mLoop = true ;\n"
    "  token.mTokenCode = -1 ;\n"
    "  while ((token.mTokenCode < 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n" ;
  const enumGalgasBool test_5 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (247)).reader_length (SOURCE_FILE_AT_LINE (247)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_5) {
    result << "    if ((mMatchedTemplateDelimiterIndex >= 0)\n"
      "     && (kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength > 0)\n"
      "     && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n"
      "      const bool foundEndDelimitor = testForInputUTF32String (kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndString,\n"
      "                                                              kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength,\n"
      "                                                              true) ;\n"
      "      if (foundEndDelimitor) {\n"
      "        mMatchedTemplateDelimiterIndex = -1 ;\n"
      "      }\n"
      "    }\n"
      "    while ((mMatchedTemplateDelimiterIndex < 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n"
      "      PMSInt32 replacementIndex = 0 ;\n"
      "      while (replacementIndex >= 0) {\n"
      "        replacementIndex = findTemplateDelimiterIndex (kTemplateReplacementArray, " ;
    result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE_AT_LINE (261)).reader_length (SOURCE_FILE_AT_LINE (261)).reader_string (SOURCE_FILE_AT_LINE (261)).stringValue () ;
    result << ") ;\n"
      "        if (replacementIndex >= 0) {\n"
      "          if (kTemplateReplacementArray [replacementIndex].mReplacementFunction == NULL) {\n"
      "            token.mTemplateStringBeforeToken << kTemplateReplacementArray [replacementIndex].mEndString ;\n"
      "          }else{\n"
      "            C_String s ;\n"
      "            while (notTestForInputUTF32String (kTemplateReplacementArray [replacementIndex].mEndString,\n"
      "                                               kTemplateReplacementArray [replacementIndex].mEndStringLength,\n"
      "                                               kEndOfSourceLexicalErrorMessage\n"
      "                                               COMMA_HERE)) {\n"
      "              s.appendUnicodeCharacter (previousChar () COMMA_HERE) ;\n"
      "            }\n"
      "            kTemplateReplacementArray [replacementIndex].mReplacementFunction (*this, s, token.mTemplateStringBeforeToken) ;\n"
      "          }\n"
      "        }\n"
      "      }\n"
      "      mMatchedTemplateDelimiterIndex = findTemplateDelimiterIndex (kTemplateDefinitionArray, " ;
    result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (277)).reader_length (SOURCE_FILE_AT_LINE (277)).reader_string (SOURCE_FILE_AT_LINE (277)).stringValue () ;
    result << ") ;\n"
      "      if (mMatchedTemplateDelimiterIndex < 0) {\n"
      "        token.mTemplateStringBeforeToken.appendUnicodeCharacter (mCurrentChar COMMA_HERE) ;\n"
      "        advance () ;\n"
      "      }\n"
      "    }\n"
      "    if ((mMatchedTemplateDelimiterIndex >= 0) && (UNICODE_VALUE (mCurrentChar) != '\\0')) {\n" ;
    GALGAS_uint index_14650_ (0) ;
    if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
      cEnumerator_lexicalAttributeMap enumerator_14650 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
      while (enumerator_14650.hasCurrentObject ()) {
        result << "    token.mLexicalAttribute_" ;
        result << enumerator_14650.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (285)).stringValue () ;
        result << categoryReader_initialization (enumerator_14650.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (285)).stringValue () ;
        result << " ;\n" ;
        index_14650_.increment () ;
        enumerator_14650.gotoNextObject () ;
      }
    }
    result << "    mTokenStartLocation = mCurrentLocation ;\n"
      "    try{\n" ;
    if (GALGAS_uint ((PMUInt32) 8U).isValid ()) {
      result.incIndentation ((PMSInt32) GALGAS_uint ((PMUInt32) 8U).uintValue ()) ;
    }
    GALGAS_uint index_14871_ (0) ;
    if (in_LEXICAL_5F_RULE_5F_LIST.isValid ()) {
      cEnumerator_lexicalRuleListAST enumerator_14871 (in_LEXICAL_5F_RULE_5F_LIST, kEnumeration_up) ;
      while (enumerator_14871.hasCurrentObject ()) {
        result << callCategoryReader_generateCode ((const cPtr_abstractLexicalRuleAST *) enumerator_14871.current_mLexicalRule (HERE).ptr (), in_LEXIQUE_5F_IDENTIFIER, in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT, inCompiler COMMA_SOURCE_FILE_AT_LINE (292)).stringValue () ;
        index_14871_.increment () ;
        enumerator_14871.gotoNextObject () ;
      }
    }
    if (GALGAS_uint ((PMUInt32) 8U).isValid ()) {
      result.incIndentation (- ((PMSInt32) GALGAS_uint ((PMUInt32) 8U).uintValue ())) ;
    }
    result << "if (testForInputUTF32Char (TO_UNICODE ('\\0'))) { // End of source text \? \n"
      "          token.mTokenCode = kToken_ ; // Empty string code\n"
      "        }else{ // Unknown input character\n"
      "          unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;\n"
      "        }\n"
      "      }catch (const C_lexicalErrorException &) {\n"
      "        token.mTokenCode = -1 ; // No token\n"
      "        advance () ; // ... go throught unknown character\n"
      "      }\n"
      "    }\n"
      "    if ((token.mTokenCode > 0) && kEndOfScriptInTemplateArray [token.mTokenCode - 1]) {\n"
      "      mMatchedTemplateDelimiterIndex = -1 ;\n"
      "    }\n"
      "  " ;
  }else if (kBoolFalse == test_5) {
    GALGAS_uint index_15577_ (0) ;
    if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
      cEnumerator_lexicalAttributeMap enumerator_15577 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
      while (enumerator_15577.hasCurrentObject ()) {
        result << "    token.mLexicalAttribute_" ;
        result << enumerator_15577.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (310)).stringValue () ;
        result << categoryReader_initialization (enumerator_15577.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (310)).stringValue () ;
        result << " ;\n" ;
        index_15577_.increment () ;
        enumerator_15577.gotoNextObject () ;
      }
    }
    result << "    mTokenStartLocation = mCurrentLocation ;\n"
      "    try{\n" ;
    if (GALGAS_uint ((PMUInt32) 6U).isValid ()) {
      result.incIndentation ((PMSInt32) GALGAS_uint ((PMUInt32) 6U).uintValue ()) ;
    }
    GALGAS_uint index_15798_ (0) ;
    if (in_LEXICAL_5F_RULE_5F_LIST.isValid ()) {
      cEnumerator_lexicalRuleListAST enumerator_15798 (in_LEXICAL_5F_RULE_5F_LIST, kEnumeration_up) ;
      while (enumerator_15798.hasCurrentObject ()) {
        result << callCategoryReader_generateCode ((const cPtr_abstractLexicalRuleAST *) enumerator_15798.current_mLexicalRule (HERE).ptr (), in_LEXIQUE_5F_IDENTIFIER, in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT, inCompiler COMMA_SOURCE_FILE_AT_LINE (317)).stringValue () ;
        index_15798_.increment () ;
        enumerator_15798.gotoNextObject () ;
      }
    }
    if (GALGAS_uint ((PMUInt32) 6U).isValid ()) {
      result.incIndentation (- ((PMSInt32) GALGAS_uint ((PMUInt32) 6U).uintValue ())) ;
    }
    result << "if (testForInputUTF32Char (TO_UNICODE ('\\0'))) { // End of source text \? \n"
      "        token.mTokenCode = kToken_ ; // Empty string code\n"
      "      }else{ // Unknown input character\n"
      "        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;\n"
      "      }\n"
      "    }catch (const C_lexicalErrorException &) {\n"
      "      token.mTokenCode = -1 ; // No token\n"
      "      advance () ; // ... go throught unknown character\n"
      "    }" ;
  }
  result << "\n"
    "  }\n"
    "  if ((UNICODE_VALUE (mCurrentChar) == '\\0') && (token.mTemplateStringBeforeToken.length () > 0)) {\n"
    "    token.mTokenCode = 0 ;\n"
    "    enterToken (token) ;\n"
    "  }\n"
    "  return token.mTokenCode > 0 ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                         E N T E R    T O K E N                              *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "void C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::enterToken (const cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " & inToken) {\n"
    "  cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " * ptr = NULL ;\n"
    "  macroMyNew (ptr, cTokenFor_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << " ()) ;\n"
    "  ptr->mTokenCode = inToken.mTokenCode ;\n"
    "  ptr->mStartLocation = mTokenStartLocation ;\n"
    "  ptr->mEndLocation = mTokenEndLocation ;\n"
    "  ptr->mTemplateStringBeforeToken = inToken.mTemplateStringBeforeToken ;\n" ;
  GALGAS_uint index_17356_ (0) ;
  if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_17356 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
    while (enumerator_17356.hasCurrentObject ()) {
      result << "  ptr->mLexicalAttribute_" ;
      result << enumerator_17356.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (352)).stringValue () ;
      result << " = inToken.mLexicalAttribute_" ;
      result << enumerator_17356.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (352)).stringValue () ;
      result << " ;\n" ;
      index_17356_.increment () ;
      enumerator_17356.gotoNextObject () ;
    }
  }
  result << "  enterTokenFromPointer (ptr) ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//               A T T R I B U T E   A C C E S S                               *\n"
    "//                                                                             *\n" ;
  GALGAS_uint index_17900_ (0) ;
  if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_17900 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
    while (enumerator_17900.hasCurrentObject ()) {
      result << "//-----------------------------------------------------------------------------*\n"
        "\n" ;
      result << categoryReader_cppTypeName (enumerator_17900.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (364)).stringValue () ;
      result << " C_Lexique_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << "::attributeValue_" ;
      result << enumerator_17900.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (364)).stringValue () ;
      result << " (void) const {\n"
        "  cTokenFor_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << " * ptr = (cTokenFor_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << " *) mCurrentTokenPtr ;\n"
        "  return ptr->mLexicalAttribute_" ;
      result << enumerator_17900.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (366)).stringValue () ;
      result << " ;\n"
        "}\n"
        "\n" ;
      index_17900_.increment () ;
      enumerator_17900.gotoNextObject () ;
    }
  }
  result << "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//         A S S I G N    F R O M    A T T R I B U T E                         *\n"
    "//                                                                             *\n" ;
  GALGAS_uint index_18695_ (0) ;
  if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_18695 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
    while (enumerator_18695.hasCurrentObject ()) {
      result << "//-----------------------------------------------------------------------------*\n"
        "\n"
        "GALGAS_l" ;
      result << categoryReader_lexicalTypeBaseName (enumerator_18695.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (376)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (376)).stringValue () ;
      result << " C_Lexique_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << "::synthetizedAttribute_" ;
      result << enumerator_18695.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (376)).stringValue () ;
      result << " (void) const {\n"
        "  cTokenFor_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << " * ptr = (cTokenFor_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << " *) mCurrentTokenPtr ;\n"
        "  macroValidSharedObject (ptr, cTokenFor_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << ") ;\n"
        "  GALGAS_location currentLocation (ptr->mStartLocation, ptr->mEndLocation, sourceText ()) ;\n"
        "  GALGAS_" ;
      result << categoryReader_lexicalTypeBaseName (enumerator_18695.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (380)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (380)).stringValue () ;
      result << " value (ptr->mLexicalAttribute_" ;
      result << enumerator_18695.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (380)).stringValue () ;
      result << ") ;\n"
        "  GALGAS_l" ;
      result << categoryReader_lexicalTypeBaseName (enumerator_18695.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (381)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (381)).stringValue () ;
      result << " result (value, currentLocation) ;\n"
        "  return result ;\n"
        "}\n"
        "\n" ;
      index_18695_.increment () ;
      enumerator_18695.gotoNextObject () ;
    }
  }
  result << "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                         I N T R O S P E C T I O N                           *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "GALGAS_stringlist C_Lexique_" ;
  result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
  result << "::symbols (LOCATION_ARGS) {\n"
    "  GALGAS_stringlist result = GALGAS_stringlist::constructor_emptyList (THERE) ;\n" ;
  GALGAS_uint index_20188_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (393)).isValid ()) {
    cEnumerator_terminalList enumerator_20188 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (393)), kEnumeration_up) ;
    while (enumerator_20188.hasCurrentObject ()) {
      result << "  result.addAssign_operation (GALGAS_string (" ;
      result << enumerator_20188.current_mTerminalName (HERE).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE_AT_LINE (394)).stringValue () ;
      result << ") COMMA_THERE) ;\n" ;
      index_20188_.increment () ;
      enumerator_20188.gotoNextObject () ;
    }
  }
  result << "  return result ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//    Filewrapper template 'lexiqueGenerationTemplates cocoaHeaderZone2'     *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_cocoaHeaderZone_32_ (C_Compiler * inCompiler,
                                                                                  const GALGAS_string & in_LEXIQUE_5F_CLASS_5F_NAME,
                                                                                  const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT
                                                                                  COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  PMUInt32 columnMarker = 0 ;
  result << "\n"
    "#import \"OC_Lexique.h\"\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                    E X T E R N    R O U T I N E S                         *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_494_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalRoutineMessageMap (SOURCE_FILE_AT_LINE (10)).isValid ()) {
    cEnumerator_lexicalRoutineMap enumerator_494 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalRoutineMessageMap (SOURCE_FILE_AT_LINE (10)), kEnumeration_up) ;
    while (enumerator_494.hasCurrentObject ()) {
      const enumGalgasBool test_0 = enumerator_494.current_mIsExtern (HERE).boolEnum () ;
      if (kBoolTrue == test_0) {
        result << "\n"
          "void scanner_cocoa_routine_" ;
        result << enumerator_494.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (12)).stringValue () ;
        result << " (" ;
        columnMarker = result.currentColumn () ;
        result << "BOOL * ioScanningOk" ;
        GALGAS_uint index_646_ (0) ;
        if (enumerator_494.current_mLexicalRoutineFormalArgumentList (HERE).isValid ()) {
          cEnumerator_lexicalRoutineFormalArgumentList enumerator_646 (enumerator_494.current_mLexicalRoutineFormalArgumentList (HERE), kEnumeration_up) ;
          while (enumerator_646.hasCurrentObject ()) {
            result << ",\n"
              "                " ;
            result.appendSpacesUntilColumn (columnMarker) ;
            result << categoryReader_cppConstInFormalArgument (enumerator_646.current_mLexicalFormalArgumentMode (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (14)).stringValue () ;
            result << categoryReader_cocoaTypeName (enumerator_646.current_mLexicalFormalArgumentType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (15)).stringValue () ;
            result << categoryReader_cocoaPointerInFormalArgument (enumerator_646.current_mLexicalFormalArgumentMode (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (16)).stringValue () ;
            result << " " ;
            result << enumerator_646.current_mArgumentNameForComment (HERE).stringValue () ;
            index_646_.increment () ;
            enumerator_646.gotoNextObject () ;
          }
        }
        result << ") ;\n" ;
      }else if (kBoolFalse == test_0) {
      }
      index_494_.increment () ;
      enumerator_494.gotoNextObject () ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                    E X T E R N    F U N C T I O N S                       *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n" ;
  GALGAS_uint index_1474_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalFunctionMap (SOURCE_FILE_AT_LINE (29)).isValid ()) {
    cEnumerator_lexicalFunctionMap enumerator_1474 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalFunctionMap (SOURCE_FILE_AT_LINE (29)), kEnumeration_up) ;
    while (enumerator_1474.hasCurrentObject ()) {
      const enumGalgasBool test_1 = enumerator_1474.current_mIsExtern (HERE).boolEnum () ;
      if (kBoolTrue == test_1) {
        result << "\n" ;
        result << categoryReader_cppTypeName (enumerator_1474.current_mReturnedLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (31)).stringValue () ;
        result << " scanner_cocoa_function_" ;
        result << enumerator_1474.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (31)).stringValue () ;
        result << " (" ;
        columnMarker = result.currentColumn () ;
        result << "BOOL * ioScanningOk" ;
        GALGAS_uint index_1643_ (0) ;
        if (enumerator_1474.current_mLexicalTypeList (HERE).isValid ()) {
          cEnumerator_lexicalFunctionFormalArgumentList enumerator_1643 (enumerator_1474.current_mLexicalTypeList (HERE), kEnumeration_up) ;
          while (enumerator_1643.hasCurrentObject ()) {
            result << ",\n"
              "                " ;
            result.appendSpacesUntilColumn (columnMarker) ;
            result << "const " ;
            result << categoryReader_cppTypeName (enumerator_1643.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (33)).stringValue () ;
            result << " " ;
            result << enumerator_1643.current_mArgumentNameForComment (HERE).stringValue () ;
            index_1643_.increment () ;
            enumerator_1643.gotoNextObject () ;
          }
        }
        result << ") ;\n" ;
      }else if (kBoolFalse == test_1) {
      }
      index_1474_.increment () ;
      enumerator_1474.gotoNextObject () ;
    }
  }
  result << "\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//         T E R M I N A L    S Y M B O L    E N U M E R A T I O N           *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "enum {" ;
  result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
  result << "_1_" ;
  GALGAS_uint index_2289_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (47)).isValid ()) {
    cEnumerator_terminalList enumerator_2289 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (47)), kEnumeration_up) ;
    while (enumerator_2289.hasCurrentObject ()) {
      result << ",\n"
        "  " ;
      result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
      result << "_1_" ;
      result << enumerator_2289.current_mTerminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (48)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (48)).stringValue () ;
      index_2289_.increment () ;
      enumerator_2289.gotoNextObject () ;
    }
  }
  result << "\n"
    "} ;\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                     S C A N N E R    C L A S S                            *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "@interface OC_Lexique_" ;
  result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
  result << " : OC_Lexique {\n"
    "//--- Attributes\n" ;
  GALGAS_uint index_2948_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (61)).isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_2948 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (61)), kEnumeration_up) ;
    while (enumerator_2948.hasCurrentObject ()) {
      result << "  @private " ;
      result << categoryReader_cocoaTypeName (enumerator_2948.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (62)).stringValue () ;
      result << " mLexicalAttribute_" ;
      result << enumerator_2948.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (62)).stringValue () ;
      result << " ;\n" ;
      index_2948_.increment () ;
      enumerator_2948.gotoNextObject () ;
    }
  }
  result << "\n"
    "}\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//    Filewrapper template 'lexiqueGenerationTemplates cocoaHeaderZone3'     *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_cocoaHeaderZone_33_ (C_Compiler * /* inCompiler */,
                                                                                  const GALGAS_string & /* in_LEXIQUE_5F_CLASS_5F_NAME */,
                                                                                  const GALGAS_lexiqueAnalysisContext & /* in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT */
                                                                                  COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "\n"
    "- (NSUInteger) terminalVocabularyCount ;\n"
    "\n"
    "- (NSUInteger) styleIndexForTerminal: (NSInteger) inTerminal ;\n"
    "\n"
    "- (void) parseLexicalTokenForLexicalColoring ;\n"
    "\n"
    "- (NSUInteger) styleCount ;\n"
    "\n"
    "- (NSString *) styleNameForStyleIndex: (NSInteger) inIndex ;\n"
    "\n"
    "- (NSString *) styleIdentifierForStyleIndex: (NSInteger) inIndex ;\n"
    "\n"
    "- (NSString *) indexingDirectory ;\n"
    "\n"
    "- (NSArray *) indexingTitles ; // Array of NSString\n"
    "\n"
    "- (BOOL) isTemplateLexique ;\n"
    "\n"
    "- (BOOL) atomicSelectionForToken: (NSUInteger) inTokenIndex ;\n"
    "\n"
    "@end\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//Filewrapper template 'lexiqueGenerationTemplates cocoaImplementationZone2' *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_lexiqueGenerationTemplates_cocoaImplementationZone_32_ (C_Compiler * inCompiler,
                                                                                          const GALGAS_string & in_LEXIQUE_5F_CLASS_5F_NAME,
                                                                                          const GALGAS_lexicalAttributeMap & in_LEXICAL_5F_ATTRIBUTE_5F_MAP,
                                                                                          const GALGAS_lexicalMessageMap & /* in_LEXICAL_5F_MESSAGE_5F_MAP */,
                                                                                          const GALGAS_terminalList & /* in_TERMINAL_5F_LIST */,
                                                                                          const GALGAS_stringset & /* in_STRINGS_5F_IN_5F_EXPLICIT_5F_RULES */,
                                                                                          const GALGAS_lexicalRuleListAST & in_LEXICAL_5F_RULE_5F_LIST,
                                                                                          const GALGAS_lexiqueAnalysisContext & in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT,
                                                                                          const GALGAS_lexiqueComponentAST & in_LEXIQUE_5F_COMPONENT_5F_ROOT
                                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "\n"
    "#import \"" ;
  result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
  result << "-cocoa.h\"\n"
    "#import \"PMDebug.h\"\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "@implementation OC_Lexique_" ;
  result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
  result << "\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                           Template Replacements                             *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n" ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE_AT_LINE (15)).reader_length (SOURCE_FILE_AT_LINE (15)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    result << "static NSArray * kTemplateReplacementArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (16)).stringValue () ;
    result << " ; // Of NSString \n" ;
  }else if (kBoolFalse == test_0) {
  }
  result << "\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                           Template Delimiters                               *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n" ;
  const enumGalgasBool test_1 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (25)).reader_length (SOURCE_FILE_AT_LINE (25)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_1) {
    result << "static NSArray * kTemplateDefinitionArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (26)).stringValue () ;
    result << " ;\n" ;
  }else if (kBoolFalse == test_1) {
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (instancetype) init {\n"
    "  self = [super init] ;\n"
    "  if (self) {\n"
    "    noteObjectAllocation (self) ;\n" ;
  GALGAS_uint index_1591_ (0) ;
  if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
    cEnumerator_lexicalAttributeMap enumerator_1591 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
    while (enumerator_1591.hasCurrentObject ()) {
      result << "    mLexicalAttribute_" ;
      result << enumerator_1591.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (36)).stringValue () ;
      result << " = " ;
      result << categoryReader_cocoaInitializationCode (enumerator_1591.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (36)).stringValue () ;
      result << " ;\n" ;
      index_1591_.increment () ;
      enumerator_1591.gotoNextObject () ;
    }
  }
  result << "  }\n" ;
  const enumGalgasBool test_2 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (39)).reader_length (SOURCE_FILE_AT_LINE (39)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_2) {
    result << "  if (nil == kTemplateDefinitionArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (40)).stringValue () ;
    result << ") {\n"
      "    kTemplateDefinitionArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (41)).stringValue () ;
    result << " = [NSArray arrayWithObjects:\n" ;
    GALGAS_uint index_2046_ (0) ;
    if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (42)).isValid ()) {
      cEnumerator_templateDelimitorList enumerator_2046 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (42)), kEnumeration_up) ;
      while (enumerator_2046.hasCurrentObject ()) {
        result << "      [[OC_GGS_TemplateDelimiter alloc] initWithStartString:@" ;
        result << enumerator_2046.current_mStartString (HERE).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE_AT_LINE (43)).stringValue () ;
        result << " endString:" ;
        const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, enumerator_2046.current_mEndString (HERE).mAttribute_string.reader_length (SOURCE_FILE_AT_LINE (44)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
        if (kBoolTrue == test_3) {
          result << "nil" ;
        }else if (kBoolFalse == test_3) {
          result << "@" ;
          result << enumerator_2046.current_mEndString (HERE).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE_AT_LINE (47)).stringValue () ;
        }
        result << " discardStartString:" ;
        result << enumerator_2046.current_mPreservesStartDelimiter (HERE).operator_not (SOURCE_FILE_AT_LINE (50)).reader_ocString (SOURCE_FILE_AT_LINE (50)).stringValue () ;
        result << "],\n" ;
        index_2046_.increment () ;
        enumerator_2046.gotoNextObject () ;
      }
    }
    result << "      nil\n"
      "    ] ;\n"
      "  }\n" ;
  }else if (kBoolFalse == test_2) {
  }
  const enumGalgasBool test_4 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE_AT_LINE (57)).reader_length (SOURCE_FILE_AT_LINE (57)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_4) {
    result << "  if (nil == kTemplateReplacementArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (58)).stringValue () ;
    result << ") {\n"
      "\n"
      "    kTemplateReplacementArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (59)).stringValue () ;
    result << " = [NSArray arrayWithObjects:\n" ;
    GALGAS_uint index_2781_ (0) ;
    if (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE_AT_LINE (60)).isValid ()) {
      cEnumerator_templateReplacementListAST enumerator_2781 (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE_AT_LINE (60)), kEnumeration_up) ;
      while (enumerator_2781.hasCurrentObject ()) {
        result << "      @" ;
        result << enumerator_2781.current_mMatchString (HERE).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE_AT_LINE (61)).stringValue () ;
        result << ", " ;
        index_2781_.increment () ;
        enumerator_2781.gotoNextObject () ;
      }
    }
    result << "      nil\n"
      "    ] ;\n"
      "  }\n" ;
  }else if (kBoolFalse == test_4) {
  }
  result << "  return self ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (void) FINALIZE_OR_DEALLOC {\n"
    "  noteObjectDeallocation (self) ;\n"
    "  macroSuperFinalize ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                 I N D E X I N G    D I R E C T O R Y                        *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (NSString *) indexingDirectory {\n"
    "  return @" ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mIndexingDirectory (SOURCE_FILE_AT_LINE (84)).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE_AT_LINE (84)).stringValue () ;
  result << " ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                 I N D E X I N G    T I T L E S                              *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (NSArray *) indexingTitles { // Array of NSString\n"
    "  return [NSArray arrayWithObjects:\n" ;
  GALGAS_uint index_4164_ (0) ;
  if (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mIndexingListAST (SOURCE_FILE_AT_LINE (96)).isValid ()) {
    cEnumerator_indexingListAST enumerator_4164 (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mIndexingListAST (SOURCE_FILE_AT_LINE (96)), kEnumeration_up) ;
    while (enumerator_4164.hasCurrentObject ()) {
      result << "    @" ;
      result << enumerator_4164.current_mIndexComment (HERE).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE_AT_LINE (97)).stringValue () ;
      result << ",\n" ;
      index_4164_.increment () ;
      enumerator_4164.gotoNextObject () ;
    }
  }
  result << "    NULL\n"
    "  ] ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//            Terminal Symbols as end of script in template mark               *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n" ;
  const enumGalgasBool test_5 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (109)).reader_length (SOURCE_FILE_AT_LINE (109)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_5) {
    GALGAS_uint index_4967_ (0) ;
    if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (110)).isValid ()) {
      cEnumerator_terminalList enumerator_4967 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (110)), kEnumeration_up) ;
      const bool nonEmpty_enumerator_4967 = enumerator_4967.hasCurrentObject () ;
      if (nonEmpty_enumerator_4967) {
        result << "static const BOOL kEndOfScriptInTemplateArray_" ;
        result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (111)).stringValue () ;
        result << " [" ;
        result << in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (111)).reader_length (SOURCE_FILE_AT_LINE (111)).reader_string (SOURCE_FILE_AT_LINE (111)).stringValue () ;
        result << "] = {\n" ;
      }
      while (enumerator_4967.hasCurrentObject ()) {
        result << "  " ;
        result << enumerator_4967.current_mIsEndOfTemplateMark (HERE).reader_ocString (SOURCE_FILE_AT_LINE (112)).stringValue () ;
        result << " /* " ;
        result << enumerator_4967.current_mTerminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (112)).stringValue () ;
        result << " */" ;
        if (enumerator_4967.hasNextObject ()) {
          result << ",\n" ;
        }
        index_4967_.increment () ;
        enumerator_4967.gotoNextObject () ;
      }
      if (nonEmpty_enumerator_4967) {
        result << "\n"
          "} ;\n" ;
      }
    }
  }else if (kBoolFalse == test_5) {
  }
  result << "\n"
    "\n" ;
  GALGAS_uint index_5184_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalTokenListMap (SOURCE_FILE_AT_LINE (120)).isValid ()) {
    cEnumerator_lexicalExplicitTokenListMapMap enumerator_5184 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mLexicalTokenListMap (SOURCE_FILE_AT_LINE (120)), kEnumeration_up) ;
    while (enumerator_5184.hasCurrentObject ()) {
      const enumGalgasBool test_6 = enumerator_5184.current_mShouldBeGenerated (HERE).boolEnum () ;
      if (kBoolTrue == test_6) {
        result << "//-----------------------------------------------------------------------------*\n"
          "//                                                                             *\n"
          "//             Key words table '" ;
        result << enumerator_5184.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (124)).stringValue () ;
        result << "'                            *\n"
          "//                                                                             *\n"
          "//-----------------------------------------------------------------------------*\n"
          "\n"
          "static const C_cocoa_lexique_table_entry ktable_for_" ;
        result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (127)).stringValue () ;
        result << "_" ;
        result << enumerator_5184.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (127)).stringValue () ;
        result << " [" ;
        result << enumerator_5184.current_mExplicitTokenListMap (HERE).reader_count (SOURCE_FILE_AT_LINE (127)).reader_string (SOURCE_FILE_AT_LINE (127)).stringValue () ;
        result << "] = {\n" ;
        GALGAS_uint index_5940_ (0) ;
        if (enumerator_5184.current_mTokenSortedList (HERE).isValid ()) {
          cEnumerator_tokenSortedlist enumerator_5940 (enumerator_5184.current_mTokenSortedList (HERE), kEnumeration_up) ;
          while (enumerator_5940.hasCurrentObject ()) {
            result << "  {" ;
            result << enumerator_5940.current_mName (HERE).reader_utf_38_Representation (SOURCE_FILE_AT_LINE (129)).stringValue () ;
            result << ", " ;
            result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
            result << "_1_" ;
            result << enumerator_5940.current_mTerminalName (HERE).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (129)).stringValue () ;
            result << "}" ;
            if (enumerator_5940.hasNextObject ()) {
              result << ",\n" ;
            }
            index_5940_.increment () ;
            enumerator_5940.gotoNextObject () ;
          }
        }
        result << "\n"
          "} ;\n"
          "\n"
          "static NSInteger search_into_" ;
        result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (133)).stringValue () ;
        result << "_" ;
        result << enumerator_5184.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (133)).stringValue () ;
        result << " (NSString * inSearchedString) {\n"
          "  return searchStringInTable (inSearchedString, ktable_for_" ;
        result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (134)).stringValue () ;
        result << "_" ;
        result << enumerator_5184.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (134)).stringValue () ;
        result << ", " ;
        result << enumerator_5184.current_mExplicitTokenListMap (HERE).reader_count (SOURCE_FILE_AT_LINE (134)).reader_string (SOURCE_FILE_AT_LINE (134)).stringValue () ;
        result << ") ;\n"
          "}\n"
          "\n" ;
      }else if (kBoolFalse == test_6) {
      }
      index_5184_.increment () ;
      enumerator_5184.gotoNextObject () ;
    }
  }
  result << "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//               P A R S E    L E X I C A L    T O K E N                       *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (void) parseLexicalTokenForLexicalColoring {\n"
    "  mLoop = YES ;\n"
    "  BOOL scanningOk = YES ;\n"
    "  mTokenCode = 0 ;\n"
    "  while ((mTokenCode == 0) && (mCurrentChar != '\\0')) {\n"
    "    mTokenStartLocation = mCurrentLocation ;\n" ;
  const enumGalgasBool test_7 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (152)).reader_length (SOURCE_FILE_AT_LINE (152)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_7) {
    result << "    if ((mMatchedTemplateDelimiterIndex >= 0) && ([[kTemplateDefinitionArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (153)).stringValue () ;
    result << " objectAtIndex:(NSUInteger) mMatchedTemplateDelimiterIndex] startString].length > 0)) {\n"
      "      const BOOL foundEndDelimitor = [self testForInputString:[[kTemplateDefinitionArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (154)).stringValue () ;
    result << " objectAtIndex:(NSUInteger) mMatchedTemplateDelimiterIndex] endString] advance:YES] ;\n"
      "      if (foundEndDelimitor) {\n"
      "        mMatchedTemplateDelimiterIndex = -1 ;\n"
      "      }\n"
      "    }\n"
      "    while ((mMatchedTemplateDelimiterIndex < 0) && (mCurrentChar != '\\0')) {\n"
      "      " ;
    const enumGalgasBool test_8 = GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateReplacementList (SOURCE_FILE_AT_LINE (160)).reader_length (SOURCE_FILE_AT_LINE (160)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
    if (kBoolTrue == test_8) {
      result << "\n"
        "      [self searchForReplacementPattern:kTemplateReplacementArray_" ;
      result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (161)).stringValue () ;
      result << "] ;\n"
        "      " ;
    }else if (kBoolFalse == test_8) {
    }
    result << "\n"
      "      mMatchedTemplateDelimiterIndex = [self findTemplateDelimiterIndex:kTemplateDefinitionArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (163)).stringValue () ;
    result << "] ;\n"
      "      if (mMatchedTemplateDelimiterIndex < 0) {\n"
      "        [self advance] ;\n"
      "        mTokenCode = -2 ;\n"
      "      }\n"
      "    }\n"
      "    if ((mMatchedTemplateDelimiterIndex >= 0) && (mTokenCode == 0) && (mCurrentChar != '\\0') && scanningOk) {\n" ;
    GALGAS_uint index_8407_ (0) ;
    if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
      cEnumerator_lexicalAttributeMap enumerator_8407 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
      while (enumerator_8407.hasCurrentObject ()) {
        result << "      " ;
        result << categoryReader_cocoaResetPrefix (enumerator_8407.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (171)).stringValue () ;
        result << "mLexicalAttribute_" ;
        result << enumerator_8407.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (171)).stringValue () ;
        result << categoryReader_cocoaReset (enumerator_8407.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (171)).stringValue () ;
        result << " ;\n" ;
        index_8407_.increment () ;
        enumerator_8407.gotoNextObject () ;
      }
    }
    result << "      mTokenStartLocation = mCurrentLocation ;\n" ;
    if (GALGAS_uint ((PMUInt32) 6U).isValid ()) {
      result.incIndentation ((PMSInt32) GALGAS_uint ((PMUInt32) 6U).uintValue ()) ;
    }
    GALGAS_uint index_8629_ (0) ;
    if (in_LEXICAL_5F_RULE_5F_LIST.isValid ()) {
      cEnumerator_lexicalRuleListAST enumerator_8629 (in_LEXICAL_5F_RULE_5F_LIST, kEnumeration_up) ;
      while (enumerator_8629.hasCurrentObject ()) {
        result << callCategoryReader_generateCocoaCode ((const cPtr_abstractLexicalRuleAST *) enumerator_8629.current_mLexicalRule (HERE).ptr (), in_LEXIQUE_5F_CLASS_5F_NAME, in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT, inCompiler COMMA_SOURCE_FILE_AT_LINE (177)).stringValue () ;
        index_8629_.increment () ;
        enumerator_8629.gotoNextObject () ;
      }
    }
    if (GALGAS_uint ((PMUInt32) 6U).isValid ()) {
      result.incIndentation (- ((PMSInt32) GALGAS_uint ((PMUInt32) 6U).uintValue ())) ;
    }
    result << "if ([self testForInputChar:'\\0']) { // End of source text \? \n"
      "        mTokenCode = " ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
    result << "_1_ ; // Empty string code\n"
      "      }else{ // Unknown input character\n"
      "        scanningOk = NO ;\n"
      "      }\n"
      "    }\n"
      "    if ((mTokenCode > 0) && kEndOfScriptInTemplateArray_" ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (186)).stringValue () ;
    result << " [mTokenCode - 1]) {\n"
      "      mMatchedTemplateDelimiterIndex = -1 ;\n"
      "    }\n"
      "  //--- Error \?\n"
      "    if (! scanningOk) {\n"
      "      mTokenCode = -1 ;\n"
      "      [self advance] ;\n"
      "    }" ;
  }else if (kBoolFalse == test_7) {
    GALGAS_uint index_9262_ (0) ;
    if (in_LEXICAL_5F_ATTRIBUTE_5F_MAP.isValid ()) {
      cEnumerator_lexicalAttributeMap enumerator_9262 (in_LEXICAL_5F_ATTRIBUTE_5F_MAP, kEnumeration_up) ;
      while (enumerator_9262.hasCurrentObject ()) {
        result << "    " ;
        result << categoryReader_cocoaResetPrefix (enumerator_9262.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (195)).stringValue () ;
        result << "mLexicalAttribute_" ;
        result << enumerator_9262.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (195)).stringValue () ;
        result << categoryReader_cocoaReset (enumerator_9262.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (195)).stringValue () ;
        result << " ;\n" ;
        index_9262_.increment () ;
        enumerator_9262.gotoNextObject () ;
      }
    }
    result << "    mTokenStartLocation = mCurrentLocation ;\n" ;
    if (GALGAS_uint ((PMUInt32) 4U).isValid ()) {
      result.incIndentation ((PMSInt32) GALGAS_uint ((PMUInt32) 4U).uintValue ()) ;
    }
    GALGAS_uint index_9480_ (0) ;
    if (in_LEXICAL_5F_RULE_5F_LIST.isValid ()) {
      cEnumerator_lexicalRuleListAST enumerator_9480 (in_LEXICAL_5F_RULE_5F_LIST, kEnumeration_up) ;
      while (enumerator_9480.hasCurrentObject ()) {
        result << callCategoryReader_generateCocoaCode ((const cPtr_abstractLexicalRuleAST *) enumerator_9480.current_mLexicalRule (HERE).ptr (), in_LEXIQUE_5F_CLASS_5F_NAME, in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT, inCompiler COMMA_SOURCE_FILE_AT_LINE (201)).stringValue () ;
        index_9480_.increment () ;
        enumerator_9480.gotoNextObject () ;
      }
    }
    if (GALGAS_uint ((PMUInt32) 4U).isValid ()) {
      result.incIndentation (- ((PMSInt32) GALGAS_uint ((PMUInt32) 4U).uintValue ())) ;
    }
    result << "if ([self testForInputChar:'\\0']) { // End of source text \? \n"
      "      mTokenCode = " ;
    result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
    result << "_1_ ; // Empty string code\n"
      "    }else{ // Unknown input character\n"
      "      scanningOk = NO ;\n"
      "      [self advance] ;\n"
      "    }\n"
      "  //--- Error \?\n"
      "    if (! scanningOk) {\n"
      "      mTokenCode = -1 ;\n"
      "    }" ;
  }
  result << "\n"
    "  }\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                   T E R M I N A L    C O U N T                              *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (NSUInteger) terminalVocabularyCount {\n"
    "  return " ;
  result << in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (224)).reader_length (SOURCE_FILE_AT_LINE (224)).reader_string (SOURCE_FILE_AT_LINE (224)).stringValue () ;
  result << " ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                     S T Y L E   C O U N T                                   *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (NSUInteger) styleCount {\n"
    "  return " ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE_AT_LINE (234)).reader_length (SOURCE_FILE_AT_LINE (234)).add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (234)).reader_string (SOURCE_FILE_AT_LINE (234)).stringValue () ;
  result << " ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//                I S    T E M P L A T E    L E X I Q U E                      *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (BOOL) isTemplateLexique {\n"
    "  return " ;
  result << GALGAS_bool (kIsStrictSup, in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (244)).reader_length (SOURCE_FILE_AT_LINE (244)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).reader_ocString (SOURCE_FILE_AT_LINE (244)).stringValue () ;
  result << " ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//              S T Y L E   F O R    T E R M I N A L                           *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (NSUInteger) styleIndexForTerminal: (NSInteger) inTerminal {\n"
    "  static const NSUInteger kTerminalSymbolStyles [" ;
  result << in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (254)).reader_length (SOURCE_FILE_AT_LINE (254)).add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (254)).reader_string (SOURCE_FILE_AT_LINE (254)).stringValue () ;
  result << "] = {0" ;
  GALGAS_uint index_12105_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (255)).isValid ()) {
    cEnumerator_terminalList enumerator_12105 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (255)), kEnumeration_up) ;
    while (enumerator_12105.hasCurrentObject ()) {
      result << ",\n"
        "    " ;
      result << enumerator_12105.current_mStyleIndex (HERE).reader_string (SOURCE_FILE_AT_LINE (256)).stringValue () ;
      result << " /* " ;
      result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
      result << "_1_" ;
      result << enumerator_12105.current_mTerminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (256)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (256)).stringValue () ;
      result << " */" ;
      index_12105_.increment () ;
      enumerator_12105.gotoNextObject () ;
    }
  }
  result << "\n"
    "  } ;\n"
    "  return kTerminalSymbolStyles [inTerminal] ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//    A T O M I C    S E L E C T I O N   F O R    T E R M I N A L              *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (BOOL) atomicSelectionForToken: (NSUInteger) inTokenIndex {\n"
    "  static const BOOL kTerminalAtomicSelection [" ;
  result << in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (268)).reader_length (SOURCE_FILE_AT_LINE (268)).add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (268)).reader_string (SOURCE_FILE_AT_LINE (268)).stringValue () ;
  result << "] = {NO" ;
  GALGAS_uint index_12932_ (0) ;
  if (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (269)).isValid ()) {
    cEnumerator_terminalList enumerator_12932 (in_LEXIQUE_5F_ANALYSIS_5F_CONTEXT.reader_mTerminalList (SOURCE_FILE_AT_LINE (269)), kEnumeration_up) ;
    while (enumerator_12932.hasCurrentObject ()) {
      result << ",\n"
        "    " ;
      result << enumerator_12932.current_mAtomicSelection (HERE).reader_ocString (SOURCE_FILE_AT_LINE (270)).stringValue () ;
      result << " /* " ;
      result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
      result << "_1_" ;
      result << enumerator_12932.current_mTerminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (270)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (270)).stringValue () ;
      result << " */" ;
      index_12932_.increment () ;
      enumerator_12932.gotoNextObject () ;
    }
  }
  result << "\n"
    "  } ;\n"
    "  return kTerminalAtomicSelection [inTokenIndex] ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//             S T Y L E   N A M E    F O R    I N D E X                       *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (NSString *) styleNameForStyleIndex: (NSInteger) inIndex {\n"
    "  NSString * result = nil ;\n"
    "  if ((inIndex >= 0) && (inIndex < " ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE_AT_LINE (283)).reader_length (SOURCE_FILE_AT_LINE (283)).add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (283)).reader_string (SOURCE_FILE_AT_LINE (283)).stringValue () ;
  result << ")) {\n"
    "    NSString * kStyleArray [" ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE_AT_LINE (284)).reader_length (SOURCE_FILE_AT_LINE (284)).add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (284)).reader_string (SOURCE_FILE_AT_LINE (284)).stringValue () ;
  result << "] = {\n"
    "      @\"Default Style\"" ;
  GALGAS_uint index_13912_ (0) ;
  if (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE_AT_LINE (286)).isValid ()) {
    cEnumerator_lexicalStyleListAST enumerator_13912 (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE_AT_LINE (286)), kEnumeration_up) ;
    while (enumerator_13912.hasCurrentObject ()) {
      result << ",\n"
        "      @" ;
      result << enumerator_13912.current_mComment (HERE).reader_string (SOURCE_FILE_AT_LINE (287)).reader_utf_38_Representation (SOURCE_FILE_AT_LINE (287)).stringValue () ;
      index_13912_.increment () ;
      enumerator_13912.gotoNextObject () ;
    }
  }
  result << "\n"
    "    } ;\n"
    "    result = kStyleArray [inIndex] ;\n"
    "  }\n"
    "  return result ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//         S T Y L E   I D E N T I F I E R    F O R    I N D E X               *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (NSString *) styleIdentifierForStyleIndex: (NSInteger) inIndex {\n"
    "  NSString * result = nil ;\n"
    "  if ((inIndex >= 0) && (inIndex < " ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE_AT_LINE (302)).reader_length (SOURCE_FILE_AT_LINE (302)).add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (302)).reader_string (SOURCE_FILE_AT_LINE (302)).stringValue () ;
  result << ")) {\n"
    "    NSString * kStyleArray [" ;
  result << in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE_AT_LINE (303)).reader_length (SOURCE_FILE_AT_LINE (303)).add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (303)).reader_string (SOURCE_FILE_AT_LINE (303)).stringValue () ;
  result << "] = {\n"
    "      @\"" ;
  result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
  result << "\"" ;
  GALGAS_uint index_14845_ (0) ;
  if (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE_AT_LINE (305)).isValid ()) {
    cEnumerator_lexicalStyleListAST enumerator_14845 (in_LEXIQUE_5F_COMPONENT_5F_ROOT.reader_mLexicalStyleList (SOURCE_FILE_AT_LINE (305)), kEnumeration_up) ;
    while (enumerator_14845.hasCurrentObject ()) {
      result << ",\n"
        "      @\"" ;
      result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
      result << "-" ;
      result << enumerator_14845.current_mName (HERE).reader_string (SOURCE_FILE_AT_LINE (306)).stringValue () ;
      result << "\"" ;
      index_14845_.increment () ;
      enumerator_14845.gotoNextObject () ;
    }
  }
  result << "\n"
    "    } ;\n"
    "    result = kStyleArray [inIndex] ;\n"
    "  }\n"
    "  return result ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "//                                                                             *\n"
    "//         L E X I Q U E   I D E N T I F I E R                                 *\n"
    "//                                                                             *\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "- (NSString *) lexiqueIdentifier {\n"
    "  return @\"" ;
  result << in_LEXIQUE_5F_CLASS_5F_NAME.stringValue () ;
  result << "\" ;\n"
    "}\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "@end\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                      Routine 'parseLexiqueComponent'                      *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_parseLexiqueComponent (const GALGAS_lstring constinArgument_inSourceFile,
                                    GALGAS_parsedComponentStruct & ioArgument_ioParsedComponentStruct,
                                    GALGAS_lexiqueComponentAST & outArgument_outLexiqueComponentRoot,
                                    C_Compiler * inCompiler
                                    COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outLexiqueComponentRoot.drop () ; // Release 'out' argument
  GALGAS_lstring var_key = GALGAS_lstring::constructor_new (constinArgument_inSourceFile.reader_string (SOURCE_FILE_AT_LINE (790)).reader_lastPathComponent (SOURCE_FILE_AT_LINE (790)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (790)), constinArgument_inSourceFile.reader_location (SOURCE_FILE_AT_LINE (790)) COMMA_SOURCE_FILE_AT_LINE (790)) ;
  const enumGalgasBool test_0 = ioArgument_ioParsedComponentStruct.reader_mParsedLexiqueComponentMap (SOURCE_FILE_AT_LINE (791)).reader_hasKey (var_key.reader_string (SOURCE_FILE_AT_LINE (791)) COMMA_SOURCE_FILE_AT_LINE (791)).boolEnum () ;
  if (kBoolTrue == test_0) {
    ioArgument_ioParsedComponentStruct.reader_mParsedLexiqueComponentMap (SOURCE_FILE_AT_LINE (792)).method_searchKey (var_key, outArgument_outLexiqueComponentRoot, inCompiler COMMA_SOURCE_FILE_AT_LINE (792)) ;
  }else if (kBoolFalse == test_0) {
    {
    cGrammar_lexiqueLL_31_grammar::_performSourceFileParsing_ (inCompiler, constinArgument_inSourceFile, outArgument_outLexiqueComponentRoot COMMA_SOURCE_FILE_AT_LINE (794)) ;
    }
    {
    ioArgument_ioParsedComponentStruct.mAttribute_mParsedLexiqueComponentMap.modifier_insertKey (var_key, outArgument_outLexiqueComponentRoot, inCompiler COMMA_SOURCE_FILE_AT_LINE (795)) ;
    }
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                    Once function 'buildLexicalTypeMap'                    *
//                                                                             *
//-----------------------------------------------------------------------------*

static GALGAS_lexicalTypeMap onceFunction_buildLexicalTypeMap (C_Compiler * inCompiler
                                                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_lexicalTypeMap result_outLexicalTypeMap ; // Returned variable
  result_outLexicalTypeMap = GALGAS_lexicalTypeMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (806)) ;
  {
  result_outLexicalTypeMap.modifier_insertKey (GALGAS_lstring::constructor_new (GALGAS_string ("string"), inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (807)), GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_string (SOURCE_FILE_AT_LINE (807)), inCompiler COMMA_SOURCE_FILE_AT_LINE (807)) ;
  }
  {
  result_outLexicalTypeMap.modifier_insertKey (GALGAS_lstring::constructor_new (GALGAS_string ("char"), inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (808)), GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_char (SOURCE_FILE_AT_LINE (808)), inCompiler COMMA_SOURCE_FILE_AT_LINE (808)) ;
  }
  {
  result_outLexicalTypeMap.modifier_insertKey (GALGAS_lstring::constructor_new (GALGAS_string ("uint"), inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (809)), GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_uint (SOURCE_FILE_AT_LINE (809)), inCompiler COMMA_SOURCE_FILE_AT_LINE (809)) ;
  }
  {
  result_outLexicalTypeMap.modifier_insertKey (GALGAS_lstring::constructor_new (GALGAS_string ("uint64"), inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (810)), GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_uint_36__34_ (SOURCE_FILE_AT_LINE (810)), inCompiler COMMA_SOURCE_FILE_AT_LINE (810)) ;
  }
  {
  result_outLexicalTypeMap.modifier_insertKey (GALGAS_lstring::constructor_new (GALGAS_string ("sint"), inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (811)), GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_sint (SOURCE_FILE_AT_LINE (811)), inCompiler COMMA_SOURCE_FILE_AT_LINE (811)) ;
  }
  {
  result_outLexicalTypeMap.modifier_insertKey (GALGAS_lstring::constructor_new (GALGAS_string ("sint64"), inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (812)), GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_sint_36__34_ (SOURCE_FILE_AT_LINE (812)), inCompiler COMMA_SOURCE_FILE_AT_LINE (812)) ;
  }
  {
  result_outLexicalTypeMap.modifier_insertKey (GALGAS_lstring::constructor_new (GALGAS_string ("double"), inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (813)), GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_double (SOURCE_FILE_AT_LINE (813)), inCompiler COMMA_SOURCE_FILE_AT_LINE (813)) ;
  }
//---
  return result_outLexicalTypeMap ;
}



//-----------------------------------------------------------------------------*
//  Function implementation                                                  *
//-----------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_buildLexicalTypeMap = false ;
static GALGAS_lexicalTypeMap gOnceFunctionResult_buildLexicalTypeMap ;

//-----------------------------------------------------------------------------*

GALGAS_lexicalTypeMap function_buildLexicalTypeMap (C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_buildLexicalTypeMap) {
    gOnceFunctionResult_buildLexicalTypeMap = onceFunction_buildLexicalTypeMap (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_buildLexicalTypeMap = true ;
  }
  return gOnceFunctionResult_buildLexicalTypeMap ;
}

//-----------------------------------------------------------------------------*

static void releaseOnceFunctionResult_buildLexicalTypeMap (void) {
  gOnceFunctionResult_buildLexicalTypeMap.drop () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_buildLexicalTypeMap (NULL,
                                                                 releaseOnceFunctionResult_buildLexicalTypeMap) ;

//-----------------------------------------------------------------------------*
//  Function introspection                                                   *
//-----------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_buildLexicalTypeMap [1] = {
  NULL
} ;

//-----------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_buildLexicalTypeMap (C_Compiler * inCompiler,
                                                                    const cObjectArray & /* inEffectiveParameterArray */,
                                                                    const GALGAS_location & /* inErrorLocation */
                                                                    COMMA_LOCATION_ARGS) {
  return function_buildLexicalTypeMap (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//-----------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_buildLexicalTypeMap ("buildLexicalTypeMap",
                                                                     functionWithGenericHeader_buildLexicalTypeMap,
                                                                     & kTypeDescriptor_GALGAS_lexicalTypeMap,
                                                                     0,
                                                                     functionArgs_buildLexicalTypeMap) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//                    Routine 'buildLexicalAttributeMap'                     *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_buildLexicalAttributeMap (const GALGAS_lexicalTypeMap constinArgument_inLexicalTypeMap,
                                       const GALGAS_lexicalAttributeListAST constinArgument_inLexicalAttributeList,
                                       GALGAS_lexicalAttributeMap & ioArgument_ioLexicalAttributeMap,
                                       C_Compiler * inCompiler
                                       COMMA_UNUSED_LOCATION_ARGS) {
  cEnumerator_lexicalAttributeListAST enumerator_34260 (constinArgument_inLexicalAttributeList, kEnumeration_up) ;
  while (enumerator_34260.hasCurrentObject ()) {
    const enumGalgasBool test_0 = constinArgument_inLexicalTypeMap.reader_hasKey (enumerator_34260.current_mTypeName (HERE).reader_string (SOURCE_FILE_AT_LINE (826)) COMMA_SOURCE_FILE_AT_LINE (826)).boolEnum () ;
    if (kBoolTrue == test_0) {
      GALGAS_lexicalTypeEnum var_lexicalType ;
      constinArgument_inLexicalTypeMap.method_searchKey (enumerator_34260.current_mTypeName (HERE), var_lexicalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (828)) ;
      {
      ioArgument_ioLexicalAttributeMap.modifier_insertKey (enumerator_34260.current_mName (HERE), var_lexicalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (829)) ;
      }
    }else if (kBoolFalse == test_0) {
      GALGAS_string var_m = GALGAS_string::makeEmptyString () ;
      var_m.dotAssign_operation (GALGAS_string ("the @").operator_concat (enumerator_34260.current_mTypeName (HERE).reader_string (SOURCE_FILE_AT_LINE (832)) COMMA_SOURCE_FILE_AT_LINE (832)).operator_concat (GALGAS_string (" type is not a valid lexical attribute type; are allowed:") COMMA_SOURCE_FILE_AT_LINE (832)) COMMA_SOURCE_FILE_AT_LINE (832)) ;
      GALGAS_bool var_firstLoop = GALGAS_bool (true) ;
      cEnumerator_lexicalTypeMap enumerator_34674 (constinArgument_inLexicalTypeMap, kEnumeration_up) ;
      while (enumerator_34674.hasCurrentObject ()) {
        var_m.dotAssign_operation (GALGAS_string (" @").operator_concat (enumerator_34674.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (835)) COMMA_SOURCE_FILE_AT_LINE (835)) COMMA_SOURCE_FILE_AT_LINE (835)) ;
        if (enumerator_34674.hasNextObject ()) {
          var_m.dotAssign_operation (GALGAS_string (",") COMMA_SOURCE_FILE_AT_LINE (837)) ;
        }
        enumerator_34674.gotoNextObject () ;
      }
      GALGAS_location location_1 (enumerator_34260.current_mTypeName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_1, var_m COMMA_SOURCE_FILE_AT_LINE (839)) ;
    }
    enumerator_34260.gotoNextObject () ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                 Routine 'compileLexiqueComponentFromAST'                  *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_compileLexiqueComponentFromAST (const GALGAS_string constinArgument_inComponentNameFromSourceFilePath,
                                             const GALGAS_string constinArgument_inOutputDirectory,
                                             const GALGAS_lexiqueComponentAST constinArgument_inLexiqueComponentRoot,
                                             C_Compiler * inCompiler
                                             COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_lstring var_componentName = constinArgument_inLexiqueComponentRoot.reader_mLexiqueComponentName (SOURCE_FILE_AT_LINE (854)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_componentName.reader_string (SOURCE_FILE_AT_LINE (855)).objectCompare (constinArgument_inComponentNameFromSourceFilePath)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (var_componentName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticWarning (location_1, GALGAS_string ("GALGAS checks the component name ('").operator_concat (var_componentName.reader_string (SOURCE_FILE_AT_LINE (857)) COMMA_SOURCE_FILE_AT_LINE (857)).operator_concat (GALGAS_string ("') against the source file base name ('") COMMA_SOURCE_FILE_AT_LINE (857)).operator_concat (constinArgument_inComponentNameFromSourceFilePath COMMA_SOURCE_FILE_AT_LINE (858)).operator_concat (GALGAS_string ("'): they should be identical") COMMA_SOURCE_FILE_AT_LINE (858)) COMMA_SOURCE_FILE_AT_LINE (856)) ;
  }
  GALGAS_lexicalTypeMap var_lexicalTypeMap = function_buildLexicalTypeMap (inCompiler COMMA_SOURCE_FILE_AT_LINE (862)) ;
  GALGAS_lexicalRoutineMap var_lexicalRoutineMap ;
  {
  routine_buildLexicalRoutineMap (var_lexicalRoutineMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (865)) ;
  }
  cEnumerator_externRoutineListAST enumerator_36080 (constinArgument_inLexiqueComponentRoot.reader_mExternRoutineList (SOURCE_FILE_AT_LINE (867)), kEnumeration_up) ;
  while (enumerator_36080.hasCurrentObject ()) {
    GALGAS_lexicalRoutineFormalArgumentList var_lexicalRoutineFormalArgumentList = GALGAS_lexicalRoutineFormalArgumentList::constructor_emptyList (SOURCE_FILE_AT_LINE (868)) ;
    cEnumerator_lexicalExternRoutineFormalArgumentListAST enumerator_36214 (enumerator_36080.current_mLexicalRoutineFormalArgumentList (HERE), kEnumeration_up) ;
    while (enumerator_36214.hasCurrentObject ()) {
      GALGAS_lexicalTypeEnum var_lexicalFormalArgumentType ;
      var_lexicalTypeMap.method_searchKey (enumerator_36214.current_mLexicalTypeName (HERE), var_lexicalFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (871)) ;
      var_lexicalRoutineFormalArgumentList.addAssign_operation (enumerator_36214.current_mPassingMode (HERE), var_lexicalFormalArgumentType, enumerator_36214.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE_AT_LINE (872)) COMMA_SOURCE_FILE_AT_LINE (872)) ;
      enumerator_36214.gotoNextObject () ;
    }
    {
    var_lexicalRoutineMap.modifier_insertKey (enumerator_36080.current_mRoutineName (HERE), var_lexicalRoutineFormalArgumentList, enumerator_36080.current_mErrorMessageList (HERE), GALGAS_bool (true), inCompiler COMMA_SOURCE_FILE_AT_LINE (874)) ;
    }
    enumerator_36080.gotoNextObject () ;
  }
  GALGAS_lexicalFunctionMap var_lexicalFunctionMap ;
  {
  routine_buildLexicalFunctionMap (var_lexicalFunctionMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (878)) ;
  }
  cEnumerator_externFunctionListAST enumerator_36884 (constinArgument_inLexiqueComponentRoot.reader_mExternFunctionList (SOURCE_FILE_AT_LINE (880)), kEnumeration_up) ;
  while (enumerator_36884.hasCurrentObject ()) {
    GALGAS_lexicalFunctionFormalArgumentList var_lexicalFunctionFormalArgumentList = GALGAS_lexicalFunctionFormalArgumentList::constructor_emptyList (SOURCE_FILE_AT_LINE (881)) ;
    cEnumerator_lexicalExternFunctionFormalArgumentListAST enumerator_37021 (enumerator_36884.current_mLexicalFunctionFormalArgumentList (HERE), kEnumeration_up) ;
    while (enumerator_37021.hasCurrentObject ()) {
      GALGAS_lexicalTypeEnum var_lexicalFormalArgumentType ;
      var_lexicalTypeMap.method_searchKey (enumerator_37021.current_mLexicalTypeName (HERE), var_lexicalFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (884)) ;
      var_lexicalFunctionFormalArgumentList.addAssign_operation (var_lexicalFormalArgumentType, enumerator_37021.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE_AT_LINE (885)) COMMA_SOURCE_FILE_AT_LINE (885)) ;
      enumerator_37021.gotoNextObject () ;
    }
    GALGAS_lexicalTypeEnum var_returnedArgumentType ;
    var_lexicalTypeMap.method_searchKey (enumerator_36884.current_mReturnedTypeName (HERE), var_returnedArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (888)) ;
    {
    var_lexicalFunctionMap.modifier_insertKey (enumerator_36884.current_mFunctionName (HERE), var_lexicalFunctionFormalArgumentList, var_returnedArgumentType, GALGAS_string::makeEmptyString (), GALGAS_bool (true), inCompiler COMMA_SOURCE_FILE_AT_LINE (889)) ;
    }
    enumerator_36884.gotoNextObject () ;
  }
  GALGAS_stringset var_externUnicodeTestFunctions = GALGAS_stringset::constructor_emptySet (SOURCE_FILE_AT_LINE (892)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("unicodeToLower") COMMA_SOURCE_FILE_AT_LINE (893)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("unicodeToUpper") COMMA_SOURCE_FILE_AT_LINE (894)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeLetter") COMMA_SOURCE_FILE_AT_LINE (895)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeMark") COMMA_SOURCE_FILE_AT_LINE (896)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeNumber") COMMA_SOURCE_FILE_AT_LINE (897)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeDecimalDigit") COMMA_SOURCE_FILE_AT_LINE (898)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeASCIIHexDigit") COMMA_SOURCE_FILE_AT_LINE (899)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeSeparator") COMMA_SOURCE_FILE_AT_LINE (900)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeCommand") COMMA_SOURCE_FILE_AT_LINE (901)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodePunctuation") COMMA_SOURCE_FILE_AT_LINE (902)) ;
  var_externUnicodeTestFunctions.addAssign_operation (GALGAS_string ("isUnicodeSymbol") COMMA_SOURCE_FILE_AT_LINE (903)) ;
  GALGAS_lexiqueAnalysisContext var_lexiqueAnalysisContext = GALGAS_lexiqueAnalysisContext::constructor_new (var_lexicalRoutineMap, var_lexicalFunctionMap, GALGAS_lexicalMessageMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (908)), GALGAS_terminalMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (909)), GALGAS_terminalList::constructor_emptyList (SOURCE_FILE_AT_LINE (910)), GALGAS_lexicalAttributeMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (911)), GALGAS_lexicalExplicitTokenListMapMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (912)), GALGAS_stringset::constructor_emptySet (SOURCE_FILE_AT_LINE (913)), GALGAS_templateDelimitorList::constructor_emptyList (SOURCE_FILE_AT_LINE (914)), GALGAS_styleMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (915)), var_externUnicodeTestFunctions COMMA_SOURCE_FILE_AT_LINE (905)) ;
  GALGAS_uint var_styleIndex = GALGAS_uint ((PMUInt32) 1U) ;
  cEnumerator_lexicalStyleListAST enumerator_38838 (constinArgument_inLexiqueComponentRoot.reader_mLexicalStyleList (SOURCE_FILE_AT_LINE (920)), kEnumeration_up) ;
  while (enumerator_38838.hasCurrentObject ()) {
    {
    var_lexiqueAnalysisContext.mAttribute_mStyleMap.modifier_insertKey (enumerator_38838.current_mName (HERE), enumerator_38838.current_mComment (HERE), var_styleIndex, inCompiler COMMA_SOURCE_FILE_AT_LINE (921)) ;
    }
    var_styleIndex.increment_operation (inCompiler COMMA_SOURCE_FILE_AT_LINE (922)) ;
    enumerator_38838.gotoNextObject () ;
  }
  {
  routine_buildLexicalAttributeMap (var_lexicalTypeMap, constinArgument_inLexiqueComponentRoot.reader_mLexicalAttributeList (SOURCE_FILE_AT_LINE (927)), var_lexiqueAnalysisContext.mAttribute_mLexicalAttributeMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (925)) ;
  }
  cEnumerator_terminalDeclarationListAST enumerator_39300 (constinArgument_inLexiqueComponentRoot.reader_mTerminalDeclarationList (SOURCE_FILE_AT_LINE (931)), kEnumeration_up) ;
  while (enumerator_39300.hasCurrentObject ()) {
    GALGAS_uint var_terminalStyleIndex = GALGAS_uint ((PMUInt32) 0U) ;
    const enumGalgasBool test_2 = GALGAS_bool (kIsStrictSup, enumerator_39300.current_mStyle (HERE).reader_string (SOURCE_FILE_AT_LINE (933)).reader_length (SOURCE_FILE_AT_LINE (933)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
    if (kBoolTrue == test_2) {
      GALGAS_lstring joker_39442_0 ; // Joker input parameter
      var_lexiqueAnalysisContext.reader_mStyleMap (SOURCE_FILE_AT_LINE (934)).method_searchKey (enumerator_39300.current_mStyle (HERE), joker_39442_0, var_terminalStyleIndex, inCompiler COMMA_SOURCE_FILE_AT_LINE (934)) ;
    }
    GALGAS_lexicalSentValueList var_argumentTypeList = GALGAS_lexicalSentValueList::constructor_emptyList (SOURCE_FILE_AT_LINE (936)) ;
    cEnumerator_lstringlist enumerator_39567 (enumerator_39300.current_mSentAttributeList (HERE), kEnumeration_up) ;
    while (enumerator_39567.hasCurrentObject ()) {
      GALGAS_lexicalTypeEnum var_attributeLexicalType ;
      var_lexiqueAnalysisContext.mAttribute_mLexicalAttributeMap.method_searchKey (enumerator_39567.current_mValue (HERE), var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (939)) ;
      var_argumentTypeList.addAssign_operation (enumerator_39567.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (940)), var_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (940)) ;
      enumerator_39567.gotoNextObject () ;
    }
    {
    var_lexiqueAnalysisContext.mAttribute_mTerminalMap.modifier_insertKey (enumerator_39300.current_mName (HERE), var_argumentTypeList, inCompiler COMMA_SOURCE_FILE_AT_LINE (942)) ;
    }
    GALGAS_bool var_isEndOfTemplateMark = GALGAS_bool (false) ;
    GALGAS_bool var_atomicSelection = GALGAS_bool (true) ;
    cEnumerator_lstringlist enumerator_39979 (enumerator_39300.current_mOptionList (HERE), kEnumeration_up) ;
    while (enumerator_39979.hasCurrentObject ()) {
      const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, enumerator_39979.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (946)).objectCompare (GALGAS_string ("nonAtomicSelection"))).boolEnum () ;
      if (kBoolTrue == test_3) {
        const enumGalgasBool test_4 = var_atomicSelection.boolEnum () ;
        if (kBoolTrue == test_4) {
          var_atomicSelection = GALGAS_bool (false) ;
        }else if (kBoolFalse == test_4) {
          GALGAS_location location_5 (enumerator_39979.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_5, GALGAS_string ("the 'nonAtomicSelection' feature is already set") COMMA_SOURCE_FILE_AT_LINE (950)) ;
        }
      }else if (kBoolFalse == test_3) {
        const enumGalgasBool test_6 = GALGAS_bool (kIsNotEqual, enumerator_39979.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (952)).objectCompare (GALGAS_string ("templateEndMark"))).boolEnum () ;
        if (kBoolTrue == test_6) {
          GALGAS_location location_7 (enumerator_39979.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_7, GALGAS_string ("only the 'templateEndMark' and 'nonAtomicSelection' features are allowed here") COMMA_SOURCE_FILE_AT_LINE (953)) ;
        }else if (kBoolFalse == test_6) {
          const enumGalgasBool test_8 = var_isEndOfTemplateMark.boolEnum () ;
          if (kBoolTrue == test_8) {
            GALGAS_location location_9 (enumerator_39979.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_9, GALGAS_string ("the 'templateEndMark' feature is already set") COMMA_SOURCE_FILE_AT_LINE (955)) ;
          }else if (kBoolFalse == test_8) {
            var_isEndOfTemplateMark = GALGAS_bool (true) ;
          }
        }
      }
      enumerator_39979.gotoNextObject () ;
    }
    var_lexiqueAnalysisContext.mAttribute_mTerminalList.addAssign_operation (enumerator_39300.current_mName (HERE), var_argumentTypeList, enumerator_39300.current_mSyntaxErrorMessage (HERE).reader_string (SOURCE_FILE_AT_LINE (963)), var_isEndOfTemplateMark, var_atomicSelection, var_terminalStyleIndex COMMA_SOURCE_FILE_AT_LINE (960)) ;
    enumerator_39300.gotoNextObject () ;
  }
  cEnumerator_lexicalListDeclarationListAST enumerator_40836 (constinArgument_inLexiqueComponentRoot.reader_mLexicalListDeclarationList (SOURCE_FILE_AT_LINE (969)), kEnumeration_up) ;
  while (enumerator_40836.hasCurrentObject ()) {
    GALGAS_uint var_terminalStyleIndex = GALGAS_uint ((PMUInt32) 0U) ;
    const enumGalgasBool test_10 = GALGAS_bool (kIsStrictSup, enumerator_40836.current_mStyle (HERE).reader_string (SOURCE_FILE_AT_LINE (971)).reader_length (SOURCE_FILE_AT_LINE (971)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
    if (kBoolTrue == test_10) {
      GALGAS_lstring joker_40978_0 ; // Joker input parameter
      var_lexiqueAnalysisContext.reader_mStyleMap (SOURCE_FILE_AT_LINE (972)).method_searchKey (enumerator_40836.current_mStyle (HERE), joker_40978_0, var_terminalStyleIndex, inCompiler COMMA_SOURCE_FILE_AT_LINE (972)) ;
    }
    GALGAS_lexicalSentValueList var_argumentTypeList = GALGAS_lexicalSentValueList::constructor_emptyList (SOURCE_FILE_AT_LINE (974)) ;
    cEnumerator_lstringlist enumerator_41103 (enumerator_40836.current_mSentAttributeList (HERE), kEnumeration_up) ;
    while (enumerator_41103.hasCurrentObject ()) {
      GALGAS_lexicalTypeEnum var_attributeLexicalType ;
      var_lexiqueAnalysisContext.mAttribute_mLexicalAttributeMap.method_searchKey (enumerator_41103.current_mValue (HERE), var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (977)) ;
      var_argumentTypeList.addAssign_operation (enumerator_41103.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (978)), var_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (978)) ;
      enumerator_41103.gotoNextObject () ;
    }
    GALGAS_lexicalExplicitTokenListMap var_lexicalTokenListMap = GALGAS_lexicalExplicitTokenListMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (980)) ;
    GALGAS_tokenSortedlist var_tokenSortedlist = GALGAS_tokenSortedlist::constructor_emptySortedList (SOURCE_FILE_AT_LINE (981)) ;
    cEnumerator_lexicalListEntryListAST enumerator_41478 (enumerator_40836.current_mEntryList (HERE), kEnumeration_up) ;
    while (enumerator_41478.hasCurrentObject ()) {
      GALGAS_string var_syntaxErrorMessage = enumerator_40836.current_mSyntaxErrorMessage (HERE).reader_string (SOURCE_FILE_AT_LINE (983)).reader_stringByReplacingStringByString (GALGAS_string ("%K"), enumerator_41478.current_mTerminalSpelling (HERE).reader_string (SOURCE_FILE_AT_LINE (983)), inCompiler COMMA_SOURCE_FILE_AT_LINE (983)) ;
      GALGAS_bool var_isEndOfTemplateMark = GALGAS_bool (false) ;
      GALGAS_bool var_atomicSelection = GALGAS_bool (true) ;
      cEnumerator_lstringlist enumerator_41724 (enumerator_41478.current_mFeatureList (HERE), kEnumeration_up) ;
      while (enumerator_41724.hasCurrentObject ()) {
        const enumGalgasBool test_11 = GALGAS_bool (kIsEqual, enumerator_41724.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (987)).objectCompare (GALGAS_string ("nonAtomicSelection"))).boolEnum () ;
        if (kBoolTrue == test_11) {
          const enumGalgasBool test_12 = var_atomicSelection.boolEnum () ;
          if (kBoolTrue == test_12) {
            var_atomicSelection = GALGAS_bool (false) ;
          }else if (kBoolFalse == test_12) {
            GALGAS_location location_13 (enumerator_41724.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_13, GALGAS_string ("the 'nonAtomicSelection' feature is already set") COMMA_SOURCE_FILE_AT_LINE (991)) ;
          }
        }else if (kBoolFalse == test_11) {
          const enumGalgasBool test_14 = GALGAS_bool (kIsNotEqual, enumerator_41724.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (993)).objectCompare (GALGAS_string ("templateEndMark"))).boolEnum () ;
          if (kBoolTrue == test_14) {
            GALGAS_location location_15 (enumerator_41724.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_15, GALGAS_string ("only the 'templateEndMark' and 'nonAtomicSelection' features are allowed here") COMMA_SOURCE_FILE_AT_LINE (994)) ;
          }else if (kBoolFalse == test_14) {
            const enumGalgasBool test_16 = var_isEndOfTemplateMark.boolEnum () ;
            if (kBoolTrue == test_16) {
              GALGAS_location location_17 (enumerator_41724.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
              inCompiler->emitSemanticError (location_17, GALGAS_string ("the 'templateEndMark' feature is already set") COMMA_SOURCE_FILE_AT_LINE (996)) ;
            }else if (kBoolFalse == test_16) {
              var_isEndOfTemplateMark = GALGAS_bool (true) ;
            }
          }
        }
        enumerator_41724.gotoNextObject () ;
      }
      var_lexiqueAnalysisContext.mAttribute_mTerminalList.addAssign_operation (enumerator_41478.current_mTerminalSpelling (HERE), var_argumentTypeList, var_syntaxErrorMessage, var_isEndOfTemplateMark, var_atomicSelection, var_terminalStyleIndex COMMA_SOURCE_FILE_AT_LINE (1001)) ;
      {
      var_lexiqueAnalysisContext.mAttribute_mTerminalMap.modifier_insertKey (enumerator_41478.current_mTerminalSpelling (HERE), var_argumentTypeList, inCompiler COMMA_SOURCE_FILE_AT_LINE (1009)) ;
      }
      {
      var_lexicalTokenListMap.modifier_insertKey (enumerator_41478.current_mEntrySpelling (HERE), enumerator_41478.current_mTerminalSpelling (HERE), enumerator_41478.current_mFeatureList (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (1010)) ;
      }
      var_tokenSortedlist.addAssign_operation (enumerator_41478.current_mEntrySpelling (HERE).reader_string (SOURCE_FILE_AT_LINE (1011)).reader_length (SOURCE_FILE_AT_LINE (1011)), enumerator_41478.current_mEntrySpelling (HERE).reader_string (SOURCE_FILE_AT_LINE (1011)), enumerator_41478.current_mTerminalSpelling (HERE).reader_string (SOURCE_FILE_AT_LINE (1011)) COMMA_SOURCE_FILE_AT_LINE (1011)) ;
      var_lexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (enumerator_41478.current_mEntrySpelling (HERE).reader_string (SOURCE_FILE_AT_LINE (1012)) COMMA_SOURCE_FILE_AT_LINE (1012)) ;
      enumerator_41478.gotoNextObject () ;
    }
    {
    var_lexiqueAnalysisContext.mAttribute_mLexicalTokenListMap.modifier_insertKey (enumerator_40836.current_mName (HERE), var_lexicalTokenListMap, var_tokenSortedlist, GALGAS_bool (false), inCompiler COMMA_SOURCE_FILE_AT_LINE (1014)) ;
    }
    enumerator_40836.gotoNextObject () ;
  }
  cEnumerator_lexicalMessageDeclarationListAST enumerator_43210 (constinArgument_inLexiqueComponentRoot.reader_mLexicalMessageDeclarationList (SOURCE_FILE_AT_LINE (1017)), kEnumeration_up) ;
  while (enumerator_43210.hasCurrentObject ()) {
    {
    var_lexiqueAnalysisContext.mAttribute_mLexicalMessageMap.modifier_insertKey (enumerator_43210.current_mMessageName (HERE), enumerator_43210.current_mMessageValue (HERE), GALGAS_bool (false), inCompiler COMMA_SOURCE_FILE_AT_LINE (1018)) ;
    }
    enumerator_43210.gotoNextObject () ;
  }
  cEnumerator_lexicalRuleListAST enumerator_43433 (constinArgument_inLexiqueComponentRoot.reader_mLexicalRuleList (SOURCE_FILE_AT_LINE (1021)), kEnumeration_up) ;
  while (enumerator_43433.hasCurrentObject ()) {
    callCategoryMethod_checkLexicalRule ((const cPtr_abstractLexicalRuleAST *) enumerator_43433.current_mLexicalRule (HERE).ptr (), var_lexiqueAnalysisContext, inCompiler COMMA_SOURCE_FILE_AT_LINE (1022)) ;
    enumerator_43433.gotoNextObject () ;
  }
  cEnumerator_lexicalMessageMap enumerator_43635 (var_lexiqueAnalysisContext.reader_mLexicalMessageMap (SOURCE_FILE_AT_LINE (1025)), kEnumeration_up) ;
  while (enumerator_43635.hasCurrentObject ()) {
    const enumGalgasBool test_18 = enumerator_43635.current_mMessageIsUsed (HERE).operator_not (SOURCE_FILE_AT_LINE (1026)).boolEnum () ;
    if (kBoolTrue == test_18) {
      GALGAS_location location_19 (enumerator_43635.current_lkey (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticWarning (location_19, GALGAS_string ("unused message") COMMA_SOURCE_FILE_AT_LINE (1027)) ;
    }
    enumerator_43635.gotoNextObject () ;
  }
  cEnumerator_metamodelTemplateDelimitorListAST enumerator_43855 (constinArgument_inLexiqueComponentRoot.reader_mTemplateDelimitorList (SOURCE_FILE_AT_LINE (1031)), kEnumeration_up) ;
  while (enumerator_43855.hasCurrentObject ()) {
    var_lexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (enumerator_43855.current_mStartString (HERE).reader_string (SOURCE_FILE_AT_LINE (1032)) COMMA_SOURCE_FILE_AT_LINE (1032)) ;
    var_lexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (enumerator_43855.current_mEndString (HERE).reader_string (SOURCE_FILE_AT_LINE (1033)) COMMA_SOURCE_FILE_AT_LINE (1033)) ;
    GALGAS_bool var_preservesStartDelimiter = GALGAS_bool (false) ;
    cEnumerator_lstringlist enumerator_44083 (enumerator_43855.current_mOptionList (HERE), kEnumeration_up) ;
    while (enumerator_44083.hasCurrentObject ()) {
      const enumGalgasBool test_20 = GALGAS_bool (kIsNotEqual, enumerator_44083.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (1036)).objectCompare (GALGAS_string ("preserved"))).boolEnum () ;
      if (kBoolTrue == test_20) {
        GALGAS_location location_21 (enumerator_44083.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_21, GALGAS_string ("only the 'preserved' feature is allowed here") COMMA_SOURCE_FILE_AT_LINE (1037)) ;
      }else if (kBoolFalse == test_20) {
        const enumGalgasBool test_22 = var_preservesStartDelimiter.boolEnum () ;
        if (kBoolTrue == test_22) {
          GALGAS_location location_23 (enumerator_44083.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_23, GALGAS_string ("the 'preserved' feature is already set") COMMA_SOURCE_FILE_AT_LINE (1039)) ;
        }else if (kBoolFalse == test_22) {
          var_preservesStartDelimiter = GALGAS_bool (true) ;
        }
      }
      enumerator_44083.gotoNextObject () ;
    }
    var_lexiqueAnalysisContext.mAttribute_mTemplateDelimitorList.addAssign_operation (enumerator_43855.current_mStartString (HERE), enumerator_43855.current_mEndString (HERE), var_preservesStartDelimiter COMMA_SOURCE_FILE_AT_LINE (1044)) ;
    enumerator_43855.gotoNextObject () ;
  }
  const enumGalgasBool test_24 = constinArgument_inLexiqueComponentRoot.reader_mIndexingDirectory (SOURCE_FILE_AT_LINE (1047)).mAttribute_location.reader_isNowhere (SOURCE_FILE_AT_LINE (1047)).boolEnum () ;
  if (kBoolTrue == test_24) {
    cEnumerator_indexingListAST enumerator_44697 (constinArgument_inLexiqueComponentRoot.reader_mIndexingListAST (SOURCE_FILE_AT_LINE (1048)), kEnumeration_up) ;
    while (enumerator_44697.hasCurrentObject ()) {
      GALGAS_location location_25 (enumerator_44697.current_mIndexName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_25, GALGAS_string ("indexing declaration requires one 'indexing in \"path\";' declaration") COMMA_SOURCE_FILE_AT_LINE (1049)) ;
      enumerator_44697.gotoNextObject () ;
    }
  }
  GALGAS_stringset var_indexNameSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE_AT_LINE (1052)) ;
  cEnumerator_indexingListAST enumerator_44919 (constinArgument_inLexiqueComponentRoot.reader_mIndexingListAST (SOURCE_FILE_AT_LINE (1053)), kEnumeration_up) ;
  while (enumerator_44919.hasCurrentObject ()) {
    const enumGalgasBool test_26 = var_indexNameSet.reader_hasKey (enumerator_44919.current_mIndexName (HERE).reader_string (SOURCE_FILE_AT_LINE (1054)) COMMA_SOURCE_FILE_AT_LINE (1054)).boolEnum () ;
    if (kBoolTrue == test_26) {
      GALGAS_location location_27 (enumerator_44919.current_mIndexName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_27, GALGAS_string ("the '").operator_concat (enumerator_44919.current_mIndexName (HERE).reader_string (SOURCE_FILE_AT_LINE (1055)) COMMA_SOURCE_FILE_AT_LINE (1055)).operator_concat (GALGAS_string ("' index is already declared") COMMA_SOURCE_FILE_AT_LINE (1055)) COMMA_SOURCE_FILE_AT_LINE (1055)) ;
    }
    var_indexNameSet.addAssign_operation (enumerator_44919.current_mIndexName (HERE).reader_string (SOURCE_FILE_AT_LINE (1057)) COMMA_SOURCE_FILE_AT_LINE (1057)) ;
    enumerator_44919.gotoNextObject () ;
  }
  cEnumerator_templateReplacementListAST enumerator_45252 (constinArgument_inLexiqueComponentRoot.reader_mTemplateReplacementList (SOURCE_FILE_AT_LINE (1060)), kEnumeration_up) ;
  while (enumerator_45252.hasCurrentObject ()) {
    var_lexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (enumerator_45252.current_mMatchString (HERE).reader_string (SOURCE_FILE_AT_LINE (1061)) COMMA_SOURCE_FILE_AT_LINE (1061)) ;
    var_lexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (enumerator_45252.current_mReplacementString (HERE).reader_string (SOURCE_FILE_AT_LINE (1062)) COMMA_SOURCE_FILE_AT_LINE (1062)) ;
    enumerator_45252.gotoNextObject () ;
  }
  GALGAS_string var_lexiqueClassName = var_componentName.reader_string (SOURCE_FILE_AT_LINE (1066)) ;
  const enumGalgasBool test_28 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (1068)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_28) {
    {
    GALGAS_string::class_method_generateFileWithPattern (constinArgument_inOutputDirectory, var_lexiqueClassName.operator_concat (GALGAS_string (".h") COMMA_SOURCE_FILE_AT_LINE (1071)), GALGAS_string ("//"), GALGAS_string ("\n"
      "\n"), GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_newHeaderZone_32_ (inCompiler, var_lexiqueClassName.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (1075)), var_lexiqueAnalysisContext, constinArgument_inLexiqueComponentRoot COMMA_SOURCE_FILE_AT_LINE (1074))), GALGAS_string ("\n"
      "\n"), GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_newHeaderZone_33_ (inCompiler, var_lexiqueClassName.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (1081)), constinArgument_inLexiqueComponentRoot.reader_mLexicalListDeclarationList (SOURCE_FILE_AT_LINE (1082)), var_lexiqueAnalysisContext, constinArgument_inLexiqueComponentRoot.reader_mIndexingListAST (SOURCE_FILE_AT_LINE (1084)) COMMA_SOURCE_FILE_AT_LINE (1080))), inCompiler COMMA_SOURCE_FILE_AT_LINE (1069)) ;
    }
  }
  const enumGalgasBool test_29 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (1089)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_29) {
    {
    GALGAS_string::class_method_generateFileWithPattern (constinArgument_inOutputDirectory, var_lexiqueClassName.operator_concat (GALGAS_string (".cpp") COMMA_SOURCE_FILE_AT_LINE (1092)), GALGAS_string ("//"), GALGAS_string ("\n"
      "\n"), GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_newImplementationZone_32_ (inCompiler, var_lexiqueClassName.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (1096)), var_lexiqueAnalysisContext.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (1097)), var_lexiqueAnalysisContext.reader_mLexicalMessageMap (SOURCE_FILE_AT_LINE (1098)), var_lexiqueAnalysisContext.reader_mTerminalList (SOURCE_FILE_AT_LINE (1099)), var_lexiqueAnalysisContext.reader_mLexicalTokenListMap (SOURCE_FILE_AT_LINE (1100)), var_lexiqueAnalysisContext.reader_mUnicodeStringToGenerate (SOURCE_FILE_AT_LINE (1101)), constinArgument_inLexiqueComponentRoot.reader_mLexicalRuleList (SOURCE_FILE_AT_LINE (1102)), var_lexiqueAnalysisContext, constinArgument_inLexiqueComponentRoot COMMA_SOURCE_FILE_AT_LINE (1095))), GALGAS_string ("\n"
      "\n"), GALGAS_string ("\n"
      "\n"), inCompiler COMMA_SOURCE_FILE_AT_LINE (1090)) ;
    }
  }
  const enumGalgasBool test_30 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (1111)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_30) {
    {
    GALGAS_string::class_method_generateFileWithPattern (constinArgument_inOutputDirectory, var_lexiqueClassName.operator_concat (GALGAS_string ("-cocoa.h") COMMA_SOURCE_FILE_AT_LINE (1114)), GALGAS_string ("//"), GALGAS_string ("\n"
      "\n"), GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_cocoaHeaderZone_32_ (inCompiler, var_lexiqueClassName, var_lexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (1117))), GALGAS_string ("\n"
      "\n"), GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_cocoaHeaderZone_33_ (inCompiler, var_lexiqueClassName, var_lexiqueAnalysisContext COMMA_SOURCE_FILE_AT_LINE (1122))), inCompiler COMMA_SOURCE_FILE_AT_LINE (1112)) ;
    }
  }
  const enumGalgasBool test_31 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (1129)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_31) {
    {
    GALGAS_string::class_method_generateFileWithPattern (constinArgument_inOutputDirectory, var_lexiqueClassName.operator_concat (GALGAS_string ("-cocoa.m") COMMA_SOURCE_FILE_AT_LINE (1132)), GALGAS_string ("//"), GALGAS_string ("\n"
      "\n"), GALGAS_string (filewrapperTemplate_lexiqueGenerationTemplates_cocoaImplementationZone_32_ (inCompiler, var_lexiqueClassName, var_lexiqueAnalysisContext.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (1137)), var_lexiqueAnalysisContext.reader_mLexicalMessageMap (SOURCE_FILE_AT_LINE (1138)), var_lexiqueAnalysisContext.reader_mTerminalList (SOURCE_FILE_AT_LINE (1139)), var_lexiqueAnalysisContext.reader_mUnicodeStringToGenerate (SOURCE_FILE_AT_LINE (1140)), constinArgument_inLexiqueComponentRoot.reader_mLexicalRuleList (SOURCE_FILE_AT_LINE (1141)), var_lexiqueAnalysisContext, constinArgument_inLexiqueComponentRoot COMMA_SOURCE_FILE_AT_LINE (1135))), GALGAS_string ("\n"
      "\n"), GALGAS_string ("\n"
      "\n"), inCompiler COMMA_SOURCE_FILE_AT_LINE (1130)) ;
    }
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                Routine 'compileLexiqueComponentFromSource'                *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_compileLexiqueComponentFromSource (const GALGAS_lstring constinArgument_inSourceFile,
                                                const GALGAS_string constinArgument_inOutputDirectory,
                                                GALGAS_parsedComponentStruct & ioArgument_ioParsedComponentStruct,
                                                C_Compiler * inCompiler
                                                COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_lexiqueComponentAST var_lexiqueComponentRoot ;
  {
  routine_parseLexiqueComponent (constinArgument_inSourceFile, ioArgument_ioParsedComponentStruct, var_lexiqueComponentRoot, inCompiler COMMA_SOURCE_FILE_AT_LINE (1161)) ;
  }
  {
  routine_compileLexiqueComponentFromAST (constinArgument_inSourceFile.reader_string (SOURCE_FILE_AT_LINE (1167)).reader_lastPathComponent (SOURCE_FILE_AT_LINE (1167)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (1167)), constinArgument_inOutputDirectory, var_lexiqueComponentRoot, inCompiler COMMA_SOURCE_FILE_AT_LINE (1166)) ;
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//              Category Reader '@lexicalTypeEnum cppTypeName'               *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_cppTypeName (const GALGAS_lexicalTypeEnum & inObject,
                                          C_Compiler * /* inCompiler */
                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      result_outResult = GALGAS_string ("C_String") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      result_outResult = GALGAS_string ("utf32") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      result_outResult = GALGAS_string ("PMUInt32") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      result_outResult = GALGAS_string ("PMUInt64") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      result_outResult = GALGAS_string ("PMSInt32") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      result_outResult = GALGAS_string ("PMSInt64") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      result_outResult = GALGAS_string ("double") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//            Category Reader '@lexicalTypeEnum appendMethodName'            *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_appendMethodName (const GALGAS_lexicalTypeEnum & inObject,
                                               C_Compiler * /* inCompiler */
                                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      result_outResult = GALGAS_string ("appendCLiteralStringConstant") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      result_outResult = GALGAS_string ("appendUnicodeCharacter") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      result_outResult = GALGAS_string ("appendUnsigned") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      result_outResult = GALGAS_string ("appendUnsigned") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      result_outResult = GALGAS_string ("appendSigned") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      result_outResult = GALGAS_string ("appendSigned") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      result_outResult = GALGAS_string ("appendDouble") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//         Category Reader '@lexicalTypeEnum appendArgumentOfMethod'         *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_appendArgumentOfMethod (const GALGAS_lexicalTypeEnum & inObject,
                                                     C_Compiler * /* inCompiler */
                                                     COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      result_outResult = GALGAS_string (" COMMA_HERE") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//             Category Reader '@lexicalTypeEnum initialization'             *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_initialization (const GALGAS_lexicalTypeEnum & inObject,
                                             C_Compiler * /* inCompiler */
                                             COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      result_outResult = GALGAS_string (".setLengthToZero ()") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      result_outResult = GALGAS_string (" = TO_UNICODE (0)") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      result_outResult = GALGAS_string (" = 0.0") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//             Category Reader '@lexicalTypeEnum cocoaTypeName'              *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_cocoaTypeName (const GALGAS_lexicalTypeEnum & inObject,
                                            C_Compiler * /* inCompiler */
                                            COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      result_outResult = GALGAS_string ("NSMutableString *") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      result_outResult = GALGAS_string ("UInt32") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      result_outResult = GALGAS_string ("UInt32") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      result_outResult = GALGAS_string ("UInt64") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      result_outResult = GALGAS_string ("SInt32") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      result_outResult = GALGAS_string ("SInt64") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      result_outResult = GALGAS_string ("double") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//        Category Reader '@lexicalTypeEnum cocoaInitializationCode'         *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_cocoaInitializationCode (const GALGAS_lexicalTypeEnum & inObject,
                                                      C_Compiler * /* inCompiler */
                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      result_outResult = GALGAS_string ("[[NSMutableString alloc] init]") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      result_outResult = GALGAS_string ("0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      result_outResult = GALGAS_string ("0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      result_outResult = GALGAS_string ("0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      result_outResult = GALGAS_string ("0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      result_outResult = GALGAS_string ("0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      result_outResult = GALGAS_string ("0.0") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//            Category Reader '@lexicalTypeEnum cocoaResetPrefix'            *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_cocoaResetPrefix (const GALGAS_lexicalTypeEnum & inObject,
                                               C_Compiler * /* inCompiler */
                                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      result_outResult = GALGAS_string ("[") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      result_outResult = GALGAS_string::makeEmptyString () ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//               Category Reader '@lexicalTypeEnum cocoaReset'               *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string categoryReader_cocoaReset (const GALGAS_lexicalTypeEnum & inObject,
                                         C_Compiler * /* inCompiler */
                                         COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  //--- @selfCopyInExpressionForGeneration
  const GALGAS_lexicalTypeEnum temp_0 = inObject ;
  if (temp_0.isValid ()) {
    switch (temp_0.enumValue ()) {
    case GALGAS_lexicalTypeEnum::kNotBuilt:
      break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_string: {
      result_outResult = GALGAS_string (" setString:@\"\"]") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_char: {
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint: {
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_uint_36__34_: {
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint: {
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_sint_36__34_: {
      result_outResult = GALGAS_string (" = 0") ;
      } break ;
    case GALGAS_lexicalTypeEnum::kEnum_lexicalType_5F_double: {
      result_outResult = GALGAS_string (" = 0.0") ;
      } break ;
    }
  }
//---
  return result_outResult ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//Abstract category method '@lexicalSendDefaultActionAST checkLexicalDefaultAction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_lexicalSendDefaultActionAST_checkLexicalDefaultAction> gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalDefaultAction (const PMSInt32 inClassIndex,
                                                    categoryMethodSignature_lexicalSendDefaultActionAST_checkLexicalDefaultAction inMethod) {
  gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_lexicalSendDefaultActionAST_checkLexicalDefaultAction (void) {
  gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalSendDefaultActionAST_checkLexicalDefaultAction (NULL,
                                                                                  freeCategoryMethod_lexicalSendDefaultActionAST_checkLexicalDefaultAction) ;

//-----------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalDefaultAction (const cPtr_lexicalSendDefaultActionAST * inObject,
                                                   GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_lexicalSendDefaultActionAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_lexicalSendDefaultActionAST_checkLexicalDefaultAction f = NULL ;
    if (classIndex < gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction.count ()) {
      f = gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction.count ()) {
           f = gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_lexicalSendDefaultActionAST_checkLexicalDefaultAction.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioLexiqueAnalysisContext, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalSendTerminalByDefaultAST checkLexicalDefaultAction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalSendTerminalByDefaultAST_checkLexicalDefaultAction (const cPtr_lexicalSendDefaultActionAST * inObject,
                                                                                      GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalSendTerminalByDefaultAST * object = (const cPtr_lexicalSendTerminalByDefaultAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalSendTerminalByDefaultAST) ;
  GALGAS_lexicalSentValueList joker_6899_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mTerminalMap (SOURCE_FILE_AT_LINE (154)).method_searchKey (object->mAttribute_mDefaultSentTerminal, joker_6899_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (154)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalSendTerminalByDefaultAST_checkLexicalDefaultAction (void) {
  enterCategoryMethod_checkLexicalDefaultAction (kTypeDescriptor_GALGAS_lexicalSendTerminalByDefaultAST.mSlotID,
                                                 categoryMethod_lexicalSendTerminalByDefaultAST_checkLexicalDefaultAction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalSendTerminalByDefaultAST_checkLexicalDefaultAction (defineCategoryMethod_lexicalSendTerminalByDefaultAST_checkLexicalDefaultAction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalErrorByDefaultAST checkLexicalDefaultAction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalErrorByDefaultAST_checkLexicalDefaultAction (const cPtr_lexicalSendDefaultActionAST * inObject,
                                                                               GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalErrorByDefaultAST * object = (const cPtr_lexicalErrorByDefaultAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalErrorByDefaultAST) ;
  // index 1: attribute 'mLexicalMessage', type @lstring
  // index 2: attribute 'mMessageIsUsed', type @bool
  cMapElement_lexicalMessageMap * objectArray_7126 = (cMapElement_lexicalMessageMap *) ioArgument_ioLexiqueAnalysisContext.mAttribute_mLexicalMessageMap.readWriteAccessForWithInstruction_searchKey (inCompiler, object->mAttribute_mDefaultErrorMessageName COMMA_SOURCE_FILE_AT_LINE (162)) ;
  if (NULL != objectArray_7126) {
      macroValidSharedObject (objectArray_7126, cMapElement_lexicalMessageMap) ;
    objectArray_7126->mAttribute_mMessageIsUsed = GALGAS_bool (true) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalErrorByDefaultAST_checkLexicalDefaultAction (void) {
  enterCategoryMethod_checkLexicalDefaultAction (kTypeDescriptor_GALGAS_lexicalErrorByDefaultAST.mSlotID,
                                                 categoryMethod_lexicalErrorByDefaultAST_checkLexicalDefaultAction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalErrorByDefaultAST_checkLexicalDefaultAction (defineCategoryMethod_lexicalErrorByDefaultAST_checkLexicalDefaultAction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//  Abstract category method '@lexicalExpressionAST checkLexicalExpression'  *
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_lexicalExpressionAST_checkLexicalExpression> gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalExpression (const PMSInt32 inClassIndex,
                                                 categoryMethodSignature_lexicalExpressionAST_checkLexicalExpression inMethod) {
  gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_lexicalExpressionAST_checkLexicalExpression (void) {
  gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalExpressionAST_checkLexicalExpression (NULL,
                                                                        freeCategoryMethod_lexicalExpressionAST_checkLexicalExpression) ;

//-----------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalExpression (const cPtr_lexicalExpressionAST * inObject,
                                                GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_lexicalExpressionAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_lexicalExpressionAST_checkLexicalExpression f = NULL ;
    if (classIndex < gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression.count ()) {
      f = gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression.count ()) {
           f = gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_lexicalExpressionAST_checkLexicalExpression.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioLexiqueAnalysisContext, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalOrExpressionAST checkLexicalExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalOrExpressionAST_checkLexicalExpression (const cPtr_lexicalExpressionAST * inObject,
                                                                          GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalOrExpressionAST * object = (const cPtr_lexicalOrExpressionAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalOrExpressionAST) ;
  callCategoryMethod_checkLexicalExpression ((const cPtr_lexicalExpressionAST *) object->mAttribute_mLeftOperand.ptr (), ioArgument_ioLexiqueAnalysisContext, inCompiler COMMA_SOURCE_FILE_AT_LINE (180)) ;
  callCategoryMethod_checkLexicalExpression ((const cPtr_lexicalExpressionAST *) object->mAttribute_mRightOperand.ptr (), ioArgument_ioLexiqueAnalysisContext, inCompiler COMMA_SOURCE_FILE_AT_LINE (181)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalOrExpressionAST_checkLexicalExpression (void) {
  enterCategoryMethod_checkLexicalExpression (kTypeDescriptor_GALGAS_lexicalOrExpressionAST.mSlotID,
                                              categoryMethod_lexicalOrExpressionAST_checkLexicalExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalOrExpressionAST_checkLexicalExpression (defineCategoryMethod_lexicalOrExpressionAST_checkLexicalExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalCharacterMatchAST checkLexicalExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalCharacterMatchAST_checkLexicalExpression (const cPtr_lexicalExpressionAST * /* inObject */,
                                                                            GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                            C_Compiler * /* inCompiler */
                                                                            COMMA_UNUSED_LOCATION_ARGS) {
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalCharacterMatchAST_checkLexicalExpression (void) {
  enterCategoryMethod_checkLexicalExpression (kTypeDescriptor_GALGAS_lexicalCharacterMatchAST.mSlotID,
                                              categoryMethod_lexicalCharacterMatchAST_checkLexicalExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalCharacterMatchAST_checkLexicalExpression (defineCategoryMethod_lexicalCharacterMatchAST_checkLexicalExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalCharacterSetMatchAST checkLexicalExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalCharacterSetMatchAST_checkLexicalExpression (const cPtr_lexicalExpressionAST * inObject,
                                                                               GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalCharacterSetMatchAST * object = (const cPtr_lexicalCharacterSetMatchAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalCharacterSetMatchAST) ;
  const enumGalgasBool test_0 = ioArgument_ioLexiqueAnalysisContext.mAttribute_mExternUnicodeTestFunctions.reader_hasKey (object->mAttribute_mCharacterSetName.reader_string (SOURCE_FILE_AT_LINE (196)) COMMA_SOURCE_FILE_AT_LINE (196)).operator_not (SOURCE_FILE_AT_LINE (196)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_string var_s = GALGAS_string ("undefined test function; available functions are:") ;
    cEnumerator_stringset enumerator_8654 (ioArgument_ioLexiqueAnalysisContext.mAttribute_mExternUnicodeTestFunctions, kEnumeration_up) ;
    while (enumerator_8654.hasCurrentObject ()) {
      var_s.dotAssign_operation (GALGAS_string ("\n"
        "-  ").operator_concat (enumerator_8654.current_key (HERE) COMMA_SOURCE_FILE_AT_LINE (199)) COMMA_SOURCE_FILE_AT_LINE (199)) ;
      enumerator_8654.gotoNextObject () ;
    }
    GALGAS_location location_1 (object->mAttribute_mCharacterSetName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, var_s COMMA_SOURCE_FILE_AT_LINE (201)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalCharacterSetMatchAST_checkLexicalExpression (void) {
  enterCategoryMethod_checkLexicalExpression (kTypeDescriptor_GALGAS_lexicalCharacterSetMatchAST.mSlotID,
                                              categoryMethod_lexicalCharacterSetMatchAST_checkLexicalExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalCharacterSetMatchAST_checkLexicalExpression (defineCategoryMethod_lexicalCharacterSetMatchAST_checkLexicalExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalCharacterIntervalMatchAST checkLexicalExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalCharacterIntervalMatchAST_checkLexicalExpression (const cPtr_lexicalExpressionAST * /* inObject */,
                                                                                    GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                                    C_Compiler * /* inCompiler */
                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalCharacterIntervalMatchAST_checkLexicalExpression (void) {
  enterCategoryMethod_checkLexicalExpression (kTypeDescriptor_GALGAS_lexicalCharacterIntervalMatchAST.mSlotID,
                                              categoryMethod_lexicalCharacterIntervalMatchAST_checkLexicalExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalCharacterIntervalMatchAST_checkLexicalExpression (defineCategoryMethod_lexicalCharacterIntervalMatchAST_checkLexicalExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalStringMatchAST checkLexicalExpression' *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalStringMatchAST_checkLexicalExpression (const cPtr_lexicalExpressionAST * inObject,
                                                                         GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                         C_Compiler * /* inCompiler */
                                                                         COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalStringMatchAST * object = (const cPtr_lexicalStringMatchAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalStringMatchAST) ;
  ioArgument_ioLexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (object->mAttribute_mString.reader_string (SOURCE_FILE_AT_LINE (217)) COMMA_SOURCE_FILE_AT_LINE (217)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalStringMatchAST_checkLexicalExpression (void) {
  enterCategoryMethod_checkLexicalExpression (kTypeDescriptor_GALGAS_lexicalStringMatchAST.mSlotID,
                                              categoryMethod_lexicalStringMatchAST_checkLexicalExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalStringMatchAST_checkLexicalExpression (defineCategoryMethod_lexicalStringMatchAST_checkLexicalExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalStringNotMatchAST checkLexicalExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalStringNotMatchAST_checkLexicalExpression (const cPtr_lexicalExpressionAST * inObject,
                                                                            GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalStringNotMatchAST * object = (const cPtr_lexicalStringNotMatchAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalStringNotMatchAST) ;
  ioArgument_ioLexiqueAnalysisContext.mAttribute_mUnicodeStringToGenerate.addAssign_operation (object->mAttribute_mString.reader_string (SOURCE_FILE_AT_LINE (225)) COMMA_SOURCE_FILE_AT_LINE (225)) ;
  // index 1: attribute 'mLexicalMessage', type @lstring
  // index 2: attribute 'mMessageIsUsed', type @bool
  cMapElement_lexicalMessageMap * objectArray_9557 = (cMapElement_lexicalMessageMap *) ioArgument_ioLexiqueAnalysisContext.mAttribute_mLexicalMessageMap.readWriteAccessForWithInstruction_searchKey (inCompiler, object->mAttribute_mErrorMessage COMMA_SOURCE_FILE_AT_LINE (226)) ;
  if (NULL != objectArray_9557) {
      macroValidSharedObject (objectArray_9557, cMapElement_lexicalMessageMap) ;
    objectArray_9557->mAttribute_mMessageIsUsed = GALGAS_bool (true) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalStringNotMatchAST_checkLexicalExpression (void) {
  enterCategoryMethod_checkLexicalExpression (kTypeDescriptor_GALGAS_lexicalStringNotMatchAST.mSlotID,
                                              categoryMethod_lexicalStringNotMatchAST_checkLexicalExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalStringNotMatchAST_checkLexicalExpression (defineCategoryMethod_lexicalStringNotMatchAST_checkLexicalExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Abstract category method '@lexicalRoutineOrFunctionFormalInputArgumentAST checkLexicalFunctionCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument> gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalFunctionCallArgument (const PMSInt32 inClassIndex,
                                                           categoryMethodSignature_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument inMethod) {
  gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument (void) {
  gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument (NULL,
                                                                                                            freeCategoryMethod_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument) ;

//-----------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalFunctionCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                          GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                          GALGAS_lexicalTypeEnum in_inLexicalRoutineFormalArgumentType,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument f = NULL ;
    if (classIndex < gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument.count ()) {
      f = gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument.count ()) {
           f = gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioLexiqueAnalysisContext, in_inLexicalRoutineFormalArgumentType, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalAttributeInputArgumentAST checkLexicalFunctionCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalAttributeInputArgumentAST_checkLexicalFunctionCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                              GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                              GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                              C_Compiler * inCompiler
                                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalAttributeInputArgumentAST * object = (const cPtr_lexicalAttributeInputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalAttributeInputArgumentAST) ;
  GALGAS_lexicalTypeEnum var_attributeLexicalType ;
  ioArgument_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (248)).method_searchKey (object->mAttribute_mAttributeName, var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (248)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_attributeLexicalType.objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mAttributeName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("type error, attribute type is @").operator_concat (categoryReader_lexicalTypeBaseName (var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (255)) COMMA_SOURCE_FILE_AT_LINE (254)).operator_concat (GALGAS_string (" type, but lexical routine prototype requires @") COMMA_SOURCE_FILE_AT_LINE (255)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (257)) COMMA_SOURCE_FILE_AT_LINE (256)).operator_concat (GALGAS_string (" type") COMMA_SOURCE_FILE_AT_LINE (257)) COMMA_SOURCE_FILE_AT_LINE (254)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalAttributeInputArgumentAST_checkLexicalFunctionCallArgument (void) {
  enterCategoryMethod_checkLexicalFunctionCallArgument (kTypeDescriptor_GALGAS_lexicalAttributeInputArgumentAST.mSlotID,
                                                        categoryMethod_lexicalAttributeInputArgumentAST_checkLexicalFunctionCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalAttributeInputArgumentAST_checkLexicalFunctionCallArgument (defineCategoryMethod_lexicalAttributeInputArgumentAST_checkLexicalFunctionCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalCharacterInputArgumentAST checkLexicalFunctionCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalCharacterInputArgumentAST_checkLexicalFunctionCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                              GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                                              GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                              C_Compiler * inCompiler
                                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalCharacterInputArgumentAST * object = (const cPtr_lexicalCharacterInputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalCharacterInputArgumentAST) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_char (SOURCE_FILE_AT_LINE (269)).objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mCharacter.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("type error, a literal character has @char").operator_concat (GALGAS_string (" type, but lexical routine prototype requires an @") COMMA_SOURCE_FILE_AT_LINE (270)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (272)) COMMA_SOURCE_FILE_AT_LINE (271)).operator_concat (GALGAS_string (" type value") COMMA_SOURCE_FILE_AT_LINE (272)) COMMA_SOURCE_FILE_AT_LINE (270)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalCharacterInputArgumentAST_checkLexicalFunctionCallArgument (void) {
  enterCategoryMethod_checkLexicalFunctionCallArgument (kTypeDescriptor_GALGAS_lexicalCharacterInputArgumentAST.mSlotID,
                                                        categoryMethod_lexicalCharacterInputArgumentAST_checkLexicalFunctionCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalCharacterInputArgumentAST_checkLexicalFunctionCallArgument (defineCategoryMethod_lexicalCharacterInputArgumentAST_checkLexicalFunctionCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalUnsignedInputArgumentAST checkLexicalFunctionCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalFunctionCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                             GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                                             GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                             C_Compiler * inCompiler
                                                                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalUnsignedInputArgumentAST * object = (const cPtr_lexicalUnsignedInputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalUnsignedInputArgumentAST) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_uint (SOURCE_FILE_AT_LINE (284)).objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mUnsigned.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("type error, a literal character has @uint").operator_concat (GALGAS_string (" type, but lexical routine prototype requires an @") COMMA_SOURCE_FILE_AT_LINE (285)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (287)) COMMA_SOURCE_FILE_AT_LINE (286)).operator_concat (GALGAS_string (" type value") COMMA_SOURCE_FILE_AT_LINE (287)) COMMA_SOURCE_FILE_AT_LINE (285)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalFunctionCallArgument (void) {
  enterCategoryMethod_checkLexicalFunctionCallArgument (kTypeDescriptor_GALGAS_lexicalUnsignedInputArgumentAST.mSlotID,
                                                        categoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalFunctionCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalUnsignedInputArgumentAST_checkLexicalFunctionCallArgument (defineCategoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalFunctionCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalCurrentCharacterInputArgumentAST checkLexicalFunctionCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalFunctionCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                                     GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                                                     GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                                     C_Compiler * inCompiler
                                                                                                     COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalCurrentCharacterInputArgumentAST * object = (const cPtr_lexicalCurrentCharacterInputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalCurrentCharacterInputArgumentAST) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_char (SOURCE_FILE_AT_LINE (299)).objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (object->mAttribute_mLocation, GALGAS_string ("type error, current character value has @char").operator_concat (GALGAS_string (" type, but lexical routine prototype requires an @") COMMA_SOURCE_FILE_AT_LINE (300)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (302)) COMMA_SOURCE_FILE_AT_LINE (301)).operator_concat (GALGAS_string (" type value") COMMA_SOURCE_FILE_AT_LINE (302)) COMMA_SOURCE_FILE_AT_LINE (300)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalFunctionCallArgument (void) {
  enterCategoryMethod_checkLexicalFunctionCallArgument (kTypeDescriptor_GALGAS_lexicalCurrentCharacterInputArgumentAST.mSlotID,
                                                        categoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalFunctionCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalFunctionCallArgument (defineCategoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalFunctionCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalFunctionInputArgumentAST checkLexicalFunctionCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalFunctionInputArgumentAST_checkLexicalFunctionCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                             GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                             GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                             C_Compiler * inCompiler
                                                                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalFunctionInputArgumentAST * object = (const cPtr_lexicalFunctionInputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalFunctionInputArgumentAST) ;
  GALGAS_lexicalFunctionFormalArgumentList var_lexicalFormalTypeList ;
  GALGAS_lexicalTypeEnum var_returnedLexicalFormalType ;
  GALGAS_string var_replacementFunctionName ;
  GALGAS_bool joker_13423_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mLexicalFunctionMap (SOURCE_FILE_AT_LINE (317)).method_searchKey (object->mAttribute_mFunctionName, var_lexicalFormalTypeList, var_returnedLexicalFormalType, var_replacementFunctionName, joker_13423_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (317)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_replacementFunctionName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mFunctionName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticWarning (location_1, GALGAS_string ("obsolete lexical function, replaced by '").operator_concat (var_replacementFunctionName COMMA_SOURCE_FILE_AT_LINE (326)).operator_concat (GALGAS_string ("'") COMMA_SOURCE_FILE_AT_LINE (326)) COMMA_SOURCE_FILE_AT_LINE (326)) ;
  }
  const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, var_returnedLexicalFormalType.objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_2) {
    GALGAS_location location_3 (object->mAttribute_mFunctionName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_3, GALGAS_string ("type error, the function returns an @").operator_concat (categoryReader_lexicalTypeBaseName (var_returnedLexicalFormalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (331)) COMMA_SOURCE_FILE_AT_LINE (330)).operator_concat (GALGAS_string (" value, but lexical routine prototype requires an @") COMMA_SOURCE_FILE_AT_LINE (331)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (333)) COMMA_SOURCE_FILE_AT_LINE (332)).operator_concat (GALGAS_string (" value") COMMA_SOURCE_FILE_AT_LINE (333)) COMMA_SOURCE_FILE_AT_LINE (330)) ;
  }
  const enumGalgasBool test_4 = GALGAS_bool (kIsNotEqual, var_lexicalFormalTypeList.reader_length (SOURCE_FILE_AT_LINE (337)).objectCompare (object->mAttribute_mFunctionActualArgumentList.reader_length (SOURCE_FILE_AT_LINE (337)))).boolEnum () ;
  if (kBoolTrue == test_4) {
    GALGAS_location location_5 (object->mAttribute_mFunctionName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_5, GALGAS_string ("this lexical function names ").operator_concat (object->mAttribute_mFunctionActualArgumentList.reader_length (SOURCE_FILE_AT_LINE (339)).reader_string (SOURCE_FILE_AT_LINE (339)) COMMA_SOURCE_FILE_AT_LINE (338)).operator_concat (GALGAS_string (" actual argument(s), but the prototype requires ") COMMA_SOURCE_FILE_AT_LINE (339)).operator_concat (var_lexicalFormalTypeList.reader_length (SOURCE_FILE_AT_LINE (341)).reader_string (SOURCE_FILE_AT_LINE (341)) COMMA_SOURCE_FILE_AT_LINE (340)).operator_concat (GALGAS_string (" actual argument(s)") COMMA_SOURCE_FILE_AT_LINE (341)) COMMA_SOURCE_FILE_AT_LINE (338)) ;
  }
  cEnumerator_lexicalFunctionFormalArgumentList enumerator_14424 (var_lexicalFormalTypeList, kEnumeration_up) ;
  cEnumerator_lexicalFunctionCallActualArgumentListAST enumerator_14453 (object->mAttribute_mFunctionActualArgumentList, kEnumeration_up) ;
  while (enumerator_14424.hasCurrentObject () && enumerator_14453.hasCurrentObject ()) {
    callCategoryMethod_checkLexicalFunctionCallArgument ((const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST *) enumerator_14453.current_mLexicalActualInputArgument (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, enumerator_14424.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (345)) ;
    enumerator_14424.gotoNextObject () ;
    enumerator_14453.gotoNextObject () ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalFunctionInputArgumentAST_checkLexicalFunctionCallArgument (void) {
  enterCategoryMethod_checkLexicalFunctionCallArgument (kTypeDescriptor_GALGAS_lexicalFunctionInputArgumentAST.mSlotID,
                                                        categoryMethod_lexicalFunctionInputArgumentAST_checkLexicalFunctionCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalFunctionInputArgumentAST_checkLexicalFunctionCallArgument (defineCategoryMethod_lexicalFunctionInputArgumentAST_checkLexicalFunctionCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Abstract category method '@lexicalRoutineOrFunctionFormalInputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument> gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalRoutineCallArgument (const PMSInt32 inClassIndex,
                                                          categoryMethodSignature_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument inMethod) {
  gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument (void) {
  gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument (NULL,
                                                                                                           freeCategoryMethod_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument) ;

//-----------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalRoutineCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                         GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                         GALGAS_lexicalTypeEnum in_inLexicalRoutineFormalArgumentType,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument f = NULL ;
    if (classIndex < gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument.count ()) {
      f = gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument.count ()) {
           f = gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioLexiqueAnalysisContext, in_inLexicalRoutineFormalArgumentType, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalAttributeInputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalAttributeInputArgumentAST_checkLexicalRoutineCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                             GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                             GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                             C_Compiler * inCompiler
                                                                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalAttributeInputArgumentAST * object = (const cPtr_lexicalAttributeInputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalAttributeInputArgumentAST) ;
  GALGAS_lexicalTypeEnum var_attributeLexicalType ;
  ioArgument_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (369)).method_searchKey (object->mAttribute_mAttributeName, var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (369)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_attributeLexicalType.objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mAttributeName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("type error, attribute type is @").operator_concat (categoryReader_lexicalTypeBaseName (var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (376)) COMMA_SOURCE_FILE_AT_LINE (375)).operator_concat (GALGAS_string (" type, but lexical routine prototype requires @") COMMA_SOURCE_FILE_AT_LINE (376)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (378)) COMMA_SOURCE_FILE_AT_LINE (377)).operator_concat (GALGAS_string (" type") COMMA_SOURCE_FILE_AT_LINE (378)) COMMA_SOURCE_FILE_AT_LINE (375)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalAttributeInputArgumentAST_checkLexicalRoutineCallArgument (void) {
  enterCategoryMethod_checkLexicalRoutineCallArgument (kTypeDescriptor_GALGAS_lexicalAttributeInputArgumentAST.mSlotID,
                                                       categoryMethod_lexicalAttributeInputArgumentAST_checkLexicalRoutineCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalAttributeInputArgumentAST_checkLexicalRoutineCallArgument (defineCategoryMethod_lexicalAttributeInputArgumentAST_checkLexicalRoutineCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalCharacterInputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalCharacterInputArgumentAST_checkLexicalRoutineCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                             GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                                             GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                             C_Compiler * inCompiler
                                                                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalCharacterInputArgumentAST * object = (const cPtr_lexicalCharacterInputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalCharacterInputArgumentAST) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_char (SOURCE_FILE_AT_LINE (390)).objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mCharacter.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("type error, a literal character has @char").operator_concat (GALGAS_string (" type, but lexical routine prototype requires an @") COMMA_SOURCE_FILE_AT_LINE (391)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (393)) COMMA_SOURCE_FILE_AT_LINE (392)).operator_concat (GALGAS_string (" type value") COMMA_SOURCE_FILE_AT_LINE (393)) COMMA_SOURCE_FILE_AT_LINE (391)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalCharacterInputArgumentAST_checkLexicalRoutineCallArgument (void) {
  enterCategoryMethod_checkLexicalRoutineCallArgument (kTypeDescriptor_GALGAS_lexicalCharacterInputArgumentAST.mSlotID,
                                                       categoryMethod_lexicalCharacterInputArgumentAST_checkLexicalRoutineCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalCharacterInputArgumentAST_checkLexicalRoutineCallArgument (defineCategoryMethod_lexicalCharacterInputArgumentAST_checkLexicalRoutineCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalUnsignedInputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalRoutineCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                            GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                                            GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                            C_Compiler * inCompiler
                                                                                            COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalUnsignedInputArgumentAST * object = (const cPtr_lexicalUnsignedInputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalUnsignedInputArgumentAST) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_uint (SOURCE_FILE_AT_LINE (405)).objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mUnsigned.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("type error, a literal unsigned value has @uint").operator_concat (GALGAS_string (" type, but lexical routine prototype requires an @") COMMA_SOURCE_FILE_AT_LINE (406)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (408)) COMMA_SOURCE_FILE_AT_LINE (407)).operator_concat (GALGAS_string (" type value") COMMA_SOURCE_FILE_AT_LINE (408)) COMMA_SOURCE_FILE_AT_LINE (406)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalRoutineCallArgument (void) {
  enterCategoryMethod_checkLexicalRoutineCallArgument (kTypeDescriptor_GALGAS_lexicalUnsignedInputArgumentAST.mSlotID,
                                                       categoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalRoutineCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalUnsignedInputArgumentAST_checkLexicalRoutineCallArgument (defineCategoryMethod_lexicalUnsignedInputArgumentAST_checkLexicalRoutineCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalCurrentCharacterInputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalRoutineCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                                    GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                                                    GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                                    C_Compiler * inCompiler
                                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalCurrentCharacterInputArgumentAST * object = (const cPtr_lexicalCurrentCharacterInputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalCurrentCharacterInputArgumentAST) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, GALGAS_lexicalTypeEnum::constructor_lexicalType_5F_char (SOURCE_FILE_AT_LINE (420)).objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (object->mAttribute_mLocation, GALGAS_string ("type error, current character value has @char").operator_concat (GALGAS_string (" type, but lexical routine prototype requires an @") COMMA_SOURCE_FILE_AT_LINE (421)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (423)) COMMA_SOURCE_FILE_AT_LINE (422)).operator_concat (GALGAS_string (" type value") COMMA_SOURCE_FILE_AT_LINE (423)) COMMA_SOURCE_FILE_AT_LINE (421)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalRoutineCallArgument (void) {
  enterCategoryMethod_checkLexicalRoutineCallArgument (kTypeDescriptor_GALGAS_lexicalCurrentCharacterInputArgumentAST.mSlotID,
                                                       categoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalRoutineCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalRoutineCallArgument (defineCategoryMethod_lexicalCurrentCharacterInputArgumentAST_checkLexicalRoutineCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalFunctionInputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalFunctionInputArgumentAST_checkLexicalRoutineCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                            GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                            GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                            C_Compiler * inCompiler
                                                                                            COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalFunctionInputArgumentAST * object = (const cPtr_lexicalFunctionInputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalFunctionInputArgumentAST) ;
  GALGAS_lexicalFunctionFormalArgumentList var_lexicalFormalTypeList ;
  GALGAS_lexicalTypeEnum var_returnedLexicalFormalType ;
  GALGAS_string var_replacementFunctionName ;
  GALGAS_bool joker_18347_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mLexicalFunctionMap (SOURCE_FILE_AT_LINE (438)).method_searchKey (object->mAttribute_mFunctionName, var_lexicalFormalTypeList, var_returnedLexicalFormalType, var_replacementFunctionName, joker_18347_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (438)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_replacementFunctionName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mFunctionName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticWarning (location_1, GALGAS_string ("obsolete lexical function, replaced by '").operator_concat (var_replacementFunctionName COMMA_SOURCE_FILE_AT_LINE (447)).operator_concat (GALGAS_string ("'") COMMA_SOURCE_FILE_AT_LINE (447)) COMMA_SOURCE_FILE_AT_LINE (447)) ;
  }
  const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, var_returnedLexicalFormalType.objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_2) {
    GALGAS_location location_3 (object->mAttribute_mFunctionName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_3, GALGAS_string ("type error, the function returns an @").operator_concat (categoryReader_lexicalTypeBaseName (var_returnedLexicalFormalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (452)) COMMA_SOURCE_FILE_AT_LINE (451)).operator_concat (GALGAS_string (" value, but lexical routine prototype requires an @") COMMA_SOURCE_FILE_AT_LINE (452)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (454)) COMMA_SOURCE_FILE_AT_LINE (453)).operator_concat (GALGAS_string (" value") COMMA_SOURCE_FILE_AT_LINE (454)) COMMA_SOURCE_FILE_AT_LINE (451)) ;
  }
  const enumGalgasBool test_4 = GALGAS_bool (kIsNotEqual, var_lexicalFormalTypeList.reader_length (SOURCE_FILE_AT_LINE (458)).objectCompare (object->mAttribute_mFunctionActualArgumentList.reader_length (SOURCE_FILE_AT_LINE (458)))).boolEnum () ;
  if (kBoolTrue == test_4) {
    GALGAS_location location_5 (object->mAttribute_mFunctionName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_5, GALGAS_string ("this lexical function names ").operator_concat (object->mAttribute_mFunctionActualArgumentList.reader_length (SOURCE_FILE_AT_LINE (460)).reader_string (SOURCE_FILE_AT_LINE (460)) COMMA_SOURCE_FILE_AT_LINE (459)).operator_concat (GALGAS_string (" actual argument(s), but the prototype requires ") COMMA_SOURCE_FILE_AT_LINE (460)).operator_concat (var_lexicalFormalTypeList.reader_length (SOURCE_FILE_AT_LINE (462)).reader_string (SOURCE_FILE_AT_LINE (462)) COMMA_SOURCE_FILE_AT_LINE (461)).operator_concat (GALGAS_string (" actual argument(s)") COMMA_SOURCE_FILE_AT_LINE (462)) COMMA_SOURCE_FILE_AT_LINE (459)) ;
  }
  cEnumerator_lexicalFunctionFormalArgumentList enumerator_19348 (var_lexicalFormalTypeList, kEnumeration_up) ;
  cEnumerator_lexicalFunctionCallActualArgumentListAST enumerator_19377 (object->mAttribute_mFunctionActualArgumentList, kEnumeration_up) ;
  while (enumerator_19348.hasCurrentObject () && enumerator_19377.hasCurrentObject ()) {
    callCategoryMethod_checkLexicalFunctionCallArgument ((const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST *) enumerator_19377.current_mLexicalActualInputArgument (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, enumerator_19348.current_mLexicalType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (466)) ;
    enumerator_19348.gotoNextObject () ;
    enumerator_19377.gotoNextObject () ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalFunctionInputArgumentAST_checkLexicalRoutineCallArgument (void) {
  enterCategoryMethod_checkLexicalRoutineCallArgument (kTypeDescriptor_GALGAS_lexicalFunctionInputArgumentAST.mSlotID,
                                                       categoryMethod_lexicalFunctionInputArgumentAST_checkLexicalRoutineCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalFunctionInputArgumentAST_checkLexicalRoutineCallArgument (defineCategoryMethod_lexicalFunctionInputArgumentAST_checkLexicalRoutineCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Abstract category method '@abstractLexicalRoutineActualArgumentAST checkLexicalRoutineCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument> gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalRoutineCallArgument (const PMSInt32 inClassIndex,
                                                          categoryMethodSignature_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument inMethod) {
  gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument (void) {
  gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument (NULL,
                                                                                                    freeCategoryMethod_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument) ;

//-----------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalRoutineCallArgument (const cPtr_abstractLexicalRoutineActualArgumentAST * inObject,
                                                         GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                         GALGAS_lexicalArgumentModeAST in_inLexicalRoutineFormalArgumentMode,
                                                         GALGAS_lexicalTypeEnum in_inLexicalRoutineFormalArgumentType,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_abstractLexicalRoutineActualArgumentAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument f = NULL ;
    if (classIndex < gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument.count ()) {
      f = gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument.count ()) {
           f = gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioLexiqueAnalysisContext, in_inLexicalRoutineFormalArgumentMode, in_inLexicalRoutineFormalArgumentType, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalAttributeInputOutputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalAttributeInputOutputArgumentAST_checkLexicalRoutineCallArgument (const cPtr_abstractLexicalRoutineActualArgumentAST * inObject,
                                                                                                   GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                                   GALGAS_lexicalArgumentModeAST inArgument_inLexicalRoutineFormalArgumentMode,
                                                                                                   GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                                   C_Compiler * inCompiler
                                                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalAttributeInputOutputArgumentAST * object = (const cPtr_lexicalAttributeInputOutputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalAttributeInputOutputArgumentAST) ;
  GALGAS_lexicalTypeEnum var_attributeLexicalType ;
  ioArgument_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (492)).method_searchKey (object->mAttribute_mAttributeName, var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (492)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_attributeLexicalType.objectCompare (inArgument_inLexicalRoutineFormalArgumentType)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mAttributeName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("type error, attribute type is @").operator_concat (categoryReader_lexicalTypeBaseName (var_attributeLexicalType, inCompiler COMMA_SOURCE_FILE_AT_LINE (499)) COMMA_SOURCE_FILE_AT_LINE (498)).operator_concat (GALGAS_string (" type, but lexical routine prototype requires @") COMMA_SOURCE_FILE_AT_LINE (499)).operator_concat (categoryReader_lexicalTypeBaseName (inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (501)) COMMA_SOURCE_FILE_AT_LINE (500)).operator_concat (GALGAS_string (" type") COMMA_SOURCE_FILE_AT_LINE (501)) COMMA_SOURCE_FILE_AT_LINE (498)) ;
  }
  const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, inArgument_inLexicalRoutineFormalArgumentMode.objectCompare (GALGAS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (SOURCE_FILE_AT_LINE (505)))).boolEnum () ;
  if (kBoolTrue == test_2) {
    inCompiler->emitSemanticError (object->mAttribute_mActualPassingModeLocation, GALGAS_string ("the output mode (!) is required here, not an output/input mode") COMMA_SOURCE_FILE_AT_LINE (506)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalAttributeInputOutputArgumentAST_checkLexicalRoutineCallArgument (void) {
  enterCategoryMethod_checkLexicalRoutineCallArgument (kTypeDescriptor_GALGAS_lexicalAttributeInputOutputArgumentAST.mSlotID,
                                                       categoryMethod_lexicalAttributeInputOutputArgumentAST_checkLexicalRoutineCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalAttributeInputOutputArgumentAST_checkLexicalRoutineCallArgument (defineCategoryMethod_lexicalAttributeInputOutputArgumentAST_checkLexicalRoutineCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalFormalInputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalFormalInputArgumentAST_checkLexicalRoutineCallArgument (const cPtr_abstractLexicalRoutineActualArgumentAST * inObject,
                                                                                          GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                          GALGAS_lexicalArgumentModeAST inArgument_inLexicalRoutineFormalArgumentMode,
                                                                                          GALGAS_lexicalTypeEnum inArgument_inLexicalRoutineFormalArgumentType,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalFormalInputArgumentAST * object = (const cPtr_lexicalFormalInputArgumentAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalFormalInputArgumentAST) ;
  callCategoryMethod_checkLexicalRoutineCallArgument ((const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST *) object->mAttribute_mRoutineOrFunctionFormalInputArgument.ptr (), ioArgument_ioLexiqueAnalysisContext, inArgument_inLexicalRoutineFormalArgumentType, inCompiler COMMA_SOURCE_FILE_AT_LINE (518)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, inArgument_inLexicalRoutineFormalArgumentMode.objectCompare (GALGAS_lexicalArgumentModeAST::constructor_lexicalInputMode (SOURCE_FILE_AT_LINE (523)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (object->mAttribute_mActualPassingModeLocation, GALGAS_string ("the output/input mode (!\?) is required here, not an input mode") COMMA_SOURCE_FILE_AT_LINE (524)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalFormalInputArgumentAST_checkLexicalRoutineCallArgument (void) {
  enterCategoryMethod_checkLexicalRoutineCallArgument (kTypeDescriptor_GALGAS_lexicalFormalInputArgumentAST.mSlotID,
                                                       categoryMethod_lexicalFormalInputArgumentAST_checkLexicalRoutineCallArgument) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalFormalInputArgumentAST_checkLexicalRoutineCallArgument (defineCategoryMethod_lexicalFormalInputArgumentAST_checkLexicalRoutineCallArgument, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
// Abstract category method '@lexicalInstructionAST checkLexicalInstruction' *
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_lexicalInstructionAST_checkLexicalInstruction> gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalInstruction (const PMSInt32 inClassIndex,
                                                  categoryMethodSignature_lexicalInstructionAST_checkLexicalInstruction inMethod) {
  gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_lexicalInstructionAST_checkLexicalInstruction (void) {
  gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalInstructionAST_checkLexicalInstruction (NULL,
                                                                          freeCategoryMethod_lexicalInstructionAST_checkLexicalInstruction) ;

//-----------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                 GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                 GALGAS_lexicalTagMap & io_ioTagMap,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_lexicalInstructionAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_lexicalInstructionAST_checkLexicalInstruction f = NULL ;
    if (classIndex < gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction.count ()) {
      f = gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction.count ()) {
           f = gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_lexicalInstructionAST_checkLexicalInstruction.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioLexiqueAnalysisContext, io_ioTagMap, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalStructuredSendInstructionAST checkLexicalInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalStructuredSendInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                                        GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                        GALGAS_lexicalTagMap & /* ioArgument_ioTagMap */,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalStructuredSendInstructionAST * object = (const cPtr_lexicalStructuredSendInstructionAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalStructuredSendInstructionAST) ;
  cEnumerator_lexicalSendSearchListAST enumerator_22601 (object->mAttribute_mLexicalSendSearchList, kEnumeration_up) ;
  while (enumerator_22601.hasCurrentObject ()) {
    // index 1: attribute 'mExplicitTokenListMap', type @lexicalExplicitTokenListMap
    // index 2: attribute 'mTokenSortedList', type @tokenSortedlist
    // index 3: attribute 'mShouldBeGenerated', type @bool
    cMapElement_lexicalExplicitTokenListMapMap * objectArray_22613 = (cMapElement_lexicalExplicitTokenListMapMap *) ioArgument_ioLexiqueAnalysisContext.mAttribute_mLexicalTokenListMap.readWriteAccessForWithInstruction_searchKey (inCompiler, enumerator_22601.current_mSearchListName (HERE) COMMA_SOURCE_FILE_AT_LINE (544)) ;
    if (NULL != objectArray_22613) {
        macroValidSharedObject (objectArray_22613, cMapElement_lexicalExplicitTokenListMapMap) ;
      objectArray_22613->mAttribute_mShouldBeGenerated = GALGAS_bool (true) ;
    }
    GALGAS_lexicalTypeEnum joker_22823_0 ; // Joker input parameter
    ioArgument_ioLexiqueAnalysisContext.reader_mLexicalAttributeMap (SOURCE_FILE_AT_LINE (547)).method_searchKey (enumerator_22601.current_mAttributeName (HERE), joker_22823_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (547)) ;
    enumerator_22601.gotoNextObject () ;
  }
  callCategoryMethod_checkLexicalDefaultAction ((const cPtr_lexicalSendDefaultActionAST *) object->mAttribute_mLexicalSendDefaultAction.ptr (), ioArgument_ioLexiqueAnalysisContext, inCompiler COMMA_SOURCE_FILE_AT_LINE (549)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalStructuredSendInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalStructuredSendInstructionAST.mSlotID,
                                               categoryMethod_lexicalStructuredSendInstructionAST_checkLexicalInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalStructuredSendInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalStructuredSendInstructionAST_checkLexicalInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalSimpleSendInstructionAST checkLexicalInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalSimpleSendInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                                    GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                    GALGAS_lexicalTagMap & /* ioArgument_ioTagMap */,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalSimpleSendInstructionAST * object = (const cPtr_lexicalSimpleSendInstructionAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalSimpleSendInstructionAST) ;
  GALGAS_lexicalSentValueList joker_23254_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mTerminalMap (SOURCE_FILE_AT_LINE (558)).method_searchKey (object->mAttribute_mSentTerminal, joker_23254_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (558)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalSimpleSendInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalSimpleSendInstructionAST.mSlotID,
                                               categoryMethod_lexicalSimpleSendInstructionAST_checkLexicalInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalSimpleSendInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalSimpleSendInstructionAST_checkLexicalInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalRepeatInstructionAST checkLexicalInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalRepeatInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                                GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                GALGAS_lexicalTagMap & ioArgument_ioTagMap,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalRepeatInstructionAST * object = (const cPtr_lexicalRepeatInstructionAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalRepeatInstructionAST) ;
  cEnumerator_lexicalWhileBranchListAST enumerator_23537 (object->mAttribute_mLexicalWhileBranchList, kEnumeration_up) ;
  while (enumerator_23537.hasCurrentObject ()) {
    callCategoryMethod_checkLexicalExpression ((const cPtr_lexicalExpressionAST *) enumerator_23537.current_mWhileExpression (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, inCompiler COMMA_SOURCE_FILE_AT_LINE (568)) ;
    GALGAS_lexicalTagMap var_tagMap = GALGAS_lexicalTagMap::constructor_mapWithMapToOverride (ioArgument_ioTagMap COMMA_SOURCE_FILE_AT_LINE (569)) ;
    cEnumerator_lexicalInstructionListAST enumerator_23710 (enumerator_23537.current_mWhileInstructionList (HERE), kEnumeration_up) ;
    while (enumerator_23710.hasCurrentObject ()) {
      callCategoryMethod_checkLexicalInstruction ((const cPtr_lexicalInstructionAST *) enumerator_23710.current_mInstruction (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, var_tagMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (571)) ;
      enumerator_23710.gotoNextObject () ;
    }
    enumerator_23537.gotoNextObject () ;
  }
  GALGAS_lexicalTagMap var_tagMap = GALGAS_lexicalTagMap::constructor_mapWithMapToOverride (ioArgument_ioTagMap COMMA_SOURCE_FILE_AT_LINE (574)) ;
  cEnumerator_lexicalInstructionListAST enumerator_23924 (object->mAttribute_mRepeatedInstructionList, kEnumeration_up) ;
  while (enumerator_23924.hasCurrentObject ()) {
    callCategoryMethod_checkLexicalInstruction ((const cPtr_lexicalInstructionAST *) enumerator_23924.current_mInstruction (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, var_tagMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (576)) ;
    enumerator_23924.gotoNextObject () ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalRepeatInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalRepeatInstructionAST.mSlotID,
                                               categoryMethod_lexicalRepeatInstructionAST_checkLexicalInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalRepeatInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalRepeatInstructionAST_checkLexicalInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalSelectInstructionAST checkLexicalInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalSelectInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                                GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                GALGAS_lexicalTagMap & ioArgument_ioTagMap,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalSelectInstructionAST * object = (const cPtr_lexicalSelectInstructionAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalSelectInstructionAST) ;
  cEnumerator_lexicalSelectBranchListAST enumerator_24305 (object->mAttribute_mLexicalSelectBranchList, kEnumeration_up) ;
  while (enumerator_24305.hasCurrentObject ()) {
    callCategoryMethod_checkLexicalExpression ((const cPtr_lexicalExpressionAST *) enumerator_24305.current_mSelectExpression (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, inCompiler COMMA_SOURCE_FILE_AT_LINE (587)) ;
    GALGAS_lexicalTagMap var_tagMap = GALGAS_lexicalTagMap::constructor_mapWithMapToOverride (ioArgument_ioTagMap COMMA_SOURCE_FILE_AT_LINE (588)) ;
    cEnumerator_lexicalInstructionListAST enumerator_24480 (enumerator_24305.current_mSelectInstructionList (HERE), kEnumeration_up) ;
    while (enumerator_24480.hasCurrentObject ()) {
      callCategoryMethod_checkLexicalInstruction ((const cPtr_lexicalInstructionAST *) enumerator_24480.current_mInstruction (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, var_tagMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (590)) ;
      enumerator_24480.gotoNextObject () ;
    }
    enumerator_24305.gotoNextObject () ;
  }
  GALGAS_lexicalTagMap var_tagMap = GALGAS_lexicalTagMap::constructor_mapWithMapToOverride (ioArgument_ioTagMap COMMA_SOURCE_FILE_AT_LINE (593)) ;
  cEnumerator_lexicalInstructionListAST enumerator_24693 (object->mAttribute_mDefaultInstructionList, kEnumeration_up) ;
  while (enumerator_24693.hasCurrentObject ()) {
    callCategoryMethod_checkLexicalInstruction ((const cPtr_lexicalInstructionAST *) enumerator_24693.current_mInstruction (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, var_tagMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (595)) ;
    enumerator_24693.gotoNextObject () ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalSelectInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalSelectInstructionAST.mSlotID,
                                               categoryMethod_lexicalSelectInstructionAST_checkLexicalInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalSelectInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalSelectInstructionAST_checkLexicalInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalRoutineInstructionAST checkLexicalInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalRoutineInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                                 GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                 GALGAS_lexicalTagMap & /* ioArgument_ioTagMap */,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalRoutineInstructionAST * object = (const cPtr_lexicalRoutineInstructionAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalRoutineInstructionAST) ;
  GALGAS_lexicalRoutineFormalArgumentList var_lexicalRoutineFormalArgumentList ;
  GALGAS_stringlist var_routineErrorMessageList ;
  GALGAS_bool joker_25314_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mLexicalRoutineMessageMap (SOURCE_FILE_AT_LINE (607)).method_searchKey (object->mAttribute_mRoutineName, var_lexicalRoutineFormalArgumentList, var_routineErrorMessageList, joker_25314_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (607)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_lexicalRoutineFormalArgumentList.reader_length (SOURCE_FILE_AT_LINE (614)).objectCompare (object->mAttribute_mActualArgumentList.reader_length (SOURCE_FILE_AT_LINE (614)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mRoutineName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("this lexical routine call names ").operator_concat (object->mAttribute_mActualArgumentList.reader_length (SOURCE_FILE_AT_LINE (616)).reader_string (SOURCE_FILE_AT_LINE (616)) COMMA_SOURCE_FILE_AT_LINE (615)).operator_concat (GALGAS_string (" actual argument(s), but the lexical routine prototype requires ") COMMA_SOURCE_FILE_AT_LINE (616)).operator_concat (var_lexicalRoutineFormalArgumentList.reader_length (SOURCE_FILE_AT_LINE (618)).reader_string (SOURCE_FILE_AT_LINE (618)) COMMA_SOURCE_FILE_AT_LINE (617)).operator_concat (GALGAS_string (" actual argument(s)") COMMA_SOURCE_FILE_AT_LINE (618)) COMMA_SOURCE_FILE_AT_LINE (615)) ;
  }
  cEnumerator_lexicalRoutineFormalArgumentList enumerator_25804 (var_lexicalRoutineFormalArgumentList, kEnumeration_up) ;
  cEnumerator_lexicalRoutineCallActualArgumentListAST enumerator_25825 (object->mAttribute_mActualArgumentList, kEnumeration_up) ;
  while (enumerator_25804.hasCurrentObject () && enumerator_25825.hasCurrentObject ()) {
    callCategoryMethod_checkLexicalRoutineCallArgument ((const cPtr_abstractLexicalRoutineActualArgumentAST *) enumerator_25825.current_mLexicalRoutineActualArgument (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, enumerator_25804.current_mLexicalFormalArgumentMode (HERE), enumerator_25804.current_mLexicalFormalArgumentType (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (622)) ;
    enumerator_25804.gotoNextObject () ;
    enumerator_25825.gotoNextObject () ;
  }
  const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, var_routineErrorMessageList.reader_length (SOURCE_FILE_AT_LINE (629)).objectCompare (object->mAttribute_mErrorMessageList.reader_length (SOURCE_FILE_AT_LINE (629)))).boolEnum () ;
  if (kBoolTrue == test_2) {
    GALGAS_location location_3 (object->mAttribute_mRoutineName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_3, GALGAS_string ("this lexical routine call names ").operator_concat (object->mAttribute_mErrorMessageList.reader_length (SOURCE_FILE_AT_LINE (631)).reader_string (SOURCE_FILE_AT_LINE (631)) COMMA_SOURCE_FILE_AT_LINE (630)).operator_concat (GALGAS_string (" error message(s), but the lexical routine prototype requires ") COMMA_SOURCE_FILE_AT_LINE (631)).operator_concat (var_routineErrorMessageList.reader_length (SOURCE_FILE_AT_LINE (633)).reader_string (SOURCE_FILE_AT_LINE (633)) COMMA_SOURCE_FILE_AT_LINE (632)).operator_concat (GALGAS_string (" error message(s)") COMMA_SOURCE_FILE_AT_LINE (633)) COMMA_SOURCE_FILE_AT_LINE (630)) ;
  }
  cEnumerator_lstringlist enumerator_26454 (object->mAttribute_mErrorMessageList, kEnumeration_up) ;
  while (enumerator_26454.hasCurrentObject ()) {
    // index 1: attribute 'mLexicalMessage', type @lstring
    // index 2: attribute 'mMessageIsUsed', type @bool
    cMapElement_lexicalMessageMap * objectArray_26466 = (cMapElement_lexicalMessageMap *) ioArgument_ioLexiqueAnalysisContext.mAttribute_mLexicalMessageMap.readWriteAccessForWithInstruction_searchKey (inCompiler, enumerator_26454.current_mValue (HERE) COMMA_SOURCE_FILE_AT_LINE (637)) ;
    if (NULL != objectArray_26466) {
        macroValidSharedObject (objectArray_26466, cMapElement_lexicalMessageMap) ;
      objectArray_26466->mAttribute_mMessageIsUsed = GALGAS_bool (true) ;
    }
    enumerator_26454.gotoNextObject () ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalRoutineInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalRoutineInstructionAST.mSlotID,
                                               categoryMethod_lexicalRoutineInstructionAST_checkLexicalInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalRoutineInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalRoutineInstructionAST_checkLexicalInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalLogInstructionAST checkLexicalInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalLogInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * /* inObject */,
                                                                             GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                             GALGAS_lexicalTagMap & /* ioArgument_ioTagMap */,
                                                                             C_Compiler * /* inCompiler */
                                                                             COMMA_UNUSED_LOCATION_ARGS) {
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalLogInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalLogInstructionAST.mSlotID,
                                               categoryMethod_lexicalLogInstructionAST_checkLexicalInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalLogInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalLogInstructionAST_checkLexicalInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalRewindInstructionAST checkLexicalInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalRewindInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                                GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                GALGAS_lexicalTagMap & ioArgument_ioTagMap,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalRewindInstructionAST * object = (const cPtr_lexicalRewindInstructionAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalRewindInstructionAST) ;
  ioArgument_ioTagMap.method_searchKey (object->mAttribute_mLexicalTagName, inCompiler COMMA_SOURCE_FILE_AT_LINE (657)) ;
  GALGAS_lexicalSentValueList joker_27220_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mTerminalMap (SOURCE_FILE_AT_LINE (658)).method_searchKey (object->mAttribute_mTerminalName, joker_27220_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (658)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalRewindInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalRewindInstructionAST.mSlotID,
                                               categoryMethod_lexicalRewindInstructionAST_checkLexicalInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalRewindInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalRewindInstructionAST_checkLexicalInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalDropInstructionAST checkLexicalInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalDropInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                              GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                              GALGAS_lexicalTagMap & /* ioArgument_ioTagMap */,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalDropInstructionAST * object = (const cPtr_lexicalDropInstructionAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalDropInstructionAST) ;
  GALGAS_lexicalSentValueList joker_27545_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mTerminalMap (SOURCE_FILE_AT_LINE (667)).method_searchKey (object->mAttribute_mTerminalName, joker_27545_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (667)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalDropInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalDropInstructionAST.mSlotID,
                                               categoryMethod_lexicalDropInstructionAST_checkLexicalInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalDropInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalDropInstructionAST_checkLexicalInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalTagInstructionAST checkLexicalInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalTagInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                             GALGAS_lexiqueAnalysisContext & /* ioArgument_ioLexiqueAnalysisContext */,
                                                                             GALGAS_lexicalTagMap & ioArgument_ioTagMap,
                                                                             C_Compiler * inCompiler
                                                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalTagInstructionAST * object = (const cPtr_lexicalTagInstructionAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalTagInstructionAST) ;
  {
  ioArgument_ioTagMap.modifier_insertKey (object->mAttribute_mLexicalTagName, inCompiler COMMA_SOURCE_FILE_AT_LINE (676)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalTagInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalTagInstructionAST.mSlotID,
                                               categoryMethod_lexicalTagInstructionAST_checkLexicalInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalTagInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalTagInstructionAST_checkLexicalInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalErrorInstructionAST checkLexicalInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalErrorInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                               GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                               GALGAS_lexicalTagMap & /* ioArgument_ioTagMap */,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalErrorInstructionAST * object = (const cPtr_lexicalErrorInstructionAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalErrorInstructionAST) ;
  // index 1: attribute 'mLexicalMessage', type @lstring
  // index 2: attribute 'mMessageIsUsed', type @bool
  cMapElement_lexicalMessageMap * objectArray_28100 = (cMapElement_lexicalMessageMap *) ioArgument_ioLexiqueAnalysisContext.mAttribute_mLexicalMessageMap.readWriteAccessForWithInstruction_searchKey (inCompiler, object->mAttribute_mErrorMessageName COMMA_SOURCE_FILE_AT_LINE (685)) ;
  if (NULL != objectArray_28100) {
      macroValidSharedObject (objectArray_28100, cMapElement_lexicalMessageMap) ;
    objectArray_28100->mAttribute_mMessageIsUsed = GALGAS_bool (true) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalErrorInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalErrorInstructionAST.mSlotID,
                                               categoryMethod_lexicalErrorInstructionAST_checkLexicalInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalErrorInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalErrorInstructionAST_checkLexicalInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexicalWarningInstructionAST checkLexicalInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalWarningInstructionAST_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                                                 GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                                 GALGAS_lexicalTagMap & /* ioArgument_ioTagMap */,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalWarningInstructionAST * object = (const cPtr_lexicalWarningInstructionAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalWarningInstructionAST) ;
  // index 1: attribute 'mLexicalMessage', type @lstring
  // index 2: attribute 'mMessageIsUsed', type @bool
  cMapElement_lexicalMessageMap * objectArray_28481 = (cMapElement_lexicalMessageMap *) ioArgument_ioLexiqueAnalysisContext.mAttribute_mLexicalMessageMap.readWriteAccessForWithInstruction_searchKey (inCompiler, object->mAttribute_mWarningMessageName COMMA_SOURCE_FILE_AT_LINE (696)) ;
  if (NULL != objectArray_28481) {
      macroValidSharedObject (objectArray_28481, cMapElement_lexicalMessageMap) ;
    objectArray_28481->mAttribute_mMessageIsUsed = GALGAS_bool (true) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalWarningInstructionAST_checkLexicalInstruction (void) {
  enterCategoryMethod_checkLexicalInstruction (kTypeDescriptor_GALGAS_lexicalWarningInstructionAST.mSlotID,
                                               categoryMethod_lexicalWarningInstructionAST_checkLexicalInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalWarningInstructionAST_checkLexicalInstruction (defineCategoryMethod_lexicalWarningInstructionAST_checkLexicalInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//    Abstract category method '@abstractLexicalRuleAST checkLexicalRule'    *
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_abstractLexicalRuleAST_checkLexicalRule> gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalRule (const PMSInt32 inClassIndex,
                                           categoryMethodSignature_abstractLexicalRuleAST_checkLexicalRule inMethod) {
  gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_abstractLexicalRuleAST_checkLexicalRule (void) {
  gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_abstractLexicalRuleAST_checkLexicalRule (NULL,
                                                                    freeCategoryMethod_abstractLexicalRuleAST_checkLexicalRule) ;

//-----------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalRule (const cPtr_abstractLexicalRuleAST * inObject,
                                          GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_abstractLexicalRuleAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_abstractLexicalRuleAST_checkLexicalRule f = NULL ;
    if (classIndex < gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule.count ()) {
      f = gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule.count ()) {
           f = gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_abstractLexicalRuleAST_checkLexicalRule.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioLexiqueAnalysisContext, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
//   Overriding category method '@lexicalImplicitRuleAST checkLexicalRule'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalImplicitRuleAST_checkLexicalRule (const cPtr_abstractLexicalRuleAST * inObject,
                                                                    GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalImplicitRuleAST * object = (const cPtr_lexicalImplicitRuleAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalImplicitRuleAST) ;
  GALGAS_lexicalExplicitTokenListMap joker_29231_0 ; // Joker input parameter
  GALGAS_tokenSortedlist joker_29234_0 ; // Joker input parameter
  GALGAS_bool joker_29237_0 ; // Joker input parameter
  ioArgument_ioLexiqueAnalysisContext.reader_mLexicalTokenListMap (SOURCE_FILE_AT_LINE (714)).method_searchKey (object->mAttribute_mListName, joker_29231_0, joker_29234_0, joker_29237_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (714)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalImplicitRuleAST_checkLexicalRule (void) {
  enterCategoryMethod_checkLexicalRule (kTypeDescriptor_GALGAS_lexicalImplicitRuleAST.mSlotID,
                                        categoryMethod_lexicalImplicitRuleAST_checkLexicalRule) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalImplicitRuleAST_checkLexicalRule (defineCategoryMethod_lexicalImplicitRuleAST_checkLexicalRule, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//   Overriding category method '@lexicalExplicitRuleAST checkLexicalRule'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexicalExplicitRuleAST_checkLexicalRule (const cPtr_abstractLexicalRuleAST * inObject,
                                                                    GALGAS_lexiqueAnalysisContext & ioArgument_ioLexiqueAnalysisContext,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexicalExplicitRuleAST * object = (const cPtr_lexicalExplicitRuleAST *) inObject ;
  macroValidSharedObject (object, const cPtr_lexicalExplicitRuleAST) ;
  callCategoryMethod_checkLexicalExpression ((const cPtr_lexicalExpressionAST *) object->mAttribute_mLexicalRuleExpression.ptr (), ioArgument_ioLexiqueAnalysisContext, inCompiler COMMA_SOURCE_FILE_AT_LINE (722)) ;
  GALGAS_lexicalTagMap var_tagMap = GALGAS_lexicalTagMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (723)) ;
  cEnumerator_lexicalInstructionListAST enumerator_29589 (object->mAttribute_mInstructionList, kEnumeration_up) ;
  while (enumerator_29589.hasCurrentObject ()) {
    callCategoryMethod_checkLexicalInstruction ((const cPtr_lexicalInstructionAST *) enumerator_29589.current_mInstruction (HERE).ptr (), ioArgument_ioLexiqueAnalysisContext, var_tagMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (725)) ;
    enumerator_29589.gotoNextObject () ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexicalExplicitRuleAST_checkLexicalRule (void) {
  enterCategoryMethod_checkLexicalRule (kTypeDescriptor_GALGAS_lexicalExplicitRuleAST.mSlotID,
                                        categoryMethod_lexicalExplicitRuleAST_checkLexicalRule) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexicalExplicitRuleAST_checkLexicalRule (defineCategoryMethod_lexicalExplicitRuleAST_checkLexicalRule, NULL) ;

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


