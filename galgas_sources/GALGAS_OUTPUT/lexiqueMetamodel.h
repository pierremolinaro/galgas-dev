//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'lexiqueMetamodel.h'                          *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                       june 24th, 2007, at 17h7'9"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef lexiqueMetamodel_METAMODEL_DEFINED
#define lexiqueMetamodel_METAMODEL_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/predefined_types.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*

sint32 _metamodel_index_for_lexiqueMetamodel (void) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexiqueComponentRoot ;
class GGS_lexiqueComponentRoot ;
class cPtr_lexiqueComponentRoot ;
class GGS__list_lexicalImplicitRule ;
class GGS_lexicalImplicitRule ;
class cPtr_lexicalImplicitRule ;
class GGS__list_lexicalErrorMessageDeclaration ;
class GGS_lexicalErrorMessageDeclaration ;
class cPtr_lexicalErrorMessageDeclaration ;
class GGS__list_lexicalAttribute ;
class GGS_lexicalAttribute ;
class cPtr_lexicalAttribute ;
class GGS__list_lexicalStyle ;
class GGS_lexicalStyle ;
class cPtr_lexicalStyle ;
class GGS__list_terminalDeclaration ;
class GGS_terminalDeclaration ;
class cPtr_terminalDeclaration ;
class GGS__list_lexicalListDeclaration ;
class GGS_lexicalListDeclaration ;
class cPtr_lexicalListDeclaration ;
class GGS__list_lexicalListEntry ;
class GGS_lexicalListEntry ;
class cPtr_lexicalListEntry ;
class GGS__list_lexicalExplicitRule ;
class GGS_lexicalExplicitRule ;
class cPtr_lexicalExplicitRule ;
class GGS__list_lexicalExpression ;
class GGS_lexicalExpression ;
class cPtr_lexicalExpression ;
class GGS__list_lexicalOrExpression ;
class GGS_lexicalOrExpression ;
class cPtr_lexicalOrExpression ;
class GGS__list_lexicalCharacterMatch ;
class GGS_lexicalCharacterMatch ;
class cPtr_lexicalCharacterMatch ;
class GGS__list_lexicalCharacterIntervalMatch ;
class GGS_lexicalCharacterIntervalMatch ;
class cPtr_lexicalCharacterIntervalMatch ;
class GGS__list_lexicalStringMatch ;
class GGS_lexicalStringMatch ;
class cPtr_lexicalStringMatch ;
class GGS__list_lexicalStringNotMatch ;
class GGS_lexicalStringNotMatch ;
class cPtr_lexicalStringNotMatch ;
class GGS__list_lexicalInstruction ;
class GGS_lexicalInstruction ;
class cPtr_lexicalInstruction ;
class GGS__list_lexicalStructuredSendInstruction ;
class GGS_lexicalStructuredSendInstruction ;
class cPtr_lexicalStructuredSendInstruction ;
class GGS__list_lexicalSimpleSendInstruction ;
class GGS_lexicalSimpleSendInstruction ;
class cPtr_lexicalSimpleSendInstruction ;
class GGS__list_lexicalSendDefaultAction ;
class GGS_lexicalSendDefaultAction ;
class cPtr_lexicalSendDefaultAction ;
class GGS__list_lexicalSendTerminalByDefault ;
class GGS_lexicalSendTerminalByDefault ;
class cPtr_lexicalSendTerminalByDefault ;
class GGS__list_lexicalErrorByDefault ;
class GGS_lexicalErrorByDefault ;
class cPtr_lexicalErrorByDefault ;
class GGS__list_lexicalSendSearch ;
class GGS_lexicalSendSearch ;
class cPtr_lexicalSendSearch ;
class GGS__list_lexicalRepeatInstruction ;
class GGS_lexicalRepeatInstruction ;
class cPtr_lexicalRepeatInstruction ;
class GGS__list_lexicalWhileBranch ;
class GGS_lexicalWhileBranch ;
class cPtr_lexicalWhileBranch ;
class GGS__list_lexicalSelectInstruction ;
class GGS_lexicalSelectInstruction ;
class cPtr_lexicalSelectInstruction ;
class GGS__list_lexicalSelectBranch ;
class GGS_lexicalSelectBranch ;
class cPtr_lexicalSelectBranch ;
class GGS__list_lexicalActionInstruction ;
class GGS_lexicalActionInstruction ;
class cPtr_lexicalActionInstruction ;
class GGS__list_lexicalActualArgument ;
class GGS_lexicalActualArgument ;
class cPtr_lexicalActualArgument ;
class GGS__list_lexicalAttributeArgument ;
class GGS_lexicalAttributeArgument ;
class cPtr_lexicalAttributeArgument ;
class GGS__list_lexicalCharacterArgument ;
class GGS_lexicalCharacterArgument ;
class cPtr_lexicalCharacterArgument ;
class GGS__list_lexicalCurrentCharacterArgument ;
class GGS_lexicalCurrentCharacterArgument ;
class cPtr_lexicalCurrentCharacterArgument ;
class GGS__list_lexicalFunctionArgument ;
class GGS_lexicalFunctionArgument ;
class cPtr_lexicalFunctionArgument ;
class GGS__list_lexicalDropInstruction ;
class GGS_lexicalDropInstruction ;
class cPtr_lexicalDropInstruction ;
class GGS__list_lexicalErrorInstruction ;
class GGS_lexicalErrorInstruction ;
class cPtr_lexicalErrorInstruction ;
class GGS__list_lexicalTagInstruction ;
class GGS_lexicalTagInstruction ;
class cPtr_lexicalTagInstruction ;
class GGS__list_lexicalRewindInstruction ;
class GGS_lexicalRewindInstruction ;
class cPtr_lexicalRewindInstruction ;
class GGS__list_lexicalLogInstruction ;
class GGS_lexicalLogInstruction ;
class cPtr_lexicalLogInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS entity '@lexiqueComponentRoot'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexiqueComponentRoot : public AC_galgas_entity {
//--- 'new' constructor
  public : static GGS_lexiqueComponentRoot constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS__list_lexicalAttribute & argument_1,
                                const GGS__list_lexicalStyle & argument_2,
                                const GGS__list_terminalDeclaration & argument_3,
                                const GGS__list_lexicalErrorMessageDeclaration & argument_4,
                                const GGS__list_lexicalListDeclaration & argument_5,
                                const GGS__list_lexicalImplicitRule & argument_6,
                                const GGS__list_lexicalExplicitRule & argument_7
                                COMMA_LOCATION_ARGS) ;
//--- getPtr
  public : inline cPtr_lexiqueComponentRoot * getPtr (void) const {
    return (cPtr_lexiqueComponentRoot *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mLexiqueComponentName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS__list_lexicalAttribute  reader_mLexicalAttributeList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS__list_lexicalStyle  reader_mLexicalStyleList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS__list_terminalDeclaration  reader_mTerminalDeclarationList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS__list_lexicalErrorMessageDeclaration  reader_mLexicalErrorMessageDeclarationList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS__list_lexicalListDeclaration  reader_mLexicalListDeclarationList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS__list_lexicalImplicitRule  reader_mLexicalImplicitRuleList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS__list_lexicalExplicitRule  reader_mLexicalExplicitRuleList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexiqueComponentRoot * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexiqueComponentRoot * operator () (void) const {
      return (cPtr_lexiqueComponentRoot *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS list of entity '@lexiqueComponentRoot'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexiqueComponentRoot : public AC_galgas_list {
  public : typedef cPtr_lexiqueComponentRoot element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexiqueComponentRoot constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexiqueComponentRoot constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS__list_lexicalAttribute & argument_1,
                                const GGS__list_lexicalStyle & argument_2,
                                const GGS__list_terminalDeclaration & argument_3,
                                const GGS__list_lexicalErrorMessageDeclaration & argument_4,
                                const GGS__list_lexicalListDeclaration & argument_5,
                                const GGS__list_lexicalImplicitRule & argument_6,
                                const GGS__list_lexicalExplicitRule & argument_7
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexiqueComponentRoot * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexiqueComponentRoot & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexiqueComponentRoot & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexiqueComponentRoot & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexiqueComponentRoot & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexiqueComponentRoot & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexiqueComponentRoot _operator_concat (const GGS__list_lexiqueComponentRoot & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS__list_lexicalAttribute & argument_1,
                                const GGS__list_lexicalStyle & argument_2,
                                const GGS__list_terminalDeclaration & argument_3,
                                const GGS__list_lexicalErrorMessageDeclaration & argument_4,
                                const GGS__list_lexicalListDeclaration & argument_5,
                                const GGS__list_lexicalImplicitRule & argument_6,
                                const GGS__list_lexicalExplicitRule & argument_7
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS__list_lexicalAttribute & argument_1,
                                const GGS__list_lexicalStyle & argument_2,
                                const GGS__list_terminalDeclaration & argument_3,
                                const GGS__list_lexicalErrorMessageDeclaration & argument_4,
                                const GGS__list_lexicalListDeclaration & argument_5,
                                const GGS__list_lexicalImplicitRule & argument_6,
                                const GGS__list_lexicalExplicitRule & argument_7) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS__list_lexicalAttribute & argument_1,
                                const GGS__list_lexicalStyle & argument_2,
                                const GGS__list_terminalDeclaration & argument_3,
                                const GGS__list_lexicalErrorMessageDeclaration & argument_4,
                                const GGS__list_lexicalListDeclaration & argument_5,
                                const GGS__list_lexicalImplicitRule & argument_6,
                                const GGS__list_lexicalExplicitRule & argument_7) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexiqueComponentRoot & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS entity '@lexicalImplicitRule'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalImplicitRule : public AC_galgas_entity {
//--- 'new' constructor
  public : static GGS_lexicalImplicitRule constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- getPtr
  public : inline cPtr_lexicalImplicitRule * getPtr (void) const {
    return (cPtr_lexicalImplicitRule *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mListName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalImplicitRule * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalImplicitRule * operator () (void) const {
      return (cPtr_lexicalImplicitRule *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS list of entity '@lexicalImplicitRule'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalImplicitRule : public AC_galgas_list {
  public : typedef cPtr_lexicalImplicitRule element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalImplicitRule constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalImplicitRule constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalImplicitRule * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalImplicitRule & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalImplicitRule & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalImplicitRule & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalImplicitRule & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalImplicitRule & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalImplicitRule _operator_concat (const GGS__list_lexicalImplicitRule & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalImplicitRule & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS entity '@lexicalErrorMessageDeclaration'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalErrorMessageDeclaration : public AC_galgas_entity {
//--- 'new' constructor
  public : static GGS_lexicalErrorMessageDeclaration constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- getPtr
  public : inline cPtr_lexicalErrorMessageDeclaration * getPtr (void) const {
    return (cPtr_lexicalErrorMessageDeclaration *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mMessageName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mMessageValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalErrorMessageDeclaration * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalErrorMessageDeclaration * operator () (void) const {
      return (cPtr_lexicalErrorMessageDeclaration *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//         GALGAS list of entity '@lexicalErrorMessageDeclaration'           *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalErrorMessageDeclaration : public AC_galgas_list {
  public : typedef cPtr_lexicalErrorMessageDeclaration element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalErrorMessageDeclaration constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalErrorMessageDeclaration constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalErrorMessageDeclaration * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalErrorMessageDeclaration & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalErrorMessageDeclaration & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalErrorMessageDeclaration & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalErrorMessageDeclaration & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalErrorMessageDeclaration & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalErrorMessageDeclaration _operator_concat (const GGS__list_lexicalErrorMessageDeclaration & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalErrorMessageDeclaration & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS entity '@lexicalAttribute'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalAttribute : public AC_galgas_entity {
//--- 'new' constructor
  public : static GGS_lexicalAttribute constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- getPtr
  public : inline cPtr_lexicalAttribute * getPtr (void) const {
    return (cPtr_lexicalAttribute *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalAttribute * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalAttribute * operator () (void) const {
      return (cPtr_lexicalAttribute *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS list of entity '@lexicalAttribute'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalAttribute : public AC_galgas_list {
  public : typedef cPtr_lexicalAttribute element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalAttribute constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalAttribute constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalAttribute * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalAttribute & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalAttribute & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalAttribute & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalAttribute & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalAttribute & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalAttribute _operator_concat (const GGS__list_lexicalAttribute & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalAttribute & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS entity '@lexicalStyle'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalStyle : public AC_galgas_entity {
//--- 'new' constructor
  public : static GGS_lexicalStyle constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- getPtr
  public : inline cPtr_lexicalStyle * getPtr (void) const {
    return (cPtr_lexicalStyle *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mComment (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalStyle * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalStyle * operator () (void) const {
      return (cPtr_lexicalStyle *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS list of entity '@lexicalStyle'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalStyle : public AC_galgas_list {
  public : typedef cPtr_lexicalStyle element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalStyle constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalStyle constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalStyle * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalStyle & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalStyle & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalStyle & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalStyle & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalStyle & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalStyle _operator_concat (const GGS__list_lexicalStyle & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalStyle & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS entity '@terminalDeclaration'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_terminalDeclaration : public AC_galgas_entity {
//--- 'new' constructor
  public : static GGS_terminalDeclaration constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstringlist & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3
                                COMMA_LOCATION_ARGS) ;
//--- getPtr
  public : inline cPtr_terminalDeclaration * getPtr (void) const {
    return (cPtr_terminalDeclaration *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_mSentAttributeList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mErrorMessage (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mStyle (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_terminalDeclaration * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_terminalDeclaration * operator () (void) const {
      return (cPtr_terminalDeclaration *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS list of entity '@terminalDeclaration'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_terminalDeclaration : public AC_galgas_list {
  public : typedef cPtr_terminalDeclaration element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_terminalDeclaration constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_terminalDeclaration constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstringlist & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_terminalDeclaration * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_terminalDeclaration & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_terminalDeclaration & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_terminalDeclaration & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_terminalDeclaration & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_terminalDeclaration & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_terminalDeclaration _operator_concat (const GGS__list_terminalDeclaration & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstringlist & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstringlist & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstringlist & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_terminalDeclaration & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS entity '@lexicalListDeclaration'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalListDeclaration : public AC_galgas_entity {
//--- 'new' constructor
  public : static GGS_lexicalListDeclaration constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstringlist & argument_3,
                                const GGS__list_lexicalListEntry & argument_4
                                COMMA_LOCATION_ARGS) ;
//--- getPtr
  public : inline cPtr_lexicalListDeclaration * getPtr (void) const {
    return (cPtr_lexicalListDeclaration *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mStyle (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mErrorMessage (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_mSentAttributeList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS__list_lexicalListEntry  reader_mEntryList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalListDeclaration * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalListDeclaration * operator () (void) const {
      return (cPtr_lexicalListDeclaration *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS list of entity '@lexicalListDeclaration'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalListDeclaration : public AC_galgas_list {
  public : typedef cPtr_lexicalListDeclaration element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalListDeclaration constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalListDeclaration constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstringlist & argument_3,
                                const GGS__list_lexicalListEntry & argument_4
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalListDeclaration * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalListDeclaration & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalListDeclaration & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalListDeclaration & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalListDeclaration & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalListDeclaration & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalListDeclaration _operator_concat (const GGS__list_lexicalListDeclaration & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstringlist & argument_3,
                                const GGS__list_lexicalListEntry & argument_4
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstringlist & argument_3,
                                const GGS__list_lexicalListEntry & argument_4) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstringlist & argument_3,
                                const GGS__list_lexicalListEntry & argument_4) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalListDeclaration & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS entity '@lexicalListEntry'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalListEntry : public AC_galgas_entity {
//--- 'new' constructor
  public : static GGS_lexicalListEntry constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- getPtr
  public : inline cPtr_lexicalListEntry * getPtr (void) const {
    return (cPtr_lexicalListEntry *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mEntrySpelling (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mTerminalSpelling (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalListEntry * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalListEntry * operator () (void) const {
      return (cPtr_lexicalListEntry *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS list of entity '@lexicalListEntry'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalListEntry : public AC_galgas_list {
  public : typedef cPtr_lexicalListEntry element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalListEntry constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalListEntry constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalListEntry * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalListEntry & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalListEntry & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalListEntry & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalListEntry & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalListEntry & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalListEntry _operator_concat (const GGS__list_lexicalListEntry & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalListEntry & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS entity '@lexicalExplicitRule'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalExplicitRule : public AC_galgas_entity {
//--- 'new' constructor
  public : static GGS_lexicalExplicitRule constructor_new (C_Compiler & inLexique,
                                const GGS_lexicalExpression & argument_0,
                                const GGS__list_lexicalInstruction & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- getPtr
  public : inline cPtr_lexicalExplicitRule * getPtr (void) const {
    return (cPtr_lexicalExplicitRule *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lexicalExpression  reader_mLexicalRuleExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS__list_lexicalInstruction  reader_mInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalExplicitRule * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalExplicitRule * operator () (void) const {
      return (cPtr_lexicalExplicitRule *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS list of entity '@lexicalExplicitRule'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalExplicitRule : public AC_galgas_list {
  public : typedef cPtr_lexicalExplicitRule element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalExplicitRule constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalExplicitRule constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lexicalExpression & argument_0,
                                const GGS__list_lexicalInstruction & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalExplicitRule * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalExplicitRule & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalExplicitRule & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalExplicitRule & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalExplicitRule & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalExplicitRule & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalExplicitRule _operator_concat (const GGS__list_lexicalExplicitRule & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lexicalExpression & argument_0,
                                const GGS__list_lexicalInstruction & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lexicalExpression & argument_0,
                                const GGS__list_lexicalInstruction & argument_1) ;

  protected : void _internalPrependValues (const GGS_lexicalExpression & argument_0,
                                const GGS__list_lexicalInstruction & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalExplicitRule & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS entity '@lexicalExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalExpression : public AC_galgas_entity {
//--- getPtr
  public : inline cPtr_lexicalExpression * getPtr (void) const {
    return (cPtr_lexicalExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalExpression * operator () (void) const {
      return (cPtr_lexicalExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS list of entity '@lexicalExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalExpression : public AC_galgas_list {
  public : typedef cPtr_lexicalExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalExpression constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalExpression constructor_listWithValue (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalExpression * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalExpression & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalExpression & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalExpression & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalExpression & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalExpression & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalExpression _operator_concat (const GGS__list_lexicalExpression & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues () ;

  protected : void _internalPrependValues () ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS entity '@lexicalOrExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalOrExpression : public GGS_lexicalExpression {
//--- 'new' constructor
  public : static GGS_lexicalOrExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lexicalExpression & argument_0,
                                const GGS_lexicalExpression & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lexicalExpression  reader_mLeftOperand (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lexicalExpression  reader_mRightOperand (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalOrExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalOrExpression * operator () (void) const {
      return (cPtr_lexicalOrExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS list of entity '@lexicalOrExpression'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalOrExpression : public AC_galgas_list {
  public : typedef cPtr_lexicalOrExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalOrExpression constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalOrExpression constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lexicalExpression & argument_0,
                                const GGS_lexicalExpression & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalOrExpression * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalOrExpression & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalOrExpression & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalOrExpression & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalOrExpression & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalOrExpression & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalOrExpression _operator_concat (const GGS__list_lexicalOrExpression & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lexicalExpression & argument_0,
                                const GGS_lexicalExpression & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lexicalExpression & argument_0,
                                const GGS_lexicalExpression & argument_1) ;

  protected : void _internalPrependValues (const GGS_lexicalExpression & argument_0,
                                const GGS_lexicalExpression & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalOrExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS entity '@lexicalCharacterMatch'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalCharacterMatch : public GGS_lexicalExpression {
//--- 'new' constructor
  public : static GGS_lexicalCharacterMatch constructor_new (C_Compiler & inLexique,
                                const GGS_lchar & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lchar  reader_mCharacter (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalCharacterMatch * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalCharacterMatch * operator () (void) const {
      return (cPtr_lexicalCharacterMatch *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS list of entity '@lexicalCharacterMatch'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalCharacterMatch : public AC_galgas_list {
  public : typedef cPtr_lexicalCharacterMatch element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalCharacterMatch constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalCharacterMatch constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lchar & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalCharacterMatch * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalCharacterMatch & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalCharacterMatch & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalCharacterMatch & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalCharacterMatch & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalCharacterMatch & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalCharacterMatch _operator_concat (const GGS__list_lexicalCharacterMatch & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lchar & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lchar & argument_0) ;

  protected : void _internalPrependValues (const GGS_lchar & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalCharacterMatch & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS entity '@lexicalCharacterIntervalMatch'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalCharacterIntervalMatch : public GGS_lexicalExpression {
//--- 'new' constructor
  public : static GGS_lexicalCharacterIntervalMatch constructor_new (C_Compiler & inLexique,
                                const GGS_lchar & argument_0,
                                const GGS_lchar & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lchar  reader_mLowerBound (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lchar  reader_mUpperBound (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalCharacterIntervalMatch * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalCharacterIntervalMatch * operator () (void) const {
      return (cPtr_lexicalCharacterIntervalMatch *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          GALGAS list of entity '@lexicalCharacterIntervalMatch'           *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalCharacterIntervalMatch : public AC_galgas_list {
  public : typedef cPtr_lexicalCharacterIntervalMatch element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalCharacterIntervalMatch constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalCharacterIntervalMatch constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lchar & argument_0,
                                const GGS_lchar & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalCharacterIntervalMatch * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalCharacterIntervalMatch & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalCharacterIntervalMatch & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalCharacterIntervalMatch & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalCharacterIntervalMatch & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalCharacterIntervalMatch & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalCharacterIntervalMatch _operator_concat (const GGS__list_lexicalCharacterIntervalMatch & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lchar & argument_0,
                                const GGS_lchar & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lchar & argument_0,
                                const GGS_lchar & argument_1) ;

  protected : void _internalPrependValues (const GGS_lchar & argument_0,
                                const GGS_lchar & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalCharacterIntervalMatch & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS entity '@lexicalStringMatch'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalStringMatch : public GGS_lexicalExpression {
//--- 'new' constructor
  public : static GGS_lexicalStringMatch constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mString (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalStringMatch * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalStringMatch * operator () (void) const {
      return (cPtr_lexicalStringMatch *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS list of entity '@lexicalStringMatch'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalStringMatch : public AC_galgas_list {
  public : typedef cPtr_lexicalStringMatch element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalStringMatch constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalStringMatch constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalStringMatch * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalStringMatch & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalStringMatch & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalStringMatch & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalStringMatch & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalStringMatch & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalStringMatch _operator_concat (const GGS__list_lexicalStringMatch & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalStringMatch & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS entity '@lexicalStringNotMatch'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalStringNotMatch : public GGS_lexicalExpression {
//--- 'new' constructor
  public : static GGS_lexicalStringNotMatch constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mString (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mErrorMessage (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalStringNotMatch * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalStringNotMatch * operator () (void) const {
      return (cPtr_lexicalStringNotMatch *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS list of entity '@lexicalStringNotMatch'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalStringNotMatch : public AC_galgas_list {
  public : typedef cPtr_lexicalStringNotMatch element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalStringNotMatch constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalStringNotMatch constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalStringNotMatch * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalStringNotMatch & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalStringNotMatch & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalStringNotMatch & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalStringNotMatch & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalStringNotMatch & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalStringNotMatch _operator_concat (const GGS__list_lexicalStringNotMatch & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalStringNotMatch & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS entity '@lexicalInstruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalInstruction : public AC_galgas_entity {
//--- getPtr
  public : inline cPtr_lexicalInstruction * getPtr (void) const {
    return (cPtr_lexicalInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalInstruction * operator () (void) const {
      return (cPtr_lexicalInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS list of entity '@lexicalInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalInstruction : public AC_galgas_list {
  public : typedef cPtr_lexicalInstruction element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalInstruction constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalInstruction constructor_listWithValue (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalInstruction * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalInstruction & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalInstruction & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalInstruction & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalInstruction & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalInstruction & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalInstruction _operator_concat (const GGS__list_lexicalInstruction & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues () ;

  protected : void _internalPrependValues () ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalInstruction & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS entity '@lexicalStructuredSendInstruction'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalStructuredSendInstruction : public GGS_lexicalInstruction {
//--- 'new' constructor
  public : static GGS_lexicalStructuredSendInstruction constructor_new (C_Compiler & inLexique,
                                const GGS__list_lexicalSendSearch & argument_0,
                                const GGS_lexicalSendDefaultAction & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS__list_lexicalSendSearch  reader_mLexicalSendSearchList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lexicalSendDefaultAction  reader_mLexicalSendDefaultAction (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalStructuredSendInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalStructuredSendInstruction * operator () (void) const {
      return (cPtr_lexicalStructuredSendInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//        GALGAS list of entity '@lexicalStructuredSendInstruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalStructuredSendInstruction : public AC_galgas_list {
  public : typedef cPtr_lexicalStructuredSendInstruction element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalStructuredSendInstruction constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalStructuredSendInstruction constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS__list_lexicalSendSearch & argument_0,
                                const GGS_lexicalSendDefaultAction & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalStructuredSendInstruction * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalStructuredSendInstruction & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalStructuredSendInstruction & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalStructuredSendInstruction & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalStructuredSendInstruction & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalStructuredSendInstruction & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalStructuredSendInstruction _operator_concat (const GGS__list_lexicalStructuredSendInstruction & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS__list_lexicalSendSearch & argument_0,
                                const GGS_lexicalSendDefaultAction & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS__list_lexicalSendSearch & argument_0,
                                const GGS_lexicalSendDefaultAction & argument_1) ;

  protected : void _internalPrependValues (const GGS__list_lexicalSendSearch & argument_0,
                                const GGS_lexicalSendDefaultAction & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalStructuredSendInstruction & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS entity '@lexicalSimpleSendInstruction'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalSimpleSendInstruction : public GGS_lexicalInstruction {
//--- 'new' constructor
  public : static GGS_lexicalSimpleSendInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mSentTerminal (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalSimpleSendInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalSimpleSendInstruction * operator () (void) const {
      return (cPtr_lexicalSimpleSendInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          GALGAS list of entity '@lexicalSimpleSendInstruction'            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalSimpleSendInstruction : public AC_galgas_list {
  public : typedef cPtr_lexicalSimpleSendInstruction element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalSimpleSendInstruction constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalSimpleSendInstruction constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalSimpleSendInstruction * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalSimpleSendInstruction & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalSimpleSendInstruction & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalSimpleSendInstruction & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalSimpleSendInstruction & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalSimpleSendInstruction & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalSimpleSendInstruction _operator_concat (const GGS__list_lexicalSimpleSendInstruction & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalSimpleSendInstruction & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS entity '@lexicalSendDefaultAction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalSendDefaultAction : public AC_galgas_entity {
//--- getPtr
  public : inline cPtr_lexicalSendDefaultAction * getPtr (void) const {
    return (cPtr_lexicalSendDefaultAction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalSendDefaultAction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalSendDefaultAction * operator () (void) const {
      return (cPtr_lexicalSendDefaultAction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS list of entity '@lexicalSendDefaultAction'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalSendDefaultAction : public AC_galgas_list {
  public : typedef cPtr_lexicalSendDefaultAction element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalSendDefaultAction constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalSendDefaultAction constructor_listWithValue (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalSendDefaultAction * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalSendDefaultAction & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalSendDefaultAction & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalSendDefaultAction & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalSendDefaultAction & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalSendDefaultAction & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalSendDefaultAction _operator_concat (const GGS__list_lexicalSendDefaultAction & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues () ;

  protected : void _internalPrependValues () ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalSendDefaultAction & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS entity '@lexicalSendTerminalByDefault'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalSendTerminalByDefault : public GGS_lexicalSendDefaultAction {
//--- 'new' constructor
  public : static GGS_lexicalSendTerminalByDefault constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mDefaultSentTerminal (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalSendTerminalByDefault * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalSendTerminalByDefault * operator () (void) const {
      return (cPtr_lexicalSendTerminalByDefault *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          GALGAS list of entity '@lexicalSendTerminalByDefault'            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalSendTerminalByDefault : public AC_galgas_list {
  public : typedef cPtr_lexicalSendTerminalByDefault element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalSendTerminalByDefault constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalSendTerminalByDefault constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalSendTerminalByDefault * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalSendTerminalByDefault & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalSendTerminalByDefault & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalSendTerminalByDefault & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalSendTerminalByDefault & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalSendTerminalByDefault & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalSendTerminalByDefault _operator_concat (const GGS__list_lexicalSendTerminalByDefault & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalSendTerminalByDefault & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS entity '@lexicalErrorByDefault'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalErrorByDefault : public GGS_lexicalSendDefaultAction {
//--- 'new' constructor
  public : static GGS_lexicalErrorByDefault constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mDefaultErrorMessageName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalErrorByDefault * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalErrorByDefault * operator () (void) const {
      return (cPtr_lexicalErrorByDefault *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS list of entity '@lexicalErrorByDefault'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalErrorByDefault : public AC_galgas_list {
  public : typedef cPtr_lexicalErrorByDefault element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalErrorByDefault constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalErrorByDefault constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalErrorByDefault * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalErrorByDefault & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalErrorByDefault & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalErrorByDefault & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalErrorByDefault & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalErrorByDefault & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalErrorByDefault _operator_concat (const GGS__list_lexicalErrorByDefault & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalErrorByDefault & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS entity '@lexicalSendSearch'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalSendSearch : public AC_galgas_entity {
//--- 'new' constructor
  public : static GGS_lexicalSendSearch constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- getPtr
  public : inline cPtr_lexicalSendSearch * getPtr (void) const {
    return (cPtr_lexicalSendSearch *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mAttributeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mSearchListName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalSendSearch * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalSendSearch * operator () (void) const {
      return (cPtr_lexicalSendSearch *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS list of entity '@lexicalSendSearch'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalSendSearch : public AC_galgas_list {
  public : typedef cPtr_lexicalSendSearch element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalSendSearch constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalSendSearch constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalSendSearch * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalSendSearch & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalSendSearch & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalSendSearch & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalSendSearch & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalSendSearch & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalSendSearch _operator_concat (const GGS__list_lexicalSendSearch & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalSendSearch & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS entity '@lexicalRepeatInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalRepeatInstruction : public GGS_lexicalInstruction {
//--- 'new' constructor
  public : static GGS_lexicalRepeatInstruction constructor_new (C_Compiler & inLexique,
                                const GGS__list_lexicalInstruction & argument_0,
                                const GGS__list_lexicalWhileBranch & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS__list_lexicalInstruction  reader_mRepeatedInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS__list_lexicalWhileBranch  reader_mLexicalWhileBranchList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalRepeatInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalRepeatInstruction * operator () (void) const {
      return (cPtr_lexicalRepeatInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS list of entity '@lexicalRepeatInstruction'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalRepeatInstruction : public AC_galgas_list {
  public : typedef cPtr_lexicalRepeatInstruction element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalRepeatInstruction constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalRepeatInstruction constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS__list_lexicalInstruction & argument_0,
                                const GGS__list_lexicalWhileBranch & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalRepeatInstruction * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalRepeatInstruction & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalRepeatInstruction & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalRepeatInstruction & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalRepeatInstruction & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalRepeatInstruction & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalRepeatInstruction _operator_concat (const GGS__list_lexicalRepeatInstruction & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS__list_lexicalInstruction & argument_0,
                                const GGS__list_lexicalWhileBranch & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS__list_lexicalInstruction & argument_0,
                                const GGS__list_lexicalWhileBranch & argument_1) ;

  protected : void _internalPrependValues (const GGS__list_lexicalInstruction & argument_0,
                                const GGS__list_lexicalWhileBranch & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalRepeatInstruction & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS entity '@lexicalWhileBranch'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalWhileBranch : public AC_galgas_entity {
//--- 'new' constructor
  public : static GGS_lexicalWhileBranch constructor_new (C_Compiler & inLexique,
                                const GGS_lexicalExpression & argument_0,
                                const GGS__list_lexicalInstruction & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- getPtr
  public : inline cPtr_lexicalWhileBranch * getPtr (void) const {
    return (cPtr_lexicalWhileBranch *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lexicalExpression  reader_mWhileExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS__list_lexicalInstruction  reader_mWhileInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalWhileBranch * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalWhileBranch * operator () (void) const {
      return (cPtr_lexicalWhileBranch *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS list of entity '@lexicalWhileBranch'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalWhileBranch : public AC_galgas_list {
  public : typedef cPtr_lexicalWhileBranch element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalWhileBranch constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalWhileBranch constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lexicalExpression & argument_0,
                                const GGS__list_lexicalInstruction & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalWhileBranch * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalWhileBranch & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalWhileBranch & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalWhileBranch & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalWhileBranch & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalWhileBranch & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalWhileBranch _operator_concat (const GGS__list_lexicalWhileBranch & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lexicalExpression & argument_0,
                                const GGS__list_lexicalInstruction & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lexicalExpression & argument_0,
                                const GGS__list_lexicalInstruction & argument_1) ;

  protected : void _internalPrependValues (const GGS_lexicalExpression & argument_0,
                                const GGS__list_lexicalInstruction & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalWhileBranch & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS entity '@lexicalSelectInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalSelectInstruction : public GGS_lexicalInstruction {
//--- 'new' constructor
  public : static GGS_lexicalSelectInstruction constructor_new (C_Compiler & inLexique,
                                const GGS__list_lexicalSelectBranch & argument_0,
                                const GGS__list_lexicalInstruction & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS__list_lexicalSelectBranch  reader_mLexicalWhileBranchList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS__list_lexicalInstruction  reader_mDefaultInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalSelectInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalSelectInstruction * operator () (void) const {
      return (cPtr_lexicalSelectInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS list of entity '@lexicalSelectInstruction'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalSelectInstruction : public AC_galgas_list {
  public : typedef cPtr_lexicalSelectInstruction element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalSelectInstruction constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalSelectInstruction constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS__list_lexicalSelectBranch & argument_0,
                                const GGS__list_lexicalInstruction & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalSelectInstruction * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalSelectInstruction & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalSelectInstruction & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalSelectInstruction & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalSelectInstruction & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalSelectInstruction & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalSelectInstruction _operator_concat (const GGS__list_lexicalSelectInstruction & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS__list_lexicalSelectBranch & argument_0,
                                const GGS__list_lexicalInstruction & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS__list_lexicalSelectBranch & argument_0,
                                const GGS__list_lexicalInstruction & argument_1) ;

  protected : void _internalPrependValues (const GGS__list_lexicalSelectBranch & argument_0,
                                const GGS__list_lexicalInstruction & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalSelectInstruction & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS entity '@lexicalSelectBranch'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalSelectBranch : public AC_galgas_entity {
//--- 'new' constructor
  public : static GGS_lexicalSelectBranch constructor_new (C_Compiler & inLexique,
                                const GGS_lexicalExpression & argument_0,
                                const GGS__list_lexicalInstruction & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- getPtr
  public : inline cPtr_lexicalSelectBranch * getPtr (void) const {
    return (cPtr_lexicalSelectBranch *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lexicalExpression  reader_mSelectExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS__list_lexicalInstruction  reader_mSelectInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalSelectBranch * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalSelectBranch * operator () (void) const {
      return (cPtr_lexicalSelectBranch *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS list of entity '@lexicalSelectBranch'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalSelectBranch : public AC_galgas_list {
  public : typedef cPtr_lexicalSelectBranch element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalSelectBranch constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalSelectBranch constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lexicalExpression & argument_0,
                                const GGS__list_lexicalInstruction & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalSelectBranch * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalSelectBranch & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalSelectBranch & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalSelectBranch & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalSelectBranch & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalSelectBranch & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalSelectBranch _operator_concat (const GGS__list_lexicalSelectBranch & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lexicalExpression & argument_0,
                                const GGS__list_lexicalInstruction & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lexicalExpression & argument_0,
                                const GGS__list_lexicalInstruction & argument_1) ;

  protected : void _internalPrependValues (const GGS_lexicalExpression & argument_0,
                                const GGS__list_lexicalInstruction & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalSelectBranch & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS entity '@lexicalActionInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalActionInstruction : public GGS_lexicalInstruction {
//--- 'new' constructor
  public : static GGS_lexicalActionInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS__list_lexicalActualArgument & argument_1,
                                const GGS_lstringlist & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mActionName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS__list_lexicalActualArgument  reader_mActualArgumentList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_mErrorMessageList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalActionInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalActionInstruction * operator () (void) const {
      return (cPtr_lexicalActionInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS list of entity '@lexicalActionInstruction'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalActionInstruction : public AC_galgas_list {
  public : typedef cPtr_lexicalActionInstruction element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalActionInstruction constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalActionInstruction constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS__list_lexicalActualArgument & argument_1,
                                const GGS_lstringlist & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalActionInstruction * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalActionInstruction & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalActionInstruction & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalActionInstruction & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalActionInstruction & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalActionInstruction & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalActionInstruction _operator_concat (const GGS__list_lexicalActionInstruction & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS__list_lexicalActualArgument & argument_1,
                                const GGS_lstringlist & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS__list_lexicalActualArgument & argument_1,
                                const GGS_lstringlist & argument_2) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS__list_lexicalActualArgument & argument_1,
                                const GGS_lstringlist & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalActionInstruction & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS entity '@lexicalActualArgument'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalActualArgument : public AC_galgas_entity {
//--- getPtr
  public : inline cPtr_lexicalActualArgument * getPtr (void) const {
    return (cPtr_lexicalActualArgument *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalActualArgument * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalActualArgument * operator () (void) const {
      return (cPtr_lexicalActualArgument *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS list of entity '@lexicalActualArgument'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalActualArgument : public AC_galgas_list {
  public : typedef cPtr_lexicalActualArgument element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalActualArgument constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalActualArgument constructor_listWithValue (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalActualArgument * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalActualArgument & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalActualArgument & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalActualArgument & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalActualArgument & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalActualArgument & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalActualArgument _operator_concat (const GGS__list_lexicalActualArgument & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues () ;

  protected : void _internalPrependValues () ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalActualArgument & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS entity '@lexicalAttributeArgument'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalAttributeArgument : public GGS_lexicalActualArgument {
//--- 'new' constructor
  public : static GGS_lexicalAttributeArgument constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mAttributeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalAttributeArgument * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalAttributeArgument * operator () (void) const {
      return (cPtr_lexicalAttributeArgument *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS list of entity '@lexicalAttributeArgument'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalAttributeArgument : public AC_galgas_list {
  public : typedef cPtr_lexicalAttributeArgument element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalAttributeArgument constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalAttributeArgument constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalAttributeArgument * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalAttributeArgument & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalAttributeArgument & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalAttributeArgument & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalAttributeArgument & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalAttributeArgument & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalAttributeArgument _operator_concat (const GGS__list_lexicalAttributeArgument & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalAttributeArgument & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS entity '@lexicalCharacterArgument'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalCharacterArgument : public GGS_lexicalActualArgument {
//--- 'new' constructor
  public : static GGS_lexicalCharacterArgument constructor_new (C_Compiler & inLexique,
                                const GGS_lchar & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lchar  reader_mCharacter (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalCharacterArgument * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalCharacterArgument * operator () (void) const {
      return (cPtr_lexicalCharacterArgument *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS list of entity '@lexicalCharacterArgument'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalCharacterArgument : public AC_galgas_list {
  public : typedef cPtr_lexicalCharacterArgument element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalCharacterArgument constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalCharacterArgument constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lchar & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalCharacterArgument * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalCharacterArgument & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalCharacterArgument & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalCharacterArgument & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalCharacterArgument & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalCharacterArgument & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalCharacterArgument _operator_concat (const GGS__list_lexicalCharacterArgument & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lchar & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lchar & argument_0) ;

  protected : void _internalPrependValues (const GGS_lchar & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalCharacterArgument & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS entity '@lexicalCurrentCharacterArgument'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalCurrentCharacterArgument : public GGS_lexicalActualArgument {
//--- 'new' constructor
  public : static GGS_lexicalCurrentCharacterArgument constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalCurrentCharacterArgument * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalCurrentCharacterArgument * operator () (void) const {
      return (cPtr_lexicalCurrentCharacterArgument *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//         GALGAS list of entity '@lexicalCurrentCharacterArgument'          *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalCurrentCharacterArgument : public AC_galgas_list {
  public : typedef cPtr_lexicalCurrentCharacterArgument element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalCurrentCharacterArgument constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalCurrentCharacterArgument constructor_listWithValue (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalCurrentCharacterArgument * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalCurrentCharacterArgument & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalCurrentCharacterArgument & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalCurrentCharacterArgument & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalCurrentCharacterArgument & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalCurrentCharacterArgument & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalCurrentCharacterArgument _operator_concat (const GGS__list_lexicalCurrentCharacterArgument & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues () ;

  protected : void _internalPrependValues () ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalCurrentCharacterArgument & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS entity '@lexicalFunctionArgument'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalFunctionArgument : public GGS_lexicalActualArgument {
//--- 'new' constructor
  public : static GGS_lexicalFunctionArgument constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS__list_lexicalActualArgument & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mFunctionName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS__list_lexicalActualArgument  reader_mFunctionActualArgumentList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalFunctionArgument * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalFunctionArgument * operator () (void) const {
      return (cPtr_lexicalFunctionArgument *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS list of entity '@lexicalFunctionArgument'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalFunctionArgument : public AC_galgas_list {
  public : typedef cPtr_lexicalFunctionArgument element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalFunctionArgument constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalFunctionArgument constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS__list_lexicalActualArgument & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalFunctionArgument * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalFunctionArgument & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalFunctionArgument & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalFunctionArgument & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalFunctionArgument & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalFunctionArgument & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalFunctionArgument _operator_concat (const GGS__list_lexicalFunctionArgument & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS__list_lexicalActualArgument & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS__list_lexicalActualArgument & argument_1) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS__list_lexicalActualArgument & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalFunctionArgument & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS entity '@lexicalDropInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalDropInstruction : public GGS_lexicalInstruction {
//--- 'new' constructor
  public : static GGS_lexicalDropInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTerminalName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalDropInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalDropInstruction * operator () (void) const {
      return (cPtr_lexicalDropInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS list of entity '@lexicalDropInstruction'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalDropInstruction : public AC_galgas_list {
  public : typedef cPtr_lexicalDropInstruction element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalDropInstruction constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalDropInstruction constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalDropInstruction * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalDropInstruction & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalDropInstruction & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalDropInstruction & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalDropInstruction & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalDropInstruction & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalDropInstruction _operator_concat (const GGS__list_lexicalDropInstruction & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalDropInstruction & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS entity '@lexicalErrorInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalErrorInstruction : public GGS_lexicalInstruction {
//--- 'new' constructor
  public : static GGS_lexicalErrorInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mErrorMessageName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalErrorInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalErrorInstruction * operator () (void) const {
      return (cPtr_lexicalErrorInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS list of entity '@lexicalErrorInstruction'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalErrorInstruction : public AC_galgas_list {
  public : typedef cPtr_lexicalErrorInstruction element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalErrorInstruction constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalErrorInstruction constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalErrorInstruction * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalErrorInstruction & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalErrorInstruction & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalErrorInstruction & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalErrorInstruction & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalErrorInstruction & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalErrorInstruction _operator_concat (const GGS__list_lexicalErrorInstruction & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalErrorInstruction & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS entity '@lexicalTagInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalTagInstruction : public GGS_lexicalInstruction {
//--- 'new' constructor
  public : static GGS_lexicalTagInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTagName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalTagInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalTagInstruction * operator () (void) const {
      return (cPtr_lexicalTagInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS list of entity '@lexicalTagInstruction'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalTagInstruction : public AC_galgas_list {
  public : typedef cPtr_lexicalTagInstruction element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalTagInstruction constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalTagInstruction constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalTagInstruction * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalTagInstruction & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalTagInstruction & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalTagInstruction & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalTagInstruction & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalTagInstruction & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalTagInstruction _operator_concat (const GGS__list_lexicalTagInstruction & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalTagInstruction & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS entity '@lexicalRewindInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalRewindInstruction : public GGS_lexicalInstruction {
//--- 'new' constructor
  public : static GGS_lexicalRewindInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTagName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mTerminalName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalRewindInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalRewindInstruction * operator () (void) const {
      return (cPtr_lexicalRewindInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS list of entity '@lexicalRewindInstruction'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalRewindInstruction : public AC_galgas_list {
  public : typedef cPtr_lexicalRewindInstruction element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalRewindInstruction constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalRewindInstruction constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalRewindInstruction * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalRewindInstruction & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalRewindInstruction & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalRewindInstruction & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalRewindInstruction & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalRewindInstruction & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalRewindInstruction _operator_concat (const GGS__list_lexicalRewindInstruction & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalRewindInstruction & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS entity '@lexicalLogInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalLogInstruction : public GGS_lexicalInstruction {
//--- 'new' constructor
  public : static GGS_lexicalLogInstruction constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lexicalLogInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lexicalLogInstruction * operator () (void) const {
      return (cPtr_lexicalLogInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS list of entity '@lexicalLogInstruction'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS__list_lexicalLogInstruction : public AC_galgas_list {
  public : typedef cPtr_lexicalLogInstruction element_type ;
//--- Constructor 'emptyList'
  public : static GGS__list_lexicalLogInstruction constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS__list_lexicalLogInstruction constructor_listWithValue (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS__list_lexicalLogInstruction * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_lexicalLogInstruction & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_lexicalLogInstruction & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_lexicalLogInstruction & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_lexicalLogInstruction & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lexicalLogInstruction & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS__list_lexicalLogInstruction _operator_concat (const GGS__list_lexicalLogInstruction & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues () ;

  protected : void _internalPrependValues () ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lexicalLogInstruction & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@lexiqueComponentRoot'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexiqueComponentRoot : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_lstring  mLexiqueComponentName ;
  public : GGS__list_lexicalAttribute  mLexicalAttributeList ;
  public : GGS__list_lexicalStyle  mLexicalStyleList ;
  public : GGS__list_terminalDeclaration  mTerminalDeclarationList ;
  public : GGS__list_lexicalErrorMessageDeclaration  mLexicalErrorMessageDeclarationList ;
  public : GGS__list_lexicalListDeclaration  mLexicalListDeclarationList ;
  public : GGS__list_lexicalImplicitRule  mLexicalImplicitRuleList ;
  public : GGS__list_lexicalExplicitRule  mLexicalExplicitRuleList ;
//--- Constructor
  public : cPtr_lexiqueComponentRoot (const GGS_lstring & ,
                                const GGS__list_lexicalAttribute & ,
                                const GGS__list_lexicalStyle & ,
                                const GGS__list_terminalDeclaration & ,
                                const GGS__list_lexicalErrorMessageDeclaration & ,
                                const GGS__list_lexicalListDeclaration & ,
                                const GGS__list_lexicalImplicitRule & ,
                                const GGS__list_lexicalExplicitRule & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexiqueComponentRoot * nextObject (void) const {
    return (cPtr_lexiqueComponentRoot *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexiqueComponentRoot * previousObject (void) const {
    return (cPtr_lexiqueComponentRoot *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexiqueComponentRoot * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexiqueComponentRoot ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@lexicalImplicitRule'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalImplicitRule : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_lstring  mListName ;
//--- Constructor
  public : cPtr_lexicalImplicitRule (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalImplicitRule * nextObject (void) const {
    return (cPtr_lexicalImplicitRule *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalImplicitRule * previousObject (void) const {
    return (cPtr_lexicalImplicitRule *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalImplicitRule * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalImplicitRule ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Element of list '@lexicalErrorMessageDeclaration'              *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalErrorMessageDeclaration : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_lstring  mMessageName ;
  public : GGS_lstring  mMessageValue ;
//--- Constructor
  public : cPtr_lexicalErrorMessageDeclaration (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalErrorMessageDeclaration * nextObject (void) const {
    return (cPtr_lexicalErrorMessageDeclaration *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalErrorMessageDeclaration * previousObject (void) const {
    return (cPtr_lexicalErrorMessageDeclaration *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalErrorMessageDeclaration * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalErrorMessageDeclaration ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@lexicalAttribute'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalAttribute : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_lstring  mTypeName ;
  public : GGS_lstring  mName ;
//--- Constructor
  public : cPtr_lexicalAttribute (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalAttribute * nextObject (void) const {
    return (cPtr_lexicalAttribute *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalAttribute * previousObject (void) const {
    return (cPtr_lexicalAttribute *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalAttribute * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalAttribute ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of list '@lexicalStyle'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalStyle : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_lstring  mName ;
  public : GGS_lstring  mComment ;
//--- Constructor
  public : cPtr_lexicalStyle (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalStyle * nextObject (void) const {
    return (cPtr_lexicalStyle *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalStyle * previousObject (void) const {
    return (cPtr_lexicalStyle *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalStyle * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalStyle ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@terminalDeclaration'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_terminalDeclaration : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_lstring  mName ;
  public : GGS_lstringlist  mSentAttributeList ;
  public : GGS_lstring  mErrorMessage ;
  public : GGS_lstring  mStyle ;
//--- Constructor
  public : cPtr_terminalDeclaration (const GGS_lstring & ,
                                const GGS_lstringlist & ,
                                const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_terminalDeclaration * nextObject (void) const {
    return (cPtr_terminalDeclaration *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_terminalDeclaration * previousObject (void) const {
    return (cPtr_terminalDeclaration *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_terminalDeclaration * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_terminalDeclaration ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@lexicalListDeclaration'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalListDeclaration : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_lstring  mName ;
  public : GGS_lstring  mStyle ;
  public : GGS_lstring  mErrorMessage ;
  public : GGS_lstringlist  mSentAttributeList ;
  public : GGS__list_lexicalListEntry  mEntryList ;
//--- Constructor
  public : cPtr_lexicalListDeclaration (const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_lstringlist & ,
                                const GGS__list_lexicalListEntry & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalListDeclaration * nextObject (void) const {
    return (cPtr_lexicalListDeclaration *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalListDeclaration * previousObject (void) const {
    return (cPtr_lexicalListDeclaration *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalListDeclaration * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalListDeclaration ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@lexicalListEntry'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalListEntry : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_lstring  mEntrySpelling ;
  public : GGS_lstring  mTerminalSpelling ;
//--- Constructor
  public : cPtr_lexicalListEntry (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalListEntry * nextObject (void) const {
    return (cPtr_lexicalListEntry *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalListEntry * previousObject (void) const {
    return (cPtr_lexicalListEntry *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalListEntry * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalListEntry ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@lexicalExplicitRule'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalExplicitRule : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_lexicalExpression  mLexicalRuleExpression ;
  public : GGS__list_lexicalInstruction  mInstructionList ;
//--- Constructor
  public : cPtr_lexicalExplicitRule (const GGS_lexicalExpression & ,
                                const GGS__list_lexicalInstruction & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalExplicitRule * nextObject (void) const {
    return (cPtr_lexicalExplicitRule *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalExplicitRule * previousObject (void) const {
    return (cPtr_lexicalExplicitRule *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalExplicitRule * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalExplicitRule ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@lexicalExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalExpression : public C_GGS_MetamodelEntity {
//--- Attributes
//--- Constructor
  public : cPtr_lexicalExpression (LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalExpression * nextObject (void) const {
    return (cPtr_lexicalExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalExpression * previousObject (void) const {
    return (cPtr_lexicalExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalExpression ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@lexicalOrExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalOrExpression : public cPtr_lexicalExpression {
//--- Attributes
  public : GGS_lexicalExpression  mLeftOperand ;
  public : GGS_lexicalExpression  mRightOperand ;
//--- Constructor
  public : cPtr_lexicalOrExpression (const GGS_lexicalExpression & ,
                                const GGS_lexicalExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalOrExpression * nextObject (void) const {
    return (cPtr_lexicalOrExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalOrExpression * previousObject (void) const {
    return (cPtr_lexicalOrExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalOrExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalOrExpression ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@lexicalCharacterMatch'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalCharacterMatch : public cPtr_lexicalExpression {
//--- Attributes
  public : GGS_lchar  mCharacter ;
//--- Constructor
  public : cPtr_lexicalCharacterMatch (const GGS_lchar & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalCharacterMatch * nextObject (void) const {
    return (cPtr_lexicalCharacterMatch *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalCharacterMatch * previousObject (void) const {
    return (cPtr_lexicalCharacterMatch *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalCharacterMatch * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalCharacterMatch ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@lexicalCharacterIntervalMatch'              *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalCharacterIntervalMatch : public cPtr_lexicalExpression {
//--- Attributes
  public : GGS_lchar  mLowerBound ;
  public : GGS_lchar  mUpperBound ;
//--- Constructor
  public : cPtr_lexicalCharacterIntervalMatch (const GGS_lchar & ,
                                const GGS_lchar & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalCharacterIntervalMatch * nextObject (void) const {
    return (cPtr_lexicalCharacterIntervalMatch *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalCharacterIntervalMatch * previousObject (void) const {
    return (cPtr_lexicalCharacterIntervalMatch *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalCharacterIntervalMatch * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalCharacterIntervalMatch ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@lexicalStringMatch'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalStringMatch : public cPtr_lexicalExpression {
//--- Attributes
  public : GGS_lstring  mString ;
//--- Constructor
  public : cPtr_lexicalStringMatch (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalStringMatch * nextObject (void) const {
    return (cPtr_lexicalStringMatch *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalStringMatch * previousObject (void) const {
    return (cPtr_lexicalStringMatch *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalStringMatch * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalStringMatch ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@lexicalStringNotMatch'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalStringNotMatch : public cPtr_lexicalExpression {
//--- Attributes
  public : GGS_lstring  mString ;
  public : GGS_lstring  mErrorMessage ;
//--- Constructor
  public : cPtr_lexicalStringNotMatch (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalStringNotMatch * nextObject (void) const {
    return (cPtr_lexicalStringNotMatch *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalStringNotMatch * previousObject (void) const {
    return (cPtr_lexicalStringNotMatch *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalStringNotMatch * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalStringNotMatch ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@lexicalInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalInstruction : public C_GGS_MetamodelEntity {
//--- Attributes
//--- Constructor
  public : cPtr_lexicalInstruction (LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalInstruction * nextObject (void) const {
    return (cPtr_lexicalInstruction *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalInstruction * previousObject (void) const {
    return (cPtr_lexicalInstruction *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalInstruction * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalInstruction ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Element of list '@lexicalStructuredSendInstruction'             *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalStructuredSendInstruction : public cPtr_lexicalInstruction {
//--- Attributes
  public : GGS__list_lexicalSendSearch  mLexicalSendSearchList ;
  public : GGS_lexicalSendDefaultAction  mLexicalSendDefaultAction ;
//--- Constructor
  public : cPtr_lexicalStructuredSendInstruction (const GGS__list_lexicalSendSearch & ,
                                const GGS_lexicalSendDefaultAction & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalStructuredSendInstruction * nextObject (void) const {
    return (cPtr_lexicalStructuredSendInstruction *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalStructuredSendInstruction * previousObject (void) const {
    return (cPtr_lexicalStructuredSendInstruction *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalStructuredSendInstruction * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalStructuredSendInstruction ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@lexicalSimpleSendInstruction'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalSimpleSendInstruction : public cPtr_lexicalInstruction {
//--- Attributes
  public : GGS_lstring  mSentTerminal ;
//--- Constructor
  public : cPtr_lexicalSimpleSendInstruction (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalSimpleSendInstruction * nextObject (void) const {
    return (cPtr_lexicalSimpleSendInstruction *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalSimpleSendInstruction * previousObject (void) const {
    return (cPtr_lexicalSimpleSendInstruction *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalSimpleSendInstruction * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalSimpleSendInstruction ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@lexicalSendDefaultAction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalSendDefaultAction : public C_GGS_MetamodelEntity {
//--- Attributes
//--- Constructor
  public : cPtr_lexicalSendDefaultAction (LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalSendDefaultAction * nextObject (void) const {
    return (cPtr_lexicalSendDefaultAction *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalSendDefaultAction * previousObject (void) const {
    return (cPtr_lexicalSendDefaultAction *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalSendDefaultAction * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalSendDefaultAction ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@lexicalSendTerminalByDefault'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalSendTerminalByDefault : public cPtr_lexicalSendDefaultAction {
//--- Attributes
  public : GGS_lstring  mDefaultSentTerminal ;
//--- Constructor
  public : cPtr_lexicalSendTerminalByDefault (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalSendTerminalByDefault * nextObject (void) const {
    return (cPtr_lexicalSendTerminalByDefault *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalSendTerminalByDefault * previousObject (void) const {
    return (cPtr_lexicalSendTerminalByDefault *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalSendTerminalByDefault * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalSendTerminalByDefault ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@lexicalErrorByDefault'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalErrorByDefault : public cPtr_lexicalSendDefaultAction {
//--- Attributes
  public : GGS_lstring  mDefaultErrorMessageName ;
//--- Constructor
  public : cPtr_lexicalErrorByDefault (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalErrorByDefault * nextObject (void) const {
    return (cPtr_lexicalErrorByDefault *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalErrorByDefault * previousObject (void) const {
    return (cPtr_lexicalErrorByDefault *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalErrorByDefault * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalErrorByDefault ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@lexicalSendSearch'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalSendSearch : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_lstring  mAttributeName ;
  public : GGS_lstring  mSearchListName ;
//--- Constructor
  public : cPtr_lexicalSendSearch (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalSendSearch * nextObject (void) const {
    return (cPtr_lexicalSendSearch *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalSendSearch * previousObject (void) const {
    return (cPtr_lexicalSendSearch *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalSendSearch * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalSendSearch ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@lexicalRepeatInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalRepeatInstruction : public cPtr_lexicalInstruction {
//--- Attributes
  public : GGS__list_lexicalInstruction  mRepeatedInstructionList ;
  public : GGS__list_lexicalWhileBranch  mLexicalWhileBranchList ;
//--- Constructor
  public : cPtr_lexicalRepeatInstruction (const GGS__list_lexicalInstruction & ,
                                const GGS__list_lexicalWhileBranch & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalRepeatInstruction * nextObject (void) const {
    return (cPtr_lexicalRepeatInstruction *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalRepeatInstruction * previousObject (void) const {
    return (cPtr_lexicalRepeatInstruction *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalRepeatInstruction * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalRepeatInstruction ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@lexicalWhileBranch'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalWhileBranch : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_lexicalExpression  mWhileExpression ;
  public : GGS__list_lexicalInstruction  mWhileInstructionList ;
//--- Constructor
  public : cPtr_lexicalWhileBranch (const GGS_lexicalExpression & ,
                                const GGS__list_lexicalInstruction & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalWhileBranch * nextObject (void) const {
    return (cPtr_lexicalWhileBranch *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalWhileBranch * previousObject (void) const {
    return (cPtr_lexicalWhileBranch *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalWhileBranch * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalWhileBranch ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@lexicalSelectInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalSelectInstruction : public cPtr_lexicalInstruction {
//--- Attributes
  public : GGS__list_lexicalSelectBranch  mLexicalWhileBranchList ;
  public : GGS__list_lexicalInstruction  mDefaultInstructionList ;
//--- Constructor
  public : cPtr_lexicalSelectInstruction (const GGS__list_lexicalSelectBranch & ,
                                const GGS__list_lexicalInstruction & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalSelectInstruction * nextObject (void) const {
    return (cPtr_lexicalSelectInstruction *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalSelectInstruction * previousObject (void) const {
    return (cPtr_lexicalSelectInstruction *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalSelectInstruction * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalSelectInstruction ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@lexicalSelectBranch'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalSelectBranch : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_lexicalExpression  mSelectExpression ;
  public : GGS__list_lexicalInstruction  mSelectInstructionList ;
//--- Constructor
  public : cPtr_lexicalSelectBranch (const GGS_lexicalExpression & ,
                                const GGS__list_lexicalInstruction & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalSelectBranch * nextObject (void) const {
    return (cPtr_lexicalSelectBranch *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalSelectBranch * previousObject (void) const {
    return (cPtr_lexicalSelectBranch *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalSelectBranch * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalSelectBranch ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@lexicalActionInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalActionInstruction : public cPtr_lexicalInstruction {
//--- Attributes
  public : GGS_lstring  mActionName ;
  public : GGS__list_lexicalActualArgument  mActualArgumentList ;
  public : GGS_lstringlist  mErrorMessageList ;
//--- Constructor
  public : cPtr_lexicalActionInstruction (const GGS_lstring & ,
                                const GGS__list_lexicalActualArgument & ,
                                const GGS_lstringlist & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalActionInstruction * nextObject (void) const {
    return (cPtr_lexicalActionInstruction *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalActionInstruction * previousObject (void) const {
    return (cPtr_lexicalActionInstruction *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalActionInstruction * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalActionInstruction ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@lexicalActualArgument'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalActualArgument : public C_GGS_MetamodelEntity {
//--- Attributes
//--- Constructor
  public : cPtr_lexicalActualArgument (LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalActualArgument * nextObject (void) const {
    return (cPtr_lexicalActualArgument *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalActualArgument * previousObject (void) const {
    return (cPtr_lexicalActualArgument *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalActualArgument * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalActualArgument ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@lexicalAttributeArgument'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalAttributeArgument : public cPtr_lexicalActualArgument {
//--- Attributes
  public : GGS_lstring  mAttributeName ;
//--- Constructor
  public : cPtr_lexicalAttributeArgument (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalAttributeArgument * nextObject (void) const {
    return (cPtr_lexicalAttributeArgument *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalAttributeArgument * previousObject (void) const {
    return (cPtr_lexicalAttributeArgument *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalAttributeArgument * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalAttributeArgument ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@lexicalCharacterArgument'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalCharacterArgument : public cPtr_lexicalActualArgument {
//--- Attributes
  public : GGS_lchar  mCharacter ;
//--- Constructor
  public : cPtr_lexicalCharacterArgument (const GGS_lchar & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalCharacterArgument * nextObject (void) const {
    return (cPtr_lexicalCharacterArgument *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalCharacterArgument * previousObject (void) const {
    return (cPtr_lexicalCharacterArgument *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalCharacterArgument * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalCharacterArgument ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Element of list '@lexicalCurrentCharacterArgument'             *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalCurrentCharacterArgument : public cPtr_lexicalActualArgument {
//--- Attributes
//--- Constructor
  public : cPtr_lexicalCurrentCharacterArgument (LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalCurrentCharacterArgument * nextObject (void) const {
    return (cPtr_lexicalCurrentCharacterArgument *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalCurrentCharacterArgument * previousObject (void) const {
    return (cPtr_lexicalCurrentCharacterArgument *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalCurrentCharacterArgument * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalCurrentCharacterArgument ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@lexicalFunctionArgument'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalFunctionArgument : public cPtr_lexicalActualArgument {
//--- Attributes
  public : GGS_lstring  mFunctionName ;
  public : GGS__list_lexicalActualArgument  mFunctionActualArgumentList ;
//--- Constructor
  public : cPtr_lexicalFunctionArgument (const GGS_lstring & ,
                                const GGS__list_lexicalActualArgument & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalFunctionArgument * nextObject (void) const {
    return (cPtr_lexicalFunctionArgument *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalFunctionArgument * previousObject (void) const {
    return (cPtr_lexicalFunctionArgument *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalFunctionArgument * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalFunctionArgument ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@lexicalDropInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalDropInstruction : public cPtr_lexicalInstruction {
//--- Attributes
  public : GGS_lstring  mTerminalName ;
//--- Constructor
  public : cPtr_lexicalDropInstruction (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalDropInstruction * nextObject (void) const {
    return (cPtr_lexicalDropInstruction *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalDropInstruction * previousObject (void) const {
    return (cPtr_lexicalDropInstruction *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalDropInstruction * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalDropInstruction ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@lexicalErrorInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalErrorInstruction : public cPtr_lexicalInstruction {
//--- Attributes
  public : GGS_lstring  mErrorMessageName ;
//--- Constructor
  public : cPtr_lexicalErrorInstruction (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalErrorInstruction * nextObject (void) const {
    return (cPtr_lexicalErrorInstruction *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalErrorInstruction * previousObject (void) const {
    return (cPtr_lexicalErrorInstruction *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalErrorInstruction * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalErrorInstruction ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@lexicalTagInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalTagInstruction : public cPtr_lexicalInstruction {
//--- Attributes
  public : GGS_lstring  mTagName ;
//--- Constructor
  public : cPtr_lexicalTagInstruction (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalTagInstruction * nextObject (void) const {
    return (cPtr_lexicalTagInstruction *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalTagInstruction * previousObject (void) const {
    return (cPtr_lexicalTagInstruction *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalTagInstruction * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalTagInstruction ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@lexicalRewindInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalRewindInstruction : public cPtr_lexicalInstruction {
//--- Attributes
  public : GGS_lstring  mTagName ;
  public : GGS_lstring  mTerminalName ;
//--- Constructor
  public : cPtr_lexicalRewindInstruction (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalRewindInstruction * nextObject (void) const {
    return (cPtr_lexicalRewindInstruction *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalRewindInstruction * previousObject (void) const {
    return (cPtr_lexicalRewindInstruction *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalRewindInstruction * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalRewindInstruction ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@lexicalLogInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lexicalLogInstruction : public cPtr_lexicalInstruction {
//--- Attributes
//--- Constructor
  public : cPtr_lexicalLogInstruction (LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lexicalLogInstruction * nextObject (void) const {
    return (cPtr_lexicalLogInstruction *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lexicalLogInstruction * previousObject (void) const {
    return (cPtr_lexicalLogInstruction *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Component Index
  public : virtual sint32 _metamodelComponentIndex (const sint32 inLevel) const ;

//--- Metamodel Component Name
  public : virtual const char * _metamodelComponentName (const sint32 inLevel) const ;

//--- Metamodel Class ID
  public : virtual sint32 _metamodelClassID (const sint32 inLevel) const ;

//--- Metamodel Class Name
  public : virtual const char * _metamodelClassName (const sint32 inLevel) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lexicalLogInstruction * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS__list_lexicalLogInstruction ;
} ;

//---------------------------------------------------------------------------*

#endif
