//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'optionTypesForAST.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      march 8th, 2010, at 22h19'43"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "optionTypesForAST.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "optionTypesForAST.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//            Class for 'optionDefaultValueEnumAST' Enumeration              *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_optionDefaultValueEnumAST ("optionDefaultValueEnumAST", false, NULL) ;

//---------------------------------------------------------------------------*

bool GGS_optionDefaultValueEnumAST::
isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_optionDefaultValueEnumAST::
operator_isEqual (const GGS_optionDefaultValueEnumAST inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_optionDefaultValueEnumAST::
operator_isNotEqual (const GGS_optionDefaultValueEnumAST inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_optionDefaultValueEnumAST::
operator_infOrEqual (const GGS_optionDefaultValueEnumAST inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_optionDefaultValueEnumAST::
operator_supOrEqual (const GGS_optionDefaultValueEnumAST inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_optionDefaultValueEnumAST::
operator_strictInf (const GGS_optionDefaultValueEnumAST inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_optionDefaultValueEnumAST::
operator_strictSup (const GGS_optionDefaultValueEnumAST inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_optionDefaultValueEnumAST::
reader_description (const PMSInt32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @optionDefaultValueEnumAST" ;
  switch (mValue) {
  case enum_noDefaultValue:
    s << " noDefaultValue>" ;
    break ;
  case enum_stringDefaultValue:
    s << " stringDefaultValue>" ;
    break ;
  case enum_unsignedDefaultValue:
    s << " unsignedDefaultValue>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_optionDefaultValueEnumAST::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_optionDefaultValueEnumAST * p = NULL ;
    macroMyNew (p, GGS_optionDefaultValueEnumAST (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_optionDefaultValueEnumAST GGS_optionDefaultValueEnumAST::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_optionDefaultValueEnumAST result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_optionDefaultValueEnumAST * p = dynamic_cast <const GGS_optionDefaultValueEnumAST *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_optionDefaultValueEnumAST, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_optionDefaultValueEnumAST::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_optionDefaultValueEnumAST ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@commandLineOptionListAST'                 *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_commandLineOptionListAST::
elementOf_GGS_commandLineOptionListAST (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lchar & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_lstring & argument_4,
                                const GGS_lstring & argument_5,
                                const GGS_optionDefaultValueEnumAST& argument_6
                                COMMA_LOCATION_ARGS) :
AC_galgas_list::cListElement (THERE),
mOptionTypeName (argument_0),
mOptionInternalName (argument_1),
mOptionInvocationLetter (argument_2),
mOptionInvocationString (argument_3),
mOptionComment (argument_4),
mOptionDefaultValue (argument_5),
mOptionDefaultValueKind (argument_6) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_commandLineOptionListAST::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_commandLineOptionListAST * ptr = dynamic_cast <const elementOf_GGS_commandLineOptionListAST *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mOptionTypeName.operator_isEqual (ptr->mOptionTypeName).boolValue ()
         && mOptionInternalName.operator_isEqual (ptr->mOptionInternalName).boolValue ()
         && mOptionInvocationLetter.operator_isEqual (ptr->mOptionInvocationLetter).boolValue ()
         && mOptionInvocationString.operator_isEqual (ptr->mOptionInvocationString).boolValue ()
         && mOptionComment.operator_isEqual (ptr->mOptionComment).boolValue ()
         && mOptionDefaultValue.operator_isEqual (ptr->mOptionDefaultValue).boolValue ()
         && mOptionDefaultValueKind.operator_isEqual (ptr->mOptionDefaultValueKind).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_commandLineOptionListAST::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOptionTypeName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOptionInternalName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOptionInvocationLetter.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOptionInvocationString.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOptionComment.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOptionDefaultValue.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOptionDefaultValueKind.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     List '@commandLineOptionListAST'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_commandLineOptionListAST ("commandLineOptionListAST", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_commandLineOptionListAST::
internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_lchar & argument_2,
                    const GGS_lstring & argument_3,
                    const GGS_lstring & argument_4,
                    const GGS_lstring & argument_5,
                    const GGS_optionDefaultValueEnumAST& argument_6
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6
                                COMMA_THERE)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionListAST::
internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_lchar & argument_2,
                    const GGS_lstring & argument_3,
                    const GGS_lstring & argument_4,
                    const GGS_lstring & argument_5,
                    const GGS_optionDefaultValueEnumAST& argument_6
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6
                                COMMA_THERE)) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionListAST::
addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lchar & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_lstring & argument_4,
                                const GGS_lstring & argument_5,
                                const GGS_optionDefaultValueEnumAST& argument_6) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()&& argument_2.isBuilt ()&& argument_3.isBuilt ()&& argument_4.isBuilt ()&& argument_5.isBuilt ()&& argument_6.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_commandLineOptionListAST GGS_commandLineOptionListAST::
operator_concat (const GGS_commandLineOptionListAST & inOperand) const {
  GGS_commandLineOptionListAST result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionListAST::
dotAssign_operation (const GGS_commandLineOptionListAST inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_commandLineOptionListAST * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mOptionTypeName ;
          GGS_lstring  p_1 = p->mOptionInternalName ;
          GGS_lchar  p_2 = p->mOptionInvocationLetter ;
          GGS_lstring  p_3 = p->mOptionInvocationString ;
          GGS_lstring  p_4 = p->mOptionComment ;
          GGS_lstring  p_5 = p->mOptionDefaultValue ;
          GGS_optionDefaultValueEnumAST p_6 = p->mOptionDefaultValueKind ;
          internalAppendValues (p_0, p_1, p_2, p_3, p_4, p_5, p_6 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionListAST::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0,
                     const GGS_lstring & argument_1,
                     const GGS_lchar & argument_2,
                     const GGS_lstring & argument_3,
                     const GGS_lstring & argument_4,
                     const GGS_lstring & argument_5,
                     const GGS_optionDefaultValueEnumAST& argument_6
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionListAST::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mOptionTypeName,
                                ptr->mOptionInternalName,
                                ptr->mOptionInvocationLetter,
                                ptr->mOptionInvocationString,
                                ptr->mOptionComment,
                                ptr->mOptionDefaultValue,
                                ptr->mOptionDefaultValueKind
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_commandLineOptionListAST  GGS_commandLineOptionListAST::
constructor_emptyList (void) {
  GGS_commandLineOptionListAST result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_commandLineOptionListAST  GGS_commandLineOptionListAST::
constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lchar & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_lstring & argument_4,
                                const GGS_lstring & argument_5,
                                const GGS_optionDefaultValueEnumAST& argument_6) {
  GGS_commandLineOptionListAST result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2, argument_3, argument_4, argument_5, argument_6) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionListAST::
internalSubListWithRange (GGS_commandLineOptionListAST & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mOptionTypeName, ptr->mOptionInternalName, ptr->mOptionInvocationLetter, ptr->mOptionInvocationString, ptr->mOptionComment, ptr->mOptionDefaultValue, ptr->mOptionDefaultValueKind) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_commandLineOptionListAST GGS_commandLineOptionListAST::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_commandLineOptionListAST result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_commandLineOptionListAST GGS_commandLineOptionListAST::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_commandLineOptionListAST result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_commandLineOptionListAST::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@commandLineOptionListAST", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionListAST::
method_first (C_Compiler & inLexique,
              GGS_lstring & _out_0,
              GGS_lstring & _out_1,
              GGS_lchar & _out_2,
              GGS_lstring & _out_3,
              GGS_lstring & _out_4,
              GGS_lstring & _out_5,
              GGS_optionDefaultValueEnumAST& _out_6
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mOptionTypeName ;
    _out_1 = ptr->mOptionInternalName ;
    _out_2 = ptr->mOptionInvocationLetter ;
    _out_3 = ptr->mOptionInvocationString ;
    _out_4 = ptr->mOptionComment ;
    _out_5 = ptr->mOptionDefaultValue ;
    _out_6 = ptr->mOptionDefaultValueKind ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
    _out_5.drop () ;
    _out_6.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionListAST::
method_last (C_Compiler & inLexique,
             GGS_lstring & _out_0,
             GGS_lstring & _out_1,
             GGS_lchar & _out_2,
             GGS_lstring & _out_3,
             GGS_lstring & _out_4,
             GGS_lstring & _out_5,
             GGS_optionDefaultValueEnumAST& _out_6
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mOptionTypeName ;
    _out_1 = ptr->mOptionInternalName ;
    _out_2 = ptr->mOptionInvocationLetter ;
    _out_3 = ptr->mOptionInvocationString ;
    _out_4 = ptr->mOptionComment ;
    _out_5 = ptr->mOptionDefaultValue ;
    _out_6 = ptr->mOptionDefaultValueKind ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
    _out_5.drop () ;
    _out_6.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionListAST::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_lstring & _out_0,
                 GGS_lstring & _out_1,
                 GGS_lchar & _out_2,
                 GGS_lstring & _out_3,
                 GGS_lstring & _out_4,
                 GGS_lstring & _out_5,
                 GGS_optionDefaultValueEnumAST& _out_6
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mOptionTypeName ;
    _out_1 = ptr->mOptionInternalName ;
    _out_2 = ptr->mOptionInvocationLetter ;
    _out_3 = ptr->mOptionInvocationString ;
    _out_4 = ptr->mOptionComment ;
    _out_5 = ptr->mOptionDefaultValue ;
    _out_6 = ptr->mOptionDefaultValueKind ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
    _out_5.drop () ;
    _out_6.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionListAST::
modifier_popLast (C_Compiler & inLexique,
                GGS_lstring & _out_0,
                GGS_lstring & _out_1,
                GGS_lchar & _out_2,
                GGS_lstring & _out_3,
                GGS_lstring & _out_4,
                GGS_lstring & _out_5,
                GGS_optionDefaultValueEnumAST& _out_6
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mOptionTypeName ;
    _out_1 = ptr->mOptionInternalName ;
    _out_2 = ptr->mOptionInvocationLetter ;
    _out_3 = ptr->mOptionInvocationString ;
    _out_4 = ptr->mOptionComment ;
    _out_5 = ptr->mOptionDefaultValue ;
    _out_6 = ptr->mOptionDefaultValueKind ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
    _out_5.drop () ;
    _out_6.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_commandLineOptionListAST::
reader_mOptionTypeNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mOptionTypeName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_commandLineOptionListAST::
reader_mOptionInternalNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mOptionInternalName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lchar  GGS_commandLineOptionListAST::
reader_mOptionInvocationLetterAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lchar  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mOptionInvocationLetter ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_commandLineOptionListAST::
reader_mOptionInvocationStringAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mOptionInvocationString ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_commandLineOptionListAST::
reader_mOptionCommentAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mOptionComment ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_commandLineOptionListAST::
reader_mOptionDefaultValueAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mOptionDefaultValue ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_optionDefaultValueEnumAST GGS_commandLineOptionListAST::
reader_mOptionDefaultValueKindAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_optionDefaultValueEnumAST result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mOptionDefaultValueKind ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionListAST::
modifier_setMOptionTypeNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mOptionTypeName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionListAST::
modifier_setMOptionInternalNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mOptionInternalName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionListAST::
modifier_setMOptionInvocationLetterAtIndex (C_Compiler & inLexique,
                              const GGS_lchar  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mOptionInvocationLetter = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionListAST::
modifier_setMOptionInvocationStringAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mOptionInvocationString = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionListAST::
modifier_setMOptionCommentAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mOptionComment = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionListAST::
modifier_setMOptionDefaultValueAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mOptionDefaultValue = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionListAST::
modifier_setMOptionDefaultValueKindAtIndex (C_Compiler & inLexique,
                              const GGS_optionDefaultValueEnumAST & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mOptionDefaultValueKind = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_commandLineOptionListAST::cEnumerator::_mOptionTypeName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mOptionTypeName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_commandLineOptionListAST::cEnumerator::_mOptionInternalName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mOptionInternalName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lchar  & GGS_commandLineOptionListAST::cEnumerator::_mOptionInvocationLetter (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mOptionInvocationLetter ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_commandLineOptionListAST::cEnumerator::_mOptionInvocationString (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mOptionInvocationString ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_commandLineOptionListAST::cEnumerator::_mOptionComment (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mOptionComment ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_commandLineOptionListAST::cEnumerator::_mOptionDefaultValue (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mOptionDefaultValue ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_optionDefaultValueEnumAST & GGS_commandLineOptionListAST::cEnumerator::_mOptionDefaultValueKind (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mOptionDefaultValueKind ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_commandLineOptionListAST::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_commandLineOptionListAST * p = NULL ;
    macroMyNew (p, GGS_commandLineOptionListAST (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_commandLineOptionListAST GGS_commandLineOptionListAST::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_commandLineOptionListAST result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_commandLineOptionListAST * p = dynamic_cast <const GGS_commandLineOptionListAST *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_commandLineOptionListAST, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_commandLineOptionListAST::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_commandLineOptionListAST ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'cPtr_optionComponentAST'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_optionComponentAST::
cPtr_optionComponentAST (const GGS_lstring & argument_0,
                                const GGS_commandLineOptionListAST & argument_1
                                COMMA_LOCATION_ARGS)
:cPtr__AC_galgas_class (THERE),
mOptionComponentName (argument_0),
mOptions (argument_1) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_optionComponentAST * GGS_optionComponentAST::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_optionComponentAST) ;
    return (cPtr_optionComponentAST *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_optionComponentAST::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_optionComponentAST * ptr = dynamic_cast <const cPtr_optionComponentAST *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mOptionComponentName.operator_isEqual (ptr->mOptionComponentName).boolValue ()
         && mOptions.operator_isEqual (ptr->mOptions).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_optionComponentAST::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@optionComponentAST:"
           << mOptionComponentName.reader_description (inIndentation + 1)
           << mOptions.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_optionComponentAST::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_optionComponentAST::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_optionComponentAST (& typeid (cPtr_optionComponentAST), NULL, "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_optionComponentAST::galgasRTTI (void) const {
  return & gClassInfoFor__optionComponentAST ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_optionComponentAST::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_optionComponentAST (mOptionComponentName, mOptions COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_optionComponentAST'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_optionComponentAST ("optionComponentAST", true, NULL) ;

//---------------------------------------------------------------------------*

GGS_optionComponentAST::
GGS_optionComponentAST (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_optionComponentAST::
GGS_optionComponentAST (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_optionComponentAST GGS_optionComponentAST::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_optionComponentAST result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_optionComponentAST *> (inPointer) != NULL)
      : (typeid (cPtr_optionComponentAST) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_optionComponentAST (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_optionComponentAST),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_optionComponentAST GGS_optionComponentAST::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_commandLineOptionListAST & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_optionComponentAST result ;
  macroMyNew (result.mPointer, cPtr_optionComponentAST (argument_0,
                                argument_1 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_optionComponentAST::
reader_mOptionComponentName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_optionComponentAST *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_optionComponentAST *) mPointer)->mOptionComponentName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_commandLineOptionListAST  GGS_optionComponentAST::
reader_mOptions (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_commandLineOptionListAST   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_optionComponentAST *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_optionComponentAST *) mPointer)->mOptions ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_optionComponentAST::actualTypeName (void) const {
  return "optionComponentAST" ;
}

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * GGS_optionComponentAST::galgasObjectRunTimeInfo (void) const {
  AC_galgasClassRunTimeInformationEX * result = NULL ;
  if (mPointer != NULL) {
    result = mPointer->galgasRTTI () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

C_galgasRootClassRunTimeInformationEX gClassInfoFor__optionComponentAST ("optionComponentAST", & kTypeDescriptor_GGS_optionComponentAST) ;

//---------------------------------------------------------------------------*

GGS_object GGS_optionComponentAST::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_optionComponentAST * p = NULL ;
    macroMyNew (p, GGS_optionComponentAST (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_optionComponentAST GGS_optionComponentAST::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_optionComponentAST result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_optionComponentAST * p = dynamic_cast <const GGS_optionComponentAST *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_optionComponentAST, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_optionComponentAST::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_optionComponentAST ;
}

//---------------------------------------------------------------------------*

