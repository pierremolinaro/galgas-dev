//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'expressionMetamodel.h'                        *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                       may 17th, 2007, at 12h3'36"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef expressionMetamodel_METAMODEL_DEFINED
#define expressionMetamodel_METAMODEL_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/predefined_types.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*

uint32 _metamodel_index_for_expressionMetamodel (void) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_semanticExpressionList ;
class GGS_semanticExpression ;
class cPtr_semanticExpression ;
class GGS_outExpressionListList ;
class GGS_outExpressionList ;
class cPtr_outExpressionList ;
class GGS_variableExpressionList ;
class GGS_variableExpression ;
class cPtr_variableExpression ;
class GGS_literalBooleanExpressionList ;
class GGS_literalBooleanExpression ;
class cPtr_literalBooleanExpression ;
class GGS_literalCharExpressionList ;
class GGS_literalCharExpression ;
class cPtr_literalCharExpression ;
class GGS_literalStringExpressionList ;
class GGS_literalStringExpression ;
class cPtr_literalStringExpression ;
class GGS_literalDoubleExpressionList ;
class GGS_literalDoubleExpression ;
class cPtr_literalDoubleExpression ;
class GGS_literalUIntExpressionList ;
class GGS_literalUIntExpression ;
class cPtr_literalUIntExpression ;
class GGS_literalUInt64ExpressionList ;
class GGS_literalUInt64Expression ;
class cPtr_literalUInt64Expression ;
class GGS_literalSIntExpressionList ;
class GGS_literalSIntExpression ;
class cPtr_literalSIntExpression ;
class GGS_literalSInt64ExpressionList ;
class GGS_literalSInt64Expression ;
class cPtr_literalSInt64Expression ;
class GGS_hereExpressionList ;
class GGS_hereExpression ;
class cPtr_hereExpression ;
class GGS_constructorExpressionList ;
class GGS_constructorExpression ;
class cPtr_constructorExpression ;
class GGS_readerCallExpressionList ;
class GGS_readerCallExpression ;
class cPtr_readerCallExpression ;
class GGS_optionExpressionList ;
class GGS_optionExpression ;
class cPtr_optionExpression ;
class GGS_concatExpressionList ;
class GGS_concatExpression ;
class cPtr_concatExpression ;
class GGS_orExpressionList ;
class GGS_orExpression ;
class cPtr_orExpression ;
class GGS_xorExpressionList ;
class GGS_xorExpression ;
class cPtr_xorExpression ;
class GGS_andExpressionList ;
class GGS_andExpression ;
class cPtr_andExpression ;
class GGS_equalExpressionList ;
class GGS_equalExpression ;
class cPtr_equalExpression ;
class GGS_notEqualExpressionList ;
class GGS_notEqualExpression ;
class cPtr_notEqualExpression ;
class GGS_lowerOrEqualExpressionList ;
class GGS_lowerOrEqualExpression ;
class cPtr_lowerOrEqualExpression ;
class GGS_greaterOrEqualExpressionList ;
class GGS_greaterOrEqualExpression ;
class cPtr_greaterOrEqualExpression ;
class GGS_strictGreaterExpressionList ;
class GGS_strictGreaterExpression ;
class cPtr_strictGreaterExpression ;
class GGS_strictLowerExpressionList ;
class GGS_strictLowerExpression ;
class cPtr_strictLowerExpression ;
class GGS_leftShiftExpressionList ;
class GGS_leftShiftExpression ;
class cPtr_leftShiftExpression ;
class GGS_rightShiftExpressionList ;
class GGS_rightShiftExpression ;
class cPtr_rightShiftExpression ;
class GGS_addExpressionList ;
class GGS_addExpression ;
class cPtr_addExpression ;
class GGS_subExpressionList ;
class GGS_subExpression ;
class cPtr_subExpression ;
class GGS_multiplicationExpressionList ;
class GGS_multiplicationExpression ;
class cPtr_multiplicationExpression ;
class GGS_divisionExpressionList ;
class GGS_divisionExpression ;
class cPtr_divisionExpression ;
class GGS_moduloExpressionList ;
class GGS_moduloExpression ;
class cPtr_moduloExpression ;
class GGS_unaryMinusExpressionList ;
class GGS_unaryMinusExpression ;
class cPtr_unaryMinusExpression ;
class GGS_notExpressionList ;
class GGS_notExpression ;
class cPtr_notExpression ;
class GGS_negateExpressionList ;
class GGS_negateExpression ;
class cPtr_negateExpression ;
class GGS_trueExpressionList ;
class GGS_trueExpression ;
class cPtr_trueExpression ;
class GGS_falseExpressionList ;
class GGS_falseExpression ;
class cPtr_falseExpression ;
class GGS_varInExpressionList ;
class GGS_varInExpression ;
class cPtr_varInExpression ;
class GGS_selfInExpressionList ;
class GGS_selfInExpression ;
class cPtr_selfInExpression ;
class GGS_descriptionInExpressionList ;
class GGS_descriptionInExpression ;
class cPtr_descriptionInExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_semanticExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_semanticExpression : public AC_galgas_entity {
//--- getPtr
  public : inline cPtr_semanticExpression * getPtr (void) const {
    return (cPtr_semanticExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_semanticExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_semanticExpression * operator () (void) const {
      return (cPtr_semanticExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@semanticExpressionList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_semanticExpressionList : public AC_galgas_list {
  public : typedef cPtr_semanticExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_semanticExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_semanticExpressionList constructor_listWithValue (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_semanticExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation () ;
//--- Handling '.' GALGAS operator
  public : GGS_semanticExpressionList _operator_concat (const GGS_semanticExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues () ;

  protected : void _internalPrependValues () ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_semanticExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_outExpressionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_outExpressionList : public AC_galgas_entity {
//--- 'new' constructor
  public : static GGS_outExpressionList constructor_new (C_Compiler & inLexique,
                                const GGS_semanticExpressionList & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- getPtr
  public : inline cPtr_outExpressionList * getPtr (void) const {
    return (cPtr_outExpressionList *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticExpressionList  reader_mExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mEndOfExpressionLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_outExpressionList * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_outExpressionList * operator () (void) const {
      return (cPtr_outExpressionList *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@outExpressionListList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_outExpressionListList : public AC_galgas_list {
  public : typedef cPtr_outExpressionList element_type ;
//--- Constructor 'emptyList'
  public : static GGS_outExpressionListList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_outExpressionListList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_semanticExpressionList & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_outExpressionListList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_semanticExpressionList & _out_0,
                              GGS_location & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_semanticExpressionList & _out_0,
                             GGS_location & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_semanticExpressionList & _out_0,
                                GGS_location & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_semanticExpressionList & _out_0,
                                 GGS_location & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_semanticExpressionList & argument_0,
                                const GGS_location & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_outExpressionListList _operator_concat (const GGS_outExpressionListList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_semanticExpressionList & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_semanticExpressionList & argument_0,
                                const GGS_location & argument_1) ;

  protected : void _internalPrependValues (const GGS_semanticExpressionList & argument_0,
                                const GGS_location & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_outExpressionList & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_variableExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_variableExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_variableExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mVariableName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_variableExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_variableExpression * operator () (void) const {
      return (cPtr_variableExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@variableExpressionList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_variableExpressionList : public AC_galgas_list {
  public : typedef cPtr_variableExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_variableExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_variableExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_variableExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_variableExpressionList _operator_concat (const GGS_variableExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_variableExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_literalBooleanExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalBooleanExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_literalBooleanExpression constructor_new (C_Compiler & inLexique,
                                const GGS_bool& argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_bool reader_mValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalBooleanExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalBooleanExpression * operator () (void) const {
      return (cPtr_literalBooleanExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@literalBooleanExpressionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalBooleanExpressionList : public AC_galgas_list {
  public : typedef cPtr_literalBooleanExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_literalBooleanExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_literalBooleanExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_bool& argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_literalBooleanExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_bool& _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_bool& _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_bool& _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_bool& _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_bool& argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_literalBooleanExpressionList _operator_concat (const GGS_literalBooleanExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_bool& argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_bool& argument_0) ;

  protected : void _internalPrependValues (const GGS_bool& argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_literalBooleanExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_literalCharExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalCharExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_literalCharExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lchar & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lchar  reader_mValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalCharExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalCharExpression * operator () (void) const {
      return (cPtr_literalCharExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@literalCharExpressionList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalCharExpressionList : public AC_galgas_list {
  public : typedef cPtr_literalCharExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_literalCharExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_literalCharExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lchar & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_literalCharExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lchar & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lchar & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lchar & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lchar & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lchar & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_literalCharExpressionList _operator_concat (const GGS_literalCharExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lchar & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lchar & argument_0) ;

  protected : void _internalPrependValues (const GGS_lchar & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_literalCharExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_literalStringExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalStringExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_literalStringExpression constructor_new (C_Compiler & inLexique,
                                const GGS_stringlist & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_stringlist  reader_mStringSequence (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalStringExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalStringExpression * operator () (void) const {
      return (cPtr_literalStringExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@literalStringExpressionList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalStringExpressionList : public AC_galgas_list {
  public : typedef cPtr_literalStringExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_literalStringExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_literalStringExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_stringlist & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_literalStringExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_stringlist & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_stringlist & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_stringlist & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_stringlist & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_stringlist & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_literalStringExpressionList _operator_concat (const GGS_literalStringExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_stringlist & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_stringlist & argument_0) ;

  protected : void _internalPrependValues (const GGS_stringlist & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_literalStringExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_literalDoubleExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalDoubleExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_literalDoubleExpression constructor_new (C_Compiler & inLexique,
                                const GGS_ldouble & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_ldouble  reader_mValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalDoubleExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalDoubleExpression * operator () (void) const {
      return (cPtr_literalDoubleExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@literalDoubleExpressionList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalDoubleExpressionList : public AC_galgas_list {
  public : typedef cPtr_literalDoubleExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_literalDoubleExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_literalDoubleExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_ldouble & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_literalDoubleExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_ldouble & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_ldouble & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_ldouble & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_ldouble & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_ldouble & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_literalDoubleExpressionList _operator_concat (const GGS_literalDoubleExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_ldouble & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_ldouble & argument_0) ;

  protected : void _internalPrependValues (const GGS_ldouble & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_literalDoubleExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_literalUIntExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalUIntExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_literalUIntExpression constructor_new (C_Compiler & inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint  reader_mValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalUIntExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalUIntExpression * operator () (void) const {
      return (cPtr_literalUIntExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@literalUIntExpressionList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalUIntExpressionList : public AC_galgas_list {
  public : typedef cPtr_literalUIntExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_literalUIntExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_literalUIntExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_literalUIntExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_luint & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_luint & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_luint & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_luint & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_luint & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_literalUIntExpressionList _operator_concat (const GGS_literalUIntExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_luint & argument_0) ;

  protected : void _internalPrependValues (const GGS_luint & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_literalUIntExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_literalUInt64Expression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalUInt64Expression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_literalUInt64Expression constructor_new (C_Compiler & inLexique,
                                const GGS_luint64 & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint64  reader_mValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalUInt64Expression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalUInt64Expression * operator () (void) const {
      return (cPtr_literalUInt64Expression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@literalUInt64ExpressionList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalUInt64ExpressionList : public AC_galgas_list {
  public : typedef cPtr_literalUInt64Expression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_literalUInt64ExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_literalUInt64ExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_luint64 & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_literalUInt64ExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_luint64 & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_luint64 & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_luint64 & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_luint64 & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_luint64 & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_literalUInt64ExpressionList _operator_concat (const GGS_literalUInt64ExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_luint64 & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_luint64 & argument_0) ;

  protected : void _internalPrependValues (const GGS_luint64 & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_literalUInt64Expression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_literalSIntExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalSIntExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_literalSIntExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lsint & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lsint  reader_mValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalSIntExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalSIntExpression * operator () (void) const {
      return (cPtr_literalSIntExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@literalSIntExpressionList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalSIntExpressionList : public AC_galgas_list {
  public : typedef cPtr_literalSIntExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_literalSIntExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_literalSIntExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lsint & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_literalSIntExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lsint & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lsint & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lsint & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lsint & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lsint & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_literalSIntExpressionList _operator_concat (const GGS_literalSIntExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lsint & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lsint & argument_0) ;

  protected : void _internalPrependValues (const GGS_lsint & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_literalSIntExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_literalSInt64Expression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalSInt64Expression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_literalSInt64Expression constructor_new (C_Compiler & inLexique,
                                const GGS_lsint64 & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lsint64  reader_mValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalSInt64Expression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalSInt64Expression * operator () (void) const {
      return (cPtr_literalSInt64Expression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@literalSInt64ExpressionList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalSInt64ExpressionList : public AC_galgas_list {
  public : typedef cPtr_literalSInt64Expression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_literalSInt64ExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_literalSInt64ExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lsint64 & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_literalSInt64ExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lsint64 & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lsint64 & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lsint64 & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lsint64 & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lsint64 & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_literalSInt64ExpressionList _operator_concat (const GGS_literalSInt64ExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lsint64 & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lsint64 & argument_0) ;

  protected : void _internalPrependValues (const GGS_lsint64 & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_literalSInt64Expression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_hereExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_hereExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_hereExpression constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_hereExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_hereExpression * operator () (void) const {
      return (cPtr_hereExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@hereExpressionList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_hereExpressionList : public AC_galgas_list {
  public : typedef cPtr_hereExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_hereExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_hereExpressionList constructor_listWithValue (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_hereExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation () ;
//--- Handling '.' GALGAS operator
  public : GGS_hereExpressionList _operator_concat (const GGS_hereExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues () ;

  protected : void _internalPrependValues () ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_hereExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_constructorExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_constructorExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_constructorExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressionList & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mConstructorName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_outExpressionList  reader_mExpressions (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_constructorExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_constructorExpression * operator () (void) const {
      return (cPtr_constructorExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@constructorExpressionList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_constructorExpressionList : public AC_galgas_list {
  public : typedef cPtr_constructorExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_constructorExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_constructorExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressionList & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_constructorExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_lstring & _out_1,
                              GGS_outExpressionList & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_lstring & _out_1,
                             GGS_outExpressionList & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_lstring & _out_1,
                                GGS_outExpressionList & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lstring & _out_1,
                                 GGS_outExpressionList & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressionList & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_constructorExpressionList _operator_concat (const GGS_constructorExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressionList & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressionList & argument_2) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressionList & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_constructorExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_readerCallExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_readerCallExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_readerCallExpression constructor_new (C_Compiler & inLexique,
                                const GGS_semanticExpression & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressionList & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticExpression  reader_mReceiver (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mReaderName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_outExpressionList  reader_mExpressions (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_readerCallExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_readerCallExpression * operator () (void) const {
      return (cPtr_readerCallExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     list '@readerCallExpressionList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_readerCallExpressionList : public AC_galgas_list {
  public : typedef cPtr_readerCallExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_readerCallExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_readerCallExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_semanticExpression & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressionList & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_readerCallExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_semanticExpression & _out_0,
                              GGS_lstring & _out_1,
                              GGS_outExpressionList & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_semanticExpression & _out_0,
                             GGS_lstring & _out_1,
                             GGS_outExpressionList & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_semanticExpression & _out_0,
                                GGS_lstring & _out_1,
                                GGS_outExpressionList & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_semanticExpression & _out_0,
                                 GGS_lstring & _out_1,
                                 GGS_outExpressionList & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_semanticExpression & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressionList & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_readerCallExpressionList _operator_concat (const GGS_readerCallExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_semanticExpression & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressionList & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_semanticExpression & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressionList & argument_2) ;

  protected : void _internalPrependValues (const GGS_semanticExpression & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressionList & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_readerCallExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_optionExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_optionExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_optionExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mOptionComponentName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mOptionEntryName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_optionExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_optionExpression * operator () (void) const {
      return (cPtr_optionExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@optionExpressionList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_optionExpressionList : public AC_galgas_list {
  public : typedef cPtr_optionExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_optionExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_optionExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_optionExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_lstring & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_lstring & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_lstring & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lstring & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_optionExpressionList _operator_concat (const GGS_optionExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_optionExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_concatExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_concatExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_concatExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_concatExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_concatExpression * operator () (void) const {
      return (cPtr_concatExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@concatExpressionList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_concatExpressionList : public AC_galgas_list {
  public : typedef cPtr_concatExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_concatExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_concatExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_concatExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0,
                              GGS_semanticExpression & _out_1,
                              GGS_semanticExpression & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0,
                             GGS_semanticExpression & _out_1,
                             GGS_semanticExpression & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0,
                                GGS_semanticExpression & _out_1,
                                GGS_semanticExpression & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0,
                                 GGS_semanticExpression & _out_1,
                                 GGS_semanticExpression & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_concatExpressionList _operator_concat (const GGS_concatExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

  protected : void _internalPrependValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_concatExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_orExpression'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_orExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_orExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_orExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_orExpression * operator () (void) const {
      return (cPtr_orExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         list '@orExpressionList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_orExpressionList : public AC_galgas_list {
  public : typedef cPtr_orExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_orExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_orExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_orExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0,
                              GGS_semanticExpression & _out_1,
                              GGS_semanticExpression & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0,
                             GGS_semanticExpression & _out_1,
                             GGS_semanticExpression & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0,
                                GGS_semanticExpression & _out_1,
                                GGS_semanticExpression & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0,
                                 GGS_semanticExpression & _out_1,
                                 GGS_semanticExpression & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_orExpressionList _operator_concat (const GGS_orExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

  protected : void _internalPrependValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_orExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_xorExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_xorExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_xorExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_xorExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_xorExpression * operator () (void) const {
      return (cPtr_xorExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@xorExpressionList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_xorExpressionList : public AC_galgas_list {
  public : typedef cPtr_xorExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_xorExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_xorExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_xorExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0,
                              GGS_semanticExpression & _out_1,
                              GGS_semanticExpression & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0,
                             GGS_semanticExpression & _out_1,
                             GGS_semanticExpression & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0,
                                GGS_semanticExpression & _out_1,
                                GGS_semanticExpression & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0,
                                 GGS_semanticExpression & _out_1,
                                 GGS_semanticExpression & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_xorExpressionList _operator_concat (const GGS_xorExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

  protected : void _internalPrependValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_xorExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_andExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_andExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_andExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_andExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_andExpression * operator () (void) const {
      return (cPtr_andExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@andExpressionList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_andExpressionList : public AC_galgas_list {
  public : typedef cPtr_andExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_andExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_andExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_andExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0,
                              GGS_semanticExpression & _out_1,
                              GGS_semanticExpression & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0,
                             GGS_semanticExpression & _out_1,
                             GGS_semanticExpression & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0,
                                GGS_semanticExpression & _out_1,
                                GGS_semanticExpression & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0,
                                 GGS_semanticExpression & _out_1,
                                 GGS_semanticExpression & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_andExpressionList _operator_concat (const GGS_andExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

  protected : void _internalPrependValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_andExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_equalExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_equalExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_equalExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_equalExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_equalExpression * operator () (void) const {
      return (cPtr_equalExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@equalExpressionList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_equalExpressionList : public AC_galgas_list {
  public : typedef cPtr_equalExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_equalExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_equalExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_equalExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0,
                              GGS_semanticExpression & _out_1,
                              GGS_semanticExpression & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0,
                             GGS_semanticExpression & _out_1,
                             GGS_semanticExpression & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0,
                                GGS_semanticExpression & _out_1,
                                GGS_semanticExpression & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0,
                                 GGS_semanticExpression & _out_1,
                                 GGS_semanticExpression & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_equalExpressionList _operator_concat (const GGS_equalExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

  protected : void _internalPrependValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_equalExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_notEqualExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_notEqualExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_notEqualExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_notEqualExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_notEqualExpression * operator () (void) const {
      return (cPtr_notEqualExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@notEqualExpressionList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_notEqualExpressionList : public AC_galgas_list {
  public : typedef cPtr_notEqualExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_notEqualExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_notEqualExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_notEqualExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0,
                              GGS_semanticExpression & _out_1,
                              GGS_semanticExpression & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0,
                             GGS_semanticExpression & _out_1,
                             GGS_semanticExpression & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0,
                                GGS_semanticExpression & _out_1,
                                GGS_semanticExpression & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0,
                                 GGS_semanticExpression & _out_1,
                                 GGS_semanticExpression & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_notEqualExpressionList _operator_concat (const GGS_notEqualExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

  protected : void _internalPrependValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_notEqualExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_lowerOrEqualExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lowerOrEqualExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_lowerOrEqualExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lowerOrEqualExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lowerOrEqualExpression * operator () (void) const {
      return (cPtr_lowerOrEqualExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@lowerOrEqualExpressionList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lowerOrEqualExpressionList : public AC_galgas_list {
  public : typedef cPtr_lowerOrEqualExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_lowerOrEqualExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_lowerOrEqualExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_lowerOrEqualExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0,
                              GGS_semanticExpression & _out_1,
                              GGS_semanticExpression & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0,
                             GGS_semanticExpression & _out_1,
                             GGS_semanticExpression & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0,
                                GGS_semanticExpression & _out_1,
                                GGS_semanticExpression & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0,
                                 GGS_semanticExpression & _out_1,
                                 GGS_semanticExpression & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_lowerOrEqualExpressionList _operator_concat (const GGS_lowerOrEqualExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

  protected : void _internalPrependValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_lowerOrEqualExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_greaterOrEqualExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_greaterOrEqualExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_greaterOrEqualExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_greaterOrEqualExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_greaterOrEqualExpression * operator () (void) const {
      return (cPtr_greaterOrEqualExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@greaterOrEqualExpressionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_greaterOrEqualExpressionList : public AC_galgas_list {
  public : typedef cPtr_greaterOrEqualExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_greaterOrEqualExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_greaterOrEqualExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_greaterOrEqualExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0,
                              GGS_semanticExpression & _out_1,
                              GGS_semanticExpression & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0,
                             GGS_semanticExpression & _out_1,
                             GGS_semanticExpression & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0,
                                GGS_semanticExpression & _out_1,
                                GGS_semanticExpression & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0,
                                 GGS_semanticExpression & _out_1,
                                 GGS_semanticExpression & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_greaterOrEqualExpressionList _operator_concat (const GGS_greaterOrEqualExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

  protected : void _internalPrependValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_greaterOrEqualExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_strictGreaterExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_strictGreaterExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_strictGreaterExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_strictGreaterExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_strictGreaterExpression * operator () (void) const {
      return (cPtr_strictGreaterExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@strictGreaterExpressionList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_strictGreaterExpressionList : public AC_galgas_list {
  public : typedef cPtr_strictGreaterExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_strictGreaterExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_strictGreaterExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_strictGreaterExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0,
                              GGS_semanticExpression & _out_1,
                              GGS_semanticExpression & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0,
                             GGS_semanticExpression & _out_1,
                             GGS_semanticExpression & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0,
                                GGS_semanticExpression & _out_1,
                                GGS_semanticExpression & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0,
                                 GGS_semanticExpression & _out_1,
                                 GGS_semanticExpression & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_strictGreaterExpressionList _operator_concat (const GGS_strictGreaterExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

  protected : void _internalPrependValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_strictGreaterExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_strictLowerExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_strictLowerExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_strictLowerExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_strictLowerExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_strictLowerExpression * operator () (void) const {
      return (cPtr_strictLowerExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@strictLowerExpressionList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_strictLowerExpressionList : public AC_galgas_list {
  public : typedef cPtr_strictLowerExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_strictLowerExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_strictLowerExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_strictLowerExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0,
                              GGS_semanticExpression & _out_1,
                              GGS_semanticExpression & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0,
                             GGS_semanticExpression & _out_1,
                             GGS_semanticExpression & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0,
                                GGS_semanticExpression & _out_1,
                                GGS_semanticExpression & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0,
                                 GGS_semanticExpression & _out_1,
                                 GGS_semanticExpression & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_strictLowerExpressionList _operator_concat (const GGS_strictLowerExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

  protected : void _internalPrependValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_strictLowerExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_leftShiftExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_leftShiftExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_leftShiftExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_leftShiftExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_leftShiftExpression * operator () (void) const {
      return (cPtr_leftShiftExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     list '@leftShiftExpressionList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_leftShiftExpressionList : public AC_galgas_list {
  public : typedef cPtr_leftShiftExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_leftShiftExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_leftShiftExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_leftShiftExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0,
                              GGS_semanticExpression & _out_1,
                              GGS_semanticExpression & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0,
                             GGS_semanticExpression & _out_1,
                             GGS_semanticExpression & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0,
                                GGS_semanticExpression & _out_1,
                                GGS_semanticExpression & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0,
                                 GGS_semanticExpression & _out_1,
                                 GGS_semanticExpression & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_leftShiftExpressionList _operator_concat (const GGS_leftShiftExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

  protected : void _internalPrependValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_leftShiftExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_rightShiftExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_rightShiftExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_rightShiftExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_rightShiftExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_rightShiftExpression * operator () (void) const {
      return (cPtr_rightShiftExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     list '@rightShiftExpressionList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_rightShiftExpressionList : public AC_galgas_list {
  public : typedef cPtr_rightShiftExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_rightShiftExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_rightShiftExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_rightShiftExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0,
                              GGS_semanticExpression & _out_1,
                              GGS_semanticExpression & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0,
                             GGS_semanticExpression & _out_1,
                             GGS_semanticExpression & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0,
                                GGS_semanticExpression & _out_1,
                                GGS_semanticExpression & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0,
                                 GGS_semanticExpression & _out_1,
                                 GGS_semanticExpression & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_rightShiftExpressionList _operator_concat (const GGS_rightShiftExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

  protected : void _internalPrependValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_rightShiftExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_addExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_addExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_addExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_addExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_addExpression * operator () (void) const {
      return (cPtr_addExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@addExpressionList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_addExpressionList : public AC_galgas_list {
  public : typedef cPtr_addExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_addExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_addExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_addExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0,
                              GGS_semanticExpression & _out_1,
                              GGS_semanticExpression & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0,
                             GGS_semanticExpression & _out_1,
                             GGS_semanticExpression & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0,
                                GGS_semanticExpression & _out_1,
                                GGS_semanticExpression & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0,
                                 GGS_semanticExpression & _out_1,
                                 GGS_semanticExpression & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_addExpressionList _operator_concat (const GGS_addExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

  protected : void _internalPrependValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_addExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_subExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_subExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_subExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_subExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_subExpression * operator () (void) const {
      return (cPtr_subExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@subExpressionList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_subExpressionList : public AC_galgas_list {
  public : typedef cPtr_subExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_subExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_subExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_subExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0,
                              GGS_semanticExpression & _out_1,
                              GGS_semanticExpression & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0,
                             GGS_semanticExpression & _out_1,
                             GGS_semanticExpression & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0,
                                GGS_semanticExpression & _out_1,
                                GGS_semanticExpression & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0,
                                 GGS_semanticExpression & _out_1,
                                 GGS_semanticExpression & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_subExpressionList _operator_concat (const GGS_subExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

  protected : void _internalPrependValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_subExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_multiplicationExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_multiplicationExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_multiplicationExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_multiplicationExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_multiplicationExpression * operator () (void) const {
      return (cPtr_multiplicationExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@multiplicationExpressionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_multiplicationExpressionList : public AC_galgas_list {
  public : typedef cPtr_multiplicationExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_multiplicationExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_multiplicationExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_multiplicationExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0,
                              GGS_semanticExpression & _out_1,
                              GGS_semanticExpression & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0,
                             GGS_semanticExpression & _out_1,
                             GGS_semanticExpression & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0,
                                GGS_semanticExpression & _out_1,
                                GGS_semanticExpression & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0,
                                 GGS_semanticExpression & _out_1,
                                 GGS_semanticExpression & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_multiplicationExpressionList _operator_concat (const GGS_multiplicationExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

  protected : void _internalPrependValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_multiplicationExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_divisionExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_divisionExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_divisionExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_divisionExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_divisionExpression * operator () (void) const {
      return (cPtr_divisionExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@divisionExpressionList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_divisionExpressionList : public AC_galgas_list {
  public : typedef cPtr_divisionExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_divisionExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_divisionExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_divisionExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0,
                              GGS_semanticExpression & _out_1,
                              GGS_semanticExpression & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0,
                             GGS_semanticExpression & _out_1,
                             GGS_semanticExpression & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0,
                                GGS_semanticExpression & _out_1,
                                GGS_semanticExpression & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0,
                                 GGS_semanticExpression & _out_1,
                                 GGS_semanticExpression & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_divisionExpressionList _operator_concat (const GGS_divisionExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

  protected : void _internalPrependValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_divisionExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_moduloExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_moduloExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_moduloExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_moduloExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_moduloExpression * operator () (void) const {
      return (cPtr_moduloExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@moduloExpressionList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_moduloExpressionList : public AC_galgas_list {
  public : typedef cPtr_moduloExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_moduloExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_moduloExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_moduloExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0,
                              GGS_semanticExpression & _out_1,
                              GGS_semanticExpression & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0,
                             GGS_semanticExpression & _out_1,
                             GGS_semanticExpression & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0,
                                GGS_semanticExpression & _out_1,
                                GGS_semanticExpression & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0,
                                 GGS_semanticExpression & _out_1,
                                 GGS_semanticExpression & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_moduloExpressionList _operator_concat (const GGS_moduloExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

  protected : void _internalPrependValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_moduloExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_unaryMinusExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_unaryMinusExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_unaryMinusExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_unaryMinusExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_unaryMinusExpression * operator () (void) const {
      return (cPtr_unaryMinusExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     list '@unaryMinusExpressionList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_unaryMinusExpressionList : public AC_galgas_list {
  public : typedef cPtr_unaryMinusExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_unaryMinusExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_unaryMinusExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_unaryMinusExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0,
                              GGS_semanticExpression & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0,
                             GGS_semanticExpression & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0,
                                GGS_semanticExpression & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0,
                                 GGS_semanticExpression & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_unaryMinusExpressionList _operator_concat (const GGS_unaryMinusExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1) ;

  protected : void _internalPrependValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_unaryMinusExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_notExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_notExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_notExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_notExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_notExpression * operator () (void) const {
      return (cPtr_notExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@notExpressionList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_notExpressionList : public AC_galgas_list {
  public : typedef cPtr_notExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_notExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_notExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_notExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0,
                              GGS_semanticExpression & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0,
                             GGS_semanticExpression & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0,
                                GGS_semanticExpression & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0,
                                 GGS_semanticExpression & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_notExpressionList _operator_concat (const GGS_notExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1) ;

  protected : void _internalPrependValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_notExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_negateExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_negateExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_negateExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_negateExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_negateExpression * operator () (void) const {
      return (cPtr_negateExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@negateExpressionList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_negateExpressionList : public AC_galgas_list {
  public : typedef cPtr_negateExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_negateExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_negateExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_negateExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0,
                              GGS_semanticExpression & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0,
                             GGS_semanticExpression & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0,
                                GGS_semanticExpression & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0,
                                 GGS_semanticExpression & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_negateExpressionList _operator_concat (const GGS_negateExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1) ;

  protected : void _internalPrependValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_negateExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_trueExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_trueExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_trueExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_trueExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_trueExpression * operator () (void) const {
      return (cPtr_trueExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@trueExpressionList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_trueExpressionList : public AC_galgas_list {
  public : typedef cPtr_trueExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_trueExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_trueExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_trueExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_trueExpressionList _operator_concat (const GGS_trueExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0) ;

  protected : void _internalPrependValues (const GGS_location & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_trueExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_falseExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_falseExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_falseExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_falseExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_falseExpression * operator () (void) const {
      return (cPtr_falseExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@falseExpressionList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_falseExpressionList : public AC_galgas_list {
  public : typedef cPtr_falseExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_falseExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_falseExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_falseExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_falseExpressionList _operator_concat (const GGS_falseExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0) ;

  protected : void _internalPrependValues (const GGS_location & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_falseExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_varInExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_varInExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_varInExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mVarName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_varInExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_varInExpression * operator () (void) const {
      return (cPtr_varInExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@varInExpressionList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_varInExpressionList : public AC_galgas_list {
  public : typedef cPtr_varInExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_varInExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_varInExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_varInExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_varInExpressionList _operator_concat (const GGS_varInExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_varInExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_selfInExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_selfInExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_selfInExpression constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_selfInExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_selfInExpression * operator () (void) const {
      return (cPtr_selfInExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@selfInExpressionList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_selfInExpressionList : public AC_galgas_list {
  public : typedef cPtr_selfInExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_selfInExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_selfInExpressionList constructor_listWithValue (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_selfInExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation () ;
//--- Handling '.' GALGAS operator
  public : GGS_selfInExpressionList _operator_concat (const GGS_selfInExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues () ;

  protected : void _internalPrependValues () ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_selfInExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_descriptionInExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_descriptionInExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_descriptionInExpression constructor_new (C_Compiler & inLexique,
                                const GGS_semanticExpression & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticExpression  reader_mReceiverExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_descriptionInExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_descriptionInExpression * operator () (void) const {
      return (cPtr_descriptionInExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@descriptionInExpressionList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_descriptionInExpressionList : public AC_galgas_list {
  public : typedef cPtr_descriptionInExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_descriptionInExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_descriptionInExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_semanticExpression & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_descriptionInExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_semanticExpression & _out_0,
                              GGS_location & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_semanticExpression & _out_0,
                             GGS_location & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_semanticExpression & _out_0,
                                GGS_location & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_semanticExpression & _out_0,
                                 GGS_location & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_semanticExpression & argument_0,
                                const GGS_location & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_descriptionInExpressionList _operator_concat (const GGS_descriptionInExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_semanticExpression & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_semanticExpression & argument_0,
                                const GGS_location & argument_1) ;

  protected : void _internalPrependValues (const GGS_semanticExpression & argument_0,
                                const GGS_location & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_descriptionInExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@semanticExpressionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_semanticExpression : public C_GGS_MetamodelEntity {
//--- Attributes
//--- Constructor
  public : cPtr_semanticExpression (LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_semanticExpression * nextObject (void) const {
    return (cPtr_semanticExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_semanticExpression * previousObject (void) const {
    return (cPtr_semanticExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_semanticExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_semanticExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@outExpressionListList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_outExpressionList : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_semanticExpressionList  mExpression ;
  public : GGS_location  mEndOfExpressionLocation ;
//--- Constructor
  public : cPtr_outExpressionList (const GGS_semanticExpressionList & ,
                                const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_outExpressionList * nextObject (void) const {
    return (cPtr_outExpressionList *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_outExpressionList * previousObject (void) const {
    return (cPtr_outExpressionList *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_outExpressionList * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_outExpressionListList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@variableExpressionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_variableExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_lstring  mVariableName ;
//--- Constructor
  public : cPtr_variableExpression (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_variableExpression * nextObject (void) const {
    return (cPtr_variableExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_variableExpression * previousObject (void) const {
    return (cPtr_variableExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_variableExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_variableExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@literalBooleanExpressionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalBooleanExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_bool mValue ;
//--- Constructor
  public : cPtr_literalBooleanExpression (const GGS_bool& 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_literalBooleanExpression * nextObject (void) const {
    return (cPtr_literalBooleanExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_literalBooleanExpression * previousObject (void) const {
    return (cPtr_literalBooleanExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_literalBooleanExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_literalBooleanExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@literalCharExpressionList'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalCharExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_lchar  mValue ;
//--- Constructor
  public : cPtr_literalCharExpression (const GGS_lchar & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_literalCharExpression * nextObject (void) const {
    return (cPtr_literalCharExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_literalCharExpression * previousObject (void) const {
    return (cPtr_literalCharExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_literalCharExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_literalCharExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@literalStringExpressionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalStringExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_stringlist  mStringSequence ;
//--- Constructor
  public : cPtr_literalStringExpression (const GGS_stringlist & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_literalStringExpression * nextObject (void) const {
    return (cPtr_literalStringExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_literalStringExpression * previousObject (void) const {
    return (cPtr_literalStringExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_literalStringExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_literalStringExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@literalDoubleExpressionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalDoubleExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_ldouble  mValue ;
//--- Constructor
  public : cPtr_literalDoubleExpression (const GGS_ldouble & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_literalDoubleExpression * nextObject (void) const {
    return (cPtr_literalDoubleExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_literalDoubleExpression * previousObject (void) const {
    return (cPtr_literalDoubleExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_literalDoubleExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_literalDoubleExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@literalUIntExpressionList'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalUIntExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_luint  mValue ;
//--- Constructor
  public : cPtr_literalUIntExpression (const GGS_luint & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_literalUIntExpression * nextObject (void) const {
    return (cPtr_literalUIntExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_literalUIntExpression * previousObject (void) const {
    return (cPtr_literalUIntExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_literalUIntExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_literalUIntExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@literalUInt64ExpressionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalUInt64Expression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_luint64  mValue ;
//--- Constructor
  public : cPtr_literalUInt64Expression (const GGS_luint64 & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_literalUInt64Expression * nextObject (void) const {
    return (cPtr_literalUInt64Expression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_literalUInt64Expression * previousObject (void) const {
    return (cPtr_literalUInt64Expression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_literalUInt64Expression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_literalUInt64ExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@literalSIntExpressionList'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalSIntExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_lsint  mValue ;
//--- Constructor
  public : cPtr_literalSIntExpression (const GGS_lsint & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_literalSIntExpression * nextObject (void) const {
    return (cPtr_literalSIntExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_literalSIntExpression * previousObject (void) const {
    return (cPtr_literalSIntExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_literalSIntExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_literalSIntExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@literalSInt64ExpressionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalSInt64Expression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_lsint64  mValue ;
//--- Constructor
  public : cPtr_literalSInt64Expression (const GGS_lsint64 & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_literalSInt64Expression * nextObject (void) const {
    return (cPtr_literalSInt64Expression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_literalSInt64Expression * previousObject (void) const {
    return (cPtr_literalSInt64Expression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_literalSInt64Expression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_literalSInt64ExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@hereExpressionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_hereExpression : public cPtr_semanticExpression {
//--- Attributes
//--- Constructor
  public : cPtr_hereExpression (LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_hereExpression * nextObject (void) const {
    return (cPtr_hereExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_hereExpression * previousObject (void) const {
    return (cPtr_hereExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_hereExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_hereExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@constructorExpressionList'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_constructorExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_lstring  mTypeName ;
  public : GGS_lstring  mConstructorName ;
  public : GGS_outExpressionList  mExpressions ;
//--- Constructor
  public : cPtr_constructorExpression (const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_outExpressionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_constructorExpression * nextObject (void) const {
    return (cPtr_constructorExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_constructorExpression * previousObject (void) const {
    return (cPtr_constructorExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_constructorExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_constructorExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@readerCallExpressionList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_readerCallExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_semanticExpression  mReceiver ;
  public : GGS_lstring  mReaderName ;
  public : GGS_outExpressionList  mExpressions ;
//--- Constructor
  public : cPtr_readerCallExpression (const GGS_semanticExpression & ,
                                const GGS_lstring & ,
                                const GGS_outExpressionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_readerCallExpression * nextObject (void) const {
    return (cPtr_readerCallExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_readerCallExpression * previousObject (void) const {
    return (cPtr_readerCallExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_readerCallExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_readerCallExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@optionExpressionList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_optionExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_lstring  mOptionComponentName ;
  public : GGS_lstring  mOptionEntryName ;
//--- Constructor
  public : cPtr_optionExpression (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_optionExpression * nextObject (void) const {
    return (cPtr_optionExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_optionExpression * previousObject (void) const {
    return (cPtr_optionExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_optionExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_optionExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@concatExpressionList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_concatExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Constructor
  public : cPtr_concatExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_concatExpression * nextObject (void) const {
    return (cPtr_concatExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_concatExpression * previousObject (void) const {
    return (cPtr_concatExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_concatExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_concatExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@orExpressionList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_orExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Constructor
  public : cPtr_orExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_orExpression * nextObject (void) const {
    return (cPtr_orExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_orExpression * previousObject (void) const {
    return (cPtr_orExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_orExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_orExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@xorExpressionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_xorExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Constructor
  public : cPtr_xorExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_xorExpression * nextObject (void) const {
    return (cPtr_xorExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_xorExpression * previousObject (void) const {
    return (cPtr_xorExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_xorExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_xorExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@andExpressionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_andExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Constructor
  public : cPtr_andExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_andExpression * nextObject (void) const {
    return (cPtr_andExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_andExpression * previousObject (void) const {
    return (cPtr_andExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_andExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_andExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@equalExpressionList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_equalExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Constructor
  public : cPtr_equalExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_equalExpression * nextObject (void) const {
    return (cPtr_equalExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_equalExpression * previousObject (void) const {
    return (cPtr_equalExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_equalExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_equalExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@notEqualExpressionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_notEqualExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Constructor
  public : cPtr_notEqualExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_notEqualExpression * nextObject (void) const {
    return (cPtr_notEqualExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_notEqualExpression * previousObject (void) const {
    return (cPtr_notEqualExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_notEqualExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_notEqualExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@lowerOrEqualExpressionList'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lowerOrEqualExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Constructor
  public : cPtr_lowerOrEqualExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_lowerOrEqualExpression * nextObject (void) const {
    return (cPtr_lowerOrEqualExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_lowerOrEqualExpression * previousObject (void) const {
    return (cPtr_lowerOrEqualExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_lowerOrEqualExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_lowerOrEqualExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@greaterOrEqualExpressionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_greaterOrEqualExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Constructor
  public : cPtr_greaterOrEqualExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_greaterOrEqualExpression * nextObject (void) const {
    return (cPtr_greaterOrEqualExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_greaterOrEqualExpression * previousObject (void) const {
    return (cPtr_greaterOrEqualExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_greaterOrEqualExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_greaterOrEqualExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@strictGreaterExpressionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_strictGreaterExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Constructor
  public : cPtr_strictGreaterExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_strictGreaterExpression * nextObject (void) const {
    return (cPtr_strictGreaterExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_strictGreaterExpression * previousObject (void) const {
    return (cPtr_strictGreaterExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_strictGreaterExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_strictGreaterExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@strictLowerExpressionList'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_strictLowerExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Constructor
  public : cPtr_strictLowerExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_strictLowerExpression * nextObject (void) const {
    return (cPtr_strictLowerExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_strictLowerExpression * previousObject (void) const {
    return (cPtr_strictLowerExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_strictLowerExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_strictLowerExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@leftShiftExpressionList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_leftShiftExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Constructor
  public : cPtr_leftShiftExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_leftShiftExpression * nextObject (void) const {
    return (cPtr_leftShiftExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_leftShiftExpression * previousObject (void) const {
    return (cPtr_leftShiftExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_leftShiftExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_leftShiftExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@rightShiftExpressionList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_rightShiftExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Constructor
  public : cPtr_rightShiftExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_rightShiftExpression * nextObject (void) const {
    return (cPtr_rightShiftExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_rightShiftExpression * previousObject (void) const {
    return (cPtr_rightShiftExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_rightShiftExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_rightShiftExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@addExpressionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_addExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Constructor
  public : cPtr_addExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_addExpression * nextObject (void) const {
    return (cPtr_addExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_addExpression * previousObject (void) const {
    return (cPtr_addExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_addExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_addExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@subExpressionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_subExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Constructor
  public : cPtr_subExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_subExpression * nextObject (void) const {
    return (cPtr_subExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_subExpression * previousObject (void) const {
    return (cPtr_subExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_subExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_subExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@multiplicationExpressionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_multiplicationExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Constructor
  public : cPtr_multiplicationExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_multiplicationExpression * nextObject (void) const {
    return (cPtr_multiplicationExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_multiplicationExpression * previousObject (void) const {
    return (cPtr_multiplicationExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_multiplicationExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_multiplicationExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@divisionExpressionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_divisionExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Constructor
  public : cPtr_divisionExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_divisionExpression * nextObject (void) const {
    return (cPtr_divisionExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_divisionExpression * previousObject (void) const {
    return (cPtr_divisionExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_divisionExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_divisionExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@moduloExpressionList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_moduloExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Constructor
  public : cPtr_moduloExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_moduloExpression * nextObject (void) const {
    return (cPtr_moduloExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_moduloExpression * previousObject (void) const {
    return (cPtr_moduloExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_moduloExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_moduloExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@unaryMinusExpressionList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_unaryMinusExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mExpression ;
//--- Constructor
  public : cPtr_unaryMinusExpression (const GGS_location & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_unaryMinusExpression * nextObject (void) const {
    return (cPtr_unaryMinusExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_unaryMinusExpression * previousObject (void) const {
    return (cPtr_unaryMinusExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_unaryMinusExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_unaryMinusExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@notExpressionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_notExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mExpression ;
//--- Constructor
  public : cPtr_notExpression (const GGS_location & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_notExpression * nextObject (void) const {
    return (cPtr_notExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_notExpression * previousObject (void) const {
    return (cPtr_notExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_notExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_notExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@negateExpressionList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_negateExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mExpression ;
//--- Constructor
  public : cPtr_negateExpression (const GGS_location & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_negateExpression * nextObject (void) const {
    return (cPtr_negateExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_negateExpression * previousObject (void) const {
    return (cPtr_negateExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_negateExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_negateExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@trueExpressionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_trueExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
//--- Constructor
  public : cPtr_trueExpression (const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_trueExpression * nextObject (void) const {
    return (cPtr_trueExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_trueExpression * previousObject (void) const {
    return (cPtr_trueExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_trueExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_trueExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@falseExpressionList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_falseExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
//--- Constructor
  public : cPtr_falseExpression (const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_falseExpression * nextObject (void) const {
    return (cPtr_falseExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_falseExpression * previousObject (void) const {
    return (cPtr_falseExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_falseExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_falseExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@varInExpressionList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_varInExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_lstring  mVarName ;
//--- Constructor
  public : cPtr_varInExpression (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_varInExpression * nextObject (void) const {
    return (cPtr_varInExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_varInExpression * previousObject (void) const {
    return (cPtr_varInExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_varInExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_varInExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@selfInExpressionList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_selfInExpression : public cPtr_semanticExpression {
//--- Attributes
//--- Constructor
  public : cPtr_selfInExpression (LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_selfInExpression * nextObject (void) const {
    return (cPtr_selfInExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_selfInExpression * previousObject (void) const {
    return (cPtr_selfInExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_selfInExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_selfInExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@descriptionInExpressionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_descriptionInExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_semanticExpression  mReceiverExpression ;
  public : GGS_location  mLocation ;
//--- Constructor
  public : cPtr_descriptionInExpression (const GGS_semanticExpression & ,
                                const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_descriptionInExpression * nextObject (void) const {
    return (cPtr_descriptionInExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_descriptionInExpression * previousObject (void) const {
    return (cPtr_descriptionInExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_descriptionInExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_descriptionInExpressionList ;
} ;

//---------------------------------------------------------------------------*

#endif
