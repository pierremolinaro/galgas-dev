//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'expressionMetamodel.h'                        *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                       may 16th, 2007, at 11h43'57"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef expressionMetamodel_METAMODEL_DEFINED
#define expressionMetamodel_METAMODEL_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/predefined_types.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*

uint32 _metamodel_index_for_expressionMetamodel (void) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_semanticExpressionList ;
class GGS_semanticExpression ;
class cPtr_semanticExpression ;
class GGS_outExpressionsList ;
class GGS_outExpressions ;
class cPtr_outExpressions ;
class GGS_variableExpressionList ;
class GGS_variableExpression ;
class cPtr_variableExpression ;
class GGS_literalBooleanExpressionList ;
class GGS_literalBooleanExpression ;
class cPtr_literalBooleanExpression ;
class GGS_literalCharExpressionList ;
class GGS_literalCharExpression ;
class cPtr_literalCharExpression ;
class GGS_literalStringExpressionList ;
class GGS_literalStringExpression ;
class cPtr_literalStringExpression ;
class GGS_literalDoubleExpressionList ;
class GGS_literalDoubleExpression ;
class cPtr_literalDoubleExpression ;
class GGS_literalUIntExpressionList ;
class GGS_literalUIntExpression ;
class cPtr_literalUIntExpression ;
class GGS_literalUInt64ExpressionList ;
class GGS_literalUInt64Expression ;
class cPtr_literalUInt64Expression ;
class GGS_literalSIntExpressionList ;
class GGS_literalSIntExpression ;
class cPtr_literalSIntExpression ;
class GGS_literalSInt64ExpressionList ;
class GGS_literalSInt64Expression ;
class cPtr_literalSInt64Expression ;
class GGS_hereExpressionList ;
class GGS_hereExpression ;
class cPtr_hereExpression ;
class GGS_constructorCallExpressionList ;
class GGS_constructorCallExpression ;
class cPtr_constructorCallExpression ;
class GGS_readerCallExpressionList ;
class GGS_readerCallExpression ;
class cPtr_readerCallExpression ;
class GGS_optionExpressionList ;
class GGS_optionExpression ;
class cPtr_optionExpression ;
class GGS_concatExpressionList ;
class GGS_concatExpression ;
class cPtr_concatExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_semanticExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_semanticExpression : public AC_galgas_entity {
//--- getPtr
  public : inline cPtr_semanticExpression * getPtr (void) const {
    return (cPtr_semanticExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_semanticExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_semanticExpression * operator () (void) const {
      return (cPtr_semanticExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@semanticExpressionList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_semanticExpressionList : public AC_galgas_list {
  public : typedef cPtr_semanticExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_semanticExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_semanticExpressionList constructor_listWithValue (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_semanticExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation () ;
//--- Handling '.' GALGAS operator
  public : GGS_semanticExpressionList _operator_concat (const GGS_semanticExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues () ;

  protected : void _internalPrependValues () ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_semanticExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_outExpressions'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_outExpressions : public AC_galgas_entity {
//--- 'new' constructor
  public : static GGS_outExpressions constructor_new (C_Compiler & inLexique,
                                const GGS_semanticExpressionList & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- getPtr
  public : inline cPtr_outExpressions * getPtr (void) const {
    return (cPtr_outExpressions *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticExpressionList  reader_mExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_outExpressions * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_outExpressions * operator () (void) const {
      return (cPtr_outExpressions *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@outExpressionsList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_outExpressionsList : public AC_galgas_list {
  public : typedef cPtr_outExpressions element_type ;
//--- Constructor 'emptyList'
  public : static GGS_outExpressionsList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_outExpressionsList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_semanticExpressionList & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_outExpressionsList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_semanticExpressionList & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_semanticExpressionList & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_semanticExpressionList & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_semanticExpressionList & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_semanticExpressionList & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_outExpressionsList _operator_concat (const GGS_outExpressionsList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_semanticExpressionList & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_semanticExpressionList & argument_0) ;

  protected : void _internalPrependValues (const GGS_semanticExpressionList & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_outExpressions & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_variableExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_variableExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_variableExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mVariableName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_variableExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_variableExpression * operator () (void) const {
      return (cPtr_variableExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@variableExpressionList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_variableExpressionList : public AC_galgas_list {
  public : typedef cPtr_variableExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_variableExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_variableExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_variableExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_variableExpressionList _operator_concat (const GGS_variableExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_variableExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_literalBooleanExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalBooleanExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_literalBooleanExpression constructor_new (C_Compiler & inLexique,
                                const GGS_bool& argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_bool reader_mValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalBooleanExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalBooleanExpression * operator () (void) const {
      return (cPtr_literalBooleanExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@literalBooleanExpressionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalBooleanExpressionList : public AC_galgas_list {
  public : typedef cPtr_literalBooleanExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_literalBooleanExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_literalBooleanExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_bool& argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_literalBooleanExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_bool& _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_bool& _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_bool& _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_bool& _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_bool& argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_literalBooleanExpressionList _operator_concat (const GGS_literalBooleanExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_bool& argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_bool& argument_0) ;

  protected : void _internalPrependValues (const GGS_bool& argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_literalBooleanExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_literalCharExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalCharExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_literalCharExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lchar & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lchar  reader_mValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalCharExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalCharExpression * operator () (void) const {
      return (cPtr_literalCharExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@literalCharExpressionList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalCharExpressionList : public AC_galgas_list {
  public : typedef cPtr_literalCharExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_literalCharExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_literalCharExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lchar & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_literalCharExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lchar & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lchar & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lchar & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lchar & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lchar & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_literalCharExpressionList _operator_concat (const GGS_literalCharExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lchar & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lchar & argument_0) ;

  protected : void _internalPrependValues (const GGS_lchar & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_literalCharExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_literalStringExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalStringExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_literalStringExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalStringExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalStringExpression * operator () (void) const {
      return (cPtr_literalStringExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@literalStringExpressionList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalStringExpressionList : public AC_galgas_list {
  public : typedef cPtr_literalStringExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_literalStringExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_literalStringExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_literalStringExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_literalStringExpressionList _operator_concat (const GGS_literalStringExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_literalStringExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_literalDoubleExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalDoubleExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_literalDoubleExpression constructor_new (C_Compiler & inLexique,
                                const GGS_ldouble & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_ldouble  reader_mValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalDoubleExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalDoubleExpression * operator () (void) const {
      return (cPtr_literalDoubleExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@literalDoubleExpressionList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalDoubleExpressionList : public AC_galgas_list {
  public : typedef cPtr_literalDoubleExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_literalDoubleExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_literalDoubleExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_ldouble & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_literalDoubleExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_ldouble & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_ldouble & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_ldouble & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_ldouble & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_ldouble & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_literalDoubleExpressionList _operator_concat (const GGS_literalDoubleExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_ldouble & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_ldouble & argument_0) ;

  protected : void _internalPrependValues (const GGS_ldouble & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_literalDoubleExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_literalUIntExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalUIntExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_literalUIntExpression constructor_new (C_Compiler & inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint  reader_mValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalUIntExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalUIntExpression * operator () (void) const {
      return (cPtr_literalUIntExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@literalUIntExpressionList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalUIntExpressionList : public AC_galgas_list {
  public : typedef cPtr_literalUIntExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_literalUIntExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_literalUIntExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_literalUIntExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_luint & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_luint & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_luint & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_luint & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_luint & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_literalUIntExpressionList _operator_concat (const GGS_literalUIntExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_luint & argument_0) ;

  protected : void _internalPrependValues (const GGS_luint & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_literalUIntExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_literalUInt64Expression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalUInt64Expression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_literalUInt64Expression constructor_new (C_Compiler & inLexique,
                                const GGS_luint64 & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint64  reader_mValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalUInt64Expression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalUInt64Expression * operator () (void) const {
      return (cPtr_literalUInt64Expression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@literalUInt64ExpressionList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalUInt64ExpressionList : public AC_galgas_list {
  public : typedef cPtr_literalUInt64Expression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_literalUInt64ExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_literalUInt64ExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_luint64 & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_literalUInt64ExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_luint64 & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_luint64 & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_luint64 & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_luint64 & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_luint64 & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_literalUInt64ExpressionList _operator_concat (const GGS_literalUInt64ExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_luint64 & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_luint64 & argument_0) ;

  protected : void _internalPrependValues (const GGS_luint64 & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_literalUInt64Expression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_literalSIntExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalSIntExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_literalSIntExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lsint & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lsint  reader_mValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalSIntExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalSIntExpression * operator () (void) const {
      return (cPtr_literalSIntExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@literalSIntExpressionList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalSIntExpressionList : public AC_galgas_list {
  public : typedef cPtr_literalSIntExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_literalSIntExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_literalSIntExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lsint & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_literalSIntExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lsint & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lsint & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lsint & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lsint & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lsint & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_literalSIntExpressionList _operator_concat (const GGS_literalSIntExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lsint & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lsint & argument_0) ;

  protected : void _internalPrependValues (const GGS_lsint & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_literalSIntExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_literalSInt64Expression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalSInt64Expression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_literalSInt64Expression constructor_new (C_Compiler & inLexique,
                                const GGS_lsint64 & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lsint64  reader_mValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalSInt64Expression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalSInt64Expression * operator () (void) const {
      return (cPtr_literalSInt64Expression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@literalSInt64ExpressionList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalSInt64ExpressionList : public AC_galgas_list {
  public : typedef cPtr_literalSInt64Expression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_literalSInt64ExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_literalSInt64ExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lsint64 & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_literalSInt64ExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lsint64 & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lsint64 & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lsint64 & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lsint64 & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lsint64 & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_literalSInt64ExpressionList _operator_concat (const GGS_literalSInt64ExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lsint64 & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lsint64 & argument_0) ;

  protected : void _internalPrependValues (const GGS_lsint64 & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_literalSInt64Expression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_hereExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_hereExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_hereExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_hereExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_hereExpression * operator () (void) const {
      return (cPtr_hereExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@hereExpressionList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_hereExpressionList : public AC_galgas_list {
  public : typedef cPtr_hereExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_hereExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_hereExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_hereExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_hereExpressionList _operator_concat (const GGS_hereExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0) ;

  protected : void _internalPrependValues (const GGS_location & argument_0) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_hereExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_constructorCallExpression'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_constructorCallExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_constructorCallExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressions & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mConstructorName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_outExpressions  reader_mExpressions (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_constructorCallExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_constructorCallExpression * operator () (void) const {
      return (cPtr_constructorCallExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  list '@constructorCallExpressionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_constructorCallExpressionList : public AC_galgas_list {
  public : typedef cPtr_constructorCallExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_constructorCallExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_constructorCallExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressions & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_constructorCallExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_lstring & _out_1,
                              GGS_outExpressions & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_lstring & _out_1,
                             GGS_outExpressions & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_lstring & _out_1,
                                GGS_outExpressions & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lstring & _out_1,
                                 GGS_outExpressions & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressions & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_constructorCallExpressionList _operator_concat (const GGS_constructorCallExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressions & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressions & argument_2) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressions & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_constructorCallExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_readerCallExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_readerCallExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_readerCallExpression constructor_new (C_Compiler & inLexique,
                                const GGS_semanticExpression & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressions & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticExpression  reader_mReceiver (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mReaderName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_outExpressions  reader_mExpressions (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_readerCallExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_readerCallExpression * operator () (void) const {
      return (cPtr_readerCallExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     list '@readerCallExpressionList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_readerCallExpressionList : public AC_galgas_list {
  public : typedef cPtr_readerCallExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_readerCallExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_readerCallExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_semanticExpression & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressions & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_readerCallExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_semanticExpression & _out_0,
                              GGS_lstring & _out_1,
                              GGS_outExpressions & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_semanticExpression & _out_0,
                             GGS_lstring & _out_1,
                             GGS_outExpressions & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_semanticExpression & _out_0,
                                GGS_lstring & _out_1,
                                GGS_outExpressions & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_semanticExpression & _out_0,
                                 GGS_lstring & _out_1,
                                 GGS_outExpressions & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_semanticExpression & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressions & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_readerCallExpressionList _operator_concat (const GGS_readerCallExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_semanticExpression & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressions & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_semanticExpression & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressions & argument_2) ;

  protected : void _internalPrependValues (const GGS_semanticExpression & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressions & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_readerCallExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_optionExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_optionExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_optionExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mOptionComponentName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mOptionEntryName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_optionExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_optionExpression * operator () (void) const {
      return (cPtr_optionExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@optionExpressionList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_optionExpressionList : public AC_galgas_list {
  public : typedef cPtr_optionExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_optionExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_optionExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_optionExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_lstring & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_lstring & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_lstring & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lstring & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_optionExpressionList _operator_concat (const GGS_optionExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_optionExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_concatExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_concatExpression : public GGS_semanticExpression {
//--- 'new' constructor
  public : static GGS_concatExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_concatExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_concatExpression * operator () (void) const {
      return (cPtr_concatExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@concatExpressionList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_concatExpressionList : public AC_galgas_list {
  public : typedef cPtr_concatExpression element_type ;
//--- Constructor 'emptyList'
  public : static GGS_concatExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_concatExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_concatExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_location & _out_0,
                              GGS_semanticExpression & _out_1,
                              GGS_semanticExpression & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_location & _out_0,
                             GGS_semanticExpression & _out_1,
                             GGS_semanticExpression & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_location & _out_0,
                                GGS_semanticExpression & _out_1,
                                GGS_semanticExpression & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_location & _out_0,
                                 GGS_semanticExpression & _out_1,
                                 GGS_semanticExpression & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_concatExpressionList _operator_concat (const GGS_concatExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

  protected : void _internalPrependValues (const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_concatExpression & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@semanticExpressionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_semanticExpression : public C_GGS_MetamodelEntity {
//--- Attributes
//--- Constructor
  public : cPtr_semanticExpression (LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_semanticExpression * nextObject (void) const {
    return (cPtr_semanticExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_semanticExpression * previousObject (void) const {
    return (cPtr_semanticExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_semanticExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_semanticExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@outExpressionsList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_outExpressions : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_semanticExpressionList  mExpression ;
//--- Constructor
  public : cPtr_outExpressions (const GGS_semanticExpressionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_outExpressions * nextObject (void) const {
    return (cPtr_outExpressions *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_outExpressions * previousObject (void) const {
    return (cPtr_outExpressions *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_outExpressions * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_outExpressionsList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@variableExpressionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_variableExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_lstring  mVariableName ;
//--- Constructor
  public : cPtr_variableExpression (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_variableExpression * nextObject (void) const {
    return (cPtr_variableExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_variableExpression * previousObject (void) const {
    return (cPtr_variableExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_variableExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_variableExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@literalBooleanExpressionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalBooleanExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_bool mValue ;
//--- Constructor
  public : cPtr_literalBooleanExpression (const GGS_bool& 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_literalBooleanExpression * nextObject (void) const {
    return (cPtr_literalBooleanExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_literalBooleanExpression * previousObject (void) const {
    return (cPtr_literalBooleanExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_literalBooleanExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_literalBooleanExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@literalCharExpressionList'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalCharExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_lchar  mValue ;
//--- Constructor
  public : cPtr_literalCharExpression (const GGS_lchar & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_literalCharExpression * nextObject (void) const {
    return (cPtr_literalCharExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_literalCharExpression * previousObject (void) const {
    return (cPtr_literalCharExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_literalCharExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_literalCharExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@literalStringExpressionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalStringExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_lstring  mValue ;
//--- Constructor
  public : cPtr_literalStringExpression (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_literalStringExpression * nextObject (void) const {
    return (cPtr_literalStringExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_literalStringExpression * previousObject (void) const {
    return (cPtr_literalStringExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_literalStringExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_literalStringExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@literalDoubleExpressionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalDoubleExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_ldouble  mValue ;
//--- Constructor
  public : cPtr_literalDoubleExpression (const GGS_ldouble & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_literalDoubleExpression * nextObject (void) const {
    return (cPtr_literalDoubleExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_literalDoubleExpression * previousObject (void) const {
    return (cPtr_literalDoubleExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_literalDoubleExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_literalDoubleExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@literalUIntExpressionList'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalUIntExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_luint  mValue ;
//--- Constructor
  public : cPtr_literalUIntExpression (const GGS_luint & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_literalUIntExpression * nextObject (void) const {
    return (cPtr_literalUIntExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_literalUIntExpression * previousObject (void) const {
    return (cPtr_literalUIntExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_literalUIntExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_literalUIntExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@literalUInt64ExpressionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalUInt64Expression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_luint64  mValue ;
//--- Constructor
  public : cPtr_literalUInt64Expression (const GGS_luint64 & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_literalUInt64Expression * nextObject (void) const {
    return (cPtr_literalUInt64Expression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_literalUInt64Expression * previousObject (void) const {
    return (cPtr_literalUInt64Expression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_literalUInt64Expression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_literalUInt64ExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@literalSIntExpressionList'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalSIntExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_lsint  mValue ;
//--- Constructor
  public : cPtr_literalSIntExpression (const GGS_lsint & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_literalSIntExpression * nextObject (void) const {
    return (cPtr_literalSIntExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_literalSIntExpression * previousObject (void) const {
    return (cPtr_literalSIntExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_literalSIntExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_literalSIntExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@literalSInt64ExpressionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalSInt64Expression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_lsint64  mValue ;
//--- Constructor
  public : cPtr_literalSInt64Expression (const GGS_lsint64 & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_literalSInt64Expression * nextObject (void) const {
    return (cPtr_literalSInt64Expression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_literalSInt64Expression * previousObject (void) const {
    return (cPtr_literalSInt64Expression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_literalSInt64Expression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_literalSInt64ExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@hereExpressionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_hereExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mValue ;
//--- Constructor
  public : cPtr_hereExpression (const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_hereExpression * nextObject (void) const {
    return (cPtr_hereExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_hereExpression * previousObject (void) const {
    return (cPtr_hereExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_hereExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_hereExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@constructorCallExpressionList'              *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_constructorCallExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_lstring  mTypeName ;
  public : GGS_lstring  mConstructorName ;
  public : GGS_outExpressions  mExpressions ;
//--- Constructor
  public : cPtr_constructorCallExpression (const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_outExpressions & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_constructorCallExpression * nextObject (void) const {
    return (cPtr_constructorCallExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_constructorCallExpression * previousObject (void) const {
    return (cPtr_constructorCallExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_constructorCallExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_constructorCallExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@readerCallExpressionList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_readerCallExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_semanticExpression  mReceiver ;
  public : GGS_lstring  mReaderName ;
  public : GGS_outExpressions  mExpressions ;
//--- Constructor
  public : cPtr_readerCallExpression (const GGS_semanticExpression & ,
                                const GGS_lstring & ,
                                const GGS_outExpressions & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_readerCallExpression * nextObject (void) const {
    return (cPtr_readerCallExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_readerCallExpression * previousObject (void) const {
    return (cPtr_readerCallExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_readerCallExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_readerCallExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@optionExpressionList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_optionExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_lstring  mOptionComponentName ;
  public : GGS_lstring  mOptionEntryName ;
//--- Constructor
  public : cPtr_optionExpression (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_optionExpression * nextObject (void) const {
    return (cPtr_optionExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_optionExpression * previousObject (void) const {
    return (cPtr_optionExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_optionExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_optionExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@concatExpressionList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_concatExpression : public cPtr_semanticExpression {
//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Constructor
  public : cPtr_concatExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_concatExpression * nextObject (void) const {
    return (cPtr_concatExpression *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_concatExpression * previousObject (void) const {
    return (cPtr_concatExpression *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_concatExpression * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_concatExpressionList ;
} ;

//---------------------------------------------------------------------------*

#endif
