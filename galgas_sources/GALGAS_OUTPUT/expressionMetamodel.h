//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'expressionMetamodel.h'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 9th, 2009, at 19h48'16"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef expressionMetamodel_DEFINED
#define expressionMetamodel_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_listmap.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_semanticExpression ;
class cPtr_semanticExpression ;
class GGS_semanticExpressionList ;
class GGS_outExpressionList ;
class cPtr_outExpressionList ;
class GGS_variableExpression ;
class cPtr_variableExpression ;
class GGS_selfInExpression ;
class cPtr_selfInExpression ;
class GGS_hereExpression ;
class cPtr_hereExpression ;
class GGS_trueExpression ;
class cPtr_trueExpression ;
class GGS_falseExpression ;
class cPtr_falseExpression ;
class GGS_literalCharExpression ;
class cPtr_literalCharExpression ;
class GGS_literalStringExpression ;
class cPtr_literalStringExpression ;
class GGS_literalDoubleExpression ;
class cPtr_literalDoubleExpression ;
class GGS_literalUIntExpression ;
class cPtr_literalUIntExpression ;
class GGS_literalUInt64Expression ;
class cPtr_literalUInt64Expression ;
class GGS_literalSIntExpression ;
class cPtr_literalSIntExpression ;
class GGS_literalSInt64Expression ;
class cPtr_literalSInt64Expression ;
class GGS_constructorExpression ;
class cPtr_constructorExpression ;
class GGS_readerCallExpression ;
class cPtr_readerCallExpression ;
class GGS_optionExpression ;
class cPtr_optionExpression ;
class GGS_concatExpression ;
class cPtr_concatExpression ;
class GGS_orExpression ;
class cPtr_orExpression ;
class GGS_xorExpression ;
class cPtr_xorExpression ;
class GGS_andExpression ;
class cPtr_andExpression ;
class GGS_equalExpression ;
class cPtr_equalExpression ;
class GGS_notEqualExpression ;
class cPtr_notEqualExpression ;
class GGS_lowerOrEqualExpression ;
class cPtr_lowerOrEqualExpression ;
class GGS_greaterOrEqualExpression ;
class cPtr_greaterOrEqualExpression ;
class GGS_strictGreaterExpression ;
class cPtr_strictGreaterExpression ;
class GGS_strictLowerExpression ;
class cPtr_strictLowerExpression ;
class GGS_rightShiftExpression ;
class cPtr_rightShiftExpression ;
class GGS_leftShiftExpression ;
class cPtr_leftShiftExpression ;
class GGS_addExpression ;
class cPtr_addExpression ;
class GGS_subExpression ;
class cPtr_subExpression ;
class GGS_multiplicationExpression ;
class cPtr_multiplicationExpression ;
class GGS_divisionExpression ;
class cPtr_divisionExpression ;
class GGS_moduloExpression ;
class cPtr_moduloExpression ;
class GGS_unaryMinusExpression ;
class cPtr_unaryMinusExpression ;
class GGS_notExpression ;
class cPtr_notExpression ;
class GGS_negateExpression ;
class cPtr_negateExpression ;
class GGS_varInExpression ;
class cPtr_varInExpression ;
class GGS_descriptionInExpression ;
class cPtr_descriptionInExpression ;
class GGS_castInExpression ;
class cPtr_castInExpression ;
class GGS_filewrapperObjectInstanciationInExpression ;
class cPtr_filewrapperObjectInstanciationInExpression ;
class GGS_filewrapperInExpression ;
class cPtr_filewrapperInExpression ;
class GGS_filewrapperTemplateInExpression ;
class cPtr_filewrapperTemplateInExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_semanticExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_semanticExpression : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_semanticExpression (void) :
  AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_semanticExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_semanticExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_semanticExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_semanticExpression * getPtr (void) const {
    return (cPtr_semanticExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_semanticExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_semanticExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_semanticExpression *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * _galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__semanticExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@semanticExpressionList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_semanticExpressionList ;

class GGS_semanticExpressionList : public AC_galgas_list {
  public : typedef elementOf_GGS_semanticExpressionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_semanticExpressionList constructor_emptyList (void) ;
  public : static GGS_semanticExpressionList constructor_listWithValue (const GGS_semanticExpression & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_semanticExpressionList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_semanticExpressionList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_semanticExpressionList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_semanticExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_semanticExpression & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_semanticExpression & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_semanticExpression & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_semanticExpression & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_semanticExpressionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_semanticExpression & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_semanticExpressionList operator_concat (const GGS_semanticExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_semanticExpression & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_semanticExpression & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_semanticExpression & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_semanticExpression 
  reader_mExpressionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMExpressionAtIndex (C_Compiler & inLexique,
                              const GGS_semanticExpression  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_semanticExpressionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_semanticExpression   & _mExpression (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_outExpressionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_outExpressionList : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_outExpressionList (void) :
  AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_outExpressionList (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_outExpressionList (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_outExpressionList
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_outExpressionList constructor_new (C_Compiler & inLexique,
                                const GGS_semanticExpressionList & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_outExpressionList * getPtr (void) const {
    return (cPtr_outExpressionList *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticExpressionList  reader_mExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mEndOfExpressionLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_outExpressionList * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_outExpressionList * operator () (LOCATION_ARGS) const {
      return (cPtr_outExpressionList *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * _galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__outExpressionList ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_variableExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_variableExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_variableExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_variableExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_variableExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_variableExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_variableExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_variableExpression * getPtr (void) const {
    return (cPtr_variableExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mVariableName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_variableExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_variableExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_variableExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__variableExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_selfInExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_selfInExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_selfInExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_selfInExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_selfInExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_selfInExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_selfInExpression constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_selfInExpression * getPtr (void) const {
    return (cPtr_selfInExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_selfInExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_selfInExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_selfInExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__selfInExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_hereExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_hereExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_hereExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_hereExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_hereExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_hereExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_hereExpression constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_hereExpression * getPtr (void) const {
    return (cPtr_hereExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_hereExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_hereExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_hereExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__hereExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_trueExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_trueExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_trueExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_trueExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_trueExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_trueExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_trueExpression constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_trueExpression * getPtr (void) const {
    return (cPtr_trueExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_trueExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_trueExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_trueExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__trueExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_falseExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_falseExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_falseExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_falseExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_falseExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_falseExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_falseExpression constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_falseExpression * getPtr (void) const {
    return (cPtr_falseExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_falseExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_falseExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_falseExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__falseExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_literalCharExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalCharExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_literalCharExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_literalCharExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_literalCharExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_literalCharExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_literalCharExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lchar & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_literalCharExpression * getPtr (void) const {
    return (cPtr_literalCharExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lchar  reader_mCharacter (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalCharExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalCharExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_literalCharExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__literalCharExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_literalStringExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalStringExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_literalStringExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_literalStringExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_literalStringExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_literalStringExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_literalStringExpression constructor_new (C_Compiler & inLexique,
                                const GGS_stringlist & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_literalStringExpression * getPtr (void) const {
    return (cPtr_literalStringExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_stringlist  reader_mStringSequence (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalStringExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalStringExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_literalStringExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__literalStringExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_literalDoubleExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalDoubleExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_literalDoubleExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_literalDoubleExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_literalDoubleExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_literalDoubleExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_literalDoubleExpression constructor_new (C_Compiler & inLexique,
                                const GGS_ldouble & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_literalDoubleExpression * getPtr (void) const {
    return (cPtr_literalDoubleExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_ldouble  reader_mValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalDoubleExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalDoubleExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_literalDoubleExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__literalDoubleExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_literalUIntExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalUIntExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_literalUIntExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_literalUIntExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_literalUIntExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_literalUIntExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_literalUIntExpression constructor_new (C_Compiler & inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_literalUIntExpression * getPtr (void) const {
    return (cPtr_literalUIntExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint  reader_mValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalUIntExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalUIntExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_literalUIntExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__literalUIntExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_literalUInt64Expression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalUInt64Expression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_literalUInt64Expression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_literalUInt64Expression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_literalUInt64Expression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_literalUInt64Expression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_literalUInt64Expression constructor_new (C_Compiler & inLexique,
                                const GGS_luint64 & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_literalUInt64Expression * getPtr (void) const {
    return (cPtr_literalUInt64Expression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint64  reader_mValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalUInt64Expression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalUInt64Expression * operator () (LOCATION_ARGS) const {
      return (cPtr_literalUInt64Expression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__literalUInt64Expression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_literalSIntExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalSIntExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_literalSIntExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_literalSIntExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_literalSIntExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_literalSIntExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_literalSIntExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lsint & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_literalSIntExpression * getPtr (void) const {
    return (cPtr_literalSIntExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lsint  reader_mValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalSIntExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalSIntExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_literalSIntExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__literalSIntExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_literalSInt64Expression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_literalSInt64Expression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_literalSInt64Expression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_literalSInt64Expression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_literalSInt64Expression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_literalSInt64Expression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_literalSInt64Expression constructor_new (C_Compiler & inLexique,
                                const GGS_lsint64 & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_literalSInt64Expression * getPtr (void) const {
    return (cPtr_literalSInt64Expression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lsint64  reader_mValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_literalSInt64Expression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_literalSInt64Expression * operator () (LOCATION_ARGS) const {
      return (cPtr_literalSInt64Expression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__literalSInt64Expression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_constructorExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_constructorExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_constructorExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_constructorExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_constructorExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_constructorExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_constructorExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_constructorExpression * getPtr (void) const {
    return (cPtr_constructorExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mConstructorName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_outExpressionList  reader_mExpressions (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_constructorExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_constructorExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_constructorExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__constructorExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_readerCallExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_readerCallExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_readerCallExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_readerCallExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_readerCallExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_readerCallExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_readerCallExpression constructor_new (C_Compiler & inLexique,
                                const GGS_semanticExpression & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_readerCallExpression * getPtr (void) const {
    return (cPtr_readerCallExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticExpression  reader_mReceiver (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mReaderName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_outExpressionList  reader_mExpressions (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_readerCallExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_readerCallExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_readerCallExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__readerCallExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_optionExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_optionExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_optionExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_optionExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_optionExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_optionExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_optionExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_optionExpression * getPtr (void) const {
    return (cPtr_optionExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mOptionComponentName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mOptionEntryName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_optionExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_optionExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_optionExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__optionExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_concatExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_concatExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_concatExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_concatExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_concatExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_concatExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_concatExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_concatExpression * getPtr (void) const {
    return (cPtr_concatExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_concatExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_concatExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_concatExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__concatExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_orExpression'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_orExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_orExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_orExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_orExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_orExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_orExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_orExpression * getPtr (void) const {
    return (cPtr_orExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_orExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_orExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_orExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__orExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_xorExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_xorExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_xorExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_xorExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_xorExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_xorExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_xorExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_xorExpression * getPtr (void) const {
    return (cPtr_xorExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_xorExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_xorExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_xorExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__xorExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_andExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_andExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_andExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_andExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_andExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_andExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_andExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_andExpression * getPtr (void) const {
    return (cPtr_andExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_andExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_andExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_andExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__andExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_equalExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_equalExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_equalExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_equalExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_equalExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_equalExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_equalExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_equalExpression * getPtr (void) const {
    return (cPtr_equalExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_equalExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_equalExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_equalExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__equalExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_notEqualExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_notEqualExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_notEqualExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_notEqualExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_notEqualExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_notEqualExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_notEqualExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_notEqualExpression * getPtr (void) const {
    return (cPtr_notEqualExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_notEqualExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_notEqualExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_notEqualExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__notEqualExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_lowerOrEqualExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lowerOrEqualExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_lowerOrEqualExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_lowerOrEqualExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lowerOrEqualExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_lowerOrEqualExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lowerOrEqualExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lowerOrEqualExpression * getPtr (void) const {
    return (cPtr_lowerOrEqualExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lowerOrEqualExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lowerOrEqualExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_lowerOrEqualExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__lowerOrEqualExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_greaterOrEqualExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_greaterOrEqualExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_greaterOrEqualExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_greaterOrEqualExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_greaterOrEqualExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_greaterOrEqualExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_greaterOrEqualExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_greaterOrEqualExpression * getPtr (void) const {
    return (cPtr_greaterOrEqualExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_greaterOrEqualExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_greaterOrEqualExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_greaterOrEqualExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__greaterOrEqualExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_strictGreaterExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_strictGreaterExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_strictGreaterExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_strictGreaterExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_strictGreaterExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_strictGreaterExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_strictGreaterExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_strictGreaterExpression * getPtr (void) const {
    return (cPtr_strictGreaterExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_strictGreaterExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_strictGreaterExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_strictGreaterExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__strictGreaterExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_strictLowerExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_strictLowerExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_strictLowerExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_strictLowerExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_strictLowerExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_strictLowerExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_strictLowerExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_strictLowerExpression * getPtr (void) const {
    return (cPtr_strictLowerExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_strictLowerExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_strictLowerExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_strictLowerExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__strictLowerExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_rightShiftExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_rightShiftExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_rightShiftExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_rightShiftExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_rightShiftExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_rightShiftExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_rightShiftExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_rightShiftExpression * getPtr (void) const {
    return (cPtr_rightShiftExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_rightShiftExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_rightShiftExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_rightShiftExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__rightShiftExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_leftShiftExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_leftShiftExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_leftShiftExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_leftShiftExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_leftShiftExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_leftShiftExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_leftShiftExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_leftShiftExpression * getPtr (void) const {
    return (cPtr_leftShiftExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_leftShiftExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_leftShiftExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_leftShiftExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__leftShiftExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_addExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_addExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_addExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_addExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_addExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_addExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_addExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_addExpression * getPtr (void) const {
    return (cPtr_addExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_addExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_addExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_addExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__addExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_subExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_subExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_subExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_subExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_subExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_subExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_subExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_subExpression * getPtr (void) const {
    return (cPtr_subExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_subExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_subExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_subExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__subExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_multiplicationExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_multiplicationExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_multiplicationExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_multiplicationExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_multiplicationExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_multiplicationExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_multiplicationExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_multiplicationExpression * getPtr (void) const {
    return (cPtr_multiplicationExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_multiplicationExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_multiplicationExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_multiplicationExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__multiplicationExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_divisionExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_divisionExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_divisionExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_divisionExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_divisionExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_divisionExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_divisionExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_divisionExpression * getPtr (void) const {
    return (cPtr_divisionExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_divisionExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_divisionExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_divisionExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__divisionExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_moduloExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_moduloExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_moduloExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_moduloExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_moduloExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_moduloExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_moduloExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_moduloExpression * getPtr (void) const {
    return (cPtr_moduloExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_moduloExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_moduloExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_moduloExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__moduloExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_unaryMinusExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_unaryMinusExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_unaryMinusExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_unaryMinusExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_unaryMinusExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_unaryMinusExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_unaryMinusExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_unaryMinusExpression * getPtr (void) const {
    return (cPtr_unaryMinusExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_unaryMinusExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_unaryMinusExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_unaryMinusExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__unaryMinusExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_notExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_notExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_notExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_notExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_notExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_notExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_notExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_notExpression * getPtr (void) const {
    return (cPtr_notExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_notExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_notExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_notExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__notExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_negateExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_negateExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_negateExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_negateExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_negateExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_negateExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_negateExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_negateExpression * getPtr (void) const {
    return (cPtr_negateExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_negateExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_negateExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_negateExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__negateExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_varInExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_varInExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_varInExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_varInExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_varInExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_varInExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_varInExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_varInExpression * getPtr (void) const {
    return (cPtr_varInExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mVarName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_varInExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_varInExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_varInExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__varInExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_descriptionInExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_descriptionInExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_descriptionInExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_descriptionInExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_descriptionInExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_descriptionInExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_descriptionInExpression constructor_new (C_Compiler & inLexique,
                                const GGS_semanticExpression & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_descriptionInExpression * getPtr (void) const {
    return (cPtr_descriptionInExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticExpression  reader_mReceiverExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_descriptionInExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_descriptionInExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_descriptionInExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__descriptionInExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_castInExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_castInExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_castInExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_castInExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_castInExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_castInExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_castInExpression constructor_new (C_Compiler & inLexique,
                                const GGS_semanticExpression & argument_0,
                                const GGS_bool& argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_semanticExpression & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_castInExpression * getPtr (void) const {
    return (cPtr_castInExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticExpression  reader_mReceiverExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mUseKindOfClass (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mErrorLocationExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_castInExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_castInExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_castInExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__castInExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//      GALGAS class 'GGS_filewrapperObjectInstanciationInExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_filewrapperObjectInstanciationInExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_filewrapperObjectInstanciationInExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_filewrapperObjectInstanciationInExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_filewrapperObjectInstanciationInExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_filewrapperObjectInstanciationInExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_filewrapperObjectInstanciationInExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_filewrapperObjectInstanciationInExpression * getPtr (void) const {
    return (cPtr_filewrapperObjectInstanciationInExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mFilewrapperName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_filewrapperObjectInstanciationInExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_filewrapperObjectInstanciationInExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_filewrapperObjectInstanciationInExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__filewrapperObjectInstanciationInExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_filewrapperInExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_filewrapperInExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_filewrapperInExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_filewrapperInExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_filewrapperInExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_filewrapperInExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_filewrapperInExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_filewrapperInExpression * getPtr (void) const {
    return (cPtr_filewrapperInExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mFilewrapperName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mFilewrapperPath (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_filewrapperInExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_filewrapperInExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_filewrapperInExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__filewrapperInExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_filewrapperTemplateInExpression'             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_filewrapperTemplateInExpression : public GGS_semanticExpression {
//--- Default constructor
  public : inline GGS_filewrapperTemplateInExpression (void) :
  GGS_semanticExpression () {}

//--- Pointer assignment constructor
  public : GGS_filewrapperTemplateInExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_filewrapperTemplateInExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_filewrapperTemplateInExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_filewrapperTemplateInExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_outExpressionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_filewrapperTemplateInExpression * getPtr (void) const {
    return (cPtr_filewrapperTemplateInExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mFilewrapperName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mFilewrapperTemplateName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_outExpressionList  reader_mActualOutputParameterList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_filewrapperTemplateInExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_filewrapperTemplateInExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_filewrapperTemplateInExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__filewrapperTemplateInExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_semanticExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_semanticExpression : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_semanticExpression (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_semanticExpression (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@semanticExpressionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_semanticExpressionList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_semanticExpression  mExpression ;
//--- Constructor
  public : elementOf_GGS_semanticExpressionList (const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_semanticExpressionList * nextObject (void) const { return (elementOf_GGS_semanticExpressionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_semanticExpressionList * previousObject (void) const { return (elementOf_GGS_semanticExpressionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_semanticExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_outExpressionList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_outExpressionList : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_outExpressionList (const GGS_semanticExpressionList & ,
                                const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_outExpressionList (void) {}
  #endif

//--- Attributes
  public : GGS_semanticExpressionList  mExpression ;
  public : GGS_location  mEndOfExpressionLocation ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_variableExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_variableExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_variableExpression (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_variableExpression (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mVariableName ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_selfInExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_selfInExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_selfInExpression (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_selfInExpression (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   abstract class 'cPtr_hereExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_hereExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_hereExpression (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_hereExpression (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   abstract class 'cPtr_trueExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_trueExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_trueExpression (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_trueExpression (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_falseExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_falseExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_falseExpression (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_falseExpression (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_literalCharExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalCharExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_literalCharExpression (const GGS_lchar & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_literalCharExpression (void) {}
  #endif

//--- Attributes
  public : GGS_lchar  mCharacter ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_literalStringExpression'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalStringExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_literalStringExpression (const GGS_stringlist & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_literalStringExpression (void) {}
  #endif

//--- Attributes
  public : GGS_stringlist  mStringSequence ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_literalDoubleExpression'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalDoubleExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_literalDoubleExpression (const GGS_ldouble & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_literalDoubleExpression (void) {}
  #endif

//--- Attributes
  public : GGS_ldouble  mValue ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_literalUIntExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalUIntExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_literalUIntExpression (const GGS_luint & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_literalUIntExpression (void) {}
  #endif

//--- Attributes
  public : GGS_luint  mValue ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_literalUInt64Expression'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalUInt64Expression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_literalUInt64Expression (const GGS_luint64 & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_literalUInt64Expression (void) {}
  #endif

//--- Attributes
  public : GGS_luint64  mValue ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_literalSIntExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalSIntExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_literalSIntExpression (const GGS_lsint & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_literalSIntExpression (void) {}
  #endif

//--- Attributes
  public : GGS_lsint  mValue ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_literalSInt64Expression'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_literalSInt64Expression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_literalSInt64Expression (const GGS_lsint64 & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_literalSInt64Expression (void) {}
  #endif

//--- Attributes
  public : GGS_lsint64  mValue ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_constructorExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_constructorExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_constructorExpression (const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_outExpressionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_constructorExpression (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mTypeName ;
  public : GGS_lstring  mConstructorName ;
  public : GGS_outExpressionList  mExpressions ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_readerCallExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_readerCallExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_readerCallExpression (const GGS_semanticExpression & ,
                                const GGS_lstring & ,
                                const GGS_outExpressionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_readerCallExpression (void) {}
  #endif

//--- Attributes
  public : GGS_semanticExpression  mReceiver ;
  public : GGS_lstring  mReaderName ;
  public : GGS_outExpressionList  mExpressions ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_optionExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_optionExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_optionExpression (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_optionExpression (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mOptionComponentName ;
  public : GGS_lstring  mOptionEntryName ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_concatExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_concatExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_concatExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_concatExpression (void) {}
  #endif

//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    abstract class 'cPtr_orExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_orExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_orExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_orExpression (void) {}
  #endif

//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   abstract class 'cPtr_xorExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_xorExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_xorExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_xorExpression (void) {}
  #endif

//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   abstract class 'cPtr_andExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_andExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_andExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_andExpression (void) {}
  #endif

//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_equalExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_equalExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_equalExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_equalExpression (void) {}
  #endif

//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_notEqualExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_notEqualExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_notEqualExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_notEqualExpression (void) {}
  #endif

//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_lowerOrEqualExpression'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lowerOrEqualExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_lowerOrEqualExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_lowerOrEqualExpression (void) {}
  #endif

//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_greaterOrEqualExpression'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_greaterOrEqualExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_greaterOrEqualExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_greaterOrEqualExpression (void) {}
  #endif

//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_strictGreaterExpression'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_strictGreaterExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_strictGreaterExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_strictGreaterExpression (void) {}
  #endif

//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_strictLowerExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_strictLowerExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_strictLowerExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_strictLowerExpression (void) {}
  #endif

//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_rightShiftExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_rightShiftExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_rightShiftExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_rightShiftExpression (void) {}
  #endif

//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_leftShiftExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_leftShiftExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_leftShiftExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_leftShiftExpression (void) {}
  #endif

//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   abstract class 'cPtr_addExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_addExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_addExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_addExpression (void) {}
  #endif

//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   abstract class 'cPtr_subExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_subExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_subExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_subExpression (void) {}
  #endif

//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_multiplicationExpression'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_multiplicationExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_multiplicationExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_multiplicationExpression (void) {}
  #endif

//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_divisionExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_divisionExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_divisionExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_divisionExpression (void) {}
  #endif

//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_moduloExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_moduloExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_moduloExpression (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_moduloExpression (void) {}
  #endif

//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mLeftExpression ;
  public : GGS_semanticExpression  mRightExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_unaryMinusExpression'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_unaryMinusExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_unaryMinusExpression (const GGS_location & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_unaryMinusExpression (void) {}
  #endif

//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   abstract class 'cPtr_notExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_notExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_notExpression (const GGS_location & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_notExpression (void) {}
  #endif

//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_negateExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_negateExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_negateExpression (const GGS_location & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_negateExpression (void) {}
  #endif

//--- Attributes
  public : GGS_location  mOperatorLocation ;
  public : GGS_semanticExpression  mExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_varInExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_varInExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_varInExpression (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_varInExpression (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mVarName ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_descriptionInExpression'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_descriptionInExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_descriptionInExpression (const GGS_semanticExpression & ,
                                const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_descriptionInExpression (void) {}
  #endif

//--- Attributes
  public : GGS_semanticExpression  mReceiverExpression ;
  public : GGS_location  mLocation ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_castInExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_castInExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_castInExpression (const GGS_semanticExpression & ,
                                const GGS_bool& ,
                                const GGS_lstring & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_castInExpression (void) {}
  #endif

//--- Attributes
  public : GGS_semanticExpression  mReceiverExpression ;
  public : GGS_bool mUseKindOfClass ;
  public : GGS_lstring  mTypeName ;
  public : GGS_semanticExpression  mErrorLocationExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//     abstract class 'cPtr_filewrapperObjectInstanciationInExpression'      *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_filewrapperObjectInstanciationInExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_filewrapperObjectInstanciationInExpression (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_filewrapperObjectInstanciationInExpression (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mFilewrapperName ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_filewrapperInExpression'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_filewrapperInExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_filewrapperInExpression (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_filewrapperInExpression (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mFilewrapperName ;
  public : GGS_lstring  mFilewrapperPath ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          abstract class 'cPtr_filewrapperTemplateInExpression'            *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_filewrapperTemplateInExpression : public cPtr_semanticExpression {
  private : typedef cPtr_semanticExpression inherited ;
//--- Constructor
  public : cPtr_filewrapperTemplateInExpression (const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_outExpressionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_filewrapperTemplateInExpression (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mFilewrapperName ;
  public : GGS_lstring  mFilewrapperTemplateName ;
  public : GGS_outExpressionList  mActualOutputParameterList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*

#endif
