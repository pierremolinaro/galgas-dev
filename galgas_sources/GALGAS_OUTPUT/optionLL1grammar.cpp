//-----------------------------------------------------------------------------*
//                                                                             *
//                        File 'optionLL1grammar.cpp'                          *
//                         Generated by version 2.6.0                          *
//                        june 26th, 2014, at 9h9'26"                          *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//-----------------------------------------------------------------------------*

#include "utilities/MF_MemoryControl.h"
#include "galgas2/C_galgas_CLI_Options.h"

#include "files/C_FileManager.h"

//-----------------------------------------------------------------------------*

#include "optionLL1grammar.h"

//-----------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//-----------------------------------------------------------------------------*
//                                                                             *
//               L L ( 1 )    P R O D U C T I O N    R U L E S                 *
//                                                                             *
//-----------------------------------------------------------------------------*

#define TERMINAL(t)     ((t)+1)
#define NONTERMINAL(nt) ((-nt)-1)
#define END_PRODUCTION  (0)

static const int16_t gProductions [] = {
// At index 0 : <option_component_start_symbol>, in file 'optionSyntax.ggs', line 25
  TERMINAL (C_Lexique_galgas_5F_scanner::kToken_option) // $option$
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) // $identifier$
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) // $:$
, NONTERMINAL (2) // <select_optionSyntax_0>
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) // $end$
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken_option) // $option$
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) // $;$
, END_PRODUCTION
// At index 8 : <option>, in file 'optionSyntax.ggs', line 49
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) // $type_name$
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) // $identifier$
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) // $:$
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_char) // $literal_char$
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) // $,$
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) // $literal_string$
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) // $->$
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) // $literal_string$
, NONTERMINAL (3) // <select_optionSyntax_1>
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) // $;$
, END_PRODUCTION
//---- Added productions from 'select' and 'repeat' instructions
// At index 19 : <select_optionSyntax_0>, in file 'optionSyntax.ggs', line 34
, END_PRODUCTION
// At index 20 : <select_optionSyntax_0>, in file 'optionSyntax.ggs', line 34
, NONTERMINAL (1) // <option>
, NONTERMINAL (2) // <select_optionSyntax_0>
, END_PRODUCTION
// At index 23 : <select_optionSyntax_1>, in file 'optionSyntax.ggs', line 60
, END_PRODUCTION
// At index 24 : <select_optionSyntax_1>, in file 'optionSyntax.ggs', line 60
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken_default) // $default$
, NONTERMINAL (4) // <select_optionSyntax_2>
, END_PRODUCTION
// At index 27 : <select_optionSyntax_2>, in file 'optionSyntax.ggs', line 64
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) // $literal_string$
, END_PRODUCTION
// At index 29 : <select_optionSyntax_2>, in file 'optionSyntax.ggs', line 64
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unsigned_5F_literal_5F_integer) // $unsigned_literal_integer$
, END_PRODUCTION
// At index 31 : <>, in file '.ggs', line 0
, NONTERMINAL (0) // <option_component_start_symbol>
, END_PRODUCTION
} ;

//-----------------------------------------------------------------------------*
//                                                                             *
//                      P R O D U C T I O N    N A M E S                       *
//                                                                             *
//-----------------------------------------------------------------------------*

static const cProductionNameDescriptor gProductionNames [9] = {
 {"<option_component_start_symbol>", "optionSyntax", 0}, // at index 0
 {"<option>", "optionSyntax", 8}, // at index 1
 {"<select_optionSyntax_0>", "optionSyntax", 19}, // at index 2
 {"<select_optionSyntax_0>", "optionSyntax", 20}, // at index 3
 {"<select_optionSyntax_1>", "optionSyntax", 23}, // at index 4
 {"<select_optionSyntax_1>", "optionSyntax", 24}, // at index 5
 {"<select_optionSyntax_2>", "optionSyntax", 27}, // at index 6
 {"<select_optionSyntax_2>", "optionSyntax", 29}, // at index 7
 {"<>", "", 31} // at index 8
} ;

//-----------------------------------------------------------------------------*
//                                                                             *
//             L L ( 1 )    P R O D U C T I O N    I N D E X E S               *
//                                                                             *
//-----------------------------------------------------------------------------*

static const int16_t gProductionIndexes [9] = {
0, // index 0 : <option_component_start_symbol>, in file 'optionSyntax.ggs', line 25
8, // index 1 : <option>, in file 'optionSyntax.ggs', line 49
19, // index 2 : <select_optionSyntax_0>, in file 'optionSyntax.ggs', line 34
20, // index 3 : <select_optionSyntax_0>, in file 'optionSyntax.ggs', line 34
23, // index 4 : <select_optionSyntax_1>, in file 'optionSyntax.ggs', line 60
24, // index 5 : <select_optionSyntax_1>, in file 'optionSyntax.ggs', line 60
27, // index 6 : <select_optionSyntax_2>, in file 'optionSyntax.ggs', line 64
29, // index 7 : <select_optionSyntax_2>, in file 'optionSyntax.ggs', line 64
31 // index 8 : <>, in file '.ggs', line 0
} ;

//-----------------------------------------------------------------------------*
//                                                                             *
//       L L ( 1 )    F I R S T    P R O D U C T I O N    I N D E X E S        *
//                                                                             *
//-----------------------------------------------------------------------------*

static const int16_t gFirstProductionIndexes [7] = {
0, // at 0 : <option_component_start_symbol>
1, // at 1 : <option>
2, // at 2 : <select_optionSyntax_0>
4, // at 3 : <select_optionSyntax_1>
6, // at 4 : <select_optionSyntax_2>
8, // at 5 : <>
0} ;

//-----------------------------------------------------------------------------*
//                                                                             *
//                L L ( 1 )    D E C I S I O N    T A B L E S                  *
//                                                                             *
//-----------------------------------------------------------------------------*

static const int16_t gDecision [] = {
// At index 0 : <option_component_start_symbol> only one production, no choice
  -1,
// At index 1 : <option> only one production, no choice
  -1,
//---- Added non terminal symbols from 'select' and 'repeat' instructions
// At index 2 : <select_optionSyntax_0>
C_Lexique_galgas_5F_scanner::kToken_end, -1, // Choice 1
C_Lexique_galgas_5F_scanner::kToken_type_5F_name, -1, // Choice 2
  -1,
// At index 7 : <select_optionSyntax_1>
C_Lexique_galgas_5F_scanner::kToken__3B_, -1, // Choice 1
C_Lexique_galgas_5F_scanner::kToken_default, -1, // Choice 2
  -1,
// At index 12 : <select_optionSyntax_2>
C_Lexique_galgas_5F_scanner::kToken_literal_5F_string, -1, // Choice 1
C_Lexique_galgas_5F_scanner::kToken_unsigned_5F_literal_5F_integer, -1, // Choice 2
  -1,
// At index 17 : <> only one production, no choice
  -1,
0} ;

//-----------------------------------------------------------------------------*
//                                                                             *
//        L L ( 1 )    D E C I S I O N    T A B L E S    I N D E X E S         *
//                                                                             *
//-----------------------------------------------------------------------------*

static const int16_t gDecisionIndexes [7] = {
0, // at 0 : <option_component_start_symbol>
1, // at 1 : <option>
2, // at 2 : <select_optionSyntax_0>
7, // at 3 : <select_optionSyntax_1>
12, // at 4 : <select_optionSyntax_2>
17, // at 5 : <>
0} ;

//-----------------------------------------------------------------------------*
//                                                                             *
//        'option_component_start_symbol' non terminal implementation          *
//                                                                             *
//-----------------------------------------------------------------------------*

void cGrammar_optionLL_31_grammar::nt_option_5F_component_5F_start_5F_symbol_parse (C_String & ioSyntaxDirectedTranslationResult, C_Lexique_galgas_5F_scanner * inLexique) {
  rule_optionSyntax_option_5F_component_5F_start_5F_symbol_i0_parse(ioSyntaxDirectedTranslationResult, inLexique) ;
}

void cGrammar_optionLL_31_grammar::nt_option_5F_component_5F_start_5F_symbol_indexing (C_Lexique_galgas_5F_scanner * inLexique) {
  rule_optionSyntax_option_5F_component_5F_start_5F_symbol_i0_indexing(inLexique) ;
}

void cGrammar_optionLL_31_grammar::nt_option_5F_component_5F_start_5F_symbol_ (GALGAS_optionComponentAST & parameter_1,
                                C_String & ioSyntaxDirectedTranslationResult,
                                C_Lexique_galgas_5F_scanner * inLexique) {
  rule_optionSyntax_option_5F_component_5F_start_5F_symbol_i0_(parameter_1, ioSyntaxDirectedTranslationResult, inLexique) ;
}

void cGrammar_optionLL_31_grammar::performIndexing (C_Compiler * inCompiler,
             const C_String & inSourceFilePath) {
  C_Lexique_galgas_5F_scanner * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_galgas_5F_scanner (inCompiler, "", "", inSourceFilePath COMMA_HERE)) ;
  scanner->enableIndexing () ;
  if (scanner->sourceText () != NULL) {
    const bool ok = scanner->performTopDownParsing (gProductions, gProductionNames, gProductionIndexes,
                                                    gFirstProductionIndexes, gDecision, gDecisionIndexes, 31) ;
    if (ok) {
      cGrammar_optionLL_31_grammar grammar ;
      grammar.nt_option_5F_component_5F_start_5F_symbol_indexing (scanner) ;
    }
    scanner->generateIndexFile () ;
  }
  macroDetachSharedObject (scanner) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                    Grammar start symbol implementation                      *
//                                                                             *
//-----------------------------------------------------------------------------*

void cGrammar_optionLL_31_grammar::_performSourceFileParsing_ (C_Compiler * inCompiler,
                                C_String & ioSyntaxDirectedTranslationResult,
                                GALGAS_lstring inFilePath,
                                GALGAS_optionComponentAST &  parameter_1
                                COMMA_LOCATION_ARGS) {
  if (inFilePath.isValid ()) {
    const GALGAS_string filePathAsString = inFilePath.reader_string (HERE) ;
    C_String filePath = filePathAsString.stringValue () ;
    if (! C_FileManager::isAbsolutePath (filePath)) {
      filePath = inCompiler->sourceFilePath ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (filePath) ;
    }
    if (C_FileManager::fileExistsAtPath (filePath)) {
    C_Lexique_galgas_5F_scanner * scanner = NULL ;
    macroMyNew (scanner, C_Lexique_galgas_5F_scanner (inCompiler, "", "", filePath COMMA_HERE)) ;
    if (scanner->sourceText () != NULL) {
      const bool ok = scanner->performTopDownParsing (gProductions, gProductionNames, gProductionIndexes,
                                                      gFirstProductionIndexes, gDecision, gDecisionIndexes, 31) ;
      if (ok && ! executionModeIsSyntaxAnalysisOnly ()) {
        cGrammar_optionLL_31_grammar grammar ;
        grammar.nt_option_5F_component_5F_start_5F_symbol_ (parameter_1, ioSyntaxDirectedTranslationResult, scanner) ;
        scanner->appendLastSeparatorTo (ioSyntaxDirectedTranslationResult) ;
      }
    }else{
      C_String message ;
      message << "the '" << filePath << "' file exists, but cannot be read" ;
      const GALGAS_location errorLocation (inFilePath.reader_location (THERE)) ;
      inCompiler->semanticErrorAtLocation (errorLocation, message COMMA_THERE) ;
      parameter_1.drop () ;
    }
    macroDetachSharedObject (scanner) ;
  }else{
    C_String message ;
    message << "the '" << filePath << "' file does not exist" ;
    const GALGAS_location errorLocation (inFilePath.reader_location (THERE)) ;
    inCompiler->semanticErrorAtLocation (errorLocation, message COMMA_THERE) ;
    parameter_1.drop () ;
    }
  }
}

//-----------------------------------------------------------------------------*

void cGrammar_optionLL_31_grammar::_performSourceStringParsing_ (C_Compiler * inCompiler,
                                C_String & ioSyntaxDirectedTranslationResult,
                                GALGAS_string inSourceString,
                                GALGAS_optionComponentAST &  parameter_1
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (inSourceString.isValid ()) {
    const C_String sourceString = inSourceString.stringValue () ;
    C_Lexique_galgas_5F_scanner * scanner = NULL ;
    macroMyNew (scanner, C_Lexique_galgas_5F_scanner (inCompiler, sourceString, "" COMMA_HERE)) ;
    const bool ok = scanner->performTopDownParsing (gProductions, gProductionNames, gProductionIndexes,
                                                    gFirstProductionIndexes, gDecision, gDecisionIndexes, 31) ;
    if (ok && ! executionModeIsSyntaxAnalysisOnly ()) {
      cGrammar_optionLL_31_grammar grammar ;
      grammar.nt_option_5F_component_5F_start_5F_symbol_ (parameter_1, ioSyntaxDirectedTranslationResult, scanner) ;
    }
    macroDetachSharedObject (scanner) ;
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                    'option' non terminal implementation                     *
//                                                                             *
//-----------------------------------------------------------------------------*

void cGrammar_optionLL_31_grammar::nt_option_parse (C_String & ioSyntaxDirectedTranslationResult, C_Lexique_galgas_5F_scanner * inLexique) {
  rule_optionSyntax_option_i1_parse(ioSyntaxDirectedTranslationResult, inLexique) ;
}

void cGrammar_optionLL_31_grammar::nt_option_indexing (C_Lexique_galgas_5F_scanner * inLexique) {
  rule_optionSyntax_option_i1_indexing(inLexique) ;
}

void cGrammar_optionLL_31_grammar::nt_option_ (GALGAS_commandLineOptionListAST & parameter_1,
                                C_String & ioSyntaxDirectedTranslationResult,
                                C_Lexique_galgas_5F_scanner * inLexique) {
  rule_optionSyntax_option_i1_(parameter_1, ioSyntaxDirectedTranslationResult, inLexique) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//         'select_optionSyntax_0' added non terminal implementation           *
//                                                                             *
//-----------------------------------------------------------------------------*

int32_t cGrammar_optionLL_31_grammar::select_optionSyntax_0 (C_Lexique_galgas_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//         'select_optionSyntax_1' added non terminal implementation           *
//                                                                             *
//-----------------------------------------------------------------------------*

int32_t cGrammar_optionLL_31_grammar::select_optionSyntax_1 (C_Lexique_galgas_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//         'select_optionSyntax_2' added non terminal implementation           *
//                                                                             *
//-----------------------------------------------------------------------------*

int32_t cGrammar_optionLL_31_grammar::select_optionSyntax_2 (C_Lexique_galgas_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//-----------------------------------------------------------------------------*

