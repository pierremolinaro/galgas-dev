//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'optionLL1grammar.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      march 25th, 2010, at 18h10'27"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include "utilities/MF_MemoryControl.h"

//---------------------------------------------------------------------------*

#include "optionLL1grammar.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//              L L ( 1 )    P R O D U C T I O N    R U L E S                *
//                                                                           *
//---------------------------------------------------------------------------*

#define TERMINAL(t)     ((t)+1)
#define NONTERMINAL(nt) ((-nt)-1)
#define END_PRODUCTION  (0)

static const PMSInt16 gProductions [] = {
// At index 0 : <option_component_start_symbol>, in file 'optionSyntax.ggs', line 32
  TERMINAL (C_Lexique_galgas_5F_scanner::kToken_option) // $option$
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) // $identifier$
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) // $:$
, NONTERMINAL (2) // <select_optionSyntax_0>
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) // $end$
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken_option) // $option$
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) // $;$
, END_PRODUCTION
// At index 8 : <option>, in file 'optionSyntax.ggs', line 56
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) // $type_name$
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) // $identifier$
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) // $:$
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_char) // $literal_char$
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) // $,$
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) // $literal_string$
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) // $->$
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) // $literal_string$
, NONTERMINAL (3) // <select_optionSyntax_1>
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) // $;$
, END_PRODUCTION
//---- Added productions from 'select' and 'repeat' instructions
// At index 19 : <select_optionSyntax_0>, in file 'optionSyntax.ggs', line 42
, END_PRODUCTION
// At index 20 : <select_optionSyntax_0>, in file 'optionSyntax.ggs', line 42
, NONTERMINAL (1) // <option>
, NONTERMINAL (2) // <select_optionSyntax_0>
, END_PRODUCTION
// At index 23 : <select_optionSyntax_1>, in file 'optionSyntax.ggs', line 68
, END_PRODUCTION
// At index 24 : <select_optionSyntax_1>, in file 'optionSyntax.ggs', line 68
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken_default) // $default$
, NONTERMINAL (4) // <select_optionSyntax_2>
, END_PRODUCTION
// At index 27 : <select_optionSyntax_2>, in file 'optionSyntax.ggs', line 72
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) // $literal_string$
, END_PRODUCTION
// At index 29 : <select_optionSyntax_2>, in file 'optionSyntax.ggs', line 72
, TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unsigned_5F_literal_5F_integer) // $unsigned_literal_integer$
, END_PRODUCTION
// At index 31 : <>, in file '.ggs', line 0
, NONTERMINAL (0) // <option_component_start_symbol>
, END_PRODUCTION
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     P R O D U C T I O N    N A M E S                      *
//                                                                           *
//---------------------------------------------------------------------------*

static const cProductionNameDescriptor gProductionNames [9] = {
 {"<option_component_start_symbol>", "optionSyntax", 0}, // at index 0
 {"<option>", "optionSyntax", 8}, // at index 1
 {"<select_optionSyntax_0>", "optionSyntax", 19}, // at index 2
 {"<select_optionSyntax_0>", "optionSyntax", 20}, // at index 3
 {"<select_optionSyntax_1>", "optionSyntax", 23}, // at index 4
 {"<select_optionSyntax_1>", "optionSyntax", 24}, // at index 5
 {"<select_optionSyntax_2>", "optionSyntax", 27}, // at index 6
 {"<select_optionSyntax_2>", "optionSyntax", 29}, // at index 7
 {"<>", "", 31} // at index 8
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            L L ( 1 )    P R O D U C T I O N    I N D E X E S              *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt16 gProductionIndexes [9] = {
0, // index 0 : <option_component_start_symbol>, in file 'optionSyntax.ggs', line 32
8, // index 1 : <option>, in file 'optionSyntax.ggs', line 56
19, // index 2 : <select_optionSyntax_0>, in file 'optionSyntax.ggs', line 42
20, // index 3 : <select_optionSyntax_0>, in file 'optionSyntax.ggs', line 42
23, // index 4 : <select_optionSyntax_1>, in file 'optionSyntax.ggs', line 68
24, // index 5 : <select_optionSyntax_1>, in file 'optionSyntax.ggs', line 68
27, // index 6 : <select_optionSyntax_2>, in file 'optionSyntax.ggs', line 72
29, // index 7 : <select_optionSyntax_2>, in file 'optionSyntax.ggs', line 72
31 // index 8 : <>, in file '.ggs', line 0
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//      L L ( 1 )    F I R S T    P R O D U C T I O N    I N D E X E S       *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt16 gFirstProductionIndexes [7] = {
0, // at 0 : <option_component_start_symbol>
1, // at 1 : <option>
2, // at 2 : <select_optionSyntax_0>
4, // at 3 : <select_optionSyntax_1>
6, // at 4 : <select_optionSyntax_2>
8, // at 5 : <>
0} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               L L ( 1 )    D E C I S I O N    T A B L E S                 *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt16 gDecision [] = {
// At index 0 : <option_component_start_symbol> only one production, no choice
  -1,
// At index 1 : <option> only one production, no choice
  -1,
//---- Added non terminal symbols from 'select' and 'repeat' instructions
// At index 2 : <select_optionSyntax_0>
C_Lexique_galgas_5F_scanner::kToken_end, -1, // Choice 1
C_Lexique_galgas_5F_scanner::kToken_type_5F_name, -1, // Choice 2
  -1,
// At index 7 : <select_optionSyntax_1>
C_Lexique_galgas_5F_scanner::kToken__3B_, -1, // Choice 1
C_Lexique_galgas_5F_scanner::kToken_default, -1, // Choice 2
  -1,
// At index 12 : <select_optionSyntax_2>
C_Lexique_galgas_5F_scanner::kToken_literal_5F_string, -1, // Choice 1
C_Lexique_galgas_5F_scanner::kToken_unsigned_5F_literal_5F_integer, -1, // Choice 2
  -1,
// At index 17 : <> only one production, no choice
  -1,
0} ;

//---------------------------------------------------------------------------*
//                                                                           *
//       L L ( 1 )    D E C I S I O N    T A B L E S    I N D E X E S        *
//                                                                           *
//---------------------------------------------------------------------------*

static const PMSInt16 gDecisionIndexes [7] = {
0, // at 0 : <option_component_start_symbol>
1, // at 1 : <option>
2, // at 2 : <select_optionSyntax_0>
7, // at 3 : <select_optionSyntax_1>
12, // at 4 : <select_optionSyntax_2>
17, // at 5 : <>
0} ;

//---------------------------------------------------------------------------*
//                                                                           *
//       'option_component_start_symbol' non terminal implementation         *
//                                                                           *
//---------------------------------------------------------------------------*

void C_Grammar_optionLL_31_grammar::
nt_option_5F_component_5F_start_5F_symbol_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_optionComponentAST & parameter_1) {
rule_optionSyntax_option_5F_component_5F_start_5F_symbol_i0_ (inLexique, parameter_1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Grammar start symbol implementation                     *
//                                                                           *
//---------------------------------------------------------------------------*

void C_Grammar_optionLL_31_grammar::_performSourceFileParsing_ (C_Compiler & inCompiler,
                                const C_String & inDependancyExtension,
                                const C_String & inDependancyPath,
                                GGS_string * inSentStringPtr,
                                const GGS_lstring _inFileName,
                                GGS_optionComponentAST & parameter_1
                                COMMA_LOCATION_ARGS) {
  const C_String sourceFileName = _inFileName.string ().isAbsolutePath ()
    ? _inFileName.string ()
    : inCompiler.sourceFileName ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (_inFileName.string ()) ;
  if (sourceFileName.fileExists ()) {
    C_Lexique_galgas_5F_scanner * scanner_ = NULL ;
    macroMyNew (scanner_, C_Lexique_galgas_5F_scanner (& inCompiler, inDependancyExtension, inDependancyPath, inCompiler.ioParametersPtr (), sourceFileName COMMA_HERE)) ;
    macroRetainObject (scanner_) ;
    if (scanner_->needsCompiling ()) {
      if (scanner_->sourceText () != NULL) {
        scanner_->mPerformGeneration = inCompiler.mPerformGeneration ;
        const bool ok = scanner_->performTopDownParsing (gProductions, gProductionNames, gProductionIndexes,
                                                         gFirstProductionIndexes, gDecision, gDecisionIndexes, 31) ;
        if (ok && ! scanner_->mParseOnlyFlag) {
          C_Grammar_optionLL_31_grammar _grammar ;
          _grammar.nt_option_5F_component_5F_start_5F_symbol_ (*scanner_, parameter_1) ;
          if (inSentStringPtr != NULL) {
            inSentStringPtr->dotAssign_operation (scanner_->sentString ()) ;
          }
        }
      }else{
        C_String message ;
        message << "the '" << sourceFileName << "' file exits, but cannot be read" ;
        _inFileName.signalSemanticError (inCompiler, message COMMA_THERE) ;
        parameter_1.drop () ;
      }
    }
    macroReleaseObject (scanner_) ;
  }else{
    C_String message ;
    message << "the '" << sourceFileName << "' file does not exist" ;
    _inFileName.signalSemanticError (inCompiler, message COMMA_THERE) ;
    parameter_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void C_Grammar_optionLL_31_grammar::_performSourceStringParsing_ (C_Compiler & inCompiler,
                                GGS_string * inSentStringPtr,
                                const GGS_string _inSourceString,
                                GGS_optionComponentAST & parameter_1
                                COMMA_UNUSED_LOCATION_ARGS) {
  C_Lexique_galgas_5F_scanner * scanner_ = NULL ;
  macroMyNew (scanner_, C_Lexique_galgas_5F_scanner (& inCompiler, inCompiler.ioParametersPtr (), _inSourceString.string (), "Error when parsing dynamic string" COMMA_HERE)) ;
  macroRetainObject (scanner_) ;
  scanner_->mPerformGeneration = inCompiler.mPerformGeneration ;
  const bool ok = scanner_->performTopDownParsing (gProductions, gProductionNames, gProductionIndexes,
                                                   gFirstProductionIndexes, gDecision, gDecisionIndexes, 31) ;
  if (ok && ! scanner_->mParseOnlyFlag) {
    C_Grammar_optionLL_31_grammar _grammar ;
    _grammar.nt_option_5F_component_5F_start_5F_symbol_ (*scanner_, parameter_1) ;
    if (inSentStringPtr != NULL) {
      inSentStringPtr->dotAssign_operation (scanner_->sentString ()) ;
    }
  }
  macroReleaseObject (scanner_) ;
  C_Object::garbage () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   'option' non terminal implementation                    *
//                                                                           *
//---------------------------------------------------------------------------*

void C_Grammar_optionLL_31_grammar::
nt_option_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_commandLineOptionListAST & parameter_1) {
rule_optionSyntax_option_i1_ (inLexique, parameter_1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        'select_optionSyntax_0' added non terminal implementation          *
//                                                                           *
//---------------------------------------------------------------------------*

PMSInt16 C_Grammar_optionLL_31_grammar::select_optionSyntax_0 (C_Lexique_galgas_5F_scanner & inLexique) {
  return inLexique.nextProductionIndex () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        'select_optionSyntax_1' added non terminal implementation          *
//                                                                           *
//---------------------------------------------------------------------------*

PMSInt16 C_Grammar_optionLL_31_grammar::select_optionSyntax_1 (C_Lexique_galgas_5F_scanner & inLexique) {
  return inLexique.nextProductionIndex () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        'select_optionSyntax_2' added non terminal implementation          *
//                                                                           *
//---------------------------------------------------------------------------*

PMSInt16 C_Grammar_optionLL_31_grammar::select_optionSyntax_2 (C_Lexique_galgas_5F_scanner & inLexique) {
  return inLexique.nextProductionIndex () ;
}

//---------------------------------------------------------------------------*

