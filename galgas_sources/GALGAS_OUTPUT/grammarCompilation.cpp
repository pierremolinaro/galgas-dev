//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'grammarCompilation.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 10th, 2009, at 18h6'57"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "grammarCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "grammarCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "grammarLL1grammar.h"
#include "syntaxSLRgrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'e_nonTerminalMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

e_nonTerminalMap::e_nonTerminalMap (void) :
mLabels (),
mHasParseLabel () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class map '@nonTerminalMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_nonTerminalMap::
elementOf_GGS_nonTerminalMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_nonTerminalMap & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_nonTerminalMap::
appendForMapDescription (C_Compiler & inLexique,
                         const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mLabels.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mHasParseLabel.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_nonTerminalMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_nonTerminalMap * ptr = dynamic_cast <const elementOf_GGS_nonTerminalMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mLabels.operator_isEqual (ptr->mInfo.mLabels)).boolValue ()
           && (mInfo.mHasParseLabel.operator_isEqual (ptr->mInfo.mHasParseLabel)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_nonTerminalMap::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_nonTerminalMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_nonTerminalMap * info = (e_nonTerminalMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_nonTerminalMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_nonTerminalMap * info = (e_nonTerminalMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_nonTerminalMap GGS_nonTerminalMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_nonTerminalMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalMap::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_nonTerminalMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_nonTerminalMap::
operator_isEqual (const GGS_nonTerminalMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_nonTerminalMap::
operator_isNotEqual (const GGS_nonTerminalMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalMap::
insertElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_nonTerminalLabelList & inParameter0,
                const GGS_bool& inParameter1,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap () ;
    e_nonTerminalMap info  ;
    info.mLabels = inParameter0 ;
    info.mHasParseLabel = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalMap::
searchElement (C_Compiler & inLexique,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_nonTerminalLabelList   & outParameter0,
               GGS_bool  & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mLabels ;
    outParameter1 = node->mInfo.mHasParseLabel ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_nonTerminalMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('@'),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_nonTerminalMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_nonTerminalLabelList   & outParameter0,
                                GGS_bool  & outParameter1 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                  kSearchMessage_searchKey,
                  inKey,
                  outParameter0,
                  outParameter1,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_nonTerminalMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('@'),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_nonTerminalMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_nonTerminalLabelList & inParameter0,
                                const GGS_bool& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_nonTerminalMap GGS_nonTerminalMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_nonTerminalMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_nonTerminalMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonTerminalMap GGS_nonTerminalMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_nonTerminalMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_nonTerminalMap::
reader_description (C_Compiler & inLexique
                    COMMA_LOCATION_ARGS,
                    const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @nonTerminalMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    PMSInt32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_nonTerminalLabelList  & GGS_nonTerminalMap::cEnumerator::_mLabels (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mLabels ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_nonTerminalMap::cEnumerator::_mHasParseLabel (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mHasParseLabel ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "handleNonTerminalDeclarations"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_handleNonTerminalDeclarations (C_Compiler & inLexique,
                                GGS_nonTerminalMap  & var_cas_ioNonTerminalMap,
                                const GGS_nonterminalDeclarationList   var_cas_inNonterminalDeclarationList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_handleNonTerminalDeclarations at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_nonterminalDeclarationList::cEnumerator enumerator_3044 (var_cas_inNonterminalDeclarationList, true) ;
    const GGS_nonterminalDeclarationList::cElement * operand_3044 = NULL ;
    while (((operand_3044 = enumerator_3044.nextObject ()))) {
      macroValidPointer (operand_3044) ;
      if ((var_cas_ioNonTerminalMap.reader_hasKey (inLexique, operand_3044->mNonterminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (55)) COMMA_SOURCE_FILE_AT_LINE (55))).isBuiltAndTrue ()) {
        GGS_nonTerminalLabelList  var_cas_labels ;
        GGS_bool var_cas_hasParseLabel ;
        const GGS_nonTerminalMap  temp_3211 = var_cas_ioNonTerminalMap ;
        if (temp_3211.isBuilt ()) {
          temp_3211 (HERE)->method_searchKey (inLexique, operand_3044->mNonterminalName, var_cas_labels, var_cas_hasParseLabel COMMA_SOURCE_FILE_AT_LINE (58)) ;
        }
        if (((operand_3044->mHasParseLabel).operator_and ((var_cas_hasParseLabel).operator_not ())).isBuiltAndTrue ()) {
          operand_3044->mNonterminalName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this declaration has a 'parse' label, but declaration of the same non terminal in ")).operator_concat (var_cas_ioNonTerminalMap.reader_locationForKey (inLexique, operand_3044->mNonterminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (66)) COMMA_SOURCE_FILE_AT_LINE (66)).reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (66)))).operator_concat (GGS_string (" does not have a 'parse' label")) COMMA_SOURCE_FILE_AT_LINE (68)) ;
        }else if ((((operand_3044->mHasParseLabel).operator_not ()).operator_and (var_cas_hasParseLabel)).isBuiltAndTrue ()) {
          operand_3044->mNonterminalName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this declaration has no 'parse' label, but declaration of the same non terminal in ")).operator_concat (var_cas_ioNonTerminalMap.reader_locationForKey (inLexique, operand_3044->mNonterminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (70)) COMMA_SOURCE_FILE_AT_LINE (70)).reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (70)))).operator_concat (GGS_string (" has a 'parse' label")) COMMA_SOURCE_FILE_AT_LINE (72)) ;
        }
        if (((var_cas_labels.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (74))).operator_isNotEqual (operand_3044->mLabels.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (74)))).isBuiltAndTrue ()) {
          operand_3044->mNonterminalName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("this declaration names ")).operator_concat (operand_3044->mLabels.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (76)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (76)))).operator_concat (GGS_string (" labels, but declaration of the same non terminal in "))).operator_concat (var_cas_ioNonTerminalMap.reader_locationForKey (inLexique, operand_3044->mNonterminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (78)) COMMA_SOURCE_FILE_AT_LINE (78)).reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (78)))).operator_concat (GGS_string (" names"))).operator_concat (var_cas_labels.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (80)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (80)))).operator_concat (GGS_string (" labels.")) COMMA_SOURCE_FILE_AT_LINE (83)) ;
        }else{
          {
            GGS_nonTerminalLabelList::cEnumerator enumerator_4394 (operand_3044->mLabels, true) ;
            const GGS_nonTerminalLabelList::cElement * operand_4394 = NULL ;
            GGS_nonTerminalLabelList::cEnumerator enumerator_4402 (var_cas_labels, true) ;
            const GGS_nonTerminalLabelList::cElement * operand_4402 = NULL ;
            while (((operand_4394 = enumerator_4394.nextObject ()))
                && ((operand_4402 = enumerator_4402.nextObject ()))) {
              macroValidPointer (operand_4394) ;
              macroValidPointer (operand_4402) ;
              if (((operand_4394->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (85))).operator_isNotEqual (operand_4402->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (85)))).isBuiltAndTrue ()) {
                operand_4394->mLabelName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("this label should be identical to the label '")).operator_concat (operand_4402->mLabelName)).operator_concat (GGS_string ("' declared in "))).operator_concat (operand_4402->mLabelName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (89)).reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (89))) COMMA_SOURCE_FILE_AT_LINE (91)) ;
              }
              {
                GGS_formalParameterList::cEnumerator enumerator_4779 (operand_4394->mFormalParameters, true) ;
                const GGS_formalParameterList::cElement * operand_4779 = NULL ;
                GGS_formalParameterList::cEnumerator enumerator_4797 (operand_4402->mFormalParameters, true) ;
                const GGS_formalParameterList::cElement * operand_4797 = NULL ;
                while (((operand_4779 = enumerator_4779.nextObject ()))
                    && ((operand_4797 = enumerator_4797.nextObject ()))) {
                  macroValidPointer (operand_4779) ;
                  macroValidPointer (operand_4797) ;
                  if (((operand_4779->mFormalParameterPassingMode).operator_isNotEqual (operand_4797->mFormalParameterPassingMode)).isBuiltAndTrue ()) {
                    operand_4779->mFormalParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("the passing mode (")).operator_concat (operand_4779->mFormalParameterPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (99)))).operator_concat (GGS_string (") for this parameter should be identical to the passing mode ("))).operator_concat (operand_4797->mFormalParameterPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (101)))).operator_concat (GGS_string (") of the parameter declared in"))).operator_concat (operand_4402->mLabelName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (103)).reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (103))) COMMA_SOURCE_FILE_AT_LINE (105)) ;
                  }
                  if (((operand_4779->mFormalParameterTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (106))).operator_isNotEqual (operand_4797->mFormalParameterTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (106)))).isBuiltAndTrue ()) {
                    operand_4779->mFormalParameterTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("this type name should be identical to the '@")).operator_concat (operand_4797->mFormalParameterTypeName)).operator_concat (GGS_string ("' type name used in "))).operator_concat (operand_4797->mFormalParameterTypeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (110)).reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (110))) COMMA_SOURCE_FILE_AT_LINE (112)) ;
                  }
                }
              }
            }
          }
        }
      }else{
        var_cas_ioNonTerminalMap.modifier_insertKey (inLexique, operand_3044->mNonterminalName, operand_3044->mLabels, operand_3044->mHasParseLabel COMMA_SOURCE_FILE_AT_LINE (117)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_handleNonTerminalDeclarations\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@syntaxInstruction.buildSyntaxInstructionList'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList> gDispatchTableForMethod__syntaxInstruction__buildSyntaxInstructionList ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList (typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__syntaxInstruction__buildSyntaxInstructionList.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList
findCategoryMethod__syntaxInstruction__buildSyntaxInstructionList (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__syntaxInstruction__buildSyntaxInstructionList.count ()) {
    result = gDispatchTableForMethod__syntaxInstruction__buildSyntaxInstructionList (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__syntaxInstruction__buildSyntaxInstructionList (superClassPtr) ;
      gDispatchTableForMethod__syntaxInstruction__buildSyntaxInstructionList.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "buildSyntaxInstructionList"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildSyntaxInstructionList (C_Compiler & inLexique,
                                const GGS_syntaxInstructionList   var_cas_inInstructionList,
                                GGS_syntaxInstructionList  & var_cas_outSyntaxInstructionList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildSyntaxInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outSyntaxInstructionList = GGS_syntaxInstructionList ::constructor_emptyList () ;
  {
    GGS_syntaxInstructionList::cEnumerator enumerator_7110 (var_cas_inInstructionList, true) ;
    const GGS_syntaxInstructionList::cElement * operand_7110 = NULL ;
    while (((operand_7110 = enumerator_7110.nextObject ()))) {
      macroValidPointer (operand_7110) ;
      const GGS_syntaxInstruction  temp_7158 = operand_7110->mInstruction ;
      if (temp_7158.isBuilt ()) {
        typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList method = findCategoryMethod__syntaxInstruction__buildSyntaxInstructionList (temp_7158.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_7158 (HERE), var_cas_outSyntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (146)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildSyntaxInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@semanticInstruction.buildSyntaxInstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticInstruction__buildSyntaxInstructionList (C_Compiler &,
                                const cPtr_semanticInstruction * operand_7518,
                                GGS_syntaxInstructionList  & /* var_cas_ioSyntaxInstructionList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7518 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@nonterminalCallInstruction.buildSyntaxInstructionList'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__nonterminalCallInstruction__buildSyntaxInstructionList (C_Compiler &,
                                const cPtr_nonterminalCallInstruction * operand_7742,
                                GGS_syntaxInstructionList  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7742 != NULL) {
    var_cas_ioSyntaxInstructionList.addAssign_operation (operand_7742) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@terminalCheckInstruction.buildSyntaxInstructionList'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__terminalCheckInstruction__buildSyntaxInstructionList (C_Compiler &,
                                const cPtr_terminalCheckInstruction * operand_7994,
                                GGS_syntaxInstructionList  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7994 != NULL) {
    var_cas_ioSyntaxInstructionList.addAssign_operation (operand_7994) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@repeatInstruction.buildSyntaxInstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__repeatInstruction__buildSyntaxInstructionList (C_Compiler & inLexique,
                                const cPtr_repeatInstruction * operand_8239,
                                GGS_syntaxInstructionList  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8239 != NULL) {
    GGS_syntaxInstructionList  var_cas_repeatedInstructionList ;
    ::routine_buildSyntaxInstructionList (inLexique,  operand_8239->mRepeatedInstructionList,  var_cas_repeatedInstructionList COMMA_SOURCE_FILE_AT_LINE (181)) ;
    GGS_listOfSyntaxInstructionList  var_cas_repeatBranchList ;
    var_cas_repeatBranchList = GGS_listOfSyntaxInstructionList ::constructor_emptyList () ;
    {
      GGS_listOfSyntaxInstructionList::cEnumerator enumerator_8515 (operand_8239->mRepeatBranchList, true) ;
      const GGS_listOfSyntaxInstructionList::cElement * operand_8515 = NULL ;
      while (((operand_8515 = enumerator_8515.nextObject ()))) {
        macroValidPointer (operand_8515) ;
        GGS_syntaxInstructionList  var_cas_syntaxInstructionList ;
        ::routine_buildSyntaxInstructionList (inLexique,  operand_8515->mSyntaxInstructionList,  var_cas_syntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (185)) ;
        var_cas_repeatBranchList.addAssign_operation (var_cas_syntaxInstructionList) ;
      }
    }
    GGS_repeatInstruction  var_cas_ri ;
    var_cas_ri = GGS_repeatInstruction ::constructor_new (inLexique, operand_8239->mRepeatInstructionLocation, var_cas_repeatedInstructionList, var_cas_repeatBranchList COMMA_HERE) ;
    var_cas_ioSyntaxInstructionList.addAssign_operation (var_cas_ri) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@selectInstruction.buildSyntaxInstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__selectInstruction__buildSyntaxInstructionList (C_Compiler & inLexique,
                                const cPtr_selectInstruction * operand_9022,
                                GGS_syntaxInstructionList  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9022 != NULL) {
    GGS_listOfSyntaxInstructionList  var_cas_selectBranchList ;
    var_cas_selectBranchList = GGS_listOfSyntaxInstructionList ::constructor_emptyList () ;
    {
      GGS_listOfSyntaxInstructionList::cEnumerator enumerator_9165 (operand_9022->mSelectBranchList, true) ;
      const GGS_listOfSyntaxInstructionList::cElement * operand_9165 = NULL ;
      while (((operand_9165 = enumerator_9165.nextObject ()))) {
        macroValidPointer (operand_9165) ;
        GGS_syntaxInstructionList  var_cas_syntaxInstructionList ;
        ::routine_buildSyntaxInstructionList (inLexique,  operand_9165->mSyntaxInstructionList,  var_cas_syntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (204)) ;
        var_cas_selectBranchList.addAssign_operation (var_cas_syntaxInstructionList) ;
      }
    }
    GGS_selectInstruction  var_cas_si ;
    var_cas_si = GGS_selectInstruction ::constructor_new (inLexique, operand_9022->mSelectInstructionLocation, var_cas_selectBranchList COMMA_HERE) ;
    var_cas_ioSyntaxInstructionList.addAssign_operation (var_cas_si) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@parseDoInstruction.buildSyntaxInstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__parseDoInstruction__buildSyntaxInstructionList (C_Compiler & inLexique,
                                const cPtr_parseDoInstruction * operand_9644,
                                GGS_syntaxInstructionList  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9644 != NULL) {
    GGS_syntaxInstructionList  var_cas_instructionList ;
    const GGS_listOfSyntaxInstructionList  temp_9768 = operand_9644->mParseDoBranchList ;
    if (temp_9768.isBuilt ()) {
      temp_9768 (HERE)->method_first (inLexique, var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (220)) ;
    }
    {
      GGS_syntaxInstructionList::cEnumerator enumerator_9814 (var_cas_instructionList, true) ;
      const GGS_syntaxInstructionList::cElement * operand_9814 = NULL ;
      while (((operand_9814 = enumerator_9814.nextObject ()))) {
        macroValidPointer (operand_9814) ;
        const GGS_syntaxInstruction  temp_9862 = operand_9814->mInstruction ;
        if (temp_9862.isBuilt ()) {
          typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList method = findCategoryMethod__syntaxInstruction__buildSyntaxInstructionList (temp_9862.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_9862 (HERE), var_cas_ioSyntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (222)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@blockInstruction.buildSyntaxInstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__blockInstruction__buildSyntaxInstructionList (C_Compiler & inLexique,
                                const cPtr_blockInstruction * operand_10061,
                                GGS_syntaxInstructionList  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10061 != NULL) {
    {
      GGS_syntaxInstructionList::cEnumerator enumerator_10141 (operand_10061->mInstructionList, true) ;
      const GGS_syntaxInstructionList::cElement * operand_10141 = NULL ;
      while (((operand_10141 = enumerator_10141.nextObject ()))) {
        macroValidPointer (operand_10141) ;
        const GGS_syntaxInstruction  temp_10189 = operand_10141->mInstruction ;
        if (temp_10189.isBuilt ()) {
          typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList method = findCategoryMethod__syntaxInstruction__buildSyntaxInstructionList (temp_10189.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_10189 (HERE), var_cas_ioSyntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (232)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Virtual Table for category reader '@syntaxInstruction.htmlListing'     *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryReader__syntaxInstruction__htmlListing> gDispatchTableForReader__syntaxInstruction__htmlListing ;

//---------------------------------------------------------------------------*

void
enterCategoryReader__syntaxInstruction__htmlListing (typeCategoryReader__syntaxInstruction__htmlListing inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForReader__syntaxInstruction__htmlListing.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

static GGS_string
category_reader__syntaxInstruction_defaultReader (C_Compiler &,
                                const cPtr_syntaxInstruction *
                                COMMA_UNUSED_LOCATION_ARGS) {
  return GGS_string () ;
}

//---------------------------------------------------------------------------*

typeCategoryReader__syntaxInstruction__htmlListing
findCategoryReader__syntaxInstruction__htmlListing (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryReader__syntaxInstruction__htmlListing result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForReader__syntaxInstruction__htmlListing.count ()) {
    result = gDispatchTableForReader__syntaxInstruction__htmlListing (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryReader__syntaxInstruction__htmlListing (superClassPtr) ;
      gDispatchTableForReader__syntaxInstruction__htmlListing.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  if (NULL == result) {
    result = category_reader__syntaxInstruction_defaultReader ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category reader '@semanticInstruction.htmlListing'             *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__semanticInstruction__htmlListing (C_Compiler &,
                                const cPtr_semanticInstruction * operand_10685
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outListing ;
  if (operand_10685 != NULL) {
    var_cas_outListing = GGS_string ("") ;
  }
  return var_cas_outListing ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category reader '@nonterminalCallInstruction.htmlListing'          *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__nonterminalCallInstruction__htmlListing (C_Compiler &,
                                const cPtr_nonterminalCallInstruction * operand_10881
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outListing ;
  if (operand_10881 != NULL) {
    var_cas_outListing = ((GGS_string ("<span class=\"galgas_nonterminal\">&lt;")).operator_concat (operand_10881->mNonterminalName)).operator_concat (GGS_string ("&gt;</span>")) ;
  }
  return var_cas_outListing ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category reader '@terminalCheckInstruction.htmlListing'           *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__terminalCheckInstruction__htmlListing (C_Compiler & inLexique,
                                const cPtr_terminalCheckInstruction * operand_11149
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outListing ;
  if (operand_11149 != NULL) {
    var_cas_outListing = ((GGS_string ("<span class=\"galgas_terminal\">$")).operator_concat (operand_11149->mTerminalName.ggs_string ().reader_HTMLRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (265)))).operator_concat (GGS_string ("$</span>")) ;
  }
  return var_cas_outListing ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category reader '@repeatInstruction.htmlListing'              *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__repeatInstruction__htmlListing (C_Compiler & inLexique,
                                const cPtr_repeatInstruction * operand_11419
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outListing ;
  if (operand_11419 != NULL) {
    var_cas_outListing = ((GGS_string ("<span class=\"galgas_structure\">")).operator_concat (GGS_string ("<span class=\"galgas_keyword\">repeat</span>"))).operator_concat (GGS_string ("<span class=\"within_galgas_structure\">")) ;
    {
      GGS_syntaxInstructionList::cEnumerator enumerator_11632 (operand_11419->mRepeatedInstructionList, true) ;
      const GGS_syntaxInstructionList::cElement * operand_11632 = NULL ;
      while (((operand_11632 = enumerator_11632.nextObject ()))) {
        macroValidPointer (operand_11632) ;
        var_cas_outListing.dotAssign_operation ((findCategoryReader__syntaxInstruction__htmlListing (operand_11632->mInstruction (HERE)->galgasRTTI ()) (inLexique, operand_11632->mInstruction.getPtr () COMMA_SOURCE_FILE_AT_LINE (277)))) ;
      }
    }
    var_cas_outListing.appendCString ("</span>") ;
    {
      GGS_listOfSyntaxInstructionList::cEnumerator enumerator_11754 (operand_11419->mRepeatBranchList, true) ;
      const GGS_listOfSyntaxInstructionList::cElement * operand_11754 = NULL ;
      while (((operand_11754 = enumerator_11754.nextObject ()))) {
        macroValidPointer (operand_11754) ;
        var_cas_outListing.appendCString ("<span class=\"galgas_keyword\">while</span>") ;
        var_cas_outListing.appendCString ("<span class=\"within_galgas_structure\">") ;
        {
          GGS_syntaxInstructionList::cEnumerator enumerator_11921 (operand_11754->mSyntaxInstructionList, true) ;
          const GGS_syntaxInstructionList::cElement * operand_11921 = NULL ;
          while (((operand_11921 = enumerator_11921.nextObject ()))) {
            macroValidPointer (operand_11921) ;
            var_cas_outListing.dotAssign_operation ((findCategoryReader__syntaxInstruction__htmlListing (operand_11921->mInstruction (HERE)->galgasRTTI ()) (inLexique, operand_11921->mInstruction.getPtr () COMMA_SOURCE_FILE_AT_LINE (284)))) ;
          }
        }
        var_cas_outListing.appendCString ("</span>") ;
      }
    }
    var_cas_outListing.appendCString ("<span class=\"galgas_keyword\">end repeat</span>"
    "</span>") ;
  }
  return var_cas_outListing ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category reader '@selectInstruction.htmlListing'              *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__selectInstruction__htmlListing (C_Compiler & inLexique,
                                const cPtr_selectInstruction * operand_12260
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outListing ;
  if (operand_12260 != NULL) {
    var_cas_outListing = (GGS_string ("<span class=\"galgas_structure\">")).operator_concat (GGS_string ("<span class=\"galgas_keyword\">select</span>")) ;
    {
      GGS_listOfSyntaxInstructionList::cEnumerator enumerator_12419 (operand_12260->mSelectBranchList, true) ;
      const GGS_listOfSyntaxInstructionList::cElement * operand_12419 = enumerator_12419.nextObject () ;
      if ((operand_12419 != NULL)) {
        bool _foreach_loop_12419 ;
        do{
          macroValidPointer (operand_12419) ;
          var_cas_outListing.appendCString ("<span class=\"within_galgas_structure\">") ;
          {
            GGS_syntaxInstructionList::cEnumerator enumerator_12522 (operand_12419->mSyntaxInstructionList, true) ;
            const GGS_syntaxInstructionList::cElement * operand_12522 = NULL ;
            while (((operand_12522 = enumerator_12522.nextObject ()))) {
              macroValidPointer (operand_12522) ;
              var_cas_outListing.dotAssign_operation ((findCategoryReader__syntaxInstruction__htmlListing (operand_12522->mInstruction (HERE)->galgasRTTI ()) (inLexique, operand_12522->mInstruction.getPtr () COMMA_SOURCE_FILE_AT_LINE (303)))) ;
            }
          }
          var_cas_outListing.appendCString ("</span>") ;
          operand_12419 = enumerator_12419.nextObject () ;
          _foreach_loop_12419 = ((operand_12419 != NULL)) ;
          if (_foreach_loop_12419) {
            var_cas_outListing.appendCString ("<span class=\"galgas_keyword\">or</span>") ;
          }
        }while (_foreach_loop_12419) ;
      }
    }
    var_cas_outListing.appendCString ("<span class=\"galgas_keyword\">end select</span>"
    "</span>") ;
  }
  return var_cas_outListing ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category reader '@parseDoInstruction.htmlListing'              *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__parseDoInstruction__htmlListing (C_Compiler &,
                                const cPtr_parseDoInstruction * operand_12935
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outListing ;
  if (operand_12935 != NULL) {
    var_cas_outListing = GGS_string ("[Parse do]") ;
  }
  return var_cas_outListing ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category reader '@blockInstruction.htmlListing'               *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__blockInstruction__htmlListing (C_Compiler &,
                                const cPtr_blockInstruction * operand_13131
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outListing ;
  if (operand_13131 != NULL) {
    var_cas_outListing = GGS_string ("[block]") ;
  }
  return var_cas_outListing ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of wrapper 'grammarGenerationTemplates'           *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_grammarGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_grammarGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_grammarGenerationTemplates = {
  "",
  0,
  gWrapperAllFiles_grammarGenerationTemplates_0,
  0,
  gWrapperAllDirectories_grammarGenerationTemplates_0
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//       'html' template of 'grammarGenerationTemplates' filewrapper         *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_grammarGenerationTemplates_html (C_Compiler & inLexique,
                                const GGS_string& var_cas_GRAMMAR_NAME,
                                const GGS_syntaxRuleListForGrammar & var_cas_SYNTAX_RULE_LIST,
                                const GGS_syntaxRuleListForGrammar & var_cas_PURE_SYNTAX_RULE_LIST) {
  C_String result ;
  const bool isBuilt = var_cas_GRAMMAR_NAME.isBuilt ()
    && var_cas_SYNTAX_RULE_LIST.isBuilt ()
    && var_cas_PURE_SYNTAX_RULE_LIST.isBuilt () ;
  if (isBuilt) {
    result << "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n"
      "<html><head>\n"
      "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n"
      "<title>'" ;
    result << var_cas_GRAMMAR_NAME ;
    result << "' grammar</title>\n"
      "<style type=\"text/css\">body {\n"
      "  font-family: Helvetica, sans-serif ;\n"
      "  font-size: small ;\n"
      "}\n"
      "\n"
      "h1 {\n"
      "  text-align: center ;\n"
      "}\n"
      "\n"
      "a.header_link {\n"
      "  border: 1px solid #999999 ;\n"
      "  padding: 4px ;\n"
      "  background-color: #FFFFCC ;\n"
      "  font-weight: bold ;\n"
      "}\n"
      "\n"
      "a:visited, a:link, a:active{\n"
      "  color: blue ;\n"
      "  text-decoration: underline ;\n"
      "}\n"
      "\n"
      "a:hover {\n"
      "  color:green ;\n"
      "  background-color: #FFFF00 ;\n"
      "  text-decoration: none ;\n"
      "}\n"
      "\n"
      "table.title {\n"
      "  width: 100% ;\n"
      "  border: 1px solid #666666 ;\n"
      "  background-color: yellow ;\n"
      "  font-weight: bold ;\n"
      "  text-align: center ;\n"
      "}\n"
      "\n"
      "table.result {\n"
      "  border: 2px solid #666666 ;\n"
      "  border-collapse: collapse ;\n"
      "}\n"
      "\n"
      "td.result_title {\n"
      "  font-weight: bold ;\n"
      "  text-align: center ;\n"
      "  border-top: 2px solid #666666 ;\n"
      "}\n"
      "\n"
      "tr.result_line {\n"
      "  background-color: #EEEEEE ;\n"
      "  border-top: 1px solid #999999 ;\n"
      "}\n"
      "td.result_line {\n"
      "  border-right: 1px solid #999999 ;\n"
      "}\n"
      "\n"
      "span.error {\n"
      "  font-weight: bold ;\n"
      "  color: red ;\n"
      "}\n"
      "\n"
      "span.warning {\n"
      "  font-weight: bold ;\n"
      "  color: #FF9966 ;\n"
      "}\n"
      "\n"
      "span.success {\n"
      "  font-weight: bold ;\n"
      "  color: green ;\n"
      "}\n"
      "\n"
      "span.list {\n"
      "  display: block ;\n"
      "  line-height: 100% ;\n"
      "}\n"
      "\n"
      "span.galgas_structure {\n"
      "  display: block ;\n"
      "}\n"
      "\n"
      "span.within_galgas_structure {\n"
      "  display: block ;\n"
      "  padding-left: 1em ;\n"
      "  margin-left: 1em ;\n"
      "  border-left: 1px dotted black ;\n"
      "}\n"
      "\n"
      "span.galgas_keyword {\n"
      "  display: block ;\n"
      "  font-weight: bold ;\n"
      "  color: blue ;\n"
      "}\n"
      "\n"
      "span.galgas_terminal {\n"
      "  display: block ;\n"
      "}\n"
      "\n"
      "span.galgas_nonterminal {\n"
      "  display: block ;\n"
      "}\n"
      "</style></head><body><div>\n"
      "<h1>'" ;
    result << var_cas_GRAMMAR_NAME ;
    result << "' grammar</h1><p><a class=\"header_link\" href=\"#pure_bnf\">Pure BNF productions</a></p><p><a class=\"header_link\" href=\"#vocabulary\">Vocabulary</a></p><p><a class=\"header_link\" href=\"#identical_productions\">Identical productions</a></p><p><a cl"
      "ass=\"header_link\" href=\"#useful_symbols\">Useful symbols</a></p><p><a class=\"header_link\" href=\"#empty_strings\">Empty string derivations</a></p><p><a class=\"header_link\" href=\"#first_sets\">First sets</a></p><p><a class=\"header_link\" href=\"#fo"
      "llow_by_empty\">Follow by empty</a></p><p><a class=\"header_link\" href=\"#grammar\">Grammar analysis</a></p><table class=\"title\"><tr><td>\n"
      "Original grammar\n"
      "</td></tr></table>\n"
      "<p>The original grammar has " ;
    result << var_cas_SYNTAX_RULE_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (107)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (107)) ;
    result << " productions.</p>\n"
      "<table class=\"result\">\n" ;
    GGS_syntaxRuleListForGrammar::cEnumerator enumerator_2487 (var_cas_SYNTAX_RULE_LIST, true) ;
    const GGS_syntaxRuleListForGrammar::cElement * operand_2487 = NULL ;
    while (((operand_2487 = enumerator_2487.nextObject ()))) {
      macroValidPointer (operand_2487) ;
      result << "<tr class=\"result_line\"><td class=\"result_line\">rule <code>&lt;" ;
      result << operand_2487->mLeftNonTerminal.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (111)) ;
      result << "&gt;</code><br>" ;
      result << operand_2487->mLeftNonTerminal.reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (111)) ;
      result << "</td><td><code>" ;
      GGS_syntaxInstructionList::cEnumerator enumerator_2711 (operand_2487->mSyntaxInstructionList, true) ;
      const GGS_syntaxInstructionList::cElement * operand_2711 = NULL ;
      while (((operand_2711 = enumerator_2711.nextObject ()))) {
        macroValidPointer (operand_2711) ;
        result << (findCategoryReader__syntaxInstruction__htmlListing (operand_2711->mInstruction (HERE)->galgasRTTI ()) (inLexique, operand_2711->mInstruction.getPtr () COMMA_SOURCE_FILE_AT_LINE (114))) ;
      }
      result << "</code></td></tr>" ;
    }
    result << "\n"
      "</table>\n"
      "<p></p>\n"
      "<table class=\"title\">\n"
      "<tr><td>Pure BNF productions list</td></tr>\n"
      "</table>\n"
      "<p><a name=\"pure_bnf\"></a>Listing of the " ;
    result << var_cas_PURE_SYNTAX_RULE_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (125)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (125)) ;
    result << " BNF productions :</p>\n"
      "<table class=\"result\">\n" ;
    GGS_syntaxRuleListForGrammar::cEnumerator enumerator_3060 (var_cas_PURE_SYNTAX_RULE_LIST, true) ;
    const GGS_syntaxRuleListForGrammar::cElement * operand_3060 = NULL ;
    GGS_uint var_cas_index (true, 0) ;
    while (((operand_3060 = enumerator_3060.nextObject ()))) {
      macroValidPointer (operand_3060) ;
      result << "<tr class=\"result_line\"><td class=\"result_line\">" ;
      result << var_cas_index.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (129)) ;
      result << "</td><td class=\"result_line\">rule <code>&lt;" ;
      result << operand_3060->mLeftNonTerminal.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (130)) ;
      result << "&gt;</code><br>" ;
      result << operand_3060->mLeftNonTerminal.reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (130)) ;
      result << "</td><td><code>" ;
      GGS_syntaxInstructionList::cEnumerator enumerator_3348 (operand_3060->mSyntaxInstructionList, true) ;
      const GGS_syntaxInstructionList::cElement * operand_3348 = NULL ;
      while (((operand_3348 = enumerator_3348.nextObject ()))) {
        macroValidPointer (operand_3348) ;
        result << (findCategoryReader__syntaxInstruction__htmlListing (operand_3348->mInstruction (HERE)->galgasRTTI ()) (inLexique, operand_3348->mInstruction.getPtr () COMMA_SOURCE_FILE_AT_LINE (133))) ;
      }
      result << "</code></td></tr>" ;
      var_cas_index.increment_operation (inLexique COMMA_HERE) ;
    }
    result << "\n"
      "</table>\n"
      "\n"
      "<p><a name=\"vocabulary\"></a></p><table class=\"result\"><tr><td class=\"result_title\"colspan=\"2\">Vocabulary</td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">0</td><td><code>$identifier$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">1</td><td><code>$abstract$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">2</td><td><code>$after$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">3</td><td><code>$before$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">4</td><td><code>$between$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">5</td><td><code>$block$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">6</td><td><code>$cast$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">7</td><td><code>$class$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">8</td><td><code>$compile$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">9</td><td><code>$const$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">10</td><td><code>$constructor$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">11</td><td><code>$default$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">12</td><td><code>$description$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">13</td><td><code>$dependency$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">14</td><td><code>$do$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">15</td><td><code>$domain$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">16</td><td><code>$drop$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">17</td><td><code>$else$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">18</td><td><code>$elsif$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">19</td><td><code>$end$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">20</td><td><code>$enum$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">21</td><td><code>$error$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">22</td><td><code>$extends$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">23</td><td><code>$extern$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">24</td><td><code>$extract$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">25</td><td><code>$false$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">26</td><td><code>$feature$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">27</td><td><code>$filewrapper$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">28</td><td><code>$foreach$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">29</td><td><code>$function$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">30</td><td><code>$grammar$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">31</td><td><code>$gui$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">32</td><td><code>$here$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">33</td><td><code>$if$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">34</td><td><code>$import$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">35</td><td><code>$import__$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">36</td><td><code>$in$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">37</td><td><code>$insert$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">38</td><td><code>$label$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">39</td><td><code>$lazy$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">40</td><td><code>$lexique$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">41</td><td><code>$list$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">42</td><td><code>$listmap$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">43</td><td><code>$log$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">44</td><td><code>$loop$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">45</td><td><code>$map$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">46</td><td><code>$mapindex$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">47</td><td><code>$match$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">48</td><td><code>$message$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">49</td><td><code>$method$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">50</td><td><code>$mod$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">51</td><td><code>$modifier$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">52</td><td><code>$nonterminal$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">53</td><td><code>$not$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">54</td><td><code>$on$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">55</td><td><code>$operator$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">56</td><td><code>$option$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">57</td><td><code>$or$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">58</td><td><code>$override$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">59</td><td><code>$parse$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">60</td><td><code>$project$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">61</td><td><code>$program$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">62</td><td><code>$reader$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">63</td><td><code>$remove$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">64</td><td><code>$replace$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">65</td><td><code>$repeat$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">66</td><td><code>$rewind$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">67</td><td><code>$root$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">68</td><td><code>$routine$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">69</td><td><code>$rule$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">70</td><td><code>$search$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">71</td><td><code>$select$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">72</td><td><code>$self$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">73</td><td><code>$semantics$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">74</td><td><code>$send$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">75</td><td><code>$sortedlist$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">76</td><td><code>$state$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">77</td><td><code>$struct$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">78</td><td><code>$style$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">79</td><td><code>$switch$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">80</td><td><code>$syntax$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">81</td><td><code>$tag$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">82</td><td><code>$template$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">83</td><td><code>$then$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">84</td><td><code>$true$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">85</td><td><code>$unused$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">86</td><td><code>$warning$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">87</td><td><code>$when$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">88</td><td><code>$while$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">89</td><td><code>$with$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">90</td><td><code>$literal_double$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">91</td><td><code>$unsigned_literal_integer$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">92</td><td><code>$signed_literal_integer$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">93</td><td><code>$unsigned_literal_integer64$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">94</td><td><code>$signed_literal_integer64$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">95</td><td><code>$.$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">96</td><td><code>$.=$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">97</td><td><code>$...$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">98</td><td><code>$type_name$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">99</td><td><code>$literal_char$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">100</td><td><code>$terminal$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">101</td><td><code>$*$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">102</td><td><code>$|$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">103</td><td><code>$,$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">104</td><td><code>$+$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">105</td><td><code>$--$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">106</td><td><code>$::$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">107</td><td><code>$>$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">108</td><td><code>$;$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">109</td><td><code>$:$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">110</td><td><code>$-$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">111</td><td><code>$($</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">112</td><td><code>$)$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">113</td><td><code>$->$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">114</td><td><code>$\?$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">115</td><td><code>$==$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">116</td><td><code>$\?\?$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">117</td><td><code>$!$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">118</td><td><code>$:=$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">119</td><td><code>$++$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">120</td><td><code>$[$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">121</td><td><code>$]$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">122</td><td><code>$+=$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">123</td><td><code>$\?!$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">124</td><td><code>$!\?$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">125</td><td><code>$/$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">126</td><td><code>$!=$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">127</td><td><code>$>=$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">128</td><td><code>$&$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">129</td><td><code>${$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">130</td><td><code>$}$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">131</td><td><code>$-=$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">132</td><td><code>$^$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">133</td><td><code>$>>$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">134</td><td><code>$~$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">135</td><td><code>$<-$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">136</td><td><code>$<$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">137</td><td><code>$<->$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">138</td><td><code>$<=$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">139</td><td><code>$<<$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">140</td><td><code>$non_terminal_symbol$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">141</td><td><code>$literal_string$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">142</td><td><code>$comment$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">143</td><td><code>$$</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">144</td><td><code>&lt;extern_routine_or_function_declaration&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">145</td><td><code>&lt;function_call_or_attribute&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">146</td><td><code>&lt;lexical_attribute_declaration&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">147</td><td><code>&lt;lexical_explicit_rule&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">148</td><td><code>&lt;lexical_expression&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">149</td><td><code>&lt;lexical_factor&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">150</td><td><code>&lt;lexical_implicit_rule&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">151</td><td><code>&lt;lexical_instruction&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">152</td><td><code>&lt;lexical_list_declaration&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">153</td><td><code>&lt;lexical_list_entry&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">154</td><td><code>&lt;lexical_message_declaration&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">155</td><td><code>&lt;lexical_output_effective_argument&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">156</td><td><code>&lt;lexical_send_instruction&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">157</td><td><code>&lt;lexical_term&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">158</td><td><code>&lt;lexique_component_start_symbol&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">159</td><td><code>&lt;repeat_while_branch&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">160</td><td><code>&lt;style_declaration&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">161</td><td><code>&lt;template_delimitor&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">162</td><td><code>&lt;template_replacement&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">163</td><td><code>&lt;terminal_declaration&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">164</td><td><code>&lt;select_lexiqueModelBuilder_0&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">165</td><td><code>&lt;select_repeat_lexiqueModelBuilder_1&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">166</td><td><code>&lt;select_lexiqueModelBuilder_2&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">167</td><td><code>&lt;select_lexiqueModelBuilder_3&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">168</td><td><code>&lt;select_repeat_lexiqueModelBuilder_4&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">169</td><td><code>&lt;select_lexiqueModelBuilder_5&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">170</td><td><code>&lt;select_repeat_lexiqueModelBuilder_6&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">171</td><td><code>&lt;select_repeat_lexiqueModelBuilder_7&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">172</td><td><code>&lt;select_lexiqueModelBuilder_8&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">173</td><td><code>&lt;select_repeat_lexiqueModelBuilder_9&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">174</td><td><code>&lt;select_repeat_lexiqueModelBuilder_10&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">175</td><td><code>&lt;select_repeat_lexiqueModelBuilder_11&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">176</td><td><code>&lt;select_repeat_lexiqueModelBuilder_12&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">177</td><td><code>&lt;select_repeat_lexiqueModelBuilder_13&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">178</td><td><code>&lt;select_repeat_lexiqueModelBuilder_14&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">179</td><td><code>&lt;select_repeat_lexiqueModelBuilder_15&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">180</td><td><code>&lt;select_lexiqueModelBuilder_16&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">181</td><td><code>&lt;select_repeat_lexiqueModelBuilder_17&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">182</td><td><code>&lt;select_repeat_lexiqueModelBuilder_18&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">183</td><td><code>&lt;select_repeat_lexiqueModelBuilder_19&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">184</td><td><code>&lt;select_lexiqueModelBuilder_20&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">185</td><td><code>&lt;select_repeat_lexiqueModelBuilder_21&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">186</td><td><code>&lt;select_lexiqueModelBuilder_22&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">187</td><td><code>&lt;select_repeat_lexiqueModelBuilder_23&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">188</td><td><code>&lt;select_lexiqueModelBuilder_24&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">189</td><td><code>&lt;select_lexiqueModelBuilder_25&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">190</td><td><code>&lt;select_repeat_lexiqueModelBuilder_26&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">191</td><td><code>&lt;select_lexiqueModelBuilder_27&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">192</td><td><code>&lt;select_lexiqueModelBuilder_28&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">193</td><td><code>&lt;select_repeat_lexiqueModelBuilder_29&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">194</td><td><code>&lt;select_lexiqueModelBuilder_30&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">195</td><td><code>&lt;select_repeat_lexiqueModelBuilder_31&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">196</td><td><code>&lt;select_lexiqueModelBuilder_32&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">197</td><td><code>&lt;select_lexiqueModelBuilder_33&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">198</td><td><code>&lt;select_repeat_lexiqueModelBuilder_34&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">199</td><td><code>&lt;select_repeat_lexiqueModelBuilder_35&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">200</td><td><code>&lt;&gt;</code></td></tr>\n"
      "</table><p><a name=\"identical_productions\"></a></p><table class=\"title\"><tr><td>\n"
      "Step 2 : searching for identical productions\n"
      "</td></tr></table>\n"
      "<p><span class=\"success\">Ok : all productions are different.\n"
      "</span></p>For information :\n"
      "<ul><li>143 terminal symbols, numbered from 0 to 142 ;</li>\n"
      "<li> the 'empty string' symbol '$$' is numbered 143 ;</li>\n"
      "<li>57 nonterminal symbols in the pure BNF grammar, numbered from 144 to 200 ;</li>\n"
      "<li>whole vocabulary : 201 elements, 8 bits for BDDs.</li>\n"
      "</ul>\n"
      "<table class=\"title\"><tr><td>\n"
      "Useful terminal and nonterminal symbols\n"
      "</td></tr></table>\n"
      "<p><a name=\"useful_symbols\"></a>Calculus completed in 10 iterations.\n"
      "</p><p><span class=\"success\">All terminal and nonterminal symbols are useful.\n"
      "\n"
      "</span></p><table class=\"title\"><tr><td>\n"
      "Searching for nonterminal symbols deriving in empty string\n"
      "</td></tr></table>\n"
      "<p><a name=\"empty_strings\"></a>32 nonterminal symbols have a empty production :\n"
      "</p><table class=\"result\"><tr class=\"result_line\"><td class=\"result_line\">0</td><td><code>&lt;function_call_or_attribute&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">1</td><td><code>&lt;select_lexiqueModelBuilder_0&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">2</td><td><code>&lt;select_repeat_lexiqueModelBuilder_1&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">3</td><td><code>&lt;select_lexiqueModelBuilder_3&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">4</td><td><code>&lt;select_repeat_lexiqueModelBuilder_4&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">5</td><td><code>&lt;select_repeat_lexiqueModelBuilder_6&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">6</td><td><code>&lt;select_repeat_lexiqueModelBuilder_7&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">7</td><td><code>&lt;select_repeat_lexiqueModelBuilder_9&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">8</td><td><code>&lt;select_repeat_lexiqueModelBuilder_10&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">9</td><td><code>&lt;select_repeat_lexiqueModelBuilder_11&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">10</td><td><code>&lt;select_repeat_lexiqueModelBuilder_12&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">11</td><td><code>&lt;select_repeat_lexiqueModelBuilder_13&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">12</td><td><code>&lt;select_repeat_lexiqueModelBuilder_14&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">13</td><td><code>&lt;select_repeat_lexiqueModelBuilder_15&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">14</td><td><code>&lt;select_lexiqueModelBuilder_16&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">15</td><td><code>&lt;select_repeat_lexiqueModelBuilder_17&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">16</td><td><code>&lt;select_repeat_lexiqueModelBuilder_18&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">17</td><td><code>&lt;select_repeat_lexiqueModelBuilder_19&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">18</td><td><code>&lt;select_lexiqueModelBuilder_20&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">19</td><td><code>&lt;select_repeat_lexiqueModelBuilder_21&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">20</td><td><code>&lt;select_lexiqueModelBuilder_22&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">21</td><td><code>&lt;select_repeat_lexiqueModelBuilder_23&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">22</td><td><code>&lt;select_lexiqueModelBuilder_24&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">23</td><td><code>&lt;select_lexiqueModelBuilder_25&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">24</td><td><code>&lt;select_repeat_lexiqueModelBuilder_26&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">25</td><td><code>&lt;select_lexiqueModelBuilder_27&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">26</td><td><code>&lt;select_lexiqueModelBuilder_28&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">27</td><td><code>&lt;select_repeat_lexiqueModelBuilder_29&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">28</td><td><code>&lt;select_repeat_lexiqueModelBuilder_31&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">29</td><td><code>&lt;select_lexiqueModelBuilder_33&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">30</td><td><code>&lt;select_repeat_lexiqueModelBuilder_34&gt;</code></td></tr>\n"
      "<tr class=\"result_line\"><td class=\"result_line\">31</td><td><code>&lt;select_repeat_lexiqueModelBuilder_35&gt;</code></td></tr>\n"
      "</table><p>Nonterminal symbols deriving indirectly in empty string : calculus in 2 iterations.\n"
      "</p><p>No more than those deriving directly to the empty string.\n"
      "</p><p><a name=\"first_sets\"></a></p><table class=\"title\"><tr><td>\n"
      "FIRST set\n"
      "</td></tr></table>\n"
      "<p>Calculus completed in 5 iterations, 179 values ;\n"
      "'$$' means the nonterminal can be derived to empty string (see step 4).\n"
      "</p><table class=\"result\"><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;extern_routine_or_function_declaration&gt;</code></td><td><code> $extern$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;function"
      "_call_or_attribute&gt;</code></td><td><code> $($ $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_attribute_declaration&gt;</code></td><td><code> $type_name$</code></td></tr><tr class=\"result_line\"><td cla"
      "ss=\"result_line\"><code>&lt;lexical_explicit_rule&gt;</code></td><td><code> $identifier$ $literal_char$ $~$ $literal_string$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_expression&gt;</code></td><td><code"
      "> $identifier$ $literal_char$ $~$ $literal_string$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_factor&gt;</code></td><td><code> $identifier$ $literal_char$ $~$ $literal_string$</code></td></tr><tr class="
      "\"result_line\"><td class=\"result_line\"><code>&lt;lexical_implicit_rule&gt;</code></td><td><code> $list$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_instruction&gt;</code></td><td><code> $identifier$ $drop"
      "$ $error$ $log$ $repeat$ $rewind$ $select$ $send$ $tag$ $warning$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_list_declaration&gt;</code></td><td><code> $list$</code></td></tr><tr class=\"result_line\"><td"
      " class=\"result_line\"><code>&lt;lexical_list_entry&gt;</code></td><td><code> $literal_string$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_message_declaration&gt;</code></td><td><code> $message$</code></td"
      "></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_output_effective_argument&gt;</code></td><td><code> $identifier$ $unsigned_literal_integer$ $literal_char$ $*$</code></td></tr><tr class=\"result_line\"><td class=\"result_"
      "line\"><code>&lt;lexical_send_instruction&gt;</code></td><td><code> $search$ $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_term&gt;</code></td><td><code> $identifier$ $literal_char$ $~$ $literal_"
      "string$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexique_component_start_symbol&gt;</code></td><td><code> $lexique$ $template$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;repeat_"
      "while_branch&gt;</code></td><td><code> $while$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;style_declaration&gt;</code></td><td><code> $style$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><cod"
      "e>&lt;template_delimitor&gt;</code></td><td><code> $template$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;template_replacement&gt;</code></td><td><code> $replace$</code></td></tr><tr class=\"result_line\"><td clas"
      "s=\"result_line\"><code>&lt;terminal_declaration&gt;</code></td><td><code> $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_0&gt;</code></td><td><code> $template$ $$</code></td></t"
      "r><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_1&gt;</code></td><td><code> $extern$ $list$ $message$ $replace$ $rule$ $style$ $template$ $type_name$ $terminal$ $$</code></td></tr><tr class=\"resu"
      "lt_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_2&gt;</code></td><td><code> $identifier$ $list$ $literal_char$ $~$ $literal_string$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqu"
      "eModelBuilder_3&gt;</code></td><td><code> $feature$ $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_4&gt;</code></td><td><code> $,$ $$</code></td></tr><tr class=\"result_line\"><td"
      " class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_5&gt;</code></td><td><code> $...$ $->$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_6&gt;</code></td><td><code> $identif"
      "ier$ $drop$ $error$ $log$ $repeat$ $rewind$ $select$ $send$ $tag$ $warning$ $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_7&gt;</code></td><td><code> $search$ $$</code></td></t"
      "r><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_8&gt;</code></td><td><code> $error$ $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder"
      "_9&gt;</code></td><td><code> $identifier$ $drop$ $error$ $log$ $repeat$ $rewind$ $select$ $send$ $tag$ $warning$ $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_10&gt;</code></td"
      "><td><code> $while$ $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_11&gt;</code></td><td><code> $identifier$ $drop$ $error$ $log$ $repeat$ $rewind$ $select$ $send$ $tag$ $warnin"
      "g$ $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_12&gt;</code></td><td><code> $when$ $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_"
      "lexiqueModelBuilder_13&gt;</code></td><td><code> $identifier$ $drop$ $error$ $log$ $repeat$ $rewind$ $select$ $send$ $tag$ $warning$ $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuild"
      "er_14&gt;</code></td><td><code> $identifier$ $drop$ $error$ $log$ $repeat$ $rewind$ $select$ $send$ $tag$ $warning$ $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_15&gt;</code><"
      "/td><td><code> $!$ $!\?$ $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_16&gt;</code></td><td><code> $error$ $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt"
      ";select_repeat_lexiqueModelBuilder_17&gt;</code></td><td><code> $,$ $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_18&gt;</code></td><td><code> $!$ $$</code></td></tr><tr class="
      "\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_19&gt;</code></td><td><code> $|$ $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_20&gt;</code></td><td>"
      "<code> $->$ $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_21&gt;</code></td><td><code> $!$ $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_l"
      "exiqueModelBuilder_22&gt;</code></td><td><code> $style$ $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_23&gt;</code></td><td><code> $,$ $$</code></td></tr><tr class=\"result_line"
      "\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_24&gt;</code></td><td><code> $feature$ $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_25&gt;</code></td><td><code> $->$ $"
      "$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_26&gt;</code></td><td><code> $!$ $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBu"
      "ilder_27&gt;</code></td><td><code> $style$ $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_28&gt;</code></td><td><code> $feature$ $$</code></td></tr><tr class=\"result_line\"><td class=\"r"
      "esult_line\"><code>&lt;select_repeat_lexiqueModelBuilder_29&gt;</code></td><td><code> $,$ $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_30&gt;</code></td><td><code> $function$ $routine"
      "$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_31&gt;</code></td><td><code> $\?$ $\?!$ $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueMo"
      "delBuilder_32&gt;</code></td><td><code> $\?$ $\?!$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_33&gt;</code></td><td><code> $error$ $$</code></td></tr><tr class=\"result_line\"><td class=\""
      "result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_34&gt;</code></td><td><code> $,$ $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_35&gt;</code></td><td><code> $\?$ $$</cod"
      "e></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;&gt;</code></td><td><code> $lexique$ $template$</code></td></tr></table><p>Every useful nonterminal should either have a non empty FIRST, either be derived to empty string"
      ", either both. In any way having none: it is an error.</p><p><span class=\"success\">All FIRST are correct.\n"
      "\n"
      "</span></p><table class=\"title\"><tr><td>\n"
      "Nonterminal symbol set followed by empty string\n"
      "</td></tr></table>\n"
      "<p><a name=\"follow_by_empty\"></a>Calculus completed in 2 iterations.\n"
      "</p><p>One nonterminal symbol (the start symbol) can be followed by the empty string.\n"
      "</p><table class=\"result\"><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexique_component_start_symbol&gt;</code></td></tr></table><p></p><table class=\"title\"><tr><td>\n"
      "Computing the FOLLOW sets\n"
      "</td></tr></table>\n"
      "<p>Calculus completed in 4 iterations, 364 values ;\n"
      "'$$' means the nonterminal symbol can be followed by empty string (see step 6) ;\n"
      "\n"
      "the followings of terminal symbols are given for information.\n"
      "</p><table class=\"result\"><tr class=\"result_line\"><td class=\"result_line\"><code>$identifier$</code></td><td><code> $default$ $error$ $feature$ $in$ $send$ $...$ $|$ $,$ $;$ $:$ $($ $)$ $->$ $\?$ $!$ $\?!$ $!\?$</code></td></tr><tr class=\"resul"
      "t_line\"><td class=\"result_line\"><code>$abstract$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$after$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>"
      "$before$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$between$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$block$</code></td><td><code></code></"
      "td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$cast$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$class$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class="
      "\"result_line\"><code>$compile$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$const$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$constructor$</code"
      "></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$default$</code></td><td><code> $identifier$ $drop$ $end$ $error$ $log$ $repeat$ $rewind$ $search$ $select$ $send$ $tag$ $warning$ $terminal$</code></td><"
      "/tr><tr class=\"result_line\"><td class=\"result_line\"><code>$description$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$dependency$</code></td><td><code></code></td></tr><tr class=\"result_line\"><t"
      "d class=\"result_line\"><code>$do$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$domain$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$drop$</code></"
      "td><td><code> $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$else$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$elsif$</code></td><td><code></code></td></tr><"
      "tr class=\"result_line\"><td class=\"result_line\"><code>$end$</code></td><td><code> $lexique$ $repeat$ $rule$ $select$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$enum$</code></td><td><code></code></td></tr><tr class="
      "\"result_line\"><td class=\"result_line\"><code>$error$</code></td><td><code> $identifier$ $message$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$extends$</code></td><td><code></code></td></tr><tr class=\"result_line\"><t"
      "d class=\"result_line\"><code>$extern$</code></td><td><code> $function$ $routine$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$extract$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_l"
      "ine\"><code>$false$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$feature$</code></td><td><code> $identifier$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$filewrapper$</"
      "code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$foreach$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$function$</code></td><td><code> $identifier$</c"
      "ode></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$grammar$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$gui$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td"
      " class=\"result_line\"><code>$here$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$if$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$import$</code></t"
      "d><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$import__$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$in$</code></td><td><code> $identifier$</code></td></tr"
      "><tr class=\"result_line\"><td class=\"result_line\"><code>$insert$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$label$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"resu"
      "lt_line\"><code>$lazy$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$lexique$</code></td><td><code> $identifier$ $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$list$</"
      "code></td><td><code> $identifier$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$listmap$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$log$</code></td><td><code> $;$</co"
      "de></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$loop$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$map$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td cla"
      "ss=\"result_line\"><code>$mapindex$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$match$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$message$</code"
      "></td><td><code> $identifier$ $literal_string$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$method$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$mod$</code></td><td><c"
      "ode></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$modifier$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$nonterminal$</code></td><td><code></code></td></tr><tr class=\""
      "result_line\"><td class=\"result_line\"><code>$not$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$on$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$op"
      "erator$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$option$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$or$</code></td><td><code></code></td></"
      "tr><tr class=\"result_line\"><td class=\"result_line\"><code>$override$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$parse$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\""
      "result_line\"><code>$project$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$program$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$reader$</code></t"
      "d><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$remove$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$replace$</code></td><td><code> $literal_string$</code></"
      "td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$repeat$</code></td><td><code> $identifier$ $drop$ $error$ $log$ $repeat$ $rewind$ $select$ $send$ $tag$ $warning$ $while$ $;$</code></td></tr><tr class=\"result_line\"><td class=\"r"
      "esult_line\"><code>$rewind$</code></td><td><code> $identifier$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$root$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$routine$<"
      "/code></td><td><code> $identifier$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$rule$</code></td><td><code> $identifier$ $list$ $literal_char$ $;$ $~$ $literal_string$</code></td></tr><tr class=\"result_line\"><td cla"
      "ss=\"result_line\"><code>$search$</code></td><td><code> $identifier$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$select$</code></td><td><code> $when$ $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line"
      "\"><code>$self$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$semantics$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$send$</code></td><td><code> $"
      "search$ $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$sortedlist$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$state$</code></td><td><code></code></td></tr><"
      "tr class=\"result_line\"><td class=\"result_line\"><code>$struct$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$style$</code></td><td><code> $identifier$</code></td></tr><tr class=\"result_line\"><td "
      "class=\"result_line\"><code>$switch$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$syntax$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$tag$</code><"
      "/td><td><code> $identifier$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$template$</code></td><td><code> $lexique$ $literal_string$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$then$</code>"
      "</td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$true$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$unused$</code></td><td><code></code></td></tr><tr class"
      "=\"result_line\"><td class=\"result_line\"><code>$warning$</code></td><td><code> $identifier$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$when$</code></td><td><code> $identifier$ $literal_char$ $~$ $literal_string$</co"
      "de></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$while$</code></td><td><code> $identifier$ $literal_char$ $~$ $literal_string$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$with$</code></td><td><co"
      "de></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$literal_double$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$unsigned_literal_integer$</code></td><td><code> $error$ $"
      ";$ $)$ $!$ $!\?$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$signed_literal_integer$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$unsigned_literal_integer64$</code></t"
      "d><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$signed_literal_integer64$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$.$</code></td><td><code></code></td></"
      "tr><tr class=\"result_line\"><td class=\"result_line\"><code>$.=$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$...$</code></td><td><code> $literal_string$</code></td></tr><tr class=\"result_line\"><t"
      "d class=\"result_line\"><code>$type_name$</code></td><td><code> $identifier$ $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$literal_char$</code></td><td><code> $error$ $|$ $;$ $:$ $)$ $->$ $!$ $!\?$</code></td></tr><"
      "tr class=\"result_line\"><td class=\"result_line\"><code>$terminal$</code></td><td><code> $error$ $,$ $;$ $!$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$*$</code></td><td><code> $error$ $;$ $)$ $!$ $!\?$</code></td></t"
      "r><tr class=\"result_line\"><td class=\"result_line\"><code>$|$</code></td><td><code> $identifier$ $literal_char$ $~$ $literal_string$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$,$</code></td><td><code> $identifier$ $"
      "literal_string$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$+$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$--$</code></td><td><code></code></td></tr><tr class=\"resul"
      "t_line\"><td class=\"result_line\"><code>$::$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$>$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$;$</code>"
      "</td><td><code> $identifier$ $default$ $drop$ $end$ $error$ $extern$ $list$ $log$ $message$ $replace$ $repeat$ $rewind$ $rule$ $select$ $send$ $style$ $tag$ $template$ $warning$ $when$ $while$ $type_name$ $terminal$</code></td></tr><tr class"
      "=\"result_line\"><td class=\"result_line\"><code>$:$</code></td><td><code> $identifier$ $default$ $drop$ $end$ $error$ $extern$ $list$ $log$ $message$ $replace$ $repeat$ $rewind$ $rule$ $select$ $send$ $style$ $tag$ $template$ $warning$ $when$ $"
      "while$ $type_name$ $terminal$ $literal_string$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$-$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$($</code></td><td><code> $)"
      "$ $!$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$)$</code></td><td><code> $error$ $;$ $)$ $!$ $!\?$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$->$</code></td><td><code> $type_name$ $lite"
      "ral_char$ $terminal$ $literal_string$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$\?$</code></td><td><code> $type_name$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$==$</code></td><td><code"
      "></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$\?\?$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$!$</code></td><td><code> $identifier$ $unsigned_literal_integer$ $liter"
      "al_char$ $*$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$:=$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$++$</code></td><td><code></code></td></tr><tr class=\"result_"
      "line\"><td class=\"result_line\"><code>$[$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$]$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$+=$</code></"
      "td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$\?!$</code></td><td><code> $type_name$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$!\?$</code></td><td><code> $identifier$</code></"
      "td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$/$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$!=$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"resul"
      "t_line\"><code>$>=$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$&$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>${$</code></td><td><code></code></"
      "td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$}$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$-=$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"resul"
      "t_line\"><code>$^$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$>>$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$~$</code></td><td><code> $literal"
      "_string$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$<-$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$<$</code></td><td><code></code></td></tr><tr class=\"result_line\""
      "><td class=\"result_line\"><code>$<->$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$<=$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$<<$</code></td"
      "><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$non_terminal_symbol$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$literal_string$</code></td><td><code> $error"
      "$ $feature$ $style$ $...$ $|$ $,$ $;$ $:$ $->$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$comment$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;extern_routine_or_"
      "function_declaration&gt;</code></td><td><code> $end$ $extern$ $list$ $message$ $replace$ $rule$ $style$ $template$ $type_name$ $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;function_call_or_attribute&gt"
      ";</code></td><td><code> $error$ $;$ $)$ $!$ $!\?$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_attribute_declaration&gt;</code></td><td><code> $end$ $extern$ $list$ $message$ $replace$ $rule$ $style$ $temp"
      "late$ $type_name$ $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_explicit_rule&gt;</code></td><td><code> $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_expr"
      "ession&gt;</code></td><td><code> $:$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_factor&gt;</code></td><td><code> $|$ $:$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical"
      "_implicit_rule&gt;</code></td><td><code> $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_instruction&gt;</code></td><td><code> $identifier$ $default$ $drop$ $end$ $error$ $log$ $repeat$ $rewind$ $select$"
      " $send$ $tag$ $warning$ $when$ $while$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_list_declaration&gt;</code></td><td><code> $end$ $extern$ $list$ $message$ $replace$ $rule$ $style$ $template$ $type_nam"
      "e$ $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_list_entry&gt;</code></td><td><code> $,$ $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_message_declaratio"
      "n&gt;</code></td><td><code> $end$ $extern$ $list$ $message$ $replace$ $rule$ $style$ $template$ $type_name$ $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_output_effective_argument&gt;</code></td"
      "><td><code> $error$ $;$ $)$ $!$ $!\?$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_send_instruction&gt;</code></td><td><code> $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;l"
      "exical_term&gt;</code></td><td><code> $:$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexique_component_start_symbol&gt;</code></td><td><code> $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><"
      "code>&lt;repeat_while_branch&gt;</code></td><td><code> $end$ $while$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;style_declaration&gt;</code></td><td><code> $end$ $extern$ $list$ $message$ $replace$ $rule$ $styl"
      "e$ $template$ $type_name$ $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;template_delimitor&gt;</code></td><td><code> $end$ $extern$ $list$ $message$ $replace$ $rule$ $style$ $template$ $type_name$ $term"
      "inal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;template_replacement&gt;</code></td><td><code> $end$ $extern$ $list$ $message$ $replace$ $rule$ $style$ $template$ $type_name$ $terminal$</code></td></tr><tr cla"
      "ss=\"result_line\"><td class=\"result_line\"><code>&lt;terminal_declaration&gt;</code></td><td><code> $end$ $extern$ $list$ $message$ $replace$ $rule$ $style$ $template$ $type_name$ $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"r"
      "esult_line\"><code>&lt;select_lexiqueModelBuilder_0&gt;</code></td><td><code> $lexique$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_1&gt;</code></td><td><code> $end$</code></td><"
      "/tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_2&gt;</code></td><td><code> $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_3&gt;</code></td><t"
      "d><code> $...$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_4&gt;</code></td><td><code> $...$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lex"
      "iqueModelBuilder_5&gt;</code></td><td><code> $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_6&gt;</code></td><td><code> $end$</code></td></tr><tr class=\"result_line\"><td class="
      "\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_7&gt;</code></td><td><code> $error$ $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_8&gt;</code></td><td><code> $;$</co"
      "de></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_9&gt;</code></td><td><code> $while$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModel"
      "Builder_10&gt;</code></td><td><code> $end$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_11&gt;</code></td><td><code> $end$ $while$</code></td></tr><tr class=\"result_line\"><td cla"
      "ss=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_12&gt;</code></td><td><code> $default$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_13&gt;</code></td><td><code> $def"
      "ault$ $when$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_14&gt;</code></td><td><code> $end$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repe"
      "at_lexiqueModelBuilder_15&gt;</code></td><td><code> $error$ $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_16&gt;</code></td><td><code> $;$</code></td></tr><tr class=\"result_line\"><td"
      " class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_17&gt;</code></td><td><code> $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_18&gt;</code></td><td><code> $)$</c"
      "ode></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_19&gt;</code></td><td><code> $:$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_2"
      "0&gt;</code></td><td><code> $|$ $:$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_21&gt;</code></td><td><code> $error$</code></td></tr><tr class=\"result_line\"><td class=\"result_li"
      "ne\"><code>&lt;select_lexiqueModelBuilder_22&gt;</code></td><td><code> $:$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_23&gt;</code></td><td><code> $;$</code></td></tr><tr class="
      "\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_24&gt;</code></td><td><code> $,$ $;$ $->$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_25&gt;</code></td><td><"
      "code> $,$ $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_26&gt;</code></td><td><code> $error$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_l"
      "exiqueModelBuilder_27&gt;</code></td><td><code> $feature$ $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_28&gt;</code></td><td><code> $;$</code></td></tr><tr class=\"result_line\"><td c"
      "lass=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_29&gt;</code></td><td><code> $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_30&gt;</code></td><td><code> $end$ $extern$ "
      "$list$ $message$ $replace$ $rule$ $style$ $template$ $type_name$ $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_31&gt;</code></td><td><code> $error$ $;$</code></td></tr>"
      "<tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_32&gt;</code></td><td><code> $type_name$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_33&gt;</code><"
      "/td><td><code> $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_34&gt;</code></td><td><code> $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_"
      "repeat_lexiqueModelBuilder_35&gt;</code></td><td><code> $->$</code></td></tr></table><p>Every useful nonterminal symbol should: either have a non empty FOLLOW, either can be followed by the empty string, either both. In no way none of them :"
      " it is an error.</p><p><span class=\"success\">All FOLLOW are correct.</span></p><a name=\"grammar\"></a><table class=\"title\"><tr><td>\n"
      "Checking LL(1) condition\n"
      "</td></tr></table>\n"
      "<p>The FIRST of a production is :\n"
      " if the production is empty, the FOLLOW of the left nonterminal symbol ;\n"
      " if the production is not empty (e.g. g -&gt; x) :\n"
      "         -- the FIRST of x, and\n"
      "         -- if x est a nonterminal symbol deriving in the empty string, union the FOLLOW of x.\n"
      "\n"
      "Only are listed the nonterminal having more than one production (see step 2\n"
      "for inPureBNFproductions numbering) :\n"
      "\n"
      "</p><table class=\"result\"><tr><td class=\"result_title\" colspan=\"2\"><code>&lt;function_call_or_attribute&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_17\">17</a></td><td><code>$error$ $;$ $)$ $!$ $!\?$"
      " </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_18\">18</a></td><td><code>$($ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;lexical_factor&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_27\">27</a></td><td><code>$literal_string$ </code></td></tr><tr class=\"result_line\"><td "
      "class=\"result_line\"><a href=\"#pure_bnf_28\">28</a></td><td><code>$~$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_29\">29</a></td><td><code>$literal_char$ </code></td></tr><tr class=\"result_line\"><td clas"
      "s=\"result_line\"><a href=\"#pure_bnf_30\">30</a></td><td><code>$identifier$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;lexical_instruction&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_6\">6</a></td><td><code>$send$ </code></td></tr><tr class=\"result_line\"><td class=\""
      "result_line\"><a href=\"#pure_bnf_9\">9</a></td><td><code>$repeat$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_11\">11</a></td><td><code>$select$ </code></td></tr><tr class=\"result_line\"><td class=\"result_"
      "line\"><a href=\"#pure_bnf_12\">12</a></td><td><code>$identifier$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_19\">19</a></td><td><code>$error$ </code></td></tr><tr class=\"result_line\"><td class=\"result_li"
      "ne\"><a href=\"#pure_bnf_20\">20</a></td><td><code>$warning$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_21\">21</a></td><td><code>$drop$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a"
      " href=\"#pure_bnf_22\">22</a></td><td><code>$tag$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_23\">23</a></td><td><code>$rewind$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#"
      "pure_bnf_24\">24</a></td><td><code>$log$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;lexical_output_effective_argument&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_13\">13</a></td><td><code>$literal_char$ </code></td></tr><tr class=\""
      "result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_14\">14</a></td><td><code>$unsigned_literal_integer$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_15\">15</a></td><td><code>$*$ </code></td></tr><tr"
      " class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_16\">16</a></td><td><code>$identifier$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;lexical_send_instruction&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_7\">7</a></td><td><code>$terminal$ </code></td></tr><tr class=\"result_line\"><t"
      "d class=\"result_line\"><a href=\"#pure_bnf_8\">8</a></td><td><code>$search$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_0&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_37\">37</a></td><td><code>$template$ </code></td></tr><tr class=\"result_li"
      "ne\"><td class=\"result_line\"><a href=\"#pure_bnf_38\">38</a></td><td><code>$lexique$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_1&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_39\">39</a></td><td><code>$end$ </code></td></tr><tr class=\"result_"
      "line\"><td class=\"result_line\"><a href=\"#pure_bnf_40\">40</a></td><td><code>$extern$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_41\">41</a></td><td><code>$template$ </code></td></tr><tr class=\"result_lin"
      "e\"><td class=\"result_line\"><a href=\"#pure_bnf_42\">42</a></td><td><code>$replace$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_43\">43</a></td><td><code>$type_name$ </code></td></tr><tr class=\"result_line"
      "\"><td class=\"result_line\"><a href=\"#pure_bnf_44\">44</a></td><td><code>$style$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_45\">45</a></td><td><code>$terminal$ </code></td></tr><tr class=\"result_line\"><t"
      "d class=\"result_line\"><a href=\"#pure_bnf_46\">46</a></td><td><code>$list$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_47\">47</a></td><td><code>$rule$ </code></td></tr><tr class=\"result_line\"><td class=\""
      "result_line\"><a href=\"#pure_bnf_48\">48</a></td><td><code>$message$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_2&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_49\">49</a></td><td><code>$identifier$ $literal_char$ $~$ $literal_string$"
      " </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_50\">50</a></td><td><code>$list$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_3&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_51\">51</a></td><td><code>$...$ </code></td></tr><tr class=\"result_line\"><"
      "td class=\"result_line\"><a href=\"#pure_bnf_52\">52</a></td><td><code>$feature$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_4&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_53\">53</a></td><td><code>$...$ </code></td></tr><tr class=\"result_"
      "line\"><td class=\"result_line\"><a href=\"#pure_bnf_54\">54</a></td><td><code>$,$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_5&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_55\">55</a></td><td><code>$...$ </code></td></tr><tr class=\"result_line\"><"
      "td class=\"result_line\"><a href=\"#pure_bnf_56\">56</a></td><td><code>$->$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_6&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_57\">57</a></td><td><code>$end$ </code></td></tr><tr class=\"result_"
      "line\"><td class=\"result_line\"><a href=\"#pure_bnf_58\">58</a></td><td><code>$identifier$ $drop$ $error$ $log$ $repeat$ $rewind$ $select$ $send$ $tag$ $warning$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_7&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_59\">59</a></td><td><code>$error$ $terminal$ </code></td></tr><tr c"
      "lass=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_60\">60</a></td><td><code>$search$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_8&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_61\">61</a></td><td><code>$terminal$ </code></td></tr><tr class=\"result_li"
      "ne\"><td class=\"result_line\"><a href=\"#pure_bnf_62\">62</a></td><td><code>$error$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_9&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_63\">63</a></td><td><code>$while$ </code></td></tr><tr class=\"resul"
      "t_line\"><td class=\"result_line\"><a href=\"#pure_bnf_64\">64</a></td><td><code>$identifier$ $drop$ $error$ $log$ $repeat$ $rewind$ $select$ $send$ $tag$ $warning$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_10&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_65\">65</a></td><td><code>$end$ </code></td></tr><tr class=\"result"
      "_line\"><td class=\"result_line\"><a href=\"#pure_bnf_66\">66</a></td><td><code>$while$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_11&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_67\">67</a></td><td><code>$end$ $while$ </code></td></tr><tr class"
      "=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_68\">68</a></td><td><code>$identifier$ $drop$ $error$ $log$ $repeat$ $rewind$ $select$ $send$ $tag$ $warning$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_12&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_69\">69</a></td><td><code>$default$ </code></td></tr><tr class=\"re"
      "sult_line\"><td class=\"result_line\"><a href=\"#pure_bnf_70\">70</a></td><td><code>$when$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_13&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_71\">71</a></td><td><code>$default$ $when$ </code></td></tr><tr cl"
      "ass=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_72\">72</a></td><td><code>$identifier$ $drop$ $error$ $log$ $repeat$ $rewind$ $select$ $send$ $tag$ $warning$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_14&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_73\">73</a></td><td><code>$end$ </code></td></tr><tr class=\"result"
      "_line\"><td class=\"result_line\"><a href=\"#pure_bnf_74\">74</a></td><td><code>$identifier$ $drop$ $error$ $log$ $repeat$ $rewind$ $select$ $send$ $tag$ $warning$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_15&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_75\">75</a></td><td><code>$error$ $;$ </code></td></tr><tr class=\""
      "result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_76\">76</a></td><td><code>$!$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_77\">77</a></td><td><code>$!\?$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_16&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_78\">78</a></td><td><code>$;$ </code></td></tr><tr class=\"result_line\"><t"
      "d class=\"result_line\"><a href=\"#pure_bnf_79\">79</a></td><td><code>$error$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_17&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_80\">80</a></td><td><code>$;$ </code></td></tr><tr class=\"result_l"
      "ine\"><td class=\"result_line\"><a href=\"#pure_bnf_81\">81</a></td><td><code>$,$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_18&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_82\">82</a></td><td><code>$)$ </code></td></tr><tr class=\"result_l"
      "ine\"><td class=\"result_line\"><a href=\"#pure_bnf_83\">83</a></td><td><code>$!$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_19&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_84\">84</a></td><td><code>$:$ </code></td></tr><tr class=\"result_l"
      "ine\"><td class=\"result_line\"><a href=\"#pure_bnf_85\">85</a></td><td><code>$|$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_20&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_86\">86</a></td><td><code>$|$ $:$ </code></td></tr><tr class=\"result_line"
      "\"><td class=\"result_line\"><a href=\"#pure_bnf_87\">87</a></td><td><code>$->$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_21&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_88\">88</a></td><td><code>$error$ </code></td></tr><tr class=\"resu"
      "lt_line\"><td class=\"result_line\"><a href=\"#pure_bnf_89\">89</a></td><td><code>$!$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_22&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_90\">90</a></td><td><code>$style$ </code></td></tr><tr class=\"result_line"
      "\"><td class=\"result_line\"><a href=\"#pure_bnf_91\">91</a></td><td><code>$:$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_23&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_92\">92</a></td><td><code>$;$ </code></td></tr><tr class=\"result_l"
      "ine\"><td class=\"result_line\"><a href=\"#pure_bnf_93\">93</a></td><td><code>$,$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_24&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_94\">94</a></td><td><code>$,$ $;$ $->$ </code></td></tr><tr class=\"result"
      "_line\"><td class=\"result_line\"><a href=\"#pure_bnf_95\">95</a></td><td><code>$feature$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_25&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_96\">96</a></td><td><code>$->$ </code></td></tr><tr class=\"result_line\"><"
      "td class=\"result_line\"><a href=\"#pure_bnf_97\">97</a></td><td><code>$,$ $;$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_26&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_98\">98</a></td><td><code>$error$ </code></td></tr><tr class=\"resu"
      "lt_line\"><td class=\"result_line\"><a href=\"#pure_bnf_99\">99</a></td><td><code>$!$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_27&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_100\">100</a></td><td><code>$style$ </code></td></tr><tr class=\"result_li"
      "ne\"><td class=\"result_line\"><a href=\"#pure_bnf_101\">101</a></td><td><code>$feature$ $;$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_28&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_102\">102</a></td><td><code>$;$ </code></td></tr><tr class=\"result_line\">"
      "<td class=\"result_line\"><a href=\"#pure_bnf_103\">103</a></td><td><code>$feature$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_29&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_104\">104</a></td><td><code>$;$ </code></td></tr><tr class=\"result"
      "_line\"><td class=\"result_line\"><a href=\"#pure_bnf_105\">105</a></td><td><code>$,$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_30&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_106\">106</a></td><td><code>$routine$ </code></td></tr><tr class=\"result_"
      "line\"><td class=\"result_line\"><a href=\"#pure_bnf_107\">107</a></td><td><code>$function$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_31&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_108\">108</a></td><td><code>$error$ $;$ </code></td></tr><tr class"
      "=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_109\">109</a></td><td><code>$\?$ $\?!$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_32&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_110\">110</a></td><td><code>$\?!$ </code></td></tr><tr class=\"result_line\""
      "><td class=\"result_line\"><a href=\"#pure_bnf_111\">111</a></td><td><code>$\?$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_33&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_112\">112</a></td><td><code>$;$ </code></td></tr><tr class=\"result_line\">"
      "<td class=\"result_line\"><a href=\"#pure_bnf_113\">113</a></td><td><code>$error$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_34&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_114\">114</a></td><td><code>$;$ </code></td></tr><tr class=\"result"
      "_line\"><td class=\"result_line\"><a href=\"#pure_bnf_115\">115</a></td><td><code>$,$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_35&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_116\">116</a></td><td><code>$->$ </code></td></tr><tr class=\"resul"
      "t_line\"><td class=\"result_line\"><a href=\"#pure_bnf_117\">117</a></td><td><code>$\?$ </code></td></tr>\n"
      "</table><p><span class=\"success\">No conflict : the grammar is LL (1).\n"
      "</span></p><table class=\"title\"><tr><td>\n"
      "OK (no error, no warning)\n"
      "</td></tr></table>\n"
      "</div></body></html>\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// 'optionHeaderZone2' template of 'grammarGenerationTemplates' filewrapper  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_grammarGenerationTemplates_optionHeaderZone2 (C_Compiler & inLexique,
                                const GGS_string& var_cas_GRAMMAR_NAME,
                                const GGS_grammarComponentRoot & var_cas_GRAMMAR_COMPONENT_ROOT) {
  C_String result ;
  const bool isBuilt = var_cas_GRAMMAR_NAME.isBuilt ()
    && var_cas_GRAMMAR_COMPONENT_ROOT.isBuilt () ;
  if (isBuilt) {
    result << "#ifndef GRAMMAR_" ;
    result << var_cas_GRAMMAR_NAME ;
    result << "_HAS_BEEN_DEFINED\n"
      "#define GRAMMAR_" ;
    result << var_cas_GRAMMAR_NAME ;
    result << "_HAS_BEEN_DEFINED\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_lstringlist::cEnumerator enumerator_230 (var_cas_GRAMMAR_COMPONENT_ROOT.reader_mSyntaxComponents (inLexique COMMA_SOURCE_FILE_AT_LINE (6)), true) ;
    const GGS_lstringlist::cElement * operand_230 = NULL ;
    while (((operand_230 = enumerator_230.nextObject ()))) {
      macroValidPointer (operand_230) ;
      result << "#include \"" ;
      result << operand_230->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (7)) ;
      result << ".h\"\n" ;
    }
    result << "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// 'optionHeaderZone3' template of 'grammarGenerationTemplates' filewrapper  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_grammarGenerationTemplates_optionHeaderZone3 (C_Compiler & inLexique,
                                const GGS_string& var_cas_GRAMMAR_NAME,
                                const GGS_grammarComponentRoot & var_cas_GRAMMAR_COMPONENT_ROOT,
                                const GGS_nonTerminalMap & var_cas_NON_TERMINAL_MAP,
                                const GGS_string& var_cas_LEXIQUE_CLASS,
                                const GGS_stringlist & var_cas_ADDED_NON_TERMINAL_LIST) {
  C_String result ;
  const bool isBuilt = var_cas_GRAMMAR_NAME.isBuilt ()
    && var_cas_GRAMMAR_COMPONENT_ROOT.isBuilt ()
    && var_cas_NON_TERMINAL_MAP.isBuilt ()
    && var_cas_LEXIQUE_CLASS.isBuilt ()
    && var_cas_ADDED_NON_TERMINAL_LIST.isBuilt () ;
  if (isBuilt) {
    result << "//---------------------------------------------------------------------------*\n"
      "\n"
      "class " ;
    result << var_cas_GRAMMAR_NAME ;
    result << " : " ;
    GGS_lstringlist::cEnumerator enumerator_159 (var_cas_GRAMMAR_COMPONENT_ROOT.reader_mSyntaxComponents (inLexique COMMA_SOURCE_FILE_AT_LINE (4)), true) ;
    const GGS_lstringlist::cElement * operand_159 = NULL ;
    while (((operand_159 = enumerator_159.nextObject ()))) {
      macroValidPointer (operand_159) ;
      result << "public " ;
      result << operand_159->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (5)) ;
      if (enumerator_159.hasNextObject ()) {
        result << ",\n"
          "                                 " ;
      }
    }
    result << " {\n" ;
    GGS_nonTerminalMap::cEnumerator enumerator_314 (var_cas_NON_TERMINAL_MAP, true) ;
    const GGS_nonTerminalMap::cElement * operand_314 = NULL ;
    while (((operand_314 = enumerator_314.nextObject ()))) {
      macroValidPointer (operand_314) ;
      GGS_nonTerminalLabelList::cEnumerator enumerator_335 (operand_314->mInfo.mLabels, true) ;
      const GGS_nonTerminalLabelList::cElement * operand_335 = NULL ;
      while (((operand_335 = enumerator_335.nextObject ()))) {
        macroValidPointer (operand_335) ;
        result << "  public : virtual void nt_" ;
        result << operand_314->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (12)) ;
        result << "_" ;
        result << operand_335->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (12)) ;
        result << " (" ;
        result << var_cas_LEXIQUE_CLASS ;
        result << " &" ;
        GGS_formalParameterList::cEnumerator enumerator_461 (operand_335->mFormalParameters, true) ;
        const GGS_formalParameterList::cElement * operand_461 = NULL ;
        while (((operand_461 = enumerator_461.nextObject ()))) {
          macroValidPointer (operand_461) ;
          result << ",\n"
            "                                " ;
          result << operand_461->mFormalParameterPassingMode.reader_generation1ForFormalParameter (inLexique COMMA_SOURCE_FILE_AT_LINE (14)) ;
          result << "GGS_" ;
          result << operand_461->mFormalParameterTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (14)) ;
          result << operand_461->mFormalParameterPassingMode.reader_generation2ForFormalParameter (inLexique COMMA_SOURCE_FILE_AT_LINE (14)) ;
        }
        result << ") ;\n" ;
        if ((var_cas_GRAMMAR_COMPONENT_ROOT.reader_mStartSymbol (inLexique COMMA_SOURCE_FILE_AT_LINE (17)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (17))).operator_isEqual (operand_314->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (17))).boolValue ()) {
          result << "  public : static void _performSourceFileParsing_" ;
          result << operand_335->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (18)) ;
          result << " (C_Compiler & inCompiler,\n"
            "                                const C_String & inDependancyExtension,\n"
            "                                const C_String & inDependancyPath,\n"
            "                                GGS_string * inSentStringPtr,\n"
            "                                const GGS_lstring inFileName" ;
          GGS_formalParameterList::cEnumerator enumerator_1177 (operand_335->mFormalParameters, true) ;
          const GGS_formalParameterList::cElement * operand_1177 = NULL ;
          while (((operand_1177 = enumerator_1177.nextObject ()))) {
            macroValidPointer (operand_1177) ;
            result << ",\n"
              "                                " ;
            result << operand_1177->mFormalParameterPassingMode.reader_generation1ForFormalParameter (inLexique COMMA_SOURCE_FILE_AT_LINE (24)) ;
            result << "GGS_" ;
            result << operand_1177->mFormalParameterTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (24)) ;
            result << operand_1177->mFormalParameterPassingMode.reader_generation2ForFormalParameter (inLexique COMMA_SOURCE_FILE_AT_LINE (24)) ;
          }
          result << "\n"
            "                                COMMA_LOCATION_ARGS) ;\n"
            "  public : static void _performSourceStringParsing_" ;
          result << operand_335->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (27)) ;
          result << " (C_Compiler & inCompiler,\n"
            "                                GGS_string * inSentStringPtr,\n"
            "                                const GGS_string inSourceString" ;
          GGS_formalParameterList::cEnumerator enumerator_1741 (operand_335->mFormalParameters, true) ;
          const GGS_formalParameterList::cElement * operand_1741 = NULL ;
          while (((operand_1741 = enumerator_1741.nextObject ()))) {
            macroValidPointer (operand_1741) ;
            result << ",\n"
              "                                " ;
            result << operand_1741->mFormalParameterPassingMode.reader_generation1ForFormalParameter (inLexique COMMA_SOURCE_FILE_AT_LINE (31)) ;
            result << "GGS_" ;
            result << operand_1741->mFormalParameterTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (31)) ;
            result << operand_1741->mFormalParameterPassingMode.reader_generation2ForFormalParameter (inLexique COMMA_SOURCE_FILE_AT_LINE (31)) ;
          }
          result << "\n"
            "                                COMMA_LOCATION_ARGS) ;\n" ;
        }else {
        }
      }
      if (operand_314->mInfo.mHasParseLabel.boolValue ()) {
        result << "  public : virtual void nt_" ;
        result << operand_314->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (37)) ;
        result << "_parse (" ;
        result << var_cas_LEXIQUE_CLASS ;
        result << " &) ;\n" ;
      }else {
      }
    }
    GGS_stringlist::cEnumerator enumerator_2219 (var_cas_ADDED_NON_TERMINAL_LIST, true) ;
    const GGS_stringlist::cElement * operand_2219 = NULL ;
    while (((operand_2219 = enumerator_2219.nextObject ()))) {
      macroValidPointer (operand_2219) ;
      result << "public : virtual PMSInt16 " ;
      result << operand_2219->mValue ;
      result << " (" ;
      result << var_cas_LEXIQUE_CLASS ;
      result << " &) ;\n" ;
    }
    result << "\n"
      "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#endif\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "buildRuleList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildRuleList (C_Compiler & inLexique,
                                const GGS_string  var_cas_inSyntaxComponentName,
                                const GGS_syntaxRuleList   var_cas_inRuleList,
                                GGS_syntaxRuleListForGrammar  & var_cas_ioSyntaxRuleListForGrammar COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildRuleList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_syntaxRuleList::cEnumerator enumerator_14796 (var_cas_inRuleList, true) ;
    const GGS_syntaxRuleList::cElement * operand_14796 = NULL ;
    while (((operand_14796 = enumerator_14796.nextObject ()))) {
      macroValidPointer (operand_14796) ;
      GGS_syntaxInstructionList  var_cas_instructionList ;
      GGS_lstring  automatic_var_0 ;
      GGS_formalParameterList  automatic_var_1 ;
      const GGS_syntaxRuleLabelList  temp_14938 = operand_14796->mLabelList ;
      if (temp_14938.isBuilt ()) {
        temp_14938 (HERE)->method_first (inLexique, automatic_var_0, automatic_var_1, var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (369)) ;
      }
      GGS_syntaxInstructionList  var_cas_syntaxInstructionList ;
      ::routine_buildSyntaxInstructionList (inLexique,  var_cas_instructionList,  var_cas_syntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (371)) ;
      var_cas_ioSyntaxRuleListForGrammar.addAssign_operation (var_cas_inSyntaxComponentName, operand_14796->mNonterminalName, var_cas_syntaxInstructionList) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildRuleList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "compileGrammarComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileGrammarComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  var_cas_inOutputDirectory,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileGrammarComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_grammarComponentRoot  var_cas_grammarComponentRoot ;
  const GGS_string _depExtension = GGS_string ("") ;
  const GGS_string _depPath = GGS_string ("") ;
  if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
    grammarLL1grammar::_performSourceFileParsing_ (inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_inSourceFile,
                                  var_cas_grammarComponentRoot
                                  COMMA_SOURCE_FILE_AT_LINE (384)) ;
  }
  GGS_lstring  var_cas_componentName ;
  var_cas_componentName = var_cas_grammarComponentRoot.reader_mGrammarName (inLexique COMMA_SOURCE_FILE_AT_LINE (386)) ;
  GGS_string var_cas_basename ;
  var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (387)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (387)) ;
  if (((var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (388))).operator_isNotEqual (var_cas_basename)).isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS checks "
      "the component name ('")).operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (390)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (392)) ;
  }
  GGS_nonTerminalMap  var_cas_nonTerminalMap ;
  var_cas_nonTerminalMap = GGS_nonTerminalMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_string var_cas_lexiqueComponent ;
  var_cas_lexiqueComponent = GGS_string ("") ;
  GGS_syntaxRuleListForGrammar  var_cas_syntaxRuleListForGrammar ;
  var_cas_syntaxRuleListForGrammar = GGS_syntaxRuleListForGrammar ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_16206 (var_cas_grammarComponentRoot.reader_mSyntaxComponents (inLexique COMMA_SOURCE_FILE_AT_LINE (398)), true) ;
    const GGS_lstringlist::cElement * operand_16206 = NULL ;
    while (((operand_16206 = enumerator_16206.nextObject ()))) {
      macroValidPointer (operand_16206) ;
      if (((operand_16206->mValue.ggs_string ().reader_pathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (399))).operator_isNotEqual (GGS_string ("gSyntax"))).isBuiltAndTrue ()) {
        operand_16206->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a syntax component file should have '.gSyntax' as path extension") COMMA_SOURCE_FILE_AT_LINE (401)) ;
      }else{
        GGS_string var_cas_syntaxComponentName ;
        var_cas_syntaxComponentName = operand_16206->mValue.ggs_string ().reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (402)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (402)) ;
        GGS_syntaxComponentRoot  var_cas_syntaxComponentRoot ;
        if ((var_cas_ioParsedComponentStruct.reader_mParsedSyntaxComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (404)).reader_hasKey (inLexique, var_cas_syntaxComponentName COMMA_SOURCE_FILE_AT_LINE (404))).isBuiltAndTrue ()) {
          const GGS_parsedSyntaxComponentMap  temp_16708 = var_cas_ioParsedComponentStruct.reader_mParsedSyntaxComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (405)) ;
          if (temp_16708.isBuilt ()) {
            temp_16708 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_syntaxComponentName, GGS_location (inLexique) COMMA_HERE), var_cas_syntaxComponentRoot COMMA_SOURCE_FILE_AT_LINE (405)) ;
          }
        }else{
          GGS_string var_cas_sourceFilePath ;
          var_cas_sourceFilePath = operand_16206->mValue.ggs_string ().reader_absolutePathFromPath (inLexique, var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (407)) COMMA_SOURCE_FILE_AT_LINE (407)) ;
          const GGS_string _depExtension = GGS_string ("") ;
          const GGS_string _depPath = GGS_string ("") ;
          if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
            syntaxSLRgrammar::_performSourceFileParsing_ (inLexique,
                                          _depExtension.string (),
                                          _depPath.string (),
                                          NULL,
                                          GGS_lstring ::constructor_new (inLexique, var_cas_sourceFilePath, operand_16206->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (408)) COMMA_HERE),
                                          var_cas_syntaxComponentRoot
                                          COMMA_SOURCE_FILE_AT_LINE (408)) ;
          }
          var_cas_ioParsedComponentStruct.mParsedSyntaxComponentMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_syntaxComponentName, operand_16206->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (409)) COMMA_HERE), var_cas_syntaxComponentRoot COMMA_SOURCE_FILE_AT_LINE (409)) ;
        }
        GGS_string var_cas_currentLexiqueName ;
        var_cas_currentLexiqueName = var_cas_syntaxComponentRoot.reader_mImportedLexiqueReference (inLexique COMMA_SOURCE_FILE_AT_LINE (412)).ggs_string ().reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (412)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (412)) ;
        if (((var_cas_lexiqueComponent).operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
          var_cas_lexiqueComponent = var_cas_currentLexiqueName ;
        }else if (((var_cas_lexiqueComponent).operator_isNotEqual (var_cas_currentLexiqueName)).isBuiltAndTrue ()) {
          operand_16206->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this syntax component uses '")).operator_concat (var_cas_currentLexiqueName)).operator_concat (GGS_string ("' lexique component, but the first syntax component uses the '"))).operator_concat (var_cas_lexiqueComponent)).operator_concat (GGS_string ("' lexique component (they should be the same)")) COMMA_SOURCE_FILE_AT_LINE (419)) ;
        }
        ::routine_handleNonTerminalDeclarations (inLexique,  var_cas_nonTerminalMap,  var_cas_syntaxComponentRoot.reader_mNonterminalDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (423)) COMMA_SOURCE_FILE_AT_LINE (421)) ;
        ::routine_buildRuleList (inLexique,  var_cas_syntaxComponentName,  var_cas_syntaxComponentRoot.reader_mRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (428)),  var_cas_syntaxRuleListForGrammar COMMA_SOURCE_FILE_AT_LINE (426)) ;
      }
    }
  }
  GGS_syntaxRuleListForGrammar  var_cas_pureSyntaxRuleListForGrammar ;
  var_cas_pureSyntaxRuleListForGrammar = GGS_syntaxRuleListForGrammar ::constructor_emptyList () ;
  GGS_syntaxRuleListForGrammar  var_cas_addedPureSyntaxRuleListForGrammar ;
  var_cas_addedPureSyntaxRuleListForGrammar = GGS_syntaxRuleListForGrammar ::constructor_emptyList () ;
  GGS_stringlist  var_cas_addedNonTerminalList ;
  var_cas_addedNonTerminalList = GGS_stringlist ::constructor_emptyList () ;
  GGS_string var_cas_currentSyntaxComponentName ;
  var_cas_currentSyntaxComponentName = GGS_string ("") ;
  GGS_uint  var_cas_addedRuleIndex ;
  var_cas_addedRuleIndex = GGS_uint (0U) ;
  {
    GGS_syntaxRuleListForGrammar::cEnumerator enumerator_18493 (var_cas_syntaxRuleListForGrammar, true) ;
    const GGS_syntaxRuleListForGrammar::cElement * operand_18493 = NULL ;
    while (((operand_18493 = enumerator_18493.nextObject ()))) {
      macroValidPointer (operand_18493) ;
      if (((var_cas_currentSyntaxComponentName).operator_isNotEqual (operand_18493->mSyntaxComponentName)).isBuiltAndTrue ()) {
        var_cas_currentSyntaxComponentName = operand_18493->mSyntaxComponentName ;
        var_cas_addedRuleIndex = GGS_uint (0U) ;
      }
      GGS_syntaxInstructionList  var_cas_pureSyntaxInstructionList ;
      ::routine_buildPureSyntaxInstructionList (inLexique,  operand_18493->mSyntaxComponentName,  operand_18493->mSyntaxInstructionList,  var_cas_pureSyntaxInstructionList,  var_cas_addedPureSyntaxRuleListForGrammar,  var_cas_addedNonTerminalList,  var_cas_addedRuleIndex COMMA_SOURCE_FILE_AT_LINE (445)) ;
      var_cas_pureSyntaxRuleListForGrammar.addAssign_operation (operand_18493->mSyntaxComponentName, operand_18493->mLeftNonTerminal, var_cas_pureSyntaxInstructionList) ;
    }
  }
  var_cas_pureSyntaxRuleListForGrammar.dotAssign_operation (var_cas_addedPureSyntaxRuleListForGrammar) ;
  GGS_lstring  var_cas_addedRootNonTerminal ;
  var_cas_addedRootNonTerminal = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  var_cas_pureSyntaxRuleListForGrammar.addAssign_operation (GGS_string (""), var_cas_addedRootNonTerminal, GGS_syntaxInstructionList ::constructor_listWithValue (GGS_nonterminalCallInstruction ::constructor_new (inLexique, var_cas_grammarComponentRoot.reader_mStartSymbol (inLexique COMMA_SOURCE_FILE_AT_LINE (467)), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), GGS_actualParameterList ::constructor_emptyList () COMMA_HERE))) ;
  GGS_string var_cas_htmlOutputFileName ;
  var_cas_htmlOutputFileName = (var_cas_inSourceFile.ggs_string ().reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (474))).operator_concat (GGS_string (".html")) ;
  if ((gOption_galgas_5F_cli_5F_options_outputHTMLgrammarFile.value ()).isBuiltAndTrue ()) {
    GGS_string var_cas_s ;
    var_cas_s = template_filewrapper_grammarGenerationTemplates_html (inLexique, var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (477)), var_cas_syntaxRuleListForGrammar, var_cas_pureSyntaxRuleListForGrammar) ;
    GGS_bool automatic_var_2 ;
    const GGS_string temp_19989 = var_cas_s ;
    if (temp_19989.isBuilt ()) {
      temp_19989 (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_htmlOutputFileName, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (481)) ;
    }
  }else{
    GGS_string::class_method_deleteFileIfExists (inLexique, var_cas_htmlOutputFileName COMMA_SOURCE_FILE_AT_LINE (483)) ;
  }
  if (((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (489))).operator_concat (GGS_string (".h")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_grammarGenerationTemplates_optionHeaderZone2 (inLexique, var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (493)), var_cas_grammarComponentRoot), GGS_string ("\n"
      "\n"), template_filewrapper_grammarGenerationTemplates_optionHeaderZone3 (inLexique, var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (498)), var_cas_grammarComponentRoot, var_cas_nonTerminalMap, var_cas_lexiqueComponent, var_cas_addedNonTerminalList) COMMA_SOURCE_FILE_AT_LINE (487)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileGrammarComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_grammarCompilation (void) {
 enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList ((typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList) category_method__semanticInstruction__buildSyntaxInstructionList, gClassInfoFor__semanticInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList ((typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList) category_method__nonterminalCallInstruction__buildSyntaxInstructionList, gClassInfoFor__nonterminalCallInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList ((typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList) category_method__terminalCheckInstruction__buildSyntaxInstructionList, gClassInfoFor__terminalCheckInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList ((typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList) category_method__repeatInstruction__buildSyntaxInstructionList, gClassInfoFor__repeatInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList ((typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList) category_method__selectInstruction__buildSyntaxInstructionList, gClassInfoFor__selectInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList ((typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList) category_method__parseDoInstruction__buildSyntaxInstructionList, gClassInfoFor__parseDoInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList ((typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList) category_method__blockInstruction__buildSyntaxInstructionList, gClassInfoFor__blockInstruction.slotID ()) ;
 enterCategoryReader__syntaxInstruction__htmlListing ((typeCategoryReader__syntaxInstruction__htmlListing) category_reader__semanticInstruction__htmlListing, gClassInfoFor__semanticInstruction.slotID ()) ;
 enterCategoryReader__syntaxInstruction__htmlListing ((typeCategoryReader__syntaxInstruction__htmlListing) category_reader__nonterminalCallInstruction__htmlListing, gClassInfoFor__nonterminalCallInstruction.slotID ()) ;
 enterCategoryReader__syntaxInstruction__htmlListing ((typeCategoryReader__syntaxInstruction__htmlListing) category_reader__terminalCheckInstruction__htmlListing, gClassInfoFor__terminalCheckInstruction.slotID ()) ;
 enterCategoryReader__syntaxInstruction__htmlListing ((typeCategoryReader__syntaxInstruction__htmlListing) category_reader__repeatInstruction__htmlListing, gClassInfoFor__repeatInstruction.slotID ()) ;
 enterCategoryReader__syntaxInstruction__htmlListing ((typeCategoryReader__syntaxInstruction__htmlListing) category_reader__selectInstruction__htmlListing, gClassInfoFor__selectInstruction.slotID ()) ;
 enterCategoryReader__syntaxInstruction__htmlListing ((typeCategoryReader__syntaxInstruction__htmlListing) category_reader__parseDoInstruction__htmlListing, gClassInfoFor__parseDoInstruction.slotID ()) ;
 enterCategoryReader__syntaxInstruction__htmlListing ((typeCategoryReader__syntaxInstruction__htmlListing) category_reader__blockInstruction__htmlListing, gClassInfoFor__blockInstruction.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_grammarCompilation (prologueRoutineFor_grammarCompilation,
                                   NULL) ;

//---------------------------------------------------------------------------*

