//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'grammarCompilation.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    november 10th, 2009, at 13h31'38"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "grammarCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "grammarCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "grammarLL1grammar.h"
#include "syntaxSLRgrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of function "transformLabelMap"               *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_nonterminalSymbolLabelMapForGrammarAnalysis  function_transformLabelMap (C_Compiler & inLexique,
                                const GGS_nonTerminalLabelList   var_cas_inLabels,
                                const GGS_bool  var_cas_inHasParseLabel COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_transformLabelMap at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_nonterminalSymbolLabelMapForGrammarAnalysis  var_cas_outNonterminalSymbolLabelMapForGrammarAnalysis ;
  var_cas_outNonterminalSymbolLabelMapForGrammarAnalysis = GGS_nonterminalSymbolLabelMapForGrammarAnalysis ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_nonTerminalLabelList::cEnumerator enumerator_2206 (var_cas_inLabels, true) ;
    const GGS_nonTerminalLabelList::cElement * operand_2206 = NULL ;
    while (((operand_2206 = enumerator_2206.nextObject ()))) {
      macroValidPointer (operand_2206) ;
      GGS_signatureForGrammarAnalysis  var_cas_formalParametersList = GGS_signatureForGrammarAnalysis ::constructor_emptyList () ;
      {
        GGS_formalParameterList::cEnumerator enumerator_2307 (operand_2206->mFormalParameters, true) ;
        const GGS_formalParameterList::cElement * operand_2307 = NULL ;
        while (((operand_2307 = enumerator_2307.nextObject ()))) {
          macroValidPointer (operand_2307) ;
          var_cas_formalParametersList.addAssign_operation (operand_2307->mFormalParameterPassingMode, operand_2307->mFormalParameterTypeName) ;
        }
      }
      var_cas_outNonterminalSymbolLabelMapForGrammarAnalysis.modifier_insertKey (inLexique, operand_2206->mLabelName, var_cas_formalParametersList COMMA_SOURCE_FILE_AT_LINE (43)) ;
    }
  }
  const GGS_bool cond_2754 = var_cas_inHasParseLabel ;
  if (cond_2754.isBuiltAndTrue ()) {
    var_cas_outNonterminalSymbolLabelMapForGrammarAnalysis.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("parse"), GGS_location (inLexique) COMMA_HERE), GGS_signatureForGrammarAnalysis ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (49)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_transformLabelMap\n") ;
  #endif
  return var_cas_outNonterminalSymbolLabelMapForGrammarAnalysis ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "checkLabelMap"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkLabelMap (C_Compiler & inLexique,
                                const GGS_location   var_cas_inNonTerminalLocation,
                                const GGS_nonTerminalLabelList   var_cas_inLabels,
                                const GGS_bool  var_cas_inHasParseLabel,
                                const GGS_location   var_cas_inOriginalNonTerminalLocation,
                                const GGS_nonterminalSymbolLabelMapForGrammarAnalysis   var_cas_inNonterminalSymbolLabelMapForGrammarAnalysis COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkLabelMap at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_stringset  var_cas_labelStringSet = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_nonTerminalLabelList::cEnumerator enumerator_3175 (var_cas_inLabels, true) ;
    const GGS_nonTerminalLabelList::cElement * operand_3175 = NULL ;
    while (((operand_3175 = enumerator_3175.nextObject ()))) {
      macroValidPointer (operand_3175) ;
      var_cas_labelStringSet.addAssign_operation (operand_3175->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (68))) ;
      GGS_signatureForGrammarAnalysis  var_cas_formalParametersList ;
      const GGS_nonterminalSymbolLabelMapForGrammarAnalysis  temp_3340 = var_cas_inNonterminalSymbolLabelMapForGrammarAnalysis ;
      if (temp_3340.isBuilt ()) {
        temp_3340 (HERE)->method_searchKey (inLexique, operand_3175->mLabelName, var_cas_formalParametersList COMMA_SOURCE_FILE_AT_LINE (70)) ;
      }
      const GGS_bool cond_3916 = (operand_3175->mFormalParameters.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (71))).operator_isNotEqual (var_cas_formalParametersList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (71))) ;
      if (cond_3916.isBuiltAndTrue ()) {
        operand_3175->mLabelName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((operand_3175->mFormalParameters.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (72)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (72))).operator_concat (GGS_string (" formal parameter"))).operator_concat ((((operand_3175->mFormalParameters.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (74))).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string (""))))).operator_concat (GGS_string (" declared here, but declaration at "))).operator_concat (var_cas_inNonterminalSymbolLabelMapForGrammarAnalysis.reader_locationForKey (inLexique, operand_3175->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (76)) COMMA_SOURCE_FILE_AT_LINE (76)).reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (76)))).operator_concat (GGS_string ("names "))).operator_concat (var_cas_formalParametersList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (77)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (77)))).operator_concat (GGS_string ("parameter"))).operator_concat ((((var_cas_formalParametersList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (78))).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string ("")))) COMMA_SOURCE_FILE_AT_LINE (79)) ;
      }else if (cond_3916.isBuiltAndFalse ()) {
        {
          GGS_formalParameterList::cEnumerator enumerator_3948 (operand_3175->mFormalParameters, true) ;
          const GGS_formalParameterList::cElement * operand_3948 = NULL ;
          GGS_signatureForGrammarAnalysis::cEnumerator enumerator_3970 (var_cas_formalParametersList, true) ;
          const GGS_signatureForGrammarAnalysis::cElement * operand_3970 = NULL ;
          while (((operand_3948 = enumerator_3948.nextObject ()))
              && ((operand_3970 = enumerator_3970.nextObject ()))) {
            macroValidPointer (operand_3948) ;
            macroValidPointer (operand_3970) ;
            const GGS_bool cond_4532 = (operand_3970->mFormalArgumentPassingModeForGrammarAnalysis).operator_isNotEqual (operand_3948->mFormalParameterPassingMode) ;
            if (cond_4532.isBuiltAndTrue ()) {
              operand_3970->mGalgasTypeNameForGrammarAnalysis.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string (" this formal parameter is declared with ")).operator_concat (operand_3970->mFormalArgumentPassingModeForGrammarAnalysis.reader_formalArgumentString (inLexique COMMA_SOURCE_FILE_AT_LINE (84)))).operator_concat (GGS_string (" passing mode, but declaration at "))).operator_concat (var_cas_inNonterminalSymbolLabelMapForGrammarAnalysis.reader_locationForKey (inLexique, operand_3175->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (86)) COMMA_SOURCE_FILE_AT_LINE (86)).reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (86)))).operator_concat (GGS_string (" is declared with "))).operator_concat (operand_3948->mFormalParameterPassingMode.reader_formalArgumentString (inLexique COMMA_SOURCE_FILE_AT_LINE (87)))).operator_concat (GGS_string (" passing mode")) COMMA_SOURCE_FILE_AT_LINE (88)) ;
            }
            const GGS_bool cond_5028 = (operand_3970->mGalgasTypeNameForGrammarAnalysis.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (89))).operator_isNotEqual (operand_3948->mFormalParameterTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (89))) ;
            if (cond_5028.isBuiltAndTrue ()) {
              operand_3970->mGalgasTypeNameForGrammarAnalysis.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string (" this formal parameter is declared of '@")).operator_concat (operand_3970->mGalgasTypeNameForGrammarAnalysis)).operator_concat (GGS_string ("' type, but declaration at "))).operator_concat (var_cas_inNonterminalSymbolLabelMapForGrammarAnalysis.reader_locationForKey (inLexique, operand_3175->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (94)) COMMA_SOURCE_FILE_AT_LINE (94)).reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (94)))).operator_concat (GGS_string (" is declared with '@"))).operator_concat (operand_3948->mFormalParameterTypeName)).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (96)) ;
            }
          }
        }
      }
    }
  }
  const GGS_bool cond_5463 = var_cas_inHasParseLabel ;
  if (cond_5463.isBuiltAndTrue ()) {
    var_cas_labelStringSet.addAssign_operation (GGS_string ("parse")) ;
    const GGS_bool cond_5452 = (var_cas_inNonterminalSymbolLabelMapForGrammarAnalysis.reader_hasKey (inLexique, GGS_string ("parse") COMMA_SOURCE_FILE_AT_LINE (102))).operator_not () ;
    if (cond_5452.isBuiltAndTrue ()) {
      var_cas_inNonTerminalLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this non terminal is declared with 'parse' label, but declaration at ")).operator_concat (var_cas_inOriginalNonTerminalLocation.reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (105)))).operator_concat (GGS_string (" does not declare 'parse' label")) COMMA_SOURCE_FILE_AT_LINE (107)) ;
    }
  }
  {
    GGS_nonterminalSymbolLabelMapForGrammarAnalysis::cEnumerator enumerator_5529 (var_cas_inNonterminalSymbolLabelMapForGrammarAnalysis, true) ;
    const GGS_nonterminalSymbolLabelMapForGrammarAnalysis::cElement * operand_5529 = NULL ;
    while (((operand_5529 = enumerator_5529.nextObject ()))) {
      macroValidPointer (operand_5529) ;
      const GGS_bool cond_5801 = (var_cas_labelStringSet.reader_hasKey (inLexique, operand_5529->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (111)) COMMA_SOURCE_FILE_AT_LINE (111))).operator_not () ;
      if (cond_5801.isBuiltAndTrue ()) {
        var_cas_inNonTerminalLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this non terminal does not declare the '")).operator_concat (operand_5529->mKey)).operator_concat (GGS_string ("' label, but declaration at "))).operator_concat (var_cas_inOriginalNonTerminalLocation.reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (114)))).operator_concat (GGS_string (" does")) COMMA_SOURCE_FILE_AT_LINE (116)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkLabelMap\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "handleNonTerminalDeclarations"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_handleNonTerminalDeclarations (C_Compiler & inLexique,
                                GGS_nonTerminalSymbolMapForGrammarAnalysis  & var_cas_ioNonTerminalMapForGrammarAnalysis,
                                const GGS_nonterminalDeclarationList   var_cas_inNonterminalDeclarationList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_handleNonTerminalDeclarations at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_nonterminalDeclarationList::cEnumerator enumerator_6135 (var_cas_inNonterminalDeclarationList, true) ;
    const GGS_nonterminalDeclarationList::cElement * operand_6135 = NULL ;
    while (((operand_6135 = enumerator_6135.nextObject ()))) {
      macroValidPointer (operand_6135) ;
      elementOf_GGS_nonTerminalSymbolMapForGrammarAnalysis * operand_6184 = (elementOf_GGS_nonTerminalSymbolMapForGrammarAnalysis *) var_cas_ioNonTerminalMapForGrammarAnalysis.searchForTolerantWithInstruction (operand_6135->mNonterminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (127))) ;
      if (NULL != operand_6184) {
        ::routine_checkLabelMap (inLexique,  operand_6135->mNonterminalName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (129)),  operand_6135->mLabels,  operand_6135->mHasParseLabel,  var_cas_ioNonTerminalMapForGrammarAnalysis.reader_locationForKey (inLexique, operand_6135->mNonterminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (132)) COMMA_SOURCE_FILE_AT_LINE (132)),  operand_6184->mInfo.mNonterminalSymbolParametersMap COMMA_SOURCE_FILE_AT_LINE (128)) ;
      }else{
        var_cas_ioNonTerminalMapForGrammarAnalysis.modifier_insertKey (inLexique, operand_6135->mNonterminalName, var_cas_ioNonTerminalMapForGrammarAnalysis.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (138)), function_transformLabelMap (inLexique, operand_6135->mLabels, operand_6135->mHasParseLabel COMMA_SOURCE_FILE_AT_LINE (139)) COMMA_SOURCE_FILE_AT_LINE (136)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_handleNonTerminalDeclarations\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@syntaxInstruction.transformInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__syntaxInstruction__transformInstruction> gDispatchTableForMethod__syntaxInstruction__transformInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__syntaxInstruction__transformInstruction (typeCategoryMethod__syntaxInstruction__transformInstruction inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__syntaxInstruction__transformInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__syntaxInstruction__transformInstruction
findCategoryMethod__syntaxInstruction__transformInstruction (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__syntaxInstruction__transformInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__syntaxInstruction__transformInstruction.count ()) {
    result = gDispatchTableForMethod__syntaxInstruction__transformInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__syntaxInstruction__transformInstruction (superClassPtr) ;
      gDispatchTableForMethod__syntaxInstruction__transformInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@semanticInstruction.transformInstruction'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticInstruction__transformInstruction (C_Compiler &,
                                const cPtr_semanticInstruction * operand_7384,
                                GGS_terminalSymbolsMapForGrammarAnalysis  & /* var_cas_ioActuallyUsedTerminalSymbolMap */,
                                const GGS_nonTerminalSymbolMapForGrammarAnalysis   /* var_cas_inNonTerminalSymbolMap */,
                                GGS_uint  & /* var_cas_ioAddedNonTerminalIndex */,
                                GGS_syntaxInstructionListForGrammarAnalysis  & /* var_cas_ioSyntaxInstructionList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7384 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "transformInstructionList"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_transformInstructionList (C_Compiler & inLexique,
                                const GGS_syntaxInstructionList   var_cas_inInstructionList,
                                GGS_terminalSymbolsMapForGrammarAnalysis  & var_cas_ioActuallyUsedTerminalSymbolMap,
                                const GGS_nonTerminalSymbolMapForGrammarAnalysis   var_cas_inNonTerminalSymbolMap,
                                GGS_uint  & var_cas_ioAddedNonTerminalIndex,
                                GGS_syntaxInstructionListForGrammarAnalysis  & var_cas_ioSyntaxInstructionList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_transformInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_syntaxInstructionList::cEnumerator enumerator_8103 (var_cas_inInstructionList, true) ;
    const GGS_syntaxInstructionList::cElement * operand_8103 = NULL ;
    while (((operand_8103 = enumerator_8103.nextObject ()))) {
      macroValidPointer (operand_8103) ;
      const GGS_syntaxInstruction  temp_8145 = operand_8103->mInstruction ;
      if (temp_8145.isBuilt ()) {
        typeCategoryMethod__syntaxInstruction__transformInstruction method = findCategoryMethod__syntaxInstruction__transformInstruction (temp_8145.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_8145 (HERE), var_cas_ioActuallyUsedTerminalSymbolMap, var_cas_inNonTerminalSymbolMap, var_cas_ioAddedNonTerminalIndex, var_cas_ioSyntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (176)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_transformInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@terminalCheckInstruction.transformInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__terminalCheckInstruction__transformInstruction (C_Compiler & inLexique,
                                const cPtr_terminalCheckInstruction * operand_8459,
                                GGS_terminalSymbolsMapForGrammarAnalysis  & var_cas_ioActuallyUsedTerminalSymbolMap,
                                const GGS_nonTerminalSymbolMapForGrammarAnalysis   /* var_cas_inNonTerminalSymbolMap */,
                                GGS_uint  & /* var_cas_ioAddedNonTerminalIndex */,
                                GGS_syntaxInstructionListForGrammarAnalysis  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8459 != NULL) {
    GGS_uint  var_cas_terminalSymbolIndex ;
    elementOf_GGS_terminalSymbolsMapForGrammarAnalysis * operand_8790 = (elementOf_GGS_terminalSymbolsMapForGrammarAnalysis *) var_cas_ioActuallyUsedTerminalSymbolMap.searchForTolerantWithInstruction (operand_8459->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (194))) ;
    if (NULL != operand_8790) {
      var_cas_terminalSymbolIndex = operand_8790->mInfo.mTerminalIndex ;
    }else{
      var_cas_terminalSymbolIndex = var_cas_ioActuallyUsedTerminalSymbolMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (197)) ;
      var_cas_ioActuallyUsedTerminalSymbolMap.modifier_insertKey (inLexique, operand_8459->mTerminalName, var_cas_terminalSymbolIndex COMMA_SOURCE_FILE_AT_LINE (198)) ;
    }
    var_cas_ioSyntaxInstructionList.addAssign_operation (GGS_terminalInstructionForGrammarAnalysis ::constructor_new (inLexique, operand_8459->mStartLocation, operand_8459->mTerminalName, var_cas_terminalSymbolIndex COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@nonterminalCallInstruction.transformInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__nonterminalCallInstruction__transformInstruction (C_Compiler & inLexique,
                                const cPtr_nonterminalCallInstruction * operand_9347,
                                GGS_terminalSymbolsMapForGrammarAnalysis  & /* var_cas_ioActuallyUsedTerminalSymbolMap */,
                                const GGS_nonTerminalSymbolMapForGrammarAnalysis   var_cas_inNonTerminalSymbolMap,
                                GGS_uint  & /* var_cas_ioAddedNonTerminalIndex */,
                                GGS_syntaxInstructionListForGrammarAnalysis  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9347 != NULL) {
    GGS_uint  var_cas_nonTerminalSymbolIndex ;
    GGS_nonterminalSymbolLabelMapForGrammarAnalysis  automatic_var_0 ;
    const GGS_nonTerminalSymbolMapForGrammarAnalysis  temp_9676 = var_cas_inNonTerminalSymbolMap ;
    if (temp_9676.isBuilt ()) {
      temp_9676 (HERE)->method_searchKey (inLexique, operand_9347->mNonterminalName, var_cas_nonTerminalSymbolIndex, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (216)) ;
    }
    var_cas_ioSyntaxInstructionList.addAssign_operation (GGS_nonTerminalInstructionForGrammarAnalysis ::constructor_new (inLexique, operand_9347->mStartLocation, operand_9347->mNonterminalName, var_cas_nonTerminalSymbolIndex COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@repeatInstruction.transformInstruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__repeatInstruction__transformInstruction (C_Compiler & inLexique,
                                const cPtr_repeatInstruction * operand_10026,
                                GGS_terminalSymbolsMapForGrammarAnalysis  & var_cas_ioActuallyUsedTerminalSymbolMap,
                                const GGS_nonTerminalSymbolMapForGrammarAnalysis   var_cas_inNonTerminalSymbolMap,
                                GGS_uint  & var_cas_ioAddedNonTerminalIndex,
                                GGS_syntaxInstructionListForGrammarAnalysis  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10026 != NULL) {
    const GGS_uint  var_cas_addedNonTerminalIndex = var_cas_ioAddedNonTerminalIndex ;
    var_cas_ioAddedNonTerminalIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (233)) ;
    GGS_syntaxInstructionListForGrammarAnalysis  var_cas_repeatedInstructionList = GGS_syntaxInstructionListForGrammarAnalysis ::constructor_emptyList () ;
    ::routine_transformInstructionList (inLexique,  operand_10026->mRepeatedInstructionList,  var_cas_ioActuallyUsedTerminalSymbolMap,  var_cas_inNonTerminalSymbolMap,  var_cas_ioAddedNonTerminalIndex,  var_cas_repeatedInstructionList COMMA_SOURCE_FILE_AT_LINE (236)) ;
    GGS_branchListForGrammarAnalysis  var_cas_repeatBranchList = GGS_branchListForGrammarAnalysis ::constructor_listWithValue (var_cas_repeatedInstructionList) ;
    {
      GGS_listOfSyntaxInstructionList::cEnumerator enumerator_10758 (operand_10026->mRepeatBranchList, true) ;
      const GGS_listOfSyntaxInstructionList::cElement * operand_10758 = NULL ;
      while (((operand_10758 = enumerator_10758.nextObject ()))) {
        macroValidPointer (operand_10758) ;
        GGS_syntaxInstructionListForGrammarAnalysis  var_cas_syntaxInstructionList = GGS_syntaxInstructionListForGrammarAnalysis ::constructor_emptyList () ;
        ::routine_transformInstructionList (inLexique,  operand_10758->mSyntaxInstructionList,  var_cas_ioActuallyUsedTerminalSymbolMap,  var_cas_inNonTerminalSymbolMap,  var_cas_ioAddedNonTerminalIndex,  var_cas_syntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (247)) ;
        var_cas_repeatBranchList.addAssign_operation (var_cas_syntaxInstructionList) ;
      }
    }
    var_cas_ioSyntaxInstructionList.addAssign_operation (GGS_repeatInstructionForGrammarAnalysis ::constructor_new (inLexique, operand_10026->mStartLocation, var_cas_repeatBranchList, var_cas_addedNonTerminalIndex COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@selectInstruction.transformInstruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__selectInstruction__transformInstruction (C_Compiler & inLexique,
                                const cPtr_selectInstruction * operand_11401,
                                GGS_terminalSymbolsMapForGrammarAnalysis  & var_cas_ioActuallyUsedTerminalSymbolMap,
                                const GGS_nonTerminalSymbolMapForGrammarAnalysis   var_cas_inNonTerminalSymbolMap,
                                GGS_uint  & var_cas_ioAddedNonTerminalIndex,
                                GGS_syntaxInstructionListForGrammarAnalysis  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11401 != NULL) {
    const GGS_uint  var_cas_addedNonTerminalIndex = var_cas_ioAddedNonTerminalIndex ;
    var_cas_ioAddedNonTerminalIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (273)) ;
    GGS_branchListForGrammarAnalysis  var_cas_selectBranchList = GGS_branchListForGrammarAnalysis ::constructor_emptyList () ;
    {
      GGS_listOfSyntaxInstructionList::cEnumerator enumerator_11835 (operand_11401->mSelectBranchList, true) ;
      const GGS_listOfSyntaxInstructionList::cElement * operand_11835 = NULL ;
      while (((operand_11835 = enumerator_11835.nextObject ()))) {
        macroValidPointer (operand_11835) ;
        GGS_syntaxInstructionListForGrammarAnalysis  var_cas_syntaxInstructionList = GGS_syntaxInstructionListForGrammarAnalysis ::constructor_emptyList () ;
        ::routine_transformInstructionList (inLexique,  operand_11835->mSyntaxInstructionList,  var_cas_ioActuallyUsedTerminalSymbolMap,  var_cas_inNonTerminalSymbolMap,  var_cas_ioAddedNonTerminalIndex,  var_cas_syntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (278)) ;
        var_cas_selectBranchList.addAssign_operation (var_cas_syntaxInstructionList) ;
      }
    }
    var_cas_ioSyntaxInstructionList.addAssign_operation (GGS_selectInstructionForGrammarAnalysis ::constructor_new (inLexique, operand_11401->mStartLocation, var_cas_selectBranchList, var_cas_addedNonTerminalIndex COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@parseDoInstruction.transformInstruction'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__parseDoInstruction__transformInstruction (C_Compiler & inLexique,
                                const cPtr_parseDoInstruction * operand_12479,
                                GGS_terminalSymbolsMapForGrammarAnalysis  & var_cas_ioActuallyUsedTerminalSymbolMap,
                                const GGS_nonTerminalSymbolMapForGrammarAnalysis   var_cas_inNonTerminalSymbolMap,
                                GGS_uint  & var_cas_ioAddedNonTerminalIndex,
                                GGS_syntaxInstructionListForGrammarAnalysis  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12479 != NULL) {
    GGS_syntaxInstructionList  var_cas_syntaxInstructionList ;
    const GGS_listOfSyntaxInstructionList  temp_12802 = operand_12479->mParseDoBranchList ;
    if (temp_12802.isBuilt ()) {
      temp_12802 (HERE)->method_first (inLexique, var_cas_syntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (304)) ;
    }
    ::routine_transformInstructionList (inLexique,  var_cas_syntaxInstructionList,  var_cas_ioActuallyUsedTerminalSymbolMap,  var_cas_inNonTerminalSymbolMap,  var_cas_ioAddedNonTerminalIndex,  var_cas_ioSyntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (306)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@parseWhenInstruction.transformInstruction'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__parseWhenInstruction__transformInstruction (C_Compiler & inLexique,
                                const cPtr_parseWhenInstruction * operand_13165,
                                GGS_terminalSymbolsMapForGrammarAnalysis  & var_cas_ioActuallyUsedTerminalSymbolMap,
                                const GGS_nonTerminalSymbolMapForGrammarAnalysis   var_cas_inNonTerminalSymbolMap,
                                GGS_uint  & var_cas_ioAddedNonTerminalIndex,
                                GGS_syntaxInstructionListForGrammarAnalysis  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13165 != NULL) {
    ::routine_transformInstructionList (inLexique,  operand_13165->mElseInstructionList,  var_cas_ioActuallyUsedTerminalSymbolMap,  var_cas_inNonTerminalSymbolMap,  var_cas_ioAddedNonTerminalIndex,  var_cas_ioSyntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (323)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@parseLoopInstruction.transformInstruction'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__parseLoopInstruction__transformInstruction (C_Compiler & inLexique,
                                const cPtr_parseLoopInstruction * operand_13746,
                                GGS_terminalSymbolsMapForGrammarAnalysis  & var_cas_ioActuallyUsedTerminalSymbolMap,
                                const GGS_nonTerminalSymbolMapForGrammarAnalysis   var_cas_inNonTerminalSymbolMap,
                                GGS_uint  & var_cas_ioAddedNonTerminalIndex,
                                GGS_syntaxInstructionListForGrammarAnalysis  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13746 != NULL) {
    ::routine_transformInstructionList (inLexique,  operand_13746->mDoInstructionList,  var_cas_ioActuallyUsedTerminalSymbolMap,  var_cas_inNonTerminalSymbolMap,  var_cas_ioAddedNonTerminalIndex,  var_cas_ioSyntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (340)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@blockInstruction.transformInstruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__blockInstruction__transformInstruction (C_Compiler & inLexique,
                                const cPtr_blockInstruction * operand_14321,
                                GGS_terminalSymbolsMapForGrammarAnalysis  & var_cas_ioActuallyUsedTerminalSymbolMap,
                                const GGS_nonTerminalSymbolMapForGrammarAnalysis   var_cas_inNonTerminalSymbolMap,
                                GGS_uint  & var_cas_ioAddedNonTerminalIndex,
                                GGS_syntaxInstructionListForGrammarAnalysis  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14321 != NULL) {
    ::routine_transformInstructionList (inLexique,  operand_14321->mInstructionList,  var_cas_ioActuallyUsedTerminalSymbolMap,  var_cas_inNonTerminalSymbolMap,  var_cas_ioAddedNonTerminalIndex,  var_cas_ioSyntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (357)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "buildRuleList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildRuleList (C_Compiler & inLexique,
                                const GGS_nonTerminalSymbolMapForGrammarAnalysis   var_cas_inNonTerminalMapForGrammarAnalysis,
                                const GGS_lstring   var_cas_inSyntaxComponentName,
                                const GGS_syntaxRuleList   var_cas_inRuleList,
                                GGS_terminalSymbolsMapForGrammarAnalysis  & var_cas_ioActuallyUsedTerminalSymbolMap,
                                GGS_syntaxComponentListForGrammarAnalysis  & var_cas_ioSyntaxComponentListForGrammarAnalysis,
                                GGS_uint  & var_cas_ioAddedNonTerminalCount COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildRuleList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_productionRuleListForGrammarAnalysis  var_cas_productionRulesList = GGS_productionRuleListForGrammarAnalysis ::constructor_emptyList () ;
  {
    GGS_syntaxRuleList::cEnumerator enumerator_15294 (var_cas_inRuleList, true) ;
    const GGS_syntaxRuleList::cElement * operand_15294 = NULL ;
    while (((operand_15294 = enumerator_15294.nextObject ()))) {
      macroValidPointer (operand_15294) ;
      GGS_uint  var_cas_nonTerminalIndex ;
      GGS_nonterminalSymbolLabelMapForGrammarAnalysis  var_cas_nonterminalSymbolParametersMap ;
      const GGS_nonTerminalSymbolMapForGrammarAnalysis  temp_15458 = var_cas_inNonTerminalMapForGrammarAnalysis ;
      if (temp_15458.isBuilt ()) {
        temp_15458 (HERE)->method_searchKey (inLexique, operand_15294->mNonterminalName, var_cas_nonTerminalIndex, var_cas_nonterminalSymbolParametersMap COMMA_SOURCE_FILE_AT_LINE (380)) ;
      }
      GGS_syntaxInstructionList  var_cas_parsedSyntaxInstructionList ;
      GGS_lstring  automatic_var_1 ;
      GGS_formalParameterList  automatic_var_2 ;
      const GGS_syntaxRuleLabelList  temp_15654 = operand_15294->mLabelList ;
      if (temp_15654.isBuilt ()) {
        temp_15654 (HERE)->method_first (inLexique, automatic_var_1, automatic_var_2, var_cas_parsedSyntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (382)) ;
      }
      GGS_syntaxInstructionListForGrammarAnalysis  var_cas_instructionList = GGS_syntaxInstructionListForGrammarAnalysis ::constructor_emptyList () ;
      ::routine_transformInstructionList (inLexique,  var_cas_parsedSyntaxInstructionList,  var_cas_ioActuallyUsedTerminalSymbolMap,  var_cas_inNonTerminalMapForGrammarAnalysis,  var_cas_ioAddedNonTerminalCount,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (385)) ;
      var_cas_productionRulesList.addAssign_operation (operand_15294->mNonterminalName, var_cas_nonTerminalIndex, var_cas_instructionList) ;
    }
  }
  var_cas_ioSyntaxComponentListForGrammarAnalysis.addAssign_operation (var_cas_productionRulesList, var_cas_inSyntaxComponentName) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildRuleList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "compileGrammarComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileGrammarComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  var_cas_inOutputDirectoryForCppFiles,
                                const GGS_string  var_cas_inOutputDirectoryForHTMLFile,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileGrammarComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_grammarComponentRoot  var_cas_grammarComponentRoot ;
  const GGS_string _depExtension = GGS_string ("") ;
  const GGS_string _depPath = GGS_string ("") ;
  if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
    grammarLL1grammar::_performSourceFileParsing_ (inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_inSourceFile,
                                  var_cas_grammarComponentRoot
                                  COMMA_SOURCE_FILE_AT_LINE (414)) ;
  }
  const GGS_lstring  var_cas_grammarComponentName = var_cas_grammarComponentRoot.reader_mGrammarName (inLexique COMMA_SOURCE_FILE_AT_LINE (416)) ;
  const GGS_string var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (417)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (417)) ;
  const GGS_bool cond_17164 = (var_cas_grammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (418))).operator_isNotEqual (var_cas_basename) ;
  if (cond_17164.isBuiltAndTrue ()) {
    var_cas_grammarComponentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS checks "
      "the component name ('")).operator_concat (var_cas_grammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (420)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (422)) ;
  }
  GGS_terminalSymbolsMapForGrammarAnalysis  var_cas_actuallyUsedTerminalSymbolMap = GGS_terminalSymbolsMapForGrammarAnalysis ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_nonTerminalSymbolMapForGrammarAnalysis  var_cas_nonTerminalMapForGrammarAnalysis = GGS_nonTerminalSymbolMapForGrammarAnalysis ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_string var_cas_lexiqueComponentName = GGS_string ("") ;
  GGS_syntaxComponentListForGrammarAnalysis  var_cas_syntaxComponentListForGrammarAnalysis = GGS_syntaxComponentListForGrammarAnalysis ::constructor_emptyList () ;
  GGS_uint  var_cas_addedNonTerminalCount = GGS_uint (0U) ;
  {
    GGS_lstringlist::cEnumerator enumerator_17634 (var_cas_grammarComponentRoot.reader_mSyntaxComponents (inLexique COMMA_SOURCE_FILE_AT_LINE (430)), true) ;
    const GGS_lstringlist::cElement * operand_17634 = NULL ;
    while (((operand_17634 = enumerator_17634.nextObject ()))) {
      macroValidPointer (operand_17634) ;
      const GGS_bool cond_17870 = ((operand_17634->mValue.ggs_string ().reader_pathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (431))).operator_isNotEqual (GGS_string ("gSyntax"))).operator_and ((operand_17634->mValue.ggs_string ().reader_pathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (431))).operator_isNotEqual (GGS_string ("ggs"))) ;
      if (cond_17870.isBuiltAndTrue ()) {
        operand_17634->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a syntax component file should have '.ggs' or '.gSyntax' as path extension") COMMA_SOURCE_FILE_AT_LINE (433)) ;
      }else if (cond_17870.isBuiltAndFalse ()) {
        GGS_string var_cas_syntaxComponentName = operand_17634->mValue.ggs_string ().reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (434)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (434)) ;
        GGS_syntaxComponentRoot  var_cas_syntaxComponentRoot ;
        const GGS_bool cond_18262 = var_cas_ioParsedComponentStruct.reader_mParsedSyntaxComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (436)).reader_hasKey (inLexique, var_cas_syntaxComponentName COMMA_SOURCE_FILE_AT_LINE (436)) ;
        if (cond_18262.isBuiltAndTrue ()) {
          const GGS_parsedSyntaxComponentMap  temp_18184 = var_cas_ioParsedComponentStruct.reader_mParsedSyntaxComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (437)) ;
          if (temp_18184.isBuilt ()) {
            temp_18184 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_syntaxComponentName, GGS_location (inLexique) COMMA_HERE), var_cas_syntaxComponentRoot COMMA_SOURCE_FILE_AT_LINE (437)) ;
          }
        }else if (cond_18262.isBuiltAndFalse ()) {
          GGS_string var_cas_sourceFilePath = operand_17634->mValue.ggs_string ().reader_absolutePathFromPath (inLexique, var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (439)) COMMA_SOURCE_FILE_AT_LINE (439)) ;
          const GGS_string _depExtension = GGS_string ("") ;
          const GGS_string _depPath = GGS_string ("") ;
          if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
            syntaxSLRgrammar::_performSourceFileParsing_ (inLexique,
                                          _depExtension.string (),
                                          _depPath.string (),
                                          NULL,
                                          GGS_lstring ::constructor_new (inLexique, var_cas_sourceFilePath, operand_17634->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (440)) COMMA_HERE),
                                          var_cas_syntaxComponentRoot
                                          COMMA_SOURCE_FILE_AT_LINE (440)) ;
          }
          var_cas_ioParsedComponentStruct.mParsedSyntaxComponentMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_syntaxComponentName, operand_17634->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (441)) COMMA_HERE), var_cas_syntaxComponentRoot COMMA_SOURCE_FILE_AT_LINE (441)) ;
        }
        GGS_string var_cas_currentLexiqueName = var_cas_syntaxComponentRoot.reader_mImportedLexiqueReference (inLexique COMMA_SOURCE_FILE_AT_LINE (444)).ggs_string ().reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (444)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (444)) ;
        const GGS_bool cond_18931 = (var_cas_lexiqueComponentName).operator_isEqual (GGS_string ("")) ;
        if (cond_18931.isBuiltAndTrue ()) {
          var_cas_lexiqueComponentName = var_cas_currentLexiqueName ;
        }else if (cond_18931.isBuiltAndFalse ()) {
          const GGS_bool cond_19226 = (var_cas_lexiqueComponentName).operator_isNotEqual (var_cas_currentLexiqueName) ;
          if (cond_19226.isBuiltAndTrue ()) {
            operand_17634->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this syntax component uses '")).operator_concat (var_cas_currentLexiqueName)).operator_concat (GGS_string ("' lexique component, but the first syntax component uses the '"))).operator_concat (var_cas_lexiqueComponentName)).operator_concat (GGS_string ("' lexique component (they should be the same)")) COMMA_SOURCE_FILE_AT_LINE (451)) ;
          }
        }
        ::routine_handleNonTerminalDeclarations (inLexique,  var_cas_nonTerminalMapForGrammarAnalysis,  var_cas_syntaxComponentRoot.reader_mNonterminalDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (455)) COMMA_SOURCE_FILE_AT_LINE (453)) ;
        ::routine_buildRuleList (inLexique,  var_cas_nonTerminalMapForGrammarAnalysis,  var_cas_syntaxComponentRoot.reader_mSyntaxComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (460)),  var_cas_syntaxComponentRoot.reader_mRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (461)),  var_cas_actuallyUsedTerminalSymbolMap,  var_cas_syntaxComponentListForGrammarAnalysis,  var_cas_addedNonTerminalCount COMMA_SOURCE_FILE_AT_LINE (458)) ;
      }
    }
  }
  GGS_nonterminalSymbolLabelMapForGrammarAnalysis  var_cas_startSymbolAltMap ;
  GGS_uint  var_cas_startSymbolIndex ;
  const GGS_nonTerminalSymbolMapForGrammarAnalysis  temp_20018 = var_cas_nonTerminalMapForGrammarAnalysis ;
  if (temp_20018.isBuilt ()) {
    temp_20018 (HERE)->method_searchKey (inLexique, var_cas_grammarComponentRoot.reader_mStartSymbolName (inLexique COMMA_SOURCE_FILE_AT_LINE (472)), var_cas_startSymbolIndex, var_cas_startSymbolAltMap COMMA_SOURCE_FILE_AT_LINE (472)) ;
  }
  ::routine_checkLabelMap (inLexique,  var_cas_grammarComponentRoot.reader_mStartSymbolName (inLexique COMMA_SOURCE_FILE_AT_LINE (475)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (475)),  var_cas_grammarComponentRoot.reader_mStartSymbolLabelList (inLexique COMMA_SOURCE_FILE_AT_LINE (476)),  var_cas_grammarComponentRoot.reader_mStartSymbolHasParseLabel (inLexique COMMA_SOURCE_FILE_AT_LINE (477)),  var_cas_nonTerminalMapForGrammarAnalysis.reader_locationForKey (inLexique, var_cas_grammarComponentRoot.reader_mStartSymbolName (inLexique COMMA_SOURCE_FILE_AT_LINE (478)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (478)) COMMA_SOURCE_FILE_AT_LINE (478)),  var_cas_startSymbolAltMap COMMA_SOURCE_FILE_AT_LINE (474)) ;
  GGS_unusedNonTerminalSymbolMapForGrammarAnalysis  var_cas_unusedNonTerminalSymbolsForGrammar = GGS_unusedNonTerminalSymbolMapForGrammarAnalysis ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_lstringlist::cEnumerator enumerator_20625 (var_cas_grammarComponentRoot.reader_mUnusedNonterminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (483)), true) ;
    const GGS_lstringlist::cElement * operand_20625 = NULL ;
    while (((operand_20625 = enumerator_20625.nextObject ()))) {
      macroValidPointer (operand_20625) ;
      GGS_uint  var_cas_nonterminalIndex ;
      GGS_nonterminalSymbolLabelMapForGrammarAnalysis  automatic_var_3 ;
      const GGS_nonTerminalSymbolMapForGrammarAnalysis  temp_20749 = var_cas_nonTerminalMapForGrammarAnalysis ;
      if (temp_20749.isBuilt ()) {
        temp_20749 (HERE)->method_searchKey (inLexique, operand_20625->mValue, var_cas_nonterminalIndex, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (485)) ;
      }
      var_cas_unusedNonTerminalSymbolsForGrammar.modifier_insertKey (inLexique, operand_20625->mValue, var_cas_nonterminalIndex COMMA_SOURCE_FILE_AT_LINE (486)) ;
    }
  }
  if (var_cas_grammarComponentRoot.reader_mGrammarName (inLexique COMMA_SOURCE_FILE_AT_LINE (490)).isBuilt () &&
      var_cas_grammarComponentRoot.reader_mGrammarClass (inLexique COMMA_SOURCE_FILE_AT_LINE (491)).isBuilt () &&
      var_cas_startSymbolIndex.isBuilt () &&
      var_cas_lexiqueComponentName.isBuilt () &&
      var_cas_grammarComponentRoot.reader_mEndOfSourceText (inLexique COMMA_SOURCE_FILE_AT_LINE (494)).isBuilt () &&
      var_cas_actuallyUsedTerminalSymbolMap.isBuilt () &&
      var_cas_syntaxComponentListForGrammarAnalysis.isBuilt () &&
      var_cas_nonTerminalMapForGrammarAnalysis.isBuilt () &&
      var_cas_unusedNonTerminalSymbolsForGrammar.isBuilt () &&
      var_cas_inOutputDirectoryForCppFiles.isBuilt () &&
      var_cas_inOutputDirectoryForHTMLFile.isBuilt ()) {
    ::routine_analyzeGrammar (inLexique,  var_cas_grammarComponentRoot.reader_mGrammarName (inLexique COMMA_SOURCE_FILE_AT_LINE (490)),  var_cas_grammarComponentRoot.reader_mGrammarClass (inLexique COMMA_SOURCE_FILE_AT_LINE (491)),  var_cas_startSymbolIndex,  var_cas_lexiqueComponentName,  var_cas_grammarComponentRoot.reader_mEndOfSourceText (inLexique COMMA_SOURCE_FILE_AT_LINE (494)),  var_cas_actuallyUsedTerminalSymbolMap,  var_cas_syntaxComponentListForGrammarAnalysis,  var_cas_nonTerminalMapForGrammarAnalysis,  var_cas_unusedNonTerminalSymbolsForGrammar,  var_cas_inOutputDirectoryForCppFiles,  var_cas_inOutputDirectoryForHTMLFile COMMA_SOURCE_FILE_AT_LINE (489)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileGrammarComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_grammarCompilation (void) {
 enterCategoryMethod__syntaxInstruction__transformInstruction ((typeCategoryMethod__syntaxInstruction__transformInstruction) category_method__semanticInstruction__transformInstruction, gClassInfoFor__semanticInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__transformInstruction ((typeCategoryMethod__syntaxInstruction__transformInstruction) category_method__terminalCheckInstruction__transformInstruction, gClassInfoFor__terminalCheckInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__transformInstruction ((typeCategoryMethod__syntaxInstruction__transformInstruction) category_method__nonterminalCallInstruction__transformInstruction, gClassInfoFor__nonterminalCallInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__transformInstruction ((typeCategoryMethod__syntaxInstruction__transformInstruction) category_method__repeatInstruction__transformInstruction, gClassInfoFor__repeatInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__transformInstruction ((typeCategoryMethod__syntaxInstruction__transformInstruction) category_method__selectInstruction__transformInstruction, gClassInfoFor__selectInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__transformInstruction ((typeCategoryMethod__syntaxInstruction__transformInstruction) category_method__parseDoInstruction__transformInstruction, gClassInfoFor__parseDoInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__transformInstruction ((typeCategoryMethod__syntaxInstruction__transformInstruction) category_method__parseWhenInstruction__transformInstruction, gClassInfoFor__parseWhenInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__transformInstruction ((typeCategoryMethod__syntaxInstruction__transformInstruction) category_method__parseLoopInstruction__transformInstruction, gClassInfoFor__parseLoopInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__transformInstruction ((typeCategoryMethod__syntaxInstruction__transformInstruction) category_method__blockInstruction__transformInstruction, gClassInfoFor__blockInstruction.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_grammarCompilation (prologueRoutineFor_grammarCompilation,
                                   NULL) ;

//---------------------------------------------------------------------------*

