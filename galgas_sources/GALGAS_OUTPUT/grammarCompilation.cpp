//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'grammarCompilation.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     november 7th, 2009, at 14h43'49"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "grammarCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "grammarCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "grammarLL1grammar.h"
#include "syntaxSLRgrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'e_nonTerminalMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

e_nonTerminalMap::e_nonTerminalMap (void) :
mLabels (),
mHasParseLabel () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class map '@nonTerminalMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_nonTerminalMap::
elementOf_GGS_nonTerminalMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_nonTerminalMap & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_nonTerminalMap::
appendForMapDescription (C_Compiler & inLexique,
                         const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mLabels.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mHasParseLabel.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_nonTerminalMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_nonTerminalMap * ptr = dynamic_cast <const elementOf_GGS_nonTerminalMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mLabels.operator_isEqual (ptr->mInfo.mLabels)).boolValue ()
           && (mInfo.mHasParseLabel.operator_isEqual (ptr->mInfo.mHasParseLabel)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_nonTerminalMap::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_nonTerminalMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_nonTerminalMap * info = (e_nonTerminalMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_nonTerminalMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_nonTerminalMap * info = (e_nonTerminalMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_nonTerminalMap GGS_nonTerminalMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_nonTerminalMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalMap::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_nonTerminalMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_nonTerminalMap::
operator_isEqual (const GGS_nonTerminalMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_nonTerminalMap::
operator_isNotEqual (const GGS_nonTerminalMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalMap::
insertElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_nonTerminalLabelList & inParameter0,
                const GGS_bool& inParameter1,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap () ;
    e_nonTerminalMap info  ;
    info.mLabels = inParameter0 ;
    info.mHasParseLabel = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalMap::
searchElement (C_Compiler & inLexique,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_nonTerminalLabelList   & outParameter0,
               GGS_bool  & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mLabels ;
    outParameter1 = node->mInfo.mHasParseLabel ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_nonTerminalMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('@'),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_nonTerminalMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_nonTerminalLabelList   & outParameter0,
                                GGS_bool  & outParameter1 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                  kSearchMessage_searchKey,
                  inKey,
                  outParameter0,
                  outParameter1,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_nonTerminalMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('@'),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_nonTerminalMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_nonTerminalLabelList & inParameter0,
                                const GGS_bool& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_nonTerminalMap GGS_nonTerminalMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_nonTerminalMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_nonTerminalMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonTerminalMap GGS_nonTerminalMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_nonTerminalMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_nonTerminalMap::
reader_description (C_Compiler & inLexique
                    COMMA_LOCATION_ARGS,
                    const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @nonTerminalMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    PMSInt32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_nonTerminalLabelList  & GGS_nonTerminalMap::cEnumerator::_mLabels (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mLabels ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_nonTerminalMap::cEnumerator::_mHasParseLabel (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mHasParseLabel ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "handleNonTerminalDeclarations"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_handleNonTerminalDeclarations (C_Compiler & inLexique,
                                GGS_nonTerminalMap  & var_cas_ioNonTerminalMap,
                                const GGS_nonterminalDeclarationList   var_cas_inNonterminalDeclarationList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_handleNonTerminalDeclarations at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_nonterminalDeclarationList::cEnumerator enumerator_3135 (var_cas_inNonterminalDeclarationList, true) ;
    const GGS_nonterminalDeclarationList::cElement * operand_3135 = NULL ;
    while (((operand_3135 = enumerator_3135.nextObject ()))) {
      macroValidPointer (operand_3135) ;
      const GGS_bool cond_5868 = var_cas_ioNonTerminalMap.reader_hasKey (inLexique, operand_3135->mNonterminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (56)) COMMA_SOURCE_FILE_AT_LINE (56)) ;
      if (cond_5868.isBuiltAndTrue ()) {
        GGS_nonTerminalLabelList  var_cas_labels ;
        GGS_bool var_cas_hasParseLabel ;
        const GGS_nonTerminalMap  temp_3302 = var_cas_ioNonTerminalMap ;
        if (temp_3302.isBuilt ()) {
          temp_3302 (HERE)->method_searchKey (inLexique, operand_3135->mNonterminalName, var_cas_labels, var_cas_hasParseLabel COMMA_SOURCE_FILE_AT_LINE (59)) ;
        }
        const GGS_bool cond_3721 = (operand_3135->mHasParseLabel).operator_and ((var_cas_hasParseLabel).operator_not ()) ;
        if (cond_3721.isBuiltAndTrue ()) {
          operand_3135->mNonterminalName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this declaration has a 'parse' label, but declaration of the same non terminal in ")).operator_concat (var_cas_ioNonTerminalMap.reader_locationForKey (inLexique, operand_3135->mNonterminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (67)) COMMA_SOURCE_FILE_AT_LINE (67)).reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (67)))).operator_concat (GGS_string (" does not have a 'parse' label")) COMMA_SOURCE_FILE_AT_LINE (69)) ;
        }else if (cond_3721.isBuiltAndFalse ()) {
          const GGS_bool cond_4016 = ((operand_3135->mHasParseLabel).operator_not ()).operator_and (var_cas_hasParseLabel) ;
          if (cond_4016.isBuiltAndTrue ()) {
            operand_3135->mNonterminalName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this declaration has no 'parse' label, but declaration of the same non terminal in ")).operator_concat (var_cas_ioNonTerminalMap.reader_locationForKey (inLexique, operand_3135->mNonterminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (71)) COMMA_SOURCE_FILE_AT_LINE (71)).reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (71)))).operator_concat (GGS_string (" has a 'parse' label")) COMMA_SOURCE_FILE_AT_LINE (73)) ;
          }
        }
        const GGS_bool cond_4461 = (var_cas_labels.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (75))).operator_isNotEqual (operand_3135->mLabels.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (75))) ;
        if (cond_4461.isBuiltAndTrue ()) {
          operand_3135->mNonterminalName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("this declaration names ")).operator_concat (operand_3135->mLabels.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (77)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (77)))).operator_concat (GGS_string (" labels, but declaration of the same non terminal in "))).operator_concat (var_cas_ioNonTerminalMap.reader_locationForKey (inLexique, operand_3135->mNonterminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (79)) COMMA_SOURCE_FILE_AT_LINE (79)).reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (79)))).operator_concat (GGS_string (" names"))).operator_concat (var_cas_labels.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (81)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (81)))).operator_concat (GGS_string (" labels.")) COMMA_SOURCE_FILE_AT_LINE (84)) ;
        }else if (cond_4461.isBuiltAndFalse ()) {
          {
            GGS_nonTerminalLabelList::cEnumerator enumerator_4485 (operand_3135->mLabels, true) ;
            const GGS_nonTerminalLabelList::cElement * operand_4485 = NULL ;
            GGS_nonTerminalLabelList::cEnumerator enumerator_4493 (var_cas_labels, true) ;
            const GGS_nonTerminalLabelList::cElement * operand_4493 = NULL ;
            while (((operand_4485 = enumerator_4485.nextObject ()))
                && ((operand_4493 = enumerator_4493.nextObject ()))) {
              macroValidPointer (operand_4485) ;
              macroValidPointer (operand_4493) ;
              const GGS_bool cond_4813 = (operand_4485->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (86))).operator_isNotEqual (operand_4493->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (86))) ;
              if (cond_4813.isBuiltAndTrue ()) {
                operand_4485->mLabelName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("this label should be identical to the label '")).operator_concat (operand_4493->mLabelName)).operator_concat (GGS_string ("' declared in "))).operator_concat (operand_4493->mLabelName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (90)).reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (90))) COMMA_SOURCE_FILE_AT_LINE (92)) ;
              }
              {
                GGS_formalParameterList::cEnumerator enumerator_4854 (operand_4485->mFormalParameters, true) ;
                const GGS_formalParameterList::cElement * operand_4854 = NULL ;
                GGS_formalParameterList::cEnumerator enumerator_4880 (operand_4493->mFormalParameters, true) ;
                const GGS_formalParameterList::cElement * operand_4880 = NULL ;
                while (((operand_4854 = enumerator_4854.nextObject ()))
                    && ((operand_4880 = enumerator_4880.nextObject ()))) {
                  macroValidPointer (operand_4854) ;
                  macroValidPointer (operand_4880) ;
                  const GGS_bool cond_5401 = (operand_4854->mFormalParameterPassingMode).operator_isNotEqual (operand_4880->mFormalParameterPassingMode) ;
                  if (cond_5401.isBuiltAndTrue ()) {
                    operand_4854->mFormalParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("the passing mode (")).operator_concat (operand_4854->mFormalParameterPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (97)))).operator_concat (GGS_string (") for this parameter should be identical to the passing mode ("))).operator_concat (operand_4880->mFormalParameterPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (99)))).operator_concat (GGS_string (") of the parameter declared in"))).operator_concat (operand_4493->mLabelName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (101)).reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (101))) COMMA_SOURCE_FILE_AT_LINE (103)) ;
                  }
                  const GGS_bool cond_5793 = (operand_4854->mFormalParameterTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (104))).operator_isNotEqual (operand_4880->mFormalParameterTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (104))) ;
                  if (cond_5793.isBuiltAndTrue ()) {
                    operand_4854->mFormalParameterTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("this type name should be identical to the '@")).operator_concat (operand_4880->mFormalParameterTypeName)).operator_concat (GGS_string ("' type name used in "))).operator_concat (operand_4880->mFormalParameterTypeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (108)).reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (108))) COMMA_SOURCE_FILE_AT_LINE (110)) ;
                  }
                }
              }
            }
          }
        }
      }else if (cond_5868.isBuiltAndFalse ()) {
        var_cas_ioNonTerminalMap.modifier_insertKey (inLexique, operand_3135->mNonterminalName, operand_3135->mLabels, operand_3135->mHasParseLabel COMMA_SOURCE_FILE_AT_LINE (115)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_handleNonTerminalDeclarations\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@syntaxInstruction.buildSyntaxInstructionList'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList> gDispatchTableForMethod__syntaxInstruction__buildSyntaxInstructionList ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList (typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__syntaxInstruction__buildSyntaxInstructionList.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList
findCategoryMethod__syntaxInstruction__buildSyntaxInstructionList (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__syntaxInstruction__buildSyntaxInstructionList.count ()) {
    result = gDispatchTableForMethod__syntaxInstruction__buildSyntaxInstructionList (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__syntaxInstruction__buildSyntaxInstructionList (superClassPtr) ;
      gDispatchTableForMethod__syntaxInstruction__buildSyntaxInstructionList.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "buildSyntaxInstructionList"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildSyntaxInstructionList (C_Compiler & inLexique,
                                const GGS_syntaxInstructionList   var_cas_inInstructionList,
                                GGS_syntaxInstructionList  & var_cas_outSyntaxInstructionList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildSyntaxInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outSyntaxInstructionList = GGS_syntaxInstructionList ::constructor_emptyList () ;
  {
    GGS_syntaxInstructionList::cEnumerator enumerator_7002 (var_cas_inInstructionList, true) ;
    const GGS_syntaxInstructionList::cElement * operand_7002 = NULL ;
    while (((operand_7002 = enumerator_7002.nextObject ()))) {
      macroValidPointer (operand_7002) ;
      const GGS_syntaxInstruction  temp_7050 = operand_7002->mInstruction ;
      if (temp_7050.isBuilt ()) {
        typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList method = findCategoryMethod__syntaxInstruction__buildSyntaxInstructionList (temp_7050.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_7050 (HERE), var_cas_outSyntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (144)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildSyntaxInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@semanticInstruction.buildSyntaxInstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticInstruction__buildSyntaxInstructionList (C_Compiler &,
                                const cPtr_semanticInstruction * operand_7410,
                                GGS_syntaxInstructionList  & /* var_cas_ioSyntaxInstructionList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7410 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@nonterminalCallInstruction.buildSyntaxInstructionList'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__nonterminalCallInstruction__buildSyntaxInstructionList (C_Compiler &,
                                const cPtr_nonterminalCallInstruction * operand_7634,
                                GGS_syntaxInstructionList  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7634 != NULL) {
    var_cas_ioSyntaxInstructionList.addAssign_operation (operand_7634) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@terminalCheckInstruction.buildSyntaxInstructionList'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__terminalCheckInstruction__buildSyntaxInstructionList (C_Compiler &,
                                const cPtr_terminalCheckInstruction * operand_7886,
                                GGS_syntaxInstructionList  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7886 != NULL) {
    var_cas_ioSyntaxInstructionList.addAssign_operation (operand_7886) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@repeatInstruction.buildSyntaxInstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__repeatInstruction__buildSyntaxInstructionList (C_Compiler & inLexique,
                                const cPtr_repeatInstruction * operand_8131,
                                GGS_syntaxInstructionList  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8131 != NULL) {
    GGS_syntaxInstructionList  var_cas_repeatedInstructionList ;
    ::routine_buildSyntaxInstructionList (inLexique,  operand_8131->mRepeatedInstructionList,  var_cas_repeatedInstructionList COMMA_SOURCE_FILE_AT_LINE (179)) ;
    GGS_listOfSyntaxInstructionList  var_cas_repeatBranchList = GGS_listOfSyntaxInstructionList ::constructor_emptyList () ;
    {
      GGS_listOfSyntaxInstructionList::cEnumerator enumerator_8407 (operand_8131->mRepeatBranchList, true) ;
      const GGS_listOfSyntaxInstructionList::cElement * operand_8407 = NULL ;
      while (((operand_8407 = enumerator_8407.nextObject ()))) {
        macroValidPointer (operand_8407) ;
        GGS_syntaxInstructionList  var_cas_syntaxInstructionList ;
        ::routine_buildSyntaxInstructionList (inLexique,  operand_8407->mSyntaxInstructionList,  var_cas_syntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (183)) ;
        var_cas_repeatBranchList.addAssign_operation (var_cas_syntaxInstructionList) ;
      }
    }
    GGS_repeatInstruction  var_cas_ri = GGS_repeatInstruction ::constructor_new (inLexique, operand_8131->mRepeatInstructionLocation, var_cas_repeatedInstructionList, var_cas_repeatBranchList COMMA_HERE) ;
    var_cas_ioSyntaxInstructionList.addAssign_operation (var_cas_ri) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@selectInstruction.buildSyntaxInstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__selectInstruction__buildSyntaxInstructionList (C_Compiler & inLexique,
                                const cPtr_selectInstruction * operand_8914,
                                GGS_syntaxInstructionList  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8914 != NULL) {
    GGS_listOfSyntaxInstructionList  var_cas_selectBranchList = GGS_listOfSyntaxInstructionList ::constructor_emptyList () ;
    {
      GGS_listOfSyntaxInstructionList::cEnumerator enumerator_9057 (operand_8914->mSelectBranchList, true) ;
      const GGS_listOfSyntaxInstructionList::cElement * operand_9057 = NULL ;
      while (((operand_9057 = enumerator_9057.nextObject ()))) {
        macroValidPointer (operand_9057) ;
        GGS_syntaxInstructionList  var_cas_syntaxInstructionList ;
        ::routine_buildSyntaxInstructionList (inLexique,  operand_9057->mSyntaxInstructionList,  var_cas_syntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (202)) ;
        var_cas_selectBranchList.addAssign_operation (var_cas_syntaxInstructionList) ;
      }
    }
    GGS_selectInstruction  var_cas_si = GGS_selectInstruction ::constructor_new (inLexique, operand_8914->mSelectInstructionLocation, var_cas_selectBranchList COMMA_HERE) ;
    var_cas_ioSyntaxInstructionList.addAssign_operation (var_cas_si) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@parseDoInstruction.buildSyntaxInstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__parseDoInstruction__buildSyntaxInstructionList (C_Compiler & inLexique,
                                const cPtr_parseDoInstruction * operand_9536,
                                GGS_syntaxInstructionList  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9536 != NULL) {
    GGS_syntaxInstructionList  var_cas_instructionList ;
    const GGS_listOfSyntaxInstructionList  temp_9660 = operand_9536->mParseDoBranchList ;
    if (temp_9660.isBuilt ()) {
      temp_9660 (HERE)->method_first (inLexique, var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (218)) ;
    }
    {
      GGS_syntaxInstructionList::cEnumerator enumerator_9706 (var_cas_instructionList, true) ;
      const GGS_syntaxInstructionList::cElement * operand_9706 = NULL ;
      while (((operand_9706 = enumerator_9706.nextObject ()))) {
        macroValidPointer (operand_9706) ;
        const GGS_syntaxInstruction  temp_9754 = operand_9706->mInstruction ;
        if (temp_9754.isBuilt ()) {
          typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList method = findCategoryMethod__syntaxInstruction__buildSyntaxInstructionList (temp_9754.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_9754 (HERE), var_cas_ioSyntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (220)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@blockInstruction.buildSyntaxInstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__blockInstruction__buildSyntaxInstructionList (C_Compiler & inLexique,
                                const cPtr_blockInstruction * operand_9953,
                                GGS_syntaxInstructionList  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9953 != NULL) {
    {
      GGS_syntaxInstructionList::cEnumerator enumerator_10033 (operand_9953->mInstructionList, true) ;
      const GGS_syntaxInstructionList::cElement * operand_10033 = NULL ;
      while (((operand_10033 = enumerator_10033.nextObject ()))) {
        macroValidPointer (operand_10033) ;
        const GGS_syntaxInstruction  temp_10081 = operand_10033->mInstruction ;
        if (temp_10081.isBuilt ()) {
          typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList method = findCategoryMethod__syntaxInstruction__buildSyntaxInstructionList (temp_10081.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_10081 (HERE), var_cas_ioSyntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (230)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Virtual Table for category reader '@syntaxInstruction.htmlListing'     *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryReader__syntaxInstruction__htmlListing> gDispatchTableForReader__syntaxInstruction__htmlListing ;

//---------------------------------------------------------------------------*

void
enterCategoryReader__syntaxInstruction__htmlListing (typeCategoryReader__syntaxInstruction__htmlListing inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForReader__syntaxInstruction__htmlListing.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

static GGS_string
category_reader__syntaxInstruction_defaultReader (C_Compiler &,
                                const cPtr_syntaxInstruction *
                                COMMA_UNUSED_LOCATION_ARGS) {
  return GGS_string () ;
}

//---------------------------------------------------------------------------*

typeCategoryReader__syntaxInstruction__htmlListing
findCategoryReader__syntaxInstruction__htmlListing (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryReader__syntaxInstruction__htmlListing result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForReader__syntaxInstruction__htmlListing.count ()) {
    result = gDispatchTableForReader__syntaxInstruction__htmlListing (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryReader__syntaxInstruction__htmlListing (superClassPtr) ;
      gDispatchTableForReader__syntaxInstruction__htmlListing.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  if (NULL == result) {
    result = category_reader__syntaxInstruction_defaultReader ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category reader '@semanticInstruction.htmlListing'             *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__semanticInstruction__htmlListing (C_Compiler &,
                                const cPtr_semanticInstruction * operand_10577
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outListing ;
  if (operand_10577 != NULL) {
    var_cas_outListing = GGS_string ("") ;
  }
  return var_cas_outListing ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category reader '@nonterminalCallInstruction.htmlListing'          *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__nonterminalCallInstruction__htmlListing (C_Compiler &,
                                const cPtr_nonterminalCallInstruction * operand_10773
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outListing ;
  if (operand_10773 != NULL) {
    var_cas_outListing = ((GGS_string ("<span class=\"galgas_nonterminal\">&lt;")).operator_concat (operand_10773->mNonterminalName)).operator_concat (GGS_string ("&gt;</span>")) ;
  }
  return var_cas_outListing ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category reader '@terminalCheckInstruction.htmlListing'           *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__terminalCheckInstruction__htmlListing (C_Compiler & inLexique,
                                const cPtr_terminalCheckInstruction * operand_11041
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outListing ;
  if (operand_11041 != NULL) {
    var_cas_outListing = ((GGS_string ("<span class=\"galgas_terminal\">$")).operator_concat (operand_11041->mTerminalName.ggs_string ().reader_HTMLRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (263)))).operator_concat (GGS_string ("$</span>")) ;
  }
  return var_cas_outListing ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category reader '@repeatInstruction.htmlListing'              *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__repeatInstruction__htmlListing (C_Compiler & inLexique,
                                const cPtr_repeatInstruction * operand_11311
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outListing ;
  if (operand_11311 != NULL) {
    var_cas_outListing = ((GGS_string ("<span class=\"galgas_structure\">")).operator_concat (GGS_string ("<span class=\"galgas_keyword\">repeat</span>"))).operator_concat (GGS_string ("<span class=\"within_galgas_structure\">")) ;
    {
      GGS_syntaxInstructionList::cEnumerator enumerator_11524 (operand_11311->mRepeatedInstructionList, true) ;
      const GGS_syntaxInstructionList::cElement * operand_11524 = NULL ;
      while (((operand_11524 = enumerator_11524.nextObject ()))) {
        macroValidPointer (operand_11524) ;
        var_cas_outListing.dotAssign_operation ((findCategoryReader__syntaxInstruction__htmlListing (operand_11524->mInstruction (HERE)->galgasRTTI ()) (inLexique, operand_11524->mInstruction.getPtr () COMMA_SOURCE_FILE_AT_LINE (275)))) ;
      }
    }
    var_cas_outListing.appendCString ("</span>") ;
    {
      GGS_listOfSyntaxInstructionList::cEnumerator enumerator_11646 (operand_11311->mRepeatBranchList, true) ;
      const GGS_listOfSyntaxInstructionList::cElement * operand_11646 = NULL ;
      while (((operand_11646 = enumerator_11646.nextObject ()))) {
        macroValidPointer (operand_11646) ;
        var_cas_outListing.appendCString ("<span class=\"galgas_keyword\">while</span>") ;
        var_cas_outListing.appendCString ("<span class=\"within_galgas_structure\">") ;
        {
          GGS_syntaxInstructionList::cEnumerator enumerator_11813 (operand_11646->mSyntaxInstructionList, true) ;
          const GGS_syntaxInstructionList::cElement * operand_11813 = NULL ;
          while (((operand_11813 = enumerator_11813.nextObject ()))) {
            macroValidPointer (operand_11813) ;
            var_cas_outListing.dotAssign_operation ((findCategoryReader__syntaxInstruction__htmlListing (operand_11813->mInstruction (HERE)->galgasRTTI ()) (inLexique, operand_11813->mInstruction.getPtr () COMMA_SOURCE_FILE_AT_LINE (282)))) ;
          }
        }
        var_cas_outListing.appendCString ("</span>") ;
      }
    }
    var_cas_outListing.appendCString ("<span class=\"galgas_keyword\">end repeat</span>"
    "</span>") ;
  }
  return var_cas_outListing ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category reader '@selectInstruction.htmlListing'              *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__selectInstruction__htmlListing (C_Compiler & inLexique,
                                const cPtr_selectInstruction * operand_12152
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outListing ;
  if (operand_12152 != NULL) {
    var_cas_outListing = (GGS_string ("<span class=\"galgas_structure\">")).operator_concat (GGS_string ("<span class=\"galgas_keyword\">select</span>")) ;
    {
      GGS_listOfSyntaxInstructionList::cEnumerator enumerator_12311 (operand_12152->mSelectBranchList, true) ;
      const GGS_listOfSyntaxInstructionList::cElement * operand_12311 = enumerator_12311.nextObject () ;
      if ((operand_12311 != NULL)) {
        bool _foreach_loop_12311 ;
        do{
          macroValidPointer (operand_12311) ;
          var_cas_outListing.appendCString ("<span class=\"within_galgas_structure\">") ;
          {
            GGS_syntaxInstructionList::cEnumerator enumerator_12414 (operand_12311->mSyntaxInstructionList, true) ;
            const GGS_syntaxInstructionList::cElement * operand_12414 = NULL ;
            while (((operand_12414 = enumerator_12414.nextObject ()))) {
              macroValidPointer (operand_12414) ;
              var_cas_outListing.dotAssign_operation ((findCategoryReader__syntaxInstruction__htmlListing (operand_12414->mInstruction (HERE)->galgasRTTI ()) (inLexique, operand_12414->mInstruction.getPtr () COMMA_SOURCE_FILE_AT_LINE (301)))) ;
            }
          }
          var_cas_outListing.appendCString ("</span>") ;
          operand_12311 = enumerator_12311.nextObject () ;
          _foreach_loop_12311 = ((operand_12311 != NULL)) ;
          if (_foreach_loop_12311) {
            var_cas_outListing.appendCString ("<span class=\"galgas_keyword\">or</span>") ;
          }
        }while (_foreach_loop_12311) ;
      }
    }
    var_cas_outListing.appendCString ("<span class=\"galgas_keyword\">end select</span>"
    "</span>") ;
  }
  return var_cas_outListing ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category reader '@parseDoInstruction.htmlListing'              *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__parseDoInstruction__htmlListing (C_Compiler &,
                                const cPtr_parseDoInstruction * operand_12827
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outListing ;
  if (operand_12827 != NULL) {
    var_cas_outListing = GGS_string ("[Parse do]") ;
  }
  return var_cas_outListing ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category reader '@blockInstruction.htmlListing'               *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__blockInstruction__htmlListing (C_Compiler &,
                                const cPtr_blockInstruction * operand_13023
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outListing ;
  if (operand_13023 != NULL) {
    var_cas_outListing = GGS_string ("[block]") ;
  }
  return var_cas_outListing ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@syntaxInstruction.enterTerminalSymbolIntoVocabulary'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary> gDispatchTableForMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary (typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary
findCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary.count ()) {
    result = gDispatchTableForMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary (superClassPtr) ;
      gDispatchTableForMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@semanticInstruction.enterTerminalSymbolIntoVocabulary'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticInstruction__enterTerminalSymbolIntoVocabulary (C_Compiler &,
                                const cPtr_semanticInstruction * operand_13643,
                                GGS_vocabularyMap  & /* var_cas_ioVocabularyMap */,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13643 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@nonterminalCallInstruction.enterTerminalSymbolIntoVocabulary'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__nonterminalCallInstruction__enterTerminalSymbolIntoVocabulary (C_Compiler &,
                                const cPtr_nonterminalCallInstruction * operand_13911,
                                GGS_vocabularyMap  & /* var_cas_ioVocabularyMap */,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13911 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@terminalCheckInstruction.enterTerminalSymbolIntoVocabulary'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__terminalCheckInstruction__enterTerminalSymbolIntoVocabulary (C_Compiler & inLexique,
                                const cPtr_terminalCheckInstruction * operand_14177,
                                GGS_vocabularyMap  & var_cas_ioVocabularyMap,
                                GGS_stringlist  & var_cas_ioVocabularyListForDisplaying
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14177 != NULL) {
    const GGS_bool cond_14471 = (var_cas_ioVocabularyMap.reader_hasKey (inLexique, operand_14177->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (358)) COMMA_SOURCE_FILE_AT_LINE (358))).operator_not () ;
    if (cond_14471.isBuiltAndTrue ()) {
      var_cas_ioVocabularyMap.modifier_insertKey (inLexique, operand_14177->mTerminalName, var_cas_ioVocabularyMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (359)) COMMA_SOURCE_FILE_AT_LINE (359)) ;
      var_cas_ioVocabularyListForDisplaying.addAssign_operation (((GGS_string ("$")).operator_concat (operand_14177->mTerminalName)).operator_concat (GGS_string ("$"))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@repeatInstruction.enterTerminalSymbolIntoVocabulary'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__repeatInstruction__enterTerminalSymbolIntoVocabulary (C_Compiler &,
                                const cPtr_repeatInstruction * operand_14638,
                                GGS_vocabularyMap  & /* var_cas_ioVocabularyMap */,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14638 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@selectInstruction.enterTerminalSymbolIntoVocabulary'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__selectInstruction__enterTerminalSymbolIntoVocabulary (C_Compiler &,
                                const cPtr_selectInstruction * operand_14897,
                                GGS_vocabularyMap  & /* var_cas_ioVocabularyMap */,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14897 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@parseDoInstruction.enterTerminalSymbolIntoVocabulary'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__parseDoInstruction__enterTerminalSymbolIntoVocabulary (C_Compiler &,
                                const cPtr_parseDoInstruction * operand_15157,
                                GGS_vocabularyMap  & /* var_cas_ioVocabularyMap */,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15157 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@blockInstruction.enterTerminalSymbolIntoVocabulary'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__blockInstruction__enterTerminalSymbolIntoVocabulary (C_Compiler &,
                                const cPtr_blockInstruction * operand_15415,
                                GGS_vocabularyMap  & /* var_cas_ioVocabularyMap */,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15415 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@syntaxInstruction.enterNonTerminalSymbolIntoVocabulary'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary> gDispatchTableForMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary (typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary
findCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary.count ()) {
    result = gDispatchTableForMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary (superClassPtr) ;
      gDispatchTableForMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@semanticInstruction.enterNonTerminalSymbolIntoVocabulary'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticInstruction__enterNonTerminalSymbolIntoVocabulary (C_Compiler &,
                                const cPtr_semanticInstruction * operand_16164,
                                GGS_vocabularyMap  & /* var_cas_ioNonTerminalMap */,
                                const GGS_vocabularyMap   /* var_cas_ioTerminalMap */,
                                GGS_uintlist  & /* var_cas_ioRightDerivation */,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16164 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@nonterminalCallInstruction.enterNonTerminalSymbolIntoVocabulary'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__nonterminalCallInstruction__enterNonTerminalSymbolIntoVocabulary (C_Compiler & inLexique,
                                const cPtr_nonterminalCallInstruction * operand_16515,
                                GGS_vocabularyMap  & var_cas_ioNonTerminalMap,
                                const GGS_vocabularyMap   var_cas_inTerminalMap,
                                GGS_uintlist  & var_cas_ioRightDerivation,
                                GGS_stringlist  & var_cas_ioVocabularyListForDisplaying
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16515 != NULL) {
    const GGS_bool cond_16911 = (var_cas_ioNonTerminalMap.reader_hasKey (inLexique, operand_16515->mNonterminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (425)) COMMA_SOURCE_FILE_AT_LINE (425))).operator_not () ;
    if (cond_16911.isBuiltAndTrue ()) {
      var_cas_ioNonTerminalMap.modifier_insertKey (inLexique, operand_16515->mNonterminalName, var_cas_ioNonTerminalMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (426)).add_operation (inLexique, var_cas_inTerminalMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (426)) COMMA_SOURCE_FILE_AT_LINE (426)) COMMA_SOURCE_FILE_AT_LINE (426)) ;
      var_cas_ioVocabularyListForDisplaying.addAssign_operation (((GGS_string ("<")).operator_concat (operand_16515->mNonterminalName)).operator_concat (GGS_string (">"))) ;
    }
    GGS_uint  var_cas_nonterminalIndex ;
    const GGS_vocabularyMap  temp_16973 = var_cas_ioNonTerminalMap ;
    if (temp_16973.isBuilt ()) {
      temp_16973 (HERE)->method_searchKey (inLexique, operand_16515->mNonterminalName, var_cas_nonterminalIndex COMMA_SOURCE_FILE_AT_LINE (430)) ;
    }
    var_cas_ioRightDerivation.addAssign_operation (var_cas_nonterminalIndex) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@terminalCheckInstruction.enterNonTerminalSymbolIntoVocabulary'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__terminalCheckInstruction__enterNonTerminalSymbolIntoVocabulary (C_Compiler & inLexique,
                                const cPtr_terminalCheckInstruction * operand_17227,
                                GGS_vocabularyMap  & /* var_cas_ioNonTerminalMap */,
                                const GGS_vocabularyMap   var_cas_inTerminalMap,
                                GGS_uintlist  & var_cas_ioRightDerivation,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17227 != NULL) {
    GGS_uint  var_cas_terminalIndex ;
    const GGS_vocabularyMap  temp_17441 = var_cas_inTerminalMap ;
    if (temp_17441.isBuilt ()) {
      temp_17441 (HERE)->method_searchKey (inLexique, operand_17227->mTerminalName, var_cas_terminalIndex COMMA_SOURCE_FILE_AT_LINE (443)) ;
    }
    var_cas_ioRightDerivation.addAssign_operation (var_cas_terminalIndex) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@repeatInstruction.enterNonTerminalSymbolIntoVocabulary'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__repeatInstruction__enterNonTerminalSymbolIntoVocabulary (C_Compiler &,
                                const cPtr_repeatInstruction * operand_17679,
                                GGS_vocabularyMap  & /* var_cas_ioNonTerminalMap */,
                                const GGS_vocabularyMap   /* var_cas_ioTerminalMap */,
                                GGS_uintlist  & /* var_cas_ioRightDerivation */,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17679 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@selectInstruction.enterNonTerminalSymbolIntoVocabulary'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__selectInstruction__enterNonTerminalSymbolIntoVocabulary (C_Compiler &,
                                const cPtr_selectInstruction * operand_18021,
                                GGS_vocabularyMap  & /* var_cas_ioNonTerminalMap */,
                                const GGS_vocabularyMap   /* var_cas_ioTerminalMap */,
                                GGS_uintlist  & /* var_cas_ioRightDerivation */,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18021 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@parseDoInstruction.enterNonTerminalSymbolIntoVocabulary' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__parseDoInstruction__enterNonTerminalSymbolIntoVocabulary (C_Compiler &,
                                const cPtr_parseDoInstruction * operand_18364,
                                GGS_vocabularyMap  & /* var_cas_ioNonTerminalMap */,
                                const GGS_vocabularyMap   /* var_cas_ioTerminalMap */,
                                GGS_uintlist  & /* var_cas_ioRightDerivation */,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18364 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@blockInstruction.enterNonTerminalSymbolIntoVocabulary'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__blockInstruction__enterNonTerminalSymbolIntoVocabulary (C_Compiler &,
                                const cPtr_blockInstruction * operand_18705,
                                GGS_vocabularyMap  & /* var_cas_ioNonTerminalMap */,
                                const GGS_vocabularyMap   /* var_cas_ioTerminalMap */,
                                GGS_uintlist  & /* var_cas_ioRightDerivation */,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18705 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of wrapper 'grammarGenerationTemplates'           *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_grammarGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_grammarGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_grammarGenerationTemplates = {
  "",
  0,
  gWrapperAllFiles_grammarGenerationTemplates_0,
  0,
  gWrapperAllDirectories_grammarGenerationTemplates_0
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//       'html' template of 'grammarGenerationTemplates' filewrapper         *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_grammarGenerationTemplates_html (C_Compiler & inLexique,
                                const GGS_string& var_cas_GRAMMAR_NAME,
                                const GGS_syntaxRuleListForGrammar & var_cas_SYNTAX_RULE_LIST,
                                const GGS_syntaxRuleListForGrammar & var_cas_PURE_SYNTAX_RULE_LIST,
                                const GGS_stringlist & var_cas_IDENTICAL_DERIVATION_ERROR_MESSAGE_LIST,
                                const GGS_string& var_cas_HTML_FILE_HEADER,
                                const GGS_string& var_cas_HTML_FILE_CONTENTS) {
  C_String result ;
  const bool isBuilt = var_cas_GRAMMAR_NAME.isBuilt ()
    && var_cas_SYNTAX_RULE_LIST.isBuilt ()
    && var_cas_PURE_SYNTAX_RULE_LIST.isBuilt ()
    && var_cas_IDENTICAL_DERIVATION_ERROR_MESSAGE_LIST.isBuilt ()
    && var_cas_HTML_FILE_HEADER.isBuilt ()
    && var_cas_HTML_FILE_CONTENTS.isBuilt () ;
  if (isBuilt) {
    result << "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n"
      "<html><head>\n"
      "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n"
      "<title>'" ;
    result << var_cas_GRAMMAR_NAME ;
    result << "' grammar</title>\n"
      "<style type=\"text/css\">body {\n"
      "  font-family: Helvetica, sans-serif ;\n"
      "  font-size: small ;\n"
      "}\n"
      "\n"
      "h1 {\n"
      "  text-align: center ;\n"
      "}\n"
      "\n"
      "a.header_link {\n"
      "  border: 1px solid #999999 ;\n"
      "  padding: 4px ;\n"
      "  background-color: #FFFFCC ;\n"
      "  font-weight: bold ;\n"
      "}\n"
      "\n"
      "a:visited, a:link, a:active{\n"
      "  color: blue ;\n"
      "  text-decoration: underline ;\n"
      "}\n"
      "\n"
      "a:hover {\n"
      "  color:green ;\n"
      "  background-color: #FFFF00 ;\n"
      "  text-decoration: none ;\n"
      "}\n"
      "\n"
      "table.title {\n"
      "  width: 100% ;\n"
      "  border: 1px solid #666666 ;\n"
      "  background-color: yellow ;\n"
      "  font-weight: bold ;\n"
      "  text-align: center ;\n"
      "}\n"
      "\n"
      "table.result {\n"
      "  border: 2px solid #666666 ;\n"
      "  border-collapse: collapse ;\n"
      "}\n"
      "\n"
      "td.result_title {\n"
      "  font-weight: bold ;\n"
      "  text-align: center ;\n"
      "  border-top: 2px solid #666666 ;\n"
      "}\n"
      "\n"
      "tr.result_line {\n"
      "  background-color: #EEEEEE ;\n"
      "  border-top: 1px solid #999999 ;\n"
      "}\n"
      "td.result_line {\n"
      "  border-right: 1px solid #999999 ;\n"
      "}\n"
      "\n"
      "span.error {\n"
      "  font-weight: bold ;\n"
      "  color: red ;\n"
      "}\n"
      "\n"
      "span.warning {\n"
      "  font-weight: bold ;\n"
      "  color: #FF9966 ;\n"
      "}\n"
      "\n"
      "span.success {\n"
      "  font-weight: bold ;\n"
      "  color: green ;\n"
      "}\n"
      "\n"
      "span.list {\n"
      "  display: block ;\n"
      "  line-height: 100% ;\n"
      "}\n"
      "\n"
      "span.galgas_structure {\n"
      "  display: block ;\n"
      "}\n"
      "\n"
      "span.within_galgas_structure {\n"
      "  display: block ;\n"
      "  padding-left: 1em ;\n"
      "  margin-left: 1em ;\n"
      "  border-left: 1px dotted black ;\n"
      "}\n"
      "\n"
      "span.galgas_keyword {\n"
      "  display: block ;\n"
      "  font-weight: bold ;\n"
      "  color: blue ;\n"
      "}\n"
      "\n"
      "span.galgas_terminal {\n"
      "  display: block ;\n"
      "}\n"
      "\n"
      "span.galgas_nonterminal {\n"
      "  display: block ;\n"
      "}\n"
      "</style></head><body>\n"
      "<h1>'" ;
    result << var_cas_GRAMMAR_NAME ;
    result << "' grammar</h1>\n"
      "<p><a class=\"header_link\" href=\"#pure_bnf\">Pure BNF productions</a></p>\n"
      "<p><a class=\"header_link\" href=\"#identical_productions\">Identical productions</a></p>\n" ;
    result << var_cas_HTML_FILE_HEADER ;
    result << "\n"
      "\n"
      "\n"
      "<table class=\"title\"><tr><td>Original grammar</td></tr></table>\n"
      "\n"
      "<p>The original grammar has " ;
    result << var_cas_SYNTAX_RULE_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (112)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (112)) ;
    result << " productions.</p>\n"
      "<table class=\"result\">\n" ;
    GGS_syntaxRuleListForGrammar::cEnumerator enumerator_2091 (var_cas_SYNTAX_RULE_LIST, true) ;
    const GGS_syntaxRuleListForGrammar::cElement * operand_2091 = NULL ;
    while (((operand_2091 = enumerator_2091.nextObject ()))) {
      macroValidPointer (operand_2091) ;
      result << "<tr class=\"result_line\"><td class=\"result_line\">rule <code>&lt;" ;
      result << operand_2091->mLeftNonTerminal.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (116)) ;
      result << "&gt;</code><br>" ;
      result << operand_2091->mLeftNonTerminal.reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (116)) ;
      result << "</td><td><code>" ;
      GGS_syntaxInstructionList::cEnumerator enumerator_2313 (operand_2091->mSyntaxInstructionList, true) ;
      const GGS_syntaxInstructionList::cElement * operand_2313 = NULL ;
      while (((operand_2313 = enumerator_2313.nextObject ()))) {
        macroValidPointer (operand_2313) ;
        result << (findCategoryReader__syntaxInstruction__htmlListing (operand_2313->mInstruction (HERE)->galgasRTTI ()) (inLexique, operand_2313->mInstruction.getPtr () COMMA_SOURCE_FILE_AT_LINE (119))) ;
      }
      result << "</code></td></tr>" ;
    }
    result << "\n"
      "</table>\n"
      "<p><a name=\"pure_bnf\"></a></p>\n"
      "<table class=\"title\">\n"
      "<tr><td>Pure BNF productions list</td></tr>\n"
      "</table>\n"
      "<p>Listing of the " ;
    result << var_cas_PURE_SYNTAX_RULE_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (130)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (130)) ;
    result << " BNF productions :</p>\n"
      "<table class=\"result\">\n" ;
    GGS_syntaxRuleListForGrammar::cEnumerator enumerator_2660 (var_cas_PURE_SYNTAX_RULE_LIST, true) ;
    const GGS_syntaxRuleListForGrammar::cElement * operand_2660 = NULL ;
    GGS_uint var_cas_idx (true, 0) ;
    while (((operand_2660 = enumerator_2660.nextObject ()))) {
      macroValidPointer (operand_2660) ;
      result << "<tr class=\"result_line\"><td class=\"result_line\">" ;
      result << var_cas_idx.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (134)) ;
      result << "</td><td class=\"result_line\">rule <code>&lt;" ;
      result << operand_2660->mLeftNonTerminal.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (135)) ;
      result << "&gt;</code><br>" ;
      result << operand_2660->mLeftNonTerminal.reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (135)) ;
      result << "</td><td><code>" ;
      GGS_syntaxInstructionList::cEnumerator enumerator_2943 (operand_2660->mSyntaxInstructionList, true) ;
      const GGS_syntaxInstructionList::cElement * operand_2943 = NULL ;
      while (((operand_2943 = enumerator_2943.nextObject ()))) {
        macroValidPointer (operand_2943) ;
        result << (findCategoryReader__syntaxInstruction__htmlListing (operand_2943->mInstruction (HERE)->galgasRTTI ()) (inLexique, operand_2943->mInstruction.getPtr () COMMA_SOURCE_FILE_AT_LINE (138))) ;
      }
      result << "</code></td></tr>" ;
      var_cas_idx.increment_operation (inLexique COMMA_HERE) ;
    }
    result << "\n"
      "</table>\n"
      "\n"
      "\n"
      "<p><a name=\"identical_productions\"></a></p>\n"
      "<table class=\"title\">\n"
      "  <tr><td>Checking all productions are different</td></tr>\n"
      "</table>\n"
      "<p></p>\n"
      "<p>" ;
    if ((var_cas_IDENTICAL_DERIVATION_ERROR_MESSAGE_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (153))).operator_isEqual (GGS_uint (0U)).boolValue ()) {
      result << "<span class=\"success\">Ok : all productions are different.</span>" ;
    }else {
      if ((var_cas_IDENTICAL_DERIVATION_ERROR_MESSAGE_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (156))).operator_isEqual (GGS_uint (1U)).boolValue ()) {
        result << "<span class=\"error\">Error;<span> 1 collision has been detected:" ;
      }else {
        result << "<span class=\"error\">Error;<span> " ;
        result << var_cas_IDENTICAL_DERIVATION_ERROR_MESSAGE_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (159)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (159)) ;
        result << " collisions have been detected:" ;
      }
      result << "<ul>" ;
      GGS_stringlist::cEnumerator enumerator_3680 (var_cas_IDENTICAL_DERIVATION_ERROR_MESSAGE_LIST, true) ;
      const GGS_stringlist::cElement * operand_3680 = NULL ;
      while (((operand_3680 = enumerator_3680.nextObject ()))) {
        macroValidPointer (operand_3680) ;
        result << "<li>" ;
        result << operand_3680->mValue.reader_HTMLRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (163)) ;
        result << ";</li>" ;
      }
      result << "</ul>" ;
    }
    result << "</p>\n"
      "\n" ;
    result << var_cas_HTML_FILE_CONTENTS ;
    result << "\n"
      "\n"
      "\n"
      "</body></html>\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// 'optionHeaderZone2' template of 'grammarGenerationTemplates' filewrapper  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_grammarGenerationTemplates_optionHeaderZone2 (C_Compiler & inLexique,
                                const GGS_string& var_cas_GRAMMAR_NAME,
                                const GGS_grammarComponentRoot & var_cas_GRAMMAR_COMPONENT_ROOT) {
  C_String result ;
  const bool isBuilt = var_cas_GRAMMAR_NAME.isBuilt ()
    && var_cas_GRAMMAR_COMPONENT_ROOT.isBuilt () ;
  if (isBuilt) {
    result << "#ifndef GRAMMAR_" ;
    result << var_cas_GRAMMAR_NAME ;
    result << "_HAS_BEEN_DEFINED\n"
      "#define GRAMMAR_" ;
    result << var_cas_GRAMMAR_NAME ;
    result << "_HAS_BEEN_DEFINED\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_lstringlist::cEnumerator enumerator_232 (var_cas_GRAMMAR_COMPONENT_ROOT.reader_mSyntaxComponents (inLexique COMMA_SOURCE_FILE_AT_LINE (6)), true) ;
    const GGS_lstringlist::cElement * operand_232 = NULL ;
    while (((operand_232 = enumerator_232.nextObject ()))) {
      macroValidPointer (operand_232) ;
      result << "#include \"" ;
      result << operand_232->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (7)) ;
      result << ".h\"\n" ;
    }
    result << "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// 'optionHeaderZone3' template of 'grammarGenerationTemplates' filewrapper  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_grammarGenerationTemplates_optionHeaderZone3 (C_Compiler & inLexique,
                                const GGS_string& var_cas_GRAMMAR_NAME,
                                const GGS_grammarComponentRoot & var_cas_GRAMMAR_COMPONENT_ROOT,
                                const GGS_nonTerminalMap & var_cas_NON_TERMINAL_MAP,
                                const GGS_string& var_cas_LEXIQUE_CLASS,
                                const GGS_stringlist & var_cas_ADDED_NON_TERMINAL_LIST) {
  C_String result ;
  const bool isBuilt = var_cas_GRAMMAR_NAME.isBuilt ()
    && var_cas_GRAMMAR_COMPONENT_ROOT.isBuilt ()
    && var_cas_NON_TERMINAL_MAP.isBuilt ()
    && var_cas_LEXIQUE_CLASS.isBuilt ()
    && var_cas_ADDED_NON_TERMINAL_LIST.isBuilt () ;
  if (isBuilt) {
    result << "//---------------------------------------------------------------------------*\n"
      "\n"
      "class " ;
    result << var_cas_GRAMMAR_NAME ;
    result << " : " ;
    const GGS_string var_cas_COLUMN_CLASS_DECLARATION = GGS_string::stringWithColumnCount (result) ;
    GGS_lstringlist::cEnumerator enumerator_185 (var_cas_GRAMMAR_COMPONENT_ROOT.reader_mSyntaxComponents (inLexique COMMA_SOURCE_FILE_AT_LINE (4)), true) ;
    const GGS_lstringlist::cElement * operand_185 = NULL ;
    while (((operand_185 = enumerator_185.nextObject ()))) {
      macroValidPointer (operand_185) ;
      result << "public " ;
      result << operand_185->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (5)) ;
      if (enumerator_185.hasNextObject ()) {
        result << ",\n" ;
        result << var_cas_COLUMN_CLASS_DECLARATION ;
      }
    }
    result << " {\n" ;
    GGS_nonTerminalMap::cEnumerator enumerator_331 (var_cas_NON_TERMINAL_MAP, true) ;
    const GGS_nonTerminalMap::cElement * operand_331 = NULL ;
    while (((operand_331 = enumerator_331.nextObject ()))) {
      macroValidPointer (operand_331) ;
      GGS_nonTerminalLabelList::cEnumerator enumerator_352 (operand_331->mInfo.mLabels, true) ;
      const GGS_nonTerminalLabelList::cElement * operand_352 = NULL ;
      while (((operand_352 = enumerator_352.nextObject ()))) {
        macroValidPointer (operand_352) ;
        result << "  public : virtual void nt_" ;
        result << operand_331->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (12)) ;
        result << "_" ;
        result << operand_352->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (12)) ;
        result << " (" ;
        const GGS_string var_cas_COLUMN1 = GGS_string::stringWithColumnCount (result) ;
        result << var_cas_LEXIQUE_CLASS ;
        result << " &" ;
        GGS_formalParameterList::cEnumerator enumerator_486 (operand_352->mFormalParameters, true) ;
        const GGS_formalParameterList::cElement * operand_486 = NULL ;
        while (((operand_486 = enumerator_486.nextObject ()))) {
          macroValidPointer (operand_486) ;
          result << ",\n" ;
          result << var_cas_COLUMN1 ;
          result << operand_486->mFormalParameterPassingMode.reader_generation1ForFormalParameter (inLexique COMMA_SOURCE_FILE_AT_LINE (14)) ;
          result << "GGS_" ;
          result << operand_486->mFormalParameterTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (14)) ;
          result << operand_486->mFormalParameterPassingMode.reader_generation2ForFormalParameter (inLexique COMMA_SOURCE_FILE_AT_LINE (14)) ;
        }
        result << ") ;\n"
          "\n" ;
        if ((var_cas_GRAMMAR_COMPONENT_ROOT.reader_mStartSymbol (inLexique COMMA_SOURCE_FILE_AT_LINE (17)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (17))).operator_isEqual (operand_331->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (17))).boolValue ()) {
          result << "  public : static void _performSourceFileParsing_" ;
          result << operand_352->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (18)) ;
          result << " (" ;
          const GGS_string var_cas_COLUMN2 = GGS_string::stringWithColumnCount (result) ;
          result << "C_Compiler & inCompiler,\n" ;
          result << var_cas_COLUMN2 ;
          result << "const C_String & inDependancyExtension,\n" ;
          result << var_cas_COLUMN2 ;
          result << "const C_String & inDependancyPath,\n" ;
          result << var_cas_COLUMN2 ;
          result << "GGS_string * inSentStringPtr,\n" ;
          result << var_cas_COLUMN2 ;
          result << "const GGS_lstring inFileName" ;
          GGS_formalParameterList::cEnumerator enumerator_1132 (operand_352->mFormalParameters, true) ;
          const GGS_formalParameterList::cElement * operand_1132 = NULL ;
          while (((operand_1132 = enumerator_1132.nextObject ()))) {
            macroValidPointer (operand_1132) ;
            result << ",\n" ;
            result << var_cas_COLUMN2 ;
            result << operand_1132->mFormalParameterPassingMode.reader_generation1ForFormalParameter (inLexique COMMA_SOURCE_FILE_AT_LINE (24)) ;
            result << "GGS_" ;
            result << operand_1132->mFormalParameterTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (24)) ;
            result << operand_1132->mFormalParameterPassingMode.reader_generation2ForFormalParameter (inLexique COMMA_SOURCE_FILE_AT_LINE (24)) ;
          }
          result << "\n" ;
          result << var_cas_COLUMN2 ;
          result << "COMMA_LOCATION_ARGS) ;\n"
            "\n"
            "  public : static void _performSourceStringParsing_" ;
          result << operand_352->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (27)) ;
          result << " (" ;
          const GGS_string var_cas_COLUMN3 = GGS_string::stringWithColumnCount (result) ;
          result << "C_Compiler & inCompiler,\n" ;
          result << var_cas_COLUMN3 ;
          result << "GGS_string * inSentStringPtr,\n" ;
          result << var_cas_COLUMN3 ;
          result << "const GGS_string inSourceString" ;
          GGS_formalParameterList::cEnumerator enumerator_1632 (operand_352->mFormalParameters, true) ;
          const GGS_formalParameterList::cElement * operand_1632 = NULL ;
          while (((operand_1632 = enumerator_1632.nextObject ()))) {
            macroValidPointer (operand_1632) ;
            result << ",\n" ;
            result << var_cas_COLUMN3 ;
            result << operand_1632->mFormalParameterPassingMode.reader_generation1ForFormalParameter (inLexique COMMA_SOURCE_FILE_AT_LINE (31)) ;
            result << "GGS_" ;
            result << operand_1632->mFormalParameterTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (31)) ;
            result << operand_1632->mFormalParameterPassingMode.reader_generation2ForFormalParameter (inLexique COMMA_SOURCE_FILE_AT_LINE (31)) ;
          }
          result << "\n" ;
          result << var_cas_COLUMN3 ;
          result << "COMMA_LOCATION_ARGS) ;\n"
            "\n" ;
        }else {
        }
      }
      if (operand_331->mInfo.mHasParseLabel.boolValue ()) {
        result << "  public : virtual void nt_" ;
        result << operand_331->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (37)) ;
        result << "_parse (" ;
        result << var_cas_LEXIQUE_CLASS ;
        result << " &) ;\n"
          "\n" ;
      }else {
      }
    }
    GGS_stringlist::cEnumerator enumerator_2070 (var_cas_ADDED_NON_TERMINAL_LIST, true) ;
    const GGS_stringlist::cElement * operand_2070 = NULL ;
    while (((operand_2070 = enumerator_2070.nextObject ()))) {
      macroValidPointer (operand_2070) ;
      result << "  public : virtual PMSInt16 " ;
      result << operand_2070->mValue ;
      result << " (" ;
      result << var_cas_LEXIQUE_CLASS ;
      result << " &) ;\n" ;
      if (enumerator_2070.hasNextObject ()) {
        result << "\n" ;
      }
    }
    result << "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#endif\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "buildRuleList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildRuleList (C_Compiler & inLexique,
                                const GGS_string  var_cas_inSyntaxComponentName,
                                const GGS_syntaxRuleList   var_cas_inRuleList,
                                GGS_syntaxRuleListForGrammar  & var_cas_ioSyntaxRuleListForGrammar COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildRuleList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_syntaxRuleList::cEnumerator enumerator_20612 (var_cas_inRuleList, true) ;
    const GGS_syntaxRuleList::cElement * operand_20612 = NULL ;
    while (((operand_20612 = enumerator_20612.nextObject ()))) {
      macroValidPointer (operand_20612) ;
      GGS_syntaxInstructionList  var_cas_instructionList ;
      GGS_lstring  automatic_var_0 ;
      GGS_formalParameterList  automatic_var_1 ;
      const GGS_syntaxRuleLabelList  temp_20754 = operand_20612->mLabelList ;
      if (temp_20754.isBuilt ()) {
        temp_20754 (HERE)->method_first (inLexique, automatic_var_0, automatic_var_1, var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (530)) ;
      }
      GGS_syntaxInstructionList  var_cas_syntaxInstructionList ;
      ::routine_buildSyntaxInstructionList (inLexique,  var_cas_instructionList,  var_cas_syntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (532)) ;
      var_cas_ioSyntaxRuleListForGrammar.addAssign_operation (var_cas_inSyntaxComponentName, operand_20612->mNonterminalName, var_cas_syntaxInstructionList) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildRuleList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "compileGrammarComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileGrammarComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  var_cas_inOutputDirectory,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileGrammarComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_grammarComponentRoot  var_cas_grammarComponentRoot ;
  const GGS_string _depExtension = GGS_string ("") ;
  const GGS_string _depPath = GGS_string ("") ;
  if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
    grammarLL1grammar::_performSourceFileParsing_ (inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_inSourceFile,
                                  var_cas_grammarComponentRoot
                                  COMMA_SOURCE_FILE_AT_LINE (545)) ;
  }
  const GGS_lstring  var_cas_grammarComponentName = var_cas_grammarComponentRoot.reader_mGrammarName (inLexique COMMA_SOURCE_FILE_AT_LINE (547)) ;
  const GGS_string var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (548)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (548)) ;
  const GGS_bool cond_21894 = (var_cas_grammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (549))).operator_isNotEqual (var_cas_basename) ;
  if (cond_21894.isBuiltAndTrue ()) {
    var_cas_grammarComponentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS checks "
      "the component name ('")).operator_concat (var_cas_grammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (551)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (553)) ;
  }
  GGS_nonTerminalMap  var_cas_nonTerminalMap = GGS_nonTerminalMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_string var_cas_lexiqueComponentName = GGS_string ("") ;
  GGS_syntaxRuleListForGrammar  var_cas_syntaxRuleListForGrammar = GGS_syntaxRuleListForGrammar ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_22176 (var_cas_grammarComponentRoot.reader_mSyntaxComponents (inLexique COMMA_SOURCE_FILE_AT_LINE (559)), true) ;
    const GGS_lstringlist::cElement * operand_22176 = NULL ;
    while (((operand_22176 = enumerator_22176.nextObject ()))) {
      macroValidPointer (operand_22176) ;
      const GGS_bool cond_22364 = (operand_22176->mValue.ggs_string ().reader_pathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (560))).operator_isNotEqual (GGS_string ("gSyntax")) ;
      if (cond_22364.isBuiltAndTrue ()) {
        operand_22176->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a syntax component file should have '.gSyntax' as path extension") COMMA_SOURCE_FILE_AT_LINE (562)) ;
      }else if (cond_22364.isBuiltAndFalse ()) {
        GGS_string var_cas_syntaxComponentName = operand_22176->mValue.ggs_string ().reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (563)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (563)) ;
        GGS_syntaxComponentRoot  var_cas_syntaxComponentRoot ;
        const GGS_bool cond_22756 = var_cas_ioParsedComponentStruct.reader_mParsedSyntaxComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (565)).reader_hasKey (inLexique, var_cas_syntaxComponentName COMMA_SOURCE_FILE_AT_LINE (565)) ;
        if (cond_22756.isBuiltAndTrue ()) {
          const GGS_parsedSyntaxComponentMap  temp_22678 = var_cas_ioParsedComponentStruct.reader_mParsedSyntaxComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (566)) ;
          if (temp_22678.isBuilt ()) {
            temp_22678 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_syntaxComponentName, GGS_location (inLexique) COMMA_HERE), var_cas_syntaxComponentRoot COMMA_SOURCE_FILE_AT_LINE (566)) ;
          }
        }else if (cond_22756.isBuiltAndFalse ()) {
          GGS_string var_cas_sourceFilePath = operand_22176->mValue.ggs_string ().reader_absolutePathFromPath (inLexique, var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (568)) COMMA_SOURCE_FILE_AT_LINE (568)) ;
          const GGS_string _depExtension = GGS_string ("") ;
          const GGS_string _depPath = GGS_string ("") ;
          if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
            syntaxSLRgrammar::_performSourceFileParsing_ (inLexique,
                                          _depExtension.string (),
                                          _depPath.string (),
                                          NULL,
                                          GGS_lstring ::constructor_new (inLexique, var_cas_sourceFilePath, operand_22176->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (569)) COMMA_HERE),
                                          var_cas_syntaxComponentRoot
                                          COMMA_SOURCE_FILE_AT_LINE (569)) ;
          }
          var_cas_ioParsedComponentStruct.mParsedSyntaxComponentMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_syntaxComponentName, operand_22176->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (570)) COMMA_HERE), var_cas_syntaxComponentRoot COMMA_SOURCE_FILE_AT_LINE (570)) ;
        }
        GGS_string var_cas_currentLexiqueName = var_cas_syntaxComponentRoot.reader_mImportedLexiqueReference (inLexique COMMA_SOURCE_FILE_AT_LINE (573)).ggs_string ().reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (573)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (573)) ;
        const GGS_bool cond_23425 = (var_cas_lexiqueComponentName).operator_isEqual (GGS_string ("")) ;
        if (cond_23425.isBuiltAndTrue ()) {
          var_cas_lexiqueComponentName = var_cas_currentLexiqueName ;
        }else if (cond_23425.isBuiltAndFalse ()) {
          const GGS_bool cond_23720 = (var_cas_lexiqueComponentName).operator_isNotEqual (var_cas_currentLexiqueName) ;
          if (cond_23720.isBuiltAndTrue ()) {
            operand_22176->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this syntax component uses '")).operator_concat (var_cas_currentLexiqueName)).operator_concat (GGS_string ("' lexique component, but the first syntax component uses the '"))).operator_concat (var_cas_lexiqueComponentName)).operator_concat (GGS_string ("' lexique component (they should be the same)")) COMMA_SOURCE_FILE_AT_LINE (580)) ;
          }
        }
        ::routine_handleNonTerminalDeclarations (inLexique,  var_cas_nonTerminalMap,  var_cas_syntaxComponentRoot.reader_mNonterminalDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (584)) COMMA_SOURCE_FILE_AT_LINE (582)) ;
        ::routine_buildRuleList (inLexique,  var_cas_syntaxComponentName,  var_cas_syntaxComponentRoot.reader_mRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (589)),  var_cas_syntaxRuleListForGrammar COMMA_SOURCE_FILE_AT_LINE (587)) ;
      }
    }
  }
  GGS_syntaxRuleListForGrammar  var_cas_pureSyntaxRuleListForGrammar = GGS_syntaxRuleListForGrammar ::constructor_emptyList () ;
  GGS_syntaxRuleListForGrammar  var_cas_addedPureSyntaxRuleListForGrammar = GGS_syntaxRuleListForGrammar ::constructor_emptyList () ;
  GGS_stringlist  var_cas_addedNonTerminalList = GGS_stringlist ::constructor_emptyList () ;
  GGS_string var_cas_currentSyntaxComponentName = GGS_string ("") ;
  GGS_uint  var_cas_addedRuleIndex = GGS_uint (0U) ;
  {
    GGS_syntaxRuleListForGrammar::cEnumerator enumerator_24479 (var_cas_syntaxRuleListForGrammar, true) ;
    const GGS_syntaxRuleListForGrammar::cElement * operand_24479 = NULL ;
    while (((operand_24479 = enumerator_24479.nextObject ()))) {
      macroValidPointer (operand_24479) ;
      const GGS_bool cond_24641 = (var_cas_currentSyntaxComponentName).operator_isNotEqual (operand_24479->mSyntaxComponentName) ;
      if (cond_24641.isBuiltAndTrue ()) {
        var_cas_currentSyntaxComponentName = operand_24479->mSyntaxComponentName ;
        var_cas_addedRuleIndex = GGS_uint (0U) ;
      }
      GGS_syntaxInstructionList  var_cas_pureSyntaxInstructionList ;
      ::routine_buildPureSyntaxInstructionList (inLexique,  operand_24479->mSyntaxComponentName,  operand_24479->mSyntaxInstructionList,  var_cas_pureSyntaxInstructionList,  var_cas_addedPureSyntaxRuleListForGrammar,  var_cas_addedNonTerminalList,  var_cas_addedRuleIndex COMMA_SOURCE_FILE_AT_LINE (606)) ;
      var_cas_pureSyntaxRuleListForGrammar.addAssign_operation (operand_24479->mSyntaxComponentName, operand_24479->mLeftNonTerminal, var_cas_pureSyntaxInstructionList) ;
    }
  }
  var_cas_pureSyntaxRuleListForGrammar.dotAssign_operation (var_cas_addedPureSyntaxRuleListForGrammar) ;
  GGS_syntaxInstructionList  var_cas_syntaxInstructionList = GGS_syntaxInstructionList ::constructor_emptyList () ;
  var_cas_syntaxInstructionList.addAssign_operation (GGS_nonterminalCallInstruction ::constructor_new (inLexique, var_cas_grammarComponentRoot.reader_mStartSymbol (inLexique COMMA_SOURCE_FILE_AT_LINE (625)), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), GGS_actualParameterList ::constructor_emptyList () COMMA_HERE)) ;
  var_cas_syntaxInstructionList.addAssign_operation (GGS_terminalCheckInstruction ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), GGS_actualInputParameterList ::constructor_emptyList () COMMA_HERE)) ;
  var_cas_pureSyntaxRuleListForGrammar.addAssign_operation (GGS_string (""), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), var_cas_syntaxInstructionList) ;
  const GGS_bool cond_25911 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
  if (cond_25911.isBuiltAndTrue ()) {
    inLexique.printMessage (((GGS_string ("  Building pure BNF productions... ")).operator_concat (var_cas_pureSyntaxRuleListForGrammar.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (639)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (639)))).operator_concat (GGS_string (" productions\n")) COMMA_SOURCE_FILE_AT_LINE (639)) ;
  }
  const GGS_bool cond_26181 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
  if (cond_26181.isBuiltAndTrue ()) {
    inLexique.printMessage (GGS_string ("  Checking all productions are differents...") COMMA_SOURCE_FILE_AT_LINE (644)) ;
  }
  GGS_string var_cas_htmlOutputFileName = (var_cas_inSourceFile.ggs_string ().reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (646))).operator_concat (GGS_string (".html")) ;
  GGS_productionListMap var_cas_productionListMap = GGS_productionListMap::constructor_emptyMap () ;
  GGS_stringlist  var_cas_identicalDerivationErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  GGS_stringlist  var_cas_vocabularyListForDisplaying = GGS_stringlist ::constructor_emptyList () ;
  GGS_uint  var_cas_additionalNonTerminalSymbolsForPureBDDrules = GGS_uint (0U) ;
  GGS_vocabularyMap  var_cas_terminalMap = GGS_vocabularyMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_syntaxRuleListForGrammar::cEnumerator enumerator_26617 (var_cas_pureSyntaxRuleListForGrammar, true) ;
    const GGS_syntaxRuleListForGrammar::cElement * operand_26617 = NULL ;
    while (((operand_26617 = enumerator_26617.nextObject ()))) {
      macroValidPointer (operand_26617) ;
      {
        GGS_syntaxInstructionList::cEnumerator enumerator_26655 (operand_26617->mSyntaxInstructionList, true) ;
        const GGS_syntaxInstructionList::cElement * operand_26655 = NULL ;
        while (((operand_26655 = enumerator_26655.nextObject ()))) {
          macroValidPointer (operand_26655) ;
          const GGS_syntaxInstruction  temp_26712 = operand_26655->mInstruction ;
          if (temp_26712.isBuilt ()) {
            typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary method = findCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary (temp_26712.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, temp_26712 (HERE), var_cas_terminalMap, var_cas_vocabularyListForDisplaying COMMA_SOURCE_FILE_AT_LINE (655)) ;
            }
          }
        }
      }
    }
  }
  GGS_uint  var_cas_terminalSymbolCount = var_cas_terminalMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (658)) ;
  GGS_vocabularyMap  var_cas_nonterminalMap = GGS_vocabularyMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
      GGS_uint var_cas_idx (true, 0) ;
    GGS_syntaxRuleListForGrammar::cEnumerator enumerator_26962 (var_cas_pureSyntaxRuleListForGrammar, true) ;
    const GGS_syntaxRuleListForGrammar::cElement * operand_26962 = NULL ;
    while (((operand_26962 = enumerator_26962.nextObject ()))) {
      macroValidPointer (operand_26962) ;
      const GGS_bool cond_27220 = (var_cas_nonterminalMap.reader_hasKey (inLexique, operand_26962->mLeftNonTerminal.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (662)) COMMA_SOURCE_FILE_AT_LINE (662))).operator_not () ;
      if (cond_27220.isBuiltAndTrue ()) {
        var_cas_nonterminalMap.modifier_insertKey (inLexique, operand_26962->mLeftNonTerminal, var_cas_terminalMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (663)).add_operation (inLexique, var_cas_nonterminalMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (663)) COMMA_SOURCE_FILE_AT_LINE (663)) COMMA_SOURCE_FILE_AT_LINE (663)) ;
        var_cas_vocabularyListForDisplaying.addAssign_operation (((GGS_string ("<")).operator_concat (operand_26962->mLeftNonTerminal)).operator_concat (GGS_string (">"))) ;
      }
      const GGS_bool cond_27418 = (operand_26962->mSyntaxInstructionList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (666))).operator_strictSup (GGS_uint (2U)) ;
      if (cond_27418.isBuiltAndTrue ()) {
        var_cas_additionalNonTerminalSymbolsForPureBDDrules = var_cas_additionalNonTerminalSymbolsForPureBDDrules.add_operation (inLexique, operand_26962->mSyntaxInstructionList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (667)) COMMA_SOURCE_FILE_AT_LINE (667)).substract_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (667)) ;
      }
      GGS_uintlist  var_cas_rightDerivation = GGS_uintlist ::constructor_emptyList () ;
      {
        GGS_syntaxInstructionList::cEnumerator enumerator_27502 (operand_26962->mSyntaxInstructionList, true) ;
        const GGS_syntaxInstructionList::cElement * operand_27502 = NULL ;
        while (((operand_27502 = enumerator_27502.nextObject ()))) {
          macroValidPointer (operand_27502) ;
          const GGS_syntaxInstruction  temp_27562 = operand_27502->mInstruction ;
          if (temp_27562.isBuilt ()) {
            typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary method = findCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary (temp_27562.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, temp_27562 (HERE), var_cas_nonterminalMap, var_cas_terminalMap, var_cas_rightDerivation, var_cas_vocabularyListForDisplaying COMMA_SOURCE_FILE_AT_LINE (671)) ;
            }
          }
        }
      }
      GGS_derivationList  var_cas_previousDerivations = var_cas_productionListMap.reader_listForKey (inLexique, operand_26962->mLeftNonTerminal.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (674)) COMMA_SOURCE_FILE_AT_LINE (674)) ;
      GGS_bool var_cas_ok = GGS_bool (true) ;
      {
        GGS_derivationList::cEnumerator enumerator_27874 (var_cas_previousDerivations, true) ;
        const GGS_derivationList::cElement * operand_27874 = NULL ;
        while (((operand_27874 = enumerator_27874.nextObject ()))
            && (var_cas_ok.isBuiltAndTrue ())) {
          macroValidPointer (operand_27874) ;
          const GGS_bool cond_28723 = (operand_27874->mDerivation).operator_isEqual (var_cas_rightDerivation) ;
          if (cond_28723.isBuiltAndTrue ()) {
            var_cas_ok = GGS_bool (false) ;
            const GGS_bool cond_28091 = (gOption_galgas_5F_cli_5F_options_verbose_5F_output.value ()).operator_and ((var_cas_identicalDerivationErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (679))).operator_isEqual (GGS_uint (0U))) ;
            if (cond_28091.isBuiltAndTrue ()) {
              inLexique.printMessage (GGS_string (" error\n") COMMA_SOURCE_FILE_AT_LINE (680)) ;
            }
            GGS_string var_cas_errorMessage = ((((((GGS_string ("for <")).operator_concat (operand_26962->mLeftNonTerminal)).operator_concat (GGS_string ("> non terminal, productions "))).operator_concat (operand_27874->mProductionIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (685)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_idx.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (686)))).operator_concat (GGS_string (" are identical")) ;
            var_cas_identicalDerivationErrorMessageList.addAssign_operation (var_cas_errorMessage) ;
            const GGS_bool cond_28520 = gOption_galgas_5F_cli_5F_options_outputHTMLgrammarFile.value () ;
            if (cond_28520.isBuiltAndTrue ()) {
              var_cas_errorMessage.appendCString (" (for details, see ") ;
              var_cas_errorMessage.dotAssign_operation (var_cas_htmlOutputFileName) ;
              var_cas_errorMessage.appendCString (" file)") ;
            }else if (cond_28520.isBuiltAndFalse ()) {
              var_cas_errorMessage.appendCString (" (for details, turn on '--output-html-grammar-file' option and see ") ;
              var_cas_errorMessage.dotAssign_operation (var_cas_htmlOutputFileName) ;
              var_cas_errorMessage.appendCString (" file)") ;
            }
            operand_26962->mLeftNonTerminal.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (694)) ;
          }
        }
      }
      const GGS_bool cond_28970 = var_cas_ok ;
      if (cond_28970.isBuiltAndTrue ()) {
        GGS_uint  var_cas_leftTerminalIndex ;
        const GGS_vocabularyMap  temp_28825 = var_cas_nonterminalMap ;
        if (temp_28825.isBuilt ()) {
          temp_28825 (HERE)->method_searchKey (inLexique, operand_26962->mLeftNonTerminal, var_cas_leftTerminalIndex COMMA_SOURCE_FILE_AT_LINE (698)) ;
        }
        var_cas_productionListMap.addAssign_operation (operand_26962->mLeftNonTerminal.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (699)), var_cas_leftTerminalIndex, var_cas_idx, var_cas_rightDerivation) ;
      }
      var_cas_idx.mValue ++ ;
    }
  }
  const GGS_bool cond_29108 = (gOption_galgas_5F_cli_5F_options_verbose_5F_output.value ()).operator_and ((var_cas_identicalDerivationErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (702))).operator_isEqual (GGS_uint (0U))) ;
  if (cond_29108.isBuiltAndTrue ()) {
    inLexique.printMessage (GGS_string (" ok\n") COMMA_SOURCE_FILE_AT_LINE (703)) ;
  }
  GGS_uintlist  var_cas_unusedNonterminalSymbolList = GGS_uintlist ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_29265 (var_cas_grammarComponentRoot.reader_mUnusedNonterminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (707)), true) ;
    const GGS_lstringlist::cElement * operand_29265 = NULL ;
    while (((operand_29265 = enumerator_29265.nextObject ()))) {
      macroValidPointer (operand_29265) ;
      elementOf_GGS_vocabularyMap * operand_29338 = (elementOf_GGS_vocabularyMap *) var_cas_nonterminalMap.searchForWithInstruction (inLexique, operand_29265->mValue, GGS_vocabularyMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (708)) ;
      if (NULL != operand_29338) {
        var_cas_unusedNonterminalSymbolList.addAssign_operation (operand_29338->mInfo.mIndex) ;
      }else{
        operand_29265->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '<")).operator_concat (operand_29265->mValue)).operator_concat (GGS_string (">' non terminal is not declared by syntax components")) COMMA_SOURCE_FILE_AT_LINE (712)) ;
      }
    }
  }
  GGS_uint  var_cas_startSymbolIndex ;
  elementOf_GGS_vocabularyMap * operand_29668 = (elementOf_GGS_vocabularyMap *) var_cas_nonterminalMap.searchForWithInstruction (inLexique, var_cas_grammarComponentRoot.reader_mStartSymbol (inLexique COMMA_SOURCE_FILE_AT_LINE (716)), GGS_vocabularyMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (716)) ;
  if (NULL != operand_29668) {
    var_cas_startSymbolIndex = operand_29668->mInfo.mIndex ;
  }else{
    var_cas_grammarComponentRoot.reader_mStartSymbol (inLexique COMMA_SOURCE_FILE_AT_LINE (719)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '<")).operator_concat (var_cas_grammarComponentRoot.reader_mStartSymbol (inLexique COMMA_SOURCE_FILE_AT_LINE (719)))).operator_concat (GGS_string (">' non terminal is not declared by syntax components, it cannot be used as start symbol")) COMMA_SOURCE_FILE_AT_LINE (722)) ;
    var_cas_startSymbolIndex.drop () ;
  }
  GGS_string var_cas_HTMLFileHeader ;
  GGS_string var_cas_HTMLFileContents ;
  ::routine_newGrammarAnalyzer (inLexique,  var_cas_grammarComponentName,  var_cas_startSymbolIndex,  var_cas_lexiqueComponentName,  var_cas_vocabularyListForDisplaying,  var_cas_nonterminalMap,  var_cas_terminalMap,  var_cas_productionListMap,  var_cas_unusedNonterminalSymbolList,  var_cas_HTMLFileHeader,  var_cas_HTMLFileContents COMMA_SOURCE_FILE_AT_LINE (726)) ;
  const GGS_bool cond_40990 = gOption_galgas_5F_cli_5F_options_outputHTMLgrammarFile.value () ;
  if (cond_40990.isBuiltAndTrue ()) {
    GGS_string var_cas_s = template_filewrapper_grammarGenerationTemplates_html (inLexique, var_cas_grammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (888)), var_cas_syntaxRuleListForGrammar, var_cas_pureSyntaxRuleListForGrammar, var_cas_identicalDerivationErrorMessageList, var_cas_HTMLFileHeader, var_cas_HTMLFileContents) ;
    GGS_bool automatic_var_2 ;
    const GGS_string temp_40957 = var_cas_s ;
    if (temp_40957.isBuilt ()) {
      temp_40957 (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_htmlOutputFileName, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (907)) ;
    }
  }else if (cond_40990.isBuiltAndFalse ()) {
    GGS_string::class_method_deleteFileIfExists (inLexique, var_cas_htmlOutputFileName COMMA_SOURCE_FILE_AT_LINE (909)) ;
  }
  const GGS_bool cond_41728 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
  if (cond_41728.isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_grammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (915))).operator_concat (GGS_string (".h")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_grammarGenerationTemplates_optionHeaderZone2 (inLexique, var_cas_grammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (919)), var_cas_grammarComponentRoot), GGS_string ("\n"
      "\n"), template_filewrapper_grammarGenerationTemplates_optionHeaderZone3 (inLexique, var_cas_grammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (924)), var_cas_grammarComponentRoot, var_cas_nonTerminalMap, var_cas_lexiqueComponentName, var_cas_addedNonTerminalList) COMMA_SOURCE_FILE_AT_LINE (913)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileGrammarComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_grammarCompilation (void) {
 enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList ((typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList) category_method__semanticInstruction__buildSyntaxInstructionList, gClassInfoFor__semanticInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList ((typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList) category_method__nonterminalCallInstruction__buildSyntaxInstructionList, gClassInfoFor__nonterminalCallInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList ((typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList) category_method__terminalCheckInstruction__buildSyntaxInstructionList, gClassInfoFor__terminalCheckInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList ((typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList) category_method__repeatInstruction__buildSyntaxInstructionList, gClassInfoFor__repeatInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList ((typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList) category_method__selectInstruction__buildSyntaxInstructionList, gClassInfoFor__selectInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList ((typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList) category_method__parseDoInstruction__buildSyntaxInstructionList, gClassInfoFor__parseDoInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList ((typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList) category_method__blockInstruction__buildSyntaxInstructionList, gClassInfoFor__blockInstruction.slotID ()) ;
 enterCategoryReader__syntaxInstruction__htmlListing ((typeCategoryReader__syntaxInstruction__htmlListing) category_reader__semanticInstruction__htmlListing, gClassInfoFor__semanticInstruction.slotID ()) ;
 enterCategoryReader__syntaxInstruction__htmlListing ((typeCategoryReader__syntaxInstruction__htmlListing) category_reader__nonterminalCallInstruction__htmlListing, gClassInfoFor__nonterminalCallInstruction.slotID ()) ;
 enterCategoryReader__syntaxInstruction__htmlListing ((typeCategoryReader__syntaxInstruction__htmlListing) category_reader__terminalCheckInstruction__htmlListing, gClassInfoFor__terminalCheckInstruction.slotID ()) ;
 enterCategoryReader__syntaxInstruction__htmlListing ((typeCategoryReader__syntaxInstruction__htmlListing) category_reader__repeatInstruction__htmlListing, gClassInfoFor__repeatInstruction.slotID ()) ;
 enterCategoryReader__syntaxInstruction__htmlListing ((typeCategoryReader__syntaxInstruction__htmlListing) category_reader__selectInstruction__htmlListing, gClassInfoFor__selectInstruction.slotID ()) ;
 enterCategoryReader__syntaxInstruction__htmlListing ((typeCategoryReader__syntaxInstruction__htmlListing) category_reader__parseDoInstruction__htmlListing, gClassInfoFor__parseDoInstruction.slotID ()) ;
 enterCategoryReader__syntaxInstruction__htmlListing ((typeCategoryReader__syntaxInstruction__htmlListing) category_reader__blockInstruction__htmlListing, gClassInfoFor__blockInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary) category_method__semanticInstruction__enterTerminalSymbolIntoVocabulary, gClassInfoFor__semanticInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary) category_method__nonterminalCallInstruction__enterTerminalSymbolIntoVocabulary, gClassInfoFor__nonterminalCallInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary) category_method__terminalCheckInstruction__enterTerminalSymbolIntoVocabulary, gClassInfoFor__terminalCheckInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary) category_method__repeatInstruction__enterTerminalSymbolIntoVocabulary, gClassInfoFor__repeatInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary) category_method__selectInstruction__enterTerminalSymbolIntoVocabulary, gClassInfoFor__selectInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary) category_method__parseDoInstruction__enterTerminalSymbolIntoVocabulary, gClassInfoFor__parseDoInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary) category_method__blockInstruction__enterTerminalSymbolIntoVocabulary, gClassInfoFor__blockInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary) category_method__semanticInstruction__enterNonTerminalSymbolIntoVocabulary, gClassInfoFor__semanticInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary) category_method__nonterminalCallInstruction__enterNonTerminalSymbolIntoVocabulary, gClassInfoFor__nonterminalCallInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary) category_method__terminalCheckInstruction__enterNonTerminalSymbolIntoVocabulary, gClassInfoFor__terminalCheckInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary) category_method__repeatInstruction__enterNonTerminalSymbolIntoVocabulary, gClassInfoFor__repeatInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary) category_method__selectInstruction__enterNonTerminalSymbolIntoVocabulary, gClassInfoFor__selectInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary) category_method__parseDoInstruction__enterNonTerminalSymbolIntoVocabulary, gClassInfoFor__parseDoInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary) category_method__blockInstruction__enterNonTerminalSymbolIntoVocabulary, gClassInfoFor__blockInstruction.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_grammarCompilation (prologueRoutineFor_grammarCompilation,
                                   NULL) ;

//---------------------------------------------------------------------------*

