//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'grammarCompilation.cpp'                        *
//             Generated by version version GALGAS_BETA_VERSION              *
//                       march 2nd, 2012, at 21h58'8"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "grammarCompilation.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------*

#include "galgas_cli_options.h"
#include "grammarLL1grammar.h"
#include "syntaxSLRgrammar.h"
#include "lexiqueLL1grammar.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "grammarCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                  Routine 'handleNonTerminalDeclarations'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_handleNonTerminalDeclarations (GALGAS_nonTerminalSymbolMapForGrammarAnalysis & ioArgument0,
                                            const GALGAS_nonterminalDeclarationListAST constinArgument1,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Routine 'handleNonTerminalDeclarationsFromRuleList'            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_handleNonTerminalDeclarationsFromRuleList (GALGAS_nonTerminalSymbolMapForGrammarAnalysis & ioArgument0,
                                                        const GALGAS_syntaxRuleListAST constinArgument1,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Routine 'buildRuleList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildRuleList (const GALGAS_nonTerminalSymbolMapForGrammarAnalysis constinArgument0,
                            const GALGAS_lstring constinArgument1,
                            const GALGAS_syntaxRuleListAST constinArgument2,
                            GALGAS_terminalSymbolsMapForGrammarAnalysis & ioArgument3,
                            GALGAS_syntaxComponentListForGrammarAnalysis & ioArgument4,
                            GALGAS_uint & ioArgument5,
                            C_Compiler * inCompiler
                            COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Filewrapper 'grammarGenerationTemplate'                  *
//                                                                           *
//---------------------------------------------------------------------------*

extern const cDirectoryWrapper gWrapperDirectory_0_grammarGenerationTemplate ;

//---------------------------------------------------------------------------*
//                                                                           *
//    Filewrapper template 'grammarGenerationTemplate grammarZone2Header'    *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_grammarGenerationTemplate_grammarZone_32_Header (C_Compiler * inCompiler,
                                                                                   const GALGAS_grammarComponentAST & in_GRAMMAR_5F_COMPONENT_5F_ROOT
                                                                                   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//    Filewrapper template 'grammarGenerationTemplate grammarZone3Header'    *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_grammarGenerationTemplate_grammarZone_33_Header (C_Compiler * inCompiler,
                                                                                   const GALGAS_string & in_LEXIQUE_5F_IDENTIFIER,
                                                                                   const GALGAS_grammarComponentAST & in_GRAMMAR_5F_COMPONENT_5F_ROOT,
                                                                                   const GALGAS_nonTerminalSymbolMapForGrammarAnalysis & in_NON_5F_TERMINAL_5F_MAP,
                                                                                   const GALGAS_nonTerminalToAddList & in_ADDED_5F_NON_5F_TERMINAL_5F_LIST,
                                                                                   const GALGAS_bool & in_HAS_5F_INDEXING
                                                                                   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Function 'transformLabelMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_nonterminalSymbolLabelMapForGrammarAnalysis function_transformLabelMap (const GALGAS_nonTerminalLabelListAST & constinArgument_inLabels,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_nonterminalSymbolLabelMapForGrammarAnalysis result_outNonterminalSymbolLabelMapForGrammarAnalysis ; // Returned variable
  //-------- @assignmentInstructionForGeneration
  result_outNonterminalSymbolLabelMapForGrammarAnalysis = GALGAS_nonterminalSymbolLabelMapForGrammarAnalysis::constructor_emptyMap (SOURCE_FILE_AT_LINE (33)) ;
  //-------- @foreachInstructionForGeneration
  cEnumerator_nonTerminalLabelListAST enumerator_1959 (constinArgument_inLabels, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_1959.hasCurrentObject ()) {
    //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
    GALGAS_signatureForGrammarAnalysis var_formalParametersList = GALGAS_signatureForGrammarAnalysis::constructor_emptyList (SOURCE_FILE_AT_LINE (35)) ;
    //-------- @foreachInstructionForGeneration
    cEnumerator_formalParameterListAST enumerator_2062 (enumerator_1959.current_mFormalArgumentList (HERE), kEnumeration_up) ;
    //--- simple foreach instruction
    while (enumerator_2062.hasCurrentObject ()) {
      //-------- @plusEqualnstructionForGeneration
      var_formalParametersList.addAssign_operation (enumerator_2062.current_mFormalArgumentPassingMode (HERE), enumerator_2062.current_mFormalArgumentTypeName (HERE) COMMA_SOURCE_FILE_AT_LINE (37)) ;
      enumerator_2062.gotoNextObject () ;
    }
    { //-------- @modifierCallInstructionForGeneration
    result_outNonterminalSymbolLabelMapForGrammarAnalysis.modifier_insertKey (enumerator_1959.current_mLabelName (HERE), var_formalParametersList, inCompiler COMMA_SOURCE_FILE_AT_LINE (39)) ;
    } //-------- END @typeMethodInstructionForGeneration
    enumerator_1959.gotoNextObject () ;
  }
//---
  return result_outNonterminalSymbolLabelMapForGrammarAnalysis ;
}


//---------------------------------------------------------------------------*
//  Function introspection                                                   *
//---------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_transformLabelMap [2] = {
  & kTypeDescriptor_GALGAS_nonTerminalLabelListAST,
  NULL
} ;

//---------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_transformLabelMap (C_Compiler * inCompiler,
                                                                  const cObjectArray & inEffectiveParameterArray,
                                                                  const GALGAS_location & inErrorLocation
                                                                  COMMA_LOCATION_ARGS) {
  const GALGAS_nonTerminalLabelListAST operand0 = GALGAS_nonTerminalLabelListAST::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE), inCompiler, inErrorLocation COMMA_THERE) ;
  return function_transformLabelMap (operand0, inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_transformLabelMap ("transformLabelMap",
                                                                   functionWithGenericHeader_transformLabelMap,
                                                                   & kTypeDescriptor_GALGAS_nonterminalSymbolLabelMapForGrammarAnalysis,
                                                                   1,
                                                                   functionArgs_transformLabelMap) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Routine 'checkLabelMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkLabelMap (const GALGAS_location constinArgument_inNonTerminalLocation,
                            const GALGAS_nonTerminalLabelListAST constinArgument_inLabels,
                            const GALGAS_location constinArgument_inOriginalNonTerminalLocation,
                            const GALGAS_nonterminalSymbolLabelMapForGrammarAnalysis constinArgument_inNonterminalSymbolLabelMapForGrammarAnalysis,
                            C_Compiler * inCompiler
                            COMMA_UNUSED_LOCATION_ARGS) {
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_stringset var_labelStringSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE_AT_LINE (55)) ;
  //-------- @foreachInstructionForGeneration
  cEnumerator_nonTerminalLabelListAST enumerator_2695 (constinArgument_inLabels, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_2695.hasCurrentObject ()) {
    //-------- @plusEqualnstructionForGeneration
    var_labelStringSet.addAssign_operation (enumerator_2695.current_mLabelName (HERE).reader_string (SOURCE_FILE_AT_LINE (57)) COMMA_SOURCE_FILE_AT_LINE (57)) ;
    //-------- @localVariableDeclarationForGeneration
    GALGAS_signatureForGrammarAnalysis var_formalParametersList ;
    //-------- @methodCallInstructionForGeneration
    constinArgument_inNonterminalSymbolLabelMapForGrammarAnalysis.method_searchKey (enumerator_2695.current_mLabelName (HERE), var_formalParametersList, inCompiler COMMA_SOURCE_FILE_AT_LINE (59)) ;
    //-------- END @methodCallInstructionForGeneration
    //-------- @ifInstructionForGeneration
    const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, enumerator_2695.current_mFormalArgumentList (HERE).reader_length (SOURCE_FILE_AT_LINE (60)).objectCompare (var_formalParametersList.reader_length (SOURCE_FILE_AT_LINE (60)))).boolEnum () ;
    if (kBoolTrue == test_0) {
      //-------- @errorInstructionForGeneration
      //--- @ifExpressionForGeneration
      GALGAS_string temp_1 ;
      const enumGalgasBool test_2 = GALGAS_bool (kIsStrictSup, enumerator_2695.current_mFormalArgumentList (HERE).reader_length (SOURCE_FILE_AT_LINE (63)).objectCompare (GALGAS_uint ((PMUInt32) 1U))).boolEnum () ;
      if (kBoolTrue == test_2) {
        temp_1 = GALGAS_string ("s") ;
      }else if (kBoolFalse == test_2) {
        temp_1 = GALGAS_string::makeEmptyString () ;
      }
      //--- @ifExpressionForGeneration
      GALGAS_string temp_3 ;
      const enumGalgasBool test_4 = GALGAS_bool (kIsStrictSup, var_formalParametersList.reader_length (SOURCE_FILE_AT_LINE (67)).objectCompare (GALGAS_uint ((PMUInt32) 1U))).boolEnum () ;
      if (kBoolTrue == test_4) {
        temp_3 = GALGAS_string ("s") ;
      }else if (kBoolFalse == test_4) {
        temp_3 = GALGAS_string::makeEmptyString () ;
      }
      GALGAS_location location_5 (enumerator_2695.current_mLabelName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_5, enumerator_2695.current_mFormalArgumentList (HERE).reader_length (SOURCE_FILE_AT_LINE (61)).reader_string (SOURCE_FILE_AT_LINE (61)).operator_concat (GALGAS_string (" formal parameter") COMMA_SOURCE_FILE_AT_LINE (62)).operator_concat (temp_1 COMMA_SOURCE_FILE_AT_LINE (63)).operator_concat (GALGAS_string (" declared here, but declaration at ") COMMA_SOURCE_FILE_AT_LINE (64)).operator_concat (constinArgument_inNonterminalSymbolLabelMapForGrammarAnalysis.reader_locationForKey (enumerator_2695.current_mLabelName (HERE).reader_string (SOURCE_FILE_AT_LINE (65)), inCompiler COMMA_SOURCE_FILE_AT_LINE (65)).reader_locationString (inCompiler COMMA_SOURCE_FILE_AT_LINE (65)) COMMA_SOURCE_FILE_AT_LINE (65)).operator_concat (GALGAS_string (" names ") COMMA_SOURCE_FILE_AT_LINE (66)).operator_concat (var_formalParametersList.reader_length (SOURCE_FILE_AT_LINE (66)).reader_string (SOURCE_FILE_AT_LINE (66)) COMMA_SOURCE_FILE_AT_LINE (66)).operator_concat (GALGAS_string (" parameter") COMMA_SOURCE_FILE_AT_LINE (66)).operator_concat (temp_3 COMMA_SOURCE_FILE_AT_LINE (67)) COMMA_SOURCE_FILE_AT_LINE (61)) ;
    }else if (kBoolFalse == test_0) {
      //-------- @foreachInstructionForGeneration
      cEnumerator_formalParameterListAST enumerator_3476 (enumerator_2695.current_mFormalArgumentList (HERE), kEnumeration_up) ;
      cEnumerator_signatureForGrammarAnalysis enumerator_3500 (var_formalParametersList, kEnumeration_up) ;
      //--- simple foreach instruction
      while (enumerator_3476.hasCurrentObject () && enumerator_3500.hasCurrentObject ()) {
        //-------- @ifInstructionForGeneration
        const enumGalgasBool test_6 = GALGAS_bool (kIsNotEqual, enumerator_3500.current_mFormalArgumentPassingModeForGrammarAnalysis (HERE).objectCompare (enumerator_3476.current_mFormalArgumentPassingMode (HERE))).boolEnum () ;
        if (kBoolTrue == test_6) {
          //-------- @errorInstructionForGeneration
          GALGAS_location location_7 (enumerator_3500.current_mGalgasTypeNameForGrammarAnalysis (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_7, GALGAS_string (" this formal parameter is declared with ").operator_concat (categoryReader_formalArgumentString (enumerator_3500.current_mFormalArgumentPassingModeForGrammarAnalysis (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (73)) COMMA_SOURCE_FILE_AT_LINE (73)).operator_concat (GALGAS_string (" passing mode, but declaration at ") COMMA_SOURCE_FILE_AT_LINE (74)).operator_concat (constinArgument_inNonterminalSymbolLabelMapForGrammarAnalysis.reader_locationForKey (enumerator_2695.current_mLabelName (HERE).reader_string (SOURCE_FILE_AT_LINE (75)), inCompiler COMMA_SOURCE_FILE_AT_LINE (75)).reader_locationString (inCompiler COMMA_SOURCE_FILE_AT_LINE (75)) COMMA_SOURCE_FILE_AT_LINE (75)).operator_concat (GALGAS_string (" is declared with ") COMMA_SOURCE_FILE_AT_LINE (76)).operator_concat (categoryReader_formalArgumentString (enumerator_3476.current_mFormalArgumentPassingMode (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (76)) COMMA_SOURCE_FILE_AT_LINE (76)).operator_concat (GALGAS_string (" passing mode") COMMA_SOURCE_FILE_AT_LINE (76)) COMMA_SOURCE_FILE_AT_LINE (71)) ;
        }
        //-------- @ifInstructionForGeneration
        const enumGalgasBool test_8 = GALGAS_bool (kIsNotEqual, enumerator_3500.current_mGalgasTypeNameForGrammarAnalysis (HERE).reader_string (SOURCE_FILE_AT_LINE (78)).objectCompare (enumerator_3476.current_mFormalArgumentTypeName (HERE).reader_string (SOURCE_FILE_AT_LINE (78)))).boolEnum () ;
        if (kBoolTrue == test_8) {
          //-------- @errorInstructionForGeneration
          GALGAS_location location_9 (enumerator_3500.current_mGalgasTypeNameForGrammarAnalysis (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_9, GALGAS_string (" this formal parameter is declared of '@").operator_concat (enumerator_3500.current_mGalgasTypeNameForGrammarAnalysis (HERE).reader_string (SOURCE_FILE_AT_LINE (81)) COMMA_SOURCE_FILE_AT_LINE (81)).operator_concat (GALGAS_string ("' type, but declaration at ") COMMA_SOURCE_FILE_AT_LINE (82)).operator_concat (constinArgument_inNonterminalSymbolLabelMapForGrammarAnalysis.reader_locationForKey (enumerator_2695.current_mLabelName (HERE).reader_string (SOURCE_FILE_AT_LINE (83)), inCompiler COMMA_SOURCE_FILE_AT_LINE (83)).reader_locationString (inCompiler COMMA_SOURCE_FILE_AT_LINE (83)) COMMA_SOURCE_FILE_AT_LINE (83)).operator_concat (GALGAS_string (" is declared with '@") COMMA_SOURCE_FILE_AT_LINE (84)).operator_concat (enumerator_3476.current_mFormalArgumentTypeName (HERE).reader_string (SOURCE_FILE_AT_LINE (84)) COMMA_SOURCE_FILE_AT_LINE (84)).operator_concat (GALGAS_string ("' type") COMMA_SOURCE_FILE_AT_LINE (84)) COMMA_SOURCE_FILE_AT_LINE (79)) ;
        }
        enumerator_3476.gotoNextObject () ;
        enumerator_3500.gotoNextObject () ;
      }
    }
    enumerator_2695.gotoNextObject () ;
  }
  //-------- @foreachInstructionForGeneration
  cEnumerator_nonterminalSymbolLabelMapForGrammarAnalysis enumerator_4669 (constinArgument_inNonterminalSymbolLabelMapForGrammarAnalysis, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_4669.hasCurrentObject ()) {
    //-------- @ifInstructionForGeneration
    const enumGalgasBool test_10 = var_labelStringSet.reader_hasKey (enumerator_4669.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (91)) COMMA_SOURCE_FILE_AT_LINE (91)).operator_not (SOURCE_FILE_AT_LINE (91)).boolEnum () ;
    if (kBoolTrue == test_10) {
      //-------- @errorInstructionForGeneration
      inCompiler->emitSemanticError (constinArgument_inNonTerminalLocation, GALGAS_string ("this non terminal does not declare the '").operator_concat (enumerator_4669.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (93)) COMMA_SOURCE_FILE_AT_LINE (93)).operator_concat (GALGAS_string ("' label, but declaration at ") COMMA_SOURCE_FILE_AT_LINE (93)).operator_concat (constinArgument_inOriginalNonTerminalLocation.reader_locationString (inCompiler COMMA_SOURCE_FILE_AT_LINE (94)) COMMA_SOURCE_FILE_AT_LINE (94)).operator_concat (GALGAS_string (" does") COMMA_SOURCE_FILE_AT_LINE (95)) COMMA_SOURCE_FILE_AT_LINE (92)) ;
    }
    enumerator_4669.gotoNextObject () ;
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//                  Routine 'handleNonTerminalDeclarations'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_handleNonTerminalDeclarations (GALGAS_nonTerminalSymbolMapForGrammarAnalysis & ioArgument_ioNonTerminalMapForGrammarAnalysis,
                                            const GALGAS_nonterminalDeclarationListAST constinArgument_inNonterminalDeclarationList,
                                            C_Compiler * inCompiler
                                            COMMA_UNUSED_LOCATION_ARGS) {
  //-------- @foreachInstructionForGeneration
  cEnumerator_nonterminalDeclarationListAST enumerator_5286 (constinArgument_inNonterminalDeclarationList, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_5286.hasCurrentObject ()) {
    //-------- @readWriteWithInstructionForGeneration
    // index 1: attribute 'mNonTerminalIndex', type @uint
    // index 2: attribute 'mNonterminalSymbolParametersMap', type @nonterminalSymbolLabelMapForGrammarAnalysis
    cMapElement_nonTerminalSymbolMapForGrammarAnalysis * objectArray_5298 = (cMapElement_nonTerminalSymbolMapForGrammarAnalysis *) ioArgument_ioNonTerminalMapForGrammarAnalysis.readWriteAccessForWithInstruction_hasKey (inCompiler, enumerator_5286.current_mNonterminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (107)) COMMA_SOURCE_FILE_AT_LINE (107)) ;
    if (NULL != objectArray_5298) {
        macroValidSharedObject (objectArray_5298, cMapElement_nonTerminalSymbolMapForGrammarAnalysis) ;
      { //-------- @routineCallInstructionForGeneration
      routine_checkLabelMap (enumerator_5286.current_mNonterminalName (HERE).reader_location (SOURCE_FILE_AT_LINE (109)), enumerator_5286.current_mLabels (HERE), ioArgument_ioNonTerminalMapForGrammarAnalysis.reader_locationForKey (enumerator_5286.current_mNonterminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (111)), inCompiler COMMA_SOURCE_FILE_AT_LINE (111)), objectArray_5298->mAttribute_mNonterminalSymbolParametersMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (108)) ;
      } //-------- @routineCallInstructionForGeneration
    }else{
      { //-------- @modifierCallInstructionForGeneration
      ioArgument_ioNonTerminalMapForGrammarAnalysis.modifier_insertKey (enumerator_5286.current_mNonterminalName (HERE), ioArgument_ioNonTerminalMapForGrammarAnalysis.reader_count (SOURCE_FILE_AT_LINE (117)), function_transformLabelMap (enumerator_5286.current_mLabels (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (118)), inCompiler COMMA_SOURCE_FILE_AT_LINE (115)) ;
      } //-------- END @typeMethodInstructionForGeneration
    }
    enumerator_5286.gotoNextObject () ;
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//            Routine 'handleNonTerminalDeclarationsFromRuleList'            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_handleNonTerminalDeclarationsFromRuleList (GALGAS_nonTerminalSymbolMapForGrammarAnalysis & ioArgument_ioNonTerminalMapForGrammarAnalysis,
                                                        const GALGAS_syntaxRuleListAST constinArgument_inRuleList,
                                                        C_Compiler * inCompiler
                                                        COMMA_UNUSED_LOCATION_ARGS) {
  //-------- @foreachInstructionForGeneration
  cEnumerator_syntaxRuleListAST enumerator_6091 (constinArgument_inRuleList, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_6091.hasCurrentObject ()) {
    //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
    GALGAS_nonTerminalLabelListAST var_nonTerminalLabelListAST = GALGAS_nonTerminalLabelListAST::constructor_emptyList (SOURCE_FILE_AT_LINE (131)) ;
    //-------- @foreachInstructionForGeneration
    cEnumerator_syntaxRuleLabelListAST enumerator_6184 (enumerator_6091.current_mLabelList (HERE), kEnumeration_up) ;
    //--- simple foreach instruction
    while (enumerator_6184.hasCurrentObject ()) {
      //-------- @plusEqualnstructionForGeneration
      var_nonTerminalLabelListAST.addAssign_operation (enumerator_6184.current_mLabelName (HERE), enumerator_6184.current_mFormalArguments (HERE), enumerator_6184.current_mEndOfArgumentLocation (HERE) COMMA_SOURCE_FILE_AT_LINE (133)) ;
      enumerator_6184.gotoNextObject () ;
    }
    //-------- @readWriteWithInstructionForGeneration
    // index 1: attribute 'mNonTerminalIndex', type @uint
    // index 2: attribute 'mNonterminalSymbolParametersMap', type @nonterminalSymbolLabelMapForGrammarAnalysis
    cMapElement_nonTerminalSymbolMapForGrammarAnalysis * objectArray_6334 = (cMapElement_nonTerminalSymbolMapForGrammarAnalysis *) ioArgument_ioNonTerminalMapForGrammarAnalysis.readWriteAccessForWithInstruction_hasKey (inCompiler, enumerator_6091.current_mNonterminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (139)) COMMA_SOURCE_FILE_AT_LINE (139)) ;
    if (NULL != objectArray_6334) {
        macroValidSharedObject (objectArray_6334, cMapElement_nonTerminalSymbolMapForGrammarAnalysis) ;
      { //-------- @routineCallInstructionForGeneration
      routine_checkLabelMap (enumerator_6091.current_mNonterminalName (HERE).reader_location (SOURCE_FILE_AT_LINE (141)), var_nonTerminalLabelListAST, ioArgument_ioNonTerminalMapForGrammarAnalysis.reader_locationForKey (enumerator_6091.current_mNonterminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (143)), inCompiler COMMA_SOURCE_FILE_AT_LINE (143)), objectArray_6334->mAttribute_mNonterminalSymbolParametersMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (140)) ;
      } //-------- @routineCallInstructionForGeneration
    }else{
      { //-------- @modifierCallInstructionForGeneration
      ioArgument_ioNonTerminalMapForGrammarAnalysis.modifier_insertKey (enumerator_6091.current_mNonterminalName (HERE), ioArgument_ioNonTerminalMapForGrammarAnalysis.reader_count (SOURCE_FILE_AT_LINE (149)), function_transformLabelMap (var_nonTerminalLabelListAST, inCompiler COMMA_SOURCE_FILE_AT_LINE (150)), inCompiler COMMA_SOURCE_FILE_AT_LINE (147)) ;
      } //-------- END @typeMethodInstructionForGeneration
    }
    enumerator_6091.gotoNextObject () ;
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//                    Routine 'transformInstructionList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_transformInstructionList (const GALGAS_syntaxInstructionList constinArgument_inInstructionList,
                                       GALGAS_terminalSymbolsMapForGrammarAnalysis & ioArgument_ioActuallyUsedTerminalSymbolMap,
                                       const GALGAS_nonTerminalSymbolMapForGrammarAnalysis constinArgument_inNonTerminalSymbolMap,
                                       GALGAS_uint & ioArgument_ioAddedNonTerminalIndex,
                                       GALGAS_syntaxInstructionListForGrammarAnalysis & ioArgument_ioSyntaxInstructionList,
                                       C_Compiler * inCompiler
                                       COMMA_UNUSED_LOCATION_ARGS) {
  //-------- @foreachInstructionForGeneration
  cEnumerator_syntaxInstructionList enumerator_8288 (constinArgument_inInstructionList, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_8288.hasCurrentObject ()) {
    //-------- @methodCallInstructionForGeneration
    callCategoryMethod_transformInstruction ((const cPtr_syntaxInstructionAST *) enumerator_8288.current_mInstruction (HERE).ptr (), ioArgument_ioActuallyUsedTerminalSymbolMap, constinArgument_inNonTerminalSymbolMap, ioArgument_ioAddedNonTerminalIndex, ioArgument_ioSyntaxInstructionList, inCompiler COMMA_SOURCE_FILE_AT_LINE (187)) ;
    //-------- END @methodCallInstructionForGeneration
    enumerator_8288.gotoNextObject () ;
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//                          Routine 'buildRuleList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildRuleList (const GALGAS_nonTerminalSymbolMapForGrammarAnalysis constinArgument_inNonTerminalMapForGrammarAnalysis,
                            const GALGAS_lstring constinArgument_inSyntaxComponentName,
                            const GALGAS_syntaxRuleListAST constinArgument_inRuleList,
                            GALGAS_terminalSymbolsMapForGrammarAnalysis & ioArgument_ioActuallyUsedTerminalSymbolMap,
                            GALGAS_syntaxComponentListForGrammarAnalysis & ioArgument_ioSyntaxComponentListForGrammarAnalysis,
                            GALGAS_uint & ioArgument_ioAddedNonTerminalCount,
                            C_Compiler * inCompiler
                            COMMA_UNUSED_LOCATION_ARGS) {
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_productionRuleListForGrammarAnalysis var_productionRulesList = GALGAS_productionRuleListForGrammarAnalysis::constructor_emptyList (SOURCE_FILE_AT_LINE (370)) ;
  //-------- @foreachInstructionForGeneration
  cEnumerator_syntaxRuleListAST enumerator_14950 (constinArgument_inRuleList, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_14950.hasCurrentObject ()) {
    //-------- @localVariableDeclarationForGeneration
    GALGAS_uint var_nonTerminalIndex ;
    //-------- @localVariableDeclarationForGeneration
    GALGAS_nonterminalSymbolLabelMapForGrammarAnalysis var_nonterminalSymbolParametersMap ;
    //-------- @methodCallInstructionForGeneration
    constinArgument_inNonTerminalMapForGrammarAnalysis.method_searchKey (enumerator_14950.current_mNonterminalName (HERE), var_nonTerminalIndex, var_nonterminalSymbolParametersMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (374)) ;
    //-------- END @methodCallInstructionForGeneration
    //-------- @localVariableDeclarationForGeneration
    GALGAS_syntaxInstructionList var_parsedSyntaxInstructionList ;
    //-------- @methodCallInstructionForGeneration
    GALGAS_lstring joker_15310_0 ; // Joker input parameter
    GALGAS_formalParameterListAST joker_15313_0 ; // Joker input parameter
    GALGAS_location joker_15316_0 ; // Joker input parameter
    GALGAS_location joker_15348_0 ; // Joker input parameter
    enumerator_14950.current_mLabelList (HERE).method_first (joker_15310_0, joker_15313_0, joker_15316_0, var_parsedSyntaxInstructionList, joker_15348_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (376)) ;
    //-------- END @methodCallInstructionForGeneration
    //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
    GALGAS_syntaxInstructionListForGrammarAnalysis var_instructionList = GALGAS_syntaxInstructionListForGrammarAnalysis::constructor_emptyList (SOURCE_FILE_AT_LINE (378)) ;
    { //-------- @routineCallInstructionForGeneration
    routine_transformInstructionList (var_parsedSyntaxInstructionList, ioArgument_ioActuallyUsedTerminalSymbolMap, constinArgument_inNonTerminalMapForGrammarAnalysis, ioArgument_ioAddedNonTerminalCount, var_instructionList, inCompiler COMMA_SOURCE_FILE_AT_LINE (379)) ;
    } //-------- @routineCallInstructionForGeneration
    //-------- @plusEqualnstructionForGeneration
    var_productionRulesList.addAssign_operation (enumerator_14950.current_mNonterminalName (HERE), var_nonTerminalIndex, var_instructionList, var_productionRulesList.reader_length (SOURCE_FILE_AT_LINE (391)) COMMA_SOURCE_FILE_AT_LINE (387)) ;
    enumerator_14950.gotoNextObject () ;
  }
  //-------- @plusEqualnstructionForGeneration
  ioArgument_ioSyntaxComponentListForGrammarAnalysis.addAssign_operation (var_productionRulesList, constinArgument_inSyntaxComponentName COMMA_SOURCE_FILE_AT_LINE (394)) ;
}


//---------------------------------------------------------------------------*
//                                                                           *
//             Class for element of '@nonTerminalToAddList' list             *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_nonTerminalToAddList : public cCollectionElement {
//--- List attributes
  public : GALGAS_string mAttribute_mSyntaxComponentName ;
  public : GALGAS_uint mAttribute_mNonTerminalToAddCount ;

//--- Constructor
  public : cCollectionElement_nonTerminalToAddList (const GALGAS_string & in_mSyntaxComponentName,
                                                    const GALGAS_uint & in_mNonTerminalToAddCount
                                                    COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_nonTerminalToAddList::cCollectionElement_nonTerminalToAddList (const GALGAS_string & in_mSyntaxComponentName,
                                                                                  const GALGAS_uint & in_mNonTerminalToAddCount
                                                                                  COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mSyntaxComponentName (in_mSyntaxComponentName),
mAttribute_mNonTerminalToAddCount (in_mNonTerminalToAddCount) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_nonTerminalToAddList::isValid (void) const {
  return mAttribute_mSyntaxComponentName.isValid () && mAttribute_mNonTerminalToAddCount.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_nonTerminalToAddList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_nonTerminalToAddList (mAttribute_mSyntaxComponentName, mAttribute_mNonTerminalToAddCount COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_nonTerminalToAddList::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSyntaxComponentName" ":" ;
  mAttribute_mSyntaxComponentName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mNonTerminalToAddCount" ":" ;
  mAttribute_mNonTerminalToAddCount.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_nonTerminalToAddList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_nonTerminalToAddList * operand = (cCollectionElement_nonTerminalToAddList *) inOperand ;
  typeComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mSyntaxComponentName.objectCompare (operand->mAttribute_mSyntaxComponentName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mNonTerminalToAddCount.objectCompare (operand->mAttribute_mNonTerminalToAddCount) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList::GALGAS_nonTerminalToAddList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList::GALGAS_nonTerminalToAddList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList GALGAS_nonTerminalToAddList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_nonTerminalToAddList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList GALGAS_nonTerminalToAddList::constructor_listWithValue (const GALGAS_string & inOperand0,
                                                                                    const GALGAS_uint & inOperand1
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_nonTerminalToAddList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_nonTerminalToAddList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_nonTerminalToAddList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                             const GALGAS_string & in_mSyntaxComponentName,
                                                             const GALGAS_uint & in_mNonTerminalToAddCount
                                                             COMMA_LOCATION_ARGS) {
  cCollectionElement_nonTerminalToAddList * p = NULL ;
  macroMyNew (p, cCollectionElement_nonTerminalToAddList (in_mSyntaxComponentName,
                                                             in_mNonTerminalToAddCount COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_nonTerminalToAddList::addAssign_operation (const GALGAS_string & inOperand0,
                                                       const GALGAS_uint & inOperand1
                                                       COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_nonTerminalToAddList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_nonTerminalToAddList::modifier_prependValue (GALGAS_string inOperand0,
                                                         GALGAS_uint inOperand1
                                                         COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_nonTerminalToAddList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_nonTerminalToAddList::modifier_popFirst (GALGAS_string & outOperand0,
                                                     GALGAS_uint & outOperand1,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_nonTerminalToAddList * p = (cCollectionElement_nonTerminalToAddList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_nonTerminalToAddList) ;
    outOperand0 = p->mAttribute_mSyntaxComponentName ;
    outOperand1 = p->mAttribute_mNonTerminalToAddCount ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_nonTerminalToAddList::modifier_popLast (GALGAS_string & outOperand0,
                                                    GALGAS_uint & outOperand1,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_nonTerminalToAddList * p = (cCollectionElement_nonTerminalToAddList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_nonTerminalToAddList) ;
    outOperand0 = p->mAttribute_mSyntaxComponentName ;
    outOperand1 = p->mAttribute_mNonTerminalToAddCount ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_nonTerminalToAddList::method_first (GALGAS_string & outOperand0,
                                                GALGAS_uint & outOperand1,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_nonTerminalToAddList * p = (cCollectionElement_nonTerminalToAddList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_nonTerminalToAddList) ;
    outOperand0 = p->mAttribute_mSyntaxComponentName ;
    outOperand1 = p->mAttribute_mNonTerminalToAddCount ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_nonTerminalToAddList::method_last (GALGAS_string & outOperand0,
                                               GALGAS_uint & outOperand1,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_nonTerminalToAddList * p = (cCollectionElement_nonTerminalToAddList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_nonTerminalToAddList) ;
    outOperand0 = p->mAttribute_mSyntaxComponentName ;
    outOperand1 = p->mAttribute_mNonTerminalToAddCount ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList GALGAS_nonTerminalToAddList::operator_concat (const GALGAS_nonTerminalToAddList & inOperand
                                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_nonTerminalToAddList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList GALGAS_nonTerminalToAddList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  GALGAS_nonTerminalToAddList result = GALGAS_nonTerminalToAddList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList GALGAS_nonTerminalToAddList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  GALGAS_nonTerminalToAddList result = GALGAS_nonTerminalToAddList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_nonTerminalToAddList::dotAssign_operation (const GALGAS_nonTerminalToAddList inOperand
                                                       COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

GALGAS_string GALGAS_nonTerminalToAddList::reader_mSyntaxComponentNameAtIndex (const GALGAS_uint & inIndex,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_nonTerminalToAddList * p = (cCollectionElement_nonTerminalToAddList *) attributes.ptr () ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_nonTerminalToAddList) ;
    result = p->mAttribute_mSyntaxComponentName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_uint GALGAS_nonTerminalToAddList::reader_mNonTerminalToAddCountAtIndex (const GALGAS_uint & inIndex,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_nonTerminalToAddList * p = (cCollectionElement_nonTerminalToAddList *) attributes.ptr () ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_nonTerminalToAddList) ;
    result = p->mAttribute_mNonTerminalToAddCount ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_nonTerminalToAddList::cEnumerator_nonTerminalToAddList (const GALGAS_nonTerminalToAddList & inEnumeratedObject,
                                                                    const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_string cEnumerator_nonTerminalToAddList::current_mSyntaxComponentName (LOCATION_ARGS) const {
  const cCollectionElement_nonTerminalToAddList * p = (const cCollectionElement_nonTerminalToAddList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_nonTerminalToAddList) ;
  return p->mAttribute_mSyntaxComponentName ;
}

//---------------------------------------------------------------------------*

GALGAS_uint cEnumerator_nonTerminalToAddList::current_mNonTerminalToAddCount (LOCATION_ARGS) const {
  const cCollectionElement_nonTerminalToAddList * p = (const cCollectionElement_nonTerminalToAddList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_nonTerminalToAddList) ;
  return p->mAttribute_mNonTerminalToAddCount ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                        @nonTerminalToAddList type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_nonTerminalToAddList ("nonTerminalToAddList",
                                             NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_nonTerminalToAddList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_nonTerminalToAddList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_nonTerminalToAddList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_nonTerminalToAddList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList GALGAS_nonTerminalToAddList::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler,
                                                                        const GALGAS_location & inErrorLocation
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_nonTerminalToAddList result ;
  const GALGAS_nonTerminalToAddList * p = (const GALGAS_nonTerminalToAddList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_nonTerminalToAddList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "nonTerminalToAddList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Filewrapper 'grammarGenerationTemplate'                  *
//                                                                           *
//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_grammarGenerationTemplate_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_grammarGenerationTemplate_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_grammarGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_grammarGenerationTemplate_0,
  0,
  gWrapperAllDirectories_grammarGenerationTemplate_0
) ;


//---------------------------------------------------------------------------*
//                                                                           *
//    Filewrapper template 'grammarGenerationTemplate grammarZone2Header'    *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_grammarGenerationTemplate_grammarZone_32_Header (C_Compiler * /* inCompiler */,
                                                                                   const GALGAS_grammarComponentAST & in_GRAMMAR_5F_COMPONENT_5F_ROOT
                                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "#ifndef GRAMMAR_" ;
  result << in_GRAMMAR_5F_COMPONENT_5F_ROOT.reader_mGrammarName (SOURCE_FILE_AT_LINE (1)).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (1)).stringValue () ;
  result << "_HAS_BEEN_DEFINED\n"
    "#define GRAMMAR_" ;
  result << in_GRAMMAR_5F_COMPONENT_5F_ROOT.reader_mGrammarName (SOURCE_FILE_AT_LINE (2)).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (2)).stringValue () ;
  result << "_HAS_BEEN_DEFINED\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n" ;
  GALGAS_uint index_350_ (0) ;
  if (in_GRAMMAR_5F_COMPONENT_5F_ROOT.reader_mSyntaxComponents (SOURCE_FILE_AT_LINE (6)).isValid ()) {
    cEnumerator_lstringlist enumerator_350 (in_GRAMMAR_5F_COMPONENT_5F_ROOT.reader_mSyntaxComponents (SOURCE_FILE_AT_LINE (6)), kEnumeration_up) ;
    while (enumerator_350.hasCurrentObject ()) {
      result << "#include \"" ;
      result << enumerator_350.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (7)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (7)).stringValue () ;
      result << ".h\"\n" ;
      index_350_.increment () ;
      enumerator_350.gotoNextObject () ;
    }
  }
  result << "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Filewrapper template 'grammarGenerationTemplate grammarZone3Header'    *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_grammarGenerationTemplate_grammarZone_33_Header (C_Compiler * /* inCompiler */,
                                                                                   const GALGAS_string & in_LEXIQUE_5F_IDENTIFIER,
                                                                                   const GALGAS_grammarComponentAST & in_GRAMMAR_5F_COMPONENT_5F_ROOT,
                                                                                   const GALGAS_nonTerminalSymbolMapForGrammarAnalysis & in_NON_5F_TERMINAL_5F_MAP,
                                                                                   const GALGAS_nonTerminalToAddList & in_ADDED_5F_NON_5F_TERMINAL_5F_LIST,
                                                                                   const GALGAS_bool & in_HAS_5F_INDEXING
                                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  PMUInt32 columnMarker = 0 ;
  result << "//---------------------------------------------------------------------------*\n"
    "\n"
    "class cGrammar_" ;
  result << in_GRAMMAR_5F_COMPONENT_5F_ROOT.reader_mGrammarName (SOURCE_FILE_AT_LINE (3)).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (3)).stringValue () ;
  result << " : " ;
  columnMarker = result.currentColumn () ;
  GALGAS_uint index_243_ (0) ;
  if (in_GRAMMAR_5F_COMPONENT_5F_ROOT.reader_mSyntaxComponents (SOURCE_FILE_AT_LINE (4)).isValid ()) {
    cEnumerator_lstringlist enumerator_243 (in_GRAMMAR_5F_COMPONENT_5F_ROOT.reader_mSyntaxComponents (SOURCE_FILE_AT_LINE (4)), kEnumeration_up) ;
    while (enumerator_243.hasCurrentObject ()) {
      result << "public cParser_" ;
      result << enumerator_243.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (5)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (5)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (5)).stringValue () ;
      if (enumerator_243.hasNextObject ()) {
        result << ",\n" ;
        result.appendSpacesUntilColumn (columnMarker) ;
      }
      index_243_.increment () ;
      enumerator_243.gotoNextObject () ;
    }
  }
  result << " {\n" ;
  GALGAS_uint index_428_ (0) ;
  if (in_NON_5F_TERMINAL_5F_MAP.isValid ()) {
    cEnumerator_nonTerminalSymbolMapForGrammarAnalysis enumerator_428 (in_NON_5F_TERMINAL_5F_MAP, kEnumeration_up) ;
    while (enumerator_428.hasCurrentObject ()) {
      result << "//------------------------------------- '" ;
      result << enumerator_428.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (11)).stringValue () ;
      result << "' non terminal\n"
        "//--- 'parse' label\n"
        "  public : virtual void nt_" ;
      result << enumerator_428.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (14)).stringValue () ;
      result << "_parse (C_Lexique_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << " * inCompiler) ;\n"
        "\n" ;
      const enumGalgasBool test_0 = in_HAS_5F_INDEXING.boolEnum () ;
      if (kBoolTrue == test_0) {
        result << "//--- indexing\n"
          "  public : virtual void nt_" ;
        result << enumerator_428.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (18)).stringValue () ;
        result << "_indexing (C_Lexique_" ;
        result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
        result << " * inCompiler) ;\n"
          "\n" ;
      }else if (kBoolFalse == test_0) {
      }
      GALGAS_uint index_922_ (0) ;
      if (enumerator_428.current_mNonterminalSymbolParametersMap (HERE).isValid ()) {
        cEnumerator_nonterminalSymbolLabelMapForGrammarAnalysis enumerator_922 (enumerator_428.current_mNonterminalSymbolParametersMap (HERE), kEnumeration_up) ;
        while (enumerator_922.hasCurrentObject ()) {
          result << "//----------- '" ;
          result << enumerator_922.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (21)).stringValue () ;
          result << "' label\n"
            "  public : virtual void nt_" ;
          result << enumerator_428.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (23)).stringValue () ;
          result << "_" ;
          result << enumerator_922.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (23)).stringValue () ;
          result << " (" ;
          columnMarker = result.currentColumn () ;
          GALGAS_uint index_1150_IDX (0) ;
          if (enumerator_922.current_mFormalParametersList (HERE).isValid ()) {
            cEnumerator_signatureForGrammarAnalysis enumerator_1150 (enumerator_922.current_mFormalParametersList (HERE), kEnumeration_up) ;
            while (enumerator_1150.hasCurrentObject ()) {
              const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, enumerator_1150.current_mFormalArgumentPassingModeForGrammarAnalysis (HERE).objectCompare (GALGAS_formalArgumentPassingModeAST::constructor_argumentConstantIn (SOURCE_FILE_AT_LINE (25)))).boolEnum () ;
              if (kBoolTrue == test_1) {
                result << "const GALGAS_" ;
                result << enumerator_1150.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (26)).stringValue () ;
                result << " inArgument" ;
                result << index_1150_IDX.reader_string (SOURCE_FILE_AT_LINE (26)).stringValue () ;
              }else if (kBoolFalse == test_1) {
                const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, enumerator_1150.current_mFormalArgumentPassingModeForGrammarAnalysis (HERE).objectCompare (GALGAS_formalArgumentPassingModeAST::constructor_argumentInOut (SOURCE_FILE_AT_LINE (27)))).boolEnum () ;
                if (kBoolTrue == test_2) {
                  result << "GALGAS_" ;
                  result << enumerator_1150.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (28)).stringValue () ;
                  result << " & ioArgument" ;
                  result << index_1150_IDX.reader_string (SOURCE_FILE_AT_LINE (28)).stringValue () ;
                }else if (kBoolFalse == test_2) {
                  const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, enumerator_1150.current_mFormalArgumentPassingModeForGrammarAnalysis (HERE).objectCompare (GALGAS_formalArgumentPassingModeAST::constructor_argumentOut (SOURCE_FILE_AT_LINE (29)))).boolEnum () ;
                  if (kBoolTrue == test_3) {
                    result << "GALGAS_" ;
                    result << enumerator_1150.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (30)).stringValue () ;
                    result << " & outArgument" ;
                    result << index_1150_IDX.reader_string (SOURCE_FILE_AT_LINE (30)).stringValue () ;
                  }else if (kBoolFalse == test_3) {
                    result << "GALGAS_" ;
                    result << enumerator_1150.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (32)).stringValue () ;
                    result << " inArgument" ;
                    result << index_1150_IDX.reader_string (SOURCE_FILE_AT_LINE (32)).stringValue () ;
                  }
                }
              }
              result << ",\n" ;
              result.appendSpacesUntilColumn (columnMarker) ;
              index_1150_IDX.increment () ;
              enumerator_1150.gotoNextObject () ;
            }
          }
          result << "C_Lexique_" ;
          result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
          result << " * inCompiler) ;\n"
            "\n" ;
          const enumGalgasBool test_4 = GALGAS_bool (kIsEqual, in_GRAMMAR_5F_COMPONENT_5F_ROOT.reader_mStartSymbolName (SOURCE_FILE_AT_LINE (38)).reader_string (SOURCE_FILE_AT_LINE (38)).objectCompare (enumerator_428.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (38)))).boolEnum () ;
          if (kBoolTrue == test_4) {
            result << "//--- Start symbol\n"
              "  public : static void _performSourceFileParsing_" ;
            result << enumerator_922.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (40)).stringValue () ;
            result << " (" ;
            columnMarker = result.currentColumn () ;
            result << "C_Compiler * inCompiler,\n" ;
            result.appendSpacesUntilColumn (columnMarker) ;
            result << "GALGAS_lstring inFileName" ;
            GALGAS_uint index_2403_IDX (0) ;
            if (enumerator_922.current_mFormalParametersList (HERE).isValid ()) {
              cEnumerator_signatureForGrammarAnalysis enumerator_2403 (enumerator_922.current_mFormalParametersList (HERE), kEnumeration_up) ;
              while (enumerator_2403.hasCurrentObject ()) {
                result << ",\n" ;
                result.appendSpacesUntilColumn (columnMarker) ;
                const enumGalgasBool test_5 = GALGAS_bool (kIsEqual, enumerator_2403.current_mFormalArgumentPassingModeForGrammarAnalysis (HERE).objectCompare (GALGAS_formalArgumentPassingModeAST::constructor_argumentConstantIn (SOURCE_FILE_AT_LINE (44)))).boolEnum () ;
                if (kBoolTrue == test_5) {
                  result << "const GALGAS_" ;
                  result << enumerator_2403.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (45)).stringValue () ;
                  result << " inArgument" ;
                  result << index_2403_IDX.reader_string (SOURCE_FILE_AT_LINE (45)).stringValue () ;
                }else if (kBoolFalse == test_5) {
                  const enumGalgasBool test_6 = GALGAS_bool (kIsEqual, enumerator_2403.current_mFormalArgumentPassingModeForGrammarAnalysis (HERE).objectCompare (GALGAS_formalArgumentPassingModeAST::constructor_argumentInOut (SOURCE_FILE_AT_LINE (46)))).boolEnum () ;
                  if (kBoolTrue == test_6) {
                    result << "GALGAS_" ;
                    result << enumerator_2403.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (47)).stringValue () ;
                    result << " & ioArgument" ;
                    result << index_2403_IDX.reader_string (SOURCE_FILE_AT_LINE (47)).stringValue () ;
                  }else if (kBoolFalse == test_6) {
                    const enumGalgasBool test_7 = GALGAS_bool (kIsEqual, enumerator_2403.current_mFormalArgumentPassingModeForGrammarAnalysis (HERE).objectCompare (GALGAS_formalArgumentPassingModeAST::constructor_argumentOut (SOURCE_FILE_AT_LINE (48)))).boolEnum () ;
                    if (kBoolTrue == test_7) {
                      result << "GALGAS_" ;
                      result << enumerator_2403.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (49)).stringValue () ;
                      result << " & outArgument" ;
                      result << index_2403_IDX.reader_string (SOURCE_FILE_AT_LINE (49)).stringValue () ;
                    }else if (kBoolFalse == test_7) {
                      result << "GALGAS_" ;
                      result << enumerator_2403.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (51)).stringValue () ;
                      result << " inArgument" ;
                      result << index_2403_IDX.reader_string (SOURCE_FILE_AT_LINE (51)).stringValue () ;
                    }
                  }
                }
                index_2403_IDX.increment () ;
                enumerator_2403.gotoNextObject () ;
              }
            }
            result << "\n" ;
            result.appendSpacesUntilColumn (columnMarker) ;
            result << "COMMA_LOCATION_ARGS) ;\n"
              "\n"
              "  public : static void _performSourceStringParsing_" ;
            result << enumerator_922.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (55)).stringValue () ;
            result << " (" ;
            columnMarker = result.currentColumn () ;
            result << "C_Compiler * inCompiler,\n" ;
            result.appendSpacesUntilColumn (columnMarker) ;
            result << "GALGAS_string inSourceString" ;
            GALGAS_uint index_3535_IDX (0) ;
            if (enumerator_922.current_mFormalParametersList (HERE).isValid ()) {
              cEnumerator_signatureForGrammarAnalysis enumerator_3535 (enumerator_922.current_mFormalParametersList (HERE), kEnumeration_up) ;
              while (enumerator_3535.hasCurrentObject ()) {
                result << ",\n" ;
                result.appendSpacesUntilColumn (columnMarker) ;
                const enumGalgasBool test_8 = GALGAS_bool (kIsEqual, enumerator_3535.current_mFormalArgumentPassingModeForGrammarAnalysis (HERE).objectCompare (GALGAS_formalArgumentPassingModeAST::constructor_argumentConstantIn (SOURCE_FILE_AT_LINE (59)))).boolEnum () ;
                if (kBoolTrue == test_8) {
                  result << "const GALGAS_" ;
                  result << enumerator_3535.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (60)).stringValue () ;
                  result << " inArgument" ;
                  result << index_3535_IDX.reader_string (SOURCE_FILE_AT_LINE (60)).stringValue () ;
                }else if (kBoolFalse == test_8) {
                  const enumGalgasBool test_9 = GALGAS_bool (kIsEqual, enumerator_3535.current_mFormalArgumentPassingModeForGrammarAnalysis (HERE).objectCompare (GALGAS_formalArgumentPassingModeAST::constructor_argumentInOut (SOURCE_FILE_AT_LINE (61)))).boolEnum () ;
                  if (kBoolTrue == test_9) {
                    result << "GALGAS_" ;
                    result << enumerator_3535.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (62)).stringValue () ;
                    result << " & ioArgument" ;
                    result << index_3535_IDX.reader_string (SOURCE_FILE_AT_LINE (62)).stringValue () ;
                  }else if (kBoolFalse == test_9) {
                    const enumGalgasBool test_10 = GALGAS_bool (kIsEqual, enumerator_3535.current_mFormalArgumentPassingModeForGrammarAnalysis (HERE).objectCompare (GALGAS_formalArgumentPassingModeAST::constructor_argumentOut (SOURCE_FILE_AT_LINE (63)))).boolEnum () ;
                    if (kBoolTrue == test_10) {
                      result << "GALGAS_" ;
                      result << enumerator_3535.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (64)).stringValue () ;
                      result << " & outArgument" ;
                      result << index_3535_IDX.reader_string (SOURCE_FILE_AT_LINE (64)).stringValue () ;
                    }else if (kBoolFalse == test_10) {
                      result << "GALGAS_" ;
                      result << enumerator_3535.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (66)).stringValue () ;
                      result << " inArgument" ;
                      result << index_3535_IDX.reader_string (SOURCE_FILE_AT_LINE (66)).stringValue () ;
                    }
                  }
                }
                index_3535_IDX.increment () ;
                enumerator_3535.gotoNextObject () ;
              }
            }
            result << "\n" ;
            result.appendSpacesUntilColumn (columnMarker) ;
            result << "COMMA_LOCATION_ARGS) ;\n"
              "\n" ;
          }else if (kBoolFalse == test_4) {
          }
          index_922_.increment () ;
          enumerator_922.gotoNextObject () ;
        }
      }
      const enumGalgasBool test_11 = in_HAS_5F_INDEXING.operator_and (GALGAS_bool (kIsEqual, in_GRAMMAR_5F_COMPONENT_5F_ROOT.reader_mStartSymbolName (SOURCE_FILE_AT_LINE (73)).reader_string (SOURCE_FILE_AT_LINE (73)).objectCompare (enumerator_428.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (73)))) COMMA_SOURCE_FILE_AT_LINE (73)).boolEnum () ;
      if (kBoolTrue == test_11) {
        result << "//--- Start symbol indexing\n"
          "  public : static void performIndexing (" ;
        columnMarker = result.currentColumn () ;
        result << "C_Compiler * inCompiler,\n" ;
        result.appendSpacesUntilColumn (columnMarker) ;
        result << "const C_String & inSourceFilePath) ;\n"
          "\n" ;
      }else if (kBoolFalse == test_11) {
      }
      index_428_.increment () ;
      enumerator_428.gotoNextObject () ;
    }
  }
  GALGAS_uint index_4841_ (0) ;
  if (in_ADDED_5F_NON_5F_TERMINAL_5F_LIST.isValid ()) {
    cEnumerator_nonTerminalToAddList enumerator_4841 (in_ADDED_5F_NON_5F_TERMINAL_5F_LIST, kEnumeration_up) ;
    while (enumerator_4841.hasCurrentObject ()) {
      result << "  public : virtual PMSInt32 select_" ;
      result << enumerator_4841.current_mSyntaxComponentName (HERE).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (81)).stringValue () ;
      result << "_" ;
      result << enumerator_4841.current_mNonTerminalToAddCount (HERE).reader_string (SOURCE_FILE_AT_LINE (81)).stringValue () ;
      result << " (C_Lexique_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << " *) ;\n" ;
      if (enumerator_4841.hasNextObject ()) {
        result << "\n" ;
      }
      index_4841_.increment () ;
      enumerator_4841.gotoNextObject () ;
    }
  }
  result << "} ;\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "#endif\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Routine 'parseGrammarComponent'                      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_parseGrammarComponent (const GALGAS_lstring constinArgument_inSourceFile,
                                    GALGAS_parsedComponentStruct & ioArgument_ioParsedComponentStruct,
                                    GALGAS_grammarComponentAST & outArgument_outGrammarComponentRoot,
                                    C_Compiler * inCompiler
                                    COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outGrammarComponentRoot.drop () ; // Release 'out' argument
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS_string var_basename = constinArgument_inSourceFile.mAttribute_string.reader_lastPathComponent (SOURCE_FILE_AT_LINE (439)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (439)) ;
  //-------- @readOnlyWithInstructionForGeneration
  const cMapElement_parsedGrammarComponentMap * objectArray_17684 = (const cMapElement_parsedGrammarComponentMap *) ioArgument_ioParsedComponentStruct.mAttribute_mParsedGrammarComponentMap.readAccessForWithInstruction_hasKey (var_basename) ;
  if (NULL != objectArray_17684) {
      macroValidSharedObject (objectArray_17684, const cMapElement_parsedGrammarComponentMap) ;
    //-------- @assignmentInstructionForGeneration
    outArgument_outGrammarComponentRoot = objectArray_17684->mAttribute_mGrammarComponentRoot ;
  }else{
    { //-------- @grammarInstructionWithSourceFileForGeneration
    cGrammar_grammarLL_31_grammar::_performSourceFileParsing_ (inCompiler, constinArgument_inSourceFile, outArgument_outGrammarComponentRoot COMMA_SOURCE_FILE_AT_LINE (443)) ;
    } //-------- END @grammarInstructionWithSourceFileForGeneration
    { //-------- @modifierCallInstructionForGeneration
    ioArgument_ioParsedComponentStruct.mAttribute_mParsedGrammarComponentMap.modifier_insertKey (GALGAS_lstring::constructor_new (var_basename, inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (445)), constinArgument_inSourceFile, outArgument_outGrammarComponentRoot, inCompiler COMMA_SOURCE_FILE_AT_LINE (444)) ;
    } //-------- END @typeMethodInstructionForGeneration
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//                 Routine 'compileGrammarComponentFromAST'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileGrammarComponentFromAST (const GALGAS_lstring constinArgument_inSourceFile,
                                             const GALGAS_string constinArgument_inOutputDirectoryForCppFiles,
                                             const GALGAS_grammarComponentAST constinArgument_inGrammarComponentRoot,
                                             GALGAS_parsedComponentStruct & ioArgument_ioParsedComponentStruct,
                                             C_Compiler * inCompiler
                                             COMMA_UNUSED_LOCATION_ARGS) {
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS_string var_outputDirectoryForHTMLFile = constinArgument_inSourceFile.mAttribute_string.reader_stringByDeletingLastPathComponent (SOURCE_FILE_AT_LINE (485)) ;
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS_lstring var_grammarComponentName = constinArgument_inGrammarComponentRoot.reader_mGrammarName (SOURCE_FILE_AT_LINE (487)) ;
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS_string var_basename = constinArgument_inSourceFile.mAttribute_string.reader_lastPathComponent (SOURCE_FILE_AT_LINE (488)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (488)) ;
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_grammarComponentName.reader_string (SOURCE_FILE_AT_LINE (489)).objectCompare (var_basename)).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @warningInstructionForGeneration
    GALGAS_location location_1 (var_grammarComponentName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticWarning (location_1, GALGAS_string ("GALGAS checks the component name ('").operator_concat (var_grammarComponentName.reader_string (SOURCE_FILE_AT_LINE (491)) COMMA_SOURCE_FILE_AT_LINE (491)).operator_concat (GALGAS_string ("') against the source file base name ('") COMMA_SOURCE_FILE_AT_LINE (492)).operator_concat (var_basename COMMA_SOURCE_FILE_AT_LINE (492)).operator_concat (GALGAS_string ("'): they should be identical") COMMA_SOURCE_FILE_AT_LINE (492)) COMMA_SOURCE_FILE_AT_LINE (490)) ;
  }
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_terminalSymbolsMapForGrammarAnalysis var_actuallyUsedTerminalSymbolMap = GALGAS_terminalSymbolsMapForGrammarAnalysis::constructor_emptyMap (SOURCE_FILE_AT_LINE (496)) ;
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_nonTerminalSymbolMapForGrammarAnalysis var_nonTerminalMapForGrammarAnalysis = GALGAS_nonTerminalSymbolMapForGrammarAnalysis::constructor_emptyMap (SOURCE_FILE_AT_LINE (497)) ;
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS_string var_lexiqueComponentName = GALGAS_string::makeEmptyString () ;
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS_lstring var_lexiqueComponentPath = GALGAS_string::makeEmptyString ().reader_nowhere (SOURCE_FILE_AT_LINE (499)) ;
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_syntaxComponentListForGrammarAnalysis var_syntaxComponentListForGrammarAnalysis = GALGAS_syntaxComponentListForGrammarAnalysis::constructor_emptyList (SOURCE_FILE_AT_LINE (500)) ;
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_nonTerminalToAddList var_nonTerminalToAddList = GALGAS_nonTerminalToAddList::constructor_emptyList (SOURCE_FILE_AT_LINE (501)) ;
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS_uint var_addedNonTerminalCount = GALGAS_uint ((PMUInt32) 0U) ;
  //-------- @foreachInstructionForGeneration
  cEnumerator_lstringlist enumerator_20900 (constinArgument_inGrammarComponentRoot.reader_mSyntaxComponents (SOURCE_FILE_AT_LINE (503)), kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_20900.hasCurrentObject ()) {
    //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
    GALGAS_uint var_addedNonTerminalCountRef = var_addedNonTerminalCount ;
    //-------- @ifInstructionForGeneration
    const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, enumerator_20900.current_mValue (HERE).mAttribute_string.reader_pathExtension (SOURCE_FILE_AT_LINE (505)).objectCompare (GALGAS_string ("gSyntax"))).boolEnum () ;
    if (kBoolTrue == test_2) {
      //-------- @errorInstructionForGeneration
      GALGAS_location location_3 (enumerator_20900.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_3, GALGAS_string ("a syntax component file should have '.gSyntax' path extension") COMMA_SOURCE_FILE_AT_LINE (506)) ;
    }else if (kBoolFalse == test_2) {
      //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
      GALGAS_string var_syntaxComponentName = enumerator_20900.current_mValue (HERE).mAttribute_string.reader_lastPathComponent (SOURCE_FILE_AT_LINE (508)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (508)) ;
      //-------- @localVariableDeclarationForGeneration
      GALGAS_syntaxComponentAST var_syntaxComponentRoot ;
      //-------- @ifInstructionForGeneration
      const enumGalgasBool test_4 = ioArgument_ioParsedComponentStruct.reader_mParsedSyntaxComponentMap (SOURCE_FILE_AT_LINE (510)).reader_hasKey (var_syntaxComponentName COMMA_SOURCE_FILE_AT_LINE (510)).boolEnum () ;
      if (kBoolTrue == test_4) {
        //-------- @methodCallInstructionForGeneration
        GALGAS_lstring joker_21470_0 ; // Joker input parameter
        ioArgument_ioParsedComponentStruct.reader_mParsedSyntaxComponentMap (SOURCE_FILE_AT_LINE (511)).method_searchKey (GALGAS_lstring::constructor_new (var_syntaxComponentName, inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (511)), joker_21470_0, var_syntaxComponentRoot, inCompiler COMMA_SOURCE_FILE_AT_LINE (511)) ;
        //-------- END @methodCallInstructionForGeneration
      }else if (kBoolFalse == test_4) {
        //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
        GALGAS_string var_sourceFilePath = enumerator_20900.current_mValue (HERE).mAttribute_string.reader_absolutePathFromPath (constinArgument_inSourceFile.mAttribute_string.reader_stringByDeletingLastPathComponent (SOURCE_FILE_AT_LINE (513)) COMMA_SOURCE_FILE_AT_LINE (513)) ;
        //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
        GALGAS_lstring var_lSourceFilePath = GALGAS_lstring::constructor_new (var_sourceFilePath, enumerator_20900.current_mValue (HERE).reader_location (SOURCE_FILE_AT_LINE (514)) COMMA_SOURCE_FILE_AT_LINE (514)) ;
        { //-------- @grammarInstructionWithSourceFileForGeneration
        cGrammar_syntaxSLRgrammar::_performSourceFileParsing_ (inCompiler, var_lSourceFilePath, var_syntaxComponentRoot COMMA_SOURCE_FILE_AT_LINE (515)) ;
        } //-------- END @grammarInstructionWithSourceFileForGeneration
        { //-------- @modifierCallInstructionForGeneration
        ioArgument_ioParsedComponentStruct.mAttribute_mParsedSyntaxComponentMap.modifier_insertKey (GALGAS_lstring::constructor_new (var_syntaxComponentName, enumerator_20900.current_mValue (HERE).reader_location (SOURCE_FILE_AT_LINE (516)) COMMA_SOURCE_FILE_AT_LINE (516)), var_lSourceFilePath, var_syntaxComponentRoot, inCompiler COMMA_SOURCE_FILE_AT_LINE (516)) ;
        } //-------- END @typeMethodInstructionForGeneration
      }
      //-------- @assignmentInstructionForGeneration
      var_lexiqueComponentPath = var_syntaxComponentRoot.reader_mImportedLexiqueFilePath (SOURCE_FILE_AT_LINE (519)) ;
      //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
      GALGAS_string var_currentLexiqueName = var_lexiqueComponentPath.mAttribute_string.reader_lastPathComponent (SOURCE_FILE_AT_LINE (520)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (520)) ;
      //-------- @ifInstructionForGeneration
      const enumGalgasBool test_5 = GALGAS_bool (kIsEqual, var_lexiqueComponentName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
      if (kBoolTrue == test_5) {
        //-------- @assignmentInstructionForGeneration
        var_lexiqueComponentName = var_currentLexiqueName ;
      }else if (kBoolFalse == test_5) {
        //-------- @ifInstructionForGeneration
        const enumGalgasBool test_6 = GALGAS_bool (kIsNotEqual, var_lexiqueComponentName.objectCompare (var_currentLexiqueName)).boolEnum () ;
        if (kBoolTrue == test_6) {
          //-------- @errorInstructionForGeneration
          GALGAS_location location_7 (enumerator_20900.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_7, GALGAS_string ("this syntax component uses '").operator_concat (var_currentLexiqueName COMMA_SOURCE_FILE_AT_LINE (525)).operator_concat (GALGAS_string ("' lexique component, but the first syntax component uses the '") COMMA_SOURCE_FILE_AT_LINE (525)).operator_concat (var_lexiqueComponentName COMMA_SOURCE_FILE_AT_LINE (526)).operator_concat (GALGAS_string ("' lexique component (they should be the same)") COMMA_SOURCE_FILE_AT_LINE (526)) COMMA_SOURCE_FILE_AT_LINE (524)) ;
        }
      }
      { //-------- @routineCallInstructionForGeneration
      routine_handleNonTerminalDeclarations (var_nonTerminalMapForGrammarAnalysis, var_syntaxComponentRoot.reader_mNonterminalDeclarationList (SOURCE_FILE_AT_LINE (531)), inCompiler COMMA_SOURCE_FILE_AT_LINE (529)) ;
      } //-------- @routineCallInstructionForGeneration
      { //-------- @routineCallInstructionForGeneration
      routine_handleNonTerminalDeclarationsFromRuleList (var_nonTerminalMapForGrammarAnalysis, var_syntaxComponentRoot.reader_mRuleList (SOURCE_FILE_AT_LINE (536)), inCompiler COMMA_SOURCE_FILE_AT_LINE (534)) ;
      } //-------- @routineCallInstructionForGeneration
      { //-------- @routineCallInstructionForGeneration
      routine_buildRuleList (var_nonTerminalMapForGrammarAnalysis, var_syntaxComponentRoot.reader_mSyntaxComponentName (SOURCE_FILE_AT_LINE (541)), var_syntaxComponentRoot.reader_mRuleList (SOURCE_FILE_AT_LINE (542)), var_actuallyUsedTerminalSymbolMap, var_syntaxComponentListForGrammarAnalysis, var_addedNonTerminalCount, inCompiler COMMA_SOURCE_FILE_AT_LINE (539)) ;
      } //-------- @routineCallInstructionForGeneration
      //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
      GALGAS_uint var_i = GALGAS_uint ((PMUInt32) 0U) ;
      //-------- @loopInstructionForGeneration
      if (var_addedNonTerminalCount.isValid ()) {
        PMUInt32 variant_23364 = var_addedNonTerminalCount.uintValue () ;
        bool loop_23364 = true ;
        while (loop_23364) {
          loop_23364 = GALGAS_bool (kIsStrictInf, var_i.objectCompare (var_addedNonTerminalCount.substract_operation (var_addedNonTerminalCountRef, inCompiler COMMA_SOURCE_FILE_AT_LINE (548)))).isValid () ;
          if (loop_23364) {
            loop_23364 = GALGAS_bool (kIsStrictInf, var_i.objectCompare (var_addedNonTerminalCount.substract_operation (var_addedNonTerminalCountRef, inCompiler COMMA_SOURCE_FILE_AT_LINE (548)))).boolValue () ;
          }
          if (loop_23364 && (0 == variant_23364)) {
            loop_23364 = false ;
            inCompiler->loopRunTimeVariantError (SOURCE_FILE_AT_LINE (548)) ;
          }
          if (loop_23364) {
            variant_23364 -- ;
            //-------- @plusEqualnstructionForGeneration
            var_nonTerminalToAddList.addAssign_operation (var_syntaxComponentName, var_i COMMA_SOURCE_FILE_AT_LINE (549)) ;
            //-------- @incrementInstructionForGeneration
            var_i.increment_operation (inCompiler COMMA_SOURCE_FILE_AT_LINE (550)) ;
          }
        }
      }
    }
    enumerator_20900.gotoNextObject () ;
  }
  //-------- @localVariableDeclarationForGeneration
  GALGAS_lexiqueComponentAST var_lexiqueComponentAST ;
  { //-------- @routineCallInstructionForGeneration
  routine_parseLexiqueComponent (GALGAS_lstring::constructor_new (var_lexiqueComponentPath.mAttribute_string.reader_absolutePathFromPath (constinArgument_inSourceFile.mAttribute_string.reader_stringByDeletingLastPathComponent (SOURCE_FILE_AT_LINE (557)) COMMA_SOURCE_FILE_AT_LINE (557)), var_lexiqueComponentPath.reader_location (SOURCE_FILE_AT_LINE (557)) COMMA_SOURCE_FILE_AT_LINE (557)), ioArgument_ioParsedComponentStruct, var_lexiqueComponentAST, inCompiler COMMA_SOURCE_FILE_AT_LINE (556)) ;
  } //-------- @routineCallInstructionForGeneration
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS_bool var_hasIndexing = var_lexiqueComponentAST.reader_mIndexingDirectory (SOURCE_FILE_AT_LINE (561)).mAttribute_location.reader_isNowhere (SOURCE_FILE_AT_LINE (561)).operator_not (SOURCE_FILE_AT_LINE (561)) ;
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_8 = var_hasIndexing.operator_and (constinArgument_inGrammarComponentRoot.mAttribute_mHasIndexing.mAttribute_bool.operator_not (SOURCE_FILE_AT_LINE (562)) COMMA_SOURCE_FILE_AT_LINE (562)).boolEnum () ;
  if (kBoolTrue == test_8) {
    //-------- @errorInstructionForGeneration
    GALGAS_location location_9 (constinArgument_inGrammarComponentRoot.mAttribute_mGrammarName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_9, GALGAS_string ("the grammar does not enable indexing, but the '").operator_concat (var_lexiqueComponentAST.mAttribute_mLexiqueComponentName.reader_string (SOURCE_FILE_AT_LINE (563)) COMMA_SOURCE_FILE_AT_LINE (563)).operator_concat (GALGAS_string ("' does") COMMA_SOURCE_FILE_AT_LINE (563)) COMMA_SOURCE_FILE_AT_LINE (563)) ;
  }else if (kBoolFalse == test_8) {
    //-------- @ifInstructionForGeneration
    const enumGalgasBool test_10 = var_hasIndexing.operator_not (SOURCE_FILE_AT_LINE (564)).operator_and (constinArgument_inGrammarComponentRoot.mAttribute_mHasIndexing.mAttribute_bool COMMA_SOURCE_FILE_AT_LINE (564)).boolEnum () ;
    if (kBoolTrue == test_10) {
      //-------- @errorInstructionForGeneration
      GALGAS_location location_11 (constinArgument_inGrammarComponentRoot.mAttribute_mHasIndexing.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_11, GALGAS_string ("the grammar enables indexing, but the '").operator_concat (var_lexiqueComponentAST.mAttribute_mLexiqueComponentName.reader_string (SOURCE_FILE_AT_LINE (565)) COMMA_SOURCE_FILE_AT_LINE (565)).operator_concat (GALGAS_string ("' does not") COMMA_SOURCE_FILE_AT_LINE (565)) COMMA_SOURCE_FILE_AT_LINE (565)) ;
    }
  }
  //-------- @localVariableDeclarationForGeneration
  GALGAS_nonterminalSymbolLabelMapForGrammarAnalysis var_startSymbolAltMap ;
  //-------- @localVariableDeclarationForGeneration
  GALGAS_uint var_startSymbolIndex ;
  //-------- @methodCallInstructionForGeneration
  var_nonTerminalMapForGrammarAnalysis.method_searchKey (constinArgument_inGrammarComponentRoot.reader_mStartSymbolName (SOURCE_FILE_AT_LINE (571)), var_startSymbolIndex, var_startSymbolAltMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (571)) ;
  //-------- END @methodCallInstructionForGeneration
  { //-------- @routineCallInstructionForGeneration
  routine_checkLabelMap (constinArgument_inGrammarComponentRoot.reader_mStartSymbolName (SOURCE_FILE_AT_LINE (574)).reader_location (SOURCE_FILE_AT_LINE (574)), constinArgument_inGrammarComponentRoot.reader_mStartSymbolLabelList (SOURCE_FILE_AT_LINE (575)), var_nonTerminalMapForGrammarAnalysis.reader_locationForKey (constinArgument_inGrammarComponentRoot.reader_mStartSymbolName (SOURCE_FILE_AT_LINE (576)).reader_string (SOURCE_FILE_AT_LINE (576)), inCompiler COMMA_SOURCE_FILE_AT_LINE (576)), var_startSymbolAltMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (573)) ;
  } //-------- @routineCallInstructionForGeneration
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_unusedNonTerminalSymbolMapForGrammarAnalysis var_unusedNonTerminalSymbolsForGrammar = GALGAS_unusedNonTerminalSymbolMapForGrammarAnalysis::constructor_emptyMap (SOURCE_FILE_AT_LINE (580)) ;
  //-------- @foreachInstructionForGeneration
  cEnumerator_lstringlist enumerator_25343 (constinArgument_inGrammarComponentRoot.reader_mUnusedNonterminalList (SOURCE_FILE_AT_LINE (581)), kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_25343.hasCurrentObject ()) {
    //-------- @localVariableDeclarationForGeneration
    GALGAS_uint var_nonterminalIndex ;
    //-------- @methodCallInstructionForGeneration
    GALGAS_nonterminalSymbolLabelMapForGrammarAnalysis joker_25449_0 ; // Joker input parameter
    var_nonTerminalMapForGrammarAnalysis.method_searchKey (enumerator_25343.current_mValue (HERE), var_nonterminalIndex, joker_25449_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (583)) ;
    //-------- END @methodCallInstructionForGeneration
    { //-------- @modifierCallInstructionForGeneration
    var_unusedNonTerminalSymbolsForGrammar.modifier_insertKey (enumerator_25343.current_mValue (HERE), var_nonterminalIndex, inCompiler COMMA_SOURCE_FILE_AT_LINE (584)) ;
    } //-------- END @typeMethodInstructionForGeneration
    enumerator_25343.gotoNextObject () ;
  }
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_nonTerminalSymbolSortedListForGrammarAnalysis var_nonTerminalSymbolSortedListForGrammarAnalysis = GALGAS_nonTerminalSymbolSortedListForGrammarAnalysis::constructor_emptySortedList (SOURCE_FILE_AT_LINE (587)) ;
  //-------- @foreachInstructionForGeneration
  cEnumerator_nonTerminalSymbolMapForGrammarAnalysis enumerator_25808 (var_nonTerminalMapForGrammarAnalysis, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_25808.hasCurrentObject ()) {
    //-------- @plusEqualnstructionForGeneration
    var_nonTerminalSymbolSortedListForGrammarAnalysis.addAssign_operation (enumerator_25808.current_lkey (HERE), enumerator_25808.current_mNonTerminalIndex (HERE), enumerator_25808.current_mNonterminalSymbolParametersMap (HERE) COMMA_SOURCE_FILE_AT_LINE (589)) ;
    enumerator_25808.gotoNextObject () ;
  }
  { //-------- @routineCallInstructionForGeneration
  routine_grammarAnalysisAndGeneration (constinArgument_inGrammarComponentRoot.reader_mGrammarName (SOURCE_FILE_AT_LINE (593)), constinArgument_inGrammarComponentRoot.reader_mGrammarClass (SOURCE_FILE_AT_LINE (594)), var_startSymbolIndex, var_lexiqueComponentName, constinArgument_inGrammarComponentRoot.reader_mEndOfSourceText (SOURCE_FILE_AT_LINE (597)), var_actuallyUsedTerminalSymbolMap, var_syntaxComponentListForGrammarAnalysis, var_unusedNonTerminalSymbolsForGrammar, constinArgument_inOutputDirectoryForCppFiles, var_outputDirectoryForHTMLFile, var_nonTerminalSymbolSortedListForGrammarAnalysis, var_hasIndexing, inCompiler COMMA_SOURCE_FILE_AT_LINE (592)) ;
  } //-------- @routineCallInstructionForGeneration
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_12 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (607)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).boolEnum () ;
  if (kBoolTrue == test_12) {
    //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
    GALGAS_string var_zone_32_ = GALGAS_string (filewrapperTemplate_grammarGenerationTemplate_grammarZone_32_Header (inCompiler, constinArgument_inGrammarComponentRoot COMMA_SOURCE_FILE_AT_LINE (608))) ;
    //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
    GALGAS_string var_zone_33_ = GALGAS_string (filewrapperTemplate_grammarGenerationTemplate_grammarZone_33_Header (inCompiler, var_lexiqueComponentName.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (612)), constinArgument_inGrammarComponentRoot, var_nonTerminalMapForGrammarAnalysis, var_nonTerminalToAddList, var_hasIndexing COMMA_SOURCE_FILE_AT_LINE (611))) ;
    { //-------- @typeMethodInstructionForGeneration
    GALGAS_string::class_method_generateFile (constinArgument_inOutputDirectoryForCppFiles, constinArgument_inGrammarComponentRoot.reader_mGrammarName (SOURCE_FILE_AT_LINE (620)).reader_string (SOURCE_FILE_AT_LINE (620)).operator_concat (GALGAS_string (".h") COMMA_SOURCE_FILE_AT_LINE (620)), GALGAS_string ("//"), GALGAS_string ("\n"
      "\n"), var_zone_32_, GALGAS_string ("\n"
      "\n"), var_zone_33_, inCompiler COMMA_SOURCE_FILE_AT_LINE (618)) ;
    } //-------- @routineCallInstructionForGeneration
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//              Routine 'compileGrammarComponentFromSourceFile'              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileGrammarComponentFromSourceFile (const GALGAS_lstring constinArgument_inSourceFile,
                                                    const GALGAS_string constinArgument_inOutputDirectoryForCppFiles,
                                                    GALGAS_parsedComponentStruct & ioArgument_ioParsedComponentStruct,
                                                    C_Compiler * inCompiler
                                                    COMMA_UNUSED_LOCATION_ARGS) {
  //-------- @localVariableDeclarationForGeneration
  GALGAS_grammarComponentAST var_grammarComponentRoot ;
  { //-------- @routineCallInstructionForGeneration
  routine_parseGrammarComponent (constinArgument_inSourceFile, ioArgument_ioParsedComponentStruct, var_grammarComponentRoot, inCompiler COMMA_SOURCE_FILE_AT_LINE (638)) ;
  } //-------- @routineCallInstructionForGeneration
  { //-------- @routineCallInstructionForGeneration
  routine_compileGrammarComponentFromAST (constinArgument_inSourceFile, constinArgument_inOutputDirectoryForCppFiles, var_grammarComponentRoot, ioArgument_ioParsedComponentStruct, inCompiler COMMA_SOURCE_FILE_AT_LINE (640)) ;
  } //-------- @routineCallInstructionForGeneration
}


//---------------------------------------------------------------------------*
//                                                                           *
//   Abstract category method '@syntaxInstructionAST transformInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_syntaxInstructionAST_transformInstruction> gCategoryMethodTable_syntaxInstructionAST_transformInstruction ;

//---------------------------------------------------------------------------*

void enterCategoryMethod_transformInstruction (const PMSInt32 inClassIndex,
                                               categoryMethodSignature_syntaxInstructionAST_transformInstruction inMethod) {
  gCategoryMethodTable_syntaxInstructionAST_transformInstruction.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

static void freeCategoryMethod_syntaxInstructionAST_transformInstruction (void) {
  gCategoryMethodTable_syntaxInstructionAST_transformInstruction.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_syntaxInstructionAST_transformInstruction (NULL,
                                                                      freeCategoryMethod_syntaxInstructionAST_transformInstruction) ;

//---------------------------------------------------------------------------*

void callCategoryMethod_transformInstruction (const cPtr_syntaxInstructionAST * inObject,
                                              GALGAS_terminalSymbolsMapForGrammarAnalysis & io_ioActuallyUsedTerminalSymbolMap,
                                              const GALGAS_nonTerminalSymbolMapForGrammarAnalysis constin_inNonTerminalSymbolMap,
                                              GALGAS_uint & io_ioAddedNonTerminalIndex,
                                              GALGAS_syntaxInstructionListForGrammarAnalysis & io_ioSyntaxInstructionList,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_syntaxInstructionAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_syntaxInstructionAST_transformInstruction f = NULL ;
    if (classIndex < gCategoryMethodTable_syntaxInstructionAST_transformInstruction.count ()) {
      f = gCategoryMethodTable_syntaxInstructionAST_transformInstruction (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_syntaxInstructionAST_transformInstruction.count ()) {
           f = gCategoryMethodTable_syntaxInstructionAST_transformInstruction (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_syntaxInstructionAST_transformInstruction.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioActuallyUsedTerminalSymbolMap, constin_inNonTerminalSymbolMap, io_ioAddedNonTerminalIndex, io_ioSyntaxInstructionList, inCompiler COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Overriding category method '@semanticInstructionAST transformInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_semanticInstructionAST_transformInstruction (const cPtr_syntaxInstructionAST * /* inObject */,
                                                                        GALGAS_terminalSymbolsMapForGrammarAnalysis & /* ioArgument_ioActuallyUsedTerminalSymbolMap */,
                                                                        const GALGAS_nonTerminalSymbolMapForGrammarAnalysis /* constinArgument_inNonTerminalSymbolMap */,
                                                                        GALGAS_uint & /* ioArgument_ioAddedNonTerminalIndex */,
                                                                        GALGAS_syntaxInstructionListForGrammarAnalysis & /* ioArgument_ioSyntaxInstructionList */,
                                                                        C_Compiler * /* inCompiler */
                                                                        COMMA_UNUSED_LOCATION_ARGS) {
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_semanticInstructionAST_transformInstruction (void) {
  enterCategoryMethod_transformInstruction (kTypeDescriptor_GALGAS_semanticInstructionAST.mSlotID,
                                            categoryMethod_semanticInstructionAST_transformInstruction) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_semanticInstructionAST_transformInstruction (defineCategoryMethod_semanticInstructionAST_transformInstruction, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@terminalCheckInstruction transformInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_terminalCheckInstruction_transformInstruction (const cPtr_syntaxInstructionAST * inObject,
                                                                          GALGAS_terminalSymbolsMapForGrammarAnalysis & ioArgument_ioActuallyUsedTerminalSymbolMap,
                                                                          const GALGAS_nonTerminalSymbolMapForGrammarAnalysis /* constinArgument_inNonTerminalSymbolMap */,
                                                                          GALGAS_uint & /* ioArgument_ioAddedNonTerminalIndex */,
                                                                          GALGAS_syntaxInstructionListForGrammarAnalysis & ioArgument_ioSyntaxInstructionList,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_terminalCheckInstruction * object = (const cPtr_terminalCheckInstruction *) inObject ;
  macroValidSharedObject (object, const cPtr_terminalCheckInstruction) ;
  //-------- @localVariableDeclarationForGeneration
  GALGAS_uint var_terminalSymbolIndex ;
  //-------- @readWriteWithInstructionForGeneration
  // index 1: attribute 'mTerminalIndex', type @uint
  cMapElement_terminalSymbolsMapForGrammarAnalysis * objectArray_8941 = (cMapElement_terminalSymbolsMapForGrammarAnalysis *) ioArgument_ioActuallyUsedTerminalSymbolMap.readWriteAccessForWithInstruction_hasKey (inCompiler, object->mAttribute_mTerminalName.reader_string (SOURCE_FILE_AT_LINE (205)) COMMA_SOURCE_FILE_AT_LINE (205)) ;
  if (NULL != objectArray_8941) {
      macroValidSharedObject (objectArray_8941, cMapElement_terminalSymbolsMapForGrammarAnalysis) ;
    //-------- @assignmentInstructionForGeneration
    var_terminalSymbolIndex = objectArray_8941->mAttribute_mTerminalIndex ;
  }else{
    //-------- @assignmentInstructionForGeneration
    var_terminalSymbolIndex = ioArgument_ioActuallyUsedTerminalSymbolMap.reader_count (SOURCE_FILE_AT_LINE (208)) ;
    { //-------- @modifierCallInstructionForGeneration
    ioArgument_ioActuallyUsedTerminalSymbolMap.modifier_insertKey (object->mAttribute_mTerminalName, var_terminalSymbolIndex, inCompiler COMMA_SOURCE_FILE_AT_LINE (209)) ;
    } //-------- END @typeMethodInstructionForGeneration
  }
  //-------- @plusEqualnstructionForGeneration
  ioArgument_ioSyntaxInstructionList.addAssign_operation (GALGAS_terminalInstructionForGrammarAnalysis::constructor_new (object->mAttribute_mInstructionLocation, object->mAttribute_mTerminalName, var_terminalSymbolIndex COMMA_SOURCE_FILE_AT_LINE (211)) COMMA_SOURCE_FILE_AT_LINE (211)) ;
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_terminalCheckInstruction_transformInstruction (void) {
  enterCategoryMethod_transformInstruction (kTypeDescriptor_GALGAS_terminalCheckInstruction.mSlotID,
                                            categoryMethod_terminalCheckInstruction_transformInstruction) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_terminalCheckInstruction_transformInstruction (defineCategoryMethod_terminalCheckInstruction_transformInstruction, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Overriding category method '@nonterminalCallInstruction transformInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_nonterminalCallInstruction_transformInstruction (const cPtr_syntaxInstructionAST * inObject,
                                                                            GALGAS_terminalSymbolsMapForGrammarAnalysis & /* ioArgument_ioActuallyUsedTerminalSymbolMap */,
                                                                            const GALGAS_nonTerminalSymbolMapForGrammarAnalysis constinArgument_inNonTerminalSymbolMap,
                                                                            GALGAS_uint & /* ioArgument_ioAddedNonTerminalIndex */,
                                                                            GALGAS_syntaxInstructionListForGrammarAnalysis & ioArgument_ioSyntaxInstructionList,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_nonterminalCallInstruction * object = (const cPtr_nonterminalCallInstruction *) inObject ;
  macroValidSharedObject (object, const cPtr_nonterminalCallInstruction) ;
  //-------- @localVariableDeclarationForGeneration
  GALGAS_uint var_nonTerminalSymbolIndex ;
  //-------- @methodCallInstructionForGeneration
  GALGAS_nonterminalSymbolLabelMapForGrammarAnalysis joker_9909_0 ; // Joker input parameter
  constinArgument_inNonTerminalSymbolMap.method_searchKey (object->mAttribute_mNonterminalName, var_nonTerminalSymbolIndex, joker_9909_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (227)) ;
  //-------- END @methodCallInstructionForGeneration
  //-------- @plusEqualnstructionForGeneration
  ioArgument_ioSyntaxInstructionList.addAssign_operation (GALGAS_nonTerminalInstructionForGrammarAnalysis::constructor_new (object->mAttribute_mInstructionLocation, object->mAttribute_mNonterminalName, var_nonTerminalSymbolIndex COMMA_SOURCE_FILE_AT_LINE (228)) COMMA_SOURCE_FILE_AT_LINE (228)) ;
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_nonterminalCallInstruction_transformInstruction (void) {
  enterCategoryMethod_transformInstruction (kTypeDescriptor_GALGAS_nonterminalCallInstruction.mSlotID,
                                            categoryMethod_nonterminalCallInstruction_transformInstruction) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_nonterminalCallInstruction_transformInstruction (defineCategoryMethod_nonterminalCallInstruction_transformInstruction, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//   Overriding category method '@repeatInstruction transformInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_repeatInstruction_transformInstruction (const cPtr_syntaxInstructionAST * inObject,
                                                                   GALGAS_terminalSymbolsMapForGrammarAnalysis & ioArgument_ioActuallyUsedTerminalSymbolMap,
                                                                   const GALGAS_nonTerminalSymbolMapForGrammarAnalysis constinArgument_inNonTerminalSymbolMap,
                                                                   GALGAS_uint & ioArgument_ioAddedNonTerminalIndex,
                                                                   GALGAS_syntaxInstructionListForGrammarAnalysis & ioArgument_ioSyntaxInstructionList,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_repeatInstruction * object = (const cPtr_repeatInstruction *) inObject ;
  macroValidSharedObject (object, const cPtr_repeatInstruction) ;
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS_uint var_addedNonTerminalIndex = ioArgument_ioAddedNonTerminalIndex ;
  //-------- @incrementInstructionForGeneration
  ioArgument_ioAddedNonTerminalIndex.increment_operation (inCompiler COMMA_SOURCE_FILE_AT_LINE (244)) ;
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_syntaxInstructionListForGrammarAnalysis var_repeatedInstructionList = GALGAS_syntaxInstructionListForGrammarAnalysis::constructor_emptyList (SOURCE_FILE_AT_LINE (246)) ;
  { //-------- @routineCallInstructionForGeneration
  routine_transformInstructionList (object->mAttribute_mRepeatedInstructionList, ioArgument_ioActuallyUsedTerminalSymbolMap, constinArgument_inNonTerminalSymbolMap, ioArgument_ioAddedNonTerminalIndex, var_repeatedInstructionList, inCompiler COMMA_SOURCE_FILE_AT_LINE (247)) ;
  } //-------- @routineCallInstructionForGeneration
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_branchListForGrammarAnalysis var_repeatBranchList = GALGAS_branchListForGrammarAnalysis::constructor_listWithValue (var_repeatedInstructionList COMMA_SOURCE_FILE_AT_LINE (254)) ;
  //-------- @foreachInstructionForGeneration
  cEnumerator_listOfSyntaxInstructionList enumerator_10955 (object->mAttribute_mRepeatBranchList, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_10955.hasCurrentObject ()) {
    //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
    GALGAS_syntaxInstructionListForGrammarAnalysis var_syntaxInstructionList = GALGAS_syntaxInstructionListForGrammarAnalysis::constructor_emptyList (SOURCE_FILE_AT_LINE (257)) ;
    { //-------- @routineCallInstructionForGeneration
    routine_transformInstructionList (enumerator_10955.current_mSyntaxInstructionList (HERE), ioArgument_ioActuallyUsedTerminalSymbolMap, constinArgument_inNonTerminalSymbolMap, ioArgument_ioAddedNonTerminalIndex, var_syntaxInstructionList, inCompiler COMMA_SOURCE_FILE_AT_LINE (258)) ;
    } //-------- @routineCallInstructionForGeneration
    //-------- @plusEqualnstructionForGeneration
    var_repeatBranchList.addAssign_operation (var_syntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (265)) ;
    enumerator_10955.gotoNextObject () ;
  }
  //-------- @plusEqualnstructionForGeneration
  ioArgument_ioSyntaxInstructionList.addAssign_operation (GALGAS_repeatInstructionForGrammarAnalysis::constructor_new (object->mAttribute_mInstructionLocation, var_repeatBranchList, var_addedNonTerminalIndex COMMA_SOURCE_FILE_AT_LINE (268)) COMMA_SOURCE_FILE_AT_LINE (268)) ;
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_repeatInstruction_transformInstruction (void) {
  enterCategoryMethod_transformInstruction (kTypeDescriptor_GALGAS_repeatInstruction.mSlotID,
                                            categoryMethod_repeatInstruction_transformInstruction) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_repeatInstruction_transformInstruction (defineCategoryMethod_repeatInstruction_transformInstruction, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//   Overriding category method '@selectInstruction transformInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_selectInstruction_transformInstruction (const cPtr_syntaxInstructionAST * inObject,
                                                                   GALGAS_terminalSymbolsMapForGrammarAnalysis & ioArgument_ioActuallyUsedTerminalSymbolMap,
                                                                   const GALGAS_nonTerminalSymbolMapForGrammarAnalysis constinArgument_inNonTerminalSymbolMap,
                                                                   GALGAS_uint & ioArgument_ioAddedNonTerminalIndex,
                                                                   GALGAS_syntaxInstructionListForGrammarAnalysis & ioArgument_ioSyntaxInstructionList,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_selectInstruction * object = (const cPtr_selectInstruction *) inObject ;
  macroValidSharedObject (object, const cPtr_selectInstruction) ;
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS_uint var_addedNonTerminalIndex = ioArgument_ioAddedNonTerminalIndex ;
  //-------- @incrementInstructionForGeneration
  ioArgument_ioAddedNonTerminalIndex.increment_operation (inCompiler COMMA_SOURCE_FILE_AT_LINE (284)) ;
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_branchListForGrammarAnalysis var_selectBranchList = GALGAS_branchListForGrammarAnalysis::constructor_emptyList (SOURCE_FILE_AT_LINE (286)) ;
  //-------- @foreachInstructionForGeneration
  cEnumerator_listOfSyntaxInstructionList enumerator_12038 (object->mAttribute_mSelectBranchList, kEnumeration_up) ;
  //--- simple foreach instruction
  while (enumerator_12038.hasCurrentObject ()) {
    //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
    GALGAS_syntaxInstructionListForGrammarAnalysis var_syntaxInstructionList = GALGAS_syntaxInstructionListForGrammarAnalysis::constructor_emptyList (SOURCE_FILE_AT_LINE (288)) ;
    { //-------- @routineCallInstructionForGeneration
    routine_transformInstructionList (enumerator_12038.current_mSyntaxInstructionList (HERE), ioArgument_ioActuallyUsedTerminalSymbolMap, constinArgument_inNonTerminalSymbolMap, ioArgument_ioAddedNonTerminalIndex, var_syntaxInstructionList, inCompiler COMMA_SOURCE_FILE_AT_LINE (289)) ;
    } //-------- @routineCallInstructionForGeneration
    //-------- @plusEqualnstructionForGeneration
    var_selectBranchList.addAssign_operation (var_syntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (296)) ;
    enumerator_12038.gotoNextObject () ;
  }
  //-------- @plusEqualnstructionForGeneration
  ioArgument_ioSyntaxInstructionList.addAssign_operation (GALGAS_selectInstructionForGrammarAnalysis::constructor_new (object->mAttribute_mInstructionLocation, var_selectBranchList, var_addedNonTerminalIndex COMMA_SOURCE_FILE_AT_LINE (299)) COMMA_SOURCE_FILE_AT_LINE (299)) ;
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_selectInstruction_transformInstruction (void) {
  enterCategoryMethod_transformInstruction (kTypeDescriptor_GALGAS_selectInstruction.mSlotID,
                                            categoryMethod_selectInstruction_transformInstruction) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_selectInstruction_transformInstruction (defineCategoryMethod_selectInstruction_transformInstruction, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
// Overriding category method '@parseRewindInstruction transformInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_parseRewindInstruction_transformInstruction (const cPtr_syntaxInstructionAST * inObject,
                                                                        GALGAS_terminalSymbolsMapForGrammarAnalysis & ioArgument_ioActuallyUsedTerminalSymbolMap,
                                                                        const GALGAS_nonTerminalSymbolMapForGrammarAnalysis constinArgument_inNonTerminalSymbolMap,
                                                                        GALGAS_uint & ioArgument_ioAddedNonTerminalIndex,
                                                                        GALGAS_syntaxInstructionListForGrammarAnalysis & ioArgument_ioSyntaxInstructionList,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_parseRewindInstruction * object = (const cPtr_parseRewindInstruction *) inObject ;
  macroValidSharedObject (object, const cPtr_parseRewindInstruction) ;
  //-------- @localVariableDeclarationForGeneration
  GALGAS_syntaxInstructionList var_syntaxInstructionList ;
  //-------- @methodCallInstructionForGeneration
  GALGAS_location joker_13042_0 ; // Joker input parameter
  object->mAttribute_mParseRewindBranchList.method_first (var_syntaxInstructionList, joker_13042_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (315)) ;
  //-------- END @methodCallInstructionForGeneration
  { //-------- @routineCallInstructionForGeneration
  routine_transformInstructionList (var_syntaxInstructionList, ioArgument_ioActuallyUsedTerminalSymbolMap, constinArgument_inNonTerminalSymbolMap, ioArgument_ioAddedNonTerminalIndex, ioArgument_ioSyntaxInstructionList, inCompiler COMMA_SOURCE_FILE_AT_LINE (317)) ;
  } //-------- @routineCallInstructionForGeneration
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_parseRewindInstruction_transformInstruction (void) {
  enterCategoryMethod_transformInstruction (kTypeDescriptor_GALGAS_parseRewindInstruction.mSlotID,
                                            categoryMethod_parseRewindInstruction_transformInstruction) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_parseRewindInstruction_transformInstruction (defineCategoryMethod_parseRewindInstruction_transformInstruction, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//  Overriding category method '@parseWhenInstruction transformInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_parseWhenInstruction_transformInstruction (const cPtr_syntaxInstructionAST * inObject,
                                                                      GALGAS_terminalSymbolsMapForGrammarAnalysis & ioArgument_ioActuallyUsedTerminalSymbolMap,
                                                                      const GALGAS_nonTerminalSymbolMapForGrammarAnalysis constinArgument_inNonTerminalSymbolMap,
                                                                      GALGAS_uint & ioArgument_ioAddedNonTerminalIndex,
                                                                      GALGAS_syntaxInstructionListForGrammarAnalysis & ioArgument_ioSyntaxInstructionList,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_parseWhenInstruction * object = (const cPtr_parseWhenInstruction *) inObject ;
  macroValidSharedObject (object, const cPtr_parseWhenInstruction) ;
  { //-------- @routineCallInstructionForGeneration
  routine_transformInstructionList (object->mAttribute_mElseInstructionList, ioArgument_ioActuallyUsedTerminalSymbolMap, constinArgument_inNonTerminalSymbolMap, ioArgument_ioAddedNonTerminalIndex, ioArgument_ioSyntaxInstructionList, inCompiler COMMA_SOURCE_FILE_AT_LINE (334)) ;
  } //-------- @routineCallInstructionForGeneration
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_parseWhenInstruction_transformInstruction (void) {
  enterCategoryMethod_transformInstruction (kTypeDescriptor_GALGAS_parseWhenInstruction.mSlotID,
                                            categoryMethod_parseWhenInstruction_transformInstruction) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_parseWhenInstruction_transformInstruction (defineCategoryMethod_parseWhenInstruction_transformInstruction, NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//  Overriding category method '@parseLoopInstruction transformInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void categoryMethod_parseLoopInstruction_transformInstruction (const cPtr_syntaxInstructionAST * inObject,
                                                                      GALGAS_terminalSymbolsMapForGrammarAnalysis & ioArgument_ioActuallyUsedTerminalSymbolMap,
                                                                      const GALGAS_nonTerminalSymbolMapForGrammarAnalysis constinArgument_inNonTerminalSymbolMap,
                                                                      GALGAS_uint & ioArgument_ioAddedNonTerminalIndex,
                                                                      GALGAS_syntaxInstructionListForGrammarAnalysis & ioArgument_ioSyntaxInstructionList,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_parseLoopInstruction * object = (const cPtr_parseLoopInstruction *) inObject ;
  macroValidSharedObject (object, const cPtr_parseLoopInstruction) ;
  { //-------- @routineCallInstructionForGeneration
  routine_transformInstructionList (object->mAttribute_mDoInstructionList, ioArgument_ioActuallyUsedTerminalSymbolMap, constinArgument_inNonTerminalSymbolMap, ioArgument_ioAddedNonTerminalIndex, ioArgument_ioSyntaxInstructionList, inCompiler COMMA_SOURCE_FILE_AT_LINE (351)) ;
  } //-------- @routineCallInstructionForGeneration
}
//---------------------------------------------------------------------------*

static void defineCategoryMethod_parseLoopInstruction_transformInstruction (void) {
  enterCategoryMethod_transformInstruction (kTypeDescriptor_GALGAS_parseLoopInstruction.mSlotID,
                                            categoryMethod_parseLoopInstruction_transformInstruction) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_parseLoopInstruction_transformInstruction (defineCategoryMethod_parseLoopInstruction_transformInstruction, NULL) ;

//---------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList_3A_element::GALGAS_nonTerminalToAddList_3A_element (void) :
mAttribute_mSyntaxComponentName (),
mAttribute_mNonTerminalToAddCount () {
}

//---------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList_3A_element::~ GALGAS_nonTerminalToAddList_3A_element (void) {
}

//---------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList_3A_element::GALGAS_nonTerminalToAddList_3A_element (const GALGAS_string & inOperand0,
                                                                                const GALGAS_uint & inOperand1) :
mAttribute_mSyntaxComponentName (inOperand0),
mAttribute_mNonTerminalToAddCount (inOperand1) {
}

//---------------------------------------------------------------------------*

/* GALGAS_nonTerminalToAddList_3A_element & GALGAS_nonTerminalToAddList_3A_element::operator = (const GALGAS_nonTerminalToAddList_3A_element & inOperand) {
  mAttribute_mSyntaxComponentName = inOperand.mAttribute_mSyntaxComponentName ;
  mAttribute_mNonTerminalToAddCount = inOperand.mAttribute_mNonTerminalToAddCount ;
  return *this ;
} */

//---------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList_3A_element GALGAS_nonTerminalToAddList_3A_element::constructor_new (const GALGAS_string & inOperand0,
                                                                                                const GALGAS_uint & inOperand1 
                                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_nonTerminalToAddList_3A_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_nonTerminalToAddList_3A_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_nonTerminalToAddList_3A_element::objectCompare (const GALGAS_nonTerminalToAddList_3A_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mSyntaxComponentName.objectCompare (inOperand.mAttribute_mSyntaxComponentName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mNonTerminalToAddCount.objectCompare (inOperand.mAttribute_mNonTerminalToAddCount) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_nonTerminalToAddList_3A_element::isValid (void) const {
  return mAttribute_mSyntaxComponentName.isValid () && mAttribute_mNonTerminalToAddCount.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_nonTerminalToAddList_3A_element::drop (void) {
  mAttribute_mSyntaxComponentName.drop () ;
  mAttribute_mNonTerminalToAddCount.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_nonTerminalToAddList_3A_element::description (C_String & ioString,
                                                          const PMSInt32 inIndentation) const {
  ioString << "<struct @nonTerminalToAddList:element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mSyntaxComponentName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mNonTerminalToAddCount.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_string GALGAS_nonTerminalToAddList_3A_element::reader_mSyntaxComponentName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSyntaxComponentName ;
}

//---------------------------------------------------------------------------*

GALGAS_uint GALGAS_nonTerminalToAddList_3A_element::reader_mNonTerminalToAddCount (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mNonTerminalToAddCount ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                    @nonTerminalToAddList:element type                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_nonTerminalToAddList_3A_element ("nonTerminalToAddList:element",
                                                        NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_nonTerminalToAddList_3A_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_nonTerminalToAddList_3A_element ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_nonTerminalToAddList_3A_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_nonTerminalToAddList_3A_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList_3A_element GALGAS_nonTerminalToAddList_3A_element::extractObject (const GALGAS_object & inObject,
                                                                                              C_Compiler * inCompiler,
                                                                                              const GALGAS_location & inErrorLocation
                                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_nonTerminalToAddList_3A_element result ;
  const GALGAS_nonTerminalToAddList_3A_element * p = (const GALGAS_nonTerminalToAddList_3A_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_nonTerminalToAddList_3A_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "nonTerminalToAddList:element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


