//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'grammarCompilation.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 20th, 2009, at 15h26'6"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "grammarCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "grammarCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "grammarLL1grammar.h"
#include "syntaxSLRgrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'e_nonTerminalMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

e_nonTerminalMap::e_nonTerminalMap (void) :
mLabels (),
mHasParseLabel () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class map '@nonTerminalMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_nonTerminalMap::
elementOf_GGS_nonTerminalMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_nonTerminalMap & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_nonTerminalMap::
appendForMapDescription (C_Compiler & inLexique,
                         const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mLabels.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mHasParseLabel.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_nonTerminalMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_nonTerminalMap * ptr = dynamic_cast <const elementOf_GGS_nonTerminalMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mLabels.operator_isEqual (ptr->mInfo.mLabels)).boolValue ()
           && (mInfo.mHasParseLabel.operator_isEqual (ptr->mInfo.mHasParseLabel)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_nonTerminalMap::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_nonTerminalMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_nonTerminalMap * info = (e_nonTerminalMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_nonTerminalMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_nonTerminalMap * info = (e_nonTerminalMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_nonTerminalMap GGS_nonTerminalMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_nonTerminalMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalMap::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_nonTerminalMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_nonTerminalMap::
operator_isEqual (const GGS_nonTerminalMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_nonTerminalMap::
operator_isNotEqual (const GGS_nonTerminalMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalMap::
insertElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_nonTerminalLabelList & inParameter0,
                const GGS_bool& inParameter1,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap () ;
    e_nonTerminalMap info  ;
    info.mLabels = inParameter0 ;
    info.mHasParseLabel = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalMap::
searchElement (C_Compiler & inLexique,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_nonTerminalLabelList   & outParameter0,
               GGS_bool  & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mLabels ;
    outParameter1 = node->mInfo.mHasParseLabel ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_nonTerminalMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('@'),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_nonTerminalMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_nonTerminalLabelList   & outParameter0,
                                GGS_bool  & outParameter1 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                  kSearchMessage_searchKey,
                  inKey,
                  outParameter0,
                  outParameter1,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_nonTerminalMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('@'),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_nonTerminalMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_nonTerminalLabelList & inParameter0,
                                const GGS_bool& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_nonTerminalMap GGS_nonTerminalMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_nonTerminalMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_nonTerminalMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonTerminalMap GGS_nonTerminalMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_nonTerminalMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_nonTerminalMap::
reader_description (C_Compiler & inLexique
                    COMMA_LOCATION_ARGS,
                    const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @nonTerminalMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    PMSInt32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_nonTerminalLabelList  & GGS_nonTerminalMap::cEnumerator::_mLabels (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mLabels ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_nonTerminalMap::cEnumerator::_mHasParseLabel (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mHasParseLabel ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "handleNonTerminalDeclarations"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_handleNonTerminalDeclarations (C_Compiler & inLexique,
                                GGS_nonTerminalMap  & var_cas_ioNonTerminalMap,
                                const GGS_nonterminalDeclarationList   var_cas_inNonterminalDeclarationList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_handleNonTerminalDeclarations at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_nonterminalDeclarationList::cEnumerator enumerator_3135 (var_cas_inNonterminalDeclarationList, true) ;
    const GGS_nonterminalDeclarationList::cElement * operand_3135 = NULL ;
    while (((operand_3135 = enumerator_3135.nextObject ()))) {
      macroValidPointer (operand_3135) ;
      if ((var_cas_ioNonTerminalMap.reader_hasKey (inLexique, operand_3135->mNonterminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (56)) COMMA_SOURCE_FILE_AT_LINE (56))).isBuiltAndTrue ()) {
        GGS_nonTerminalLabelList  var_cas_labels ;
        GGS_bool var_cas_hasParseLabel ;
        const GGS_nonTerminalMap  temp_3302 = var_cas_ioNonTerminalMap ;
        if (temp_3302.isBuilt ()) {
          temp_3302 (HERE)->method_searchKey (inLexique, operand_3135->mNonterminalName, var_cas_labels, var_cas_hasParseLabel COMMA_SOURCE_FILE_AT_LINE (59)) ;
        }
        if (((operand_3135->mHasParseLabel).operator_and ((var_cas_hasParseLabel).operator_not ())).isBuiltAndTrue ()) {
          operand_3135->mNonterminalName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this declaration has a 'parse' label, but declaration of the same non terminal in ")).operator_concat (var_cas_ioNonTerminalMap.reader_locationForKey (inLexique, operand_3135->mNonterminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (67)) COMMA_SOURCE_FILE_AT_LINE (67)).reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (67)))).operator_concat (GGS_string (" does not have a 'parse' label")) COMMA_SOURCE_FILE_AT_LINE (69)) ;
        }else if ((((operand_3135->mHasParseLabel).operator_not ()).operator_and (var_cas_hasParseLabel)).isBuiltAndTrue ()) {
          operand_3135->mNonterminalName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this declaration has no 'parse' label, but declaration of the same non terminal in ")).operator_concat (var_cas_ioNonTerminalMap.reader_locationForKey (inLexique, operand_3135->mNonterminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (71)) COMMA_SOURCE_FILE_AT_LINE (71)).reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (71)))).operator_concat (GGS_string (" has a 'parse' label")) COMMA_SOURCE_FILE_AT_LINE (73)) ;
        }
        if (((var_cas_labels.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (75))).operator_isNotEqual (operand_3135->mLabels.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (75)))).isBuiltAndTrue ()) {
          operand_3135->mNonterminalName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("this declaration names ")).operator_concat (operand_3135->mLabels.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (77)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (77)))).operator_concat (GGS_string (" labels, but declaration of the same non terminal in "))).operator_concat (var_cas_ioNonTerminalMap.reader_locationForKey (inLexique, operand_3135->mNonterminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (79)) COMMA_SOURCE_FILE_AT_LINE (79)).reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (79)))).operator_concat (GGS_string (" names"))).operator_concat (var_cas_labels.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (81)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (81)))).operator_concat (GGS_string (" labels.")) COMMA_SOURCE_FILE_AT_LINE (84)) ;
        }else{
          {
            GGS_nonTerminalLabelList::cEnumerator enumerator_4485 (operand_3135->mLabels, true) ;
            const GGS_nonTerminalLabelList::cElement * operand_4485 = NULL ;
            GGS_nonTerminalLabelList::cEnumerator enumerator_4493 (var_cas_labels, true) ;
            const GGS_nonTerminalLabelList::cElement * operand_4493 = NULL ;
            while (((operand_4485 = enumerator_4485.nextObject ()))
                && ((operand_4493 = enumerator_4493.nextObject ()))) {
              macroValidPointer (operand_4485) ;
              macroValidPointer (operand_4493) ;
              if (((operand_4485->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (86))).operator_isNotEqual (operand_4493->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (86)))).isBuiltAndTrue ()) {
                operand_4485->mLabelName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("this label should be identical to the label '")).operator_concat (operand_4493->mLabelName)).operator_concat (GGS_string ("' declared in "))).operator_concat (operand_4493->mLabelName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (90)).reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (90))) COMMA_SOURCE_FILE_AT_LINE (92)) ;
              }
              {
                GGS_formalParameterList::cEnumerator enumerator_4870 (operand_4485->mFormalParameters, true) ;
                const GGS_formalParameterList::cElement * operand_4870 = NULL ;
                GGS_formalParameterList::cEnumerator enumerator_4888 (operand_4493->mFormalParameters, true) ;
                const GGS_formalParameterList::cElement * operand_4888 = NULL ;
                while (((operand_4870 = enumerator_4870.nextObject ()))
                    && ((operand_4888 = enumerator_4888.nextObject ()))) {
                  macroValidPointer (operand_4870) ;
                  macroValidPointer (operand_4888) ;
                  if (((operand_4870->mFormalParameterPassingMode).operator_isNotEqual (operand_4888->mFormalParameterPassingMode)).isBuiltAndTrue ()) {
                    operand_4870->mFormalParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("the passing mode (")).operator_concat (operand_4870->mFormalParameterPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (100)))).operator_concat (GGS_string (") for this parameter should be identical to the passing mode ("))).operator_concat (operand_4888->mFormalParameterPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (102)))).operator_concat (GGS_string (") of the parameter declared in"))).operator_concat (operand_4493->mLabelName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (104)).reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (104))) COMMA_SOURCE_FILE_AT_LINE (106)) ;
                  }
                  if (((operand_4870->mFormalParameterTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (107))).operator_isNotEqual (operand_4888->mFormalParameterTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (107)))).isBuiltAndTrue ()) {
                    operand_4870->mFormalParameterTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("this type name should be identical to the '@")).operator_concat (operand_4888->mFormalParameterTypeName)).operator_concat (GGS_string ("' type name used in "))).operator_concat (operand_4888->mFormalParameterTypeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (111)).reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (111))) COMMA_SOURCE_FILE_AT_LINE (113)) ;
                  }
                }
              }
            }
          }
        }
      }else{
        var_cas_ioNonTerminalMap.modifier_insertKey (inLexique, operand_3135->mNonterminalName, operand_3135->mLabels, operand_3135->mHasParseLabel COMMA_SOURCE_FILE_AT_LINE (118)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_handleNonTerminalDeclarations\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@syntaxInstruction.buildSyntaxInstructionList'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList> gDispatchTableForMethod__syntaxInstruction__buildSyntaxInstructionList ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList (typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__syntaxInstruction__buildSyntaxInstructionList.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList
findCategoryMethod__syntaxInstruction__buildSyntaxInstructionList (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__syntaxInstruction__buildSyntaxInstructionList.count ()) {
    result = gDispatchTableForMethod__syntaxInstruction__buildSyntaxInstructionList (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__syntaxInstruction__buildSyntaxInstructionList (superClassPtr) ;
      gDispatchTableForMethod__syntaxInstruction__buildSyntaxInstructionList.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "buildSyntaxInstructionList"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildSyntaxInstructionList (C_Compiler & inLexique,
                                const GGS_syntaxInstructionList   var_cas_inInstructionList,
                                GGS_syntaxInstructionList  & var_cas_outSyntaxInstructionList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildSyntaxInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outSyntaxInstructionList = GGS_syntaxInstructionList ::constructor_emptyList () ;
  {
    GGS_syntaxInstructionList::cEnumerator enumerator_7201 (var_cas_inInstructionList, true) ;
    const GGS_syntaxInstructionList::cElement * operand_7201 = NULL ;
    while (((operand_7201 = enumerator_7201.nextObject ()))) {
      macroValidPointer (operand_7201) ;
      const GGS_syntaxInstruction  temp_7249 = operand_7201->mInstruction ;
      if (temp_7249.isBuilt ()) {
        typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList method = findCategoryMethod__syntaxInstruction__buildSyntaxInstructionList (temp_7249.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_7249 (HERE), var_cas_outSyntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (147)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildSyntaxInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@semanticInstruction.buildSyntaxInstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticInstruction__buildSyntaxInstructionList (C_Compiler &,
                                const cPtr_semanticInstruction * operand_7609,
                                GGS_syntaxInstructionList  & /* var_cas_ioSyntaxInstructionList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7609 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@nonterminalCallInstruction.buildSyntaxInstructionList'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__nonterminalCallInstruction__buildSyntaxInstructionList (C_Compiler &,
                                const cPtr_nonterminalCallInstruction * operand_7833,
                                GGS_syntaxInstructionList  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7833 != NULL) {
    var_cas_ioSyntaxInstructionList.addAssign_operation (operand_7833) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@terminalCheckInstruction.buildSyntaxInstructionList'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__terminalCheckInstruction__buildSyntaxInstructionList (C_Compiler &,
                                const cPtr_terminalCheckInstruction * operand_8085,
                                GGS_syntaxInstructionList  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8085 != NULL) {
    var_cas_ioSyntaxInstructionList.addAssign_operation (operand_8085) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@repeatInstruction.buildSyntaxInstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__repeatInstruction__buildSyntaxInstructionList (C_Compiler & inLexique,
                                const cPtr_repeatInstruction * operand_8330,
                                GGS_syntaxInstructionList  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8330 != NULL) {
    GGS_syntaxInstructionList  var_cas_repeatedInstructionList ;
    ::routine_buildSyntaxInstructionList (inLexique,  operand_8330->mRepeatedInstructionList,  var_cas_repeatedInstructionList COMMA_SOURCE_FILE_AT_LINE (182)) ;
    GGS_listOfSyntaxInstructionList  var_cas_repeatBranchList = GGS_listOfSyntaxInstructionList ::constructor_emptyList () ;
    {
      GGS_listOfSyntaxInstructionList::cEnumerator enumerator_8606 (operand_8330->mRepeatBranchList, true) ;
      const GGS_listOfSyntaxInstructionList::cElement * operand_8606 = NULL ;
      while (((operand_8606 = enumerator_8606.nextObject ()))) {
        macroValidPointer (operand_8606) ;
        GGS_syntaxInstructionList  var_cas_syntaxInstructionList ;
        ::routine_buildSyntaxInstructionList (inLexique,  operand_8606->mSyntaxInstructionList,  var_cas_syntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (186)) ;
        var_cas_repeatBranchList.addAssign_operation (var_cas_syntaxInstructionList) ;
      }
    }
    GGS_repeatInstruction  var_cas_ri = GGS_repeatInstruction ::constructor_new (inLexique, operand_8330->mRepeatInstructionLocation, var_cas_repeatedInstructionList, var_cas_repeatBranchList COMMA_HERE) ;
    var_cas_ioSyntaxInstructionList.addAssign_operation (var_cas_ri) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@selectInstruction.buildSyntaxInstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__selectInstruction__buildSyntaxInstructionList (C_Compiler & inLexique,
                                const cPtr_selectInstruction * operand_9113,
                                GGS_syntaxInstructionList  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9113 != NULL) {
    GGS_listOfSyntaxInstructionList  var_cas_selectBranchList = GGS_listOfSyntaxInstructionList ::constructor_emptyList () ;
    {
      GGS_listOfSyntaxInstructionList::cEnumerator enumerator_9256 (operand_9113->mSelectBranchList, true) ;
      const GGS_listOfSyntaxInstructionList::cElement * operand_9256 = NULL ;
      while (((operand_9256 = enumerator_9256.nextObject ()))) {
        macroValidPointer (operand_9256) ;
        GGS_syntaxInstructionList  var_cas_syntaxInstructionList ;
        ::routine_buildSyntaxInstructionList (inLexique,  operand_9256->mSyntaxInstructionList,  var_cas_syntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (205)) ;
        var_cas_selectBranchList.addAssign_operation (var_cas_syntaxInstructionList) ;
      }
    }
    GGS_selectInstruction  var_cas_si = GGS_selectInstruction ::constructor_new (inLexique, operand_9113->mSelectInstructionLocation, var_cas_selectBranchList COMMA_HERE) ;
    var_cas_ioSyntaxInstructionList.addAssign_operation (var_cas_si) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@parseDoInstruction.buildSyntaxInstructionList'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__parseDoInstruction__buildSyntaxInstructionList (C_Compiler & inLexique,
                                const cPtr_parseDoInstruction * operand_9735,
                                GGS_syntaxInstructionList  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9735 != NULL) {
    GGS_syntaxInstructionList  var_cas_instructionList ;
    const GGS_listOfSyntaxInstructionList  temp_9859 = operand_9735->mParseDoBranchList ;
    if (temp_9859.isBuilt ()) {
      temp_9859 (HERE)->method_first (inLexique, var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (221)) ;
    }
    {
      GGS_syntaxInstructionList::cEnumerator enumerator_9905 (var_cas_instructionList, true) ;
      const GGS_syntaxInstructionList::cElement * operand_9905 = NULL ;
      while (((operand_9905 = enumerator_9905.nextObject ()))) {
        macroValidPointer (operand_9905) ;
        const GGS_syntaxInstruction  temp_9953 = operand_9905->mInstruction ;
        if (temp_9953.isBuilt ()) {
          typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList method = findCategoryMethod__syntaxInstruction__buildSyntaxInstructionList (temp_9953.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_9953 (HERE), var_cas_ioSyntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (223)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@blockInstruction.buildSyntaxInstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__blockInstruction__buildSyntaxInstructionList (C_Compiler & inLexique,
                                const cPtr_blockInstruction * operand_10152,
                                GGS_syntaxInstructionList  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10152 != NULL) {
    {
      GGS_syntaxInstructionList::cEnumerator enumerator_10232 (operand_10152->mInstructionList, true) ;
      const GGS_syntaxInstructionList::cElement * operand_10232 = NULL ;
      while (((operand_10232 = enumerator_10232.nextObject ()))) {
        macroValidPointer (operand_10232) ;
        const GGS_syntaxInstruction  temp_10280 = operand_10232->mInstruction ;
        if (temp_10280.isBuilt ()) {
          typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList method = findCategoryMethod__syntaxInstruction__buildSyntaxInstructionList (temp_10280.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_10280 (HERE), var_cas_ioSyntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (233)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Virtual Table for category reader '@syntaxInstruction.htmlListing'     *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryReader__syntaxInstruction__htmlListing> gDispatchTableForReader__syntaxInstruction__htmlListing ;

//---------------------------------------------------------------------------*

void
enterCategoryReader__syntaxInstruction__htmlListing (typeCategoryReader__syntaxInstruction__htmlListing inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForReader__syntaxInstruction__htmlListing.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

static GGS_string
category_reader__syntaxInstruction_defaultReader (C_Compiler &,
                                const cPtr_syntaxInstruction *
                                COMMA_UNUSED_LOCATION_ARGS) {
  return GGS_string () ;
}

//---------------------------------------------------------------------------*

typeCategoryReader__syntaxInstruction__htmlListing
findCategoryReader__syntaxInstruction__htmlListing (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryReader__syntaxInstruction__htmlListing result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForReader__syntaxInstruction__htmlListing.count ()) {
    result = gDispatchTableForReader__syntaxInstruction__htmlListing (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryReader__syntaxInstruction__htmlListing (superClassPtr) ;
      gDispatchTableForReader__syntaxInstruction__htmlListing.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  if (NULL == result) {
    result = category_reader__syntaxInstruction_defaultReader ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category reader '@semanticInstruction.htmlListing'             *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__semanticInstruction__htmlListing (C_Compiler &,
                                const cPtr_semanticInstruction * operand_10776
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outListing ;
  if (operand_10776 != NULL) {
    var_cas_outListing = GGS_string ("") ;
  }
  return var_cas_outListing ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category reader '@nonterminalCallInstruction.htmlListing'          *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__nonterminalCallInstruction__htmlListing (C_Compiler &,
                                const cPtr_nonterminalCallInstruction * operand_10972
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outListing ;
  if (operand_10972 != NULL) {
    var_cas_outListing = ((GGS_string ("<span class=\"galgas_nonterminal\">&lt;")).operator_concat (operand_10972->mNonterminalName)).operator_concat (GGS_string ("&gt;</span>")) ;
  }
  return var_cas_outListing ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category reader '@terminalCheckInstruction.htmlListing'           *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__terminalCheckInstruction__htmlListing (C_Compiler & inLexique,
                                const cPtr_terminalCheckInstruction * operand_11240
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outListing ;
  if (operand_11240 != NULL) {
    var_cas_outListing = ((GGS_string ("<span class=\"galgas_terminal\">$")).operator_concat (operand_11240->mTerminalName.ggs_string ().reader_HTMLRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (266)))).operator_concat (GGS_string ("$</span>")) ;
  }
  return var_cas_outListing ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category reader '@repeatInstruction.htmlListing'              *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__repeatInstruction__htmlListing (C_Compiler & inLexique,
                                const cPtr_repeatInstruction * operand_11510
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outListing ;
  if (operand_11510 != NULL) {
    var_cas_outListing = ((GGS_string ("<span class=\"galgas_structure\">")).operator_concat (GGS_string ("<span class=\"galgas_keyword\">repeat</span>"))).operator_concat (GGS_string ("<span class=\"within_galgas_structure\">")) ;
    {
      GGS_syntaxInstructionList::cEnumerator enumerator_11723 (operand_11510->mRepeatedInstructionList, true) ;
      const GGS_syntaxInstructionList::cElement * operand_11723 = NULL ;
      while (((operand_11723 = enumerator_11723.nextObject ()))) {
        macroValidPointer (operand_11723) ;
        var_cas_outListing.dotAssign_operation ((findCategoryReader__syntaxInstruction__htmlListing (operand_11723->mInstruction (HERE)->galgasRTTI ()) (inLexique, operand_11723->mInstruction.getPtr () COMMA_SOURCE_FILE_AT_LINE (278)))) ;
      }
    }
    var_cas_outListing.appendCString ("</span>") ;
    {
      GGS_listOfSyntaxInstructionList::cEnumerator enumerator_11845 (operand_11510->mRepeatBranchList, true) ;
      const GGS_listOfSyntaxInstructionList::cElement * operand_11845 = NULL ;
      while (((operand_11845 = enumerator_11845.nextObject ()))) {
        macroValidPointer (operand_11845) ;
        var_cas_outListing.appendCString ("<span class=\"galgas_keyword\">while</span>") ;
        var_cas_outListing.appendCString ("<span class=\"within_galgas_structure\">") ;
        {
          GGS_syntaxInstructionList::cEnumerator enumerator_12012 (operand_11845->mSyntaxInstructionList, true) ;
          const GGS_syntaxInstructionList::cElement * operand_12012 = NULL ;
          while (((operand_12012 = enumerator_12012.nextObject ()))) {
            macroValidPointer (operand_12012) ;
            var_cas_outListing.dotAssign_operation ((findCategoryReader__syntaxInstruction__htmlListing (operand_12012->mInstruction (HERE)->galgasRTTI ()) (inLexique, operand_12012->mInstruction.getPtr () COMMA_SOURCE_FILE_AT_LINE (285)))) ;
          }
        }
        var_cas_outListing.appendCString ("</span>") ;
      }
    }
    var_cas_outListing.appendCString ("<span class=\"galgas_keyword\">end repeat</span>"
    "</span>") ;
  }
  return var_cas_outListing ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category reader '@selectInstruction.htmlListing'              *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__selectInstruction__htmlListing (C_Compiler & inLexique,
                                const cPtr_selectInstruction * operand_12351
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outListing ;
  if (operand_12351 != NULL) {
    var_cas_outListing = (GGS_string ("<span class=\"galgas_structure\">")).operator_concat (GGS_string ("<span class=\"galgas_keyword\">select</span>")) ;
    {
      GGS_listOfSyntaxInstructionList::cEnumerator enumerator_12510 (operand_12351->mSelectBranchList, true) ;
      const GGS_listOfSyntaxInstructionList::cElement * operand_12510 = enumerator_12510.nextObject () ;
      if ((operand_12510 != NULL)) {
        bool _foreach_loop_12510 ;
        do{
          macroValidPointer (operand_12510) ;
          var_cas_outListing.appendCString ("<span class=\"within_galgas_structure\">") ;
          {
            GGS_syntaxInstructionList::cEnumerator enumerator_12613 (operand_12510->mSyntaxInstructionList, true) ;
            const GGS_syntaxInstructionList::cElement * operand_12613 = NULL ;
            while (((operand_12613 = enumerator_12613.nextObject ()))) {
              macroValidPointer (operand_12613) ;
              var_cas_outListing.dotAssign_operation ((findCategoryReader__syntaxInstruction__htmlListing (operand_12613->mInstruction (HERE)->galgasRTTI ()) (inLexique, operand_12613->mInstruction.getPtr () COMMA_SOURCE_FILE_AT_LINE (304)))) ;
            }
          }
          var_cas_outListing.appendCString ("</span>") ;
          operand_12510 = enumerator_12510.nextObject () ;
          _foreach_loop_12510 = ((operand_12510 != NULL)) ;
          if (_foreach_loop_12510) {
            var_cas_outListing.appendCString ("<span class=\"galgas_keyword\">or</span>") ;
          }
        }while (_foreach_loop_12510) ;
      }
    }
    var_cas_outListing.appendCString ("<span class=\"galgas_keyword\">end select</span>"
    "</span>") ;
  }
  return var_cas_outListing ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category reader '@parseDoInstruction.htmlListing'              *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__parseDoInstruction__htmlListing (C_Compiler &,
                                const cPtr_parseDoInstruction * operand_13026
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outListing ;
  if (operand_13026 != NULL) {
    var_cas_outListing = GGS_string ("[Parse do]") ;
  }
  return var_cas_outListing ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category reader '@blockInstruction.htmlListing'               *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__blockInstruction__htmlListing (C_Compiler &,
                                const cPtr_blockInstruction * operand_13222
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outListing ;
  if (operand_13222 != NULL) {
    var_cas_outListing = GGS_string ("[block]") ;
  }
  return var_cas_outListing ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@syntaxInstruction.enterTerminalSymbolIntoVocabulary'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary> gDispatchTableForMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary (typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary
findCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary.count ()) {
    result = gDispatchTableForMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary (superClassPtr) ;
      gDispatchTableForMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@semanticInstruction.enterTerminalSymbolIntoVocabulary'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticInstruction__enterTerminalSymbolIntoVocabulary (C_Compiler &,
                                const cPtr_semanticInstruction * operand_13842,
                                GGS_vocabularyMap  & /* var_cas_ioVocabularyMap */,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13842 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@nonterminalCallInstruction.enterTerminalSymbolIntoVocabulary'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__nonterminalCallInstruction__enterTerminalSymbolIntoVocabulary (C_Compiler &,
                                const cPtr_nonterminalCallInstruction * operand_14110,
                                GGS_vocabularyMap  & /* var_cas_ioVocabularyMap */,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14110 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@terminalCheckInstruction.enterTerminalSymbolIntoVocabulary'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__terminalCheckInstruction__enterTerminalSymbolIntoVocabulary (C_Compiler & inLexique,
                                const cPtr_terminalCheckInstruction * operand_14376,
                                GGS_vocabularyMap  & var_cas_ioVocabularyMap,
                                GGS_stringlist  & var_cas_ioVocabularyListForDisplaying
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14376 != NULL) {
    if (((var_cas_ioVocabularyMap.reader_hasKey (inLexique, operand_14376->mTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (361)) COMMA_SOURCE_FILE_AT_LINE (361))).operator_not ()).isBuiltAndTrue ()) {
      var_cas_ioVocabularyMap.modifier_insertKey (inLexique, operand_14376->mTerminalName, var_cas_ioVocabularyMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (362)) COMMA_SOURCE_FILE_AT_LINE (362)) ;
      var_cas_ioVocabularyListForDisplaying.addAssign_operation (((GGS_string ("$")).operator_concat (operand_14376->mTerminalName)).operator_concat (GGS_string ("$"))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@repeatInstruction.enterTerminalSymbolIntoVocabulary'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__repeatInstruction__enterTerminalSymbolIntoVocabulary (C_Compiler &,
                                const cPtr_repeatInstruction * operand_14837,
                                GGS_vocabularyMap  & /* var_cas_ioVocabularyMap */,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14837 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@selectInstruction.enterTerminalSymbolIntoVocabulary'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__selectInstruction__enterTerminalSymbolIntoVocabulary (C_Compiler &,
                                const cPtr_selectInstruction * operand_15096,
                                GGS_vocabularyMap  & /* var_cas_ioVocabularyMap */,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15096 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@parseDoInstruction.enterTerminalSymbolIntoVocabulary'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__parseDoInstruction__enterTerminalSymbolIntoVocabulary (C_Compiler &,
                                const cPtr_parseDoInstruction * operand_15356,
                                GGS_vocabularyMap  & /* var_cas_ioVocabularyMap */,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15356 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@blockInstruction.enterTerminalSymbolIntoVocabulary'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__blockInstruction__enterTerminalSymbolIntoVocabulary (C_Compiler &,
                                const cPtr_blockInstruction * operand_15614,
                                GGS_vocabularyMap  & /* var_cas_ioVocabularyMap */,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15614 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@syntaxInstruction.enterNonTerminalSymbolIntoVocabulary'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary> gDispatchTableForMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary (typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary
findCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary.count ()) {
    result = gDispatchTableForMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary (superClassPtr) ;
      gDispatchTableForMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@semanticInstruction.enterNonTerminalSymbolIntoVocabulary'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticInstruction__enterNonTerminalSymbolIntoVocabulary (C_Compiler &,
                                const cPtr_semanticInstruction * operand_16365,
                                GGS_vocabularyMap  & /* var_cas_ioNonTerminalMap */,
                                const GGS_vocabularyMap   /* var_cas_ioTerminalMap */,
                                GGS_uint64list  & /* var_cas_ioRightDerivation */,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16365 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@nonterminalCallInstruction.enterNonTerminalSymbolIntoVocabulary'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__nonterminalCallInstruction__enterNonTerminalSymbolIntoVocabulary (C_Compiler & inLexique,
                                const cPtr_nonterminalCallInstruction * operand_16718,
                                GGS_vocabularyMap  & var_cas_ioNonTerminalMap,
                                const GGS_vocabularyMap   var_cas_inTerminalMap,
                                GGS_uint64list  & var_cas_ioRightDerivation,
                                GGS_stringlist  & var_cas_ioVocabularyListForDisplaying
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16718 != NULL) {
    if (((var_cas_ioNonTerminalMap.reader_hasKey (inLexique, operand_16718->mNonterminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (428)) COMMA_SOURCE_FILE_AT_LINE (428))).operator_not ()).isBuiltAndTrue ()) {
      var_cas_ioNonTerminalMap.modifier_insertKey (inLexique, operand_16718->mNonterminalName, var_cas_ioNonTerminalMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (429)).add_operation (inLexique, var_cas_inTerminalMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (429)) COMMA_SOURCE_FILE_AT_LINE (429)) COMMA_SOURCE_FILE_AT_LINE (429)) ;
      var_cas_ioVocabularyListForDisplaying.addAssign_operation (((GGS_string ("<")).operator_concat (operand_16718->mNonterminalName)).operator_concat (GGS_string (">"))) ;
    }
    GGS_uint  var_cas_nonterminalIndex ;
    const GGS_vocabularyMap  temp_17178 = var_cas_ioNonTerminalMap ;
    if (temp_17178.isBuilt ()) {
      temp_17178 (HERE)->method_searchKey (inLexique, operand_16718->mNonterminalName, var_cas_nonterminalIndex COMMA_SOURCE_FILE_AT_LINE (433)) ;
    }
    var_cas_ioRightDerivation.addAssign_operation (var_cas_nonterminalIndex.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (434))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@terminalCheckInstruction.enterNonTerminalSymbolIntoVocabulary'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__terminalCheckInstruction__enterNonTerminalSymbolIntoVocabulary (C_Compiler & inLexique,
                                const cPtr_terminalCheckInstruction * operand_17441,
                                GGS_vocabularyMap  & /* var_cas_ioNonTerminalMap */,
                                const GGS_vocabularyMap   var_cas_inTerminalMap,
                                GGS_uint64list  & var_cas_ioRightDerivation,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17441 != NULL) {
    GGS_uint  var_cas_terminalIndex ;
    const GGS_vocabularyMap  temp_17657 = var_cas_inTerminalMap ;
    if (temp_17657.isBuilt ()) {
      temp_17657 (HERE)->method_searchKey (inLexique, operand_17441->mTerminalName, var_cas_terminalIndex COMMA_SOURCE_FILE_AT_LINE (446)) ;
    }
    var_cas_ioRightDerivation.addAssign_operation (var_cas_terminalIndex.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (447))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@repeatInstruction.enterNonTerminalSymbolIntoVocabulary'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__repeatInstruction__enterNonTerminalSymbolIntoVocabulary (C_Compiler &,
                                const cPtr_repeatInstruction * operand_17904,
                                GGS_vocabularyMap  & /* var_cas_ioNonTerminalMap */,
                                const GGS_vocabularyMap   /* var_cas_ioTerminalMap */,
                                GGS_uint64list  & /* var_cas_ioRightDerivation */,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17904 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@selectInstruction.enterNonTerminalSymbolIntoVocabulary'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__selectInstruction__enterNonTerminalSymbolIntoVocabulary (C_Compiler &,
                                const cPtr_selectInstruction * operand_18248,
                                GGS_vocabularyMap  & /* var_cas_ioNonTerminalMap */,
                                const GGS_vocabularyMap   /* var_cas_ioTerminalMap */,
                                GGS_uint64list  & /* var_cas_ioRightDerivation */,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18248 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@parseDoInstruction.enterNonTerminalSymbolIntoVocabulary' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__parseDoInstruction__enterNonTerminalSymbolIntoVocabulary (C_Compiler &,
                                const cPtr_parseDoInstruction * operand_18593,
                                GGS_vocabularyMap  & /* var_cas_ioNonTerminalMap */,
                                const GGS_vocabularyMap   /* var_cas_ioTerminalMap */,
                                GGS_uint64list  & /* var_cas_ioRightDerivation */,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18593 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@blockInstruction.enterNonTerminalSymbolIntoVocabulary'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__blockInstruction__enterNonTerminalSymbolIntoVocabulary (C_Compiler &,
                                const cPtr_blockInstruction * operand_18936,
                                GGS_vocabularyMap  & /* var_cas_ioNonTerminalMap */,
                                const GGS_vocabularyMap   /* var_cas_ioTerminalMap */,
                                GGS_uint64list  & /* var_cas_ioRightDerivation */,
                                GGS_stringlist  & /* var_cas_ioVocabularyListForDisplaying */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18936 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of wrapper 'grammarGenerationTemplates'           *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_grammarGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_grammarGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_grammarGenerationTemplates = {
  "",
  0,
  gWrapperAllFiles_grammarGenerationTemplates_0,
  0,
  gWrapperAllDirectories_grammarGenerationTemplates_0
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//       'html' template of 'grammarGenerationTemplates' filewrapper         *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_grammarGenerationTemplates_html (C_Compiler & inLexique,
                                const GGS_string& var_cas_GRAMMAR_NAME,
                                const GGS_syntaxRuleListForGrammar & var_cas_SYNTAX_RULE_LIST,
                                const GGS_syntaxRuleListForGrammar & var_cas_PURE_SYNTAX_RULE_LIST,
                                const GGS_stringlist & var_cas_ALL_VOCABULARY_FOR_BDD,
                                const GGS_vocabularyMap & var_cas_TERMINAL_MAP,
                                const GGS_uint & var_cas_ADDITIONAL_NON_TERMINAL_COUNT_FOR_BDD,
                                const GGS_vocabularyMap & var_cas_NON_TERMINAL_MAP,
                                const GGS_uint & var_cas_BIT_COUNT_FOR_BDDS,
                                const GGS_stringlist & var_cas_NON_TERMINAL_WITH_EMPTY_PRODUCTION_LIST,
                                const GGS_relationStringList & var_cas_NON_TERMINAL_WITH_ONE_ELEMENT_PRODUCTION_LIST,
                                const GGS_relationStringList & var_cas_NON_TERMINAL_WITH_TWO_ELEMENT_PRODUCTION_LIST,
                                const GGS_stringlist & var_cas_IDENTICAL_DERIVATION_ERROR_MESSAGE_LIST,
                                const GGS_stringlist & var_cas_USELESS_NON_TERMINAL_SYMBOL_LIST,
                                const GGS_stringlist & var_cas_SYMBOLS_DIRECTLY_DERIVING_IN_EMPTY_STRING,
                                const GGS_relationStringList & var_cas_FIRST_SET,
                                const GGS_uint64 & var_cas_FIRST_SET_VALUE_COUNT) {
  C_String result ;
  const bool isBuilt = var_cas_GRAMMAR_NAME.isBuilt ()
    && var_cas_SYNTAX_RULE_LIST.isBuilt ()
    && var_cas_PURE_SYNTAX_RULE_LIST.isBuilt ()
    && var_cas_ALL_VOCABULARY_FOR_BDD.isBuilt ()
    && var_cas_TERMINAL_MAP.isBuilt ()
    && var_cas_ADDITIONAL_NON_TERMINAL_COUNT_FOR_BDD.isBuilt ()
    && var_cas_NON_TERMINAL_MAP.isBuilt ()
    && var_cas_BIT_COUNT_FOR_BDDS.isBuilt ()
    && var_cas_NON_TERMINAL_WITH_EMPTY_PRODUCTION_LIST.isBuilt ()
    && var_cas_NON_TERMINAL_WITH_ONE_ELEMENT_PRODUCTION_LIST.isBuilt ()
    && var_cas_NON_TERMINAL_WITH_TWO_ELEMENT_PRODUCTION_LIST.isBuilt ()
    && var_cas_IDENTICAL_DERIVATION_ERROR_MESSAGE_LIST.isBuilt ()
    && var_cas_USELESS_NON_TERMINAL_SYMBOL_LIST.isBuilt ()
    && var_cas_SYMBOLS_DIRECTLY_DERIVING_IN_EMPTY_STRING.isBuilt ()
    && var_cas_FIRST_SET.isBuilt ()
    && var_cas_FIRST_SET_VALUE_COUNT.isBuilt () ;
  if (isBuilt) {
    result << "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n"
      "<html><head>\n"
      "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">\n"
      "<title>'" ;
    result << var_cas_GRAMMAR_NAME ;
    result << "' grammar</title>\n"
      "<style type=\"text/css\">body {\n"
      "  font-family: Helvetica, sans-serif ;\n"
      "  font-size: small ;\n"
      "}\n"
      "\n"
      "h1 {\n"
      "  text-align: center ;\n"
      "}\n"
      "\n"
      "a.header_link {\n"
      "  border: 1px solid #999999 ;\n"
      "  padding: 4px ;\n"
      "  background-color: #FFFFCC ;\n"
      "  font-weight: bold ;\n"
      "}\n"
      "\n"
      "a:visited, a:link, a:active{\n"
      "  color: blue ;\n"
      "  text-decoration: underline ;\n"
      "}\n"
      "\n"
      "a:hover {\n"
      "  color:green ;\n"
      "  background-color: #FFFF00 ;\n"
      "  text-decoration: none ;\n"
      "}\n"
      "\n"
      "table.title {\n"
      "  width: 100% ;\n"
      "  border: 1px solid #666666 ;\n"
      "  background-color: yellow ;\n"
      "  font-weight: bold ;\n"
      "  text-align: center ;\n"
      "}\n"
      "\n"
      "table.result {\n"
      "  border: 2px solid #666666 ;\n"
      "  border-collapse: collapse ;\n"
      "}\n"
      "\n"
      "td.result_title {\n"
      "  font-weight: bold ;\n"
      "  text-align: center ;\n"
      "  border-top: 2px solid #666666 ;\n"
      "}\n"
      "\n"
      "tr.result_line {\n"
      "  background-color: #EEEEEE ;\n"
      "  border-top: 1px solid #999999 ;\n"
      "}\n"
      "td.result_line {\n"
      "  border-right: 1px solid #999999 ;\n"
      "}\n"
      "\n"
      "span.error {\n"
      "  font-weight: bold ;\n"
      "  color: red ;\n"
      "}\n"
      "\n"
      "span.warning {\n"
      "  font-weight: bold ;\n"
      "  color: #FF9966 ;\n"
      "}\n"
      "\n"
      "span.success {\n"
      "  font-weight: bold ;\n"
      "  color: green ;\n"
      "}\n"
      "\n"
      "span.list {\n"
      "  display: block ;\n"
      "  line-height: 100% ;\n"
      "}\n"
      "\n"
      "span.galgas_structure {\n"
      "  display: block ;\n"
      "}\n"
      "\n"
      "span.within_galgas_structure {\n"
      "  display: block ;\n"
      "  padding-left: 1em ;\n"
      "  margin-left: 1em ;\n"
      "  border-left: 1px dotted black ;\n"
      "}\n"
      "\n"
      "span.galgas_keyword {\n"
      "  display: block ;\n"
      "  font-weight: bold ;\n"
      "  color: blue ;\n"
      "}\n"
      "\n"
      "span.galgas_terminal {\n"
      "  display: block ;\n"
      "}\n"
      "\n"
      "span.galgas_nonterminal {\n"
      "  display: block ;\n"
      "}\n"
      "</style></head><body><div>\n"
      "<h1>'" ;
    result << var_cas_GRAMMAR_NAME ;
    result << "' grammar</h1>\n"
      "<p><a class=\"header_link\" href=\"#pure_bnf\">Pure BNF productions</a></p>\n"
      "<p><a class=\"header_link\" href=\"#identical_productions\">Identical productions</a></p>\n"
      "<p><a class=\"header_link\" href=\"#pureBDD\">Transformation into BDDs</a></p>\n"
      "<p><a class=\"header_link\" href=\"#useful_symbols\">Useful symbols</a></p>\n"
      "<p><a class=\"header_link\" href=\"#empty_strings\">Empty string derivations</a></p>\n"
      "<p><a class=\"header_link\" href=\"#first_sets\">First sets</a></p>\n"
      "<p><a class=\"header_link\" href=\"#follow_by_empty\">Follow by empty</a></p>\n"
      "<p><a class=\"header_link\" href=\"#grammar\">Grammar analysis</a></p>\n"
      "\n"
      "<table class=\"title\"><tr><td>Original grammar</td></tr></table>\n"
      "\n"
      "<p>The original grammar has " ;
    result << var_cas_SYNTAX_RULE_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (116)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (116)) ;
    result << " productions.</p>\n"
      "<table class=\"result\">\n" ;
    GGS_syntaxRuleListForGrammar::cEnumerator enumerator_2508 (var_cas_SYNTAX_RULE_LIST, true) ;
    const GGS_syntaxRuleListForGrammar::cElement * operand_2508 = NULL ;
    while (((operand_2508 = enumerator_2508.nextObject ()))) {
      macroValidPointer (operand_2508) ;
      result << "<tr class=\"result_line\"><td class=\"result_line\">rule <code>&lt;" ;
      result << operand_2508->mLeftNonTerminal.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (120)) ;
      result << "&gt;</code><br>" ;
      result << operand_2508->mLeftNonTerminal.reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (120)) ;
      result << "</td><td><code>" ;
      GGS_syntaxInstructionList::cEnumerator enumerator_2730 (operand_2508->mSyntaxInstructionList, true) ;
      const GGS_syntaxInstructionList::cElement * operand_2730 = NULL ;
      while (((operand_2730 = enumerator_2730.nextObject ()))) {
        macroValidPointer (operand_2730) ;
        result << (findCategoryReader__syntaxInstruction__htmlListing (operand_2730->mInstruction (HERE)->galgasRTTI ()) (inLexique, operand_2730->mInstruction.getPtr () COMMA_SOURCE_FILE_AT_LINE (123))) ;
      }
      result << "</code></td></tr>" ;
    }
    result << "\n"
      "</table>\n"
      "<p></p>\n"
      "<table class=\"title\">\n"
      "<tr><td>Pure BNF productions list</td></tr>\n"
      "</table>\n"
      "<p><a name=\"pure_bnf\"></a>Listing of the " ;
    result << var_cas_PURE_SYNTAX_RULE_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (134)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (134)) ;
    result << " BNF productions :</p>\n"
      "<table class=\"result\">\n" ;
    GGS_syntaxRuleListForGrammar::cEnumerator enumerator_3077 (var_cas_PURE_SYNTAX_RULE_LIST, true) ;
    const GGS_syntaxRuleListForGrammar::cElement * operand_3077 = NULL ;
    GGS_uint var_cas_index (true, 0) ;
    while (((operand_3077 = enumerator_3077.nextObject ()))) {
      macroValidPointer (operand_3077) ;
      result << "<tr class=\"result_line\"><td class=\"result_line\">" ;
      result << var_cas_index.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (138)) ;
      result << "</td><td class=\"result_line\">rule <code>&lt;" ;
      result << operand_3077->mLeftNonTerminal.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (139)) ;
      result << "&gt;</code><br>" ;
      result << operand_3077->mLeftNonTerminal.reader_locationString (inLexique COMMA_SOURCE_FILE_AT_LINE (139)) ;
      result << "</td><td><code>" ;
      GGS_syntaxInstructionList::cEnumerator enumerator_3362 (operand_3077->mSyntaxInstructionList, true) ;
      const GGS_syntaxInstructionList::cElement * operand_3362 = NULL ;
      while (((operand_3362 = enumerator_3362.nextObject ()))) {
        macroValidPointer (operand_3362) ;
        result << (findCategoryReader__syntaxInstruction__htmlListing (operand_3362->mInstruction (HERE)->galgasRTTI ()) (inLexique, operand_3362->mInstruction.getPtr () COMMA_SOURCE_FILE_AT_LINE (142))) ;
      }
      result << "</code></td></tr>" ;
      var_cas_index.increment_operation (inLexique COMMA_HERE) ;
    }
    result << "\n"
      "</table>\n"
      "\n"
      "\n"
      "<p><a name=\"identical_productions\"></a></p>\n"
      "<table class=\"title\">\n"
      "  <tr><td>Checking all productions are different</td></tr>\n"
      "</table>\n"
      "<p></p>\n"
      "<p>" ;
    if ((var_cas_IDENTICAL_DERIVATION_ERROR_MESSAGE_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (157))).operator_isEqual (GGS_uint (0U)).boolValue ()) {
      result << "<span class=\"success\">Ok : all productions are different.</span>" ;
    }else {
      if ((var_cas_IDENTICAL_DERIVATION_ERROR_MESSAGE_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (160))).operator_isEqual (GGS_uint (1U)).boolValue ()) {
        result << "<span class=\"error\">Error;<span> 1 collision has been detected:" ;
      }else {
        result << "<span class=\"error\">Error;<span> " ;
        result << var_cas_IDENTICAL_DERIVATION_ERROR_MESSAGE_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (163)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (163)) ;
        result << " collisions have been detected:" ;
      }
      result << "<ul>" ;
      GGS_stringlist::cEnumerator enumerator_4099 (var_cas_IDENTICAL_DERIVATION_ERROR_MESSAGE_LIST, true) ;
      const GGS_stringlist::cElement * operand_4099 = NULL ;
      while (((operand_4099 = enumerator_4099.nextObject ()))) {
        macroValidPointer (operand_4099) ;
        result << "<li>" ;
        result << operand_4099->mValue.reader_HTMLRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (167)) ;
        result << ";</li>" ;
      }
      result << "</ul>" ;
    }
    result << "</p>\n"
      "\n"
      "<p><a name=\"pureBDD\"></a></p>\n"
      "<table class=\"title\"><tr><td>Transformation into BDDs</td></tr></table>\n"
      "<p></p>\n"
      "\n"
      "<p>For information :\n"
      "  <ul><li>" ;
    result << var_cas_TERMINAL_MAP.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (178)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (178)) ;
    result << " terminal symbols, numbered from 0 to " ;
    result << var_cas_TERMINAL_MAP.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (178)).substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (178)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (178)) ;
    result << " ;</li>\n"
      "    <li> the 'end of source file' symbol '$$' is numbered " ;
    result << var_cas_TERMINAL_MAP.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (179)).substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (179)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (179)) ;
    result << " ;</li>\n"
      "    <li>" ;
    result << var_cas_NON_TERMINAL_MAP.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (180)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (180)) ;
    result << " nonterminal symbols in the pure BNF grammar, numbered from " ;
    result << var_cas_TERMINAL_MAP.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (180)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (180)) ;
    result << " to " ;
    result << var_cas_NON_TERMINAL_MAP.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (180)).add_operation (inLexique, var_cas_TERMINAL_MAP.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (180)) COMMA_SOURCE_FILE_AT_LINE (180)).substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (180)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (180)) ;
    result << " ;</li>\n"
      "    <li> the actual start symbol '&lt;&gt;' is numbered " ;
    result << var_cas_NON_TERMINAL_MAP.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (181)).add_operation (inLexique, var_cas_TERMINAL_MAP.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (181)) COMMA_SOURCE_FILE_AT_LINE (181)).substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (181)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (181)) ;
    result << " ;</li>\n"
      "    <li> " ;
    result << var_cas_ADDITIONAL_NON_TERMINAL_COUNT_FOR_BDD.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (182)) ;
    result << " additional non terminal symbols needed by BDD transformation, numbered from " ;
    result << var_cas_NON_TERMINAL_MAP.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (182)).add_operation (inLexique, var_cas_TERMINAL_MAP.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (182)) COMMA_SOURCE_FILE_AT_LINE (182)).substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (182)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (182)) ;
    result << " to " ;
    result << var_cas_NON_TERMINAL_MAP.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (182)).add_operation (inLexique, var_cas_TERMINAL_MAP.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (182)) COMMA_SOURCE_FILE_AT_LINE (182)).add_operation (inLexique, var_cas_ADDITIONAL_NON_TERMINAL_COUNT_FOR_BDD COMMA_SOURCE_FILE_AT_LINE (182)).substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (182)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (182)) ;
    result << " ;</li>\n"
      "    <li>whole vocabulary : " ;
    result << var_cas_NON_TERMINAL_MAP.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (183)).add_operation (inLexique, var_cas_TERMINAL_MAP.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (183)) COMMA_SOURCE_FILE_AT_LINE (183)).add_operation (inLexique, var_cas_ADDITIONAL_NON_TERMINAL_COUNT_FOR_BDD COMMA_SOURCE_FILE_AT_LINE (183)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (183)) ;
    result << " elements, " ;
    result << var_cas_BIT_COUNT_FOR_BDDS.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (183)) ;
    result << " bits for BDDs.</li>\n"
      "  </ul>\n"
      "</p>\n"
      "\n"
      "<p>Vocabulary:</p>\n"
      "<table class=\"result\">\n" ;
    GGS_stringlist::cEnumerator enumerator_5480 (var_cas_ALL_VOCABULARY_FOR_BDD, true) ;
    const GGS_stringlist::cElement * operand_5480 = NULL ;
    GGS_uint var_cas_IDX (true, 0) ;
    while (((operand_5480 = enumerator_5480.nextObject ()))) {
      macroValidPointer (operand_5480) ;
      result << "<tr class=\"result_line\"><td class=\"result_line\">" ;
      result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (192)) ;
      result << "</td><td class=\"result_line\"><code>" ;
      result << operand_5480->mValue.reader_HTMLRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (193)) ;
      result << "</code></td></tr>" ;
      var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
    }
    result << "\n"
      "</table>\n"
      "\n"
      "<p>" ;
    result << var_cas_NON_TERMINAL_WITH_EMPTY_PRODUCTION_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (199)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (199)) ;
    result << " non terminal " ;
    if ((var_cas_NON_TERMINAL_WITH_ONE_ELEMENT_PRODUCTION_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (199))).operator_strictSup (GGS_uint (1U)).boolValue ()) {
      result << "symbols have" ;
    }else {
      result << "symbol has" ;
    }
    result << " an empty production:</p>\n"
      "<table class=\"result\">\n" ;
    GGS_stringlist::cEnumerator enumerator_5972 (var_cas_NON_TERMINAL_WITH_EMPTY_PRODUCTION_LIST, true) ;
    const GGS_stringlist::cElement * operand_5972 = NULL ;
    while (((operand_5972 = enumerator_5972.nextObject ()))) {
      macroValidPointer (operand_5972) ;
      result << "<tr class=\"result_line\"><td class=\"result_line\"><code>" ;
      result << operand_5972->mValue.reader_HTMLRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (204)) ;
      result << "</code></td></tr>" ;
    }
    result << "\n"
      "</table>\n"
      "\n"
      "<p>" ;
    result << var_cas_NON_TERMINAL_WITH_ONE_ELEMENT_PRODUCTION_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (210)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (210)) ;
    result << " non terminal " ;
    if ((var_cas_NON_TERMINAL_WITH_ONE_ELEMENT_PRODUCTION_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (210))).operator_strictSup (GGS_uint (1U)).boolValue ()) {
      result << "symbols have" ;
    }else {
      result << "symbol has" ;
    }
    result << " a one element production:</p>\n"
      "<table class=\"result\">\n" ;
    GGS_relationStringList::cEnumerator enumerator_6424 (var_cas_NON_TERMINAL_WITH_ONE_ELEMENT_PRODUCTION_LIST, true) ;
    const GGS_relationStringList::cElement * operand_6424 = NULL ;
    while (((operand_6424 = enumerator_6424.nextObject ()))) {
      macroValidPointer (operand_6424) ;
      GGS_stringlist::cEnumerator enumerator_6450 (operand_6424->mRightList, true) ;
      const GGS_stringlist::cElement * operand_6450 = NULL ;
      while (((operand_6450 = enumerator_6450.nextObject ()))) {
        macroValidPointer (operand_6450) ;
        result << "<tr class=\"result_line\"><td class=\"result_line\"><code>" ;
        result << operand_6424->mLeftOperand.reader_HTMLRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (215)) ;
        result << " ::= " ;
        result << operand_6450->mValue.reader_HTMLRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (215)) ;
        result << "</code></td></tr>" ;
      }
    }
    result << "\n"
      "</table>\n"
      "\n"
      "\n"
      "<p>" ;
    result << var_cas_NON_TERMINAL_WITH_TWO_ELEMENT_PRODUCTION_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (222)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (222)) ;
    result << " non terminal " ;
    if ((var_cas_NON_TERMINAL_WITH_TWO_ELEMENT_PRODUCTION_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (222))).operator_strictSup (GGS_uint (1U)).boolValue ()) {
      result << "symbols have" ;
    }else {
      result << "symbol has" ;
    }
    result << " a one element production:</p>\n"
      "<table class=\"result\">\n" ;
    GGS_relationStringList::cEnumerator enumerator_6952 (var_cas_NON_TERMINAL_WITH_TWO_ELEMENT_PRODUCTION_LIST, true) ;
    const GGS_relationStringList::cElement * operand_6952 = NULL ;
    while (((operand_6952 = enumerator_6952.nextObject ()))) {
      macroValidPointer (operand_6952) ;
      GGS_stringlist::cEnumerator enumerator_6978 (operand_6952->mRightList, true) ;
      const GGS_stringlist::cElement * operand_6978 = NULL ;
      while (((operand_6978 = enumerator_6978.nextObject ()))) {
        macroValidPointer (operand_6978) ;
        result << "<tr class=\"result_line\"><td class=\"result_line\"><code>" ;
        result << operand_6952->mLeftOperand.reader_HTMLRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (227)) ;
        result << " ::= " ;
        result << operand_6978->mValue.reader_HTMLRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (227)) ;
        result << "</code></td></tr>" ;
      }
    }
    result << "\n"
      "</table>\n"
      "\n"
      "\n"
      "\n"
      "\n"
      "<p><a name=\"useful_symbols\"></a></p>\n"
      "<table class=\"title\"><tr><td>Useful nonterminal symbols</td></tr></table>\n"
      "<p></p>\n"
      "<p>" ;
    if ((var_cas_USELESS_NON_TERMINAL_SYMBOL_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (240))).operator_isEqual (GGS_uint (0U)).boolValue ()) {
      result << "<span class=\"success\">All nonterminal symbols are useful.</span>" ;
    }else {
      result << "<span class=\"warning\">Warning: the grammar contains " ;
      result << var_cas_USELESS_NON_TERMINAL_SYMBOL_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (243)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (243)) ;
      result << " useless symbol" ;
      if ((var_cas_USELESS_NON_TERMINAL_SYMBOL_LIST.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (243))).operator_strictSup (GGS_uint (1U)).boolValue ()) {
        result << "s" ;
      }else {
      }
      result << ":</span><ul>" ;
      GGS_stringlist::cEnumerator enumerator_7687 (var_cas_USELESS_NON_TERMINAL_SYMBOL_LIST, true) ;
      const GGS_stringlist::cElement * operand_7687 = NULL ;
      while (((operand_7687 = enumerator_7687.nextObject ()))) {
        macroValidPointer (operand_7687) ;
        result << "<li><code>" ;
        result << operand_7687->mValue.reader_HTMLRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (246)) ;
        result << "</code></li>" ;
      }
      result << "</ul>" ;
    }
    result << "</p>\n"
      "\n"
      "<a name=\"empty_strings\"></a>\n"
      "<table class=\"title\"><tr><td>Nonterminal symbols deriving in empty string</td></tr></table>\n"
      "<p></p>\n"
      "<p>" ;
    if ((var_cas_SYMBOLS_DIRECTLY_DERIVING_IN_EMPTY_STRING.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (256))).operator_isEqual (GGS_uint (0U)).boolValue ()) {
      result << "No symbol is deriving into empty string." ;
    }else {
      result << var_cas_SYMBOLS_DIRECTLY_DERIVING_IN_EMPTY_STRING.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (259)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (259)) ;
      result << " symbol" ;
      if ((var_cas_SYMBOLS_DIRECTLY_DERIVING_IN_EMPTY_STRING.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (259))).operator_strictSup (GGS_uint (1U)).boolValue ()) {
        result << "s are" ;
      }else {
        result << " is" ;
      }
      result << " deriving into empty string:<table class=\"result\">" ;
      GGS_stringlist::cEnumerator enumerator_8315 (var_cas_SYMBOLS_DIRECTLY_DERIVING_IN_EMPTY_STRING, true) ;
      const GGS_stringlist::cElement * operand_8315 = NULL ;
      while (((operand_8315 = enumerator_8315.nextObject ()))) {
        macroValidPointer (operand_8315) ;
        result << "<tr class=\"result_line\"><td class=\"result_line\"><code>" ;
        result << operand_8315->mValue.reader_HTMLRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (262)) ;
        result << "</code></td></tr>" ;
      }
      result << "</table>" ;
    }
    result << "</p>\n"
      "\n"
      "<a name=\"first_sets\"></a>\n"
      "<table class=\"title\"><tr><td>FIRST set</td></tr></table>\n"
      "<p></p>\n"
      "<p>FIRST set has " ;
    result << var_cas_FIRST_SET_VALUE_COUNT.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (271)) ;
    result << " element" ;
    if ((var_cas_FIRST_SET_VALUE_COUNT).operator_strictSup (GGS_uint64 (1ULL)).boolValue ()) {
      result << "s" ;
    }else {
    }
    result << ".</p>\n"
      "<table class=\"result\">\n" ;
    GGS_relationStringList::cEnumerator enumerator_8720 (var_cas_FIRST_SET, true) ;
    const GGS_relationStringList::cElement * operand_8720 = NULL ;
    while (((operand_8720 = enumerator_8720.nextObject ()))) {
      macroValidPointer (operand_8720) ;
      result << "<tr class=\"result_line\"><td class=\"result_line\"><code>" ;
      result << operand_8720->mLeftOperand.reader_HTMLRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (275)) ;
      result << "</code></td><td><code>" ;
      GGS_stringlist::cEnumerator enumerator_8869 (operand_8720->mRightList, true) ;
      const GGS_stringlist::cElement * operand_8869 = NULL ;
      while (((operand_8869 = enumerator_8869.nextObject ()))) {
        macroValidPointer (operand_8869) ;
        result << operand_8869->mValue.reader_HTMLRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (277)) ;
        if (enumerator_8869.hasNextObject ()) {
          result << " " ;
        }
      }
      result << "</code></td></tr>" ;
    }
    result << "\n"
      "</table>\n"
      "\n"
      "\n"
      "\n"
      "<table class=\"title\"><tr><td>------------------------------------------</td></tr></table>\n"
      "\n"
      "<table class=\"title\"><tr><td>Nonterminal symbol set followed by empty string</td></tr></table>\n"
      "\n"
      "<p><a name=\"follow_by_empty\"></a>Calculus completed in 2 iterations.\n"
      "</p><p>One nonterminal symbol (the start symbol) can be followed by the empty string.\n"
      "</p><table class=\"result\"><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexique_component_start_symbol&gt;</code></td></tr></table><p></p><table class=\"title\"><tr><td>\n"
      "Computing the FOLLOW sets\n"
      "</td></tr></table>\n"
      "<p>Calculus completed in 4 iterations, 364 values ;\n"
      "'$$' means the nonterminal symbol can be followed by empty string (see step 6) ;\n"
      "\n"
      "the followings of terminal symbols are given for information.\n"
      "</p><table class=\"result\"><tr class=\"result_line\"><td class=\"result_line\"><code>$identifier$</code></td><td><code> $default$ $error$ $feature$ $in$ $send$ $...$ $|$ $,$ $;$ $:$ $($ $)$ $->$ $\?$ $!$ $\?!$ $!\?$</code></td></tr><tr class=\"resul"
      "t_line\"><td class=\"result_line\"><code>$abstract$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$after$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>"
      "$before$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$between$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$block$</code></td><td><code></code></"
      "td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$cast$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$class$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class="
      "\"result_line\"><code>$compile$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$const$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$constructor$</code"
      "></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$default$</code></td><td><code> $identifier$ $drop$ $end$ $error$ $log$ $repeat$ $rewind$ $search$ $select$ $send$ $tag$ $warning$ $terminal$</code></td><"
      "/tr><tr class=\"result_line\"><td class=\"result_line\"><code>$description$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$dependency$</code></td><td><code></code></td></tr><tr class=\"result_line\"><t"
      "d class=\"result_line\"><code>$do$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$domain$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$drop$</code></"
      "td><td><code> $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$else$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$elsif$</code></td><td><code></code></td></tr><"
      "tr class=\"result_line\"><td class=\"result_line\"><code>$end$</code></td><td><code> $lexique$ $repeat$ $rule$ $select$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$enum$</code></td><td><code></code></td></tr><tr class="
      "\"result_line\"><td class=\"result_line\"><code>$error$</code></td><td><code> $identifier$ $message$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$extends$</code></td><td><code></code></td></tr><tr class=\"result_line\"><t"
      "d class=\"result_line\"><code>$extern$</code></td><td><code> $function$ $routine$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$extract$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_l"
      "ine\"><code>$false$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$feature$</code></td><td><code> $identifier$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$filewrapper$</"
      "code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$foreach$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$function$</code></td><td><code> $identifier$</c"
      "ode></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$grammar$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$gui$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td"
      " class=\"result_line\"><code>$here$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$if$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$import$</code></t"
      "d><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$import__$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$in$</code></td><td><code> $identifier$</code></td></tr"
      "><tr class=\"result_line\"><td class=\"result_line\"><code>$insert$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$label$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"resu"
      "lt_line\"><code>$lazy$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$lexique$</code></td><td><code> $identifier$ $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$list$</"
      "code></td><td><code> $identifier$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$listmap$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$log$</code></td><td><code> $;$</co"
      "de></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$loop$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$map$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td cla"
      "ss=\"result_line\"><code>$mapindex$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$match$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$message$</code"
      "></td><td><code> $identifier$ $literal_string$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$method$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$mod$</code></td><td><c"
      "ode></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$modifier$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$nonterminal$</code></td><td><code></code></td></tr><tr class=\""
      "result_line\"><td class=\"result_line\"><code>$not$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$on$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$op"
      "erator$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$option$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$or$</code></td><td><code></code></td></"
      "tr><tr class=\"result_line\"><td class=\"result_line\"><code>$override$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$parse$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\""
      "result_line\"><code>$project$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$program$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$reader$</code></t"
      "d><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$remove$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$replace$</code></td><td><code> $literal_string$</code></"
      "td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$repeat$</code></td><td><code> $identifier$ $drop$ $error$ $log$ $repeat$ $rewind$ $select$ $send$ $tag$ $warning$ $while$ $;$</code></td></tr><tr class=\"result_line\"><td class=\"r"
      "esult_line\"><code>$rewind$</code></td><td><code> $identifier$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$root$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$routine$<"
      "/code></td><td><code> $identifier$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$rule$</code></td><td><code> $identifier$ $list$ $literal_char$ $;$ $~$ $literal_string$</code></td></tr><tr class=\"result_line\"><td cla"
      "ss=\"result_line\"><code>$search$</code></td><td><code> $identifier$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$select$</code></td><td><code> $when$ $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line"
      "\"><code>$self$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$semantics$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$send$</code></td><td><code> $"
      "search$ $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$sortedlist$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$state$</code></td><td><code></code></td></tr><"
      "tr class=\"result_line\"><td class=\"result_line\"><code>$struct$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$style$</code></td><td><code> $identifier$</code></td></tr><tr class=\"result_line\"><td "
      "class=\"result_line\"><code>$switch$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$syntax$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$tag$</code><"
      "/td><td><code> $identifier$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$template$</code></td><td><code> $lexique$ $literal_string$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$then$</code>"
      "</td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$true$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$unused$</code></td><td><code></code></td></tr><tr class"
      "=\"result_line\"><td class=\"result_line\"><code>$warning$</code></td><td><code> $identifier$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$when$</code></td><td><code> $identifier$ $literal_char$ $~$ $literal_string$</co"
      "de></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$while$</code></td><td><code> $identifier$ $literal_char$ $~$ $literal_string$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$with$</code></td><td><co"
      "de></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$literal_double$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$unsigned_literal_integer$</code></td><td><code> $error$ $"
      ";$ $)$ $!$ $!\?$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$signed_literal_integer$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$unsigned_literal_integer64$</code></t"
      "d><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$signed_literal_integer64$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$.$</code></td><td><code></code></td></"
      "tr><tr class=\"result_line\"><td class=\"result_line\"><code>$.=$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$...$</code></td><td><code> $literal_string$</code></td></tr><tr class=\"result_line\"><t"
      "d class=\"result_line\"><code>$type_name$</code></td><td><code> $identifier$ $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$literal_char$</code></td><td><code> $error$ $|$ $;$ $:$ $)$ $->$ $!$ $!\?$</code></td></tr><"
      "tr class=\"result_line\"><td class=\"result_line\"><code>$terminal$</code></td><td><code> $error$ $,$ $;$ $!$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$*$</code></td><td><code> $error$ $;$ $)$ $!$ $!\?$</code></td></t"
      "r><tr class=\"result_line\"><td class=\"result_line\"><code>$|$</code></td><td><code> $identifier$ $literal_char$ $~$ $literal_string$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$,$</code></td><td><code> $identifier$ $"
      "literal_string$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$+$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$--$</code></td><td><code></code></td></tr><tr class=\"resul"
      "t_line\"><td class=\"result_line\"><code>$::$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$>$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$;$</code>"
      "</td><td><code> $identifier$ $default$ $drop$ $end$ $error$ $extern$ $list$ $log$ $message$ $replace$ $repeat$ $rewind$ $rule$ $select$ $send$ $style$ $tag$ $template$ $warning$ $when$ $while$ $type_name$ $terminal$</code></td></tr><tr class"
      "=\"result_line\"><td class=\"result_line\"><code>$:$</code></td><td><code> $identifier$ $default$ $drop$ $end$ $error$ $extern$ $list$ $log$ $message$ $replace$ $repeat$ $rewind$ $rule$ $select$ $send$ $style$ $tag$ $template$ $warning$ $when$ $"
      "while$ $type_name$ $terminal$ $literal_string$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$-$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$($</code></td><td><code> $)"
      "$ $!$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$)$</code></td><td><code> $error$ $;$ $)$ $!$ $!\?$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$->$</code></td><td><code> $type_name$ $lite"
      "ral_char$ $terminal$ $literal_string$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$\?$</code></td><td><code> $type_name$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$==$</code></td><td><code"
      "></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$\?\?$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$!$</code></td><td><code> $identifier$ $unsigned_literal_integer$ $liter"
      "al_char$ $*$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$:=$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$++$</code></td><td><code></code></td></tr><tr class=\"result_"
      "line\"><td class=\"result_line\"><code>$[$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$]$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$+=$</code></"
      "td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$\?!$</code></td><td><code> $type_name$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$!\?$</code></td><td><code> $identifier$</code></"
      "td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$/$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$!=$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"resul"
      "t_line\"><code>$>=$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$&$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>${$</code></td><td><code></code></"
      "td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$}$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$-=$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"resul"
      "t_line\"><code>$^$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$>>$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$~$</code></td><td><code> $literal"
      "_string$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$<-$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$<$</code></td><td><code></code></td></tr><tr class=\"result_line\""
      "><td class=\"result_line\"><code>$<->$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$<=$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$<<$</code></td"
      "><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$non_terminal_symbol$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$literal_string$</code></td><td><code> $error"
      "$ $feature$ $style$ $...$ $|$ $,$ $;$ $:$ $->$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>$comment$</code></td><td><code></code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;extern_routine_or_"
      "function_declaration&gt;</code></td><td><code> $end$ $extern$ $list$ $message$ $replace$ $rule$ $style$ $template$ $type_name$ $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;function_call_or_attribute&gt"
      ";</code></td><td><code> $error$ $;$ $)$ $!$ $!\?$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_attribute_declaration&gt;</code></td><td><code> $end$ $extern$ $list$ $message$ $replace$ $rule$ $style$ $temp"
      "late$ $type_name$ $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_explicit_rule&gt;</code></td><td><code> $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_expr"
      "ession&gt;</code></td><td><code> $:$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_factor&gt;</code></td><td><code> $|$ $:$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical"
      "_implicit_rule&gt;</code></td><td><code> $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_instruction&gt;</code></td><td><code> $identifier$ $default$ $drop$ $end$ $error$ $log$ $repeat$ $rewind$ $select$"
      " $send$ $tag$ $warning$ $when$ $while$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_list_declaration&gt;</code></td><td><code> $end$ $extern$ $list$ $message$ $replace$ $rule$ $style$ $template$ $type_nam"
      "e$ $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_list_entry&gt;</code></td><td><code> $,$ $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_message_declaratio"
      "n&gt;</code></td><td><code> $end$ $extern$ $list$ $message$ $replace$ $rule$ $style$ $template$ $type_name$ $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_output_effective_argument&gt;</code></td"
      "><td><code> $error$ $;$ $)$ $!$ $!\?$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexical_send_instruction&gt;</code></td><td><code> $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;l"
      "exical_term&gt;</code></td><td><code> $:$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;lexique_component_start_symbol&gt;</code></td><td><code> $$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><"
      "code>&lt;repeat_while_branch&gt;</code></td><td><code> $end$ $while$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;style_declaration&gt;</code></td><td><code> $end$ $extern$ $list$ $message$ $replace$ $rule$ $styl"
      "e$ $template$ $type_name$ $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;template_delimitor&gt;</code></td><td><code> $end$ $extern$ $list$ $message$ $replace$ $rule$ $style$ $template$ $type_name$ $term"
      "inal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;template_replacement&gt;</code></td><td><code> $end$ $extern$ $list$ $message$ $replace$ $rule$ $style$ $template$ $type_name$ $terminal$</code></td></tr><tr cla"
      "ss=\"result_line\"><td class=\"result_line\"><code>&lt;terminal_declaration&gt;</code></td><td><code> $end$ $extern$ $list$ $message$ $replace$ $rule$ $style$ $template$ $type_name$ $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"r"
      "esult_line\"><code>&lt;select_lexiqueModelBuilder_0&gt;</code></td><td><code> $lexique$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_1&gt;</code></td><td><code> $end$</code></td><"
      "/tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_2&gt;</code></td><td><code> $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_3&gt;</code></td><t"
      "d><code> $...$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_4&gt;</code></td><td><code> $...$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lex"
      "iqueModelBuilder_5&gt;</code></td><td><code> $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_6&gt;</code></td><td><code> $end$</code></td></tr><tr class=\"result_line\"><td class="
      "\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_7&gt;</code></td><td><code> $error$ $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_8&gt;</code></td><td><code> $;$</co"
      "de></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_9&gt;</code></td><td><code> $while$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModel"
      "Builder_10&gt;</code></td><td><code> $end$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_11&gt;</code></td><td><code> $end$ $while$</code></td></tr><tr class=\"result_line\"><td cla"
      "ss=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_12&gt;</code></td><td><code> $default$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_13&gt;</code></td><td><code> $def"
      "ault$ $when$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_14&gt;</code></td><td><code> $end$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repe"
      "at_lexiqueModelBuilder_15&gt;</code></td><td><code> $error$ $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_16&gt;</code></td><td><code> $;$</code></td></tr><tr class=\"result_line\"><td"
      " class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_17&gt;</code></td><td><code> $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_18&gt;</code></td><td><code> $)$</c"
      "ode></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_19&gt;</code></td><td><code> $:$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_2"
      "0&gt;</code></td><td><code> $|$ $:$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_21&gt;</code></td><td><code> $error$</code></td></tr><tr class=\"result_line\"><td class=\"result_li"
      "ne\"><code>&lt;select_lexiqueModelBuilder_22&gt;</code></td><td><code> $:$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_23&gt;</code></td><td><code> $;$</code></td></tr><tr class="
      "\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_24&gt;</code></td><td><code> $,$ $;$ $->$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_25&gt;</code></td><td><"
      "code> $,$ $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_26&gt;</code></td><td><code> $error$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_l"
      "exiqueModelBuilder_27&gt;</code></td><td><code> $feature$ $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_28&gt;</code></td><td><code> $;$</code></td></tr><tr class=\"result_line\"><td c"
      "lass=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_29&gt;</code></td><td><code> $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_30&gt;</code></td><td><code> $end$ $extern$ "
      "$list$ $message$ $replace$ $rule$ $style$ $template$ $type_name$ $terminal$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_31&gt;</code></td><td><code> $error$ $;$</code></td></tr>"
      "<tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_32&gt;</code></td><td><code> $type_name$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_lexiqueModelBuilder_33&gt;</code><"
      "/td><td><code> $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_repeat_lexiqueModelBuilder_34&gt;</code></td><td><code> $;$</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><code>&lt;select_"
      "repeat_lexiqueModelBuilder_35&gt;</code></td><td><code> $->$</code></td></tr></table><p>Every useful nonterminal symbol should: either have a non empty FOLLOW, either can be followed by the empty string, either both. In no way none of them :"
      " it is an error.</p><p><span class=\"success\">All FOLLOW are correct.</span></p><a name=\"grammar\"></a><table class=\"title\"><tr><td>\n"
      "Checking LL(1) condition\n"
      "</td></tr></table>\n"
      "<p>The FIRST of a production is :\n"
      " if the production is empty, the FOLLOW of the left nonterminal symbol ;\n"
      " if the production is not empty (e.g. g -&gt; x) :\n"
      "         -- the FIRST of x, and\n"
      "         -- if x est a nonterminal symbol deriving in the empty string, union the FOLLOW of x.\n"
      "\n"
      "Only are listed the nonterminal having more than one production (see step 2\n"
      "for inPureBNFproductions numbering) :\n"
      "\n"
      "</p><table class=\"result\"><tr><td class=\"result_title\" colspan=\"2\"><code>&lt;function_call_or_attribute&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_17\">17</a></td><td><code>$error$ $;$ $)$ $!$ $!\?$"
      " </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_18\">18</a></td><td><code>$($ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;lexical_factor&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_27\">27</a></td><td><code>$literal_string$ </code></td></tr><tr class=\"result_line\"><td "
      "class=\"result_line\"><a href=\"#pure_bnf_28\">28</a></td><td><code>$~$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_29\">29</a></td><td><code>$literal_char$ </code></td></tr><tr class=\"result_line\"><td clas"
      "s=\"result_line\"><a href=\"#pure_bnf_30\">30</a></td><td><code>$identifier$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;lexical_instruction&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_6\">6</a></td><td><code>$send$ </code></td></tr><tr class=\"result_line\"><td class=\""
      "result_line\"><a href=\"#pure_bnf_9\">9</a></td><td><code>$repeat$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_11\">11</a></td><td><code>$select$ </code></td></tr><tr class=\"result_line\"><td class=\"result_"
      "line\"><a href=\"#pure_bnf_12\">12</a></td><td><code>$identifier$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_19\">19</a></td><td><code>$error$ </code></td></tr><tr class=\"result_line\"><td class=\"result_li"
      "ne\"><a href=\"#pure_bnf_20\">20</a></td><td><code>$warning$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_21\">21</a></td><td><code>$drop$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a"
      " href=\"#pure_bnf_22\">22</a></td><td><code>$tag$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_23\">23</a></td><td><code>$rewind$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#"
      "pure_bnf_24\">24</a></td><td><code>$log$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;lexical_output_effective_argument&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_13\">13</a></td><td><code>$literal_char$ </code></td></tr><tr class=\""
      "result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_14\">14</a></td><td><code>$unsigned_literal_integer$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_15\">15</a></td><td><code>$*$ </code></td></tr><tr"
      " class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_16\">16</a></td><td><code>$identifier$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;lexical_send_instruction&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_7\">7</a></td><td><code>$terminal$ </code></td></tr><tr class=\"result_line\"><t"
      "d class=\"result_line\"><a href=\"#pure_bnf_8\">8</a></td><td><code>$search$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_0&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_37\">37</a></td><td><code>$template$ </code></td></tr><tr class=\"result_li"
      "ne\"><td class=\"result_line\"><a href=\"#pure_bnf_38\">38</a></td><td><code>$lexique$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_1&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_39\">39</a></td><td><code>$end$ </code></td></tr><tr class=\"result_"
      "line\"><td class=\"result_line\"><a href=\"#pure_bnf_40\">40</a></td><td><code>$extern$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_41\">41</a></td><td><code>$template$ </code></td></tr><tr class=\"result_lin"
      "e\"><td class=\"result_line\"><a href=\"#pure_bnf_42\">42</a></td><td><code>$replace$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_43\">43</a></td><td><code>$type_name$ </code></td></tr><tr class=\"result_line"
      "\"><td class=\"result_line\"><a href=\"#pure_bnf_44\">44</a></td><td><code>$style$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_45\">45</a></td><td><code>$terminal$ </code></td></tr><tr class=\"result_line\"><t"
      "d class=\"result_line\"><a href=\"#pure_bnf_46\">46</a></td><td><code>$list$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_47\">47</a></td><td><code>$rule$ </code></td></tr><tr class=\"result_line\"><td class=\""
      "result_line\"><a href=\"#pure_bnf_48\">48</a></td><td><code>$message$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_2&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_49\">49</a></td><td><code>$identifier$ $literal_char$ $~$ $literal_string$"
      " </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_50\">50</a></td><td><code>$list$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_3&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_51\">51</a></td><td><code>$...$ </code></td></tr><tr class=\"result_line\"><"
      "td class=\"result_line\"><a href=\"#pure_bnf_52\">52</a></td><td><code>$feature$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_4&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_53\">53</a></td><td><code>$...$ </code></td></tr><tr class=\"result_"
      "line\"><td class=\"result_line\"><a href=\"#pure_bnf_54\">54</a></td><td><code>$,$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_5&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_55\">55</a></td><td><code>$...$ </code></td></tr><tr class=\"result_line\"><"
      "td class=\"result_line\"><a href=\"#pure_bnf_56\">56</a></td><td><code>$->$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_6&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_57\">57</a></td><td><code>$end$ </code></td></tr><tr class=\"result_"
      "line\"><td class=\"result_line\"><a href=\"#pure_bnf_58\">58</a></td><td><code>$identifier$ $drop$ $error$ $log$ $repeat$ $rewind$ $select$ $send$ $tag$ $warning$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_7&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_59\">59</a></td><td><code>$error$ $terminal$ </code></td></tr><tr c"
      "lass=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_60\">60</a></td><td><code>$search$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_8&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_61\">61</a></td><td><code>$terminal$ </code></td></tr><tr class=\"result_li"
      "ne\"><td class=\"result_line\"><a href=\"#pure_bnf_62\">62</a></td><td><code>$error$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_9&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_63\">63</a></td><td><code>$while$ </code></td></tr><tr class=\"resul"
      "t_line\"><td class=\"result_line\"><a href=\"#pure_bnf_64\">64</a></td><td><code>$identifier$ $drop$ $error$ $log$ $repeat$ $rewind$ $select$ $send$ $tag$ $warning$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_10&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_65\">65</a></td><td><code>$end$ </code></td></tr><tr class=\"result"
      "_line\"><td class=\"result_line\"><a href=\"#pure_bnf_66\">66</a></td><td><code>$while$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_11&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_67\">67</a></td><td><code>$end$ $while$ </code></td></tr><tr class"
      "=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_68\">68</a></td><td><code>$identifier$ $drop$ $error$ $log$ $repeat$ $rewind$ $select$ $send$ $tag$ $warning$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_12&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_69\">69</a></td><td><code>$default$ </code></td></tr><tr class=\"re"
      "sult_line\"><td class=\"result_line\"><a href=\"#pure_bnf_70\">70</a></td><td><code>$when$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_13&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_71\">71</a></td><td><code>$default$ $when$ </code></td></tr><tr cl"
      "ass=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_72\">72</a></td><td><code>$identifier$ $drop$ $error$ $log$ $repeat$ $rewind$ $select$ $send$ $tag$ $warning$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_14&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_73\">73</a></td><td><code>$end$ </code></td></tr><tr class=\"result"
      "_line\"><td class=\"result_line\"><a href=\"#pure_bnf_74\">74</a></td><td><code>$identifier$ $drop$ $error$ $log$ $repeat$ $rewind$ $select$ $send$ $tag$ $warning$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_15&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_75\">75</a></td><td><code>$error$ $;$ </code></td></tr><tr class=\""
      "result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_76\">76</a></td><td><code>$!$ </code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_77\">77</a></td><td><code>$!\?$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_16&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_78\">78</a></td><td><code>$;$ </code></td></tr><tr class=\"result_line\"><t"
      "d class=\"result_line\"><a href=\"#pure_bnf_79\">79</a></td><td><code>$error$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_17&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_80\">80</a></td><td><code>$;$ </code></td></tr><tr class=\"result_l"
      "ine\"><td class=\"result_line\"><a href=\"#pure_bnf_81\">81</a></td><td><code>$,$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_18&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_82\">82</a></td><td><code>$)$ </code></td></tr><tr class=\"result_l"
      "ine\"><td class=\"result_line\"><a href=\"#pure_bnf_83\">83</a></td><td><code>$!$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_19&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_84\">84</a></td><td><code>$:$ </code></td></tr><tr class=\"result_l"
      "ine\"><td class=\"result_line\"><a href=\"#pure_bnf_85\">85</a></td><td><code>$|$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_20&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_86\">86</a></td><td><code>$|$ $:$ </code></td></tr><tr class=\"result_line"
      "\"><td class=\"result_line\"><a href=\"#pure_bnf_87\">87</a></td><td><code>$->$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_21&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_88\">88</a></td><td><code>$error$ </code></td></tr><tr class=\"resu"
      "lt_line\"><td class=\"result_line\"><a href=\"#pure_bnf_89\">89</a></td><td><code>$!$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_22&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_90\">90</a></td><td><code>$style$ </code></td></tr><tr class=\"result_line"
      "\"><td class=\"result_line\"><a href=\"#pure_bnf_91\">91</a></td><td><code>$:$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_23&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_92\">92</a></td><td><code>$;$ </code></td></tr><tr class=\"result_l"
      "ine\"><td class=\"result_line\"><a href=\"#pure_bnf_93\">93</a></td><td><code>$,$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_24&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_94\">94</a></td><td><code>$,$ $;$ $->$ </code></td></tr><tr class=\"result"
      "_line\"><td class=\"result_line\"><a href=\"#pure_bnf_95\">95</a></td><td><code>$feature$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_25&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_96\">96</a></td><td><code>$->$ </code></td></tr><tr class=\"result_line\"><"
      "td class=\"result_line\"><a href=\"#pure_bnf_97\">97</a></td><td><code>$,$ $;$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_26&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_98\">98</a></td><td><code>$error$ </code></td></tr><tr class=\"resu"
      "lt_line\"><td class=\"result_line\"><a href=\"#pure_bnf_99\">99</a></td><td><code>$!$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_27&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_100\">100</a></td><td><code>$style$ </code></td></tr><tr class=\"result_li"
      "ne\"><td class=\"result_line\"><a href=\"#pure_bnf_101\">101</a></td><td><code>$feature$ $;$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_28&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_102\">102</a></td><td><code>$;$ </code></td></tr><tr class=\"result_line\">"
      "<td class=\"result_line\"><a href=\"#pure_bnf_103\">103</a></td><td><code>$feature$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_29&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_104\">104</a></td><td><code>$;$ </code></td></tr><tr class=\"result"
      "_line\"><td class=\"result_line\"><a href=\"#pure_bnf_105\">105</a></td><td><code>$,$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_30&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_106\">106</a></td><td><code>$routine$ </code></td></tr><tr class=\"result_"
      "line\"><td class=\"result_line\"><a href=\"#pure_bnf_107\">107</a></td><td><code>$function$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_31&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_108\">108</a></td><td><code>$error$ $;$ </code></td></tr><tr class"
      "=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_109\">109</a></td><td><code>$\?$ $\?!$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_32&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_110\">110</a></td><td><code>$\?!$ </code></td></tr><tr class=\"result_line\""
      "><td class=\"result_line\"><a href=\"#pure_bnf_111\">111</a></td><td><code>$\?$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_lexiqueModelBuilder_33&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_112\">112</a></td><td><code>$;$ </code></td></tr><tr class=\"result_line\">"
      "<td class=\"result_line\"><a href=\"#pure_bnf_113\">113</a></td><td><code>$error$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_34&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_114\">114</a></td><td><code>$;$ </code></td></tr><tr class=\"result"
      "_line\"><td class=\"result_line\"><a href=\"#pure_bnf_115\">115</a></td><td><code>$,$ </code></td></tr>\n"
      "<tr><td class=\"result_title\" colspan=\"2\"><code>&lt;select_repeat_lexiqueModelBuilder_35&gt;</code></td></tr><tr class=\"result_line\"><td class=\"result_line\"><a href=\"#pure_bnf_116\">116</a></td><td><code>$->$ </code></td></tr><tr class=\"resul"
      "t_line\"><td class=\"result_line\"><a href=\"#pure_bnf_117\">117</a></td><td><code>$\?$ </code></td></tr>\n"
      "</table><p><span class=\"success\">No conflict : the grammar is LL (1).\n"
      "</span></p><table class=\"title\"><tr><td>\n"
      "OK (no error, no warning)\n"
      "</td></tr></table>\n"
      "</div></body></html>\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// 'optionHeaderZone2' template of 'grammarGenerationTemplates' filewrapper  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_grammarGenerationTemplates_optionHeaderZone2 (C_Compiler & inLexique,
                                const GGS_string& var_cas_GRAMMAR_NAME,
                                const GGS_grammarComponentRoot & var_cas_GRAMMAR_COMPONENT_ROOT) {
  C_String result ;
  const bool isBuilt = var_cas_GRAMMAR_NAME.isBuilt ()
    && var_cas_GRAMMAR_COMPONENT_ROOT.isBuilt () ;
  if (isBuilt) {
    result << "#ifndef GRAMMAR_" ;
    result << var_cas_GRAMMAR_NAME ;
    result << "_HAS_BEEN_DEFINED\n"
      "#define GRAMMAR_" ;
    result << var_cas_GRAMMAR_NAME ;
    result << "_HAS_BEEN_DEFINED\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_lstringlist::cEnumerator enumerator_232 (var_cas_GRAMMAR_COMPONENT_ROOT.reader_mSyntaxComponents (inLexique COMMA_SOURCE_FILE_AT_LINE (6)), true) ;
    const GGS_lstringlist::cElement * operand_232 = NULL ;
    while (((operand_232 = enumerator_232.nextObject ()))) {
      macroValidPointer (operand_232) ;
      result << "#include \"" ;
      result << operand_232->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (7)) ;
      result << ".h\"\n" ;
    }
    result << "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// 'optionHeaderZone3' template of 'grammarGenerationTemplates' filewrapper  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_grammarGenerationTemplates_optionHeaderZone3 (C_Compiler & inLexique,
                                const GGS_string& var_cas_GRAMMAR_NAME,
                                const GGS_grammarComponentRoot & var_cas_GRAMMAR_COMPONENT_ROOT,
                                const GGS_nonTerminalMap & var_cas_NON_TERMINAL_MAP,
                                const GGS_string& var_cas_LEXIQUE_CLASS,
                                const GGS_stringlist & var_cas_ADDED_NON_TERMINAL_LIST) {
  C_String result ;
  const bool isBuilt = var_cas_GRAMMAR_NAME.isBuilt ()
    && var_cas_GRAMMAR_COMPONENT_ROOT.isBuilt ()
    && var_cas_NON_TERMINAL_MAP.isBuilt ()
    && var_cas_LEXIQUE_CLASS.isBuilt ()
    && var_cas_ADDED_NON_TERMINAL_LIST.isBuilt () ;
  if (isBuilt) {
    result << "//---------------------------------------------------------------------------*\n"
      "\n"
      "class " ;
    result << var_cas_GRAMMAR_NAME ;
    result << " : " ;
    const GGS_string var_cas_COLUMN_CLASS_DECLARATION = GGS_string::stringWithColumnCount (result) ;
    GGS_lstringlist::cEnumerator enumerator_185 (var_cas_GRAMMAR_COMPONENT_ROOT.reader_mSyntaxComponents (inLexique COMMA_SOURCE_FILE_AT_LINE (4)), true) ;
    const GGS_lstringlist::cElement * operand_185 = NULL ;
    while (((operand_185 = enumerator_185.nextObject ()))) {
      macroValidPointer (operand_185) ;
      result << "public " ;
      result << operand_185->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (5)) ;
      if (enumerator_185.hasNextObject ()) {
        result << ",\n" ;
        result << var_cas_COLUMN_CLASS_DECLARATION ;
      }
    }
    result << " {\n" ;
    GGS_nonTerminalMap::cEnumerator enumerator_331 (var_cas_NON_TERMINAL_MAP, true) ;
    const GGS_nonTerminalMap::cElement * operand_331 = NULL ;
    while (((operand_331 = enumerator_331.nextObject ()))) {
      macroValidPointer (operand_331) ;
      GGS_nonTerminalLabelList::cEnumerator enumerator_352 (operand_331->mInfo.mLabels, true) ;
      const GGS_nonTerminalLabelList::cElement * operand_352 = NULL ;
      while (((operand_352 = enumerator_352.nextObject ()))) {
        macroValidPointer (operand_352) ;
        result << "  public : virtual void nt_" ;
        result << operand_331->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (12)) ;
        result << "_" ;
        result << operand_352->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (12)) ;
        result << " (" ;
        const GGS_string var_cas_COLUMN1 = GGS_string::stringWithColumnCount (result) ;
        result << var_cas_LEXIQUE_CLASS ;
        result << " &" ;
        GGS_formalParameterList::cEnumerator enumerator_486 (operand_352->mFormalParameters, true) ;
        const GGS_formalParameterList::cElement * operand_486 = NULL ;
        while (((operand_486 = enumerator_486.nextObject ()))) {
          macroValidPointer (operand_486) ;
          result << ",\n" ;
          result << var_cas_COLUMN1 ;
          result << operand_486->mFormalParameterPassingMode.reader_generation1ForFormalParameter (inLexique COMMA_SOURCE_FILE_AT_LINE (14)) ;
          result << "GGS_" ;
          result << operand_486->mFormalParameterTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (14)) ;
          result << operand_486->mFormalParameterPassingMode.reader_generation2ForFormalParameter (inLexique COMMA_SOURCE_FILE_AT_LINE (14)) ;
        }
        result << ") ;\n"
          "\n" ;
        if ((var_cas_GRAMMAR_COMPONENT_ROOT.reader_mStartSymbol (inLexique COMMA_SOURCE_FILE_AT_LINE (17)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (17))).operator_isEqual (operand_331->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (17))).boolValue ()) {
          result << "  public : static void _performSourceFileParsing_" ;
          result << operand_352->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (18)) ;
          result << " (" ;
          const GGS_string var_cas_COLUMN2 = GGS_string::stringWithColumnCount (result) ;
          result << "C_Compiler & inCompiler,\n" ;
          result << var_cas_COLUMN2 ;
          result << "const C_String & inDependancyExtension,\n" ;
          result << var_cas_COLUMN2 ;
          result << "const C_String & inDependancyPath,\n" ;
          result << var_cas_COLUMN2 ;
          result << "GGS_string * inSentStringPtr,\n" ;
          result << var_cas_COLUMN2 ;
          result << "const GGS_lstring inFileName" ;
          GGS_formalParameterList::cEnumerator enumerator_1132 (operand_352->mFormalParameters, true) ;
          const GGS_formalParameterList::cElement * operand_1132 = NULL ;
          while (((operand_1132 = enumerator_1132.nextObject ()))) {
            macroValidPointer (operand_1132) ;
            result << ",\n" ;
            result << var_cas_COLUMN2 ;
            result << operand_1132->mFormalParameterPassingMode.reader_generation1ForFormalParameter (inLexique COMMA_SOURCE_FILE_AT_LINE (24)) ;
            result << "GGS_" ;
            result << operand_1132->mFormalParameterTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (24)) ;
            result << operand_1132->mFormalParameterPassingMode.reader_generation2ForFormalParameter (inLexique COMMA_SOURCE_FILE_AT_LINE (24)) ;
          }
          result << "\n" ;
          result << var_cas_COLUMN2 ;
          result << "COMMA_LOCATION_ARGS) ;\n"
            "\n"
            "  public : static void _performSourceStringParsing_" ;
          result << operand_352->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (27)) ;
          result << " (" ;
          const GGS_string var_cas_COLUMN3 = GGS_string::stringWithColumnCount (result) ;
          result << "C_Compiler & inCompiler,\n" ;
          result << var_cas_COLUMN3 ;
          result << "GGS_string * inSentStringPtr,\n" ;
          result << var_cas_COLUMN3 ;
          result << "const GGS_string inSourceString" ;
          GGS_formalParameterList::cEnumerator enumerator_1632 (operand_352->mFormalParameters, true) ;
          const GGS_formalParameterList::cElement * operand_1632 = NULL ;
          while (((operand_1632 = enumerator_1632.nextObject ()))) {
            macroValidPointer (operand_1632) ;
            result << ",\n" ;
            result << var_cas_COLUMN3 ;
            result << operand_1632->mFormalParameterPassingMode.reader_generation1ForFormalParameter (inLexique COMMA_SOURCE_FILE_AT_LINE (31)) ;
            result << "GGS_" ;
            result << operand_1632->mFormalParameterTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (31)) ;
            result << operand_1632->mFormalParameterPassingMode.reader_generation2ForFormalParameter (inLexique COMMA_SOURCE_FILE_AT_LINE (31)) ;
          }
          result << "\n" ;
          result << var_cas_COLUMN3 ;
          result << "COMMA_LOCATION_ARGS) ;\n"
            "\n" ;
        }else {
        }
      }
      if (operand_331->mInfo.mHasParseLabel.boolValue ()) {
        result << "  public : virtual void nt_" ;
        result << operand_331->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (37)) ;
        result << "_parse (" ;
        result << var_cas_LEXIQUE_CLASS ;
        result << " &) ;\n"
          "\n" ;
      }else {
      }
    }
    GGS_stringlist::cEnumerator enumerator_2070 (var_cas_ADDED_NON_TERMINAL_LIST, true) ;
    const GGS_stringlist::cElement * operand_2070 = NULL ;
    while (((operand_2070 = enumerator_2070.nextObject ()))) {
      macroValidPointer (operand_2070) ;
      result << "  public : virtual PMSInt16 " ;
      result << operand_2070->mValue ;
      result << " (" ;
      result << var_cas_LEXIQUE_CLASS ;
      result << " &) ;\n" ;
      if (enumerator_2070.hasNextObject ()) {
        result << "\n" ;
      }
    }
    result << "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#endif\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "buildRuleList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildRuleList (C_Compiler & inLexique,
                                const GGS_string  var_cas_inSyntaxComponentName,
                                const GGS_syntaxRuleList   var_cas_inRuleList,
                                GGS_syntaxRuleListForGrammar  & var_cas_ioSyntaxRuleListForGrammar COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildRuleList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_syntaxRuleList::cEnumerator enumerator_21350 (var_cas_inRuleList, true) ;
    const GGS_syntaxRuleList::cElement * operand_21350 = NULL ;
    while (((operand_21350 = enumerator_21350.nextObject ()))) {
      macroValidPointer (operand_21350) ;
      GGS_syntaxInstructionList  var_cas_instructionList ;
      GGS_lstring  automatic_var_0 ;
      GGS_formalParameterList  automatic_var_1 ;
      const GGS_syntaxRuleLabelList  temp_21492 = operand_21350->mLabelList ;
      if (temp_21492.isBuilt ()) {
        temp_21492 (HERE)->method_first (inLexique, automatic_var_0, automatic_var_1, var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (543)) ;
      }
      GGS_syntaxInstructionList  var_cas_syntaxInstructionList ;
      ::routine_buildSyntaxInstructionList (inLexique,  var_cas_instructionList,  var_cas_syntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (545)) ;
      var_cas_ioSyntaxRuleListForGrammar.addAssign_operation (var_cas_inSyntaxComponentName, operand_21350->mNonterminalName, var_cas_syntaxInstructionList) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildRuleList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "compileGrammarComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileGrammarComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  var_cas_inOutputDirectory,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileGrammarComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_grammarComponentRoot  var_cas_grammarComponentRoot ;
  const GGS_string _depExtension = GGS_string ("") ;
  const GGS_string _depPath = GGS_string ("") ;
  if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
    grammarLL1grammar::_performSourceFileParsing_ (inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_inSourceFile,
                                  var_cas_grammarComponentRoot
                                  COMMA_SOURCE_FILE_AT_LINE (558)) ;
  }
  const GGS_lstring  var_cas_grammarComponentName = var_cas_grammarComponentRoot.reader_mGrammarName (inLexique COMMA_SOURCE_FILE_AT_LINE (560)) ;
  const GGS_string var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (561)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (561)) ;
  if (((var_cas_grammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (562))).operator_isNotEqual (var_cas_basename)).isBuiltAndTrue ()) {
    var_cas_grammarComponentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS checks "
      "the component name ('")).operator_concat (var_cas_grammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (564)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (566)) ;
  }
  GGS_nonTerminalMap  var_cas_nonTerminalMap = GGS_nonTerminalMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_string var_cas_lexiqueComponentName = GGS_string ("") ;
  GGS_syntaxRuleListForGrammar  var_cas_syntaxRuleListForGrammar = GGS_syntaxRuleListForGrammar ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_22914 (var_cas_grammarComponentRoot.reader_mSyntaxComponents (inLexique COMMA_SOURCE_FILE_AT_LINE (572)), true) ;
    const GGS_lstringlist::cElement * operand_22914 = NULL ;
    while (((operand_22914 = enumerator_22914.nextObject ()))) {
      macroValidPointer (operand_22914) ;
      if (((operand_22914->mValue.ggs_string ().reader_pathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (573))).operator_isNotEqual (GGS_string ("gSyntax"))).isBuiltAndTrue ()) {
        operand_22914->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a syntax component file should have '.gSyntax' as path extension") COMMA_SOURCE_FILE_AT_LINE (575)) ;
      }else{
        GGS_string var_cas_syntaxComponentName = operand_22914->mValue.ggs_string ().reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (576)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (576)) ;
        GGS_syntaxComponentRoot  var_cas_syntaxComponentRoot ;
        if ((var_cas_ioParsedComponentStruct.reader_mParsedSyntaxComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (578)).reader_hasKey (inLexique, var_cas_syntaxComponentName COMMA_SOURCE_FILE_AT_LINE (578))).isBuiltAndTrue ()) {
          const GGS_parsedSyntaxComponentMap  temp_23416 = var_cas_ioParsedComponentStruct.reader_mParsedSyntaxComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (579)) ;
          if (temp_23416.isBuilt ()) {
            temp_23416 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_syntaxComponentName, GGS_location (inLexique) COMMA_HERE), var_cas_syntaxComponentRoot COMMA_SOURCE_FILE_AT_LINE (579)) ;
          }
        }else{
          GGS_string var_cas_sourceFilePath = operand_22914->mValue.ggs_string ().reader_absolutePathFromPath (inLexique, var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (581)) COMMA_SOURCE_FILE_AT_LINE (581)) ;
          const GGS_string _depExtension = GGS_string ("") ;
          const GGS_string _depPath = GGS_string ("") ;
          if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
            syntaxSLRgrammar::_performSourceFileParsing_ (inLexique,
                                          _depExtension.string (),
                                          _depPath.string (),
                                          NULL,
                                          GGS_lstring ::constructor_new (inLexique, var_cas_sourceFilePath, operand_22914->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (582)) COMMA_HERE),
                                          var_cas_syntaxComponentRoot
                                          COMMA_SOURCE_FILE_AT_LINE (582)) ;
          }
          var_cas_ioParsedComponentStruct.mParsedSyntaxComponentMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_syntaxComponentName, operand_22914->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (583)) COMMA_HERE), var_cas_syntaxComponentRoot COMMA_SOURCE_FILE_AT_LINE (583)) ;
        }
        GGS_string var_cas_currentLexiqueName = var_cas_syntaxComponentRoot.reader_mImportedLexiqueReference (inLexique COMMA_SOURCE_FILE_AT_LINE (586)).ggs_string ().reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (586)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (586)) ;
        if (((var_cas_lexiqueComponentName).operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
          var_cas_lexiqueComponentName = var_cas_currentLexiqueName ;
        }else if (((var_cas_lexiqueComponentName).operator_isNotEqual (var_cas_currentLexiqueName)).isBuiltAndTrue ()) {
          operand_22914->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this syntax component uses '")).operator_concat (var_cas_currentLexiqueName)).operator_concat (GGS_string ("' lexique component, but the first syntax component uses the '"))).operator_concat (var_cas_lexiqueComponentName)).operator_concat (GGS_string ("' lexique component (they should be the same)")) COMMA_SOURCE_FILE_AT_LINE (593)) ;
        }
        ::routine_handleNonTerminalDeclarations (inLexique,  var_cas_nonTerminalMap,  var_cas_syntaxComponentRoot.reader_mNonterminalDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (597)) COMMA_SOURCE_FILE_AT_LINE (595)) ;
        ::routine_buildRuleList (inLexique,  var_cas_syntaxComponentName,  var_cas_syntaxComponentRoot.reader_mRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (602)),  var_cas_syntaxRuleListForGrammar COMMA_SOURCE_FILE_AT_LINE (600)) ;
      }
    }
  }
  GGS_syntaxRuleListForGrammar  var_cas_pureSyntaxRuleListForGrammar = GGS_syntaxRuleListForGrammar ::constructor_emptyList () ;
  GGS_syntaxRuleListForGrammar  var_cas_addedPureSyntaxRuleListForGrammar = GGS_syntaxRuleListForGrammar ::constructor_emptyList () ;
  GGS_stringlist  var_cas_addedNonTerminalList = GGS_stringlist ::constructor_emptyList () ;
  GGS_string var_cas_currentSyntaxComponentName = GGS_string ("") ;
  GGS_uint  var_cas_addedRuleIndex = GGS_uint (0U) ;
  {
    GGS_syntaxRuleListForGrammar::cEnumerator enumerator_25217 (var_cas_syntaxRuleListForGrammar, true) ;
    const GGS_syntaxRuleListForGrammar::cElement * operand_25217 = NULL ;
    while (((operand_25217 = enumerator_25217.nextObject ()))) {
      macroValidPointer (operand_25217) ;
      if (((var_cas_currentSyntaxComponentName).operator_isNotEqual (operand_25217->mSyntaxComponentName)).isBuiltAndTrue ()) {
        var_cas_currentSyntaxComponentName = operand_25217->mSyntaxComponentName ;
        var_cas_addedRuleIndex = GGS_uint (0U) ;
      }
      GGS_syntaxInstructionList  var_cas_pureSyntaxInstructionList ;
      ::routine_buildPureSyntaxInstructionList (inLexique,  operand_25217->mSyntaxComponentName,  operand_25217->mSyntaxInstructionList,  var_cas_pureSyntaxInstructionList,  var_cas_addedPureSyntaxRuleListForGrammar,  var_cas_addedNonTerminalList,  var_cas_addedRuleIndex COMMA_SOURCE_FILE_AT_LINE (619)) ;
      var_cas_pureSyntaxRuleListForGrammar.addAssign_operation (operand_25217->mSyntaxComponentName, operand_25217->mLeftNonTerminal, var_cas_pureSyntaxInstructionList) ;
    }
  }
  var_cas_pureSyntaxRuleListForGrammar.dotAssign_operation (var_cas_addedPureSyntaxRuleListForGrammar) ;
  GGS_syntaxInstructionList  var_cas_syntaxInstructionList = GGS_syntaxInstructionList ::constructor_emptyList () ;
  var_cas_syntaxInstructionList.addAssign_operation (GGS_nonterminalCallInstruction ::constructor_new (inLexique, var_cas_grammarComponentRoot.reader_mStartSymbol (inLexique COMMA_SOURCE_FILE_AT_LINE (638)), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), GGS_actualParameterList ::constructor_emptyList () COMMA_HERE)) ;
  var_cas_syntaxInstructionList.addAssign_operation (GGS_terminalCheckInstruction ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), GGS_actualInputParameterList ::constructor_emptyList () COMMA_HERE)) ;
  var_cas_pureSyntaxRuleListForGrammar.addAssign_operation (GGS_string (""), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), var_cas_syntaxInstructionList) ;
  if ((gOption_galgas_5F_cli_5F_options_verbose_5F_output.value ()).isBuiltAndTrue ()) {
    inLexique.printMessage (((GGS_string ("  Building pure BNF productions... ")).operator_concat (var_cas_pureSyntaxRuleListForGrammar.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (652)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (652)))).operator_concat (GGS_string (" productions\n")) COMMA_SOURCE_FILE_AT_LINE (652)) ;
  }
  if ((gOption_galgas_5F_cli_5F_options_verbose_5F_output.value ()).isBuiltAndTrue ()) {
    inLexique.printMessage (GGS_string ("  Checking all productions are differents...") COMMA_SOURCE_FILE_AT_LINE (657)) ;
  }
  GGS_string var_cas_htmlOutputFileName = (var_cas_inSourceFile.ggs_string ().reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (659))).operator_concat (GGS_string (".html")) ;
  GGS_productionListMap var_cas_productionListMap = GGS_productionListMap::constructor_emptyMap () ;
  GGS_stringlist  var_cas_identicalDerivationErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  GGS_stringlist  var_cas_vocabularyListForDisplaying = GGS_stringlist ::constructor_emptyList () ;
  GGS_uint  var_cas_additionalNonTerminalSymbolsForPureBDDrules = GGS_uint (0U) ;
  GGS_vocabularyMap  var_cas_terminalMap = GGS_vocabularyMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_syntaxRuleListForGrammar::cEnumerator enumerator_27355 (var_cas_pureSyntaxRuleListForGrammar, true) ;
    const GGS_syntaxRuleListForGrammar::cElement * operand_27355 = NULL ;
    while (((operand_27355 = enumerator_27355.nextObject ()))) {
      macroValidPointer (operand_27355) ;
      {
        GGS_syntaxInstructionList::cEnumerator enumerator_27393 (operand_27355->mSyntaxInstructionList, true) ;
        const GGS_syntaxInstructionList::cElement * operand_27393 = NULL ;
        while (((operand_27393 = enumerator_27393.nextObject ()))) {
          macroValidPointer (operand_27393) ;
          const GGS_syntaxInstruction  temp_27450 = operand_27393->mInstruction ;
          if (temp_27450.isBuilt ()) {
            typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary method = findCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary (temp_27450.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, temp_27450 (HERE), var_cas_terminalMap, var_cas_vocabularyListForDisplaying COMMA_SOURCE_FILE_AT_LINE (668)) ;
            }
          }
        }
      }
    }
  }
  GGS_uint  var_cas_terminalSymbolCount = var_cas_terminalMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (671)) ;
  GGS_vocabularyMap  var_cas_nonterminalMap = GGS_vocabularyMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
      GGS_uint var_cas_idx (true, 0) ;
    GGS_syntaxRuleListForGrammar::cEnumerator enumerator_27700 (var_cas_pureSyntaxRuleListForGrammar, true) ;
    const GGS_syntaxRuleListForGrammar::cElement * operand_27700 = NULL ;
    while (((operand_27700 = enumerator_27700.nextObject ()))) {
      macroValidPointer (operand_27700) ;
      if (((var_cas_nonterminalMap.reader_hasKey (inLexique, operand_27700->mLeftNonTerminal.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (675)) COMMA_SOURCE_FILE_AT_LINE (675))).operator_not ()).isBuiltAndTrue ()) {
        var_cas_nonterminalMap.modifier_insertKey (inLexique, operand_27700->mLeftNonTerminal, var_cas_terminalMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (676)).add_operation (inLexique, var_cas_nonterminalMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (676)) COMMA_SOURCE_FILE_AT_LINE (676)) COMMA_SOURCE_FILE_AT_LINE (676)) ;
        var_cas_vocabularyListForDisplaying.addAssign_operation (((GGS_string ("<")).operator_concat (operand_27700->mLeftNonTerminal)).operator_concat (GGS_string (">"))) ;
      }
      if (((operand_27700->mSyntaxInstructionList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (679))).operator_strictSup (GGS_uint (2U))).isBuiltAndTrue ()) {
        var_cas_additionalNonTerminalSymbolsForPureBDDrules = var_cas_additionalNonTerminalSymbolsForPureBDDrules.add_operation (inLexique, operand_27700->mSyntaxInstructionList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (680)) COMMA_SOURCE_FILE_AT_LINE (680)).substract_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (680)) ;
      }
      GGS_uint64list  var_cas_rightDerivation = GGS_uint64list ::constructor_emptyList () ;
      {
        GGS_syntaxInstructionList::cEnumerator enumerator_28237 (operand_27700->mSyntaxInstructionList, true) ;
        const GGS_syntaxInstructionList::cElement * operand_28237 = NULL ;
        while (((operand_28237 = enumerator_28237.nextObject ()))) {
          macroValidPointer (operand_28237) ;
          const GGS_syntaxInstruction  temp_28297 = operand_28237->mInstruction ;
          if (temp_28297.isBuilt ()) {
            typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary method = findCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary (temp_28297.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, temp_28297 (HERE), var_cas_nonterminalMap, var_cas_terminalMap, var_cas_rightDerivation, var_cas_vocabularyListForDisplaying COMMA_SOURCE_FILE_AT_LINE (684)) ;
            }
          }
        }
      }
      GGS_derivationList  var_cas_previousDerivations = var_cas_productionListMap.reader_listForKey (inLexique, operand_27700->mLeftNonTerminal.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (687)) COMMA_SOURCE_FILE_AT_LINE (687)) ;
      GGS_bool var_cas_ok = GGS_bool (true) ;
      {
        GGS_derivationList::cEnumerator enumerator_28609 (var_cas_previousDerivations, true) ;
        const GGS_derivationList::cElement * operand_28609 = NULL ;
        while (((operand_28609 = enumerator_28609.nextObject ()))
            && (var_cas_ok.isBuiltAndTrue ())) {
          macroValidPointer (operand_28609) ;
          if (((operand_28609->mDerivation).operator_isEqual (var_cas_rightDerivation)).isBuiltAndTrue ()) {
            var_cas_ok = GGS_bool (false) ;
            if (((gOption_galgas_5F_cli_5F_options_verbose_5F_output.value ()).operator_and ((var_cas_identicalDerivationErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (692))).operator_isEqual (GGS_uint (0U)))).isBuiltAndTrue ()) {
              inLexique.printMessage (GGS_string (" error\n") COMMA_SOURCE_FILE_AT_LINE (693)) ;
            }
            GGS_string var_cas_errorMessage = ((((((GGS_string ("for <")).operator_concat (operand_27700->mLeftNonTerminal)).operator_concat (GGS_string ("> non terminal, productions "))).operator_concat (operand_28609->mProductionIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (698)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_idx.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (699)))).operator_concat (GGS_string (" are identical")) ;
            var_cas_identicalDerivationErrorMessageList.addAssign_operation (var_cas_errorMessage) ;
            if ((gOption_galgas_5F_cli_5F_options_outputHTMLgrammarFile.value ()).isBuiltAndTrue ()) {
              var_cas_errorMessage.appendCString (" (for details, see ") ;
              var_cas_errorMessage.dotAssign_operation (var_cas_htmlOutputFileName) ;
              var_cas_errorMessage.appendCString (" file)") ;
            }else{
              var_cas_errorMessage.appendCString (" (for details, turn on '--output-html-grammar-file' option and see ") ;
              var_cas_errorMessage.dotAssign_operation (var_cas_htmlOutputFileName) ;
              var_cas_errorMessage.appendCString (" file)") ;
            }
            operand_27700->mLeftNonTerminal.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (707)) ;
          }
        }
      }
      if ((var_cas_ok).isBuiltAndTrue ()) {
        GGS_uint  var_cas_leftTerminalIndex ;
        const GGS_vocabularyMap  temp_29560 = var_cas_nonterminalMap ;
        if (temp_29560.isBuilt ()) {
          temp_29560 (HERE)->method_searchKey (inLexique, operand_27700->mLeftNonTerminal, var_cas_leftTerminalIndex COMMA_SOURCE_FILE_AT_LINE (711)) ;
        }
        var_cas_productionListMap.addAssign_operation (operand_27700->mLeftNonTerminal.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (712)), var_cas_leftTerminalIndex.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (712)), var_cas_idx, var_cas_rightDerivation) ;
      }
      var_cas_idx.mValue ++ ;
    }
  }
  if (((gOption_galgas_5F_cli_5F_options_verbose_5F_output.value ()).operator_and ((var_cas_identicalDerivationErrorMessageList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (715))).operator_isEqual (GGS_uint (0U)))).isBuiltAndTrue ()) {
    inLexique.printMessage (GGS_string (" ok\n") COMMA_SOURCE_FILE_AT_LINE (716)) ;
  }
  GGS_uintlist  var_cas_unusedNonterminalSymbolList = GGS_uintlist ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_30009 (var_cas_grammarComponentRoot.reader_mUnusedNonterminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (720)), true) ;
    const GGS_lstringlist::cElement * operand_30009 = NULL ;
    while (((operand_30009 = enumerator_30009.nextObject ()))) {
      macroValidPointer (operand_30009) ;
      elementOf_GGS_vocabularyMap * operand_30082 = (elementOf_GGS_vocabularyMap *) var_cas_nonterminalMap.searchForWithInstruction (inLexique, operand_30009->mValue, GGS_vocabularyMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (721)) ;
      if (NULL != operand_30082) {
        var_cas_unusedNonterminalSymbolList.addAssign_operation (operand_30082->mInfo.mIndex) ;
      }else{
        operand_30009->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '<")).operator_concat (operand_30009->mValue)).operator_concat (GGS_string (">' non terminal is not declared by syntax components")) COMMA_SOURCE_FILE_AT_LINE (725)) ;
      }
    }
  }
  GGS_uint  var_cas_startSymbolIndex ;
  elementOf_GGS_vocabularyMap * operand_30412 = (elementOf_GGS_vocabularyMap *) var_cas_nonterminalMap.searchForWithInstruction (inLexique, var_cas_grammarComponentRoot.reader_mStartSymbol (inLexique COMMA_SOURCE_FILE_AT_LINE (729)), GGS_vocabularyMap::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (729)) ;
  if (NULL != operand_30412) {
    var_cas_startSymbolIndex = operand_30412->mInfo.mIndex ;
  }else{
    var_cas_grammarComponentRoot.reader_mStartSymbol (inLexique COMMA_SOURCE_FILE_AT_LINE (732)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '<")).operator_concat (var_cas_grammarComponentRoot.reader_mStartSymbol (inLexique COMMA_SOURCE_FILE_AT_LINE (732)))).operator_concat (GGS_string (">' non terminal is not declared by syntax components, it cannot be used as start symbol")) COMMA_SOURCE_FILE_AT_LINE (735)) ;
    var_cas_startSymbolIndex.drop () ;
  }
  ::routine_newGrammarAnalyzer (inLexique,  var_cas_grammarComponentName,  var_cas_startSymbolIndex,  var_cas_lexiqueComponentName,  var_cas_nonterminalMap,  var_cas_terminalMap,  var_cas_productionListMap,  var_cas_unusedNonterminalSymbolList COMMA_SOURCE_FILE_AT_LINE (737)) ;
  const GGS_uint  var_cas_terminalCount = var_cas_terminalMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (747)) ;
  const GGS_uint  var_cas_vocabularyCount = var_cas_terminalCount.add_operation (inLexique, var_cas_nonterminalMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (748)) COMMA_SOURCE_FILE_AT_LINE (748)).add_operation (inLexique, var_cas_additionalNonTerminalSymbolsForPureBDDrules COMMA_SOURCE_FILE_AT_LINE (748)) ;
  const GGS_uint  var_cas_startSymbolIndexForBDD = var_cas_terminalCount.add_operation (inLexique, var_cas_nonterminalMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (749)) COMMA_SOURCE_FILE_AT_LINE (749)).substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (749)) ;
  const GGS_uint  var_cas_bitCountForBDDs = var_cas_vocabularyCount.reader_significantBitCount (inLexique COMMA_SOURCE_FILE_AT_LINE (750)) ;
  GGS_uint  var_cas_idx = GGS_uint (0U) ;
  GGS_uint _variant_31675 = var_cas_additionalNonTerminalSymbolsForPureBDDrules ;
  GGS_bool _condition_31675 (_variant_31675.isBuilt (), true) ;
  while (_condition_31675.isBuiltAndTrue ()) {
    _condition_31675 = (var_cas_idx).operator_strictInf (var_cas_additionalNonTerminalSymbolsForPureBDDrules) ;
    if (_condition_31675.isBuiltAndTrue ()) {
      if (_variant_31675.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (757)) ;
        _condition_31675 = GGS_bool (false) ;
      }else{
        _variant_31675.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_vocabularyListForDisplaying.addAssign_operation (((GGS_string ("<")).operator_concat (var_cas_idx.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (755)))).operator_concat (GGS_string (">"))) ;
        var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (756)) ;
      }
    }
  }
  GGS_binaryset var_cas_nonTerminalsWithEmptyProduction = GGS_binaryset::constructor_emptyBinarySet (inLexique COMMA_HERE) ;
  GGS_binaryset var_cas_productionsWithSingleDerivation = GGS_binaryset::constructor_emptyBinarySet (inLexique COMMA_HERE) ;
  GGS_binaryset var_cas_productionsWithDoubleDerivation = GGS_binaryset::constructor_emptyBinarySet (inLexique COMMA_HERE) ;
  GGS_uint64  var_cas_addedNonTerminalIndex = var_cas_terminalCount.add_operation (inLexique, var_cas_nonterminalMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (763)) COMMA_SOURCE_FILE_AT_LINE (763)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (763)) ;
  {
    GGS_productionListMap::cEnumerator enumerator_32187 (var_cas_productionListMap, true) ;
    while (enumerator_32187.hasCurrentObject ()) {
      GGS_uint  var_cas_nonterminalIndex ;
      const GGS_vocabularyMap  temp_32249 = var_cas_nonterminalMap ;
      if (temp_32249.isBuilt ()) {
        temp_32249 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_32187._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_nonterminalIndex COMMA_SOURCE_FILE_AT_LINE (766)) ;
      }
      {
        GGS_derivationList::cEnumerator enumerator_32316 (enumerator_32187._object (HERE), true) ;
        const GGS_derivationList::cElement * operand_32316 = NULL ;
        while (((operand_32316 = enumerator_32316.nextObject ()))) {
          macroValidPointer (operand_32316) ;
          if (((operand_32316->mDerivation.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (768))).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
            var_cas_nonTerminalsWithEmptyProduction = (var_cas_nonTerminalsWithEmptyProduction).operator_or (GGS_binaryset::constructor_binarySetWithEqualToConstant (inLexique, GGS_uint (0U), var_cas_bitCountForBDDs, var_cas_nonterminalIndex.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (770)) COMMA_HERE)) ;
          }else if (((operand_32316->mDerivation.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (772))).operator_isEqual (GGS_uint (1U))).isBuiltAndTrue ()) {
            const GGS_uint64  var_cas_derivation0 = operand_32316->mDerivation.reader_mValueAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (773)) ;
            var_cas_productionsWithSingleDerivation = (var_cas_productionsWithSingleDerivation).operator_or ((GGS_binaryset::constructor_binarySetWithEqualToConstant (inLexique, var_cas_bitCountForBDDs, var_cas_bitCountForBDDs, var_cas_nonterminalIndex.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (775)) COMMA_HERE)).operator_and (GGS_binaryset::constructor_binarySetWithEqualToConstant (inLexique, GGS_uint (0U), var_cas_bitCountForBDDs, var_cas_derivation0 COMMA_HERE))) ;
          }else if (((operand_32316->mDerivation.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (778))).operator_isEqual (GGS_uint (2U))).isBuiltAndTrue ()) {
            const GGS_uint64  var_cas_derivation0 = operand_32316->mDerivation.reader_mValueAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (779)) ;
            const GGS_uint64  var_cas_derivation1 = operand_32316->mDerivation.reader_mValueAtIndex (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (780)) ;
            var_cas_productionsWithDoubleDerivation = (var_cas_productionsWithDoubleDerivation).operator_or (((GGS_binaryset::constructor_binarySetWithEqualToConstant (inLexique, var_cas_bitCountForBDDs.add_operation (inLexique, var_cas_bitCountForBDDs COMMA_SOURCE_FILE_AT_LINE (782)), var_cas_bitCountForBDDs, var_cas_nonterminalIndex.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (782)) COMMA_HERE)).operator_and (GGS_binaryset::constructor_binarySetWithEqualToConstant (inLexique, var_cas_bitCountForBDDs, var_cas_bitCountForBDDs, var_cas_derivation0 COMMA_HERE))).operator_and (GGS_binaryset::constructor_binarySetWithEqualToConstant (inLexique, GGS_uint (0U), var_cas_bitCountForBDDs, var_cas_derivation1 COMMA_HERE))) ;
          }else{
            GGS_uint64  var_cas_currentLeftNonTerminal = var_cas_nonterminalIndex.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (787)) ;
            {
                GGS_uint var_cas_idx (true, 0) ;
              GGS_uint64list::cEnumerator enumerator_33712 (operand_32316->mDerivation, true) ;
              const GGS_uint64list::cElement * operand_33712 = NULL ;
              while (((operand_33712 = enumerator_33712.nextObject ()))) {
                macroValidPointer (operand_33712) ;
                if (((var_cas_idx).operator_strictInf (operand_32316->mDerivation.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (789)).substract_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (789)))).isBuiltAndTrue ()) {
                  const GGS_uint64  var_cas_derivation = operand_32316->mDerivation.reader_mValueAtIndex (inLexique, var_cas_idx COMMA_SOURCE_FILE_AT_LINE (790)) ;
                  var_cas_productionsWithDoubleDerivation = (var_cas_productionsWithDoubleDerivation).operator_or (((GGS_binaryset::constructor_binarySetWithEqualToConstant (inLexique, GGS_uint (0U), var_cas_bitCountForBDDs, var_cas_currentLeftNonTerminal COMMA_HERE)).operator_and (GGS_binaryset::constructor_binarySetWithEqualToConstant (inLexique, var_cas_bitCountForBDDs, var_cas_bitCountForBDDs, var_cas_derivation COMMA_HERE))).operator_and (GGS_binaryset::constructor_binarySetWithEqualToConstant (inLexique, var_cas_bitCountForBDDs.add_operation (inLexique, var_cas_bitCountForBDDs COMMA_SOURCE_FILE_AT_LINE (794)), var_cas_bitCountForBDDs, var_cas_addedNonTerminalIndex COMMA_HERE))) ;
                  var_cas_currentLeftNonTerminal = var_cas_addedNonTerminalIndex ;
                  var_cas_addedNonTerminalIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (797)) ;
                }else if (((var_cas_idx).operator_isEqual (operand_32316->mDerivation.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (798)).substract_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (798)))).isBuiltAndTrue ()) {
                  const GGS_uint64  var_cas_derivation0 = operand_32316->mDerivation.reader_mValueAtIndex (inLexique, var_cas_idx COMMA_SOURCE_FILE_AT_LINE (799)) ;
                  const GGS_uint64  var_cas_derivation1 = operand_32316->mDerivation.reader_mValueAtIndex (inLexique, var_cas_idx.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (800)) COMMA_SOURCE_FILE_AT_LINE (800)) ;
                  var_cas_productionsWithDoubleDerivation = (var_cas_productionsWithDoubleDerivation).operator_or (((GGS_binaryset::constructor_binarySetWithEqualToConstant (inLexique, GGS_uint (0U), var_cas_bitCountForBDDs, var_cas_currentLeftNonTerminal COMMA_HERE)).operator_and (GGS_binaryset::constructor_binarySetWithEqualToConstant (inLexique, var_cas_bitCountForBDDs, var_cas_bitCountForBDDs, var_cas_derivation0 COMMA_HERE))).operator_and (GGS_binaryset::constructor_binarySetWithEqualToConstant (inLexique, var_cas_bitCountForBDDs.add_operation (inLexique, var_cas_bitCountForBDDs COMMA_SOURCE_FILE_AT_LINE (804)), var_cas_bitCountForBDDs, var_cas_derivation1 COMMA_HERE))) ;
                }
                var_cas_idx.mValue ++ ;
              }
            }
          }
        }
      }
      enumerator_32187.next () ;
    }
  }
  if ((gOption_galgas_5F_cli_5F_options_verbose_5F_output.value ()).isBuiltAndTrue ()) {
    inLexique.printMessage (GGS_string ("  Checking all non terminal symbols are useful...") COMMA_SOURCE_FILE_AT_LINE (813)) ;
  }
  GGS_binaryset var_cas_elementaryUtility = var_cas_productionsWithSingleDerivation ;
  var_cas_elementaryUtility = (var_cas_elementaryUtility).operator_or (var_cas_productionsWithDoubleDerivation.reader_existOnBitIndexAndBeyond (inLexique, var_cas_bitCountForBDDs.add_operation (inLexique, var_cas_bitCountForBDDs COMMA_SOURCE_FILE_AT_LINE (818)) COMMA_SOURCE_FILE_AT_LINE (818))) ;
  var_cas_elementaryUtility = (var_cas_elementaryUtility).operator_or (var_cas_productionsWithDoubleDerivation.reader_swap132 (inLexique, var_cas_bitCountForBDDs, var_cas_bitCountForBDDs, var_cas_bitCountForBDDs COMMA_SOURCE_FILE_AT_LINE (819)).reader_existOnBitIndexAndBeyond (inLexique, var_cas_bitCountForBDDs.add_operation (inLexique, var_cas_bitCountForBDDs COMMA_SOURCE_FILE_AT_LINE (819)) COMMA_SOURCE_FILE_AT_LINE (819))) ;
  const GGS_binaryset var_cas_startSymbol = GGS_binaryset::constructor_binarySetWithEqualToConstant (inLexique, GGS_uint (0U), var_cas_bitCountForBDDs, var_cas_startSymbolIndexForBDD.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (834)) COMMA_HERE) ;
  const GGS_binaryset var_cas_usefulSymbols = var_cas_elementaryUtility.reader_accessibleStates (inLexique, var_cas_startSymbol, var_cas_bitCountForBDDs COMMA_SOURCE_FILE_AT_LINE (835)) ;
  const GGS_binaryset var_cas_allSymbols = GGS_binaryset::constructor_binarySetWithLowerOrEqualToConstant (inLexique, GGS_uint (0U), var_cas_bitCountForBDDs, var_cas_vocabularyCount.substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (837)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (837)) COMMA_HERE) ;
  const GGS_binaryset var_cas_unusefulSymbols = (var_cas_allSymbols).operator_and ((var_cas_usefulSymbols).operator_tilde ()) ;
  GGS_binaryset var_cas_unusefulNonTerminals = (var_cas_unusefulSymbols).operator_and (GGS_binaryset::constructor_binarySetWithGreaterOrEqualToConstant (inLexique, GGS_uint (0U), var_cas_bitCountForBDDs, var_cas_terminalCount.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (839)) COMMA_HERE)) ;
  {
    GGS_lstringlist::cEnumerator enumerator_37165 (var_cas_grammarComponentRoot.reader_mUnusedNonterminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (840)), true) ;
    const GGS_lstringlist::cElement * operand_37165 = NULL ;
    while (((operand_37165 = enumerator_37165.nextObject ()))) {
      macroValidPointer (operand_37165) ;
      GGS_uint  var_cas_nonTerminalSymbolIndex ;
      const GGS_vocabularyMap  temp_37277 = var_cas_nonterminalMap ;
      if (temp_37277.isBuilt ()) {
        temp_37277 (HERE)->method_searchKey (inLexique, operand_37165->mValue, var_cas_nonTerminalSymbolIndex COMMA_SOURCE_FILE_AT_LINE (842)) ;
      }
      var_cas_unusefulNonTerminals = (var_cas_unusefulNonTerminals).operator_and ((GGS_binaryset::constructor_binarySetWithEqualToConstant (inLexique, GGS_uint (0U), var_cas_bitCountForBDDs, var_cas_nonTerminalSymbolIndex.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (843)) COMMA_HERE)).operator_tilde ()) ;
    }
  }
  const GGS_stringlist  var_cas_unusefulNonTerminalList = var_cas_unusefulNonTerminals.reader_stringValueListWithNameList (inLexique, var_cas_bitCountForBDDs, var_cas_vocabularyListForDisplaying COMMA_SOURCE_FILE_AT_LINE (845)) ;
  if ((gOption_galgas_5F_cli_5F_options_verbose_5F_output.value ()).isBuiltAndTrue ()) {
    inLexique.printMessage ((((var_cas_unusefulNonTerminalList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (847))).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue () ? (GGS_string (" ok\n")) : (GGS_string (" warning\n"))) COMMA_SOURCE_FILE_AT_LINE (847)) ;
  }
  if (((var_cas_unusefulNonTerminalList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (849))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_string var_cas_errorMessage = ((((GGS_string ("the grammar contains ")).operator_concat (var_cas_unusefulNonTerminalList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (851)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (851)))).operator_concat (GGS_string (" useless symbol"))).operator_concat ((((var_cas_unusefulNonTerminalList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (852))).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string (""))))).operator_concat (GGS_string (": ")) ;
    {
      GGS_stringlist::cEnumerator enumerator_38039 (var_cas_unusefulNonTerminalList, true) ;
      const GGS_stringlist::cElement * operand_38039 = enumerator_38039.nextObject () ;
      if ((operand_38039 != NULL)) {
        bool _foreach_loop_38039 ;
        do{
          macroValidPointer (operand_38039) ;
          var_cas_errorMessage.dotAssign_operation (operand_38039->mValue) ;
          operand_38039 = enumerator_38039.nextObject () ;
          _foreach_loop_38039 = ((operand_38039 != NULL)) ;
          if (_foreach_loop_38039) {
            var_cas_errorMessage.appendCString (", ") ;
          }
        }while (_foreach_loop_38039) ;
      }
    }
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (857)) ;
  }
  {
    GGS_lstringlist::cEnumerator enumerator_38307 (var_cas_grammarComponentRoot.reader_mUnusedNonterminalList (inLexique COMMA_SOURCE_FILE_AT_LINE (860)), true) ;
    const GGS_lstringlist::cElement * operand_38307 = NULL ;
    while (((operand_38307 = enumerator_38307.nextObject ()))) {
      macroValidPointer (operand_38307) ;
      GGS_uint  var_cas_nonTerminalSymbolIndex ;
      const GGS_vocabularyMap  temp_38419 = var_cas_nonterminalMap ;
      if (temp_38419.isBuilt ()) {
        temp_38419 (HERE)->method_searchKey (inLexique, operand_38307->mValue, var_cas_nonTerminalSymbolIndex COMMA_SOURCE_FILE_AT_LINE (862)) ;
      }
      if ((var_cas_usefulSymbols.reader_containsValue (inLexique, var_cas_nonTerminalSymbolIndex.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (863)), GGS_uint (0U), var_cas_bitCountForBDDs COMMA_SOURCE_FILE_AT_LINE (863))).isBuiltAndTrue ()) {
        operand_38307->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("the '<")).operator_concat (operand_38307->mValue)).operator_concat (GGS_string (">' non terminal is declared as unused, but it is actually useful")) COMMA_SOURCE_FILE_AT_LINE (864)) ;
      }
    }
  }
  GGS_binaryset var_cas_symbolsDirectlyDerivingInEmptyString = GGS_binaryset::constructor_emptyBinarySet (inLexique COMMA_HERE) ;
  {
    GGS_productionListMap::cEnumerator enumerator_38880 (var_cas_productionListMap, true) ;
    while (enumerator_38880.hasCurrentObject ()) {
      {
        GGS_derivationList::cEnumerator enumerator_38902 (enumerator_38880._object (HERE), true) ;
        const GGS_derivationList::cElement * operand_38902 = NULL ;
        while (((operand_38902 = enumerator_38902.nextObject ()))) {
          macroValidPointer (operand_38902) ;
          if (((operand_38902->mDerivation.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (871))).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
            var_cas_symbolsDirectlyDerivingInEmptyString = (var_cas_symbolsDirectlyDerivingInEmptyString).operator_or (GGS_binaryset::constructor_binarySetWithEqualToConstant (inLexique, GGS_uint (0U), var_cas_bitCountForBDDs, operand_38902->mLeftTerminalIndex COMMA_HERE)) ;
          }
        }
      }
      enumerator_38880.next () ;
    }
  }
  GGS_binaryset var_cas_elementaryFIRSTset = GGS_binaryset::constructor_emptyBinarySet (inLexique COMMA_HERE) ;
  {
    GGS_productionListMap::cEnumerator enumerator_39334 (var_cas_productionListMap, true) ;
    while (enumerator_39334.hasCurrentObject ()) {
      GGS_binaryset var_cas_elementaryFIRSTsetForNonTerminal = GGS_binaryset::constructor_emptyBinarySet (inLexique COMMA_HERE) ;
      GGS_uint64  var_cas_leftNonTerminalIndex = GGS_uint64 (0ULL) ;
      {
        GGS_derivationList::cEnumerator enumerator_39464 (enumerator_39334._object (HERE), true) ;
        const GGS_derivationList::cElement * operand_39464 = NULL ;
        while (((operand_39464 = enumerator_39464.nextObject ()))) {
          macroValidPointer (operand_39464) ;
          if (((operand_39464->mDerivation.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (883))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
            var_cas_leftNonTerminalIndex = operand_39464->mLeftTerminalIndex ;
            GGS_uint64  var_cas_firstSymbol ;
            const GGS_uint64list  temp_39616 = operand_39464->mDerivation ;
            if (temp_39616.isBuilt ()) {
              temp_39616 (HERE)->method_first (inLexique, var_cas_firstSymbol COMMA_SOURCE_FILE_AT_LINE (886)) ;
            }
            var_cas_elementaryFIRSTsetForNonTerminal = (var_cas_elementaryFIRSTsetForNonTerminal).operator_or (GGS_binaryset::constructor_binarySetWithEqualToConstant (inLexique, GGS_uint (0U), var_cas_bitCountForBDDs, var_cas_firstSymbol COMMA_HERE)) ;
          }
        }
      }
      var_cas_elementaryFIRSTset = (var_cas_elementaryFIRSTset).operator_or ((var_cas_elementaryFIRSTsetForNonTerminal).operator_and (GGS_binaryset::constructor_binarySetWithEqualToConstant (inLexique, var_cas_bitCountForBDDs, var_cas_bitCountForBDDs, var_cas_leftNonTerminalIndex COMMA_HERE))) ;
      enumerator_39334.next () ;
    }
  }
  if ((gOption_galgas_5F_cli_5F_options_outputHTMLgrammarFile.value ()).isBuiltAndTrue ()) {
    const GGS_stringlist  var_cas_listOfSymbolsDirectlyDerivingInEmptyString = var_cas_symbolsDirectlyDerivingInEmptyString.reader_stringValueListWithNameList (inLexique, var_cas_bitCountForBDDs, var_cas_vocabularyListForDisplaying COMMA_SOURCE_FILE_AT_LINE (894)) ;
    GGS_string var_cas_s = template_filewrapper_grammarGenerationTemplates_html (inLexique, var_cas_grammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (896)), var_cas_syntaxRuleListForGrammar, var_cas_pureSyntaxRuleListForGrammar, var_cas_vocabularyListForDisplaying, var_cas_terminalMap, var_cas_additionalNonTerminalSymbolsForPureBDDrules, var_cas_nonterminalMap, var_cas_bitCountForBDDs, var_cas_nonTerminalsWithEmptyProduction.reader_stringValueListWithNameList (inLexique, var_cas_bitCountForBDDs, var_cas_vocabularyListForDisplaying COMMA_SOURCE_FILE_AT_LINE (904)), var_cas_productionsWithSingleDerivation.reader_relationStringListWithNameList (inLexique, var_cas_bitCountForBDDs, var_cas_vocabularyListForDisplaying COMMA_SOURCE_FILE_AT_LINE (905)), var_cas_productionsWithDoubleDerivation.reader_tripleRelationStringListWithNameList (inLexique, var_cas_bitCountForBDDs, var_cas_vocabularyListForDisplaying COMMA_SOURCE_FILE_AT_LINE (906)), var_cas_identicalDerivationErrorMessageList, var_cas_unusefulNonTerminalList, var_cas_listOfSymbolsDirectlyDerivingInEmptyString, var_cas_elementaryFIRSTset.reader_relationStringListWithNameList (inLexique, var_cas_bitCountForBDDs, var_cas_vocabularyListForDisplaying COMMA_SOURCE_FILE_AT_LINE (910)), var_cas_elementaryFIRSTset.reader_valueCount (inLexique, var_cas_bitCountForBDDs.add_operation (inLexique, var_cas_bitCountForBDDs COMMA_SOURCE_FILE_AT_LINE (911)) COMMA_SOURCE_FILE_AT_LINE (911))) ;
    GGS_bool automatic_var_2 ;
    const GGS_string temp_41365 = var_cas_s ;
    if (temp_41365.isBuilt ()) {
      temp_41365 (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_htmlOutputFileName, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (913)) ;
    }
  }else{
    GGS_string::class_method_deleteFileIfExists (inLexique, var_cas_htmlOutputFileName COMMA_SOURCE_FILE_AT_LINE (915)) ;
  }
  if (((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_grammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (921))).operator_concat (GGS_string (".h")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_grammarGenerationTemplates_optionHeaderZone2 (inLexique, var_cas_grammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (925)), var_cas_grammarComponentRoot), GGS_string ("\n"
      "\n"), template_filewrapper_grammarGenerationTemplates_optionHeaderZone3 (inLexique, var_cas_grammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (930)), var_cas_grammarComponentRoot, var_cas_nonTerminalMap, var_cas_lexiqueComponentName, var_cas_addedNonTerminalList) COMMA_SOURCE_FILE_AT_LINE (919)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileGrammarComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_grammarCompilation (void) {
 enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList ((typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList) category_method__semanticInstruction__buildSyntaxInstructionList, gClassInfoFor__semanticInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList ((typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList) category_method__nonterminalCallInstruction__buildSyntaxInstructionList, gClassInfoFor__nonterminalCallInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList ((typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList) category_method__terminalCheckInstruction__buildSyntaxInstructionList, gClassInfoFor__terminalCheckInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList ((typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList) category_method__repeatInstruction__buildSyntaxInstructionList, gClassInfoFor__repeatInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList ((typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList) category_method__selectInstruction__buildSyntaxInstructionList, gClassInfoFor__selectInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList ((typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList) category_method__parseDoInstruction__buildSyntaxInstructionList, gClassInfoFor__parseDoInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList ((typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList) category_method__blockInstruction__buildSyntaxInstructionList, gClassInfoFor__blockInstruction.slotID ()) ;
 enterCategoryReader__syntaxInstruction__htmlListing ((typeCategoryReader__syntaxInstruction__htmlListing) category_reader__semanticInstruction__htmlListing, gClassInfoFor__semanticInstruction.slotID ()) ;
 enterCategoryReader__syntaxInstruction__htmlListing ((typeCategoryReader__syntaxInstruction__htmlListing) category_reader__nonterminalCallInstruction__htmlListing, gClassInfoFor__nonterminalCallInstruction.slotID ()) ;
 enterCategoryReader__syntaxInstruction__htmlListing ((typeCategoryReader__syntaxInstruction__htmlListing) category_reader__terminalCheckInstruction__htmlListing, gClassInfoFor__terminalCheckInstruction.slotID ()) ;
 enterCategoryReader__syntaxInstruction__htmlListing ((typeCategoryReader__syntaxInstruction__htmlListing) category_reader__repeatInstruction__htmlListing, gClassInfoFor__repeatInstruction.slotID ()) ;
 enterCategoryReader__syntaxInstruction__htmlListing ((typeCategoryReader__syntaxInstruction__htmlListing) category_reader__selectInstruction__htmlListing, gClassInfoFor__selectInstruction.slotID ()) ;
 enterCategoryReader__syntaxInstruction__htmlListing ((typeCategoryReader__syntaxInstruction__htmlListing) category_reader__parseDoInstruction__htmlListing, gClassInfoFor__parseDoInstruction.slotID ()) ;
 enterCategoryReader__syntaxInstruction__htmlListing ((typeCategoryReader__syntaxInstruction__htmlListing) category_reader__blockInstruction__htmlListing, gClassInfoFor__blockInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary) category_method__semanticInstruction__enterTerminalSymbolIntoVocabulary, gClassInfoFor__semanticInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary) category_method__nonterminalCallInstruction__enterTerminalSymbolIntoVocabulary, gClassInfoFor__nonterminalCallInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary) category_method__terminalCheckInstruction__enterTerminalSymbolIntoVocabulary, gClassInfoFor__terminalCheckInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary) category_method__repeatInstruction__enterTerminalSymbolIntoVocabulary, gClassInfoFor__repeatInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary) category_method__selectInstruction__enterTerminalSymbolIntoVocabulary, gClassInfoFor__selectInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary) category_method__parseDoInstruction__enterTerminalSymbolIntoVocabulary, gClassInfoFor__parseDoInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterTerminalSymbolIntoVocabulary) category_method__blockInstruction__enterTerminalSymbolIntoVocabulary, gClassInfoFor__blockInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary) category_method__semanticInstruction__enterNonTerminalSymbolIntoVocabulary, gClassInfoFor__semanticInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary) category_method__nonterminalCallInstruction__enterNonTerminalSymbolIntoVocabulary, gClassInfoFor__nonterminalCallInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary) category_method__terminalCheckInstruction__enterNonTerminalSymbolIntoVocabulary, gClassInfoFor__terminalCheckInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary) category_method__repeatInstruction__enterNonTerminalSymbolIntoVocabulary, gClassInfoFor__repeatInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary) category_method__selectInstruction__enterNonTerminalSymbolIntoVocabulary, gClassInfoFor__selectInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary) category_method__parseDoInstruction__enterNonTerminalSymbolIntoVocabulary, gClassInfoFor__parseDoInstruction.slotID ()) ;
 enterCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary ((typeCategoryMethod__syntaxInstruction__enterNonTerminalSymbolIntoVocabulary) category_method__blockInstruction__enterNonTerminalSymbolIntoVocabulary, gClassInfoFor__blockInstruction.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_grammarCompilation (prologueRoutineFor_grammarCompilation,
                                   NULL) ;

//---------------------------------------------------------------------------*

