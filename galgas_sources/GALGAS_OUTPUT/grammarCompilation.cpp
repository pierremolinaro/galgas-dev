//-----------------------------------------------------------------------------*
//                                                                             *
//                       File 'grammarCompilation.cpp'                         *
//                         Generated by version 2.6.0                          *
//                        july 8th, 2014, at 19h41'9"                          *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "grammarCompilation.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//-----------------------------------------------------------------------------*

#include "galgas_cli_options.h"
#include "grammarLL1grammar.h"
#include "syntaxSLRgrammar.h"
#include "lexiqueLL1grammar.h"
#include "optionLL1grammar.h"
#include "templateGrammar.h"

//-----------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "grammarCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//-----------------------------------------------------------------------------*
//                                                                             *
//                        Function 'transformLabelMap'                         *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_nonterminalSymbolLabelMapForGrammarAnalysis function_transformLabelMap (const GALGAS_nonTerminalLabelListAST & constinArgument_inLabels,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_nonterminalSymbolLabelMapForGrammarAnalysis result_outNonterminalSymbolLabelMapForGrammarAnalysis ; // Returned variable
  result_outNonterminalSymbolLabelMapForGrammarAnalysis = GALGAS_nonterminalSymbolLabelMapForGrammarAnalysis::constructor_emptyMap (SOURCE_FILE_AT_LINE (34)) ;
  cEnumerator_nonTerminalLabelListAST enumerator_2007 (constinArgument_inLabels, kEnumeration_up) ;
  while (enumerator_2007.hasCurrentObject ()) {
    GALGAS_signatureForGrammarAnalysis var_formalParametersList = GALGAS_signatureForGrammarAnalysis::constructor_emptyList (SOURCE_FILE_AT_LINE (36)) ;
    cEnumerator_formalParameterListAST enumerator_2110 (enumerator_2007.current_mFormalArgumentList (HERE), kEnumeration_up) ;
    while (enumerator_2110.hasCurrentObject ()) {
      var_formalParametersList.addAssign_operation (enumerator_2110.current_mFormalArgumentPassingMode (HERE), enumerator_2110.current_mFormalArgumentTypeName (HERE) COMMA_SOURCE_FILE_AT_LINE (38)) ;
      enumerator_2110.gotoNextObject () ;
    }
    {
    result_outNonterminalSymbolLabelMapForGrammarAnalysis.modifier_insertKey (enumerator_2007.current_mLabelName (HERE), var_formalParametersList, inCompiler COMMA_SOURCE_FILE_AT_LINE (40)) ;
    }
    enumerator_2007.gotoNextObject () ;
  }
//---
  return result_outNonterminalSymbolLabelMapForGrammarAnalysis ;
}


//-----------------------------------------------------------------------------*
//  Function introspection                                                     *
//-----------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_transformLabelMap [2] = {
  & kTypeDescriptor_GALGAS_nonTerminalLabelListAST,
  NULL
} ;

//-----------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_transformLabelMap (C_Compiler * inCompiler,
                                                                  const cObjectArray & inEffectiveParameterArray,
                                                                  const GALGAS_location & /* §§ inErrorLocation */
                                                                  COMMA_LOCATION_ARGS) {
  const GALGAS_nonTerminalLabelListAST operand0 = GALGAS_nonTerminalLabelListAST::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                                                 inCompiler
                                                                                                 COMMA_THERE) ;
  return function_transformLabelMap (operand0,
                                     inCompiler
                                     COMMA_THERE).reader_object (THERE) ;
}

//-----------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_transformLabelMap ("transformLabelMap",
                                                                   functionWithGenericHeader_transformLabelMap,
                                                                   & kTypeDescriptor_GALGAS_nonterminalSymbolLabelMapForGrammarAnalysis,
                                                                   1,
                                                                   functionArgs_transformLabelMap) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//                           Routine 'checkLabelMap'                           *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_checkLabelMap (const GALGAS_location constinArgument_inNonTerminalLocation,
                            const GALGAS_nonTerminalLabelListAST constinArgument_inLabels,
                            const GALGAS_location constinArgument_inOriginalNonTerminalLocation,
                            const GALGAS_nonterminalSymbolLabelMapForGrammarAnalysis constinArgument_inNonterminalSymbolLabelMapForGrammarAnalysis,
                            C_Compiler * inCompiler
                            COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_stringset var_labelStringSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE_AT_LINE (56)) ;
  cEnumerator_nonTerminalLabelListAST enumerator_2730 (constinArgument_inLabels, kEnumeration_up) ;
  while (enumerator_2730.hasCurrentObject ()) {
    var_labelStringSet.addAssign_operation (enumerator_2730.current_mLabelName (HERE).reader_string (SOURCE_FILE_AT_LINE (58)) COMMA_SOURCE_FILE_AT_LINE (58)) ;
    GALGAS_signatureForGrammarAnalysis var_formalParametersList ;
    constinArgument_inNonterminalSymbolLabelMapForGrammarAnalysis.method_searchKey (enumerator_2730.current_mLabelName (HERE), var_formalParametersList, inCompiler COMMA_SOURCE_FILE_AT_LINE (60)) ;
    const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, enumerator_2730.current_mFormalArgumentList (HERE).reader_length (SOURCE_FILE_AT_LINE (61)).objectCompare (var_formalParametersList.reader_length (SOURCE_FILE_AT_LINE (61)))).boolEnum () ;
    if (kBoolTrue == test_0) {
      //--- @ifExpressionForGeneration
      GALGAS_string temp_1 ;
      const enumGalgasBool test_2 = GALGAS_bool (kIsStrictSup, enumerator_2730.current_mFormalArgumentList (HERE).reader_length (SOURCE_FILE_AT_LINE (64)).objectCompare (GALGAS_uint ((uint32_t) 1U))).boolEnum () ;
      if (kBoolTrue == test_2) {
        temp_1 = GALGAS_string ("s") ;
      }else if (kBoolFalse == test_2) {
        temp_1 = GALGAS_string::makeEmptyString () ;
      }
      //--- @ifExpressionForGeneration
      GALGAS_string temp_3 ;
      const enumGalgasBool test_4 = GALGAS_bool (kIsStrictSup, var_formalParametersList.reader_length (SOURCE_FILE_AT_LINE (68)).objectCompare (GALGAS_uint ((uint32_t) 1U))).boolEnum () ;
      if (kBoolTrue == test_4) {
        temp_3 = GALGAS_string ("s") ;
      }else if (kBoolFalse == test_4) {
        temp_3 = GALGAS_string::makeEmptyString () ;
      }
      GALGAS_location location_5 (enumerator_2730.current_mLabelName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_5, enumerator_2730.current_mFormalArgumentList (HERE).reader_length (SOURCE_FILE_AT_LINE (62)).reader_string (SOURCE_FILE_AT_LINE (62)).operator_concat (GALGAS_string (" formal parameter") COMMA_SOURCE_FILE_AT_LINE (62)).operator_concat (temp_1 COMMA_SOURCE_FILE_AT_LINE (63)).operator_concat (GALGAS_string (" declared here, but declaration at ") COMMA_SOURCE_FILE_AT_LINE (64)).operator_concat (constinArgument_inNonterminalSymbolLabelMapForGrammarAnalysis.reader_locationForKey (enumerator_2730.current_mLabelName (HERE).reader_string (SOURCE_FILE_AT_LINE (66)), inCompiler COMMA_SOURCE_FILE_AT_LINE (66)).reader_locationString (inCompiler COMMA_SOURCE_FILE_AT_LINE (66)) COMMA_SOURCE_FILE_AT_LINE (65)).operator_concat (GALGAS_string (" names ") COMMA_SOURCE_FILE_AT_LINE (66)).operator_concat (var_formalParametersList.reader_length (SOURCE_FILE_AT_LINE (67)).reader_string (SOURCE_FILE_AT_LINE (67)) COMMA_SOURCE_FILE_AT_LINE (67)).operator_concat (GALGAS_string (" parameter") COMMA_SOURCE_FILE_AT_LINE (67)).operator_concat (temp_3 COMMA_SOURCE_FILE_AT_LINE (67)) COMMA_SOURCE_FILE_AT_LINE (62)) ;
    }else if (kBoolFalse == test_0) {
      cEnumerator_formalParameterListAST enumerator_3513 (enumerator_2730.current_mFormalArgumentList (HERE), kEnumeration_up) ;
      cEnumerator_signatureForGrammarAnalysis enumerator_3535 (var_formalParametersList, kEnumeration_up) ;
      while (enumerator_3513.hasCurrentObject () && enumerator_3535.hasCurrentObject ()) {
        const enumGalgasBool test_6 = GALGAS_bool (kIsNotEqual, enumerator_3535.current_mFormalArgumentPassingModeForGrammarAnalysis (HERE).objectCompare (enumerator_3513.current_mFormalArgumentPassingMode (HERE))).boolEnum () ;
        if (kBoolTrue == test_6) {
          GALGAS_location location_7 (enumerator_3535.current_mGalgasTypeNameForGrammarAnalysis (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_7, GALGAS_string (" this formal parameter is declared with ").operator_concat (categoryReader_formalArgumentString (enumerator_3535.current_mFormalArgumentPassingModeForGrammarAnalysis (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (74)) COMMA_SOURCE_FILE_AT_LINE (73)).operator_concat (GALGAS_string (" passing mode, but declaration at ") COMMA_SOURCE_FILE_AT_LINE (74)).operator_concat (constinArgument_inNonterminalSymbolLabelMapForGrammarAnalysis.reader_locationForKey (enumerator_2730.current_mLabelName (HERE).reader_string (SOURCE_FILE_AT_LINE (76)), inCompiler COMMA_SOURCE_FILE_AT_LINE (76)).reader_locationString (inCompiler COMMA_SOURCE_FILE_AT_LINE (76)) COMMA_SOURCE_FILE_AT_LINE (75)).operator_concat (GALGAS_string (" is declared with ") COMMA_SOURCE_FILE_AT_LINE (76)).operator_concat (categoryReader_formalArgumentString (enumerator_3513.current_mFormalArgumentPassingMode (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (77)) COMMA_SOURCE_FILE_AT_LINE (77)).operator_concat (GALGAS_string (" passing mode") COMMA_SOURCE_FILE_AT_LINE (77)) COMMA_SOURCE_FILE_AT_LINE (72)) ;
        }
        const enumGalgasBool test_8 = GALGAS_bool (kIsNotEqual, enumerator_3535.current_mGalgasTypeNameForGrammarAnalysis (HERE).reader_string (SOURCE_FILE_AT_LINE (79)).objectCompare (enumerator_3513.current_mFormalArgumentTypeName (HERE).reader_string (SOURCE_FILE_AT_LINE (79)))).boolEnum () ;
        if (kBoolTrue == test_8) {
          GALGAS_location location_9 (enumerator_3535.current_mGalgasTypeNameForGrammarAnalysis (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_9, GALGAS_string (" this formal parameter is declared of '@").operator_concat (enumerator_3535.current_mGalgasTypeNameForGrammarAnalysis (HERE).reader_string (SOURCE_FILE_AT_LINE (81)) COMMA_SOURCE_FILE_AT_LINE (81)).operator_concat (GALGAS_string ("' type, but declaration at ") COMMA_SOURCE_FILE_AT_LINE (82)).operator_concat (constinArgument_inNonterminalSymbolLabelMapForGrammarAnalysis.reader_locationForKey (enumerator_2730.current_mLabelName (HERE).reader_string (SOURCE_FILE_AT_LINE (84)), inCompiler COMMA_SOURCE_FILE_AT_LINE (84)).reader_locationString (inCompiler COMMA_SOURCE_FILE_AT_LINE (84)) COMMA_SOURCE_FILE_AT_LINE (83)).operator_concat (GALGAS_string (" is declared with '@") COMMA_SOURCE_FILE_AT_LINE (84)).operator_concat (enumerator_3513.current_mFormalArgumentTypeName (HERE).reader_string (SOURCE_FILE_AT_LINE (85)) COMMA_SOURCE_FILE_AT_LINE (85)).operator_concat (GALGAS_string ("' type") COMMA_SOURCE_FILE_AT_LINE (85)) COMMA_SOURCE_FILE_AT_LINE (80)) ;
        }
        enumerator_3513.gotoNextObject () ;
        enumerator_3535.gotoNextObject () ;
      }
    }
    enumerator_2730.gotoNextObject () ;
  }
  cEnumerator_nonterminalSymbolLabelMapForGrammarAnalysis enumerator_4704 (constinArgument_inNonterminalSymbolLabelMapForGrammarAnalysis, kEnumeration_up) ;
  while (enumerator_4704.hasCurrentObject ()) {
    const enumGalgasBool test_10 = var_labelStringSet.reader_hasKey (enumerator_4704.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (92)) COMMA_SOURCE_FILE_AT_LINE (92)).operator_not (SOURCE_FILE_AT_LINE (92)).boolEnum () ;
    if (kBoolTrue == test_10) {
      inCompiler->emitSemanticError (constinArgument_inNonTerminalLocation, GALGAS_string ("this non terminal does not declare the '").operator_concat (enumerator_4704.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (94)) COMMA_SOURCE_FILE_AT_LINE (94)).operator_concat (GALGAS_string ("' label, but declaration at ") COMMA_SOURCE_FILE_AT_LINE (94)).operator_concat (constinArgument_inOriginalNonTerminalLocation.reader_locationString (inCompiler COMMA_SOURCE_FILE_AT_LINE (95)) COMMA_SOURCE_FILE_AT_LINE (94)).operator_concat (GALGAS_string (" does") COMMA_SOURCE_FILE_AT_LINE (95)) COMMA_SOURCE_FILE_AT_LINE (93)) ;
    }
    enumerator_4704.gotoNextObject () ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                   Routine 'handleNonTerminalDeclarations'                   *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_handleNonTerminalDeclarations (GALGAS_nonTerminalSymbolMapForGrammarAnalysis & ioArgument_ioNonTerminalMapForGrammarAnalysis,
                                            const GALGAS_nonterminalDeclarationListAST constinArgument_inNonterminalDeclarationList,
                                            C_Compiler * inCompiler
                                            COMMA_UNUSED_LOCATION_ARGS) {
  cEnumerator_nonterminalDeclarationListAST enumerator_5315 (constinArgument_inNonterminalDeclarationList, kEnumeration_up) ;
  while (enumerator_5315.hasCurrentObject ()) {
    // index 1: attribute 'mNonTerminalIndex', type @uint
    // index 2: attribute 'mNonterminalSymbolParametersMap', type @nonterminalSymbolLabelMapForGrammarAnalysis
    cMapElement_nonTerminalSymbolMapForGrammarAnalysis * objectArray_5327 = (cMapElement_nonTerminalSymbolMapForGrammarAnalysis *) ioArgument_ioNonTerminalMapForGrammarAnalysis.readWriteAccessForWithInstruction_hasKey (inCompiler, enumerator_5315.current_mNonterminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (108)) COMMA_SOURCE_FILE_AT_LINE (108)) ;
    if (NULL != objectArray_5327) {
        macroValidSharedObject (objectArray_5327, cMapElement_nonTerminalSymbolMapForGrammarAnalysis) ;
      {
      routine_checkLabelMap (enumerator_5315.current_mNonterminalName (HERE).reader_location (SOURCE_FILE_AT_LINE (110)), enumerator_5315.current_mLabels (HERE), ioArgument_ioNonTerminalMapForGrammarAnalysis.reader_locationForKey (enumerator_5315.current_mNonterminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (112)), inCompiler COMMA_SOURCE_FILE_AT_LINE (112)), objectArray_5327->mAttribute_mNonterminalSymbolParametersMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (109)) ;
      }
    }else{
      {
      ioArgument_ioNonTerminalMapForGrammarAnalysis.modifier_insertKey (enumerator_5315.current_mNonterminalName (HERE), ioArgument_ioNonTerminalMapForGrammarAnalysis.reader_count (SOURCE_FILE_AT_LINE (118)), function_transformLabelMap (enumerator_5315.current_mLabels (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (119)), inCompiler COMMA_SOURCE_FILE_AT_LINE (116)) ;
      }
    }
    enumerator_5315.gotoNextObject () ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//             Routine 'handleNonTerminalDeclarationsFromRuleList'             *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_handleNonTerminalDeclarationsFromRuleList (GALGAS_nonTerminalSymbolMapForGrammarAnalysis & ioArgument_ioNonTerminalMapForGrammarAnalysis,
                                                        const GALGAS_syntaxRuleListAST constinArgument_inRuleList,
                                                        C_Compiler * inCompiler
                                                        COMMA_UNUSED_LOCATION_ARGS) {
  cEnumerator_syntaxRuleListAST enumerator_6114 (constinArgument_inRuleList, kEnumeration_up) ;
  while (enumerator_6114.hasCurrentObject ()) {
    GALGAS_nonTerminalLabelListAST var_nonTerminalLabelListAST = GALGAS_nonTerminalLabelListAST::constructor_emptyList (SOURCE_FILE_AT_LINE (132)) ;
    cEnumerator_syntaxRuleLabelListAST enumerator_6207 (enumerator_6114.current_mLabelList (HERE), kEnumeration_up) ;
    while (enumerator_6207.hasCurrentObject ()) {
      var_nonTerminalLabelListAST.addAssign_operation (enumerator_6207.current_mLabelName (HERE), enumerator_6207.current_mFormalArguments (HERE), enumerator_6207.current_mEndOfArgumentLocation (HERE) COMMA_SOURCE_FILE_AT_LINE (134)) ;
      enumerator_6207.gotoNextObject () ;
    }
    // index 1: attribute 'mNonTerminalIndex', type @uint
    // index 2: attribute 'mNonterminalSymbolParametersMap', type @nonterminalSymbolLabelMapForGrammarAnalysis
    cMapElement_nonTerminalSymbolMapForGrammarAnalysis * objectArray_6357 = (cMapElement_nonTerminalSymbolMapForGrammarAnalysis *) ioArgument_ioNonTerminalMapForGrammarAnalysis.readWriteAccessForWithInstruction_hasKey (inCompiler, enumerator_6114.current_mNonterminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (140)) COMMA_SOURCE_FILE_AT_LINE (140)) ;
    if (NULL != objectArray_6357) {
        macroValidSharedObject (objectArray_6357, cMapElement_nonTerminalSymbolMapForGrammarAnalysis) ;
      {
      routine_checkLabelMap (enumerator_6114.current_mNonterminalName (HERE).reader_location (SOURCE_FILE_AT_LINE (142)), var_nonTerminalLabelListAST, ioArgument_ioNonTerminalMapForGrammarAnalysis.reader_locationForKey (enumerator_6114.current_mNonterminalName (HERE).reader_string (SOURCE_FILE_AT_LINE (144)), inCompiler COMMA_SOURCE_FILE_AT_LINE (144)), objectArray_6357->mAttribute_mNonterminalSymbolParametersMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (141)) ;
      }
    }else{
      {
      ioArgument_ioNonTerminalMapForGrammarAnalysis.modifier_insertKey (enumerator_6114.current_mNonterminalName (HERE), ioArgument_ioNonTerminalMapForGrammarAnalysis.reader_count (SOURCE_FILE_AT_LINE (150)), function_transformLabelMap (var_nonTerminalLabelListAST, inCompiler COMMA_SOURCE_FILE_AT_LINE (151)), inCompiler COMMA_SOURCE_FILE_AT_LINE (148)) ;
      }
    }
    enumerator_6114.gotoNextObject () ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                     Routine 'transformInstructionList'                      *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_transformInstructionList (const GALGAS_syntaxInstructionList constinArgument_inInstructionList,
                                       GALGAS_terminalSymbolsMapForGrammarAnalysis & ioArgument_ioActuallyUsedTerminalSymbolMap,
                                       const GALGAS_nonTerminalSymbolMapForGrammarAnalysis constinArgument_inNonTerminalSymbolMap,
                                       GALGAS_uint & ioArgument_ioAddedNonTerminalIndex,
                                       GALGAS_syntaxInstructionListForGrammarAnalysis & ioArgument_ioSyntaxInstructionList,
                                       C_Compiler * inCompiler
                                       COMMA_UNUSED_LOCATION_ARGS) {
  cEnumerator_syntaxInstructionList enumerator_8311 (constinArgument_inInstructionList, kEnumeration_up) ;
  while (enumerator_8311.hasCurrentObject ()) {
    callCategoryMethod_transformInstruction ((const cPtr_syntaxInstructionAST *) enumerator_8311.current_mInstruction (HERE).ptr (), ioArgument_ioActuallyUsedTerminalSymbolMap, constinArgument_inNonTerminalSymbolMap, ioArgument_ioAddedNonTerminalIndex, ioArgument_ioSyntaxInstructionList, inCompiler COMMA_SOURCE_FILE_AT_LINE (188)) ;
    enumerator_8311.gotoNextObject () ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                           Routine 'buildRuleList'                           *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_buildRuleList (const GALGAS_nonTerminalSymbolMapForGrammarAnalysis constinArgument_inNonTerminalMapForGrammarAnalysis,
                            const GALGAS_lstring constinArgument_inSyntaxComponentName,
                            const GALGAS_syntaxRuleListAST constinArgument_inRuleList,
                            GALGAS_terminalSymbolsMapForGrammarAnalysis & ioArgument_ioActuallyUsedTerminalSymbolMap,
                            GALGAS_syntaxComponentListForGrammarAnalysis & ioArgument_ioSyntaxComponentListForGrammarAnalysis,
                            GALGAS_uint & ioArgument_ioAddedNonTerminalCount,
                            C_Compiler * inCompiler
                            COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_productionRuleListForGrammarAnalysis var_productionRulesList = GALGAS_productionRuleListForGrammarAnalysis::constructor_emptyList (SOURCE_FILE_AT_LINE (381)) ;
  cEnumerator_syntaxRuleListAST enumerator_15394 (constinArgument_inRuleList, kEnumeration_up) ;
  while (enumerator_15394.hasCurrentObject ()) {
    GALGAS_uint var_nonTerminalIndex ;
    GALGAS_nonterminalSymbolLabelMapForGrammarAnalysis var_nonterminalSymbolParametersMap ;
    constinArgument_inNonTerminalMapForGrammarAnalysis.method_searchKey (enumerator_15394.current_mNonterminalName (HERE), var_nonTerminalIndex, var_nonterminalSymbolParametersMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (385)) ;
    GALGAS_syntaxInstructionList var_parsedSyntaxInstructionList ;
    GALGAS_lstring joker_15756_0 ; // Joker input parameter
    GALGAS_formalParameterListAST joker_15759_0 ; // Joker input parameter
    GALGAS_location joker_15762_0 ; // Joker input parameter
    GALGAS_location joker_15794_0 ; // Joker input parameter
    enumerator_15394.current_mLabelList (HERE).method_first (joker_15756_0, joker_15759_0, joker_15762_0, var_parsedSyntaxInstructionList, joker_15794_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (387)) ;
    GALGAS_syntaxInstructionListForGrammarAnalysis var_instructionList = GALGAS_syntaxInstructionListForGrammarAnalysis::constructor_emptyList (SOURCE_FILE_AT_LINE (389)) ;
    {
    routine_transformInstructionList (var_parsedSyntaxInstructionList, ioArgument_ioActuallyUsedTerminalSymbolMap, constinArgument_inNonTerminalMapForGrammarAnalysis, ioArgument_ioAddedNonTerminalCount, var_instructionList, inCompiler COMMA_SOURCE_FILE_AT_LINE (390)) ;
    }
    var_productionRulesList.addAssign_operation (enumerator_15394.current_mNonterminalName (HERE), var_nonTerminalIndex, var_instructionList, var_productionRulesList.reader_length (SOURCE_FILE_AT_LINE (402)) COMMA_SOURCE_FILE_AT_LINE (398)) ;
    enumerator_15394.gotoNextObject () ;
  }
  ioArgument_ioSyntaxComponentListForGrammarAnalysis.addAssign_operation (var_productionRulesList, constinArgument_inSyntaxComponentName COMMA_SOURCE_FILE_AT_LINE (405)) ;
}


//-----------------------------------------------------------------------------*
//                                                                             *
//              Class for element of '@nonTerminalToAddList' list              *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_nonTerminalToAddList : public cCollectionElement {
  public : GALGAS_nonTerminalToAddList_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_nonTerminalToAddList (const GALGAS_string & in_mSyntaxComponentName,
                                                    const GALGAS_uint & in_mNonTerminalToAddCount
                                                    COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_nonTerminalToAddList::cCollectionElement_nonTerminalToAddList (const GALGAS_string & in_mSyntaxComponentName,
                                                                                  const GALGAS_uint & in_mNonTerminalToAddCount
                                                                                  COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mSyntaxComponentName, in_mNonTerminalToAddCount) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_nonTerminalToAddList::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_nonTerminalToAddList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_nonTerminalToAddList (mObject.mAttribute_mSyntaxComponentName, mObject.mAttribute_mNonTerminalToAddCount COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_nonTerminalToAddList::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mSyntaxComponentName" ":" ;
  mObject.mAttribute_mSyntaxComponentName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mNonTerminalToAddCount" ":" ;
  mObject.mAttribute_mNonTerminalToAddCount.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_nonTerminalToAddList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_nonTerminalToAddList * operand = (cCollectionElement_nonTerminalToAddList *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_nonTerminalToAddList) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList::GALGAS_nonTerminalToAddList (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList::GALGAS_nonTerminalToAddList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList GALGAS_nonTerminalToAddList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_nonTerminalToAddList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList GALGAS_nonTerminalToAddList::constructor_listWithValue (const GALGAS_string & inOperand0,
                                                                                    const GALGAS_uint & inOperand1
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_nonTerminalToAddList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_nonTerminalToAddList::makeAttributesFromObjects (attributes, inOperand0, inOperand1 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_nonTerminalToAddList::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                             const GALGAS_string & in_mSyntaxComponentName,
                                                             const GALGAS_uint & in_mNonTerminalToAddCount
                                                             COMMA_LOCATION_ARGS) {
  cCollectionElement_nonTerminalToAddList * p = NULL ;
  macroMyNew (p, cCollectionElement_nonTerminalToAddList (in_mSyntaxComponentName,
                                                          in_mNonTerminalToAddCount COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_nonTerminalToAddList::addAssign_operation (const GALGAS_string & inOperand0,
                                                       const GALGAS_uint & inOperand1
                                                       COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_nonTerminalToAddList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_nonTerminalToAddList::modifier_insertAtIndex (const GALGAS_string inOperand0,
                                                          const GALGAS_uint inOperand1,
                                                          const GALGAS_uint inInsertionIndex,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_nonTerminalToAddList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_nonTerminalToAddList::modifier_removeAtIndex (GALGAS_string & outOperand0,
                                                          GALGAS_uint & outOperand1,
                                                          const GALGAS_uint inRemoveIndex,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_nonTerminalToAddList * p = (cCollectionElement_nonTerminalToAddList *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
      outOperand1.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_nonTerminalToAddList) ;
      outOperand0 = p->mObject.mAttribute_mSyntaxComponentName ;
      outOperand1 = p->mObject.mAttribute_mNonTerminalToAddCount ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_nonTerminalToAddList::modifier_popFirst (GALGAS_string & outOperand0,
                                                     GALGAS_uint & outOperand1,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_nonTerminalToAddList * p = (cCollectionElement_nonTerminalToAddList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_nonTerminalToAddList) ;
    outOperand0 = p->mObject.mAttribute_mSyntaxComponentName ;
    outOperand1 = p->mObject.mAttribute_mNonTerminalToAddCount ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_nonTerminalToAddList::modifier_popLast (GALGAS_string & outOperand0,
                                                    GALGAS_uint & outOperand1,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_nonTerminalToAddList * p = (cCollectionElement_nonTerminalToAddList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_nonTerminalToAddList) ;
    outOperand0 = p->mObject.mAttribute_mSyntaxComponentName ;
    outOperand1 = p->mObject.mAttribute_mNonTerminalToAddCount ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_nonTerminalToAddList::method_first (GALGAS_string & outOperand0,
                                                GALGAS_uint & outOperand1,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_nonTerminalToAddList * p = (cCollectionElement_nonTerminalToAddList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_nonTerminalToAddList) ;
    outOperand0 = p->mObject.mAttribute_mSyntaxComponentName ;
    outOperand1 = p->mObject.mAttribute_mNonTerminalToAddCount ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_nonTerminalToAddList::method_last (GALGAS_string & outOperand0,
                                               GALGAS_uint & outOperand1,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_nonTerminalToAddList * p = (cCollectionElement_nonTerminalToAddList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_nonTerminalToAddList) ;
    outOperand0 = p->mObject.mAttribute_mSyntaxComponentName ;
    outOperand1 = p->mObject.mAttribute_mNonTerminalToAddCount ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList GALGAS_nonTerminalToAddList::operator_concat (const GALGAS_nonTerminalToAddList & inOperand
                                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_nonTerminalToAddList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList GALGAS_nonTerminalToAddList::add_operation (const GALGAS_nonTerminalToAddList & inOperand,
                                                                        C_Compiler * /* inCompiler */
                                                                        COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_nonTerminalToAddList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList GALGAS_nonTerminalToAddList::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  GALGAS_nonTerminalToAddList result = GALGAS_nonTerminalToAddList::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList GALGAS_nonTerminalToAddList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_LOCATION_ARGS) const {
  GALGAS_nonTerminalToAddList result = GALGAS_nonTerminalToAddList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_nonTerminalToAddList::dotAssign_operation (const GALGAS_nonTerminalToAddList inOperand
                                                       COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_string GALGAS_nonTerminalToAddList::reader_mSyntaxComponentNameAtIndex (const GALGAS_uint & inIndex,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_nonTerminalToAddList * p = (cCollectionElement_nonTerminalToAddList *) attributes.ptr () ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_nonTerminalToAddList) ;
    result = p->mObject.mAttribute_mSyntaxComponentName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_nonTerminalToAddList::reader_mNonTerminalToAddCountAtIndex (const GALGAS_uint & inIndex,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_nonTerminalToAddList * p = (cCollectionElement_nonTerminalToAddList *) attributes.ptr () ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_nonTerminalToAddList) ;
    result = p->mObject.mAttribute_mNonTerminalToAddCount ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_nonTerminalToAddList::cEnumerator_nonTerminalToAddList (const GALGAS_nonTerminalToAddList & inEnumeratedObject,
                                                                    const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList_2E_element cEnumerator_nonTerminalToAddList::current (LOCATION_ARGS) const {
  const cCollectionElement_nonTerminalToAddList * p = (const cCollectionElement_nonTerminalToAddList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_nonTerminalToAddList) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_string cEnumerator_nonTerminalToAddList::current_mSyntaxComponentName (LOCATION_ARGS) const {
  const cCollectionElement_nonTerminalToAddList * p = (const cCollectionElement_nonTerminalToAddList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_nonTerminalToAddList) ;
  return p->mObject.mAttribute_mSyntaxComponentName ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint cEnumerator_nonTerminalToAddList::current_mNonTerminalToAddCount (LOCATION_ARGS) const {
  const cCollectionElement_nonTerminalToAddList * p = (const cCollectionElement_nonTerminalToAddList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_nonTerminalToAddList) ;
  return p->mObject.mAttribute_mNonTerminalToAddCount ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                         @nonTerminalToAddList type                          *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_nonTerminalToAddList ("nonTerminalToAddList",
                                             NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_nonTerminalToAddList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_nonTerminalToAddList ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_nonTerminalToAddList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_nonTerminalToAddList (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList GALGAS_nonTerminalToAddList::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_nonTerminalToAddList result ;
  const GALGAS_nonTerminalToAddList * p = (const GALGAS_nonTerminalToAddList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_nonTerminalToAddList *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("nonTerminalToAddList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                   Filewrapper 'grammarGenerationTemplate'                   *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_grammarGenerationTemplate_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_grammarGenerationTemplate_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_grammarGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_grammarGenerationTemplate_0,
  0,
  gWrapperAllDirectories_grammarGenerationTemplate_0
) ;


//-----------------------------------------------------------------------------*
//                                                                             *
//     Filewrapper template 'grammarGenerationTemplate grammarZone2Header'     *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_grammarGenerationTemplate_grammarZone_32_Header (C_Compiler * /* inCompiler */,
                                                                                   const GALGAS_grammarComponentAST & in_GRAMMAR_5F_COMPONENT_5F_ROOT
                                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "#ifndef GRAMMAR_" ;
  result << in_GRAMMAR_5F_COMPONENT_5F_ROOT.reader_mGrammarName (SOURCE_FILE_AT_LINE (1)).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (1)).stringValue () ;
  result << "_HAS_BEEN_DEFINED\n"
    "#define GRAMMAR_" ;
  result << in_GRAMMAR_5F_COMPONENT_5F_ROOT.reader_mGrammarName (SOURCE_FILE_AT_LINE (2)).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (2)).stringValue () ;
  result << "_HAS_BEEN_DEFINED\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n" ;
  GALGAS_uint index_338_ (0) ;
  if (in_GRAMMAR_5F_COMPONENT_5F_ROOT.reader_mSyntaxComponents (SOURCE_FILE_AT_LINE (6)).isValid ()) {
    cEnumerator_lstringlist enumerator_338 (in_GRAMMAR_5F_COMPONENT_5F_ROOT.reader_mSyntaxComponents (SOURCE_FILE_AT_LINE (6)), kEnumeration_up) ;
    while (enumerator_338.hasCurrentObject ()) {
      result << "#include \"" ;
      result << enumerator_338.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (7)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (7)).stringValue () ;
      result << ".h\"\n" ;
      index_338_.increment () ;
      enumerator_338.gotoNextObject () ;
    }
  }
  result << "\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//     Filewrapper template 'grammarGenerationTemplate grammarZone3Header'     *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_grammarGenerationTemplate_grammarZone_33_Header (C_Compiler * inCompiler,
                                                                                   const GALGAS_string & in_LEXIQUE_5F_IDENTIFIER,
                                                                                   const GALGAS_grammarComponentAST & in_GRAMMAR_5F_COMPONENT_5F_ROOT,
                                                                                   const GALGAS_nonTerminalSymbolMapForGrammarAnalysis & in_NON_5F_TERMINAL_5F_MAP,
                                                                                   const GALGAS_nonTerminalToAddList & in_ADDED_5F_NON_5F_TERMINAL_5F_LIST,
                                                                                   const GALGAS_bool & in_HAS_5F_INDEXING
                                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  uint32_t columnMarker = 0 ;
  result << "//-----------------------------------------------------------------------------*\n"
    "\n"
    "class cGrammar_" ;
  result << in_GRAMMAR_5F_COMPONENT_5F_ROOT.reader_mGrammarName (SOURCE_FILE_AT_LINE (3)).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (3)).stringValue () ;
  result << " : " ;
  columnMarker = result.currentColumn () ;
  GALGAS_uint index_225_ (0) ;
  if (in_GRAMMAR_5F_COMPONENT_5F_ROOT.reader_mSyntaxComponents (SOURCE_FILE_AT_LINE (4)).isValid ()) {
    cEnumerator_lstringlist enumerator_225 (in_GRAMMAR_5F_COMPONENT_5F_ROOT.reader_mSyntaxComponents (SOURCE_FILE_AT_LINE (4)), kEnumeration_up) ;
    while (enumerator_225.hasCurrentObject ()) {
      result << "public cParser_" ;
      result << enumerator_225.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (5)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (5)).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (5)).stringValue () ;
      if (enumerator_225.hasNextObject ()) {
        result << ",\n" ;
        result.appendSpacesUntilColumn (columnMarker) ;
      }
      index_225_.increment () ;
      enumerator_225.gotoNextObject () ;
    }
  }
  result << " {\n" ;
  GALGAS_uint index_375_ (0) ;
  if (in_NON_5F_TERMINAL_5F_MAP.isValid ()) {
    cEnumerator_nonTerminalSymbolMapForGrammarAnalysis enumerator_375 (in_NON_5F_TERMINAL_5F_MAP, kEnumeration_up) ;
    while (enumerator_375.hasCurrentObject ()) {
      result << "//------------------------------------- '" ;
      result << enumerator_375.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (11)).stringValue () ;
      result << "' non terminal\n"
        "//--- 'parse' label\n"
        "  public : virtual void nt_" ;
      result << enumerator_375.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (14)).stringValue () ;
      result << "_parse (" ;
      columnMarker = result.currentColumn () ;
      const enumGalgasBool test_0 = in_GRAMMAR_5F_COMPONENT_5F_ROOT.mAttribute_mHasTranslateFeature.boolEnum () ;
      if (kBoolTrue == test_0) {
        result << "C_String & " ;
        result << function_syntaxDirectedTranslationResultVarName (inCompiler COMMA_SOURCE_FILE_AT_LINE (16)).stringValue () ;
        result << ",\n" ;
        result.appendSpacesUntilColumn (columnMarker) ;
      }else if (kBoolFalse == test_0) {
      }
      result << "C_Lexique_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << " * inCompiler) ;\n"
        "\n" ;
      const enumGalgasBool test_1 = in_HAS_5F_INDEXING.boolEnum () ;
      if (kBoolTrue == test_1) {
        result << "//--- indexing\n"
          "  public : virtual void nt_" ;
        result << enumerator_375.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (22)).stringValue () ;
        result << "_indexing (C_Lexique_" ;
        result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
        result << " * inCompiler) ;\n"
          "\n" ;
      }else if (kBoolFalse == test_1) {
      }
      GALGAS_uint index_1027_ (0) ;
      if (enumerator_375.current_mNonterminalSymbolParametersMap (HERE).isValid ()) {
        cEnumerator_nonterminalSymbolLabelMapForGrammarAnalysis enumerator_1027 (enumerator_375.current_mNonterminalSymbolParametersMap (HERE), kEnumeration_up) ;
        while (enumerator_1027.hasCurrentObject ()) {
          result << "//----------- '" ;
          result << enumerator_1027.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (25)).stringValue () ;
          result << "' label\n"
            "  public : virtual void nt_" ;
          result << enumerator_375.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (27)).stringValue () ;
          result << "_" ;
          result << enumerator_1027.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (27)).stringValue () ;
          result << " (" ;
          columnMarker = result.currentColumn () ;
          GALGAS_uint index_1276_IDX (0) ;
          if (enumerator_1027.current_mFormalParametersList (HERE).isValid ()) {
            cEnumerator_signatureForGrammarAnalysis enumerator_1276 (enumerator_1027.current_mFormalParametersList (HERE), kEnumeration_up) ;
            while (enumerator_1276.hasCurrentObject ()) {
              const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, enumerator_1276.current_mFormalArgumentPassingModeForGrammarAnalysis (HERE).objectCompare (GALGAS_formalArgumentPassingModeAST::constructor_argumentConstantIn (SOURCE_FILE_AT_LINE (29)))).boolEnum () ;
              if (kBoolTrue == test_2) {
                result << "const GALGAS_" ;
                result << enumerator_1276.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (30)).stringValue () ;
                result << " inArgument" ;
                result << index_1276_IDX.reader_string (SOURCE_FILE_AT_LINE (30)).stringValue () ;
              }else if (kBoolFalse == test_2) {
                const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, enumerator_1276.current_mFormalArgumentPassingModeForGrammarAnalysis (HERE).objectCompare (GALGAS_formalArgumentPassingModeAST::constructor_argumentInOut (SOURCE_FILE_AT_LINE (31)))).boolEnum () ;
                if (kBoolTrue == test_3) {
                  result << "GALGAS_" ;
                  result << enumerator_1276.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (32)).stringValue () ;
                  result << " & ioArgument" ;
                  result << index_1276_IDX.reader_string (SOURCE_FILE_AT_LINE (32)).stringValue () ;
                }else if (kBoolFalse == test_3) {
                  const enumGalgasBool test_4 = GALGAS_bool (kIsEqual, enumerator_1276.current_mFormalArgumentPassingModeForGrammarAnalysis (HERE).objectCompare (GALGAS_formalArgumentPassingModeAST::constructor_argumentOut (SOURCE_FILE_AT_LINE (33)))).boolEnum () ;
                  if (kBoolTrue == test_4) {
                    result << "GALGAS_" ;
                    result << enumerator_1276.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (34)).stringValue () ;
                    result << " & outArgument" ;
                    result << index_1276_IDX.reader_string (SOURCE_FILE_AT_LINE (34)).stringValue () ;
                  }else if (kBoolFalse == test_4) {
                    result << "GALGAS_" ;
                    result << enumerator_1276.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (36)).stringValue () ;
                    result << " inArgument" ;
                    result << index_1276_IDX.reader_string (SOURCE_FILE_AT_LINE (36)).stringValue () ;
                  }
                }
              }
              result << ",\n" ;
              result.appendSpacesUntilColumn (columnMarker) ;
              index_1276_IDX.increment () ;
              enumerator_1276.gotoNextObject () ;
            }
          }
          const enumGalgasBool test_5 = in_GRAMMAR_5F_COMPONENT_5F_ROOT.mAttribute_mHasTranslateFeature.boolEnum () ;
          if (kBoolTrue == test_5) {
            result << "C_String & " ;
            result << function_syntaxDirectedTranslationResultVarName (inCompiler COMMA_SOURCE_FILE_AT_LINE (41)).stringValue () ;
            result << ",\n" ;
            result.appendSpacesUntilColumn (columnMarker) ;
          }else if (kBoolFalse == test_5) {
          }
          result << "C_Lexique_" ;
          result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
          result << " * inCompiler) ;\n"
            "\n" ;
          const enumGalgasBool test_6 = GALGAS_bool (kIsEqual, in_GRAMMAR_5F_COMPONENT_5F_ROOT.reader_mStartSymbolName (SOURCE_FILE_AT_LINE (45)).reader_string (SOURCE_FILE_AT_LINE (45)).objectCompare (enumerator_375.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (45)))).boolEnum () ;
          if (kBoolTrue == test_6) {
            result << "//--- Start symbol\n"
              "  public : static void _performSourceFileParsing_" ;
            result << enumerator_1027.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (47)).stringValue () ;
            result << " (" ;
            columnMarker = result.currentColumn () ;
            result << "C_Compiler * inCompiler,\n" ;
            result.appendSpacesUntilColumn (columnMarker) ;
            const enumGalgasBool test_7 = in_GRAMMAR_5F_COMPONENT_5F_ROOT.mAttribute_mHasTranslateFeature.boolEnum () ;
            if (kBoolTrue == test_7) {
              result << "C_String & " ;
              result << function_syntaxDirectedTranslationResultVarName (inCompiler COMMA_SOURCE_FILE_AT_LINE (50)).stringValue () ;
              result << ",\n" ;
              result.appendSpacesUntilColumn (columnMarker) ;
            }else if (kBoolFalse == test_7) {
            }
            result << "GALGAS_lstring inFileName" ;
            GALGAS_uint index_2801_IDX (0) ;
            if (enumerator_1027.current_mFormalParametersList (HERE).isValid ()) {
              cEnumerator_signatureForGrammarAnalysis enumerator_2801 (enumerator_1027.current_mFormalParametersList (HERE), kEnumeration_up) ;
              while (enumerator_2801.hasCurrentObject ()) {
                result << ",\n" ;
                result.appendSpacesUntilColumn (columnMarker) ;
                const enumGalgasBool test_8 = GALGAS_bool (kIsEqual, enumerator_2801.current_mFormalArgumentPassingModeForGrammarAnalysis (HERE).objectCompare (GALGAS_formalArgumentPassingModeAST::constructor_argumentConstantIn (SOURCE_FILE_AT_LINE (55)))).boolEnum () ;
                if (kBoolTrue == test_8) {
                  result << "const GALGAS_" ;
                  result << enumerator_2801.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (56)).stringValue () ;
                  result << " inArgument" ;
                  result << index_2801_IDX.reader_string (SOURCE_FILE_AT_LINE (56)).stringValue () ;
                }else if (kBoolFalse == test_8) {
                  const enumGalgasBool test_9 = GALGAS_bool (kIsEqual, enumerator_2801.current_mFormalArgumentPassingModeForGrammarAnalysis (HERE).objectCompare (GALGAS_formalArgumentPassingModeAST::constructor_argumentInOut (SOURCE_FILE_AT_LINE (57)))).boolEnum () ;
                  if (kBoolTrue == test_9) {
                    result << "GALGAS_" ;
                    result << enumerator_2801.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (58)).stringValue () ;
                    result << " & ioArgument" ;
                    result << index_2801_IDX.reader_string (SOURCE_FILE_AT_LINE (58)).stringValue () ;
                  }else if (kBoolFalse == test_9) {
                    const enumGalgasBool test_10 = GALGAS_bool (kIsEqual, enumerator_2801.current_mFormalArgumentPassingModeForGrammarAnalysis (HERE).objectCompare (GALGAS_formalArgumentPassingModeAST::constructor_argumentOut (SOURCE_FILE_AT_LINE (59)))).boolEnum () ;
                    if (kBoolTrue == test_10) {
                      result << "GALGAS_" ;
                      result << enumerator_2801.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (60)).stringValue () ;
                      result << " & outArgument" ;
                      result << index_2801_IDX.reader_string (SOURCE_FILE_AT_LINE (60)).stringValue () ;
                    }else if (kBoolFalse == test_10) {
                      result << "GALGAS_" ;
                      result << enumerator_2801.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (62)).stringValue () ;
                      result << " inArgument" ;
                      result << index_2801_IDX.reader_string (SOURCE_FILE_AT_LINE (62)).stringValue () ;
                    }
                  }
                }
                index_2801_IDX.increment () ;
                enumerator_2801.gotoNextObject () ;
              }
            }
            result << "\n" ;
            result.appendSpacesUntilColumn (columnMarker) ;
            result << "COMMA_LOCATION_ARGS) ;\n"
              "\n"
              "  public : static void _performSourceStringParsing_" ;
            result << enumerator_1027.current_lkey (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (66)).stringValue () ;
            result << " (" ;
            columnMarker = result.currentColumn () ;
            result << "C_Compiler * inCompiler,\n" ;
            result.appendSpacesUntilColumn (columnMarker) ;
            const enumGalgasBool test_11 = in_GRAMMAR_5F_COMPONENT_5F_ROOT.mAttribute_mHasTranslateFeature.boolEnum () ;
            if (kBoolTrue == test_11) {
              result << "C_String & " ;
              result << function_syntaxDirectedTranslationResultVarName (inCompiler COMMA_SOURCE_FILE_AT_LINE (69)).stringValue () ;
              result << ",\n" ;
              result.appendSpacesUntilColumn (columnMarker) ;
            }else if (kBoolFalse == test_11) {
            }
            result << "GALGAS_string inSourceString" ;
            GALGAS_uint index_4070_IDX (0) ;
            if (enumerator_1027.current_mFormalParametersList (HERE).isValid ()) {
              cEnumerator_signatureForGrammarAnalysis enumerator_4070 (enumerator_1027.current_mFormalParametersList (HERE), kEnumeration_up) ;
              while (enumerator_4070.hasCurrentObject ()) {
                result << ",\n" ;
                result.appendSpacesUntilColumn (columnMarker) ;
                const enumGalgasBool test_12 = GALGAS_bool (kIsEqual, enumerator_4070.current_mFormalArgumentPassingModeForGrammarAnalysis (HERE).objectCompare (GALGAS_formalArgumentPassingModeAST::constructor_argumentConstantIn (SOURCE_FILE_AT_LINE (74)))).boolEnum () ;
                if (kBoolTrue == test_12) {
                  result << "const GALGAS_" ;
                  result << enumerator_4070.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (75)).stringValue () ;
                  result << " inArgument" ;
                  result << index_4070_IDX.reader_string (SOURCE_FILE_AT_LINE (75)).stringValue () ;
                }else if (kBoolFalse == test_12) {
                  const enumGalgasBool test_13 = GALGAS_bool (kIsEqual, enumerator_4070.current_mFormalArgumentPassingModeForGrammarAnalysis (HERE).objectCompare (GALGAS_formalArgumentPassingModeAST::constructor_argumentInOut (SOURCE_FILE_AT_LINE (76)))).boolEnum () ;
                  if (kBoolTrue == test_13) {
                    result << "GALGAS_" ;
                    result << enumerator_4070.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (77)).stringValue () ;
                    result << " & ioArgument" ;
                    result << index_4070_IDX.reader_string (SOURCE_FILE_AT_LINE (77)).stringValue () ;
                  }else if (kBoolFalse == test_13) {
                    const enumGalgasBool test_14 = GALGAS_bool (kIsEqual, enumerator_4070.current_mFormalArgumentPassingModeForGrammarAnalysis (HERE).objectCompare (GALGAS_formalArgumentPassingModeAST::constructor_argumentOut (SOURCE_FILE_AT_LINE (78)))).boolEnum () ;
                    if (kBoolTrue == test_14) {
                      result << "GALGAS_" ;
                      result << enumerator_4070.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (79)).stringValue () ;
                      result << " & outArgument" ;
                      result << index_4070_IDX.reader_string (SOURCE_FILE_AT_LINE (79)).stringValue () ;
                    }else if (kBoolFalse == test_14) {
                      result << "GALGAS_" ;
                      result << enumerator_4070.current_mGalgasTypeNameForGrammarAnalysis (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (81)).stringValue () ;
                      result << " inArgument" ;
                      result << index_4070_IDX.reader_string (SOURCE_FILE_AT_LINE (81)).stringValue () ;
                    }
                  }
                }
                index_4070_IDX.increment () ;
                enumerator_4070.gotoNextObject () ;
              }
            }
            result << "\n" ;
            result.appendSpacesUntilColumn (columnMarker) ;
            result << "COMMA_LOCATION_ARGS) ;\n"
              "\n" ;
          }else if (kBoolFalse == test_6) {
          }
          index_1027_.increment () ;
          enumerator_1027.gotoNextObject () ;
        }
      }
      const enumGalgasBool test_15 = in_HAS_5F_INDEXING.operator_and (GALGAS_bool (kIsEqual, in_GRAMMAR_5F_COMPONENT_5F_ROOT.reader_mStartSymbolName (SOURCE_FILE_AT_LINE (88)).reader_string (SOURCE_FILE_AT_LINE (88)).objectCompare (enumerator_375.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (88)))) COMMA_SOURCE_FILE_AT_LINE (88)).boolEnum () ;
      if (kBoolTrue == test_15) {
        result << "//--- Start symbol indexing\n"
          "  public : static void performIndexing (" ;
        columnMarker = result.currentColumn () ;
        result << "C_Compiler * inCompiler,\n" ;
        result.appendSpacesUntilColumn (columnMarker) ;
        result << "const C_String & inSourceFilePath) ;\n"
          "\n" ;
      }else if (kBoolFalse == test_15) {
      }
      index_375_.increment () ;
      enumerator_375.gotoNextObject () ;
    }
  }
  GALGAS_uint index_5304_ (0) ;
  if (in_ADDED_5F_NON_5F_TERMINAL_5F_LIST.isValid ()) {
    cEnumerator_nonTerminalToAddList enumerator_5304 (in_ADDED_5F_NON_5F_TERMINAL_5F_LIST, kEnumeration_up) ;
    while (enumerator_5304.hasCurrentObject ()) {
      result << "  public : virtual int32_t select_" ;
      result << enumerator_5304.current_mSyntaxComponentName (HERE).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (96)).stringValue () ;
      result << "_" ;
      result << enumerator_5304.current_mNonTerminalToAddCount (HERE).reader_string (SOURCE_FILE_AT_LINE (96)).stringValue () ;
      result << " (C_Lexique_" ;
      result << in_LEXIQUE_5F_IDENTIFIER.stringValue () ;
      result << " *) ;\n" ;
      if (enumerator_5304.hasNextObject ()) {
        result << "\n" ;
      }
      index_5304_.increment () ;
      enumerator_5304.gotoNextObject () ;
    }
  }
  result << "} ;\n"
    "\n"
    "//-----------------------------------------------------------------------------*\n"
    "\n"
    "#endif\n" ;
  return GALGAS_string (result) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                       Routine 'parseGrammarComponent'                       *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_parseGrammarComponent (const GALGAS_lstring constinArgument_inSourceFile,
                                    GALGAS_parsedComponentStruct & ioArgument_ioParsedComponentStruct,
                                    GALGAS_grammarComponentAST & outArgument_outGrammarComponentRoot,
                                    C_Compiler * inCompiler
                                    COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outGrammarComponentRoot.drop () ; // Release 'out' argument
  GALGAS_string var_basename = constinArgument_inSourceFile.mAttribute_string.reader_lastPathComponent (SOURCE_FILE_AT_LINE (450)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (450)) ;
  const cMapElement_parsedGrammarComponentMap * objectArray_18101 = (const cMapElement_parsedGrammarComponentMap *) ioArgument_ioParsedComponentStruct.mAttribute_mParsedGrammarComponentMap.readAccessForWithInstruction_hasKey (var_basename) ;
  if (NULL != objectArray_18101) {
      macroValidSharedObject (objectArray_18101, cMapElement_parsedGrammarComponentMap) ;
    outArgument_outGrammarComponentRoot = objectArray_18101->mAttribute_mGrammarComponentRoot ;
  }else{
    C_String syntaxDirectedTranslationResult_18265 ;
    cGrammar_grammarLL_31_grammar::_performSourceFileParsing_ (inCompiler, syntaxDirectedTranslationResult_18265, constinArgument_inSourceFile, outArgument_outGrammarComponentRoot COMMA_SOURCE_FILE_AT_LINE (454)) ;
    {
    ioArgument_ioParsedComponentStruct.mAttribute_mParsedGrammarComponentMap.modifier_insertKey (GALGAS_lstring::constructor_new (var_basename, inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (456)), constinArgument_inSourceFile, outArgument_outGrammarComponentRoot, inCompiler COMMA_SOURCE_FILE_AT_LINE (455)) ;
    }
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                  Routine 'compileGrammarComponentFromAST'                   *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_compileGrammarComponentFromAST (const GALGAS_lstring constinArgument_inSourceFile,
                                             const GALGAS_string constinArgument_inOutputDirectoryForCppFiles,
                                             const GALGAS_grammarComponentAST constinArgument_inGrammarComponentRoot,
                                             GALGAS_parsedComponentStruct & ioArgument_ioParsedComponentStruct,
                                             C_Compiler * inCompiler
                                             COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string var_outputDirectoryForHTMLFile = constinArgument_inSourceFile.mAttribute_string.reader_stringByDeletingLastPathComponent (SOURCE_FILE_AT_LINE (497)) ;
  GALGAS_lstring var_grammarComponentName = constinArgument_inGrammarComponentRoot.reader_mGrammarName (SOURCE_FILE_AT_LINE (499)) ;
  GALGAS_string var_basename = constinArgument_inSourceFile.mAttribute_string.reader_lastPathComponent (SOURCE_FILE_AT_LINE (500)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (500)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_grammarComponentName.reader_string (SOURCE_FILE_AT_LINE (501)).objectCompare (var_basename)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (var_grammarComponentName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticWarning (location_1, GALGAS_string ("GALGAS checks the component name ('").operator_concat (var_grammarComponentName.reader_string (SOURCE_FILE_AT_LINE (503)) COMMA_SOURCE_FILE_AT_LINE (503)).operator_concat (GALGAS_string ("') against the source file base name ('") COMMA_SOURCE_FILE_AT_LINE (503)).operator_concat (var_basename COMMA_SOURCE_FILE_AT_LINE (504)).operator_concat (GALGAS_string ("'): they should be identical") COMMA_SOURCE_FILE_AT_LINE (504)) COMMA_SOURCE_FILE_AT_LINE (502)) ;
  }
  GALGAS_terminalSymbolsMapForGrammarAnalysis var_actuallyUsedTerminalSymbolMap = GALGAS_terminalSymbolsMapForGrammarAnalysis::constructor_emptyMap (SOURCE_FILE_AT_LINE (508)) ;
  GALGAS_nonTerminalSymbolMapForGrammarAnalysis var_nonTerminalMapForGrammarAnalysis = GALGAS_nonTerminalSymbolMapForGrammarAnalysis::constructor_emptyMap (SOURCE_FILE_AT_LINE (509)) ;
  GALGAS_string var_lexiqueComponentName = GALGAS_string::makeEmptyString () ;
  GALGAS_lstring var_lexiqueComponentPath = GALGAS_string::makeEmptyString ().reader_nowhere (SOURCE_FILE_AT_LINE (511)) ;
  GALGAS_syntaxComponentListForGrammarAnalysis var_syntaxComponentListForGrammarAnalysis = GALGAS_syntaxComponentListForGrammarAnalysis::constructor_emptyList (SOURCE_FILE_AT_LINE (512)) ;
  GALGAS_nonTerminalToAddList var_nonTerminalToAddList = GALGAS_nonTerminalToAddList::constructor_emptyList (SOURCE_FILE_AT_LINE (513)) ;
  GALGAS_uint var_addedNonTerminalCount = GALGAS_uint ((uint32_t) 0U) ;
  cEnumerator_lstringlist enumerator_21411 (constinArgument_inGrammarComponentRoot.reader_mSyntaxComponents (SOURCE_FILE_AT_LINE (515)), kEnumeration_up) ;
  while (enumerator_21411.hasCurrentObject ()) {
    GALGAS_uint var_addedNonTerminalCountRef = var_addedNonTerminalCount ;
    const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, enumerator_21411.current_mValue (HERE).mAttribute_string.reader_pathExtension (SOURCE_FILE_AT_LINE (517)).objectCompare (GALGAS_string ("gSyntax"))).boolEnum () ;
    if (kBoolTrue == test_2) {
      GALGAS_location location_3 (enumerator_21411.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_3, GALGAS_string ("a syntax component file should have '.gSyntax' path extension") COMMA_SOURCE_FILE_AT_LINE (518)) ;
    }else if (kBoolFalse == test_2) {
      GALGAS_string var_syntaxComponentName = enumerator_21411.current_mValue (HERE).mAttribute_string.reader_lastPathComponent (SOURCE_FILE_AT_LINE (520)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (520)) ;
      GALGAS_syntaxComponentAST var_syntaxComponentRoot ;
      const enumGalgasBool test_4 = ioArgument_ioParsedComponentStruct.reader_mParsedSyntaxComponentMap (SOURCE_FILE_AT_LINE (522)).reader_hasKey (var_syntaxComponentName COMMA_SOURCE_FILE_AT_LINE (522)).boolEnum () ;
      if (kBoolTrue == test_4) {
        GALGAS_lstring joker_21983_0 ; // Joker input parameter
        ioArgument_ioParsedComponentStruct.reader_mParsedSyntaxComponentMap (SOURCE_FILE_AT_LINE (523)).method_searchKey (GALGAS_lstring::constructor_new (var_syntaxComponentName, inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (523)), joker_21983_0, var_syntaxComponentRoot, inCompiler COMMA_SOURCE_FILE_AT_LINE (523)) ;
      }else if (kBoolFalse == test_4) {
        GALGAS_string var_sourceFilePath = enumerator_21411.current_mValue (HERE).mAttribute_string.reader_absolutePathFromPath (constinArgument_inSourceFile.mAttribute_string.reader_stringByDeletingLastPathComponent (SOURCE_FILE_AT_LINE (525)) COMMA_SOURCE_FILE_AT_LINE (525)) ;
        GALGAS_lstring var_lSourceFilePath = GALGAS_lstring::constructor_new (var_sourceFilePath, enumerator_21411.current_mValue (HERE).reader_location (SOURCE_FILE_AT_LINE (526)) COMMA_SOURCE_FILE_AT_LINE (526)) ;
        C_String syntaxDirectedTranslationResult_22268 ;
        cGrammar_syntaxSLRgrammar::_performSourceFileParsing_ (inCompiler, syntaxDirectedTranslationResult_22268, var_lSourceFilePath, var_syntaxComponentRoot COMMA_SOURCE_FILE_AT_LINE (527)) ;
        {
        ioArgument_ioParsedComponentStruct.mAttribute_mParsedSyntaxComponentMap.modifier_insertKey (GALGAS_lstring::constructor_new (var_syntaxComponentName, enumerator_21411.current_mValue (HERE).reader_location (SOURCE_FILE_AT_LINE (528)) COMMA_SOURCE_FILE_AT_LINE (528)), var_lSourceFilePath, var_syntaxComponentRoot, inCompiler COMMA_SOURCE_FILE_AT_LINE (528)) ;
        }
      }
      const enumGalgasBool test_5 = constinArgument_inGrammarComponentRoot.mAttribute_mHasTranslateFeature.operator_and (var_syntaxComponentRoot.mAttribute_mHasTranslateFeature.operator_not (SOURCE_FILE_AT_LINE (531)) COMMA_SOURCE_FILE_AT_LINE (531)).boolEnum () ;
      if (kBoolTrue == test_5) {
        GALGAS_location location_6 (var_syntaxComponentRoot.mAttribute_mSyntaxComponentName.reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_6, GALGAS_string ("as '").operator_concat (constinArgument_inGrammarComponentRoot.mAttribute_mGrammarName.reader_string (SOURCE_FILE_AT_LINE (532)) COMMA_SOURCE_FILE_AT_LINE (532)).operator_concat (GALGAS_string ("' grammar declares 'translate' feature, this syntax component should do so") COMMA_SOURCE_FILE_AT_LINE (532)) COMMA_SOURCE_FILE_AT_LINE (532)) ;
      }else if (kBoolFalse == test_5) {
        const enumGalgasBool test_7 = var_syntaxComponentRoot.mAttribute_mHasTranslateFeature.operator_and (constinArgument_inGrammarComponentRoot.mAttribute_mHasTranslateFeature.operator_not (SOURCE_FILE_AT_LINE (533)) COMMA_SOURCE_FILE_AT_LINE (533)).boolEnum () ;
        if (kBoolTrue == test_7) {
          GALGAS_location location_8 (constinArgument_inGrammarComponentRoot.mAttribute_mGrammarName.reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_8, GALGAS_string ("as '").operator_concat (var_syntaxComponentRoot.mAttribute_mSyntaxComponentName.reader_string (SOURCE_FILE_AT_LINE (534)) COMMA_SOURCE_FILE_AT_LINE (534)).operator_concat (GALGAS_string ("' syntax component declares 'translate' feature, this grammar should do so") COMMA_SOURCE_FILE_AT_LINE (534)) COMMA_SOURCE_FILE_AT_LINE (534)) ;
        }
      }
      var_lexiqueComponentPath = var_syntaxComponentRoot.reader_mImportedLexiqueFilePath (SOURCE_FILE_AT_LINE (537)) ;
      GALGAS_string var_currentLexiqueName = var_lexiqueComponentPath.mAttribute_string.reader_lastPathComponent (SOURCE_FILE_AT_LINE (538)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (538)) ;
      const enumGalgasBool test_9 = GALGAS_bool (kIsEqual, var_lexiqueComponentName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
      if (kBoolTrue == test_9) {
        var_lexiqueComponentName = var_currentLexiqueName ;
      }else if (kBoolFalse == test_9) {
        const enumGalgasBool test_10 = GALGAS_bool (kIsNotEqual, var_lexiqueComponentName.objectCompare (var_currentLexiqueName)).boolEnum () ;
        if (kBoolTrue == test_10) {
          GALGAS_location location_11 (enumerator_21411.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_11, GALGAS_string ("this syntax component uses '").operator_concat (var_currentLexiqueName COMMA_SOURCE_FILE_AT_LINE (542)).operator_concat (GALGAS_string ("' lexique component, but the first syntax component uses the '") COMMA_SOURCE_FILE_AT_LINE (543)).operator_concat (var_lexiqueComponentName COMMA_SOURCE_FILE_AT_LINE (543)).operator_concat (GALGAS_string ("' lexique component (they should be the same)") COMMA_SOURCE_FILE_AT_LINE (544)) COMMA_SOURCE_FILE_AT_LINE (542)) ;
        }
      }
      {
      routine_handleNonTerminalDeclarations (var_nonTerminalMapForGrammarAnalysis, var_syntaxComponentRoot.reader_mNonterminalDeclarationList (SOURCE_FILE_AT_LINE (549)), inCompiler COMMA_SOURCE_FILE_AT_LINE (547)) ;
      }
      {
      routine_handleNonTerminalDeclarationsFromRuleList (var_nonTerminalMapForGrammarAnalysis, var_syntaxComponentRoot.reader_mRuleList (SOURCE_FILE_AT_LINE (554)), inCompiler COMMA_SOURCE_FILE_AT_LINE (552)) ;
      }
      {
      routine_buildRuleList (var_nonTerminalMapForGrammarAnalysis, var_syntaxComponentRoot.reader_mSyntaxComponentName (SOURCE_FILE_AT_LINE (559)), var_syntaxComponentRoot.reader_mRuleList (SOURCE_FILE_AT_LINE (560)), var_actuallyUsedTerminalSymbolMap, var_syntaxComponentListForGrammarAnalysis, var_addedNonTerminalCount, inCompiler COMMA_SOURCE_FILE_AT_LINE (557)) ;
      }
      GALGAS_uint var_i = GALGAS_uint ((uint32_t) 0U) ;
      if (var_addedNonTerminalCount.isValid ()) {
        uint32_t variant_24491 = var_addedNonTerminalCount.uintValue () ;
        bool loop_24491 = true ;
        while (loop_24491) {
          loop_24491 = GALGAS_bool (kIsStrictInf, var_i.objectCompare (var_addedNonTerminalCount.substract_operation (var_addedNonTerminalCountRef, inCompiler COMMA_SOURCE_FILE_AT_LINE (566)))).isValid () ;
          if (loop_24491) {
            loop_24491 = GALGAS_bool (kIsStrictInf, var_i.objectCompare (var_addedNonTerminalCount.substract_operation (var_addedNonTerminalCountRef, inCompiler COMMA_SOURCE_FILE_AT_LINE (566)))).boolValue () ;
          }
          if (loop_24491 && (0 == variant_24491)) {
            loop_24491 = false ;
            inCompiler->loopRunTimeVariantError (SOURCE_FILE_AT_LINE (566)) ;
          }
          if (loop_24491) {
            variant_24491 -- ;
            var_nonTerminalToAddList.addAssign_operation (var_syntaxComponentName, var_i COMMA_SOURCE_FILE_AT_LINE (567)) ;
            var_i.increment_operation (inCompiler COMMA_SOURCE_FILE_AT_LINE (568)) ;
          }
        }
      }
    }
    enumerator_21411.gotoNextObject () ;
  }
  GALGAS_lexiqueComponentAST var_lexiqueComponentAST ;
  {
  routine_parseLexiqueComponent (GALGAS_lstring::constructor_new (var_lexiqueComponentPath.mAttribute_string.reader_absolutePathFromPath (constinArgument_inSourceFile.mAttribute_string.reader_stringByDeletingLastPathComponent (SOURCE_FILE_AT_LINE (575)) COMMA_SOURCE_FILE_AT_LINE (575)), var_lexiqueComponentPath.reader_location (SOURCE_FILE_AT_LINE (575)) COMMA_SOURCE_FILE_AT_LINE (575)), ioArgument_ioParsedComponentStruct, var_lexiqueComponentAST, inCompiler COMMA_SOURCE_FILE_AT_LINE (574)) ;
  }
  GALGAS_bool var_hasIndexing = var_lexiqueComponentAST.reader_mIndexingDirectory (SOURCE_FILE_AT_LINE (579)).mAttribute_location.reader_isNowhere (SOURCE_FILE_AT_LINE (579)).operator_not (SOURCE_FILE_AT_LINE (579)) ;
  const enumGalgasBool test_12 = var_hasIndexing.operator_and (constinArgument_inGrammarComponentRoot.mAttribute_mHasIndexing.mAttribute_bool.operator_not (SOURCE_FILE_AT_LINE (580)) COMMA_SOURCE_FILE_AT_LINE (580)).boolEnum () ;
  if (kBoolTrue == test_12) {
    GALGAS_location location_13 (constinArgument_inGrammarComponentRoot.mAttribute_mGrammarName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_13, GALGAS_string ("the grammar does not enable indexing, but the '").operator_concat (var_lexiqueComponentAST.mAttribute_mLexiqueComponentName.reader_string (SOURCE_FILE_AT_LINE (581)) COMMA_SOURCE_FILE_AT_LINE (581)).operator_concat (GALGAS_string ("' does") COMMA_SOURCE_FILE_AT_LINE (581)) COMMA_SOURCE_FILE_AT_LINE (581)) ;
  }else if (kBoolFalse == test_12) {
    const enumGalgasBool test_14 = var_hasIndexing.operator_not (SOURCE_FILE_AT_LINE (582)).operator_and (constinArgument_inGrammarComponentRoot.mAttribute_mHasIndexing.mAttribute_bool COMMA_SOURCE_FILE_AT_LINE (582)).boolEnum () ;
    if (kBoolTrue == test_14) {
      GALGAS_location location_15 (constinArgument_inGrammarComponentRoot.mAttribute_mHasIndexing.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_15, GALGAS_string ("the grammar enables indexing, but the '").operator_concat (var_lexiqueComponentAST.mAttribute_mLexiqueComponentName.reader_string (SOURCE_FILE_AT_LINE (583)) COMMA_SOURCE_FILE_AT_LINE (583)).operator_concat (GALGAS_string ("' does not") COMMA_SOURCE_FILE_AT_LINE (583)) COMMA_SOURCE_FILE_AT_LINE (583)) ;
    }
  }
  GALGAS_nonterminalSymbolLabelMapForGrammarAnalysis var_startSymbolAltMap ;
  GALGAS_uint var_startSymbolIndex ;
  var_nonTerminalMapForGrammarAnalysis.method_searchKey (constinArgument_inGrammarComponentRoot.reader_mStartSymbolName (SOURCE_FILE_AT_LINE (589)), var_startSymbolIndex, var_startSymbolAltMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (589)) ;
  {
  routine_checkLabelMap (constinArgument_inGrammarComponentRoot.reader_mStartSymbolName (SOURCE_FILE_AT_LINE (592)).reader_location (SOURCE_FILE_AT_LINE (592)), constinArgument_inGrammarComponentRoot.reader_mStartSymbolLabelList (SOURCE_FILE_AT_LINE (593)), var_nonTerminalMapForGrammarAnalysis.reader_locationForKey (constinArgument_inGrammarComponentRoot.reader_mStartSymbolName (SOURCE_FILE_AT_LINE (594)).reader_string (SOURCE_FILE_AT_LINE (594)), inCompiler COMMA_SOURCE_FILE_AT_LINE (594)), var_startSymbolAltMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (591)) ;
  }
  GALGAS_unusedNonTerminalSymbolMapForGrammarAnalysis var_unusedNonTerminalSymbolsForGrammar = GALGAS_unusedNonTerminalSymbolMapForGrammarAnalysis::constructor_emptyMap (SOURCE_FILE_AT_LINE (598)) ;
  cEnumerator_lstringlist enumerator_26491 (constinArgument_inGrammarComponentRoot.reader_mUnusedNonterminalList (SOURCE_FILE_AT_LINE (599)), kEnumeration_up) ;
  while (enumerator_26491.hasCurrentObject ()) {
    GALGAS_uint var_nonterminalIndex ;
    GALGAS_nonterminalSymbolLabelMapForGrammarAnalysis joker_26599_0 ; // Joker input parameter
    var_nonTerminalMapForGrammarAnalysis.method_searchKey (enumerator_26491.current_mValue (HERE), var_nonterminalIndex, joker_26599_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (601)) ;
    {
    var_unusedNonTerminalSymbolsForGrammar.modifier_insertKey (enumerator_26491.current_mValue (HERE), var_nonterminalIndex, inCompiler COMMA_SOURCE_FILE_AT_LINE (602)) ;
    }
    enumerator_26491.gotoNextObject () ;
  }
  GALGAS_nonTerminalSymbolSortedListForGrammarAnalysis var_nonTerminalSymbolSortedListForGrammarAnalysis = GALGAS_nonTerminalSymbolSortedListForGrammarAnalysis::constructor_emptySortedList (SOURCE_FILE_AT_LINE (605)) ;
  cEnumerator_nonTerminalSymbolMapForGrammarAnalysis enumerator_26956 (var_nonTerminalMapForGrammarAnalysis, kEnumeration_up) ;
  while (enumerator_26956.hasCurrentObject ()) {
    var_nonTerminalSymbolSortedListForGrammarAnalysis.addAssign_operation (enumerator_26956.current_lkey (HERE), enumerator_26956.current_mNonTerminalIndex (HERE), enumerator_26956.current_mNonterminalSymbolParametersMap (HERE) COMMA_SOURCE_FILE_AT_LINE (607)) ;
    enumerator_26956.gotoNextObject () ;
  }
  {
  //--- @ifExpressionForGeneration
  GALGAS_string temp_16 ;
  const enumGalgasBool test_17 = constinArgument_inGrammarComponentRoot.mAttribute_mHasTranslateFeature.boolEnum () ;
  if (kBoolTrue == test_17) {
    temp_16 = function_syntaxDirectedTranslationResultVarName (inCompiler COMMA_SOURCE_FILE_AT_LINE (623)) ;
  }else if (kBoolFalse == test_17) {
    temp_16 = GALGAS_string::makeEmptyString () ;
  }
  routine_grammarAnalysisAndGeneration (constinArgument_inGrammarComponentRoot.reader_mGrammarName (SOURCE_FILE_AT_LINE (611)), constinArgument_inGrammarComponentRoot.reader_mGrammarClass (SOURCE_FILE_AT_LINE (612)), var_startSymbolIndex, var_lexiqueComponentName, constinArgument_inGrammarComponentRoot.reader_mEndOfSourceText (SOURCE_FILE_AT_LINE (615)), var_actuallyUsedTerminalSymbolMap, var_syntaxComponentListForGrammarAnalysis, var_unusedNonTerminalSymbolsForGrammar, constinArgument_inOutputDirectoryForCppFiles, var_outputDirectoryForHTMLFile, var_nonTerminalSymbolSortedListForGrammarAnalysis, var_hasIndexing, temp_16, inCompiler COMMA_SOURCE_FILE_AT_LINE (610)) ;
  }
  const enumGalgasBool test_18 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (626)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_18) {
    GALGAS_string var_zone_32_ = GALGAS_string (filewrapperTemplate_grammarGenerationTemplate_grammarZone_32_Header (inCompiler, constinArgument_inGrammarComponentRoot COMMA_SOURCE_FILE_AT_LINE (627))) ;
    GALGAS_string var_zone_33_ = GALGAS_string (filewrapperTemplate_grammarGenerationTemplate_grammarZone_33_Header (inCompiler, var_lexiqueComponentName.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (631)), constinArgument_inGrammarComponentRoot, var_nonTerminalMapForGrammarAnalysis, var_nonTerminalToAddList, var_hasIndexing COMMA_SOURCE_FILE_AT_LINE (630))) ;
    {
    GALGAS_string::class_method_generateFileWithPattern (constinArgument_inOutputDirectoryForCppFiles, constinArgument_inGrammarComponentRoot.reader_mGrammarName (SOURCE_FILE_AT_LINE (639)).reader_string (SOURCE_FILE_AT_LINE (639)).operator_concat (GALGAS_string (".h") COMMA_SOURCE_FILE_AT_LINE (639)), GALGAS_string ("//"), GALGAS_string ("\n"
      "\n"), var_zone_32_, GALGAS_string ("\n"
      "\n"), var_zone_33_, inCompiler COMMA_SOURCE_FILE_AT_LINE (637)) ;
    }
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//               Routine 'compileGrammarComponentFromSourceFile'               *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_compileGrammarComponentFromSourceFile (const GALGAS_lstring constinArgument_inSourceFile,
                                                    const GALGAS_string constinArgument_inOutputDirectoryForCppFiles,
                                                    GALGAS_parsedComponentStruct & ioArgument_ioParsedComponentStruct,
                                                    C_Compiler * inCompiler
                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_grammarComponentAST var_grammarComponentRoot ;
  {
  routine_parseGrammarComponent (constinArgument_inSourceFile, ioArgument_ioParsedComponentStruct, var_grammarComponentRoot, inCompiler COMMA_SOURCE_FILE_AT_LINE (656)) ;
  }
  {
  routine_compileGrammarComponentFromAST (constinArgument_inSourceFile, constinArgument_inOutputDirectoryForCppFiles, var_grammarComponentRoot, ioArgument_ioParsedComponentStruct, inCompiler COMMA_SOURCE_FILE_AT_LINE (658)) ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//    Abstract category method '@syntaxInstructionAST transformInstruction'    *
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_syntaxInstructionAST_transformInstruction> gCategoryMethodTable_syntaxInstructionAST_transformInstruction ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_transformInstruction (const int32_t inClassIndex,
                                               categoryMethodSignature_syntaxInstructionAST_transformInstruction inMethod) {
  gCategoryMethodTable_syntaxInstructionAST_transformInstruction.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_syntaxInstructionAST_transformInstruction (void) {
  gCategoryMethodTable_syntaxInstructionAST_transformInstruction.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_syntaxInstructionAST_transformInstruction (NULL,
                                                                      freeCategoryMethod_syntaxInstructionAST_transformInstruction) ;

//-----------------------------------------------------------------------------*

void callCategoryMethod_transformInstruction (const cPtr_syntaxInstructionAST * inObject,
                                              GALGAS_terminalSymbolsMapForGrammarAnalysis & io_ioActuallyUsedTerminalSymbolMap,
                                              const GALGAS_nonTerminalSymbolMapForGrammarAnalysis constin_inNonTerminalSymbolMap,
                                              GALGAS_uint & io_ioAddedNonTerminalIndex,
                                              GALGAS_syntaxInstructionListForGrammarAnalysis & io_ioSyntaxInstructionList,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, cPtr_syntaxInstructionAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const int32_t classIndex = info->mSlotID ;
    categoryMethodSignature_syntaxInstructionAST_transformInstruction f = NULL ;
    if (classIndex < gCategoryMethodTable_syntaxInstructionAST_transformInstruction.count ()) {
      f = gCategoryMethodTable_syntaxInstructionAST_transformInstruction (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_syntaxInstructionAST_transformInstruction.count ()) {
           f = gCategoryMethodTable_syntaxInstructionAST_transformInstruction (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_syntaxInstructionAST_transformInstruction.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, io_ioActuallyUsedTerminalSymbolMap, constin_inNonTerminalSymbolMap, io_ioAddedNonTerminalIndex, io_ioSyntaxInstructionList, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
//  Overriding category method '@semanticInstructionAST transformInstruction'  *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_semanticInstructionAST_transformInstruction (const cPtr_syntaxInstructionAST * /* inObject */,
                                                                        GALGAS_terminalSymbolsMapForGrammarAnalysis & /* ioArgument_ioActuallyUsedTerminalSymbolMap */,
                                                                        const GALGAS_nonTerminalSymbolMapForGrammarAnalysis /* constinArgument_inNonTerminalSymbolMap */,
                                                                        GALGAS_uint & /* ioArgument_ioAddedNonTerminalIndex */,
                                                                        GALGAS_syntaxInstructionListForGrammarAnalysis & /* ioArgument_ioSyntaxInstructionList */,
                                                                        C_Compiler * /* inCompiler */
                                                                        COMMA_UNUSED_LOCATION_ARGS) {
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_semanticInstructionAST_transformInstruction (void) {
  enterCategoryMethod_transformInstruction (kTypeDescriptor_GALGAS_semanticInstructionAST.mSlotID,
                                            categoryMethod_semanticInstructionAST_transformInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_semanticInstructionAST_transformInstruction (defineCategoryMethod_semanticInstructionAST_transformInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//  Overriding category method '@syntaxSendInstruction transformInstruction'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_syntaxSendInstruction_transformInstruction (const cPtr_syntaxInstructionAST * /* inObject */,
                                                                       GALGAS_terminalSymbolsMapForGrammarAnalysis & /* ioArgument_ioActuallyUsedTerminalSymbolMap */,
                                                                       const GALGAS_nonTerminalSymbolMapForGrammarAnalysis /* constinArgument_inNonTerminalSymbolMap */,
                                                                       GALGAS_uint & /* ioArgument_ioAddedNonTerminalIndex */,
                                                                       GALGAS_syntaxInstructionListForGrammarAnalysis & /* ioArgument_ioSyntaxInstructionList */,
                                                                       C_Compiler * /* inCompiler */
                                                                       COMMA_UNUSED_LOCATION_ARGS) {
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_syntaxSendInstruction_transformInstruction (void) {
  enterCategoryMethod_transformInstruction (kTypeDescriptor_GALGAS_syntaxSendInstruction.mSlotID,
                                            categoryMethod_syntaxSendInstruction_transformInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_syntaxSendInstruction_transformInstruction (defineCategoryMethod_syntaxSendInstruction_transformInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
// Overriding category method '@terminalCheckInstruction transformInstruction' *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_terminalCheckInstruction_transformInstruction (const cPtr_syntaxInstructionAST * inObject,
                                                                          GALGAS_terminalSymbolsMapForGrammarAnalysis & ioArgument_ioActuallyUsedTerminalSymbolMap,
                                                                          const GALGAS_nonTerminalSymbolMapForGrammarAnalysis /* constinArgument_inNonTerminalSymbolMap */,
                                                                          GALGAS_uint & /* ioArgument_ioAddedNonTerminalIndex */,
                                                                          GALGAS_syntaxInstructionListForGrammarAnalysis & ioArgument_ioSyntaxInstructionList,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_terminalCheckInstruction * object = (const cPtr_terminalCheckInstruction *) inObject ;
  macroValidSharedObject (object, cPtr_terminalCheckInstruction) ;
  GALGAS_uint var_terminalSymbolIndex ;
  // index 1: attribute 'mTerminalIndex', type @uint
  cMapElement_terminalSymbolsMapForGrammarAnalysis * objectArray_9391 = (cMapElement_terminalSymbolsMapForGrammarAnalysis *) ioArgument_ioActuallyUsedTerminalSymbolMap.readWriteAccessForWithInstruction_hasKey (inCompiler, object->mAttribute_mTerminalName.reader_string (SOURCE_FILE_AT_LINE (216)) COMMA_SOURCE_FILE_AT_LINE (216)) ;
  if (NULL != objectArray_9391) {
      macroValidSharedObject (objectArray_9391, cMapElement_terminalSymbolsMapForGrammarAnalysis) ;
    var_terminalSymbolIndex = objectArray_9391->mAttribute_mTerminalIndex ;
  }else{
    var_terminalSymbolIndex = ioArgument_ioActuallyUsedTerminalSymbolMap.reader_count (SOURCE_FILE_AT_LINE (219)) ;
    {
    ioArgument_ioActuallyUsedTerminalSymbolMap.modifier_insertKey (object->mAttribute_mTerminalName, var_terminalSymbolIndex, inCompiler COMMA_SOURCE_FILE_AT_LINE (220)) ;
    }
  }
  ioArgument_ioSyntaxInstructionList.addAssign_operation (GALGAS_terminalInstructionForGrammarAnalysis::constructor_new (object->mAttribute_mInstructionLocation, object->mAttribute_mTerminalName, var_terminalSymbolIndex COMMA_SOURCE_FILE_AT_LINE (222)) COMMA_SOURCE_FILE_AT_LINE (222)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_terminalCheckInstruction_transformInstruction (void) {
  enterCategoryMethod_transformInstruction (kTypeDescriptor_GALGAS_terminalCheckInstruction.mSlotID,
                                            categoryMethod_terminalCheckInstruction_transformInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_terminalCheckInstruction_transformInstruction (defineCategoryMethod_terminalCheckInstruction_transformInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@nonterminalCallInstruction transformInstruction'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_nonterminalCallInstruction_transformInstruction (const cPtr_syntaxInstructionAST * inObject,
                                                                            GALGAS_terminalSymbolsMapForGrammarAnalysis & /* ioArgument_ioActuallyUsedTerminalSymbolMap */,
                                                                            const GALGAS_nonTerminalSymbolMapForGrammarAnalysis constinArgument_inNonTerminalSymbolMap,
                                                                            GALGAS_uint & /* ioArgument_ioAddedNonTerminalIndex */,
                                                                            GALGAS_syntaxInstructionListForGrammarAnalysis & ioArgument_ioSyntaxInstructionList,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_nonterminalCallInstruction * object = (const cPtr_nonterminalCallInstruction *) inObject ;
  macroValidSharedObject (object, cPtr_nonterminalCallInstruction) ;
  GALGAS_uint var_nonTerminalSymbolIndex ;
  GALGAS_nonterminalSymbolLabelMapForGrammarAnalysis joker_10361_0 ; // Joker input parameter
  constinArgument_inNonTerminalSymbolMap.method_searchKey (object->mAttribute_mNonterminalName, var_nonTerminalSymbolIndex, joker_10361_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (238)) ;
  ioArgument_ioSyntaxInstructionList.addAssign_operation (GALGAS_nonTerminalInstructionForGrammarAnalysis::constructor_new (object->mAttribute_mInstructionLocation, object->mAttribute_mNonterminalName, var_nonTerminalSymbolIndex COMMA_SOURCE_FILE_AT_LINE (239)) COMMA_SOURCE_FILE_AT_LINE (239)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_nonterminalCallInstruction_transformInstruction (void) {
  enterCategoryMethod_transformInstruction (kTypeDescriptor_GALGAS_nonterminalCallInstruction.mSlotID,
                                            categoryMethod_nonterminalCallInstruction_transformInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_nonterminalCallInstruction_transformInstruction (defineCategoryMethod_nonterminalCallInstruction_transformInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//    Overriding category method '@repeatInstruction transformInstruction'     *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_repeatInstruction_transformInstruction (const cPtr_syntaxInstructionAST * inObject,
                                                                   GALGAS_terminalSymbolsMapForGrammarAnalysis & ioArgument_ioActuallyUsedTerminalSymbolMap,
                                                                   const GALGAS_nonTerminalSymbolMapForGrammarAnalysis constinArgument_inNonTerminalSymbolMap,
                                                                   GALGAS_uint & ioArgument_ioAddedNonTerminalIndex,
                                                                   GALGAS_syntaxInstructionListForGrammarAnalysis & ioArgument_ioSyntaxInstructionList,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_repeatInstruction * object = (const cPtr_repeatInstruction *) inObject ;
  macroValidSharedObject (object, cPtr_repeatInstruction) ;
  GALGAS_uint var_addedNonTerminalIndex = ioArgument_ioAddedNonTerminalIndex ;
  ioArgument_ioAddedNonTerminalIndex.increment_operation (inCompiler COMMA_SOURCE_FILE_AT_LINE (255)) ;
  GALGAS_syntaxInstructionListForGrammarAnalysis var_repeatedInstructionList = GALGAS_syntaxInstructionListForGrammarAnalysis::constructor_emptyList (SOURCE_FILE_AT_LINE (257)) ;
  {
  routine_transformInstructionList (object->mAttribute_mRepeatedInstructionList, ioArgument_ioActuallyUsedTerminalSymbolMap, constinArgument_inNonTerminalSymbolMap, ioArgument_ioAddedNonTerminalIndex, var_repeatedInstructionList, inCompiler COMMA_SOURCE_FILE_AT_LINE (258)) ;
  }
  GALGAS_branchListForGrammarAnalysis var_repeatBranchList = GALGAS_branchListForGrammarAnalysis::constructor_listWithValue (var_repeatedInstructionList COMMA_SOURCE_FILE_AT_LINE (265)) ;
  cEnumerator_listOfSyntaxInstructionList enumerator_11405 (object->mAttribute_mRepeatBranchList, kEnumeration_up) ;
  while (enumerator_11405.hasCurrentObject ()) {
    GALGAS_syntaxInstructionListForGrammarAnalysis var_syntaxInstructionList = GALGAS_syntaxInstructionListForGrammarAnalysis::constructor_emptyList (SOURCE_FILE_AT_LINE (268)) ;
    {
    routine_transformInstructionList (enumerator_11405.current_mSyntaxInstructionList (HERE), ioArgument_ioActuallyUsedTerminalSymbolMap, constinArgument_inNonTerminalSymbolMap, ioArgument_ioAddedNonTerminalIndex, var_syntaxInstructionList, inCompiler COMMA_SOURCE_FILE_AT_LINE (269)) ;
    }
    var_repeatBranchList.addAssign_operation (var_syntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (276)) ;
    enumerator_11405.gotoNextObject () ;
  }
  ioArgument_ioSyntaxInstructionList.addAssign_operation (GALGAS_repeatInstructionForGrammarAnalysis::constructor_new (object->mAttribute_mInstructionLocation, var_repeatBranchList, var_addedNonTerminalIndex COMMA_SOURCE_FILE_AT_LINE (279)) COMMA_SOURCE_FILE_AT_LINE (279)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_repeatInstruction_transformInstruction (void) {
  enterCategoryMethod_transformInstruction (kTypeDescriptor_GALGAS_repeatInstruction.mSlotID,
                                            categoryMethod_repeatInstruction_transformInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_repeatInstruction_transformInstruction (defineCategoryMethod_repeatInstruction_transformInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//    Overriding category method '@selectInstruction transformInstruction'     *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_selectInstruction_transformInstruction (const cPtr_syntaxInstructionAST * inObject,
                                                                   GALGAS_terminalSymbolsMapForGrammarAnalysis & ioArgument_ioActuallyUsedTerminalSymbolMap,
                                                                   const GALGAS_nonTerminalSymbolMapForGrammarAnalysis constinArgument_inNonTerminalSymbolMap,
                                                                   GALGAS_uint & ioArgument_ioAddedNonTerminalIndex,
                                                                   GALGAS_syntaxInstructionListForGrammarAnalysis & ioArgument_ioSyntaxInstructionList,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_selectInstruction * object = (const cPtr_selectInstruction *) inObject ;
  macroValidSharedObject (object, cPtr_selectInstruction) ;
  GALGAS_uint var_addedNonTerminalIndex = ioArgument_ioAddedNonTerminalIndex ;
  ioArgument_ioAddedNonTerminalIndex.increment_operation (inCompiler COMMA_SOURCE_FILE_AT_LINE (295)) ;
  GALGAS_branchListForGrammarAnalysis var_selectBranchList = GALGAS_branchListForGrammarAnalysis::constructor_emptyList (SOURCE_FILE_AT_LINE (297)) ;
  cEnumerator_listOfSyntaxInstructionList enumerator_12488 (object->mAttribute_mSelectBranchList, kEnumeration_up) ;
  while (enumerator_12488.hasCurrentObject ()) {
    GALGAS_syntaxInstructionListForGrammarAnalysis var_syntaxInstructionList = GALGAS_syntaxInstructionListForGrammarAnalysis::constructor_emptyList (SOURCE_FILE_AT_LINE (299)) ;
    {
    routine_transformInstructionList (enumerator_12488.current_mSyntaxInstructionList (HERE), ioArgument_ioActuallyUsedTerminalSymbolMap, constinArgument_inNonTerminalSymbolMap, ioArgument_ioAddedNonTerminalIndex, var_syntaxInstructionList, inCompiler COMMA_SOURCE_FILE_AT_LINE (300)) ;
    }
    var_selectBranchList.addAssign_operation (var_syntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (307)) ;
    enumerator_12488.gotoNextObject () ;
  }
  ioArgument_ioSyntaxInstructionList.addAssign_operation (GALGAS_selectInstructionForGrammarAnalysis::constructor_new (object->mAttribute_mInstructionLocation, var_selectBranchList, var_addedNonTerminalIndex COMMA_SOURCE_FILE_AT_LINE (310)) COMMA_SOURCE_FILE_AT_LINE (310)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_selectInstruction_transformInstruction (void) {
  enterCategoryMethod_transformInstruction (kTypeDescriptor_GALGAS_selectInstruction.mSlotID,
                                            categoryMethod_selectInstruction_transformInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_selectInstruction_transformInstruction (defineCategoryMethod_selectInstruction_transformInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//  Overriding category method '@parseRewindInstruction transformInstruction'  *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_parseRewindInstruction_transformInstruction (const cPtr_syntaxInstructionAST * inObject,
                                                                        GALGAS_terminalSymbolsMapForGrammarAnalysis & ioArgument_ioActuallyUsedTerminalSymbolMap,
                                                                        const GALGAS_nonTerminalSymbolMapForGrammarAnalysis constinArgument_inNonTerminalSymbolMap,
                                                                        GALGAS_uint & ioArgument_ioAddedNonTerminalIndex,
                                                                        GALGAS_syntaxInstructionListForGrammarAnalysis & ioArgument_ioSyntaxInstructionList,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_parseRewindInstruction * object = (const cPtr_parseRewindInstruction *) inObject ;
  macroValidSharedObject (object, cPtr_parseRewindInstruction) ;
  GALGAS_syntaxInstructionList var_syntaxInstructionList ;
  GALGAS_location joker_13494_0 ; // Joker input parameter
  object->mAttribute_mParseRewindBranchList.method_first (var_syntaxInstructionList, joker_13494_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (326)) ;
  {
  routine_transformInstructionList (var_syntaxInstructionList, ioArgument_ioActuallyUsedTerminalSymbolMap, constinArgument_inNonTerminalSymbolMap, ioArgument_ioAddedNonTerminalIndex, ioArgument_ioSyntaxInstructionList, inCompiler COMMA_SOURCE_FILE_AT_LINE (328)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_parseRewindInstruction_transformInstruction (void) {
  enterCategoryMethod_transformInstruction (kTypeDescriptor_GALGAS_parseRewindInstruction.mSlotID,
                                            categoryMethod_parseRewindInstruction_transformInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_parseRewindInstruction_transformInstruction (defineCategoryMethod_parseRewindInstruction_transformInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//   Overriding category method '@parseWhenInstruction transformInstruction'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_parseWhenInstruction_transformInstruction (const cPtr_syntaxInstructionAST * inObject,
                                                                      GALGAS_terminalSymbolsMapForGrammarAnalysis & ioArgument_ioActuallyUsedTerminalSymbolMap,
                                                                      const GALGAS_nonTerminalSymbolMapForGrammarAnalysis constinArgument_inNonTerminalSymbolMap,
                                                                      GALGAS_uint & ioArgument_ioAddedNonTerminalIndex,
                                                                      GALGAS_syntaxInstructionListForGrammarAnalysis & ioArgument_ioSyntaxInstructionList,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_parseWhenInstruction * object = (const cPtr_parseWhenInstruction *) inObject ;
  macroValidSharedObject (object, cPtr_parseWhenInstruction) ;
  {
  routine_transformInstructionList (object->mAttribute_mElseInstructionList, ioArgument_ioActuallyUsedTerminalSymbolMap, constinArgument_inNonTerminalSymbolMap, ioArgument_ioAddedNonTerminalIndex, ioArgument_ioSyntaxInstructionList, inCompiler COMMA_SOURCE_FILE_AT_LINE (345)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_parseWhenInstruction_transformInstruction (void) {
  enterCategoryMethod_transformInstruction (kTypeDescriptor_GALGAS_parseWhenInstruction.mSlotID,
                                            categoryMethod_parseWhenInstruction_transformInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_parseWhenInstruction_transformInstruction (defineCategoryMethod_parseWhenInstruction_transformInstruction, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//   Overriding category method '@parseLoopInstruction transformInstruction'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_parseLoopInstruction_transformInstruction (const cPtr_syntaxInstructionAST * inObject,
                                                                      GALGAS_terminalSymbolsMapForGrammarAnalysis & ioArgument_ioActuallyUsedTerminalSymbolMap,
                                                                      const GALGAS_nonTerminalSymbolMapForGrammarAnalysis constinArgument_inNonTerminalSymbolMap,
                                                                      GALGAS_uint & ioArgument_ioAddedNonTerminalIndex,
                                                                      GALGAS_syntaxInstructionListForGrammarAnalysis & ioArgument_ioSyntaxInstructionList,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_parseLoopInstruction * object = (const cPtr_parseLoopInstruction *) inObject ;
  macroValidSharedObject (object, cPtr_parseLoopInstruction) ;
  {
  routine_transformInstructionList (object->mAttribute_mDoInstructionList, ioArgument_ioActuallyUsedTerminalSymbolMap, constinArgument_inNonTerminalSymbolMap, ioArgument_ioAddedNonTerminalIndex, ioArgument_ioSyntaxInstructionList, inCompiler COMMA_SOURCE_FILE_AT_LINE (362)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_parseLoopInstruction_transformInstruction (void) {
  enterCategoryMethod_transformInstruction (kTypeDescriptor_GALGAS_parseLoopInstruction.mSlotID,
                                            categoryMethod_parseLoopInstruction_transformInstruction) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_parseLoopInstruction_transformInstruction (defineCategoryMethod_parseLoopInstruction_transformInstruction, NULL) ;

//-----------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList_2E_element::GALGAS_nonTerminalToAddList_2E_element (void) :
mAttribute_mSyntaxComponentName (),
mAttribute_mNonTerminalToAddCount () {
}

//-----------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList_2E_element::~ GALGAS_nonTerminalToAddList_2E_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList_2E_element::GALGAS_nonTerminalToAddList_2E_element (const GALGAS_string & inOperand0,
                                                                                const GALGAS_uint & inOperand1) :
mAttribute_mSyntaxComponentName (inOperand0),
mAttribute_mNonTerminalToAddCount (inOperand1) {
}

//-----------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList_2E_element GALGAS_nonTerminalToAddList_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_nonTerminalToAddList_2E_element (GALGAS_string::constructor_default (HERE),
                                                 GALGAS_uint::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList_2E_element GALGAS_nonTerminalToAddList_2E_element::constructor_new (const GALGAS_string & inOperand0,
                                                                                                const GALGAS_uint & inOperand1 
                                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_nonTerminalToAddList_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_nonTerminalToAddList_2E_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_nonTerminalToAddList_2E_element::objectCompare (const GALGAS_nonTerminalToAddList_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mSyntaxComponentName.objectCompare (inOperand.mAttribute_mSyntaxComponentName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mNonTerminalToAddCount.objectCompare (inOperand.mAttribute_mNonTerminalToAddCount) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_nonTerminalToAddList_2E_element::isValid (void) const {
  return mAttribute_mSyntaxComponentName.isValid () && mAttribute_mNonTerminalToAddCount.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_nonTerminalToAddList_2E_element::drop (void) {
  mAttribute_mSyntaxComponentName.drop () ;
  mAttribute_mNonTerminalToAddCount.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_nonTerminalToAddList_2E_element::description (C_String & ioString,
                                                          const int32_t inIndentation) const {
  ioString << "<struct @nonTerminalToAddList.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mSyntaxComponentName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mNonTerminalToAddCount.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_string GALGAS_nonTerminalToAddList_2E_element::reader_mSyntaxComponentName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSyntaxComponentName ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_nonTerminalToAddList_2E_element::reader_mNonTerminalToAddCount (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mNonTerminalToAddCount ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                     @nonTerminalToAddList.element type                      *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_nonTerminalToAddList_2E_element ("nonTerminalToAddList.element",
                                                        NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_nonTerminalToAddList_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_nonTerminalToAddList_2E_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_nonTerminalToAddList_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_nonTerminalToAddList_2E_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_nonTerminalToAddList_2E_element GALGAS_nonTerminalToAddList_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                              C_Compiler * inCompiler
                                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_nonTerminalToAddList_2E_element result ;
  const GALGAS_nonTerminalToAddList_2E_element * p = (const GALGAS_nonTerminalToAddList_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_nonTerminalToAddList_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("nonTerminalToAddList.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


