//---------------------------------------------------------------------------*
//                                                                           *
//                           File 'guiSyntax.cpp'                            *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    november 11th, 2010, at 12h16'29"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "guiSyntax.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "guiSyntax.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'gui_component_start_symbol'       *
//                                                                           *
//---------------------------------------------------------------------------*

void guiSyntax::rule_guiSyntax_gui_5F_component_5F_start_5F_symbol_i0_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_guiComponentAST &var_cas_outGuiComponentRoot) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_gui) COMMA_HERE) ;
  GGS_lstring  var_cas_mGUIName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mGUIName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_lstring  var_cas_mGUIClass ;
  inLexique.assignFromAttribute_tokenString (var_cas_mGUIClass) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_lstringlist  var_cas_importedOptionList = GGS_lstringlist ::constructor_emptyList () ;
  GGS_guiSimpleAttributeListAST  var_cas_simpleGlobalAttributes = GGS_guiSimpleAttributeListAST ::constructor_emptyList () ;
  GGS_withLexiqueListAST  var_cas_withLexiqueList = GGS_withLexiqueListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_guiSyntax_0 (inLexique)) {
        case 2 : {
          GGS_lstring  var_cas_mKey ;
          inLexique.assignFromAttribute_tokenString (var_cas_mKey) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
          GGS_lstring  var_cas_mValue = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (51)) ;
          { bool syntaxRepeat_1 = true ;
            while (syntaxRepeat_1) {
                GGS_lstring  var_cas_value ;
                inLexique.assignFromAttribute_tokenString (var_cas_value) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
                var_cas_mValue = GGS_lstring ::constructor_new (inLexique, (var_cas_mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (54))).operator_concat (var_cas_value.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (54))), var_cas_value.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (54)) COMMA_SOURCE_FILE_AT_LINE (54)) ;
              switch (select_guiSyntax_1 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_1 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          var_cas_simpleGlobalAttributes.addAssign_operation (var_cas_mKey, var_cas_mValue) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_with) COMMA_HERE) ;
          switch (select_guiSyntax_2 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_option) COMMA_HERE) ;
              GGS_lstring  var_cas_optionReference ;
              inLexique.assignFromAttribute_tokenString (var_cas_optionReference) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
              var_cas_importedOptionList.addAssign_operation (var_cas_optionReference) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_lexique) COMMA_HERE) ;
              GGS_lstring  var_cas_lexiqueReference ;
              inLexique.assignFromAttribute_tokenString (var_cas_lexiqueReference) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
              GGS_guiLabelListAST  var_cas_labels = GGS_guiLabelListAST ::constructor_emptyList () ;
              GGS_guiSimpleAttributeListAST  var_cas_simpleAttributes = GGS_guiSimpleAttributeListAST ::constructor_emptyList () ;
              GGS_guiCompoundAttributeListAST  var_cas_compoundAttributes = GGS_guiCompoundAttributeListAST ::constructor_emptyList () ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7B_) COMMA_HERE) ;
              { bool syntaxRepeat_3 = true ;
                while (syntaxRepeat_3) {
                  switch (select_guiSyntax_3 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_label) COMMA_HERE) ;
                      GGS_lstringlist  var_cas_terminalList = GGS_lstringlist ::constructor_emptyList () ;
                      { bool syntaxRepeat_4 = true ;
                        while (syntaxRepeat_4) {
                            GGS_lstring  var_cas_terminal ;
                            inLexique.assignFromAttribute_tokenString (var_cas_terminal) ;
                            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
                            var_cas_terminalList.addAssign_operation (var_cas_terminal) ;
                          switch (select_guiSyntax_4 (inLexique)) {
                            case 2 : {
                              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
                              } break ;
                            default :
                              syntaxRepeat_4 = false ;
                              break ;
                          }
                        }
                      }
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
                      var_cas_labels.addAssign_operation (var_cas_terminalList, GGS_location (inLexique)) ;
                      } break ;
                    case 3 : {
                      GGS_lstring  var_cas_key ;
                      inLexique.assignFromAttribute_tokenString (var_cas_key) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
                      GGS_lstring  var_cas_name ;
                      inLexique.assignFromAttribute_tokenString (var_cas_name) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
                      GGS_lstring  var_cas_value = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (89)) ;
                      { bool syntaxRepeat_5 = true ;
                        while (syntaxRepeat_5) {
                            GGS_lstring  var_cas_v ;
                            inLexique.assignFromAttribute_tokenString (var_cas_v) ;
                            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
                            var_cas_value = GGS_lstring ::constructor_new (inLexique, (var_cas_value.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (92))).operator_concat (var_cas_v.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (92))), var_cas_v.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (92)) COMMA_SOURCE_FILE_AT_LINE (92)) ;
                          switch (select_guiSyntax_5 (inLexique)) {
                            case 2 : {
                              } break ;
                            default :
                              syntaxRepeat_5 = false ;
                              break ;
                          }
                        }
                      }
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
                      var_cas_compoundAttributes.addAssign_operation (var_cas_key, var_cas_name, var_cas_value) ;
                      } break ;
                    case 4 : {
                      GGS_lstring  var_cas_name ;
                      inLexique.assignFromAttribute_tokenString (var_cas_name) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
                      GGS_lstring  var_cas_value ;
                      inLexique.assignFromAttribute_tokenString (var_cas_value) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
                      var_cas_simpleAttributes.addAssign_operation (var_cas_name, var_cas_value) ;
                      } break ;
                    default :
                      syntaxRepeat_3 = false ;
                      break ;
                  }
                }
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7D_) COMMA_HERE) ;
              var_cas_withLexiqueList.addAssign_operation (var_cas_lexiqueReference, var_cas_labels, var_cas_simpleAttributes, var_cas_compoundAttributes) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_gui) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outGuiComponentRoot = GGS_guiComponentAST::constructor_new (var_cas_mGUIName, var_cas_mGUIClass, var_cas_importedOptionList, var_cas_simpleGlobalAttributes, var_cas_withLexiqueList) ;
}

//---------------------------------------------------------------------------*

