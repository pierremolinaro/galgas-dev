//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'galgasTemplateGrammar.cpp'                      *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                       march 29th, 2008, at 9h29'6"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include "utilities/MF_MemoryControl.h"

//---------------------------------------------------------------------------*

#include "galgasTemplateGrammar.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "galgasTemplateGrammar.gGrammar", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//              L L ( 1 )    P R O D U C T I O N    R U L E S                *
//                                                                           *
//---------------------------------------------------------------------------*

#define TERMINAL(t)     ((t)+1)
#define NONTERMINAL(nt) ((-nt)-1)
#define END_PRODUCTION  (0)

static const sint16 gProductions [] = {
// At index 0 : <lexique_component_start_symbol>, in file 'galgasTemplateParser.ggs', line 27
  NONTERMINAL (1) // <select_repeat_galgasTemplateParser_0>
, END_PRODUCTION
//---- Added productions from 'select' and 'repeat' instructions
// At index 2 : <select_repeat_galgasTemplateParser_0>, in file 'galgasTemplateParser.ggs', line 29
, END_PRODUCTION
// At index 3 : <select_repeat_galgasTemplateParser_0>, in file 'galgasTemplateParser.ggs', line 29
, TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) // $identifier$
, NONTERMINAL (1) // <select_repeat_galgasTemplateParser_0>
, END_PRODUCTION
// At index 6 : <>, in file '.ggs', line 0
, NONTERMINAL (0) // <lexique_component_start_symbol>
, END_PRODUCTION
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     P R O D U C T I O N    N A M E S                      *
//                                                                           *
//---------------------------------------------------------------------------*

static const char * gProductionNames [4] = {
 "<lexique_component_start_symbol>, in file 'galgasTemplateParser.ggs', line 27", // at index 0
 "<select_repeat_galgasTemplateParser_0>, in file 'galgasTemplateParser.ggs', line 29", // at index 1
 "<select_repeat_galgasTemplateParser_0>, in file 'galgasTemplateParser.ggs', line 29", // at index 2
 "<>, in file '.ggs', line 0" // at index 3
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            L L ( 1 )    P R O D U C T I O N    I N D E X E S              *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint16 gProductionIndexes [4] = {
0, // index 0 : <lexique_component_start_symbol>, in file 'galgasTemplateParser.ggs', line 27
2, // index 1 : <select_repeat_galgasTemplateParser_0>, in file 'galgasTemplateParser.ggs', line 29
3, // index 2 : <select_repeat_galgasTemplateParser_0>, in file 'galgasTemplateParser.ggs', line 29
6 // index 3 : <>, in file '.ggs', line 0
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//      L L ( 1 )    F I R S T    P R O D U C T I O N    I N D E X E S       *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint16 gFirstProductionIndexes [4] = {
0, // at 0 : <lexique_component_start_symbol>
1, // at 1 : <select_repeat_galgasTemplateParser_0>
3, // at 2 : <>
0} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               L L ( 1 )    D E C I S I O N    T A B L E S                 *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint16 gDecision [] = {
// At index 0 : <lexique_component_start_symbol> only one production, no choice
  -1,
//---- Added non terminal symbols from 'select' and 'repeat' instructions
// At index 1 : <select_repeat_galgasTemplateParser_0>
galgasTemplateScanner::galgasTemplateScanner_1_, -1, // Choice 1
galgasTemplateScanner::galgasTemplateScanner_1_identifier, -1, // Choice 2
  -1,
// At index 6 : <> only one production, no choice
  -1,
0} ;

//---------------------------------------------------------------------------*
//                                                                           *
//       L L ( 1 )    D E C I S I O N    T A B L E S    I N D E X E S        *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint16 gDecisionIndexes [4] = {
0, // at 0 : <lexique_component_start_symbol>
1, // at 1 : <select_repeat_galgasTemplateParser_0>
6, // at 2 : <>
0} ;

//---------------------------------------------------------------------------*
//                                                                           *
//       'lexique_component_start_symbol' non terminal implementation        *
//                                                                           *
//---------------------------------------------------------------------------*

void galgasTemplateGrammar::
nt_lexique_component_start_symbol_ (galgasTemplateScanner & _inLexique) {
pr_lexique_component_start_symbol_galgasTemplateParser_27_4_ (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Grammar start symbol implementation                     *
//                                                                           *
//---------------------------------------------------------------------------*

void galgasTemplateGrammar::_performSourceFileParsing_ (C_Compiler & _inCompiler,
                                GGS_string * _inSentStringPtr,
                                const GGS_lstring _inFileName
                                COMMA_LOCATION_ARGS) {
  const C_String sourceFileName = _inFileName.string ().isAbsolutePath ()
    ? _inFileName.string ()
    : _inCompiler.sourceFileName ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (_inFileName.string ()) ;
  if (sourceFileName.fileExists ()) {
    galgasTemplateScanner * scanner_ = NULL ;
    macroMyNew (scanner_, galgasTemplateScanner (_inCompiler.ioParametersPtr (), sourceFileName COMMA_HERE)) ;
    if (scanner_->sourceText () != NULL) {
      scanner_->mPerformGeneration = _inCompiler.mPerformGeneration ;
// classCount : 0
      const bool ok = scanner_->performTopDownParsing (gProductions, gProductionNames, gProductionIndexes,
                                                       gFirstProductionIndexes, gDecision, gDecisionIndexes, 6) ;
      if (ok && ! scanner_->mParseOnlyFlag) {
        galgasTemplateGrammar _grammar ;
        _grammar.nt_lexique_component_start_symbol_ (*scanner_) ;
        if (_inSentStringPtr != NULL) {
          _inSentStringPtr->_dotAssign_operation (scanner_->sentString ()) ;
        }
      }
    }else{
      C_String message ;
      message << "the '" << sourceFileName << "' file exits, but cannot be read" ;
      _inFileName.signalSemanticError (_inCompiler, message COMMA_THERE) ;
    }
    macroDetachPointer (scanner_, galgasTemplateScanner) ;
  }else{
    C_String message ;
    message << "the '" << sourceFileName << "' file does not exist" ;
    _inFileName.signalSemanticError (_inCompiler, message COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------*

void galgasTemplateGrammar::_performSourceStringParsing_ (C_Compiler & _inCompiler,
                                GGS_string * _inSentStringPtr,
                                const GGS_string _inSourceString
                                COMMA_UNUSED_LOCATION_ARGS) {
  galgasTemplateScanner * scanner_ = NULL ;
  macroMyNew (scanner_, galgasTemplateScanner (_inCompiler.ioParametersPtr (), _inSourceString, "Error when parsing dynamic string" COMMA_HERE)) ;
  scanner_->mPerformGeneration = _inCompiler.mPerformGeneration ;
// classCount : 0
  const bool ok = scanner_->performTopDownParsing (gProductions, gProductionNames, gProductionIndexes,
                                                   gFirstProductionIndexes, gDecision, gDecisionIndexes, 6) ;
  if (ok && ! scanner_->mParseOnlyFlag) {
    galgasTemplateGrammar _grammar ;
    _grammar.nt_lexique_component_start_symbol_ (*scanner_) ;
    if (_inSentStringPtr != NULL) {
      _inSentStringPtr->_dotAssign_operation (scanner_->sentString ()) ;
    }
  }
  macroDetachPointer (scanner_, galgasTemplateScanner) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// 'select_repeat_galgasTemplateParser_0' added non terminal implementation  *
//                                                                           *
//---------------------------------------------------------------------------*


sint16 galgasTemplateGrammar::select_repeat_galgasTemplateParser_0 (galgasTemplateScanner & _inLexique) {
  return _inLexique.nextProductionIndex () ;
}

//---------------------------------------------------------------------------*

