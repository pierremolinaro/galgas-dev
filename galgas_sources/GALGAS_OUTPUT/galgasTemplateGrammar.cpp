//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'galgasTemplateGrammar.cpp'                      *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 9th, 2009, at 14h13'59"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include "utilities/MF_MemoryControl.h"

//---------------------------------------------------------------------------*

#include "galgasTemplateGrammar.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "galgasTemplateGrammar.gGrammar", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                  N O N    T E R M I N A L    N A M E S                    *
//                                                                           *
//---------------------------------------------------------------------------*

static const char * gNonTerminalNames [23] = {
  "<lexique_component_start_symbol>",// Index 0
  "<template_instruction>",// Index 1
  "<concatenation_term>",// Index 2
  "<expression>",// Index 3
  "<factor>",// Index 4
  "<output_expression_list>",// Index 5
  "<read_access>",// Index 6
  "<relation_factor>",// Index 7
  "<relation_term>",// Index 8
  "<simple_expression>",// Index 9
  "<term>",// Index 10
  "<select_repeat_galgasTemplateParser_0>",// Index 11
  "<select_repeat_templateExpressionParser_0>",// Index 12
  "<select_repeat_templateExpressionParser_1>",// Index 13
  "<select_repeat_templateExpressionParser_2>",// Index 14
  "<select_templateExpressionParser_3>",// Index 15
  "<select_repeat_templateExpressionParser_4>",// Index 16
  "<select_repeat_templateExpressionParser_5>",// Index 17
  "<select_templateExpressionParser_6>",// Index 18
  "<select_templateExpressionParser_7>",// Index 19
  "<select_templateExpressionParser_8>",// Index 20
  "<select_repeat_templateExpressionParser_9>",// Index 21
  "<>"// Index 22
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//           S L R    A N A L Y Z E R    A C T I O N    T A B L E            *
//                                                                           *
//---------------------------------------------------------------------------*

// Action tables handle shift and reduce actions ;
//  - a shift action is (terminal_symbol, SHIFT (n)) : if shifts to state n ;
//  - the accept action is (terminal_symbol, ACCEPT) ;
//  - a reduce action is (terminal_symbol, REDUCE (n)) ; if reduces to state n.

#define SHIFT(a) ((a) + 2)
#define REDUCE(a) (-(a) - 1)
#define ACCEPT (1)
#define END (-1)

static const sint16 gActionTable [] = {
// State S0 (index = 0)
  galgasTemplateScanner::galgasTemplateScanner_1_identifier, SHIFT (1)
, galgasTemplateScanner::galgasTemplateScanner_1_, REDUCE (26)
, END
// State S1 (index = 5)
, galgasTemplateScanner::galgasTemplateScanner_1_identifier, REDUCE (0)
, galgasTemplateScanner::galgasTemplateScanner_1_, REDUCE (0)
, END
// State S2 (index = 10)
, galgasTemplateScanner::galgasTemplateScanner_1_, ACCEPT
, END
// State S3 (index = 13)
, galgasTemplateScanner::galgasTemplateScanner_1_identifier, SHIFT (1)
, galgasTemplateScanner::galgasTemplateScanner_1_, REDUCE (26)
, END
// State S4 (index = 18)
, galgasTemplateScanner::galgasTemplateScanner_1_, REDUCE (1)
, END
// State S5 (index = 21)
, galgasTemplateScanner::galgasTemplateScanner_1_, REDUCE (27)
, END} ;

static const uint32 gActionTableIndex [6] = {
  0  // S0
, 5  // S1
, 10  // S2
, 13  // S3
, 18  // S4
, 21  // S5
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       SLR states successors table                         *
//                                                                           *
//---------------------------------------------------------------------------*

// Successor tables handle non terminal successors ;
// an entry is (non_terminal_symbol, n) ; successor is state n.

static const sint16 gSuccessorTable0 [7] = {0, 2,
  1, 3,
  11, 4, -1} ;

static const sint16 gSuccessorTable3 [5] = {1, 3,
  11, 5, -1} ;

static const sint16 * gSuccessorTable [6] = {
gSuccessorTable0, NULL, NULL, gSuccessorTable3, 
  NULL, NULL} ;

//---------------------------------------------------------------------------*
//                                                                           *
//     Production rules infos (left non terminal, size of right string)      *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint16 gProductionsTable [60 * 2] = {
1, 1,
  0, 1,
  3, 2,
  2, 2,
  8, 2,
  7, 2,
  9, 2,
  10, 2,
  4, 2,
  4, 1,
  4, 3,
  4, 2,
  4, 2,
  4, 1,
  4, 1,
  4, 1,
  4, 1,
  4, 1,
  4, 1,
  4, 1,
  4, 1,
  4, 3,
  4, 4,
  6, 1,
  6, 1,
  5, 1,
  11, 0,
  11, 2,
  12, 0,
  12, 3,
  13, 0,
  13, 3,
  13, 3,
  14, 0,
  14, 3,
  15, 0,
  15, 2,
  15, 2,
  15, 2,
  15, 2,
  15, 2,
  15, 2,
  16, 0,
  16, 3,
  16, 3,
  16, 3,
  16, 3,
  17, 0,
  17, 3,
  17, 3,
  17, 3,
  18, 2,
  18, 2,
  19, 1,
  19, 2,
  20, 2,
  20, 3,
  21, 0,
  21, 3,
  22, 1} ;

//---------------------------------------------------------------------------*
//                                                                           *
//       'lexique_component_start_symbol' non terminal implementation        *
//                                                                           *
//---------------------------------------------------------------------------*

void galgasTemplateGrammar::
nt_lexique_component_start_symbol_ (galgasTemplateScanner & inLexique,
                                GGS_typeVariablesMap & parameter_1,
                                const GGS_M_semanticsEntitiesForUse parameter_2,
                                GGS_templateInstructionList & parameter_3) {
  switch (inLexique.nextProductionIndex ()) {
  case 1 :
    pr_lexique_component_start_symbol_galgasTemplateParser_65_37_ (inLexique, parameter_1, parameter_2, parameter_3) ;
    break ;
  default :
    inLexique.internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Grammar start symbol implementation                     *
//                                                                           *
//---------------------------------------------------------------------------*

void galgasTemplateGrammar::_performSourceFileParsing_ (C_Compiler & _inCompiler,
                                const C_String & _inDependancyExtension,
                                const C_String & _inDependancyPath,
                                GGS_string * _inSentStringPtr,
                                const GGS_lstring _inFileName,
                                GGS_typeVariablesMap & parameter_1,
                                const GGS_M_semanticsEntitiesForUse parameter_2,
                                GGS_templateInstructionList & parameter_3
                                COMMA_LOCATION_ARGS) {
  const C_String sourceFileName = _inFileName.string ().isAbsolutePath ()
    ? _inFileName.string ()
    : _inCompiler.sourceFileName ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (_inFileName.string ()) ;
  if (sourceFileName.fileExists ()) {
    galgasTemplateScanner * scanner_ = NULL ;
    macroMyNew (scanner_, galgasTemplateScanner (& _inCompiler, _inDependancyExtension, _inDependancyPath, _inCompiler.ioParametersPtr (), sourceFileName COMMA_HERE)) ;
    if (scanner_->needsCompiling ()) {
      if (scanner_->sourceText () != NULL) {
        scanner_->mPerformGeneration = _inCompiler.mPerformGeneration ;
        const bool ok = scanner_->performBottomUpParsing (gActionTable, gNonTerminalNames,
                                                          gActionTableIndex, gSuccessorTable,
                                                          gProductionsTable) ;
        if (ok && ! scanner_->mParseOnlyFlag) {
          galgasTemplateGrammar _grammar ;
          _grammar.nt_lexique_component_start_symbol_ (*scanner_, parameter_1, parameter_2, parameter_3) ;
          if (_inSentStringPtr != NULL) {
            _inSentStringPtr->dotAssign_operation (scanner_->sentString ()) ;
          }
        }
      }else{
        C_String message ;
        message << "the '" << sourceFileName << "' file exits, but cannot be read" ;
        _inFileName.signalSemanticError (_inCompiler, message COMMA_THERE) ;
      parameter_3.drop () ;
      }
    }
    macroDetachPointer (scanner_, galgasTemplateScanner) ;
  }else{
    C_String message ;
    message << "the '" << sourceFileName << "' file does not exist" ;
    _inFileName.signalSemanticError (_inCompiler, message COMMA_THERE) ;
    parameter_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

void galgasTemplateGrammar::_performSourceStringParsing_ (C_Compiler & _inCompiler,
                                GGS_string * _inSentStringPtr,
                                const GGS_string _inSourceString,
                                GGS_typeVariablesMap & parameter_1,
                                const GGS_M_semanticsEntitiesForUse parameter_2,
                                GGS_templateInstructionList & parameter_3
                                COMMA_UNUSED_LOCATION_ARGS) {
  galgasTemplateScanner * scanner_ = NULL ;
  macroMyNew (scanner_, galgasTemplateScanner (& _inCompiler, _inCompiler.ioParametersPtr (), _inSourceString.string (), "Error when parsing dynamic string" COMMA_HERE)) ;
  if (scanner_->sourceText () != NULL) {
    scanner_->mPerformGeneration = _inCompiler.mPerformGeneration ;
    const bool ok = scanner_->performBottomUpParsing (gActionTable, gNonTerminalNames,
                                                      gActionTableIndex, gSuccessorTable,
                                                      gProductionsTable) ;
    if (ok && ! scanner_->mParseOnlyFlag) {
      galgasTemplateGrammar _grammar ;
      _grammar.nt_lexique_component_start_symbol_ (*scanner_, parameter_1, parameter_2, parameter_3) ;
      if (_inSentStringPtr != NULL) {
        _inSentStringPtr->dotAssign_operation (scanner_->sentString ()) ;
      }
    }
  }
  macroDetachPointer (scanner_, galgasTemplateScanner) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            'template_instruction' non terminal implementation             *
//                                                                           *
//---------------------------------------------------------------------------*

void galgasTemplateGrammar::
nt_template_instruction_ (galgasTemplateScanner & inLexique,
                                GGS_typeVariablesMap & parameter_1,
                                const GGS_M_semanticsEntitiesForUse parameter_2,
                                GGS_templateInstructionList & parameter_3) {
  switch (inLexique.nextProductionIndex ()) {
  case 0 :
    pr_template_instruction_galgasTemplateParser_49_27_ (inLexique, parameter_1, parameter_2, parameter_3) ;
    break ;
  default :
    inLexique.internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             'concatenation_term' non terminal implementation              *
//                                                                           *
//---------------------------------------------------------------------------*

void galgasTemplateGrammar::
nt_concatenation_term_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse parameter_1,
                                const GGS_M_optionComponents parameter_2,
                                GGS_typeVariablesMap & parameter_3,
                                GGS_typeExpression & parameter_4,
                                GGS_AC_galgasType & parameter_5) {
  switch (inLexique.nextProductionIndex ()) {
  case 3 :
    pr_concatenation_term_templateExpressionParser_648_25_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  default :
    inLexique.internalBottomUpParserError (HERE) ;
  }
}

void galgasTemplateGrammar::
nt_concatenation_term_parse (galgasTemplateScanner & inLexique) {
  switch (inLexique.nextProductionIndex ()) {
  case 3 :
    pr_concatenation_term_templateExpressionParser_648_25_parse (inLexique) ;
    break ;
  default :
    inLexique.internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 'expression' non terminal implementation                  *
//                                                                           *
//---------------------------------------------------------------------------*

void galgasTemplateGrammar::
nt_expression_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse parameter_1,
                                const GGS_M_optionComponents parameter_2,
                                GGS_typeVariablesMap & parameter_3,
                                GGS_typeExpression & parameter_4,
                                GGS_AC_galgasType & parameter_5) {
  switch (inLexique.nextProductionIndex ()) {
  case 2 :
    pr_expression_templateExpressionParser_604_17_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  default :
    inLexique.internalBottomUpParserError (HERE) ;
  }
}

void galgasTemplateGrammar::
nt_expression_parse (galgasTemplateScanner & inLexique) {
  switch (inLexique.nextProductionIndex ()) {
  case 2 :
    pr_expression_templateExpressionParser_604_17_parse (inLexique) ;
    break ;
  default :
    inLexique.internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   'factor' non terminal implementation                    *
//                                                                           *
//---------------------------------------------------------------------------*

void galgasTemplateGrammar::
nt_factor_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse parameter_1,
                                const GGS_M_optionComponents parameter_2,
                                GGS_typeVariablesMap & parameter_3,
                                GGS_typeExpression & parameter_4,
                                GGS_AC_galgasType & parameter_5) {
  switch (inLexique.nextProductionIndex ()) {
  case 8 :
    pr_factor_templateExpressionParser_1041_13_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  case 9 :
    pr_factor_templateExpressionParser_1069_13_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  case 10 :
    pr_factor_templateExpressionParser_1087_13_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  case 11 :
    pr_factor_templateExpressionParser_1111_13_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  case 12 :
    pr_factor_templateExpressionParser_1139_13_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  case 13 :
    pr_factor_templateExpressionParser_1167_13_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  case 14 :
    pr_factor_templateExpressionParser_1185_13_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  case 15 :
    pr_factor_templateExpressionParser_1203_13_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  case 16 :
    pr_factor_templateExpressionParser_1222_13_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  case 17 :
    pr_factor_templateExpressionParser_1241_13_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  case 18 :
    pr_factor_templateExpressionParser_1260_13_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  case 19 :
    pr_factor_templateExpressionParser_1279_13_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  case 20 :
    pr_factor_templateExpressionParser_1298_13_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  case 21 :
    pr_factor_templateExpressionParser_1319_13_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  case 22 :
    pr_factor_templateExpressionParser_1407_13_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  default :
    inLexique.internalBottomUpParserError (HERE) ;
  }
}

void galgasTemplateGrammar::
nt_factor_parse (galgasTemplateScanner & inLexique) {
  switch (inLexique.nextProductionIndex ()) {
  case 8 :
    pr_factor_templateExpressionParser_1041_13_parse (inLexique) ;
    break ;
  case 9 :
    pr_factor_templateExpressionParser_1069_13_parse (inLexique) ;
    break ;
  case 10 :
    pr_factor_templateExpressionParser_1087_13_parse (inLexique) ;
    break ;
  case 11 :
    pr_factor_templateExpressionParser_1111_13_parse (inLexique) ;
    break ;
  case 12 :
    pr_factor_templateExpressionParser_1139_13_parse (inLexique) ;
    break ;
  case 13 :
    pr_factor_templateExpressionParser_1167_13_parse (inLexique) ;
    break ;
  case 14 :
    pr_factor_templateExpressionParser_1185_13_parse (inLexique) ;
    break ;
  case 15 :
    pr_factor_templateExpressionParser_1203_13_parse (inLexique) ;
    break ;
  case 16 :
    pr_factor_templateExpressionParser_1222_13_parse (inLexique) ;
    break ;
  case 17 :
    pr_factor_templateExpressionParser_1241_13_parse (inLexique) ;
    break ;
  case 18 :
    pr_factor_templateExpressionParser_1260_13_parse (inLexique) ;
    break ;
  case 19 :
    pr_factor_templateExpressionParser_1279_13_parse (inLexique) ;
    break ;
  case 20 :
    pr_factor_templateExpressionParser_1298_13_parse (inLexique) ;
    break ;
  case 21 :
    pr_factor_templateExpressionParser_1319_13_parse (inLexique) ;
    break ;
  case 22 :
    pr_factor_templateExpressionParser_1407_13_parse (inLexique) ;
    break ;
  default :
    inLexique.internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           'output_expression_list' non terminal implementation            *
//                                                                           *
//---------------------------------------------------------------------------*

void galgasTemplateGrammar::
nt_output_expression_list_ (galgasTemplateScanner & inLexique,
                                GGS_typeExpressionList & parameter_1,
                                const GGS_typeListeAttributsSemantiques parameter_2,
                                const GGS_M_semanticsEntitiesForUse parameter_3,
                                const GGS_M_optionComponents parameter_4,
                                GGS_typeVariablesMap & parameter_5) {
  switch (inLexique.nextProductionIndex ()) {
  case 25 :
    pr_output_expression_list_templateExpressionParser_1498_29_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  default :
    inLexique.internalBottomUpParserError (HERE) ;
  }
}

void galgasTemplateGrammar::
nt_output_expression_list_parse (galgasTemplateScanner & inLexique) {
  switch (inLexique.nextProductionIndex ()) {
  case 25 :
    pr_output_expression_list_templateExpressionParser_1498_29_parse (inLexique) ;
    break ;
  default :
    inLexique.internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                'read_access' non terminal implementation                  *
//                                                                           *
//---------------------------------------------------------------------------*

void galgasTemplateGrammar::
nt_read_access_ (galgasTemplateScanner & inLexique,
                                GGS_lstring & parameter_1,
                                GGS_typeCplusPlusName & parameter_2,
                                GGS_AC_galgasType & parameter_3,
                                GGS_typeVariablesMap & parameter_4) {
  switch (inLexique.nextProductionIndex ()) {
  case 23 :
    pr_read_access_templateExpressionParser_1460_18_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4) ;
    break ;
  case 24 :
    pr_read_access_templateExpressionParser_1476_18_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4) ;
    break ;
  default :
    inLexique.internalBottomUpParserError (HERE) ;
  }
}

void galgasTemplateGrammar::
nt_read_access_parse (galgasTemplateScanner & inLexique) {
  switch (inLexique.nextProductionIndex ()) {
  case 23 :
    pr_read_access_templateExpressionParser_1460_18_parse (inLexique) ;
    break ;
  case 24 :
    pr_read_access_templateExpressionParser_1476_18_parse (inLexique) ;
    break ;
  default :
    inLexique.internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              'relation_factor' non terminal implementation                *
//                                                                           *
//---------------------------------------------------------------------------*

void galgasTemplateGrammar::
nt_relation_factor_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse parameter_1,
                                const GGS_M_optionComponents parameter_2,
                                GGS_typeVariablesMap & parameter_3,
                                GGS_typeExpression & parameter_4,
                                GGS_AC_galgasType & parameter_5) {
  switch (inLexique.nextProductionIndex ()) {
  case 5 :
    pr_relation_factor_templateExpressionParser_756_22_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  default :
    inLexique.internalBottomUpParserError (HERE) ;
  }
}

void galgasTemplateGrammar::
nt_relation_factor_parse (galgasTemplateScanner & inLexique) {
  switch (inLexique.nextProductionIndex ()) {
  case 5 :
    pr_relation_factor_templateExpressionParser_756_22_parse (inLexique) ;
    break ;
  default :
    inLexique.internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               'relation_term' non terminal implementation                 *
//                                                                           *
//---------------------------------------------------------------------------*

void galgasTemplateGrammar::
nt_relation_term_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse parameter_1,
                                const GGS_M_optionComponents parameter_2,
                                GGS_typeVariablesMap & parameter_3,
                                GGS_typeExpression & parameter_4,
                                GGS_AC_galgasType & parameter_5) {
  switch (inLexique.nextProductionIndex ()) {
  case 4 :
    pr_relation_term_templateExpressionParser_712_20_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  default :
    inLexique.internalBottomUpParserError (HERE) ;
  }
}

void galgasTemplateGrammar::
nt_relation_term_parse (galgasTemplateScanner & inLexique) {
  switch (inLexique.nextProductionIndex ()) {
  case 4 :
    pr_relation_term_templateExpressionParser_712_20_parse (inLexique) ;
    break ;
  default :
    inLexique.internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             'simple_expression' non terminal implementation               *
//                                                                           *
//---------------------------------------------------------------------------*

void galgasTemplateGrammar::
nt_simple_expression_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse parameter_1,
                                const GGS_M_optionComponents parameter_2,
                                GGS_typeVariablesMap & parameter_3,
                                GGS_typeExpression & parameter_4,
                                GGS_AC_galgasType & parameter_5) {
  switch (inLexique.nextProductionIndex ()) {
  case 6 :
    pr_simple_expression_templateExpressionParser_881_24_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  default :
    inLexique.internalBottomUpParserError (HERE) ;
  }
}

void galgasTemplateGrammar::
nt_simple_expression_parse (galgasTemplateScanner & inLexique) {
  switch (inLexique.nextProductionIndex ()) {
  case 6 :
    pr_simple_expression_templateExpressionParser_881_24_parse (inLexique) ;
    break ;
  default :
    inLexique.internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    'term' non terminal implementation                     *
//                                                                           *
//---------------------------------------------------------------------------*

void galgasTemplateGrammar::
nt_term_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse parameter_1,
                                const GGS_M_optionComponents parameter_2,
                                GGS_typeVariablesMap & parameter_3,
                                GGS_typeExpression & parameter_4,
                                GGS_AC_galgasType & parameter_5) {
  switch (inLexique.nextProductionIndex ()) {
  case 7 :
    pr_term_templateExpressionParser_969_11_ (inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  default :
    inLexique.internalBottomUpParserError (HERE) ;
  }
}

void galgasTemplateGrammar::
nt_term_parse (galgasTemplateScanner & inLexique) {
  switch (inLexique.nextProductionIndex ()) {
  case 7 :
    pr_term_templateExpressionParser_969_11_parse (inLexique) ;
    break ;
  default :
    inLexique.internalBottomUpParserError (HERE) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    'select_repeat_galgasTemplateParser_0' non terminal implementation     *
//                                                                           *
//---------------------------------------------------------------------------*


sint16 galgasTemplateGrammar::select_repeat_galgasTemplateParser_0 (galgasTemplateScanner & inLexique) {
// Productions numbers : 26 27
  return (sint16) (inLexique.nextProductionIndex () - 25) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'select_repeat_templateExpressionParser_0' non terminal implementation   *
//                                                                           *
//---------------------------------------------------------------------------*


sint16 galgasTemplateGrammar::select_repeat_templateExpressionParser_0 (galgasTemplateScanner & inLexique) {
// Productions numbers : 28 29
  return (sint16) (inLexique.nextProductionIndex () - 27) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'select_repeat_templateExpressionParser_1' non terminal implementation   *
//                                                                           *
//---------------------------------------------------------------------------*


sint16 galgasTemplateGrammar::select_repeat_templateExpressionParser_1 (galgasTemplateScanner & inLexique) {
// Productions numbers : 30 31 32
  return (sint16) (inLexique.nextProductionIndex () - 29) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'select_repeat_templateExpressionParser_2' non terminal implementation   *
//                                                                           *
//---------------------------------------------------------------------------*


sint16 galgasTemplateGrammar::select_repeat_templateExpressionParser_2 (galgasTemplateScanner & inLexique) {
// Productions numbers : 33 34
  return (sint16) (inLexique.nextProductionIndex () - 32) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     'select_templateExpressionParser_3' non terminal implementation       *
//                                                                           *
//---------------------------------------------------------------------------*


sint16 galgasTemplateGrammar::select_templateExpressionParser_3 (galgasTemplateScanner & inLexique) {
// Productions numbers : 35 36 37 38 39 40 41
  return (sint16) (inLexique.nextProductionIndex () - 34) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'select_repeat_templateExpressionParser_4' non terminal implementation   *
//                                                                           *
//---------------------------------------------------------------------------*


sint16 galgasTemplateGrammar::select_repeat_templateExpressionParser_4 (galgasTemplateScanner & inLexique) {
// Productions numbers : 42 43 44 45 46
  return (sint16) (inLexique.nextProductionIndex () - 41) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'select_repeat_templateExpressionParser_5' non terminal implementation   *
//                                                                           *
//---------------------------------------------------------------------------*


sint16 galgasTemplateGrammar::select_repeat_templateExpressionParser_5 (galgasTemplateScanner & inLexique) {
// Productions numbers : 47 48 49 50
  return (sint16) (inLexique.nextProductionIndex () - 46) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     'select_templateExpressionParser_6' non terminal implementation       *
//                                                                           *
//---------------------------------------------------------------------------*


sint16 galgasTemplateGrammar::select_templateExpressionParser_6 (galgasTemplateScanner & inLexique) {
// Productions numbers : 51 52
  return (sint16) (inLexique.nextProductionIndex () - 50) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     'select_templateExpressionParser_7' non terminal implementation       *
//                                                                           *
//---------------------------------------------------------------------------*


sint16 galgasTemplateGrammar::select_templateExpressionParser_7 (galgasTemplateScanner & inLexique) {
// Productions numbers : 53 54
  return (sint16) (inLexique.nextProductionIndex () - 52) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     'select_templateExpressionParser_8' non terminal implementation       *
//                                                                           *
//---------------------------------------------------------------------------*


sint16 galgasTemplateGrammar::select_templateExpressionParser_8 (galgasTemplateScanner & inLexique) {
// Productions numbers : 55 56
  return (sint16) (inLexique.nextProductionIndex () - 54) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'select_repeat_templateExpressionParser_9' non terminal implementation   *
//                                                                           *
//---------------------------------------------------------------------------*


sint16 galgasTemplateGrammar::select_repeat_templateExpressionParser_9 (galgasTemplateScanner & inLexique) {
// Productions numbers : 57 58
  return (sint16) (inLexique.nextProductionIndex () - 56) ;
}

//---------------------------------------------------------------------------*

