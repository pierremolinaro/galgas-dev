//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'option_metamodel.cpp'                         *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      march 20th, 2007, at 22h11'38"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

#include "option_metamodel.h"
#include "utilities/MF_MemoryControl.h"

//---------------------------------------------------------------------------*

#include <typeinfo>

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "option_metamodel.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                           Metamodel Management                            *
//                                                                           *
//---------------------------------------------------------------------------*

static C_MetamodelManager gMetamodelManager ;

//---------------------------------------------------------------------------*

uint32 _metamodel_index_for_option_metamodel (void) {
  return gMetamodelManager.mMetamodelIndex ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@optionComponentRootList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_optionComponentRoot::
cPtr_optionComponentRoot (const GGS_lstring & argument_0,
                                const GGS_commandLineOptionList & argument_1
                                COMMA_LOCATION_ARGS) :
C_GGS_MetamodelEntity (THERE),
mOptionComponentName (argument_0),
mOptions (argument_1) {
}

//---------------------------------------------------------------------------*

bool cPtr_optionComponentRoot::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_optionComponentRoot * _p = dynamic_cast <const cPtr_optionComponentRoot *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mOptionComponentName._operator_isEqual (_p->mOptionComponentName).boolValue ()
         && mOptions._operator_isEqual (_p->mOptions).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_optionComponentRoot::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @optionComponentRoot" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOptionComponentName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOptions.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

uint32 cPtr_optionComponentRoot::_metamodelIndex (void) const {
  return gMetamodelManager.mMetamodelIndex ;
}

//---------------------------------------------------------------------------*

uint32 cPtr_optionComponentRoot::_metamodelClassID (void) const {
  return 0 ;
}

//---------------------------------------------------------------------------*

cPtr_optionComponentRoot * cPtr_optionComponentRoot::
_cloneObject (void) const {
  cPtr_optionComponentRoot * _p = NULL ;
  macroMyNew (_p, cPtr_optionComponentRoot (mOptionComponentName, mOptions COMMA_HERE)) ;
  return _p ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     List '@optionComponentRootList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_optionComponentRootList::GGS_optionComponentRootList (void): AC_galgas_list () { // Default Constructor
}

//---------------------------------------------------------------------------*

GGS_optionComponentRootList::
GGS_optionComponentRootList (const GGS_optionComponentRootList & inSource): AC_galgas_list (inSource) {
}

//---------------------------------------------------------------------------*

GGS_bool GGS_optionComponentRootList::
_operator_isEqual (const GGS_optionComponentRootList & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_optionComponentRootList::
_operator_isNotEqual (const GGS_optionComponentRootList & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_optionComponentRootList::
_internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_commandLineOptionList & argument_1) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_optionComponentRootList::
_internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_commandLineOptionList & argument_1) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_optionComponentRootList::
_addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_commandLineOptionList & argument_1) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0,
                                argument_1) ;
  }
}

//---------------------------------------------------------------------------*

GGS_optionComponentRootList GGS_optionComponentRootList::
_operator_concat (const GGS_optionComponentRootList & inOperand) const {
  GGS_optionComponentRootList result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cPtr_optionComponentRoot * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mOptionComponentName ;
          GGS_commandLineOptionList  p_1 = p->mOptions ;
          result._internalAppendValues (p_0, p_1) ;
          p = p->nextObject () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_optionComponentRootList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0,
                     const GGS_commandLineOptionList & argument_1
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_optionComponentRootList::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mOptionComponentName,
                                _p->mOptions) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_optionComponentRootList  GGS_optionComponentRootList::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_optionComponentRootList result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_optionComponentRootList  GGS_optionComponentRootList::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_lstring & argument_0,
                           const GGS_commandLineOptionList & argument_1
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS_optionComponentRootList result ;
  result._alloc () ;
  result._addAssign_operation (argument_0, argument_1) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_optionComponentRootList::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@optionComponentRootList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_optionComponentRootList::
_addModel (const GGS_optionComponentRoot & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_optionComponentRootList::
method_first (C_Compiler & _inLexique,
              GGS_lstring & _out_0,
              GGS_commandLineOptionList & _out_1
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mOptionComponentName ;
    _out_1 = _p->mOptions ;
  }else{
    _out_0._drop_operation () ;
    _out_1._drop_operation () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_optionComponentRootList::
method_last (C_Compiler & _inLexique,
             GGS_lstring & _out_0,
             GGS_commandLineOptionList & _out_1
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mOptionComponentName ;
    _out_1 = _p->mOptions ;
  }else{
    _out_0._drop_operation () ;
    _out_1._drop_operation () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_optionComponentRootList::
modifier_popFirst (C_Compiler & _inLexique,
                 GGS_lstring & _out_0,
                 GGS_commandLineOptionList & _out_1
                 COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mOptionComponentName ;
    _out_1 = _p->mOptions ;
    _insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0._drop_operation () ;
    _out_1._drop_operation () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_optionComponentRootList::
modifier_popLast (C_Compiler & _inLexique,
                GGS_lstring & _out_0,
                GGS_commandLineOptionList & _out_1
                COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mOptionComponentName ;
    _out_1 = _p->mOptions ;
    _insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0._drop_operation () ;
    _out_1._drop_operation () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_optionComponentRoot'                   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_optionComponentRoot::
GGS_optionComponentRoot (void) {
  mPointer = NULL ;
}

//---------------------------------------------------------------------------*

GGS_optionComponentRoot::
GGS_optionComponentRoot (const GGS_optionComponentRoot & inOperand) {
  mPointer = (cPtr_optionComponentRoot *) NULL ;
  macroAssignPointer (mPointer, inOperand.mPointer) ;
}

//---------------------------------------------------------------------------*

GGS_optionComponentRoot::
~GGS_optionComponentRoot (void) {
  macroDetachPointer (mPointer, cPtr_optionComponentRoot) ;
}

//---------------------------------------------------------------------------*

bool GGS_optionComponentRoot::
_isBuilt (void) const {
  return mPointer != NULL ;
}

//---------------------------------------------------------------------------*

void GGS_optionComponentRoot::
operator = (const GGS_optionComponentRoot & inSource) {
  macroAssignPointer (mPointer, inSource.mPointer) ;
}

//---------------------------------------------------------------------------*

GGS_optionComponentRoot GGS_optionComponentRoot::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_commandLineOptionList & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_optionComponentRoot result ;
  macroMyNew (result.mPointer, cPtr_optionComponentRoot (argument_0,
                                argument_1 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_optionComponentRoot::
reader_mOptionComponentName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    result = mPointer->mOptionComponentName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_commandLineOptionList  GGS_optionComponentRoot::
reader_mOptions (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_commandLineOptionList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    result = mPointer->mOptions ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_optionComponentRoot::
_drop_operation (void) {
  macroDetachPointer (mPointer, cPtr_optionComponentRoot) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_optionComponentRoot::
_operator_isEqual (const GGS_optionComponentRoot & inOperand) const {
  bool built = _isBuilt () && inOperand._isBuilt () ;
  bool equal = mPointer == inOperand.mPointer ;
  if (built && ! equal) {
    equal = mPointer->isEqualToObject (inOperand.mPointer) ;
  }
  return GGS_bool (built, equal) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_optionComponentRoot::
_operator_isNotEqual (const GGS_optionComponentRoot & inOperand) const {
  bool built = _isBuilt () && inOperand._isBuilt () ;
  bool equal = mPointer == inOperand.mPointer ;
  if (built && ! equal) {
    equal = mPointer->isEqualToObject (inOperand.mPointer) ;
  }
  return GGS_bool (built, ! equal) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_optionComponentRoot::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<class @optionComponentRoot " ;
  if (_isBuilt ()) {
    mPointer->appendForDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_optionComponentRoot * GGS_optionComponentRoot::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@commandLineOptionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_commandLineOption::
cPtr_commandLineOption (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lchar & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_lstring & argument_4
                                COMMA_LOCATION_ARGS) :
C_GGS_MetamodelEntity (THERE),
mOptionTypeName (argument_0),
mOptionInternalName (argument_1),
mOptionInvocationLetter (argument_2),
mOptionInvocationString (argument_3),
mOptionComment (argument_4) {
}

//---------------------------------------------------------------------------*

bool cPtr_commandLineOption::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_commandLineOption * _p = dynamic_cast <const cPtr_commandLineOption *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mOptionTypeName._operator_isEqual (_p->mOptionTypeName).boolValue ()
         && mOptionInternalName._operator_isEqual (_p->mOptionInternalName).boolValue ()
         && mOptionInvocationLetter._operator_isEqual (_p->mOptionInvocationLetter).boolValue ()
         && mOptionInvocationString._operator_isEqual (_p->mOptionInvocationString).boolValue ()
         && mOptionComment._operator_isEqual (_p->mOptionComment).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_commandLineOption::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @commandLineOption" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOptionTypeName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOptionInternalName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOptionInvocationLetter.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOptionInvocationString.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOptionComment.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

uint32 cPtr_commandLineOption::_metamodelIndex (void) const {
  return gMetamodelManager.mMetamodelIndex ;
}

//---------------------------------------------------------------------------*

uint32 cPtr_commandLineOption::_metamodelClassID (void) const {
  return 1 ;
}

//---------------------------------------------------------------------------*

cPtr_commandLineOption * cPtr_commandLineOption::
_cloneObject (void) const {
  cPtr_commandLineOption * _p = NULL ;
  macroMyNew (_p, cPtr_commandLineOption (mOptionTypeName, mOptionInternalName, mOptionInvocationLetter, mOptionInvocationString, mOptionComment COMMA_HERE)) ;
  return _p ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      List '@commandLineOptionList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_commandLineOptionList::GGS_commandLineOptionList (void): AC_galgas_list () { // Default Constructor
}

//---------------------------------------------------------------------------*

GGS_commandLineOptionList::
GGS_commandLineOptionList (const GGS_commandLineOptionList & inSource): AC_galgas_list (inSource) {
}

//---------------------------------------------------------------------------*

GGS_bool GGS_commandLineOptionList::
_operator_isEqual (const GGS_commandLineOptionList & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_commandLineOptionList::
_operator_isNotEqual (const GGS_commandLineOptionList & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionList::
_internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_lchar & argument_2,
                    const GGS_lstring & argument_3,
                    const GGS_lstring & argument_4) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionList::
_internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_lchar & argument_2,
                    const GGS_lstring & argument_3,
                    const GGS_lstring & argument_4) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionList::
_addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lchar & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_lstring & argument_4) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4) ;
  }
}

//---------------------------------------------------------------------------*

GGS_commandLineOptionList GGS_commandLineOptionList::
_operator_concat (const GGS_commandLineOptionList & inOperand) const {
  GGS_commandLineOptionList result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cPtr_commandLineOption * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mOptionTypeName ;
          GGS_lstring  p_1 = p->mOptionInternalName ;
          GGS_lchar  p_2 = p->mOptionInvocationLetter ;
          GGS_lstring  p_3 = p->mOptionInvocationString ;
          GGS_lstring  p_4 = p->mOptionComment ;
          result._internalAppendValues (p_0, p_1, p_2, p_3, p_4) ;
          p = p->nextObject () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0,
                     const GGS_lstring & argument_1,
                     const GGS_lchar & argument_2,
                     const GGS_lstring & argument_3,
                     const GGS_lstring & argument_4
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionList::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mOptionTypeName,
                                _p->mOptionInternalName,
                                _p->mOptionInvocationLetter,
                                _p->mOptionInvocationString,
                                _p->mOptionComment) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_commandLineOptionList  GGS_commandLineOptionList::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_commandLineOptionList result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_commandLineOptionList  GGS_commandLineOptionList::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_lstring & argument_0,
                           const GGS_lstring & argument_1,
                           const GGS_lchar & argument_2,
                           const GGS_lstring & argument_3,
                           const GGS_lstring & argument_4
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS_commandLineOptionList result ;
  result._alloc () ;
  result._addAssign_operation (argument_0, argument_1, argument_2, argument_3, argument_4) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_commandLineOptionList::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@commandLineOptionList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionList::
_addModel (const GGS_commandLineOption & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionList::
method_first (C_Compiler & _inLexique,
              GGS_lstring & _out_0,
              GGS_lstring & _out_1,
              GGS_lchar & _out_2,
              GGS_lstring & _out_3,
              GGS_lstring & _out_4
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mOptionTypeName ;
    _out_1 = _p->mOptionInternalName ;
    _out_2 = _p->mOptionInvocationLetter ;
    _out_3 = _p->mOptionInvocationString ;
    _out_4 = _p->mOptionComment ;
  }else{
    _out_0._drop_operation () ;
    _out_1._drop_operation () ;
    _out_2._drop_operation () ;
    _out_3._drop_operation () ;
    _out_4._drop_operation () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionList::
method_last (C_Compiler & _inLexique,
             GGS_lstring & _out_0,
             GGS_lstring & _out_1,
             GGS_lchar & _out_2,
             GGS_lstring & _out_3,
             GGS_lstring & _out_4
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mOptionTypeName ;
    _out_1 = _p->mOptionInternalName ;
    _out_2 = _p->mOptionInvocationLetter ;
    _out_3 = _p->mOptionInvocationString ;
    _out_4 = _p->mOptionComment ;
  }else{
    _out_0._drop_operation () ;
    _out_1._drop_operation () ;
    _out_2._drop_operation () ;
    _out_3._drop_operation () ;
    _out_4._drop_operation () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionList::
modifier_popFirst (C_Compiler & _inLexique,
                 GGS_lstring & _out_0,
                 GGS_lstring & _out_1,
                 GGS_lchar & _out_2,
                 GGS_lstring & _out_3,
                 GGS_lstring & _out_4
                 COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mOptionTypeName ;
    _out_1 = _p->mOptionInternalName ;
    _out_2 = _p->mOptionInvocationLetter ;
    _out_3 = _p->mOptionInvocationString ;
    _out_4 = _p->mOptionComment ;
    _insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0._drop_operation () ;
    _out_1._drop_operation () ;
    _out_2._drop_operation () ;
    _out_3._drop_operation () ;
    _out_4._drop_operation () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_commandLineOptionList::
modifier_popLast (C_Compiler & _inLexique,
                GGS_lstring & _out_0,
                GGS_lstring & _out_1,
                GGS_lchar & _out_2,
                GGS_lstring & _out_3,
                GGS_lstring & _out_4
                COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mOptionTypeName ;
    _out_1 = _p->mOptionInternalName ;
    _out_2 = _p->mOptionInvocationLetter ;
    _out_3 = _p->mOptionInvocationString ;
    _out_4 = _p->mOptionComment ;
    _insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0._drop_operation () ;
    _out_1._drop_operation () ;
    _out_2._drop_operation () ;
    _out_3._drop_operation () ;
    _out_4._drop_operation () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_commandLineOption'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_commandLineOption::
GGS_commandLineOption (void) {
  mPointer = NULL ;
}

//---------------------------------------------------------------------------*

GGS_commandLineOption::
GGS_commandLineOption (const GGS_commandLineOption & inOperand) {
  mPointer = (cPtr_commandLineOption *) NULL ;
  macroAssignPointer (mPointer, inOperand.mPointer) ;
}

//---------------------------------------------------------------------------*

GGS_commandLineOption::
~GGS_commandLineOption (void) {
  macroDetachPointer (mPointer, cPtr_commandLineOption) ;
}

//---------------------------------------------------------------------------*

bool GGS_commandLineOption::
_isBuilt (void) const {
  return mPointer != NULL ;
}

//---------------------------------------------------------------------------*

void GGS_commandLineOption::
operator = (const GGS_commandLineOption & inSource) {
  macroAssignPointer (mPointer, inSource.mPointer) ;
}

//---------------------------------------------------------------------------*

GGS_commandLineOption GGS_commandLineOption::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_lchar & argument_2,
                 const GGS_lstring & argument_3,
                 const GGS_lstring & argument_4
                                COMMA_LOCATION_ARGS) {
  GGS_commandLineOption result ;
  macroMyNew (result.mPointer, cPtr_commandLineOption (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_commandLineOption::
reader_mOptionTypeName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    result = mPointer->mOptionTypeName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_commandLineOption::
reader_mOptionInternalName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    result = mPointer->mOptionInternalName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lchar  GGS_commandLineOption::
reader_mOptionInvocationLetter (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lchar   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    result = mPointer->mOptionInvocationLetter ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_commandLineOption::
reader_mOptionInvocationString (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    result = mPointer->mOptionInvocationString ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_commandLineOption::
reader_mOptionComment (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    result = mPointer->mOptionComment ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_commandLineOption::
_drop_operation (void) {
  macroDetachPointer (mPointer, cPtr_commandLineOption) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_commandLineOption::
_operator_isEqual (const GGS_commandLineOption & inOperand) const {
  bool built = _isBuilt () && inOperand._isBuilt () ;
  bool equal = mPointer == inOperand.mPointer ;
  if (built && ! equal) {
    equal = mPointer->isEqualToObject (inOperand.mPointer) ;
  }
  return GGS_bool (built, equal) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_commandLineOption::
_operator_isNotEqual (const GGS_commandLineOption & inOperand) const {
  bool built = _isBuilt () && inOperand._isBuilt () ;
  bool equal = mPointer == inOperand.mPointer ;
  if (built && ! equal) {
    equal = mPointer->isEqualToObject (inOperand.mPointer) ;
  }
  return GGS_bool (built, ! equal) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_commandLineOption::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<class @commandLineOption " ;
  if (_isBuilt ()) {
    mPointer->appendForDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_commandLineOption * GGS_commandLineOption::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return mPointer ;
  }
#endif

