//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'guiCompilation.cpp'                          *
//             Generated by version version GALGAS_BETA_VERSION              *
//                    november 14th, 2010, at 21h19'38"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include "guiCompilation.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_CLI_Options.h"

//---------------------------------------------------------------------------*

#include "lexiqueLL1grammar.h"
#include "galgas_cli_options.h"
#include "optionLL1grammar.h"
#include "guiGrammar.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "guiCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//           Class for element of '@guiCommandLineOptionList' list           *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_guiCommandLineOptionList : public cCollectionElement {
//--- List attributes
  public : GALGAS_string mAttribute_mOptionComponent ;
  public : GALGAS_string mAttribute_mOptionIdentifier ;
  public : GALGAS_char mAttribute_mOptionChar ;
  public : GALGAS_string mAttribute_mOptionString ;
  public : GALGAS_string mAttribute_mComment ;

//--- Constructor
  public : cCollectionElement_guiCommandLineOptionList (const GALGAS_string & in_mOptionComponent,
                                                        const GALGAS_string & in_mOptionIdentifier,
                                                        const GALGAS_char & in_mOptionChar,
                                                        const GALGAS_string & in_mOptionString,
                                                        const GALGAS_string & in_mComment
                                                        COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual enumComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_guiCommandLineOptionList::cCollectionElement_guiCommandLineOptionList (const GALGAS_string & in_mOptionComponent,
                                                                                          const GALGAS_string & in_mOptionIdentifier,
                                                                                          const GALGAS_char & in_mOptionChar,
                                                                                          const GALGAS_string & in_mOptionString,
                                                                                          const GALGAS_string & in_mComment
                                                                                          COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mOptionComponent (in_mOptionComponent),
mAttribute_mOptionIdentifier (in_mOptionIdentifier),
mAttribute_mOptionChar (in_mOptionChar),
mAttribute_mOptionString (in_mOptionString),
mAttribute_mComment (in_mComment) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_guiCommandLineOptionList::isValid (void) const {
  return mAttribute_mOptionComponent.isValid () && mAttribute_mOptionIdentifier.isValid () && mAttribute_mOptionChar.isValid () && mAttribute_mOptionString.isValid () && mAttribute_mComment.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_guiCommandLineOptionList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_guiCommandLineOptionList (mAttribute_mOptionComponent, mAttribute_mOptionIdentifier, mAttribute_mOptionChar, mAttribute_mOptionString, mAttribute_mComment COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_guiCommandLineOptionList::description (C_String & /* ioString */, const PMSInt32 /* inIndentation */) const {
// mAttribute_mOptionComponent.description (ioString, inIndentation) ;
// mAttribute_mOptionIdentifier.description (ioString, inIndentation) ;
// mAttribute_mOptionChar.description (ioString, inIndentation) ;
// mAttribute_mOptionString.description (ioString, inIndentation) ;
// mAttribute_mComment.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

enumComparisonResult cCollectionElement_guiCommandLineOptionList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_guiCommandLineOptionList * operand = (cCollectionElement_guiCommandLineOptionList *) inOperand ;
  enumComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mOptionComponent.objectCompare (operand->mAttribute_mOptionComponent) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOptionIdentifier.objectCompare (operand->mAttribute_mOptionIdentifier) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOptionChar.objectCompare (operand->mAttribute_mOptionChar) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mOptionString.objectCompare (operand->mAttribute_mOptionString) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mComment.objectCompare (operand->mAttribute_mComment) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_guiCommandLineOptionList::GALGAS_guiCommandLineOptionList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_guiCommandLineOptionList::GALGAS_guiCommandLineOptionList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_guiCommandLineOptionList GALGAS_guiCommandLineOptionList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_guiCommandLineOptionList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_guiCommandLineOptionList GALGAS_guiCommandLineOptionList::constructor_listWithValue (const GALGAS_string & inOperand0,
                                                                                            const GALGAS_string & inOperand1,
                                                                                            const GALGAS_char & inOperand2,
                                                                                            const GALGAS_string & inOperand3,
                                                                                            const GALGAS_string & inOperand4
                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_guiCommandLineOptionList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    result.createNewEmptyList (THERE) ;
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_guiCommandLineOptionList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

cCollectionElement_guiCommandLineOptionList * GALGAS_guiCommandLineOptionList::makeElement (const GALGAS_string & in_mOptionComponent,
                                                                                            const GALGAS_string & in_mOptionIdentifier,
                                                                                            const GALGAS_char & in_mOptionChar,
                                                                                            const GALGAS_string & in_mOptionString,
                                                                                            const GALGAS_string & in_mComment
                                                                                            COMMA_LOCATION_ARGS) {
  cCollectionElement_guiCommandLineOptionList * result = NULL ;
  macroMyNew (result, cCollectionElement_guiCommandLineOptionList (in_mOptionComponent,
                                                                                            in_mOptionIdentifier,
                                                                                            in_mOptionChar,
                                                                                            in_mOptionString,
                                                                                            in_mComment COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_guiCommandLineOptionList::addAssign_operation (const GALGAS_string & inOperand0,
                                                           const GALGAS_string & inOperand1,
                                                           const GALGAS_char & inOperand2,
                                                           const GALGAS_string & inOperand3,
                                                           const GALGAS_string & inOperand4
                                                           COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_guiCommandLineOptionList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_guiCommandLineOptionList::modifier_prependValue (GALGAS_string inOperand0,
                                                             GALGAS_string inOperand1,
                                                             GALGAS_char inOperand2,
                                                             GALGAS_string inOperand3,
                                                             GALGAS_string inOperand4
                                                             COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_guiCommandLineOptionList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_guiCommandLineOptionList::modifier_popFirst (GALGAS_string & outOperand0,
                                                         GALGAS_string & outOperand1,
                                                         GALGAS_char & outOperand2,
                                                         GALGAS_string & outOperand3,
                                                         GALGAS_string & outOperand4,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_guiCommandLineOptionList * p = (cCollectionElement_guiCommandLineOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_guiCommandLineOptionList) ;
    outOperand0 = p->mAttribute_mOptionComponent ;
    outOperand1 = p->mAttribute_mOptionIdentifier ;
    outOperand2 = p->mAttribute_mOptionChar ;
    outOperand3 = p->mAttribute_mOptionString ;
    outOperand4 = p->mAttribute_mComment ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_guiCommandLineOptionList::modifier_popLast (GALGAS_string & outOperand0,
                                                        GALGAS_string & outOperand1,
                                                        GALGAS_char & outOperand2,
                                                        GALGAS_string & outOperand3,
                                                        GALGAS_string & outOperand4,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_guiCommandLineOptionList * p = (cCollectionElement_guiCommandLineOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_guiCommandLineOptionList) ;
    outOperand0 = p->mAttribute_mOptionComponent ;
    outOperand1 = p->mAttribute_mOptionIdentifier ;
    outOperand2 = p->mAttribute_mOptionChar ;
    outOperand3 = p->mAttribute_mOptionString ;
    outOperand4 = p->mAttribute_mComment ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_guiCommandLineOptionList::method_first (GALGAS_string & outOperand0,
                                                    GALGAS_string & outOperand1,
                                                    GALGAS_char & outOperand2,
                                                    GALGAS_string & outOperand3,
                                                    GALGAS_string & outOperand4,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_guiCommandLineOptionList * p = (cCollectionElement_guiCommandLineOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_guiCommandLineOptionList) ;
    outOperand0 = p->mAttribute_mOptionComponent ;
    outOperand1 = p->mAttribute_mOptionIdentifier ;
    outOperand2 = p->mAttribute_mOptionChar ;
    outOperand3 = p->mAttribute_mOptionString ;
    outOperand4 = p->mAttribute_mComment ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_guiCommandLineOptionList::method_last (GALGAS_string & outOperand0,
                                                   GALGAS_string & outOperand1,
                                                   GALGAS_char & outOperand2,
                                                   GALGAS_string & outOperand3,
                                                   GALGAS_string & outOperand4,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_guiCommandLineOptionList * p = (cCollectionElement_guiCommandLineOptionList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_guiCommandLineOptionList) ;
    outOperand0 = p->mAttribute_mOptionComponent ;
    outOperand1 = p->mAttribute_mOptionIdentifier ;
    outOperand2 = p->mAttribute_mOptionChar ;
    outOperand3 = p->mAttribute_mOptionString ;
    outOperand4 = p->mAttribute_mComment ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_guiCommandLineOptionList GALGAS_guiCommandLineOptionList::operator_concat (const GALGAS_guiCommandLineOptionList & inOperand
                                                                                  COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_guiCommandLineOptionList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_guiCommandLineOptionList GALGAS_guiCommandLineOptionList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                                          const GALGAS_uint & inLength,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_guiCommandLineOptionList result = GALGAS_guiCommandLineOptionList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_guiCommandLineOptionList GALGAS_guiCommandLineOptionList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                          C_Compiler * inCompiler
                                                                                          COMMA_LOCATION_ARGS) const {
  GALGAS_guiCommandLineOptionList result = GALGAS_guiCommandLineOptionList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_guiCommandLineOptionList::dotAssign_operation (const GALGAS_guiCommandLineOptionList inOperand
                                                           COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

void GALGAS_guiCommandLineOptionList::modifier_setMOptionComponentAtIndex (GALGAS_string inOperand,
                                                                           GALGAS_uint inIndex,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) {
  cCollectionElement_guiCommandLineOptionList * p = (cCollectionElement_guiCommandLineOptionList *) objectPointerAtIndex (inIndex, inCompiler COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_guiCommandLineOptionList) ;
    p->mAttribute_mOptionComponent = inOperand ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_guiCommandLineOptionList::modifier_setMOptionIdentifierAtIndex (GALGAS_string inOperand,
                                                                            GALGAS_uint inIndex,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) {
  cCollectionElement_guiCommandLineOptionList * p = (cCollectionElement_guiCommandLineOptionList *) objectPointerAtIndex (inIndex, inCompiler COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_guiCommandLineOptionList) ;
    p->mAttribute_mOptionIdentifier = inOperand ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_guiCommandLineOptionList::modifier_setMOptionCharAtIndex (GALGAS_char inOperand,
                                                                      GALGAS_uint inIndex,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) {
  cCollectionElement_guiCommandLineOptionList * p = (cCollectionElement_guiCommandLineOptionList *) objectPointerAtIndex (inIndex, inCompiler COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_guiCommandLineOptionList) ;
    p->mAttribute_mOptionChar = inOperand ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_guiCommandLineOptionList::modifier_setMOptionStringAtIndex (GALGAS_string inOperand,
                                                                        GALGAS_uint inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) {
  cCollectionElement_guiCommandLineOptionList * p = (cCollectionElement_guiCommandLineOptionList *) objectPointerAtIndex (inIndex, inCompiler COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_guiCommandLineOptionList) ;
    p->mAttribute_mOptionString = inOperand ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_guiCommandLineOptionList::modifier_setMCommentAtIndex (GALGAS_string inOperand,
                                                                   GALGAS_uint inIndex,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement_guiCommandLineOptionList * p = (cCollectionElement_guiCommandLineOptionList *) objectPointerAtIndex (inIndex, inCompiler COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_guiCommandLineOptionList) ;
    p->mAttribute_mComment = inOperand ;
  }
}


//---------------------------------------------------------------------------*

GALGAS_string GALGAS_guiCommandLineOptionList::reader_mOptionComponentAtIndex (const GALGAS_uint & inIndex,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_guiCommandLineOptionList * p = (cCollectionElement_guiCommandLineOptionList *) attributes.ptr () ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_guiCommandLineOptionList) ;
    result = p->mAttribute_mOptionComponent ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_string GALGAS_guiCommandLineOptionList::reader_mOptionIdentifierAtIndex (const GALGAS_uint & inIndex,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_guiCommandLineOptionList * p = (cCollectionElement_guiCommandLineOptionList *) attributes.ptr () ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_guiCommandLineOptionList) ;
    result = p->mAttribute_mOptionIdentifier ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_char GALGAS_guiCommandLineOptionList::reader_mOptionCharAtIndex (const GALGAS_uint & inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_guiCommandLineOptionList * p = (cCollectionElement_guiCommandLineOptionList *) attributes.ptr () ;
  GALGAS_char result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_guiCommandLineOptionList) ;
    result = p->mAttribute_mOptionChar ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_string GALGAS_guiCommandLineOptionList::reader_mOptionStringAtIndex (const GALGAS_uint & inIndex,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_guiCommandLineOptionList * p = (cCollectionElement_guiCommandLineOptionList *) attributes.ptr () ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_guiCommandLineOptionList) ;
    result = p->mAttribute_mOptionString ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_string GALGAS_guiCommandLineOptionList::reader_mCommentAtIndex (const GALGAS_uint & inIndex,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_guiCommandLineOptionList * p = (cCollectionElement_guiCommandLineOptionList *) attributes.ptr () ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_guiCommandLineOptionList) ;
    result = p->mAttribute_mComment ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_guiCommandLineOptionList::cEnumerator_guiCommandLineOptionList (const GALGAS_guiCommandLineOptionList & inEnumeratedObject,
                                                                            const bool inAscending) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inAscending) ;
}

//---------------------------------------------------------------------------*

GALGAS_string cEnumerator_guiCommandLineOptionList::current_mOptionComponent (LOCATION_ARGS) const {
  const cCollectionElement_guiCommandLineOptionList * p = (const cCollectionElement_guiCommandLineOptionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_guiCommandLineOptionList) ;
  return p->mAttribute_mOptionComponent ;
}

//---------------------------------------------------------------------------*

GALGAS_string cEnumerator_guiCommandLineOptionList::current_mOptionIdentifier (LOCATION_ARGS) const {
  const cCollectionElement_guiCommandLineOptionList * p = (const cCollectionElement_guiCommandLineOptionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_guiCommandLineOptionList) ;
  return p->mAttribute_mOptionIdentifier ;
}

//---------------------------------------------------------------------------*

GALGAS_char cEnumerator_guiCommandLineOptionList::current_mOptionChar (LOCATION_ARGS) const {
  const cCollectionElement_guiCommandLineOptionList * p = (const cCollectionElement_guiCommandLineOptionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_guiCommandLineOptionList) ;
  return p->mAttribute_mOptionChar ;
}

//---------------------------------------------------------------------------*

GALGAS_string cEnumerator_guiCommandLineOptionList::current_mOptionString (LOCATION_ARGS) const {
  const cCollectionElement_guiCommandLineOptionList * p = (const cCollectionElement_guiCommandLineOptionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_guiCommandLineOptionList) ;
  return p->mAttribute_mOptionString ;
}

//---------------------------------------------------------------------------*

GALGAS_string cEnumerator_guiCommandLineOptionList::current_mComment (LOCATION_ARGS) const {
  const cCollectionElement_guiCommandLineOptionList * p = (const cCollectionElement_guiCommandLineOptionList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_guiCommandLineOptionList) ;
  return p->mAttribute_mComment ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                      @guiCommandLineOptionList type                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_guiCommandLineOptionList ("guiCommandLineOptionList",
                                                 NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_guiCommandLineOptionList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_guiCommandLineOptionList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_guiCommandLineOptionList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_guiCommandLineOptionList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_guiCommandLineOptionList GALGAS_guiCommandLineOptionList::extractObject (const GALGAS_object & inObject,
                                                                                C_Compiler * inCompiler,
                                                                                const GALGAS_location & inErrorLocation
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_guiCommandLineOptionList result ;
  const GALGAS_guiCommandLineOptionList * p = (const GALGAS_guiCommandLineOptionList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_guiCommandLineOptionList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "guiCommandLineOptionList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

cMapElement_extensionMap::cMapElement_extensionMap (const GALGAS_lstring & inKey,
                                                    const GALGAS_string & in_mLexiqueName
                                                    COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mLexiqueName (in_mLexiqueName) {
}

//---------------------------------------------------------------------------*

bool cMapElement_extensionMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mLexiqueName.isValid () ;
}

//---------------------------------------------------------------------------*

cMapElement * cMapElement_extensionMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_extensionMap (mAttribute_lkey, mAttribute_mLexiqueName COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cMapElement_extensionMap::description (C_String & /* ioString */, const PMSInt32 /* inIndentation */) const {
// mAttribute_mLexiqueName.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

enumComparisonResult cMapElement_extensionMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_extensionMap * operand = (cMapElement_extensionMap *) inOperand ;
  enumComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mLexiqueName.objectCompare (operand->mAttribute_mLexiqueName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_extensionMap::GALGAS_extensionMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------*

GALGAS_extensionMap::GALGAS_extensionMap (const GALGAS_extensionMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------*

GALGAS_extensionMap & GALGAS_extensionMap::operator = (const GALGAS_extensionMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------*

GALGAS_extensionMap GALGAS_extensionMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_extensionMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_extensionMap GALGAS_extensionMap::constructor_mapWithMapToOverride (const GALGAS_extensionMap & inMapToOverride
                                                                           COMMA_LOCATION_ARGS) {
  GALGAS_extensionMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_extensionMap GALGAS_extensionMap::reader_overriddenMap (UNUSED_LOCATION_ARGS) const {
  GALGAS_extensionMap result ;
  getOverridenMap (result) ;
  return result ;
}
//---------------------------------------------------------------------------*

void GALGAS_extensionMap::modifier_insertKey (GALGAS_lstring inKey,
                                              GALGAS_string inArgument0,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  cMapElement_extensionMap * p = NULL ;
  macroMyNew (p, cMapElement_extensionMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' extension is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GALGAS_string GALGAS_extensionMap::reader_mLexiqueNameForKey (const GALGAS_string & inKey,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_extensionMap * p = (const cMapElement_extensionMap *) attributes ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_extensionMap) ;
    result = p->mAttribute_mLexiqueName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_extensionMap::modifier_setMLexiqueNameForKey (GALGAS_string inAttributeValue,
                                                          GALGAS_string inKey,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_extensionMap * p = (cMapElement_extensionMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_extensionMap) ;
    p->mAttribute_mLexiqueName = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------*

cMapElement_extensionMap * GALGAS_extensionMap::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                          const GALGAS_string & inKey
                                                                                          COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_extensionMap * result = (cMapElement_extensionMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_extensionMap) ;
  return result ;
}

//---------------------------------------------------------------------------*

cEnumerator_extensionMap::cEnumerator_extensionMap (const GALGAS_extensionMap & inEnumeratedObject,
                                                    const bool inAscending) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inAscending) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_extensionMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------*

GALGAS_string cEnumerator_extensionMap::current_mLexiqueName (LOCATION_ARGS) const {
  const cMapElement_extensionMap * p = (const cMapElement_extensionMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_extensionMap) ;
  return p->mAttribute_mLexiqueName ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                            @extensionMap type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_extensionMap ("extensionMap",
                                     NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_extensionMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_extensionMap ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_extensionMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_extensionMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_extensionMap GALGAS_extensionMap::extractObject (const GALGAS_object & inObject,
                                                        C_Compiler * inCompiler,
                                                        const GALGAS_location & inErrorLocation
                                                        COMMA_LOCATION_ARGS) {
  GALGAS_extensionMap result ;
  const GALGAS_extensionMap * p = (const GALGAS_extensionMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_extensionMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "extensionMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Class for element of '@nibAndClassList' list                *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_nibAndClassList : public cCollectionElement {
//--- List attributes
  public : GALGAS_string mAttribute_mNibName ;
  public : GALGAS_string mAttribute_mClassName ;

//--- Constructor
  public : cCollectionElement_nibAndClassList (const GALGAS_string & in_mNibName,
                                               const GALGAS_string & in_mClassName
                                               COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual enumComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_nibAndClassList::cCollectionElement_nibAndClassList (const GALGAS_string & in_mNibName,
                                                                        const GALGAS_string & in_mClassName
                                                                        COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mNibName (in_mNibName),
mAttribute_mClassName (in_mClassName) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_nibAndClassList::isValid (void) const {
  return mAttribute_mNibName.isValid () && mAttribute_mClassName.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_nibAndClassList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_nibAndClassList (mAttribute_mNibName, mAttribute_mClassName COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_nibAndClassList::description (C_String & /* ioString */, const PMSInt32 /* inIndentation */) const {
// mAttribute_mNibName.description (ioString, inIndentation) ;
// mAttribute_mClassName.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

enumComparisonResult cCollectionElement_nibAndClassList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_nibAndClassList * operand = (cCollectionElement_nibAndClassList *) inOperand ;
  enumComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mNibName.objectCompare (operand->mAttribute_mNibName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mClassName.objectCompare (operand->mAttribute_mClassName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_nibAndClassList::GALGAS_nibAndClassList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_nibAndClassList::GALGAS_nibAndClassList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_nibAndClassList GALGAS_nibAndClassList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_nibAndClassList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_nibAndClassList GALGAS_nibAndClassList::constructor_listWithValue (const GALGAS_string & inOperand0,
                                                                          const GALGAS_string & inOperand1
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_nibAndClassList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_nibAndClassList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

cCollectionElement_nibAndClassList * GALGAS_nibAndClassList::makeElement (const GALGAS_string & in_mNibName,
                                                                          const GALGAS_string & in_mClassName
                                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement_nibAndClassList * result = NULL ;
  macroMyNew (result, cCollectionElement_nibAndClassList (in_mNibName,
                                                                          in_mClassName COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_nibAndClassList::addAssign_operation (const GALGAS_string & inOperand0,
                                                  const GALGAS_string & inOperand1
                                                  COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_nibAndClassList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_nibAndClassList::modifier_prependValue (GALGAS_string inOperand0,
                                                    GALGAS_string inOperand1
                                                    COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_nibAndClassList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_nibAndClassList::modifier_popFirst (GALGAS_string & outOperand0,
                                                GALGAS_string & outOperand1,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_nibAndClassList * p = (cCollectionElement_nibAndClassList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_nibAndClassList) ;
    outOperand0 = p->mAttribute_mNibName ;
    outOperand1 = p->mAttribute_mClassName ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_nibAndClassList::modifier_popLast (GALGAS_string & outOperand0,
                                               GALGAS_string & outOperand1,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_nibAndClassList * p = (cCollectionElement_nibAndClassList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_nibAndClassList) ;
    outOperand0 = p->mAttribute_mNibName ;
    outOperand1 = p->mAttribute_mClassName ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_nibAndClassList::method_first (GALGAS_string & outOperand0,
                                           GALGAS_string & outOperand1,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_nibAndClassList * p = (cCollectionElement_nibAndClassList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_nibAndClassList) ;
    outOperand0 = p->mAttribute_mNibName ;
    outOperand1 = p->mAttribute_mClassName ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_nibAndClassList::method_last (GALGAS_string & outOperand0,
                                          GALGAS_string & outOperand1,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_nibAndClassList * p = (cCollectionElement_nibAndClassList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_nibAndClassList) ;
    outOperand0 = p->mAttribute_mNibName ;
    outOperand1 = p->mAttribute_mClassName ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_nibAndClassList GALGAS_nibAndClassList::operator_concat (const GALGAS_nibAndClassList & inOperand
                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_nibAndClassList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_nibAndClassList GALGAS_nibAndClassList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                        const GALGAS_uint & inLength,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_nibAndClassList result = GALGAS_nibAndClassList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_nibAndClassList GALGAS_nibAndClassList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_nibAndClassList result = GALGAS_nibAndClassList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_nibAndClassList::dotAssign_operation (const GALGAS_nibAndClassList inOperand
                                                  COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

void GALGAS_nibAndClassList::modifier_setMNibNameAtIndex (GALGAS_string inOperand,
                                                          GALGAS_uint inIndex,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  cCollectionElement_nibAndClassList * p = (cCollectionElement_nibAndClassList *) objectPointerAtIndex (inIndex, inCompiler COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_nibAndClassList) ;
    p->mAttribute_mNibName = inOperand ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_nibAndClassList::modifier_setMClassNameAtIndex (GALGAS_string inOperand,
                                                            GALGAS_uint inIndex,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  cCollectionElement_nibAndClassList * p = (cCollectionElement_nibAndClassList *) objectPointerAtIndex (inIndex, inCompiler COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_nibAndClassList) ;
    p->mAttribute_mClassName = inOperand ;
  }
}


//---------------------------------------------------------------------------*

GALGAS_string GALGAS_nibAndClassList::reader_mNibNameAtIndex (const GALGAS_uint & inIndex,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_nibAndClassList * p = (cCollectionElement_nibAndClassList *) attributes.ptr () ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_nibAndClassList) ;
    result = p->mAttribute_mNibName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_string GALGAS_nibAndClassList::reader_mClassNameAtIndex (const GALGAS_uint & inIndex,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_nibAndClassList * p = (cCollectionElement_nibAndClassList *) attributes.ptr () ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_nibAndClassList) ;
    result = p->mAttribute_mClassName ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_nibAndClassList::cEnumerator_nibAndClassList (const GALGAS_nibAndClassList & inEnumeratedObject,
                                                          const bool inAscending) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inAscending) ;
}

//---------------------------------------------------------------------------*

GALGAS_string cEnumerator_nibAndClassList::current_mNibName (LOCATION_ARGS) const {
  const cCollectionElement_nibAndClassList * p = (const cCollectionElement_nibAndClassList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_nibAndClassList) ;
  return p->mAttribute_mNibName ;
}

//---------------------------------------------------------------------------*

GALGAS_string cEnumerator_nibAndClassList::current_mClassName (LOCATION_ARGS) const {
  const cCollectionElement_nibAndClassList * p = (const cCollectionElement_nibAndClassList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_nibAndClassList) ;
  return p->mAttribute_mClassName ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                           @nibAndClassList type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_nibAndClassList ("nibAndClassList",
                                        NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_nibAndClassList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_nibAndClassList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_nibAndClassList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_nibAndClassList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_nibAndClassList GALGAS_nibAndClassList::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler,
                                                              const GALGAS_location & inErrorLocation
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_nibAndClassList result ;
  const GALGAS_nibAndClassList * p = (const GALGAS_nibAndClassList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_nibAndClassList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "nibAndClassList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Class for element of '@textMacroList' list                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_textMacroList : public cCollectionElement {
//--- List attributes
  public : GALGAS_string mAttribute_mKey ;
  public : GALGAS_string mAttribute_mContents ;

//--- Constructor
  public : cCollectionElement_textMacroList (const GALGAS_string & in_mKey,
                                             const GALGAS_string & in_mContents
                                             COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual enumComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_textMacroList::cCollectionElement_textMacroList (const GALGAS_string & in_mKey,
                                                                    const GALGAS_string & in_mContents
                                                                    COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mKey (in_mKey),
mAttribute_mContents (in_mContents) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_textMacroList::isValid (void) const {
  return mAttribute_mKey.isValid () && mAttribute_mContents.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_textMacroList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_textMacroList (mAttribute_mKey, mAttribute_mContents COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_textMacroList::description (C_String & /* ioString */, const PMSInt32 /* inIndentation */) const {
// mAttribute_mKey.description (ioString, inIndentation) ;
// mAttribute_mContents.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

enumComparisonResult cCollectionElement_textMacroList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_textMacroList * operand = (cCollectionElement_textMacroList *) inOperand ;
  enumComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mKey.objectCompare (operand->mAttribute_mKey) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mContents.objectCompare (operand->mAttribute_mContents) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_textMacroList::GALGAS_textMacroList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_textMacroList::GALGAS_textMacroList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_textMacroList GALGAS_textMacroList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_textMacroList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_textMacroList GALGAS_textMacroList::constructor_listWithValue (const GALGAS_string & inOperand0,
                                                                      const GALGAS_string & inOperand1
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_textMacroList result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result.createNewEmptyList (THERE) ;
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_textMacroList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

cCollectionElement_textMacroList * GALGAS_textMacroList::makeElement (const GALGAS_string & in_mKey,
                                                                      const GALGAS_string & in_mContents
                                                                      COMMA_LOCATION_ARGS) {
  cCollectionElement_textMacroList * result = NULL ;
  macroMyNew (result, cCollectionElement_textMacroList (in_mKey,
                                                                      in_mContents COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_textMacroList::addAssign_operation (const GALGAS_string & inOperand0,
                                                const GALGAS_string & inOperand1
                                                COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_textMacroList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_textMacroList::modifier_prependValue (GALGAS_string inOperand0,
                                                  GALGAS_string inOperand1
                                                  COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_textMacroList (inOperand0, inOperand1 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_textMacroList::modifier_popFirst (GALGAS_string & outOperand0,
                                              GALGAS_string & outOperand1,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_textMacroList * p = (cCollectionElement_textMacroList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_textMacroList) ;
    outOperand0 = p->mAttribute_mKey ;
    outOperand1 = p->mAttribute_mContents ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_textMacroList::modifier_popLast (GALGAS_string & outOperand0,
                                             GALGAS_string & outOperand1,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_textMacroList * p = (cCollectionElement_textMacroList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_textMacroList) ;
    outOperand0 = p->mAttribute_mKey ;
    outOperand1 = p->mAttribute_mContents ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_textMacroList::method_first (GALGAS_string & outOperand0,
                                         GALGAS_string & outOperand1,
                                         C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_textMacroList * p = (cCollectionElement_textMacroList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_textMacroList) ;
    outOperand0 = p->mAttribute_mKey ;
    outOperand1 = p->mAttribute_mContents ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_textMacroList::method_last (GALGAS_string & outOperand0,
                                        GALGAS_string & outOperand1,
                                        C_Compiler * inCompiler
                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_textMacroList * p = (cCollectionElement_textMacroList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_textMacroList) ;
    outOperand0 = p->mAttribute_mKey ;
    outOperand1 = p->mAttribute_mContents ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_textMacroList GALGAS_textMacroList::operator_concat (const GALGAS_textMacroList & inOperand
                                                            COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_textMacroList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_textMacroList GALGAS_textMacroList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                    const GALGAS_uint & inLength,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_textMacroList result = GALGAS_textMacroList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_textMacroList GALGAS_textMacroList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) const {
  GALGAS_textMacroList result = GALGAS_textMacroList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_textMacroList::dotAssign_operation (const GALGAS_textMacroList inOperand
                                                COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

void GALGAS_textMacroList::modifier_setMKeyAtIndex (GALGAS_string inOperand,
                                                    GALGAS_uint inIndex,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  cCollectionElement_textMacroList * p = (cCollectionElement_textMacroList *) objectPointerAtIndex (inIndex, inCompiler COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_textMacroList) ;
    p->mAttribute_mKey = inOperand ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_textMacroList::modifier_setMContentsAtIndex (GALGAS_string inOperand,
                                                         GALGAS_uint inIndex,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) {
  cCollectionElement_textMacroList * p = (cCollectionElement_textMacroList *) objectPointerAtIndex (inIndex, inCompiler COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_textMacroList) ;
    p->mAttribute_mContents = inOperand ;
  }
}


//---------------------------------------------------------------------------*

GALGAS_string GALGAS_textMacroList::reader_mKeyAtIndex (const GALGAS_uint & inIndex,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_textMacroList * p = (cCollectionElement_textMacroList *) attributes.ptr () ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_textMacroList) ;
    result = p->mAttribute_mKey ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_string GALGAS_textMacroList::reader_mContentsAtIndex (const GALGAS_uint & inIndex,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_textMacroList * p = (cCollectionElement_textMacroList *) attributes.ptr () ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_textMacroList) ;
    result = p->mAttribute_mContents ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_textMacroList::cEnumerator_textMacroList (const GALGAS_textMacroList & inEnumeratedObject,
                                                      const bool inAscending) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inAscending) ;
}

//---------------------------------------------------------------------------*

GALGAS_string cEnumerator_textMacroList::current_mKey (LOCATION_ARGS) const {
  const cCollectionElement_textMacroList * p = (const cCollectionElement_textMacroList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_textMacroList) ;
  return p->mAttribute_mKey ;
}

//---------------------------------------------------------------------------*

GALGAS_string cEnumerator_textMacroList::current_mContents (LOCATION_ARGS) const {
  const cCollectionElement_textMacroList * p = (const cCollectionElement_textMacroList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_textMacroList) ;
  return p->mAttribute_mContents ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                            @textMacroList type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_textMacroList ("textMacroList",
                                      NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_textMacroList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_textMacroList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_textMacroList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_textMacroList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_textMacroList GALGAS_textMacroList::extractObject (const GALGAS_object & inObject,
                                                          C_Compiler * inCompiler,
                                                          const GALGAS_location & inErrorLocation
                                                          COMMA_LOCATION_ARGS) {
  GALGAS_textMacroList result ;
  const GALGAS_textMacroList * p = (const GALGAS_textMacroList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_textMacroList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "textMacroList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Class for element of '@importedLexiqueList' list              *
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_importedLexiqueList : public cCollectionElement {
//--- List attributes
  public : GALGAS_string mAttribute_mLexiqueClassName ;
  public : GALGAS_string mAttribute_mBlockComment ;
  public : GALGAS_string mAttribute_mTitle ;
  public : GALGAS_textMacroList mAttribute_mTextMacroList ;
  public : GALGAS_guiLabelListAST mAttribute_mLabels ;

//--- Constructor
  public : cCollectionElement_importedLexiqueList (const GALGAS_string & in_mLexiqueClassName,
                                                   const GALGAS_string & in_mBlockComment,
                                                   const GALGAS_string & in_mTitle,
                                                   const GALGAS_textMacroList & in_mTextMacroList,
                                                   const GALGAS_guiLabelListAST & in_mLabels
                                                   COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual enumComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_importedLexiqueList::cCollectionElement_importedLexiqueList (const GALGAS_string & in_mLexiqueClassName,
                                                                                const GALGAS_string & in_mBlockComment,
                                                                                const GALGAS_string & in_mTitle,
                                                                                const GALGAS_textMacroList & in_mTextMacroList,
                                                                                const GALGAS_guiLabelListAST & in_mLabels
                                                                                COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_mLexiqueClassName (in_mLexiqueClassName),
mAttribute_mBlockComment (in_mBlockComment),
mAttribute_mTitle (in_mTitle),
mAttribute_mTextMacroList (in_mTextMacroList),
mAttribute_mLabels (in_mLabels) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_importedLexiqueList::isValid (void) const {
  return mAttribute_mLexiqueClassName.isValid () && mAttribute_mBlockComment.isValid () && mAttribute_mTitle.isValid () && mAttribute_mTextMacroList.isValid () && mAttribute_mLabels.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_importedLexiqueList::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_importedLexiqueList (mAttribute_mLexiqueClassName, mAttribute_mBlockComment, mAttribute_mTitle, mAttribute_mTextMacroList, mAttribute_mLabels COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_importedLexiqueList::description (C_String & /* ioString */, const PMSInt32 /* inIndentation */) const {
// mAttribute_mLexiqueClassName.description (ioString, inIndentation) ;
// mAttribute_mBlockComment.description (ioString, inIndentation) ;
// mAttribute_mTitle.description (ioString, inIndentation) ;
// mAttribute_mTextMacroList.description (ioString, inIndentation) ;
// mAttribute_mLabels.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

enumComparisonResult cCollectionElement_importedLexiqueList::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_importedLexiqueList * operand = (cCollectionElement_importedLexiqueList *) inOperand ;
  enumComparisonResult result = kOperandEqual ;
  if (kOperandEqual == result) {
    result = mAttribute_mLexiqueClassName.objectCompare (operand->mAttribute_mLexiqueClassName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mBlockComment.objectCompare (operand->mAttribute_mBlockComment) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mTitle.objectCompare (operand->mAttribute_mTitle) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mTextMacroList.objectCompare (operand->mAttribute_mTextMacroList) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mLabels.objectCompare (operand->mAttribute_mLabels) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_importedLexiqueList::GALGAS_importedLexiqueList (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_importedLexiqueList::GALGAS_importedLexiqueList (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_importedLexiqueList GALGAS_importedLexiqueList::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_importedLexiqueList result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_importedLexiqueList GALGAS_importedLexiqueList::constructor_listWithValue (const GALGAS_string & inOperand0,
                                                                                  const GALGAS_string & inOperand1,
                                                                                  const GALGAS_string & inOperand2,
                                                                                  const GALGAS_textMacroList & inOperand3,
                                                                                  const GALGAS_guiLabelListAST & inOperand4
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_importedLexiqueList result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    result.createNewEmptyList (THERE) ;
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_importedLexiqueList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

cCollectionElement_importedLexiqueList * GALGAS_importedLexiqueList::makeElement (const GALGAS_string & in_mLexiqueClassName,
                                                                                  const GALGAS_string & in_mBlockComment,
                                                                                  const GALGAS_string & in_mTitle,
                                                                                  const GALGAS_textMacroList & in_mTextMacroList,
                                                                                  const GALGAS_guiLabelListAST & in_mLabels
                                                                                  COMMA_LOCATION_ARGS) {
  cCollectionElement_importedLexiqueList * result = NULL ;
  macroMyNew (result, cCollectionElement_importedLexiqueList (in_mLexiqueClassName,
                                                                                  in_mBlockComment,
                                                                                  in_mTitle,
                                                                                  in_mTextMacroList,
                                                                                  in_mLabels COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_importedLexiqueList::addAssign_operation (const GALGAS_string & inOperand0,
                                                      const GALGAS_string & inOperand1,
                                                      const GALGAS_string & inOperand2,
                                                      const GALGAS_textMacroList & inOperand3,
                                                      const GALGAS_guiLabelListAST & inOperand4
                                                      COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_importedLexiqueList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_importedLexiqueList::modifier_prependValue (GALGAS_string inOperand0,
                                                        GALGAS_string inOperand1,
                                                        GALGAS_string inOperand2,
                                                        GALGAS_textMacroList inOperand3,
                                                        GALGAS_guiLabelListAST inOperand4
                                                        COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_importedLexiqueList (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_importedLexiqueList::modifier_popFirst (GALGAS_string & outOperand0,
                                                    GALGAS_string & outOperand1,
                                                    GALGAS_string & outOperand2,
                                                    GALGAS_textMacroList & outOperand3,
                                                    GALGAS_guiLabelListAST & outOperand4,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_importedLexiqueList * p = (cCollectionElement_importedLexiqueList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_importedLexiqueList) ;
    outOperand0 = p->mAttribute_mLexiqueClassName ;
    outOperand1 = p->mAttribute_mBlockComment ;
    outOperand2 = p->mAttribute_mTitle ;
    outOperand3 = p->mAttribute_mTextMacroList ;
    outOperand4 = p->mAttribute_mLabels ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_importedLexiqueList::modifier_popLast (GALGAS_string & outOperand0,
                                                   GALGAS_string & outOperand1,
                                                   GALGAS_string & outOperand2,
                                                   GALGAS_textMacroList & outOperand3,
                                                   GALGAS_guiLabelListAST & outOperand4,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_importedLexiqueList * p = (cCollectionElement_importedLexiqueList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_importedLexiqueList) ;
    outOperand0 = p->mAttribute_mLexiqueClassName ;
    outOperand1 = p->mAttribute_mBlockComment ;
    outOperand2 = p->mAttribute_mTitle ;
    outOperand3 = p->mAttribute_mTextMacroList ;
    outOperand4 = p->mAttribute_mLabels ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_importedLexiqueList::method_first (GALGAS_string & outOperand0,
                                               GALGAS_string & outOperand1,
                                               GALGAS_string & outOperand2,
                                               GALGAS_textMacroList & outOperand3,
                                               GALGAS_guiLabelListAST & outOperand4,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_importedLexiqueList * p = (cCollectionElement_importedLexiqueList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_importedLexiqueList) ;
    outOperand0 = p->mAttribute_mLexiqueClassName ;
    outOperand1 = p->mAttribute_mBlockComment ;
    outOperand2 = p->mAttribute_mTitle ;
    outOperand3 = p->mAttribute_mTextMacroList ;
    outOperand4 = p->mAttribute_mLabels ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_importedLexiqueList::method_last (GALGAS_string & outOperand0,
                                              GALGAS_string & outOperand1,
                                              GALGAS_string & outOperand2,
                                              GALGAS_textMacroList & outOperand3,
                                              GALGAS_guiLabelListAST & outOperand4,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_importedLexiqueList * p = (cCollectionElement_importedLexiqueList *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
    outOperand2.drop () ;
    outOperand3.drop () ;
    outOperand4.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_importedLexiqueList) ;
    outOperand0 = p->mAttribute_mLexiqueClassName ;
    outOperand1 = p->mAttribute_mBlockComment ;
    outOperand2 = p->mAttribute_mTitle ;
    outOperand3 = p->mAttribute_mTextMacroList ;
    outOperand4 = p->mAttribute_mLabels ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_importedLexiqueList GALGAS_importedLexiqueList::operator_concat (const GALGAS_importedLexiqueList & inOperand
                                                                        COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_importedLexiqueList result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_importedLexiqueList GALGAS_importedLexiqueList::reader_subListWithRange (const GALGAS_uint & inIndex,
                                                                                const GALGAS_uint & inLength,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) const {
  GALGAS_importedLexiqueList result = GALGAS_importedLexiqueList::constructor_emptyList (THERE) ;
  subListWithRange (result, inIndex, inLength, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_importedLexiqueList GALGAS_importedLexiqueList::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_LOCATION_ARGS) const {
  GALGAS_importedLexiqueList result = GALGAS_importedLexiqueList::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_importedLexiqueList::dotAssign_operation (const GALGAS_importedLexiqueList inOperand
                                                      COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//---------------------------------------------------------------------------*

void GALGAS_importedLexiqueList::modifier_setMLexiqueClassNameAtIndex (GALGAS_string inOperand,
                                                                       GALGAS_uint inIndex,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) {
  cCollectionElement_importedLexiqueList * p = (cCollectionElement_importedLexiqueList *) objectPointerAtIndex (inIndex, inCompiler COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_importedLexiqueList) ;
    p->mAttribute_mLexiqueClassName = inOperand ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_importedLexiqueList::modifier_setMBlockCommentAtIndex (GALGAS_string inOperand,
                                                                   GALGAS_uint inIndex,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement_importedLexiqueList * p = (cCollectionElement_importedLexiqueList *) objectPointerAtIndex (inIndex, inCompiler COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_importedLexiqueList) ;
    p->mAttribute_mBlockComment = inOperand ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_importedLexiqueList::modifier_setMTitleAtIndex (GALGAS_string inOperand,
                                                            GALGAS_uint inIndex,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  cCollectionElement_importedLexiqueList * p = (cCollectionElement_importedLexiqueList *) objectPointerAtIndex (inIndex, inCompiler COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_importedLexiqueList) ;
    p->mAttribute_mTitle = inOperand ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_importedLexiqueList::modifier_setMTextMacroListAtIndex (GALGAS_textMacroList inOperand,
                                                                    GALGAS_uint inIndex,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_LOCATION_ARGS) {
  cCollectionElement_importedLexiqueList * p = (cCollectionElement_importedLexiqueList *) objectPointerAtIndex (inIndex, inCompiler COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_importedLexiqueList) ;
    p->mAttribute_mTextMacroList = inOperand ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_importedLexiqueList::modifier_setMLabelsAtIndex (GALGAS_guiLabelListAST inOperand,
                                                             GALGAS_uint inIndex,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  cCollectionElement_importedLexiqueList * p = (cCollectionElement_importedLexiqueList *) objectPointerAtIndex (inIndex, inCompiler COMMA_THERE) ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_importedLexiqueList) ;
    p->mAttribute_mLabels = inOperand ;
  }
}


//---------------------------------------------------------------------------*

GALGAS_string GALGAS_importedLexiqueList::reader_mLexiqueClassNameAtIndex (const GALGAS_uint & inIndex,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_importedLexiqueList * p = (cCollectionElement_importedLexiqueList *) attributes.ptr () ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_importedLexiqueList) ;
    result = p->mAttribute_mLexiqueClassName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_string GALGAS_importedLexiqueList::reader_mBlockCommentAtIndex (const GALGAS_uint & inIndex,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_importedLexiqueList * p = (cCollectionElement_importedLexiqueList *) attributes.ptr () ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_importedLexiqueList) ;
    result = p->mAttribute_mBlockComment ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_string GALGAS_importedLexiqueList::reader_mTitleAtIndex (const GALGAS_uint & inIndex,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_importedLexiqueList * p = (cCollectionElement_importedLexiqueList *) attributes.ptr () ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_importedLexiqueList) ;
    result = p->mAttribute_mTitle ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_textMacroList GALGAS_importedLexiqueList::reader_mTextMacroListAtIndex (const GALGAS_uint & inIndex,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_importedLexiqueList * p = (cCollectionElement_importedLexiqueList *) attributes.ptr () ;
  GALGAS_textMacroList result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_importedLexiqueList) ;
    result = p->mAttribute_mTextMacroList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_guiLabelListAST GALGAS_importedLexiqueList::reader_mLabelsAtIndex (const GALGAS_uint & inIndex,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_importedLexiqueList * p = (cCollectionElement_importedLexiqueList *) attributes.ptr () ;
  GALGAS_guiLabelListAST result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_importedLexiqueList) ;
    result = p->mAttribute_mLabels ;
  }
  return result ;
}



//---------------------------------------------------------------------------*

cEnumerator_importedLexiqueList::cEnumerator_importedLexiqueList (const GALGAS_importedLexiqueList & inEnumeratedObject,
                                                                  const bool inAscending) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inAscending) ;
}

//---------------------------------------------------------------------------*

GALGAS_string cEnumerator_importedLexiqueList::current_mLexiqueClassName (LOCATION_ARGS) const {
  const cCollectionElement_importedLexiqueList * p = (const cCollectionElement_importedLexiqueList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_importedLexiqueList) ;
  return p->mAttribute_mLexiqueClassName ;
}

//---------------------------------------------------------------------------*

GALGAS_string cEnumerator_importedLexiqueList::current_mBlockComment (LOCATION_ARGS) const {
  const cCollectionElement_importedLexiqueList * p = (const cCollectionElement_importedLexiqueList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_importedLexiqueList) ;
  return p->mAttribute_mBlockComment ;
}

//---------------------------------------------------------------------------*

GALGAS_string cEnumerator_importedLexiqueList::current_mTitle (LOCATION_ARGS) const {
  const cCollectionElement_importedLexiqueList * p = (const cCollectionElement_importedLexiqueList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_importedLexiqueList) ;
  return p->mAttribute_mTitle ;
}

//---------------------------------------------------------------------------*

GALGAS_textMacroList cEnumerator_importedLexiqueList::current_mTextMacroList (LOCATION_ARGS) const {
  const cCollectionElement_importedLexiqueList * p = (const cCollectionElement_importedLexiqueList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_importedLexiqueList) ;
  return p->mAttribute_mTextMacroList ;
}

//---------------------------------------------------------------------------*

GALGAS_guiLabelListAST cEnumerator_importedLexiqueList::current_mLabels (LOCATION_ARGS) const {
  const cCollectionElement_importedLexiqueList * p = (const cCollectionElement_importedLexiqueList *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_importedLexiqueList) ;
  return p->mAttribute_mLabels ;
}




//---------------------------------------------------------------------------*
//                                                                           *
//                         @importedLexiqueList type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_importedLexiqueList ("importedLexiqueList",
                                            NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_importedLexiqueList::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_importedLexiqueList ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_importedLexiqueList::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_importedLexiqueList (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_importedLexiqueList GALGAS_importedLexiqueList::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler,
                                                                      const GALGAS_location & inErrorLocation
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_importedLexiqueList result ;
  const GALGAS_importedLexiqueList * p = (const GALGAS_importedLexiqueList *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_importedLexiqueList *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "importedLexiqueList", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_guiAnalysisContext::GALGAS_guiAnalysisContext (void) :
mAttribute_mImportedOptionComponentList (),
mAttribute_mBoolOptionList (),
mAttribute_mUIntOptionList (),
mAttribute_mStringOptionList (),
mAttribute_mNibAndClassList (),
mAttribute_mExtensionMap (),
mAttribute_mWithLexiqueList () {
}

//---------------------------------------------------------------------------*

GALGAS_guiAnalysisContext::~ GALGAS_guiAnalysisContext (void) {
}

//---------------------------------------------------------------------------*

/* GALGAS_guiAnalysisContext::GALGAS_guiAnalysisContext (const GALGAS_guiAnalysisContext & inSource) :
//mAttribute_mImportedOptionComponentList (inSource.mAttribute_mImportedOptionComponentList),
//mAttribute_mBoolOptionList (inSource.mAttribute_mBoolOptionList),
//mAttribute_mUIntOptionList (inSource.mAttribute_mUIntOptionList),
//mAttribute_mStringOptionList (inSource.mAttribute_mStringOptionList),
//mAttribute_mNibAndClassList (inSource.mAttribute_mNibAndClassList),
//mAttribute_mExtensionMap (inSource.mAttribute_mExtensionMap),
//mAttribute_mWithLexiqueList (inSource.mAttribute_mWithLexiqueList) {
} */

//---------------------------------------------------------------------------*

GALGAS_guiAnalysisContext::GALGAS_guiAnalysisContext (const GALGAS_stringlist & inOperand0,
                                                      const GALGAS_guiCommandLineOptionList & inOperand1,
                                                      const GALGAS_guiCommandLineOptionList & inOperand2,
                                                      const GALGAS_guiCommandLineOptionList & inOperand3,
                                                      const GALGAS_nibAndClassList & inOperand4,
                                                      const GALGAS_extensionMap & inOperand5,
                                                      const GALGAS_importedLexiqueList & inOperand6) :
mAttribute_mImportedOptionComponentList (inOperand0),
mAttribute_mBoolOptionList (inOperand1),
mAttribute_mUIntOptionList (inOperand2),
mAttribute_mStringOptionList (inOperand3),
mAttribute_mNibAndClassList (inOperand4),
mAttribute_mExtensionMap (inOperand5),
mAttribute_mWithLexiqueList (inOperand6) {
}

//---------------------------------------------------------------------------*

/* GALGAS_guiAnalysisContext & GALGAS_guiAnalysisContext::operator = (const GALGAS_guiAnalysisContext & inOperand) {
  mAttribute_mImportedOptionComponentList = inOperand.mAttribute_mImportedOptionComponentList ;
  mAttribute_mBoolOptionList = inOperand.mAttribute_mBoolOptionList ;
  mAttribute_mUIntOptionList = inOperand.mAttribute_mUIntOptionList ;
  mAttribute_mStringOptionList = inOperand.mAttribute_mStringOptionList ;
  mAttribute_mNibAndClassList = inOperand.mAttribute_mNibAndClassList ;
  mAttribute_mExtensionMap = inOperand.mAttribute_mExtensionMap ;
  mAttribute_mWithLexiqueList = inOperand.mAttribute_mWithLexiqueList ;
  return *this ;
} */

//---------------------------------------------------------------------------*

GALGAS_guiAnalysisContext GALGAS_guiAnalysisContext::constructor_new (const GALGAS_stringlist & inOperand0,
                                                                      const GALGAS_guiCommandLineOptionList & inOperand1,
                                                                      const GALGAS_guiCommandLineOptionList & inOperand2,
                                                                      const GALGAS_guiCommandLineOptionList & inOperand3,
                                                                      const GALGAS_nibAndClassList & inOperand4,
                                                                      const GALGAS_extensionMap & inOperand5,
                                                                      const GALGAS_importedLexiqueList & inOperand6 
                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_guiAnalysisContext result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid ()) {
    result = GALGAS_guiAnalysisContext (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

enumComparisonResult GALGAS_guiAnalysisContext::objectCompare (const GALGAS_guiAnalysisContext & inOperand) const {
   enumComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mImportedOptionComponentList.objectCompare (inOperand.mAttribute_mImportedOptionComponentList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mBoolOptionList.objectCompare (inOperand.mAttribute_mBoolOptionList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mUIntOptionList.objectCompare (inOperand.mAttribute_mUIntOptionList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mStringOptionList.objectCompare (inOperand.mAttribute_mStringOptionList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mNibAndClassList.objectCompare (inOperand.mAttribute_mNibAndClassList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mExtensionMap.objectCompare (inOperand.mAttribute_mExtensionMap) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mWithLexiqueList.objectCompare (inOperand.mAttribute_mWithLexiqueList) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_guiAnalysisContext::isValid (void) const {
  return mAttribute_mImportedOptionComponentList.isValid () && mAttribute_mBoolOptionList.isValid () && mAttribute_mUIntOptionList.isValid () && mAttribute_mStringOptionList.isValid () && mAttribute_mNibAndClassList.isValid () && mAttribute_mExtensionMap.isValid () && mAttribute_mWithLexiqueList.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_guiAnalysisContext::drop (void) {
  mAttribute_mImportedOptionComponentList.drop () ;
  mAttribute_mBoolOptionList.drop () ;
  mAttribute_mUIntOptionList.drop () ;
  mAttribute_mStringOptionList.drop () ;
  mAttribute_mNibAndClassList.drop () ;
  mAttribute_mExtensionMap.drop () ;
  mAttribute_mWithLexiqueList.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_guiAnalysisContext::description (C_String & ioString,
                                             const PMSInt32 inIndentation) const {
  ioString << "<struct @guiAnalysisContext:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mImportedOptionComponentList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mBoolOptionList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mUIntOptionList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mStringOptionList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mNibAndClassList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mExtensionMap.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mWithLexiqueList.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_stringlist GALGAS_guiAnalysisContext::reader_mImportedOptionComponentList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mImportedOptionComponentList ;
}

//---------------------------------------------------------------------------*

GALGAS_guiCommandLineOptionList GALGAS_guiAnalysisContext::reader_mBoolOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBoolOptionList ;
}

//---------------------------------------------------------------------------*

GALGAS_guiCommandLineOptionList GALGAS_guiAnalysisContext::reader_mUIntOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mUIntOptionList ;
}

//---------------------------------------------------------------------------*

GALGAS_guiCommandLineOptionList GALGAS_guiAnalysisContext::reader_mStringOptionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mStringOptionList ;
}

//---------------------------------------------------------------------------*

GALGAS_nibAndClassList GALGAS_guiAnalysisContext::reader_mNibAndClassList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mNibAndClassList ;
}

//---------------------------------------------------------------------------*

GALGAS_extensionMap GALGAS_guiAnalysisContext::reader_mExtensionMap (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mExtensionMap ;
}

//---------------------------------------------------------------------------*

GALGAS_importedLexiqueList GALGAS_guiAnalysisContext::reader_mWithLexiqueList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mWithLexiqueList ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @guiAnalysisContext type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_guiAnalysisContext ("guiAnalysisContext",
                                           NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_guiAnalysisContext::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_guiAnalysisContext ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_guiAnalysisContext::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_guiAnalysisContext (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_guiAnalysisContext GALGAS_guiAnalysisContext::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler,
                                                                    const GALGAS_location & inErrorLocation
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_guiAnalysisContext result ;
  const GALGAS_guiAnalysisContext * p = (const GALGAS_guiAnalysisContext *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_guiAnalysisContext *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "guiAnalysisContext", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Filewrapper 'guiGenerationTemplates'                    *
//                                                                           *
//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_guiGenerationTemplates_0 [1] = {
  NULL
} ;

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_guiGenerationTemplates_0 [1] = {
  NULL
} ;

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_guiGenerationTemplates (
  "",
  0,
  gWrapperAllFiles_guiGenerationTemplates_0,
  0,
  gWrapperAllDirectories_guiGenerationTemplates_0
) ;


//---------------------------------------------------------------------------*
//                                                                           *
//     Filewrapper template 'guiGenerationTemplates gui_implementation'      *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_string filewrapperTemplate_guiGenerationTemplates_gui_5F_implementation (C_Compiler * inCompiler,
                                                                                const GALGAS_guiAnalysisContext & in_GUI_5F_CONTEXT
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  C_String result ;
  result << "\n"
    "#include \"version_libpm.h\"\n"
    "#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER\n"
    "  #error \"This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the cu"
    "rrent version (CURRENT_LIBPM_VERSION) of libpm\"\n"
    "#endif\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "#import \"OC_Token.h\"\n"
    "#import \"F_CocoaWrapperForGalgas.h\"\n" ;
  GALGAS_uint index_497_ (0) ;
  if (in_GUI_5F_CONTEXT.reader_mWithLexiqueList (SOURCE_FILE_AT_LINE (11)).isValid ()) {
    cEnumerator_importedLexiqueList enumerator_497 (in_GUI_5F_CONTEXT.reader_mWithLexiqueList (SOURCE_FILE_AT_LINE (11)), true) ;
    while (enumerator_497.hasCurrentObject ()) {
      result << "#import \"" ;
      result << enumerator_497.current_mLexiqueClassName (HERE).stringValue () ;
      result << "-cocoa.m\"\n" ;
      index_497_.increment () ;
      enumerator_497.gotoNextObject () ;
    }
  }
  GALGAS_uint index_596_ (0) ;
  if (in_GUI_5F_CONTEXT.reader_mNibAndClassList (SOURCE_FILE_AT_LINE (14)).isValid ()) {
    cEnumerator_nibAndClassList enumerator_596 (in_GUI_5F_CONTEXT.reader_mNibAndClassList (SOURCE_FILE_AT_LINE (14)), true) ;
    while (enumerator_596.hasCurrentObject ()) {
      result << "#import \"" ;
      result << enumerator_596.current_mClassName (HERE).stringValue () ;
      result << ".h\"\n" ;
      index_596_.increment () ;
      enumerator_596.gotoNextObject () ;
    }
  }
  result << "\n"
    "#ifdef USER_DEFAULT_COLORS_DEFINED\n"
    "  #import \"user_default_colors.h\"\n"
    "#endif\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "#pragma mark Nibs\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//          N I B S   A N D   T H E I R   M A I N   C L A S S E S            *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "NSArray * nibsAndClasses (void) {\n"
    "  return [NSArray arrayWithObjects:\n" ;
  GALGAS_uint index_1349_ (0) ;
  if (in_GUI_5F_CONTEXT.reader_mNibAndClassList (SOURCE_FILE_AT_LINE (33)).isValid ()) {
    cEnumerator_nibAndClassList enumerator_1349 (in_GUI_5F_CONTEXT.reader_mNibAndClassList (SOURCE_FILE_AT_LINE (33)), true) ;
    while (enumerator_1349.hasCurrentObject ()) {
      result << "    [NSArray arrayWithObjects:@\"" ;
      result << enumerator_1349.current_mNibName (HERE).stringValue () ;
      result << "\", [" ;
      result << enumerator_1349.current_mClassName (HERE).stringValue () ;
      result << " class], nil],\n" ;
      index_1349_.increment () ;
      enumerator_1349.gotoNextObject () ;
    }
  }
  result << "    nil\n"
    "  ] ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "#pragma mark Command Line Options\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "//                                                                           *\n"
    "//                       Command Line Options                                *\n"
    "//                                                                           *\n"
    "//---------------------------------------------------------------------------*\n"
    "\n" ;
  GALGAS_uint index_2003_ (0) ;
  if (in_GUI_5F_CONTEXT.reader_mImportedOptionComponentList (SOURCE_FILE_AT_LINE (50)).isValid ()) {
    cEnumerator_stringlist enumerator_2003 (in_GUI_5F_CONTEXT.reader_mImportedOptionComponentList (SOURCE_FILE_AT_LINE (50)), true) ;
    while (enumerator_2003.hasCurrentObject ()) {
      result << "#import \"" ;
      result << enumerator_2003.current_mValue (HERE).stringValue () ;
      result << "-cocoa.m\"\n" ;
      index_2003_.increment () ;
      enumerator_2003.gotoNextObject () ;
    }
  }
  result << "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "void enterOptions (NSMutableArray * ioBoolOptionArray,\n"
    "                   NSMutableArray * ioUIntOptionArray,\n"
    "                   NSMutableArray * ioStringOptionArray) {\n" ;
  GALGAS_uint index_2365_ (0) ;
  if (in_GUI_5F_CONTEXT.reader_mImportedOptionComponentList (SOURCE_FILE_AT_LINE (60)).isValid ()) {
    cEnumerator_stringlist enumerator_2365 (in_GUI_5F_CONTEXT.reader_mImportedOptionComponentList (SOURCE_FILE_AT_LINE (60)), true) ;
    while (enumerator_2365.hasCurrentObject ()) {
      result << "  enterOptionsFor_" ;
      result << enumerator_2365.current_mValue (HERE).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (61)).stringValue () ;
      result << " (ioBoolOptionArray, ioUIntOptionArray, ioStringOptionArray) ;\n" ;
      index_2365_.increment () ;
      enumerator_2365.gotoNextObject () ;
    }
  }
  result << "}\n"
    "\n" ;
  GALGAS_uint index_2637_ (0) ;
  if (in_GUI_5F_CONTEXT.reader_mWithLexiqueList (SOURCE_FILE_AT_LINE (65)).isValid ()) {
    cEnumerator_importedLexiqueList enumerator_2637 (in_GUI_5F_CONTEXT.reader_mWithLexiqueList (SOURCE_FILE_AT_LINE (65)), true) ;
    while (enumerator_2637.hasCurrentObject ()) {
      result << "//---------------------------------------------------------------------------*\n"
        "\n"
        "#pragma mark Lexique " ;
      result << enumerator_2637.current_mLexiqueClassName (HERE).stringValue () ;
      result << "\n"
        "\n"
        "//---------------------------------------------------------------------------*\n"
        "//                                                                           *\n"
        "//                     P O P    U P    L I S T    D A T A                    *\n"
        "//                                                                           *\n"
        "//---------------------------------------------------------------------------*\n"
        "\n" ;
      GALGAS_uint index_3147_ (0) ;
      if (enumerator_2637.current_mLabels (HERE).isValid ()) {
        cEnumerator_guiLabelListAST enumerator_3147 (enumerator_2637.current_mLabels (HERE), true) ;
        while (enumerator_3147.hasCurrentObject ()) {
          result << "static const UInt16 gPopUpData_" ;
          result << enumerator_2637.current_mLexiqueClassName (HERE).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (74)).stringValue () ;
          result << "_" ;
          result << enumerator_3147.current_mLocation (HERE).reader_locationIndex (SOURCE_FILE_AT_LINE (74)).reader_string (SOURCE_FILE_AT_LINE (74)).stringValue () ;
          result << " [" ;
          result << enumerator_3147.current_mTerminalList (HERE).reader_length (SOURCE_FILE_AT_LINE (74)).add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (74)).reader_string (SOURCE_FILE_AT_LINE (74)).stringValue () ;
          result << "] = {\n" ;
          GALGAS_uint index_3323_ (0) ;
          if (enumerator_3147.current_mTerminalList (HERE).isValid ()) {
            cEnumerator_lstringlist enumerator_3323 (enumerator_3147.current_mTerminalList (HERE), true) ;
            while (enumerator_3323.hasCurrentObject ()) {
              result << "  " ;
              result << enumerator_2637.current_mLexiqueClassName (HERE).stringValue () ;
              result << "_1_" ;
              result << enumerator_3323.current_mValue (HERE).mAttribute_string.reader_identifierRepresentation (SOURCE_FILE_AT_LINE (76)).stringValue () ;
              result << ",\n" ;
              index_3323_.increment () ;
              enumerator_3323.gotoNextObject () ;
            }
          }
          result << "  0\n"
            "} ;\n"
            "\n" ;
          index_3147_.increment () ;
          enumerator_3147.gotoNextObject () ;
        }
      }
      result << "static const UInt16 * gPopUpData_" ;
      result << enumerator_2637.current_mLexiqueClassName (HERE).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (81)).stringValue () ;
      result << " [" ;
      result << enumerator_2637.current_mLabels (HERE).reader_length (SOURCE_FILE_AT_LINE (81)).add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (81)).reader_string (SOURCE_FILE_AT_LINE (81)).stringValue () ;
      result << "] = {\n" ;
      GALGAS_uint index_3614_ (0) ;
      if (enumerator_2637.current_mLabels (HERE).isValid ()) {
        cEnumerator_guiLabelListAST enumerator_3614 (enumerator_2637.current_mLabels (HERE), true) ;
        while (enumerator_3614.hasCurrentObject ()) {
          result << "  gPopUpData_" ;
          result << enumerator_2637.current_mLexiqueClassName (HERE).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (83)).stringValue () ;
          result << "_" ;
          result << enumerator_3614.current_mLocation (HERE).reader_locationIndex (SOURCE_FILE_AT_LINE (83)).reader_string (SOURCE_FILE_AT_LINE (83)).stringValue () ;
          result << ",\n" ;
          index_3614_.increment () ;
          enumerator_3614.gotoNextObject () ;
        }
      }
      result << "  NULL\n"
        "} ;\n"
        "\n"
        "//---------------------------------------------------------------------------*\n"
        "//                                                                           *\n"
        "//                            Lexique interface                              *\n"
        "//                                                                           *\n"
        "//---------------------------------------------------------------------------*\n"
        "\n"
        "@interface OC_Tokenizer_" ;
      result << enumerator_2637.current_mLexiqueClassName (HERE).stringValue () ;
      result << " : OC_Lexique_" ;
      result << enumerator_2637.current_mLexiqueClassName (HERE).stringValue () ;
      result << " {\n"
        "\n"
        "}\n"
        "\n"
        "- (NSString *) blockComment ;\n"
        "\n"
        "- (const UInt16 * *) popupListData ;\n"
        "\n"
        "- (UInt32) textMacroCount ;\n"
        "\n"
        "- (NSString *) textMacroTitleAtIndex: (const UInt32) inIndex ;\n"
        "\n"
        "- (NSString *) textMacroContentAtIndex: (const UInt32) inIndex ;\n"
        "\n"
        "- (NSString *) tabItemTitle ;\n"
        "\n"
        "@end\n"
        "\n"
        "//---------------------------------------------------------------------------*\n"
        "\n"
        "@implementation OC_Tokenizer_" ;
      result << enumerator_2637.current_mLexiqueClassName (HERE).stringValue () ;
      result << "\n"
        "\n"
        "//---------------------------------------------------------------------------*\n"
        "\n"
        "- (NSString *) blockComment {\n"
        "  return @" ;
      result << enumerator_2637.current_mBlockComment (HERE).reader_utf_38_Representation (SOURCE_FILE_AT_LINE (105)).stringValue () ;
      result << " ;\n"
        "}\n"
        "\n"
        "//---------------------------------------------------------------------------*\n"
        "\n"
        "- (const UInt16 * *) popupListData {\n"
        "  return gPopUpData_" ;
      result << enumerator_2637.current_mLexiqueClassName (HERE).reader_identifierRepresentation (SOURCE_FILE_AT_LINE (109)).stringValue () ;
      result << " ;\n"
        "}\n"
        "\n"
        "//---------------------------------------------------------------------------*\n"
        "\n"
        "- (UInt32) textMacroCount {\n"
        "  return " ;
      result << enumerator_2637.current_mTextMacroList (HERE).reader_length (SOURCE_FILE_AT_LINE (113)).reader_string (SOURCE_FILE_AT_LINE (113)).stringValue () ;
      result << " ;\n"
        "}\n"
        "\n"
        "//---------------------------------------------------------------------------*\n"
        "\n"
        "- (NSString *) tabItemTitle {\n"
        "  return @" ;
      result << enumerator_2637.current_mTitle (HERE).reader_utf_38_Representation (SOURCE_FILE_AT_LINE (117)).stringValue () ;
      result << " ;\n"
        "}\n"
        "\n"
        "//---------------------------------------------------------------------------*\n"
        "\n"
        "- (NSString *) textMacroTitleAtIndex: (const UInt32) inIndex {\n"
        "  static NSString * kTextMacroTitle [" ;
      result << enumerator_2637.current_mTextMacroList (HERE).reader_length (SOURCE_FILE_AT_LINE (121)).add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (121)).reader_string (SOURCE_FILE_AT_LINE (121)).stringValue () ;
      result << "] = {\n" ;
      GALGAS_uint index_5785_ (0) ;
      if (enumerator_2637.current_mTextMacroList (HERE).isValid ()) {
        cEnumerator_textMacroList enumerator_5785 (enumerator_2637.current_mTextMacroList (HERE), true) ;
        while (enumerator_5785.hasCurrentObject ()) {
          result << "    @" ;
          result << enumerator_5785.current_mKey (HERE).reader_utf_38_Representation (SOURCE_FILE_AT_LINE (123)).stringValue () ;
          result << ",\n" ;
          index_5785_.increment () ;
          enumerator_5785.gotoNextObject () ;
        }
      }
      result << "    NULL\n"
        "  } ;\n"
        "  return kTextMacroTitle [inIndex] ;\n"
        "}\n"
        "\n"
        "//---------------------------------------------------------------------------*\n"
        "\n"
        "- (NSString *) textMacroContentAtIndex: (const UInt32) inIndex {\n"
        "  static NSString * kTextMacroContent [" ;
      result << enumerator_2637.current_mTextMacroList (HERE).reader_length (SOURCE_FILE_AT_LINE (131)).add_operation (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (131)).reader_string (SOURCE_FILE_AT_LINE (131)).stringValue () ;
      result << "] = {\n" ;
      GALGAS_uint index_6198_ (0) ;
      if (enumerator_2637.current_mTextMacroList (HERE).isValid ()) {
        cEnumerator_textMacroList enumerator_6198 (enumerator_2637.current_mTextMacroList (HERE), true) ;
        while (enumerator_6198.hasCurrentObject ()) {
          result << "    @" ;
          result << enumerator_6198.current_mContents (HERE).reader_utf_38_Representation (SOURCE_FILE_AT_LINE (133)).stringValue () ;
          result << ",\n" ;
          index_6198_.increment () ;
          enumerator_6198.gotoNextObject () ;
        }
      }
      result << "    NULL\n"
        "  } ;\n"
        "  return kTextMacroContent [inIndex] ;\n"
        "}\n"
        "\n"
        "//---------------------------------------------------------------------------*\n"
        "\n"
        "@end\n"
        "\n" ;
      index_2637_.increment () ;
      enumerator_2637.gotoNextObject () ;
    }
  }
  result << "\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "OC_Lexique * tokenizerForExtension (const NSString * inExtension) {\n"
    "  OC_Lexique * result = nil ;\n" ;
  GALGAS_uint index_6718_ (0) ;
  if (in_GUI_5F_CONTEXT.reader_mExtensionMap (SOURCE_FILE_AT_LINE (148)).isValid ()) {
    cEnumerator_extensionMap enumerator_6718 (in_GUI_5F_CONTEXT.reader_mExtensionMap (SOURCE_FILE_AT_LINE (148)), true) ;
    const bool nonEmpty_enumerator_6718 = enumerator_6718.hasCurrentObject () ;
    if (nonEmpty_enumerator_6718) {
      result << "  if" ;
    }
    while (enumerator_6718.hasCurrentObject ()) {
      result << " ([inExtension isEqualToString:@" ;
      result << enumerator_6718.current_lkey (HERE).mAttribute_string.reader_utf_38_Representation (SOURCE_FILE_AT_LINE (150)).stringValue () ;
      result << "]) {\n"
        "    result = [[[OC_Tokenizer_" ;
      result << enumerator_6718.current_mLexiqueName (HERE).stringValue () ;
      result << " alloc] init] autorelease] ;\n" ;
      if (enumerator_6718.hasNextObject ()) {
        result << "  }else if" ;
      }
      index_6718_.increment () ;
      enumerator_6718.gotoNextObject () ;
    }
    if (nonEmpty_enumerator_6718) {
      result << "  }\n" ;
    }
  }
  result << "  return result ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "NSArray * tokenizers (void) {\n"
    "  return [NSArray arrayWithObjects:\n" ;
  GALGAS_uint index_7121_ (0) ;
  if (in_GUI_5F_CONTEXT.reader_mWithLexiqueList (SOURCE_FILE_AT_LINE (162)).isValid ()) {
    cEnumerator_importedLexiqueList enumerator_7121 (in_GUI_5F_CONTEXT.reader_mWithLexiqueList (SOURCE_FILE_AT_LINE (162)), true) ;
    while (enumerator_7121.hasCurrentObject ()) {
      result << "    [[[OC_Tokenizer_" ;
      result << enumerator_7121.current_mLexiqueClassName (HERE).stringValue () ;
      result << " alloc] init] autorelease],\n" ;
      index_7121_.increment () ;
      enumerator_7121.gotoNextObject () ;
    }
  }
  result << "    nil\n"
    "  ] ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n" ;
  return GALGAS_string (result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       Routine 'compileGuiComponent'                       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileGuiComponent (const GALGAS_lstring constinArgument_inSourceFile,
                                  const GALGAS_string constinArgument_inOutputDirectory,
                                  GALGAS_parsedComponentStruct & ioArgument_ioParsedComponentStruct,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  //-------- @localVariableDeclarationForGeneration
  GALGAS_guiComponentAST var_guiComponentRoot ;
  { //-------- @grammarInstructionWithSourceFileForGeneration
  cGrammar_guiGrammar::_performSourceFileParsing_ (inCompiler, constinArgument_inSourceFile, var_guiComponentRoot COMMA_SOURCE_FILE_AT_LINE (101)) ;
  } //-------- END @grammarInstructionWithSourceFileForGeneration
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS_lstring var_componentName = var_guiComponentRoot.reader_mGUIName (SOURCE_FILE_AT_LINE (103)) ;
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS_string var_basename = constinArgument_inSourceFile.reader_string (SOURCE_FILE_AT_LINE (104)).reader_lastPathComponent (SOURCE_FILE_AT_LINE (104)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (104)) ;
  //-------- @ifInstructionForGeneration
  if (GALGAS_bool (kIsNotEqual, var_componentName.reader_string (SOURCE_FILE_AT_LINE (105)).objectCompare (var_basename)).isValidAndTrue ()) {
    //-------- @warningInstructionForGeneration
    GALGAS_location location_0 (var_componentName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticWarning (location_0, GALGAS_string ("GALGAS checks the component name ('").operator_concat (var_componentName.reader_string (SOURCE_FILE_AT_LINE (107)) COMMA_SOURCE_FILE_AT_LINE (107)).operator_concat (GALGAS_string ("') against the source file base name ('") COMMA_SOURCE_FILE_AT_LINE (108)).operator_concat (var_basename COMMA_SOURCE_FILE_AT_LINE (108)).operator_concat (GALGAS_string ("'): they should be identical") COMMA_SOURCE_FILE_AT_LINE (108)) COMMA_SOURCE_FILE_AT_LINE (106)) ;
  }
  //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
  GALGAS_guiAnalysisContext var_context = GALGAS_guiAnalysisContext::constructor_new (GALGAS_stringlist::constructor_emptyList (SOURCE_FILE_AT_LINE (113)), GALGAS_guiCommandLineOptionList::constructor_emptyList (SOURCE_FILE_AT_LINE (114)), GALGAS_guiCommandLineOptionList::constructor_emptyList (SOURCE_FILE_AT_LINE (115)), GALGAS_guiCommandLineOptionList::constructor_emptyList (SOURCE_FILE_AT_LINE (116)), GALGAS_nibAndClassList::constructor_emptyList (SOURCE_FILE_AT_LINE (117)), GALGAS_extensionMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (118)), GALGAS_importedLexiqueList::constructor_emptyList (SOURCE_FILE_AT_LINE (119)) COMMA_SOURCE_FILE_AT_LINE (112)) ;
  //-------- @foreachInstructionForGeneration
  cEnumerator_lstringlist enumerator_4744 (var_guiComponentRoot.reader_mImportedOptionList (SOURCE_FILE_AT_LINE (122)), true) ;
  //--- simple foreach instruction
  while (enumerator_4744.hasCurrentObject ()) {
    //-------- @ifInstructionForGeneration
    if (GALGAS_bool (kIsNotEqual, enumerator_4744.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (123)).reader_pathExtension (SOURCE_FILE_AT_LINE (123)).objectCompare (GALGAS_string ("gOption"))).isValidAndTrue ()) {
      //-------- @errorInstructionForGeneration
      GALGAS_location location_1 (enumerator_4744.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_1, GALGAS_string ("only an option component (path extension '.gOption') can be imported here") COMMA_SOURCE_FILE_AT_LINE (124)) ;
    }else{
      { //-------- @routineCallInstructionForGeneration
      GALGAS_lstring joker_5152_4 ; // Joker input parameter
      GALGAS_commandLineOptionMap joker_5152_3 ; // Joker input parameter
      GALGAS_commandLineOptionMap joker_5152_2 ; // Joker input parameter
      GALGAS_commandLineOptionMap joker_5152_1 ; // Joker input parameter
      routine_parseOptionComponent (GALGAS_lstring::constructor_new (enumerator_4744.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (128)).reader_absolutePathFromPath (constinArgument_inSourceFile.reader_string (SOURCE_FILE_AT_LINE (128)).reader_stringByDeletingLastPathComponent (SOURCE_FILE_AT_LINE (128)) COMMA_SOURCE_FILE_AT_LINE (128)), enumerator_4744.current_mValue (HERE).reader_location (SOURCE_FILE_AT_LINE (129)) COMMA_SOURCE_FILE_AT_LINE (127)), ioArgument_ioParsedComponentStruct, joker_5152_4, joker_5152_3, joker_5152_2, joker_5152_1, inCompiler COMMA_SOURCE_FILE_AT_LINE (126)) ;
      } //-------- @routineCallInstructionForGeneration
      //-------- @addAssignInstructionForGeneration
      var_context.mAttribute_mImportedOptionComponentList.addAssign_operation (enumerator_4744.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (134)).reader_lastPathComponent (SOURCE_FILE_AT_LINE (134)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (134)) COMMA_SOURCE_FILE_AT_LINE (134)) ;
    }
    enumerator_4744.gotoNextObject () ;
  }
  //-------- @foreachInstructionForGeneration
  cEnumerator_guiSimpleAttributeListAST enumerator_5393 (var_guiComponentRoot.reader_mGlobalSimpleAttributeList (SOURCE_FILE_AT_LINE (138)), true) ;
  //--- simple foreach instruction
  while (enumerator_5393.hasCurrentObject ()) {
    //-------- @ifInstructionForGeneration
    if (GALGAS_bool (kIsNotEqual, enumerator_5393.current_mKey (HERE).reader_string (SOURCE_FILE_AT_LINE (139)).objectCompare (GALGAS_string ("nibAndMainClass"))).isValidAndTrue ()) {
      //-------- @warningInstructionForGeneration
      GALGAS_location location_2 (enumerator_5393.current_mKey (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticWarning (location_2, GALGAS_string ("the '").operator_concat (enumerator_5393.current_mKey (HERE).reader_string (SOURCE_FILE_AT_LINE (140)) COMMA_SOURCE_FILE_AT_LINE (140)).operator_concat (GALGAS_string ("' key is invalid and has no effect") COMMA_SOURCE_FILE_AT_LINE (140)) COMMA_SOURCE_FILE_AT_LINE (140)) ;
    }else{
      //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
      GALGAS_stringlist var_x = enumerator_5393.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (143)).reader_componentsSeparatedByString (GALGAS_string (".") COMMA_SOURCE_FILE_AT_LINE (143)) ;
      //-------- @ifInstructionForGeneration
      if (GALGAS_bool (kIsNotEqual, var_x.reader_length (SOURCE_FILE_AT_LINE (144)).objectCompare (GALGAS_uint ((PMUInt32) 2U))).isValidAndTrue ()) {
        //-------- @errorInstructionForGeneration
        GALGAS_location location_3 (enumerator_5393.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_3, GALGAS_string ("the string string should conform to \"nib_name.nib_main_class\"") COMMA_SOURCE_FILE_AT_LINE (145)) ;
      }else{
        //-------- @addAssignInstructionForGeneration
        var_context.mAttribute_mNibAndClassList.addAssign_operation (var_x.reader_mValueAtIndex (GALGAS_uint ((PMUInt32) 0U), inCompiler COMMA_SOURCE_FILE_AT_LINE (148)), var_x.reader_mValueAtIndex (GALGAS_uint ((PMUInt32) 1U), inCompiler COMMA_SOURCE_FILE_AT_LINE (149)) COMMA_SOURCE_FILE_AT_LINE (147)) ;
      }
    }
    enumerator_5393.gotoNextObject () ;
  }
  //-------- @foreachInstructionForGeneration
  cEnumerator_withLexiqueListAST enumerator_6069 (var_guiComponentRoot.reader_mWithLexiqueList (SOURCE_FILE_AT_LINE (155)), true) ;
  //--- simple foreach instruction
  while (enumerator_6069.hasCurrentObject ()) {
    //-------- @localVariableDeclarationForGeneration
    GALGAS_lexiqueComponentAST var_lexiqueComponentRoot ;
    //-------- @ifInstructionForGeneration
    if (GALGAS_bool (kIsNotEqual, enumerator_6069.current_mLexiqueFileName (HERE).reader_string (SOURCE_FILE_AT_LINE (158)).reader_pathExtension (SOURCE_FILE_AT_LINE (158)).objectCompare (GALGAS_string ("gLexique"))).isValidAndTrue ()) {
      //-------- @errorInstructionForGeneration
      GALGAS_location location_4 (enumerator_6069.current_mLexiqueFileName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_4, GALGAS_string ("the file extension for a lexique component should be 'gLexique'") COMMA_SOURCE_FILE_AT_LINE (159)) ;
      var_lexiqueComponentRoot.drop () ; // Release error dropped variable
    }else{
      //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
      GALGAS_lstring var_lexiqueFullPathName = GALGAS_lstring::constructor_new (enumerator_6069.current_mLexiqueFileName (HERE).reader_string (SOURCE_FILE_AT_LINE (162)).reader_absolutePathFromPath (constinArgument_inSourceFile.reader_string (SOURCE_FILE_AT_LINE (162)).reader_stringByDeletingLastPathComponent (SOURCE_FILE_AT_LINE (162)) COMMA_SOURCE_FILE_AT_LINE (162)), enumerator_6069.current_mLexiqueFileName (HERE).reader_location (SOURCE_FILE_AT_LINE (163)) COMMA_SOURCE_FILE_AT_LINE (161)) ;
      { //-------- @routineCallInstructionForGeneration
      routine_parseLexiqueComponent (var_lexiqueFullPathName, ioArgument_ioParsedComponentStruct, var_lexiqueComponentRoot, inCompiler COMMA_SOURCE_FILE_AT_LINE (165)) ;
      } //-------- @routineCallInstructionForGeneration
    }
    //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
    GALGAS_stringset var_terminalSymbolSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE_AT_LINE (172)) ;
    //-------- @foreachInstructionForGeneration
    cEnumerator_terminalDeclarationListAST enumerator_6823 (var_lexiqueComponentRoot.reader_mTerminalDeclarationList (SOURCE_FILE_AT_LINE (173)), true) ;
    //--- simple foreach instruction
    while (enumerator_6823.hasCurrentObject ()) {
      //-------- @addAssignInstructionForGeneration
      var_terminalSymbolSet.addAssign_operation (enumerator_6823.current_mName (HERE).reader_string (SOURCE_FILE_AT_LINE (174)) COMMA_SOURCE_FILE_AT_LINE (174)) ;
      enumerator_6823.gotoNextObject () ;
    }
    //-------- @foreachInstructionForGeneration
    cEnumerator_lexicalListDeclarationListAST enumerator_6952 (var_lexiqueComponentRoot.reader_mLexicalListDeclarationList (SOURCE_FILE_AT_LINE (176)), true) ;
    //--- simple foreach instruction
    while (enumerator_6952.hasCurrentObject ()) {
      //-------- @foreachInstructionForGeneration
      cEnumerator_lexicalListEntryListAST enumerator_6980 (enumerator_6952.current_mEntryList (HERE), true) ;
      //--- simple foreach instruction
      while (enumerator_6980.hasCurrentObject ()) {
        //-------- @addAssignInstructionForGeneration
        var_terminalSymbolSet.addAssign_operation (enumerator_6980.current_mTerminalSpelling (HERE).reader_string (SOURCE_FILE_AT_LINE (178)) COMMA_SOURCE_FILE_AT_LINE (178)) ;
        enumerator_6980.gotoNextObject () ;
      }
      enumerator_6952.gotoNextObject () ;
    }
    //-------- @foreachInstructionForGeneration
    cEnumerator_guiLabelListAST enumerator_7120 (enumerator_6069.current_mLabels (HERE), true) ;
    //--- simple foreach instruction
    while (enumerator_7120.hasCurrentObject ()) {
      //-------- @foreachInstructionForGeneration
      cEnumerator_lstringlist enumerator_7151 (enumerator_7120.current_mTerminalList (HERE), true) ;
      //--- simple foreach instruction
      while (enumerator_7151.hasCurrentObject ()) {
        //-------- @ifInstructionForGeneration
        if (var_terminalSymbolSet.reader_hasKey (enumerator_7151.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (184)) COMMA_SOURCE_FILE_AT_LINE (184)).operator_not (SOURCE_FILE_AT_LINE (184)).isValidAndTrue ()) {
          //-------- @errorInstructionForGeneration
          GALGAS_location location_5 (enumerator_7151.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_5, GALGAS_string ("the '$").operator_concat (enumerator_7151.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (186)) COMMA_SOURCE_FILE_AT_LINE (186)).operator_concat (GALGAS_string ("$' terminal symbol is not declared by the '") COMMA_SOURCE_FILE_AT_LINE (187)).operator_concat (enumerator_6069.current_mLexiqueFileName (HERE).reader_string (SOURCE_FILE_AT_LINE (188)) COMMA_SOURCE_FILE_AT_LINE (188)).operator_concat (GALGAS_string ("' lexique") COMMA_SOURCE_FILE_AT_LINE (189)) COMMA_SOURCE_FILE_AT_LINE (185)) ;
        }
        enumerator_7151.gotoNextObject () ;
      }
      enumerator_7120.gotoNextObject () ;
    }
    //-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration
    GALGAS_textMacroList var_textMacroList = GALGAS_textMacroList::constructor_emptyList (SOURCE_FILE_AT_LINE (195)) ;
    //-------- @foreachInstructionForGeneration
    cEnumerator_guiCompoundAttributeListAST enumerator_7562 (enumerator_6069.current_mCompoundAttributes (HERE), true) ;
    //--- simple foreach instruction
    while (enumerator_7562.hasCurrentObject ()) {
      //-------- @ifInstructionForGeneration
      if (GALGAS_bool (kIsNotEqual, enumerator_7562.current_mKey (HERE).reader_string (SOURCE_FILE_AT_LINE (197)).objectCompare (GALGAS_string ("textMacro"))).isValidAndTrue ()) {
        //-------- @errorInstructionForGeneration
        GALGAS_location location_6 (enumerator_7562.current_mKey (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_6, GALGAS_string ("for a compound attribute, only the 'textMacro' key is valid") COMMA_SOURCE_FILE_AT_LINE (198)) ;
      }else{
        //-------- @addAssignInstructionForGeneration
        var_textMacroList.addAssign_operation (enumerator_7562.current_mAttributeName (HERE).reader_string (SOURCE_FILE_AT_LINE (200)), enumerator_7562.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (200)) COMMA_SOURCE_FILE_AT_LINE (200)) ;
      }
      enumerator_7562.gotoNextObject () ;
    }
    //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
    GALGAS_bool var_hasAssociatedExtension = GALGAS_bool (false) ;
    //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
    GALGAS_bool var_hasTabViewTitle = GALGAS_bool (false) ;
    //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
    GALGAS_bool var_hasBlockComment = GALGAS_bool (false) ;
    //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
    GALGAS_string var_tabViewTitle = GALGAS_string ("") ;
    //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
    GALGAS_string var_blockComment = GALGAS_string ("") ;
    //-------- @foreachInstructionForGeneration
    cEnumerator_guiSimpleAttributeListAST enumerator_8044 (enumerator_6069.current_mSimpleAttributes (HERE), true) ;
    //--- simple foreach instruction
    while (enumerator_8044.hasCurrentObject ()) {
      //-------- @ifInstructionForGeneration
      if (GALGAS_bool (kIsEqual, enumerator_8044.current_mKey (HERE).reader_string (SOURCE_FILE_AT_LINE (210)).objectCompare (GALGAS_string ("fileExtension"))).isValidAndTrue ()) {
        { //-------- @modifierCallInstructionForGeneration
        var_context.mAttribute_mExtensionMap.modifier_insertKey (enumerator_8044.current_mValue (HERE), enumerator_6069.current_mLexiqueFileName (HERE).reader_string (SOURCE_FILE_AT_LINE (211)).reader_lastPathComponent (SOURCE_FILE_AT_LINE (211)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (211)), inCompiler COMMA_SOURCE_FILE_AT_LINE (211)) ;
        } //-------- END @typeMethodInstructionForGeneration
        //-------- @assignmentInstructionForGeneration
        var_hasAssociatedExtension = GALGAS_bool (true) ;
      }else{
        //-------- @ifInstructionForGeneration
        if (GALGAS_bool (kIsEqual, enumerator_8044.current_mKey (HERE).reader_string (SOURCE_FILE_AT_LINE (213)).objectCompare (GALGAS_string ("title"))).isValidAndTrue ()) {
          //-------- @ifInstructionForGeneration
          if (var_hasTabViewTitle.isValidAndTrue ()) {
            //-------- @errorInstructionForGeneration
            GALGAS_location location_7 (enumerator_8044.current_mKey (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_7, GALGAS_string ("the '").operator_concat (enumerator_8044.current_mKey (HERE).reader_string (SOURCE_FILE_AT_LINE (215)) COMMA_SOURCE_FILE_AT_LINE (215)).operator_concat (GALGAS_string ("' key should be defined once") COMMA_SOURCE_FILE_AT_LINE (215)) COMMA_SOURCE_FILE_AT_LINE (215)) ;
          }
          //-------- @assignmentInstructionForGeneration
          var_hasTabViewTitle = GALGAS_bool (true) ;
          //-------- @assignmentInstructionForGeneration
          var_tabViewTitle = enumerator_8044.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (218)) ;
        }else{
          //-------- @ifInstructionForGeneration
          if (GALGAS_bool (kIsEqual, enumerator_8044.current_mKey (HERE).reader_string (SOURCE_FILE_AT_LINE (219)).objectCompare (GALGAS_string ("blockComment"))).isValidAndTrue ()) {
            //-------- @ifInstructionForGeneration
            if (var_hasBlockComment.isValidAndTrue ()) {
              //-------- @errorInstructionForGeneration
              GALGAS_location location_8 (enumerator_8044.current_mKey (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
              inCompiler->emitSemanticError (location_8, GALGAS_string ("the '").operator_concat (enumerator_8044.current_mKey (HERE).reader_string (SOURCE_FILE_AT_LINE (221)) COMMA_SOURCE_FILE_AT_LINE (221)).operator_concat (GALGAS_string ("' key should be defined once") COMMA_SOURCE_FILE_AT_LINE (221)) COMMA_SOURCE_FILE_AT_LINE (221)) ;
            }
            //-------- @assignmentInstructionForGeneration
            var_hasBlockComment = GALGAS_bool (true) ;
            //-------- @assignmentInstructionForGeneration
            var_blockComment = enumerator_8044.current_mValue (HERE).reader_string (SOURCE_FILE_AT_LINE (224)) ;
          }else{
            //-------- @errorInstructionForGeneration
            GALGAS_location location_9 (enumerator_8044.current_mKey (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_9, GALGAS_string ("the '").operator_concat (enumerator_8044.current_mKey (HERE).reader_string (SOURCE_FILE_AT_LINE (226)) COMMA_SOURCE_FILE_AT_LINE (226)).operator_concat (GALGAS_string ("' key is not valid (valid keys: 'blockComment,', 'fileExtension', 'title')") COMMA_SOURCE_FILE_AT_LINE (226)) COMMA_SOURCE_FILE_AT_LINE (226)) ;
          }
        }
      }
      enumerator_8044.gotoNextObject () ;
    }
    //-------- @ifInstructionForGeneration
    if (var_hasAssociatedExtension.operator_not (SOURCE_FILE_AT_LINE (230)).isValidAndTrue ()) {
      //-------- @errorInstructionForGeneration
      GALGAS_location location_10 (enumerator_6069.current_mLexiqueFileName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_10, GALGAS_string ("one or more file extensions should be associated with a lexique (fileExtension : \"...\")") COMMA_SOURCE_FILE_AT_LINE (231)) ;
    }
    //-------- @ifInstructionForGeneration
    if (var_hasTabViewTitle.operator_not (SOURCE_FILE_AT_LINE (234)).isValidAndTrue ()) {
      //-------- @errorInstructionForGeneration
      GALGAS_location location_11 (enumerator_6069.current_mLexiqueFileName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_11, GALGAS_string ("the 'title' key should be defined once (it is not defined)") COMMA_SOURCE_FILE_AT_LINE (235)) ;
    }
    //-------- @addAssignInstructionForGeneration
    var_context.mAttribute_mWithLexiqueList.addAssign_operation (enumerator_6069.current_mLexiqueFileName (HERE).reader_string (SOURCE_FILE_AT_LINE (239)).reader_lastPathComponent (SOURCE_FILE_AT_LINE (239)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (239)), var_blockComment, var_tabViewTitle, var_textMacroList, enumerator_6069.current_mLabels (HERE) COMMA_SOURCE_FILE_AT_LINE (238)) ;
    enumerator_6069.gotoNextObject () ;
  }
  //-------- @ifInstructionForGeneration
  if (GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (inCompiler COMMA_SOURCE_FILE_AT_LINE (247)).objectCompare (GALGAS_uint ((PMUInt32) 0U))).isValidAndTrue ()) {
    { //-------- @typeMethodInstructionForGeneration
    GALGAS_string::class_method_generateFile (constinArgument_inOutputDirectory, var_componentName.reader_string (SOURCE_FILE_AT_LINE (250)).operator_concat (GALGAS_string (".m") COMMA_SOURCE_FILE_AT_LINE (250)), GALGAS_string ("//"), GALGAS_string ("\n"
      "\n"), GALGAS_string (filewrapperTemplate_guiGenerationTemplates_gui_5F_implementation (inCompiler, var_context COMMA_SOURCE_FILE_AT_LINE (253))), GALGAS_string ("\n"
      "\n"), GALGAS_string ("\n"
      "\n"), inCompiler COMMA_SOURCE_FILE_AT_LINE (248)) ;
    } //-------- @routineCallInstructionForGeneration
  }
}


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


