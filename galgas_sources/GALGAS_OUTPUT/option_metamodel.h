//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'option_metamodel.h'                          *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      march 20th, 2007, at 17h21'51"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef option_metamodel_METAMODEL_DEFINED
#define option_metamodel_METAMODEL_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "bdd/C_BDD.h"
#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/AC_galgas_list.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*

uint32 _metamodel_index_for_option_metamodel (void) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_optionComponentRootList ;
class GGS_optionComponentRoot ;
class cPtr_optionComponentRoot ;
class GGS_commandLineOptionList ;
class GGS_commandLineOption ;
class cPtr_commandLineOption ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_optionComponentRoot'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_optionComponentRoot {
//--- Pointer to actual instance
  protected : cPtr_optionComponentRoot * mPointer ;
//--- Default constructor
  public : GGS_optionComponentRoot (void) ;
//--- Copy constructor
  public : GGS_optionComponentRoot (const GGS_optionComponentRoot &) ;
//--- Virtual destructor
  public : virtual ~GGS_optionComponentRoot (void) ;
//--- 'new' constructor
  public : static GGS_optionComponentRoot constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_commandLineOptionList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_optionComponentRoot &) ;
//--- Comparison methods
  public : GGS_bool _operator_isEqual (C_Compiler & _inLexique, const GGS_optionComponentRoot & inOperand COMMA_LOCATION_ARGS) const ;
  public : GGS_bool _operator_isNotEqual (C_Compiler & _inLexique, const GGS_optionComponentRoot & inOperand COMMA_LOCATION_ARGS) const ;

//--- _isBuilt
  public : bool _isBuilt (LOCATION_ARGS) const ;

//--- isEqualTo
  public : inline bool isEqualTo (const GGS_optionComponentRoot & _inOperand) const {
    return mPointer == _inOperand.mPointer ;
  }

//--- getPtr
  public : inline cPtr_optionComponentRoot * getPtr (void) const {
    return mPointer ;
  }

//--- drop
  public : void _drop_operation (void) ;

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Readers
  public : GGS_lstring  reader_mOptionComponentName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_commandLineOptionList  reader_mOptions (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_optionComponentRoot * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_optionComponentRoot * operator () (void) const {
      return mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     list '@optionComponentRootList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_optionComponentRootList : public AC_galgas_list {
  public : typedef cPtr_optionComponentRoot element_type ;
//--- Default Constructor
  public : GGS_optionComponentRootList (void) ;
//--- Copy Constructor
  public : GGS_optionComponentRootList (const GGS_optionComponentRootList & inSource) ;
//--- Comparison Operators
  public : GGS_bool _operator_isEqual (C_Compiler & _inLexique, const GGS_optionComponentRootList & inOperand COMMA_LOCATION_ARGS) const ;
  public : GGS_bool _operator_isNotEqual (C_Compiler & _inLexique, const GGS_optionComponentRootList & inOperand COMMA_LOCATION_ARGS) const ;
//--- Constructor 'emptyList'
  public : static GGS_optionComponentRootList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_optionComponentRootList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_commandLineOptionList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_optionComponentRootList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_commandLineOptionList & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_commandLineOptionList & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_commandLineOptionList & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_commandLineOptionList & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_commandLineOptionList & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_optionComponentRootList _operator_concat (C_Compiler & _inLexique, const GGS_optionComponentRootList & inOperand COMMA_LOCATION_ARGS) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_commandLineOptionList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_commandLineOptionList & argument_1) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_commandLineOptionList & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_optionComponentRoot & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_commandLineOption'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_commandLineOption {
//--- Pointer to actual instance
  protected : cPtr_commandLineOption * mPointer ;
//--- Default constructor
  public : GGS_commandLineOption (void) ;
//--- Copy constructor
  public : GGS_commandLineOption (const GGS_commandLineOption &) ;
//--- Virtual destructor
  public : virtual ~GGS_commandLineOption (void) ;
//--- 'new' constructor
  public : static GGS_commandLineOption constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lchar & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_lstring & argument_4
                                COMMA_LOCATION_ARGS) ;
//--- Assignment operator
  public : void operator = (const GGS_commandLineOption &) ;
//--- Comparison methods
  public : GGS_bool _operator_isEqual (C_Compiler & _inLexique, const GGS_commandLineOption & inOperand COMMA_LOCATION_ARGS) const ;
  public : GGS_bool _operator_isNotEqual (C_Compiler & _inLexique, const GGS_commandLineOption & inOperand COMMA_LOCATION_ARGS) const ;

//--- _isBuilt
  public : bool _isBuilt (LOCATION_ARGS) const ;

//--- isEqualTo
  public : inline bool isEqualTo (const GGS_commandLineOption & _inOperand) const {
    return mPointer == _inOperand.mPointer ;
  }

//--- getPtr
  public : inline cPtr_commandLineOption * getPtr (void) const {
    return mPointer ;
  }

//--- drop
  public : void _drop_operation (void) ;

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Readers
  public : GGS_lstring  reader_mOptionTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mOptionInternalName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lchar  reader_mOptionInvocationLetter (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mOptionInvocationString (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mOptionComment (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_commandLineOption * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_commandLineOption * operator () (void) const {
      return mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@commandLineOptionList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_commandLineOptionList : public AC_galgas_list {
  public : typedef cPtr_commandLineOption element_type ;
//--- Default Constructor
  public : GGS_commandLineOptionList (void) ;
//--- Copy Constructor
  public : GGS_commandLineOptionList (const GGS_commandLineOptionList & inSource) ;
//--- Comparison Operators
  public : GGS_bool _operator_isEqual (C_Compiler & _inLexique, const GGS_commandLineOptionList & inOperand COMMA_LOCATION_ARGS) const ;
  public : GGS_bool _operator_isNotEqual (C_Compiler & _inLexique, const GGS_commandLineOptionList & inOperand COMMA_LOCATION_ARGS) const ;
//--- Constructor 'emptyList'
  public : static GGS_commandLineOptionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_commandLineOptionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lchar & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_lstring & argument_4
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_commandLineOptionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_lstring & _out_1,
                              GGS_lchar & _out_2,
                              GGS_lstring & _out_3,
                              GGS_lstring & _out_4
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_lstring & _out_1,
                             GGS_lchar & _out_2,
                             GGS_lstring & _out_3,
                             GGS_lstring & _out_4
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_lstring & _out_1,
                                GGS_lchar & _out_2,
                                GGS_lstring & _out_3,
                                GGS_lstring & _out_4
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lstring & _out_1,
                                 GGS_lchar & _out_2,
                                 GGS_lstring & _out_3,
                                 GGS_lstring & _out_4
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lchar & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_lstring & argument_4) ;
//--- Handling '.' GALGAS operator
  public : GGS_commandLineOptionList _operator_concat (C_Compiler & _inLexique, const GGS_commandLineOptionList & inOperand COMMA_LOCATION_ARGS) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lchar & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_lstring & argument_4
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lchar & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_lstring & argument_4) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lchar & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_lstring & argument_4) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_commandLineOption & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@optionComponentRootList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_optionComponentRoot : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_lstring  mOptionComponentName ;
  public : GGS_commandLineOptionList  mOptions ;
//--- Constructor
  public : cPtr_optionComponentRoot (const GGS_lstring & ,
                                const GGS_commandLineOptionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_optionComponentRoot * nextObject (void) const {
    return (cPtr_optionComponentRoot *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_optionComponentRoot * previousObject (void) const {
    return (cPtr_optionComponentRoot *) internalPreviousItem () ;
  }

//--- Element comparison
  public : bool isEqualToObject (C_Compiler & _inLexique, const  cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_optionComponentRoot * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_optionComponentRootList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@commandLineOptionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_commandLineOption : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_lstring  mOptionTypeName ;
  public : GGS_lstring  mOptionInternalName ;
  public : GGS_lchar  mOptionInvocationLetter ;
  public : GGS_lstring  mOptionInvocationString ;
  public : GGS_lstring  mOptionComment ;
//--- Constructor
  public : cPtr_commandLineOption (const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_lchar & ,
                                const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_commandLineOption * nextObject (void) const {
    return (cPtr_commandLineOption *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_commandLineOption * previousObject (void) const {
    return (cPtr_commandLineOption *) internalPreviousItem () ;
  }

//--- Element comparison
  public : bool isEqualToObject (C_Compiler & _inLexique, const  cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_commandLineOption * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_commandLineOptionList ;
} ;

//---------------------------------------------------------------------------*

#endif
