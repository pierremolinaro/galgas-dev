//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'semanticsReaders.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      march 10th, 2010, at 16h38'54"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticsReaders.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticsReaders.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
// Implementation of routine "enterBaseReaderWithoutArgumentWithConversion"  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_enterBaseReaderWithoutArgumentWithConversion (C_Compiler & inLexique,
                                GGS_readerMap  & var_cas_ioReaderMap,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                const GGS_string  var_cas_inReaderName,
                                const GGS_string  var_cas_inReturnedTypeName,
                                const GGS_bool  var_cas_inHasLexiqueAndLocationArguments,
                                const GGS_string  var_cas_inConversionString COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_enterBaseReaderWithoutArgumentWithConversion at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_unifiedTypeMapIndex  var_cas_returnedTypeIndex ;
  GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inReturnedTypeName, GGS_location (inLexique) COMMA_HERE), var_cas_ioUnifiedTypeMap, var_cas_returnedTypeIndex COMMA_SOURCE_FILE_AT_LINE (35)) ;
  var_cas_ioReaderMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inReaderName, GGS_location (inLexique) COMMA_HERE), GGS_unifiedTypeMapIndexList ::constructor_emptyList (), var_cas_inHasLexiqueAndLocationArguments, var_cas_returnedTypeIndex, GGS_readerQualifier::constructor_isBasic (inLexique COMMA_HERE), var_cas_inConversionString COMMA_SOURCE_FILE_AT_LINE (36)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_enterBaseReaderWithoutArgumentWithConversion\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "enterBaseReaderWithoutArgument"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_enterBaseReaderWithoutArgument (C_Compiler & inLexique,
                                GGS_readerMap  & var_cas_ioReaderMap,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                const GGS_string  var_cas_inReaderName,
                                const GGS_string  var_cas_inReturnedTypeName,
                                const GGS_bool  var_cas_inHasLexiqueAndLocationArguments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_enterBaseReaderWithoutArgument at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_enterBaseReaderWithoutArgumentWithConversion (inLexique,  var_cas_ioReaderMap,  var_cas_ioUnifiedTypeMap,  var_cas_inReaderName,  var_cas_inReturnedTypeName,  var_cas_inHasLexiqueAndLocationArguments,  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (55)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_enterBaseReaderWithoutArgument\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of routine "enterInheritedReaderWithoutArgument"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_enterInheritedReaderWithoutArgument (C_Compiler & inLexique,
                                GGS_readerMap  & var_cas_ioReaderMap,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                const GGS_string  var_cas_inReaderName,
                                const GGS_string  var_cas_inReturnedTypeName,
                                const GGS_bool  var_cas_inHasLexiqueAndLocationArguments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_enterInheritedReaderWithoutArgument at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_unifiedTypeMapIndex  var_cas_returnedTypeIndex ;
  GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inReturnedTypeName, GGS_location (inLexique) COMMA_HERE), var_cas_ioUnifiedTypeMap, var_cas_returnedTypeIndex COMMA_SOURCE_FILE_AT_LINE (75)) ;
  var_cas_ioReaderMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inReaderName, GGS_location (inLexique) COMMA_HERE), GGS_unifiedTypeMapIndexList ::constructor_emptyList (), var_cas_inHasLexiqueAndLocationArguments, var_cas_returnedTypeIndex, GGS_readerQualifier::constructor_isInherited (inLexique COMMA_HERE), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (76)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_enterInheritedReaderWithoutArgument\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "enterBaseReaderWithArgument"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_enterBaseReaderWithArgument (C_Compiler & inLexique,
                                GGS_readerMap  & var_cas_ioReaderMap,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                const GGS_string  var_cas_inReaderName,
                                const GGS_string  var_cas_inArgument1TypeName,
                                const GGS_string  var_cas_inReturnedTypeName,
                                const GGS_bool  var_cas_inHasLexiqueAndLocationArguments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_enterBaseReaderWithArgument at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_unifiedTypeMapIndex  var_cas_returnedTypeIndex ;
  GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inReturnedTypeName, GGS_location (inLexique) COMMA_HERE), var_cas_ioUnifiedTypeMap, var_cas_returnedTypeIndex COMMA_SOURCE_FILE_AT_LINE (97)) ;
  GGS_unifiedTypeMapIndexList  var_cas_argList = GGS_unifiedTypeMapIndexList ::constructor_emptyList () ;
  GGS_unifiedTypeMapIndex  var_cas_t ;
  GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inArgument1TypeName, GGS_location (inLexique) COMMA_HERE), var_cas_ioUnifiedTypeMap, var_cas_t COMMA_SOURCE_FILE_AT_LINE (100)) ;
  var_cas_argList.addAssign_operation (var_cas_t) ;
  var_cas_ioReaderMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inReaderName, GGS_location (inLexique) COMMA_HERE), var_cas_argList, var_cas_inHasLexiqueAndLocationArguments, var_cas_returnedTypeIndex, GGS_readerQualifier::constructor_isBasic (inLexique COMMA_HERE), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (102)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_enterBaseReaderWithArgument\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "enterBaseReaderWith2Arguments"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_enterBaseReaderWith2Arguments (C_Compiler & inLexique,
                                GGS_readerMap  & var_cas_ioReaderMap,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                const GGS_string  var_cas_inReaderName,
                                const GGS_string  var_cas_inArgument1TypeName,
                                const GGS_string  var_cas_inArgument2TypeName,
                                const GGS_string  var_cas_inReturnedTypeName,
                                const GGS_bool  var_cas_inHasLexiqueAndLocationArguments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_enterBaseReaderWith2Arguments at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_unifiedTypeMapIndex  var_cas_returnedTypeIndex ;
  GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inReturnedTypeName, GGS_location (inLexique) COMMA_HERE), var_cas_ioUnifiedTypeMap, var_cas_returnedTypeIndex COMMA_SOURCE_FILE_AT_LINE (124)) ;
  GGS_unifiedTypeMapIndexList  var_cas_argList = GGS_unifiedTypeMapIndexList ::constructor_emptyList () ;
  GGS_unifiedTypeMapIndex  var_cas_t ;
  GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inArgument1TypeName, GGS_location (inLexique) COMMA_HERE), var_cas_ioUnifiedTypeMap, var_cas_t COMMA_SOURCE_FILE_AT_LINE (127)) ;
  var_cas_argList.addAssign_operation (var_cas_t) ;
  GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inArgument2TypeName, GGS_location (inLexique) COMMA_HERE), var_cas_ioUnifiedTypeMap, var_cas_t COMMA_SOURCE_FILE_AT_LINE (129)) ;
  var_cas_argList.addAssign_operation (var_cas_t) ;
  var_cas_ioReaderMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inReaderName, GGS_location (inLexique) COMMA_HERE), var_cas_argList, var_cas_inHasLexiqueAndLocationArguments, var_cas_returnedTypeIndex, GGS_readerQualifier::constructor_isBasic (inLexique COMMA_HERE), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (131)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_enterBaseReaderWith2Arguments\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "enterBaseReaderWith3Arguments"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_enterBaseReaderWith3Arguments (C_Compiler & inLexique,
                                GGS_readerMap  & var_cas_ioReaderMap,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                const GGS_string  var_cas_inReaderName,
                                const GGS_string  var_cas_inArgument1TypeName,
                                const GGS_string  var_cas_inArgument2TypeName,
                                const GGS_string  var_cas_inArgument3TypeName,
                                const GGS_string  var_cas_inReturnedTypeName,
                                const GGS_bool  var_cas_inHasLexiqueAndLocationArguments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_enterBaseReaderWith3Arguments at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_unifiedTypeMapIndex  var_cas_returnedTypeIndex ;
  GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inReturnedTypeName, GGS_location (inLexique) COMMA_HERE), var_cas_ioUnifiedTypeMap, var_cas_returnedTypeIndex COMMA_SOURCE_FILE_AT_LINE (154)) ;
  GGS_unifiedTypeMapIndexList  var_cas_argList = GGS_unifiedTypeMapIndexList ::constructor_emptyList () ;
  GGS_unifiedTypeMapIndex  var_cas_t ;
  GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inArgument1TypeName, GGS_location (inLexique) COMMA_HERE), var_cas_ioUnifiedTypeMap, var_cas_t COMMA_SOURCE_FILE_AT_LINE (157)) ;
  var_cas_argList.addAssign_operation (var_cas_t) ;
  GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inArgument2TypeName, GGS_location (inLexique) COMMA_HERE), var_cas_ioUnifiedTypeMap, var_cas_t COMMA_SOURCE_FILE_AT_LINE (159)) ;
  var_cas_argList.addAssign_operation (var_cas_t) ;
  GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inArgument3TypeName, GGS_location (inLexique) COMMA_HERE), var_cas_ioUnifiedTypeMap, var_cas_t COMMA_SOURCE_FILE_AT_LINE (161)) ;
  var_cas_argList.addAssign_operation (var_cas_t) ;
  var_cas_ioReaderMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inReaderName, GGS_location (inLexique) COMMA_HERE), var_cas_argList, var_cas_inHasLexiqueAndLocationArguments, var_cas_returnedTypeIndex, GGS_readerQualifier::constructor_isBasic (inLexique COMMA_HERE), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (163)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_enterBaseReaderWith3Arguments\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "commonReaderMapForAllTypes"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_commonReaderMapForAllTypes (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_commonReaderMapForAllTypes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("description"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (180)) ;
  ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("object"),  GGS_string ("object"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (181)) ;
  ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("dynamicType"),  GGS_string ("type"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (182)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_commonReaderMapForAllTypes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "readerMapFor_location"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_location (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_location at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (191)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("locationString"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (192)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("locationIndex"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (193)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("line"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (194)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("column"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (195)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_location\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of routine "enterReaderFor_string_lstring_types"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_enterReaderFor_string_lstring_types (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_ioMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_enterReaderFor_string_lstring_types at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("doesEnvironmentVariableExist"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (204)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("length"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (205)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("identifierRepresentation"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (206)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("HTMLRepresentation"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (207)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("utf8Representation"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (208)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("utf32Representation"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (209)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("stringByTrimmingWhiteSpaces"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (210)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("md5"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (211)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("decimalUnsignedNumber"),  GGS_string ("uint"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (212)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("isDecimalUnsignedNumber"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (213)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("capacity"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (214)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("fileExists"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (215)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("directoryExists"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (216)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("pathExtension"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (217)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("nativePathWithUnixPath"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (218)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("unixPathWithNativePath"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (219)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("lastPathComponent"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (220)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("stringByDeletingPathExtension"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (221)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("stringByCapitalizingFirstCharacter"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (222)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("firstCharacterOrNul"),  GGS_string ("char"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (223)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("stringByDeletingLastPathComponent"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (224)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("stringByStandardizingPath"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (225)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("lowercaseString"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (226)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("uppercaseString"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (227)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("reversedString"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (228)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("system"),  GGS_string ("sint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (229)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("characterAtIndex"),  GGS_string ("uint"),  GGS_string ("char"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (230)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("stringByRemovingCharacterAtIndex"),  GGS_string ("uint"),  GGS_string ("string"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (231)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("rightSubString"),  GGS_string ("uint"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (232)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("leftSubString"),  GGS_string ("uint"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (233)) ;
  ::routine_enterBaseReaderWith2Arguments (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("subString"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (234)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("absolutePathFromPath"),  GGS_string ("string"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (235)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("relativePathFromPath"),  GGS_string ("string"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (236)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("componentsSeparatedByString"),  GGS_string ("string"),  GGS_string ("stringlist"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (237)) ;
  ::routine_enterBaseReaderWith2Arguments (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("stringByLeftPadding"),  GGS_string ("uint"),  GGS_string ("char"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (238)) ;
  ::routine_enterBaseReaderWith2Arguments (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("stringByRightPadding"),  GGS_string ("uint"),  GGS_string ("char"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (239)) ;
  ::routine_enterBaseReaderWith2Arguments (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("stringByLeftAndRightPadding"),  GGS_string ("uint"),  GGS_string ("char"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (240)) ;
  ::routine_enterBaseReaderWith2Arguments (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("stringByReplacingStringByString"),  GGS_string ("string"),  GGS_string ("string"),  GGS_string ("string"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (241)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("regularFiles"),  GGS_string ("bool"),  GGS_string ("stringlist"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (242)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("hiddenFiles"),  GGS_string ("bool"),  GGS_string ("stringlist"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (243)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("directories"),  GGS_string ("bool"),  GGS_string ("stringlist"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (244)) ;
  ::routine_enterBaseReaderWith2Arguments (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("directoriesWithExtensions"),  GGS_string ("bool"),  GGS_string ("stringlist"),  GGS_string ("stringlist"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (245)) ;
  ::routine_enterBaseReaderWith2Arguments (inLexique,  var_cas_ioMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("regularFilesWithExtensions"),  GGS_string ("bool"),  GGS_string ("stringlist"),  GGS_string ("stringlist"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (246)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_enterReaderFor_string_lstring_types\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "readerMapFor_string"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_string (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_string at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (255)) ;
  ::routine_enterReaderFor_string_lstring_types (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (256)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_string\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "readerMapFor_char"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_char (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_char at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (265)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("string"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (266)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("utf32CharConstantRepresentation"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (267)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("uint"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (268)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("isalnum"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (269)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("isalpha"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (270)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("iscntrl"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (271)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("isdigit"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (272)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("islower"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (273)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("isupper"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (274)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("isxdigit"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (275)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("isUnicodeLetter"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (276)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("isUnicodeMark"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (277)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("isUnicodeNumber"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (278)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("isUnicodeSeparator"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (279)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("isUnicodeCommand"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (280)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("isUnicodePunctuation"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (281)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("isUnicodeSymbol"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (282)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("unicodeName"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (283)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("unicodeToLower"),  GGS_string ("char"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (284)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("unicodeToUpper"),  GGS_string ("char"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (285)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_char\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "readerMapFor_bool"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_bool (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_bool at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (294)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("cString"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (295)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("ocString"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (296)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("uint"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (297)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("sint"),  GGS_string ("sint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (298)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("uint64"),  GGS_string ("uint64"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (299)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("sint64"),  GGS_string ("sint64"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (300)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_bool\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "readerMapFor_uint"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_uint (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_uint at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (309)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("double"),  GGS_string ("double"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (310)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("sint"),  GGS_string ("sint"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (311)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("sint64"),  GGS_string ("sint64"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (312)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("uint64"),  GGS_string ("uint64"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (313)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("lsbIndex"),  GGS_string ("uint"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (314)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("significantBitCount"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (315)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("string"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (316)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("hexString"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (317)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("xString"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (318)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("isUnicodeValueAssigned"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (319)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_uint\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "readerMapFor_sint"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_sint (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_sint at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (328)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("double"),  GGS_string ("double"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (329)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("uint64"),  GGS_string ("uint64"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (330)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("sint64"),  GGS_string ("sint64"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (331)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("uint"),  GGS_string ("uint"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (332)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("string"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (333)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_sint\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "readerMapFor_uint64"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_uint64 (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_uint64 at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (342)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("double"),  GGS_string ("double"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (343)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("sint"),  GGS_string ("sint"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (344)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("sint64"),  GGS_string ("sint64"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (345)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("uint"),  GGS_string ("uint"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (346)) ;
  ::routine_enterBaseReaderWith2Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("uintSlice"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (347)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("string"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (348)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("hexString"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (349)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("xString"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (350)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_uint64\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "readerMapFor_sint64"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_sint64 (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_sint64 at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (359)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("double"),  GGS_string ("double"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (360)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("uint64"),  GGS_string ("uint64"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (361)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("sint"),  GGS_string ("sint"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (362)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("uint"),  GGS_string ("uint"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (363)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("string"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (364)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_sint64\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "readerMapFor_double"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_double (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_double at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (373)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("string"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (374)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("uint"),  GGS_string ("uint"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (375)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("sint"),  GGS_string ("sint"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (376)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("uint64"),  GGS_string ("uint64"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (377)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("sint64"),  GGS_string ("sint64"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (378)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_double\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "readerMapFor_lstring"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_lstring (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_lstring at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (387)) ;
  GGS_readerMap  var_cas_commonReaders = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  ::routine_enterReaderFor_string_lstring_types (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_commonReaders COMMA_SOURCE_FILE_AT_LINE (389)) ;
  {
    GGS_readerMap::cEnumerator enumerator_20211 (var_cas_commonReaders, true) ;
    const GGS_readerMap::cElement * operand_20211 = NULL ;
    while (((operand_20211 = enumerator_20211.nextObject ()))) {
      macroValidPointer (operand_20211) ;
      var_cas_outMap.modifier_insertKey (inLexique, operand_20211->mKey, operand_20211->mInfo.mArgumentTypeList, operand_20211->mInfo.mHasLexiqueArgument, operand_20211->mInfo.mReturnedType, operand_20211->mInfo.mQualifier, GGS_string ("string") COMMA_SOURCE_FILE_AT_LINE (391)) ;
    }
  }
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("string"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (400)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("location"),  GGS_string ("location"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (401)) ;
  ::routine_enterBaseReaderWithoutArgumentWithConversion (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("locationString"),  GGS_string ("string"),  GGS_bool (false),  GGS_string ("location") COMMA_SOURCE_FILE_AT_LINE (402)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_lstring\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "readerMapFor_lchar"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_lchar (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_lchar at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (411)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("char"),  GGS_string ("char"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (412)) ;
  ::routine_enterBaseReaderWithoutArgumentWithConversion (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("locationString"),  GGS_string ("string"),  GGS_bool (false),  GGS_string ("location") COMMA_SOURCE_FILE_AT_LINE (413)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("location"),  GGS_string ("location"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (414)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_lchar\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "readerMapFor_lbool"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_lbool (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_lbool at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (423)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("bool"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (424)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("location"),  GGS_string ("location"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (425)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_lbool\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "readerMapFor_luint"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_luint (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_luint at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (434)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("uint"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (435)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("location"),  GGS_string ("location"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (436)) ;
  ::routine_enterBaseReaderWithoutArgumentWithConversion (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("string"),  GGS_string ("string"),  GGS_bool (false),  GGS_string ("uint") COMMA_SOURCE_FILE_AT_LINE (437)) ;
  ::routine_enterBaseReaderWithoutArgumentWithConversion (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("locationString"),  GGS_string ("string"),  GGS_bool (false),  GGS_string ("location") COMMA_SOURCE_FILE_AT_LINE (438)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_luint\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "readerMapFor_lsint"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_lsint (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_lsint at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (447)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("sint"),  GGS_string ("sint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (448)) ;
  ::routine_enterBaseReaderWithoutArgumentWithConversion (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("string"),  GGS_string ("string"),  GGS_bool (false),  GGS_string ("sint") COMMA_SOURCE_FILE_AT_LINE (449)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("location"),  GGS_string ("location"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (450)) ;
  ::routine_enterBaseReaderWithoutArgumentWithConversion (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("locationString"),  GGS_string ("string"),  GGS_bool (false),  GGS_string ("location") COMMA_SOURCE_FILE_AT_LINE (451)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_lsint\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "readerMapFor_luint64"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_luint64 (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_luint64 at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (460)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("uint64"),  GGS_string ("uint64"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (461)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("location"),  GGS_string ("location"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (462)) ;
  ::routine_enterBaseReaderWithoutArgumentWithConversion (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("string"),  GGS_string ("string"),  GGS_bool (false),  GGS_string ("uint64") COMMA_SOURCE_FILE_AT_LINE (463)) ;
  ::routine_enterBaseReaderWithoutArgumentWithConversion (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("locationString"),  GGS_string ("string"),  GGS_bool (false),  GGS_string ("location") COMMA_SOURCE_FILE_AT_LINE (464)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_luint64\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "readerMapFor_lsint64"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_lsint64 (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_lsint64 at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (473)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("sint64"),  GGS_string ("sint64"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (474)) ;
  ::routine_enterBaseReaderWithoutArgumentWithConversion (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("string"),  GGS_string ("string"),  GGS_bool (false),  GGS_string ("sint64") COMMA_SOURCE_FILE_AT_LINE (475)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("location"),  GGS_string ("location"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (476)) ;
  ::routine_enterBaseReaderWithoutArgumentWithConversion (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("locationString"),  GGS_string ("string"),  GGS_bool (false),  GGS_string ("location") COMMA_SOURCE_FILE_AT_LINE (477)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_lsint64\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "readerMapFor_ldouble"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_ldouble (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_ldouble at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (486)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("double"),  GGS_string ("double"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (487)) ;
  ::routine_enterBaseReaderWithoutArgumentWithConversion (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("string"),  GGS_string ("string"),  GGS_bool (false),  GGS_string ("double") COMMA_SOURCE_FILE_AT_LINE (488)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("location"),  GGS_string ("location"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (489)) ;
  ::routine_enterBaseReaderWithoutArgumentWithConversion (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("locationString"),  GGS_string ("string"),  GGS_bool (false),  GGS_string ("location") COMMA_SOURCE_FILE_AT_LINE (490)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_ldouble\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "readerMapFor_stringset"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_stringset (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_stringset at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (499)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("hasKey"),  GGS_string ("string"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (500)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("count"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (501)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("stringList"),  GGS_string ("stringlist"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (502)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_stringset\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "readerMapFor_binaryset"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_binaryset (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_binaryset at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (511)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("isFull"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (512)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("isEmpty"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (513)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("significantVariableCount"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (514)) ;
  ::routine_enterBaseReaderWith2Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("ITE"),  GGS_string ("binaryset"),  GGS_string ("binaryset"),  GGS_string ("binaryset"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (515)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("forAllOnBitIndex"),  GGS_string ("uint"),  GGS_string ("binaryset"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (516)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("forAllOnBitIndexAndBeyond"),  GGS_string ("uint"),  GGS_string ("binaryset"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (517)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("existOnBitIndex"),  GGS_string ("uint"),  GGS_string ("binaryset"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (518)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("existOnBitIndexAndBeyond"),  GGS_string ("uint"),  GGS_string ("binaryset"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (519)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("valueCount"),  GGS_string ("uint"),  GGS_string ("uint64"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (520)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("compressedValueCount"),  GGS_string ("uint64"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (521)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("uint64ValueList"),  GGS_string ("uint"),  GGS_string ("uint64list"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (522)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("stringValueList"),  GGS_string ("uint"),  GGS_string ("stringlist"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (523)) ;
  ::routine_enterBaseReaderWith2Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("stringValueListWithNameList"),  GGS_string ("uint"),  GGS_string ("stringlist"),  GGS_string ("stringlist"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (524)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("predicateStringValue"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (525)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("compressedStringValueList"),  GGS_string ("uint"),  GGS_string ("stringlist"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (526)) ;
  ::routine_enterBaseReaderWith2Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("swap21"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("binaryset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (527)) ;
  ::routine_enterBaseReaderWith3Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("swap132"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("binaryset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (528)) ;
  ::routine_enterBaseReaderWith3Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("swap213"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("binaryset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (529)) ;
  ::routine_enterBaseReaderWith3Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("swap231"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("binaryset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (530)) ;
  ::routine_enterBaseReaderWith3Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("swap312"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("binaryset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (531)) ;
  ::routine_enterBaseReaderWith3Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("swap321"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("binaryset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (532)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("transitiveClosure"),  GGS_string ("uint"),  GGS_string ("binaryset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (533)) ;
  ::routine_enterBaseReaderWith2Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("accessibleStates"),  GGS_string ("binaryset"),  GGS_string ("uint"),  GGS_string ("binaryset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (534)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("equalTo"),  GGS_string ("binaryset"),  GGS_string ("binaryset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (535)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("notEqualTo"),  GGS_string ("binaryset"),  GGS_string ("binaryset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (536)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("lowerOrEqualTo"),  GGS_string ("binaryset"),  GGS_string ("binaryset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (537)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("greaterOrEqualTo"),  GGS_string ("binaryset"),  GGS_string ("binaryset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (538)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("strictGreaterThan"),  GGS_string ("binaryset"),  GGS_string ("binaryset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (539)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("strictLowerThan"),  GGS_string ("binaryset"),  GGS_string ("binaryset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (540)) ;
  ::routine_enterBaseReaderWith2Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("binarySetByTranslatingFromIndex"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("binaryset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (541)) ;
  ::routine_enterBaseReaderWith3Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("containsValue"),  GGS_string ("uint64"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("binaryset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (542)) ;
  ::routine_enterBaseReaderWith2Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("existsOnBitRange"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("binaryset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (543)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_binaryset\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "readerMapFor_type"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_type (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (552)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("name"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (553)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("hasSuperclass"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (554)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("superclass"),  GGS_string ("type"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (555)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "readerMapFor_object"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_object (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_object at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (564)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("objectType"),  GGS_string ("type"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (565)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_object\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "readerMapFor_data"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_data (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_data at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (574)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("length"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (575)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_data\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "readerMapFor_function"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_function (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_function at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (584)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("name"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (585)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("resultType"),  GGS_string ("type"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (586)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("formalParameterTypeList"),  GGS_string ("typelist"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (587)) ;
  ::routine_enterBaseReaderWith2Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("invoke"),  GGS_string ("objectlist"),  GGS_string ("location"),  GGS_string ("object"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (588)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_function\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "readerMapFor_list"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_list (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (622)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("length"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (623)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "readerMapFor_listmap"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_readerMapFor_listmap (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_readerMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_readerMapFor_listmap at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioUnifiedTypeMap,  var_cas_outMap COMMA_SOURCE_FILE_AT_LINE (654)) ;
  ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("hasKey"),  GGS_string ("string"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (655)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("allKeys"),  GGS_string ("stringset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (656)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("count"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (657)) ;
  ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("keyList"),  GGS_string ("stringlist"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (658)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_readerMapFor_listmap\n") ;
  #endif
}

//---------------------------------------------------------------------------*

