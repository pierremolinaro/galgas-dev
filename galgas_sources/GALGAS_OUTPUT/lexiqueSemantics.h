//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'lexiqueSemantics.h'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 30th, 2008, at 22h12'22"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef lexiqueSemantics_DEFINED
#define lexiqueSemantics_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_listmap.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lexicalAttributeMap ;
class GGS_terminalMap ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        Map '@lexicalAttributeMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalAttributeMap ;

class GGS_lexicalAttributeMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_lexicalAttributeMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_lexicalAttributeMap & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_lexicalAttributeMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_lexicalAttributeMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_lexicalAttributeMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_lexicalAttributeMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"
  public : void modifier_setMTypeNameForKey (C_Compiler & inLexique,
                        const GGS_string& inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_string&  inParameter0 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_string  & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_string& inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_string& outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_lexicalAttributeMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_lexicalAttributeMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_lexicalAttributeMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_lexicalAttributeMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : const GGS_string  & _mTypeName (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Map '@terminalMap'                             *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_terminalMap ;

class GGS_terminalMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_terminalMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_terminalMap & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_terminalMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_terminalMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_terminalMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_terminalMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"
  public : void modifier_setMArgumentTypeListForKey (C_Compiler & inLexique,
                        const GGS_stringlist & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_stringlist &  inParameter0 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_stringlist   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_stringlist & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_stringlist & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_terminalMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_terminalMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_terminalMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_terminalMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : const GGS_stringlist   & _mArgumentTypeList (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of map '@lexicalAttributeMap'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class e_lexicalAttributeMap {
  public : GGS_string mTypeName ;

  public : e_lexicalAttributeMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_lexicalAttributeMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_lexicalAttributeMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_lexicalAttributeMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_lexicalAttributeMap * nextObject (void) const { return (elementOf_GGS_lexicalAttributeMap *) mNextItem ; }
  public : inline elementOf_GGS_lexicalAttributeMap * infObject (void) const { return (elementOf_GGS_lexicalAttributeMap *) mInfPtr ; }
  public : inline elementOf_GGS_lexicalAttributeMap * supObject (void) const { return (elementOf_GGS_lexicalAttributeMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_lexicalAttributeMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Element of map '@terminalMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class e_terminalMap {
  public : GGS_stringlist  mArgumentTypeList ;

  public : e_terminalMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_terminalMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_terminalMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_terminalMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_terminalMap * nextObject (void) const { return (elementOf_GGS_terminalMap *) mNextItem ; }
  public : inline elementOf_GGS_terminalMap * infObject (void) const { return (elementOf_GGS_terminalMap *) mInfPtr ; }
  public : inline elementOf_GGS_terminalMap * supObject (void) const { return (elementOf_GGS_terminalMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_terminalMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#endif
