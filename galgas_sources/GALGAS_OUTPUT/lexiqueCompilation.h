//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'lexiqueCompilation.h'                         *
//             Generated by version version GALGAS_BETA_VERSION              *
//                     november 15th, 2010, at 14h44'9"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef lexiqueCompilation_ENTITIES_DEFINED
#define lexiqueCompilation_ENTITIES_DEFINED

//---------------------------------------------------------------------------*

#include "galgas2/predefined-types.h"

//---------------------------------------------------------------------------*

#include "lexiqueGeneration.h"
#include "predefinedLexicalActions.h"
#include "lexiqueSemantics.h"
#include "lexiqueTypesForAST.h"
#include "lexiqueCocoaGeneration.h"
#include "allASTTypes.h"
#include "semanticsTypesForAST.h"
#include "optionTypesForAST.h"
#include "guiTypesForAST.h"
#include "syntaxMetamodel.h"
#include "grammarMetamodel.h"
#include "optionSemantics.h"
#include "programMetamodel.h"

//---------------------------------------------------------------------------*

class GALGAS__32_stringlist ;
class GALGAS_abstractCategoryMethodAST ;
class GALGAS_abstractCategoryReaderAST ;
class GALGAS_abstractLexicalRoutineActualArgumentAST ;
class GALGAS_abstractLexicalRuleAST ;
class GALGAS_abstractMethodDefinitionListAST ;
class GALGAS_actualInputParameterListAST ;
class GALGAS_actualParameterAST ;
class GALGAS_actualParameterListAST ;
class GALGAS_addExpressionAST ;
class GALGAS_addInstructionAST ;
class GALGAS_andExpressionAST ;
class GALGAS_appendInstructionAST ;
class GALGAS_application ;
class GALGAS_assignmentInstructionAST ;
class GALGAS_attributeInCollectionListAST ;
class GALGAS_binaryset ;
class GALGAS_blockInstruction ;
class GALGAS_bool ;
class GALGAS_castInExpressionAST ;
class GALGAS_castInstructionBranchListAST ;
class GALGAS_categoryMethodAST ;
class GALGAS_categoryReaderAST ;
class GALGAS_char ;
class GALGAS_classDeclarationAST ;
class GALGAS_commandLineOptionListAST ;
class GALGAS_commandLineOptionMap ;
class GALGAS_complementExpressionAST ;
class GALGAS_concatExpressionAST ;
class GALGAS_constructorExpressionAST ;
class GALGAS_data ;
class GALGAS_decrementInstructionAST ;
class GALGAS_divisionExpressionAST ;
class GALGAS_double ;
class GALGAS_dropInstructionAST ;
class GALGAS_enumDeclarationAST ;
class GALGAS_enumMessageAssociationListAST ;
class GALGAS_enumMessageListAST ;
class GALGAS_equalExpressionAST ;
class GALGAS_errorInstructionAST ;
class GALGAS_externFunctionDeclarationAST ;
class GALGAS_externFunctionListAST ;
class GALGAS_externRoutineDeclarationAST ;
class GALGAS_externRoutineListAST ;
class GALGAS_falseExpressionAST ;
class GALGAS_filewrapper ;
class GALGAS_filewrapperDeclarationAST ;
class GALGAS_filewrapperInExpressionAST ;
class GALGAS_filewrapperObjectInstanciationInExpressionAST ;
class GALGAS_filewrapperTemplateInExpressionAST ;
class GALGAS_filewrapperTemplateListAST ;
class GALGAS_foreachInstructionAST ;
class GALGAS_foreachInstructionEnumeratedObjectElementListAST ;
class GALGAS_foreachInstructionEnumeratedObjectListAST ;
class GALGAS_formalArgumentPassingModeAST ;
class GALGAS_formalInputParameterListAST ;
class GALGAS_formalParameterListAST ;
class GALGAS_formalTemplateInputParameterListAST ;
class GALGAS_function ;
class GALGAS_functionCallExpressionAST ;
class GALGAS_functionDeclarationAST ;
class GALGAS_functionlist ;
class GALGAS_grammarComponentAST ;
class GALGAS_grammarInstructionAST ;
class GALGAS_greaterOrEqualExpressionAST ;
class GALGAS_guiComponentAST ;
class GALGAS_guiCompoundAttributeListAST ;
class GALGAS_guiLabelListAST ;
class GALGAS_guiSimpleAttributeListAST ;
class GALGAS_hereExpressionAST ;
class GALGAS_ifExpressionAST ;
class GALGAS_ifInstructionAST ;
class GALGAS_incrementInstructionAST ;
class GALGAS_inputActualParameterAST ;
class GALGAS_inputJokerActualParameterAST ;
class GALGAS_insertMethodListAST ;
class GALGAS_insertOrReplaceDeclarationListAST ;
class GALGAS_lbool ;
class GALGAS_lchar ;
class GALGAS_ldouble ;
class GALGAS_leftShiftExpressionAST ;
class GALGAS_lexicalArgumentModeAST ;
class GALGAS_lexicalAttributeInputArgumentAST ;
class GALGAS_lexicalAttributeInputOutputArgumentAST ;
class GALGAS_lexicalAttributeListAST ;
class GALGAS_lexicalAttributeMap ;
class GALGAS_lexicalCharacterInputArgumentAST ;
class GALGAS_lexicalCharacterIntervalMatchAST ;
class GALGAS_lexicalCharacterMatchAST ;
class GALGAS_lexicalCharacterSetMatchAST ;
class GALGAS_lexicalCurrentCharacterInputArgumentAST ;
class GALGAS_lexicalDropInstructionAST ;
class GALGAS_lexicalErrorByDefaultAST ;
class GALGAS_lexicalErrorInstructionAST ;
class GALGAS_lexicalExplicitRuleAST ;
class GALGAS_lexicalExplicitTokenListMap ;
class GALGAS_lexicalExplicitTokenListMapMap ;
class GALGAS_lexicalExpressionAST ;
class GALGAS_lexicalExternFunctionFormalArgumentListAST ;
class GALGAS_lexicalExternRoutineFormalArgumentListAST ;
class GALGAS_lexicalFormalInputArgumentAST ;
class GALGAS_lexicalFunctionCallActualArgumentListAST ;
class GALGAS_lexicalFunctionFormalArgumentList ;
class GALGAS_lexicalFunctionInputArgumentAST ;
class GALGAS_lexicalFunctionMap ;
class GALGAS_lexicalImplicitRuleAST ;
class GALGAS_lexicalInstructionAST ;
class GALGAS_lexicalInstructionListAST ;
class GALGAS_lexicalListDeclarationListAST ;
class GALGAS_lexicalListEntryListAST ;
class GALGAS_lexicalLogInstructionAST ;
class GALGAS_lexicalMessageDeclarationListAST ;
class GALGAS_lexicalMessageMap ;
class GALGAS_lexicalOrExpressionAST ;
class GALGAS_lexicalRepeatInstructionAST ;
class GALGAS_lexicalRewindInstructionAST ;
class GALGAS_lexicalRoutineCallActualArgumentListAST ;
class GALGAS_lexicalRoutineFormalArgumentList ;
class GALGAS_lexicalRoutineInstructionAST ;
class GALGAS_lexicalRoutineMap ;
class GALGAS_lexicalRoutineOrFunctionFormalInputArgumentAST ;
class GALGAS_lexicalRuleListAST ;
class GALGAS_lexicalSelectBranchListAST ;
class GALGAS_lexicalSelectInstructionAST ;
class GALGAS_lexicalSendDefaultActionAST ;
class GALGAS_lexicalSendSearchListAST ;
class GALGAS_lexicalSendTerminalByDefaultAST ;
class GALGAS_lexicalSentValueList ;
class GALGAS_lexicalSimpleSendInstructionAST ;
class GALGAS_lexicalStringMatchAST ;
class GALGAS_lexicalStringNotMatchAST ;
class GALGAS_lexicalStructuredSendInstructionAST ;
class GALGAS_lexicalStyleListAST ;
class GALGAS_lexicalTagInstructionAST ;
class GALGAS_lexicalTagMap ;
class GALGAS_lexicalTypeEnum ;
class GALGAS_lexicalTypeList ;
class GALGAS_lexicalTypeMap ;
class GALGAS_lexicalUnsignedInputArgumentAST ;
class GALGAS_lexicalWarningInstructionAST ;
class GALGAS_lexicalWhileBranchListAST ;
class GALGAS_lexiqueAnalysisContext ;
class GALGAS_lexiqueComponentAST ;
class GALGAS_listDeclarationAST ;
class GALGAS_listOfSyntaxInstructionList ;
class GALGAS_listmapDeclarationAST ;
class GALGAS_literalCharExpressionAST ;
class GALGAS_literalDoubleExpressionAST ;
class GALGAS_literalSInt_36__34_ExpressionAST ;
class GALGAS_literalSIntExpressionAST ;
class GALGAS_literalStringExpressionAST ;
class GALGAS_literalTypeInExpressionAST ;
class GALGAS_literalUInt_36__34_ExpressionAST ;
class GALGAS_literalUIntExpressionAST ;
class GALGAS_localVariableDeclarationAST ;
class GALGAS_localVariableOrConstantDeclarationWithAssignmentAST ;
class GALGAS_localVariableOrConstantDeclarationWithConstructorCallAST ;
class GALGAS_location ;
class GALGAS_logInstructionAST ;
class GALGAS_logListAST ;
class GALGAS_loopInstructionAST ;
class GALGAS_lowerOrEqualExpressionAST ;
class GALGAS_lsint ;
class GALGAS_lsint_36__34_ ;
class GALGAS_lstring ;
class GALGAS_lstringlist ;
class GALGAS_luint ;
class GALGAS_luint_36__34_ ;
class GALGAS_luintlist ;
class GALGAS_mapAutomatonMessageKind ;
class GALGAS_mapDeclarationAST ;
class GALGAS_mapOverrideBlockDescriptorAST ;
class GALGAS_mapOverrideBlockListAST ;
class GALGAS_mapProxyDeclarationAST ;
class GALGAS_mapRemoveMethodListAST ;
class GALGAS_mapSearchMethodListAST ;
class GALGAS_mapStateList ;
class GALGAS_mapStateTransitionList ;
class GALGAS_matchEntryListAST ;
class GALGAS_matchInstructionAST ;
class GALGAS_matchInstructionBranchListAST ;
class GALGAS_messageInstructionAST ;
class GALGAS_metamodelTemplateDelimitorListAST ;
class GALGAS_methodCallInstructionAST ;
class GALGAS_methodDefinitionListAST ;
class GALGAS_modifierCallInstructionAST ;
class GALGAS_moduloExpressionAST ;
class GALGAS_multiplicationExpressionAST ;
class GALGAS_nonTerminalLabelListAST ;
class GALGAS_nonterminalCallInstruction ;
class GALGAS_nonterminalDeclarationListAST ;
class GALGAS_notEqualExpressionAST ;
class GALGAS_notExpressionAST ;
class GALGAS_object ;
class GALGAS_objectlist ;
class GALGAS_onceFunctionDeclarationAST ;
class GALGAS_optionComponentAST ;
class GALGAS_optionDefaultValueEnumAST ;
class GALGAS_optionExpressionAST ;
class GALGAS_orExpressionAST ;
class GALGAS_outputActualParameterAST ;
class GALGAS_outputInputActualParameterAST ;
class GALGAS_overridingAbstractCategoryMethodAST ;
class GALGAS_overridingAbstractCategoryReaderAST ;
class GALGAS_overridingCategoryMethodAST ;
class GALGAS_overridingCategoryReaderAST ;
class GALGAS_parseLoopInstruction ;
class GALGAS_parseRewindInstruction ;
class GALGAS_parseWhenInstruction ;
class GALGAS_parsedComponentStruct ;
class GALGAS_parsedGrammarComponentMap ;
class GALGAS_parsedLexiqueComponentMap ;
class GALGAS_parsedOptionComponentMap ;
class GALGAS_parsedProgramComponentMap ;
class GALGAS_parsedSemanticsComponentMap ;
class GALGAS_parsedSyntaxComponentMap ;
class GALGAS_programComponentAST ;
class GALGAS_programRuleList ;
class GALGAS_readAccessWithInstructionAST ;
class GALGAS_readWriteAccessWithInstructionAST ;
class GALGAS_readerCallExpressionAST ;
class GALGAS_repeatInstruction ;
class GALGAS_rightShiftExpressionAST ;
class GALGAS_routineCallInstructionAST ;
class GALGAS_routineDeclarationAST ;
class GALGAS_selectInstruction ;
class GALGAS_selfCopyInExpressionAST ;
class GALGAS_semanticDeclarationAST ;
class GALGAS_semanticDeclarationListAST ;
class GALGAS_semanticExpressionAST ;
class GALGAS_semanticExpressionListAST ;
class GALGAS_semanticInstructionAST ;
class GALGAS_semanticInstructionListAST ;
class GALGAS_semanticsComponentAST ;
class GALGAS_sint ;
class GALGAS_sint_36__34_ ;
class GALGAS_sortedListDeclarationAST ;
class GALGAS_sortedListSortDescriptorListAST ;
class GALGAS_strictGreaterExpressionAST ;
class GALGAS_strictLowerExpressionAST ;
class GALGAS_string ;
class GALGAS_stringlist ;
class GALGAS_stringset ;
class GALGAS_structDeclarationAST ;
class GALGAS_structuredCastInstructionAST ;
class GALGAS_styleMap ;
class GALGAS_subExpressionAST ;
class GALGAS_superMethodCallInstructionAST ;
class GALGAS_superModifierCallInstructionAST ;
class GALGAS_superReaderCallExpressionAST ;
class GALGAS_switchBranchesAST ;
class GALGAS_switchInstructionAST ;
class GALGAS_syntaxComponentAST ;
class GALGAS_syntaxInstructionAST ;
class GALGAS_syntaxInstructionList ;
class GALGAS_syntaxRuleLabelListAST ;
class GALGAS_syntaxRuleListAST ;
class GALGAS_templateDelimitorList ;
class GALGAS_templateReplacementListAST ;
class GALGAS_terminalCheckInstruction ;
class GALGAS_terminalDeclarationListAST ;
class GALGAS_terminalList ;
class GALGAS_terminalMap ;
class GALGAS_thisMethodCallInstructionAST ;
class GALGAS_thisModifierCallInstructionAST ;
class GALGAS_thisReaderCallExpressionAST ;
class GALGAS_tokenSortedlist ;
class GALGAS_trueExpressionAST ;
class GALGAS_type ;
class GALGAS_typeMethodCallInstructionAST ;
class GALGAS_typelist ;
class GALGAS_uint ;
class GALGAS_uint_36__34_ ;
class GALGAS_uint_36__34_list ;
class GALGAS_uintlist ;
class GALGAS_unaryMinusExpressionAST ;
class GALGAS_uniqueMapDeclarationAST ;
class GALGAS_varInExpressionAST ;
class GALGAS_warningInstructionAST ;
class GALGAS_withLexiqueListAST ;
class GALGAS_xorExpressionAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Routine 'parseLexiqueComponent'                      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_parseLexiqueComponent (const GALGAS_lstring constinArgument0,
                                    GALGAS_parsedComponentStruct & ioArgument1,
                                    GALGAS_lexiqueComponentAST & outArgument2,
                                    C_Compiler * inCompiler
                                    COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Function 'buildLexicalTypeMap'                       *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_lexicalTypeMap function_buildLexicalTypeMap (C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Routine 'buildLexicalAttributeMap'                     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildLexicalAttributeMap (const GALGAS_lexicalTypeMap constinArgument0,
                                       const GALGAS_lexicalAttributeListAST constinArgument1,
                                       GALGAS_lexicalAttributeMap & ioArgument2,
                                       C_Compiler * inCompiler
                                       COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Routine 'compileLexiqueComponent'                     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileLexiqueComponent (const GALGAS_lstring constinArgument0,
                                      const GALGAS_string constinArgument1,
                                      GALGAS_parsedComponentStruct & ioArgument2,
                                      C_Compiler * inCompiler
                                      COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Abstract category method '@lexicalSendDefaultActionAST checkLexicalDefaultAction'*
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*categoryMethodSignature_lexicalSendDefaultActionAST_checkLexicalDefaultAction) (const cPtr_lexicalSendDefaultActionAST * inObject,
                                                                                               GALGAS_lexiqueAnalysisContext & ioArgument0,
                                                                                               C_Compiler * inCompiler
                                                                                               COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalDefaultAction (const PMSInt32 inClassIndex,
                                                    categoryMethodSignature_lexicalSendDefaultActionAST_checkLexicalDefaultAction inMethod) ;

//---------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalDefaultAction (const cPtr_lexicalSendDefaultActionAST * inObject,
                                                   GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//  Abstract category method '@lexicalExpressionAST checkLexicalExpression'  *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*categoryMethodSignature_lexicalExpressionAST_checkLexicalExpression) (const cPtr_lexicalExpressionAST * inObject,
                                                                                     GALGAS_lexiqueAnalysisContext & ioArgument0,
                                                                                     C_Compiler * inCompiler
                                                                                     COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalExpression (const PMSInt32 inClassIndex,
                                                 categoryMethodSignature_lexicalExpressionAST_checkLexicalExpression inMethod) ;

//---------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalExpression (const cPtr_lexicalExpressionAST * inObject,
                                                GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Abstract category method '@lexicalRoutineOrFunctionFormalInputArgumentAST checkLexicalFunctionCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*categoryMethodSignature_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument) (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                                                         GALGAS_lexiqueAnalysisContext & ioArgument0,
                                                                                                                         GALGAS_lexicalTypeEnum inArgument1,
                                                                                                                         C_Compiler * inCompiler
                                                                                                                         COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalFunctionCallArgument (const PMSInt32 inClassIndex,
                                                           categoryMethodSignature_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalFunctionCallArgument inMethod) ;

//---------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalFunctionCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                          GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                          GALGAS_lexicalTypeEnum in_inLexicalRoutineFormalArgumentType,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Abstract category method '@lexicalRoutineOrFunctionFormalInputArgumentAST checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*categoryMethodSignature_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument) (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                                                                                        GALGAS_lexiqueAnalysisContext & ioArgument0,
                                                                                                                        GALGAS_lexicalTypeEnum inArgument1,
                                                                                                                        C_Compiler * inCompiler
                                                                                                                        COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalRoutineCallArgument (const PMSInt32 inClassIndex,
                                                          categoryMethodSignature_lexicalRoutineOrFunctionFormalInputArgumentAST_checkLexicalRoutineCallArgument inMethod) ;

//---------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalRoutineCallArgument (const cPtr_lexicalRoutineOrFunctionFormalInputArgumentAST * inObject,
                                                         GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                         GALGAS_lexicalTypeEnum in_inLexicalRoutineFormalArgumentType,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Abstract category method '@abstractLexicalRoutineActualArgumentAST checkLexicalRoutineCallArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*categoryMethodSignature_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument) (const cPtr_abstractLexicalRoutineActualArgumentAST * inObject,
                                                                                                                 GALGAS_lexiqueAnalysisContext & ioArgument0,
                                                                                                                 GALGAS_lexicalArgumentModeAST inArgument1,
                                                                                                                 GALGAS_lexicalTypeEnum inArgument2,
                                                                                                                 C_Compiler * inCompiler
                                                                                                                 COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalRoutineCallArgument (const PMSInt32 inClassIndex,
                                                          categoryMethodSignature_abstractLexicalRoutineActualArgumentAST_checkLexicalRoutineCallArgument inMethod) ;

//---------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalRoutineCallArgument (const cPtr_abstractLexicalRoutineActualArgumentAST * inObject,
                                                         GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                         GALGAS_lexicalArgumentModeAST in_inLexicalRoutineFormalArgumentMode,
                                                         GALGAS_lexicalTypeEnum in_inLexicalRoutineFormalArgumentType,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
// Abstract category method '@lexicalInstructionAST checkLexicalInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*categoryMethodSignature_lexicalInstructionAST_checkLexicalInstruction) (const cPtr_lexicalInstructionAST * inObject,
                                                                                       GALGAS_lexiqueAnalysisContext & ioArgument0,
                                                                                       GALGAS_lexicalTagMap & ioArgument1,
                                                                                       C_Compiler * inCompiler
                                                                                       COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalInstruction (const PMSInt32 inClassIndex,
                                                  categoryMethodSignature_lexicalInstructionAST_checkLexicalInstruction inMethod) ;

//---------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalInstruction (const cPtr_lexicalInstructionAST * inObject,
                                                 GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                                 GALGAS_lexicalTagMap & io_ioTagMap,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//    Abstract category method '@abstractLexicalRuleAST checkLexicalRule'    *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*categoryMethodSignature_abstractLexicalRuleAST_checkLexicalRule) (const cPtr_abstractLexicalRuleAST * inObject,
                                                                                 GALGAS_lexiqueAnalysisContext & ioArgument0,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void enterCategoryMethod_checkLexicalRule (const PMSInt32 inClassIndex,
                                           categoryMethodSignature_abstractLexicalRuleAST_checkLexicalRule inMethod) ;

//---------------------------------------------------------------------------*

void callCategoryMethod_checkLexicalRule (const cPtr_abstractLexicalRuleAST * inObject,
                                          GALGAS_lexiqueAnalysisContext & io_ioLexiqueAnalysisContext,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) ;

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

#endif
