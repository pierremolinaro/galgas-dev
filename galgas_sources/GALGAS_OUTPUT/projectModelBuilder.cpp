//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'projectModelBuilder.cpp'                       *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       july 5th, 2009, at 17h20'50"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "projectModelBuilder.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "projectModelBuilder.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of production rule 'project_component_start_symbol'     *
//                                                                           *
//---------------------------------------------------------------------------*

void projectModelBuilder::
pr_project_component_start_symbol_projectModelBuilder_35_37_ (galgas_scanner & inLexique,
                                GGS_projectSourceList  &var_cas_outProjectSourceList,
                                GGS_lstring  &var_cas_outProjectName,
                                GGS_location  &var_cas_outEndOfSourceFile) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outProjectName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  var_cas_outProjectSourceList = GGS_projectSourceList ::constructor_emptyList () ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_projectModelBuilder_0 (inLexique)) {
        case 2 : {
          GGS_sourceFileKind var_cas_sourceFileKind ;
          switch (select_projectModelBuilder_1 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_sourceFileKind::constructor_externSourceFile (inLexique COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_sourceFileKind::constructor_guiSourceFile (inLexique COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_sourceFileKind::constructor_lexiqueSourceFile (inLexique COMMA_HERE) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_sourceFileKind::constructor_optionSourceFile (inLexique COMMA_HERE) ;
              } break ;
            case 5 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_sourceFileKind::constructor_semanticsSourceFile (inLexique COMMA_HERE) ;
              } break ;
            case 6 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_sourceFileKind::constructor_syntaxSourceFile (inLexique COMMA_HERE) ;
              } break ;
            case 7 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_sourceFileKind::constructor_grammarSourceFile (inLexique COMMA_HERE) ;
              } break ;
            case 8 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_program) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_sourceFileKind::constructor_programSourceFile (inLexique COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          GGS_lstring  var_cas_filePath ;
          inLexique.assignFromAttribute_tokenString (var_cas_filePath) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          GGS_lstringlist  var_cas_targetList ;
          var_cas_targetList = GGS_lstringlist ::constructor_emptyList () ;
          switch (select_projectModelBuilder_2 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
              { bool syntaxRepeat_3 = true ;
                while (syntaxRepeat_3) {
                    GGS_lstring  var_cas_targetName ;
                    inLexique.assignFromAttribute_tokenString (var_cas_targetName) ;
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                    var_cas_targetList._addAssign_operation (var_cas_targetName) ;
                  switch (select_repeat_projectModelBuilder_3 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_3 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          var_cas_outProjectSourceList._addAssign_operation (var_cas_sourceFileKind, var_cas_filePath, var_cas_targetList) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  var_cas_outEndOfSourceFile = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

