//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'expressionSyntax.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 14th, 2010, at 19h51'45"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "expressionSyntax.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "expressionSyntax.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_expression_i0_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  nt_concatenation_5F_term_ (inLexique, var_cas_outExpression) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_expressionSyntax_0 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E_) COMMA_HERE) ;
          GGS_semanticExpressionAST  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpressionAST  var_cas_rightOperand ;
          nt_concatenation_5F_term_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_concatExpressionAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (65)) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'concatenation_term'           *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_concatenation_5F_term_i1_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  nt_relation_5F_term_ (inLexique, var_cas_outExpression) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_expressionSyntax_1 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7C_) COMMA_HERE) ;
          GGS_semanticExpressionAST  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpressionAST  var_cas_rightOperand ;
          nt_relation_5F_term_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_orExpressionAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (84)) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5E_) COMMA_HERE) ;
          GGS_semanticExpressionAST  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpressionAST  var_cas_rightOperand ;
          nt_relation_5F_term_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_xorExpressionAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (91)) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'relation_term'              *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_relation_5F_term_i2_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  nt_relation_5F_factor_ (inLexique, var_cas_outExpression) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_expressionSyntax_2 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__26_) COMMA_HERE) ;
          GGS_semanticExpressionAST  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpressionAST  var_cas_rightOperand ;
          nt_relation_5F_factor_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_andExpressionAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (110)) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'relation_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_relation_5F_factor_i3_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  nt_simple_5F_expression_ (inLexique, var_cas_outExpression) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_expressionSyntax_3 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3D__3D_) COMMA_HERE) ;
          GGS_semanticExpressionAST  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpressionAST  var_cas_rightOperand ;
          nt_simple_5F_expression_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_equalExpressionAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (129)) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21__3D_) COMMA_HERE) ;
          GGS_semanticExpressionAST  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpressionAST  var_cas_rightOperand ;
          nt_simple_5F_expression_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_notEqualExpressionAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (136)) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3C__3D_) COMMA_HERE) ;
          GGS_semanticExpressionAST  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpressionAST  var_cas_rightOperand ;
          nt_simple_5F_expression_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_lowerOrEqualExpressionAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (143)) ;
          } break ;
        case 5 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3E__3D_) COMMA_HERE) ;
          GGS_semanticExpressionAST  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpressionAST  var_cas_rightOperand ;
          nt_simple_5F_expression_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_greaterOrEqualExpressionAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (150)) ;
          } break ;
        case 6 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3E_) COMMA_HERE) ;
          GGS_semanticExpressionAST  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpressionAST  var_cas_rightOperand ;
          nt_simple_5F_expression_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_strictGreaterExpressionAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (157)) ;
          } break ;
        case 7 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3C_) COMMA_HERE) ;
          GGS_semanticExpressionAST  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpressionAST  var_cas_rightOperand ;
          nt_simple_5F_expression_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_strictLowerExpressionAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (164)) ;
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'simple_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_simple_5F_expression_i4_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  nt_term_ (inLexique, var_cas_outExpression) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_expressionSyntax_4 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3C__3C_) COMMA_HERE) ;
          GGS_semanticExpressionAST  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpressionAST  var_cas_rightOperand ;
          nt_term_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_leftShiftExpressionAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (183)) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3E__3E_) COMMA_HERE) ;
          GGS_semanticExpressionAST  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpressionAST  var_cas_rightOperand ;
          nt_term_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_rightShiftExpressionAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (190)) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2B_) COMMA_HERE) ;
          GGS_semanticExpressionAST  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpressionAST  var_cas_rightOperand ;
          nt_term_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_addExpressionAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (197)) ;
          } break ;
        case 5 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D_) COMMA_HERE) ;
          GGS_semanticExpressionAST  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpressionAST  var_cas_rightOperand ;
          nt_term_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_subExpressionAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (204)) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'term'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_term_i5_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  nt_factor_ (inLexique, var_cas_outExpression) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_expressionSyntax_5 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2A_) COMMA_HERE) ;
          GGS_semanticExpressionAST  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpressionAST  var_cas_rightOperand ;
          nt_factor_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_multiplicationExpressionAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (223)) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2F_) COMMA_HERE) ;
          GGS_semanticExpressionAST  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpressionAST  var_cas_rightOperand ;
          nt_factor_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_divisionExpressionAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (230)) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_mod) COMMA_HERE) ;
          GGS_semanticExpressionAST  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpressionAST  var_cas_rightOperand ;
          nt_factor_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_moduloExpressionAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (237)) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_factor_i6_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D_) COMMA_HERE) ;
  nt_factor_ (inLexique, var_cas_outExpression) ;
  var_cas_outExpression = GGS_unaryMinusExpressionAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_outExpression COMMA_SOURCE_FILE_AT_LINE (251)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_factor_i7_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  GGS_lstring  var_cas_identifier ;
  inLexique.assignFromAttribute_tokenString (var_cas_identifier) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_lstringlist  var_cas_structFieldList = GGS_lstringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_expressionSyntax_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
          GGS_lstring  var_cas_fieldName ;
          inLexique.assignFromAttribute_tokenString (var_cas_fieldName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          var_cas_structFieldList.addAssign_operation (var_cas_fieldName) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  var_cas_outExpression = GGS_varInExpressionAST ::constructor_new (inLexique, var_cas_identifier, var_cas_structFieldList COMMA_SOURCE_FILE_AT_LINE (269)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_factor_i8_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_self) COMMA_HERE) ;
  var_cas_outExpression = GGS_selfInExpressionAST ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (280)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_factor_i9_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
  switch (select_expressionSyntax_7 (inLexique)) {
    case 1 : {
      nt_expression_ (inLexique, var_cas_outExpression) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_cast) COMMA_HERE) ;
      GGS_semanticExpressionAST  var_cas_receiverExpression ;
      nt_expression_ (inLexique, var_cas_receiverExpression) ;
      const GGS_location  var_cas_endOfReceiverExpression = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_if) COMMA_HERE) ;
      GGS_bool var_cas_useKindOfClass ;
      switch (select_expressionSyntax_8 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3E__3D_) COMMA_HERE) ;
          var_cas_useKindOfClass = GGS_bool (true) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3D__3D_) COMMA_HERE) ;
          var_cas_useKindOfClass = GGS_bool (false) ;
          } break ;
        default :
          break ;
      }
      GGS_lstring  var_cas_typeName ;
      inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_else) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
      GGS_semanticExpressionAST  var_cas_errorLocationExpression ;
      nt_expression_ (inLexique, var_cas_errorLocationExpression) ;
      var_cas_outExpression = GGS_castInExpressionAST ::constructor_new (inLexique, var_cas_receiverExpression, var_cas_endOfReceiverExpression, var_cas_useKindOfClass, var_cas_typeName, var_cas_errorLocationExpression COMMA_SOURCE_FILE_AT_LINE (315)) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_factor_i10_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_not) COMMA_HERE) ;
  nt_factor_ (inLexique, var_cas_outExpression) ;
  var_cas_outExpression = GGS_notExpressionAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_outExpression COMMA_SOURCE_FILE_AT_LINE (336)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_factor_i11_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7E_) COMMA_HERE) ;
  nt_factor_ (inLexique, var_cas_outExpression) ;
  var_cas_outExpression = GGS_complementExpressionAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_outExpression COMMA_SOURCE_FILE_AT_LINE (349)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_factor_i12_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_true) COMMA_HERE) ;
  var_cas_outExpression = GGS_trueExpressionAST ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (360)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_factor_i13_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_false) COMMA_HERE) ;
  var_cas_outExpression = GGS_falseExpressionAST ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (371)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_factor_i14_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  GGS_stringlist  var_cas_literalStringList = GGS_stringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
        GGS_lstring  var_cas_literalString ;
        inLexique.assignFromAttribute_tokenString (var_cas_literalString) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
        var_cas_literalStringList.addAssign_operation (var_cas_literalString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (385))) ;
      switch (select_expressionSyntax_9 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
  var_cas_outExpression = GGS_literalStringExpressionAST ::constructor_new (inLexique, GGS_location (inLexique), var_cas_literalStringList COMMA_SOURCE_FILE_AT_LINE (388)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_factor_i15_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  GGS_luint  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint_33__32_value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
  var_cas_outExpression = GGS_literalUIntExpressionAST ::constructor_new (inLexique, var_cas_literalInt COMMA_SOURCE_FILE_AT_LINE (400)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_factor_i16_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  GGS_lsint  var_cas_literalInt ;
  inLexique.assignFromAttribute_sint_33__32_value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_signed_5F_literal_5F_integer) COMMA_HERE) ;
  var_cas_outExpression = GGS_literalSIntExpressionAST ::constructor_new (inLexique, var_cas_literalInt COMMA_SOURCE_FILE_AT_LINE (412)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_factor_i17_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  GGS_luint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint_36__34_value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outExpression = GGS_literalUInt64ExpressionAST ::constructor_new (inLexique, var_cas_literalInt COMMA_SOURCE_FILE_AT_LINE (424)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_factor_i18_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  GGS_lsint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_sint_36__34_value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_signed_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outExpression = GGS_literalSInt64ExpressionAST ::constructor_new (inLexique, var_cas_literalInt COMMA_SOURCE_FILE_AT_LINE (436)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_factor_i19_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  GGS_lchar  var_cas_literalChar ;
  inLexique.assignFromAttribute_charValue (var_cas_literalChar) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_char) COMMA_HERE) ;
  var_cas_outExpression = GGS_literalCharExpressionAST ::constructor_new (inLexique, var_cas_literalChar COMMA_SOURCE_FILE_AT_LINE (448)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_factor_i20_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  GGS_ldouble  var_cas_literalDouble ;
  inLexique.assignFromAttribute_floatValue (var_cas_literalDouble) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_double) COMMA_HERE) ;
  var_cas_outExpression = GGS_literalDoubleExpressionAST ::constructor_new (inLexique, var_cas_literalDouble COMMA_SOURCE_FILE_AT_LINE (460)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_factor_i21_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_here) COMMA_HERE) ;
  var_cas_outExpression = GGS_hereExpressionAST ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (471)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_factor_i22_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_if) COMMA_HERE) ;
  GGS_semanticExpressionAST  var_cas_ifExpression ;
  nt_expression_ (inLexique, var_cas_ifExpression) ;
  const GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_then) COMMA_HERE) ;
  GGS_semanticExpressionAST  var_cas_thenExpression ;
  nt_expression_ (inLexique, var_cas_thenExpression) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_else) COMMA_HERE) ;
  GGS_semanticExpressionAST  var_cas_elseExpression ;
  nt_expression_ (inLexique, var_cas_elseExpression) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  var_cas_outExpression = GGS_ifExpressionAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_ifExpression, var_cas_thenExpression, var_cas_elseExpression COMMA_SOURCE_FILE_AT_LINE (492)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_factor_i23_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5B_) COMMA_HERE) ;
  switch (select_expressionSyntax_10 (inLexique)) {
    case 1 : {
      GGS_semanticExpressionAST  var_cas_receiverExpression ;
      nt_expression_ (inLexique, var_cas_receiverExpression) ;
      GGS_lstring  var_cas_readerName ;
      inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      GGS_semanticExpressionListAST  var_cas_expressionList ;
      nt_output_5F_expression_5F_list_ (inLexique, var_cas_expressionList) ;
      var_cas_outExpression = GGS_readerCallExpressionAST ::constructor_new (inLexique, var_cas_receiverExpression, var_cas_readerName, var_cas_expressionList COMMA_SOURCE_FILE_AT_LINE (522)) ;
      } break ;
    case 2 : {
      GGS_lstring  var_cas_className ;
      inLexique.assignFromAttribute_tokenString (var_cas_className) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
      GGS_lstring  var_cas_constructorName ;
      inLexique.assignFromAttribute_tokenString (var_cas_constructorName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      GGS_semanticExpressionListAST  var_cas_expressionList ;
      nt_output_5F_expression_5F_list_ (inLexique, var_cas_expressionList) ;
      var_cas_outExpression = GGS_constructorExpressionAST ::constructor_new (inLexique, var_cas_className, var_cas_constructorName, var_cas_expressionList COMMA_SOURCE_FILE_AT_LINE (533)) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_option) COMMA_HERE) ;
      switch (select_expressionSyntax_11 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E_) COMMA_HERE) ;
          GGS_lstring  var_cas_optionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          GGS_lstring  var_cas_readerName ;
          inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          var_cas_outExpression = GGS_optionExpressionAST ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("generic_galgas_cli_options"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (545)), var_cas_optionName, var_cas_readerName COMMA_SOURCE_FILE_AT_LINE (545)) ;
          } break ;
        case 2 : {
          GGS_lstring  var_cas_optionComponentName ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionComponentName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E_) COMMA_HERE) ;
          GGS_lstring  var_cas_optionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          GGS_lstring  var_cas_readerName ;
          inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          var_cas_outExpression = GGS_optionExpressionAST ::constructor_new (inLexique, var_cas_optionComponentName, var_cas_optionName, var_cas_readerName COMMA_SOURCE_FILE_AT_LINE (551)) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_filewrapper) COMMA_HERE) ;
      GGS_lstring  var_cas_filewrapperName ;
      inLexique.assignFromAttribute_tokenString (var_cas_filewrapperName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      switch (select_expressionSyntax_12 (inLexique)) {
        case 1 : {
          var_cas_outExpression = GGS_filewrapperObjectInstanciationInExpressionAST ::constructor_new (inLexique, var_cas_filewrapperName COMMA_SOURCE_FILE_AT_LINE (558)) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E_) COMMA_HERE) ;
          switch (select_expressionSyntax_13 (inLexique)) {
            case 1 : {
              GGS_lstring  var_cas_filePath ;
              inLexique.assignFromAttribute_tokenString (var_cas_filePath) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
              var_cas_outExpression = GGS_filewrapperInExpressionAST ::constructor_new (inLexique, var_cas_filewrapperName, var_cas_filePath COMMA_SOURCE_FILE_AT_LINE (566)) ;
              } break ;
            case 2 : {
              GGS_lstring  var_cas_filewrapperTemplateName ;
              inLexique.assignFromAttribute_tokenString (var_cas_filewrapperTemplateName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              GGS_semanticExpressionListAST  var_cas_expressionList ;
              nt_output_5F_expression_5F_list_ (inLexique, var_cas_expressionList) ;
              var_cas_outExpression = GGS_filewrapperTemplateInExpressionAST ::constructor_new (inLexique, var_cas_filewrapperName, var_cas_filewrapperTemplateName, var_cas_expressionList COMMA_SOURCE_FILE_AT_LINE (575)) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_factor_i24_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  GGS_lstring  var_cas_functionName ;
  inLexique.assignFromAttribute_tokenString (var_cas_functionName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5B_) COMMA_HERE) ;
  GGS_semanticExpressionListAST  var_cas_expressionList ;
  nt_output_5F_expression_5F_list_ (inLexique, var_cas_expressionList) ;
  var_cas_outExpression = GGS_functionCallExpressionAST ::constructor_new (inLexique, var_cas_functionName, var_cas_expressionList COMMA_SOURCE_FILE_AT_LINE (599)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_factor_i25_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionAST  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__60_) COMMA_HERE) ;
  GGS_lstring  var_cas_typeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  var_cas_outExpression = GGS_literalTypeInExpressionAST ::constructor_new (inLexique, var_cas_typeName COMMA_SOURCE_FILE_AT_LINE (617)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'output_expression_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionSyntax::rule_expressionSyntax_output_5F_expression_5F_list_i26_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticExpressionListAST  &var_cas_outExpressionList) {
  var_cas_outExpressionList = GGS_semanticExpressionListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
      switch (select_expressionSyntax_14 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21_) COMMA_HERE) ;
          GGS_semanticExpressionAST  var_cas_expression ;
          nt_expression_ (inLexique, var_cas_expression) ;
          var_cas_outExpressionList.addAssign_operation (var_cas_expression, GGS_location (inLexique)) ;
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

