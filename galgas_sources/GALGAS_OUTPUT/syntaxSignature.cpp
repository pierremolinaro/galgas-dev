//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'syntaxSignature.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 28th, 2010, at 21h42'36"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "syntaxSignature.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "syntaxSignature.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "syntaxSLRgrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@semanticInstructionForGeneration.appendSyntaxSignature'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticInstructionForGeneration__appendSyntaxSignature (C_Compiler &,
                                const cPtr_semanticInstructionForGeneration * operand_2108,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2108 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticInstructionForGeneration.appendSyntaxSignature'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature> gDispatchTableForMethod__semanticInstructionForGeneration__appendSyntaxSignature ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature (typeCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticInstructionForGeneration__appendSyntaxSignature.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature
findCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticInstructionForGeneration__appendSyntaxSignature.count ()) {
    result = gDispatchTableForMethod__semanticInstructionForGeneration__appendSyntaxSignature (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature (superClassPtr) ;
      gDispatchTableForMethod__semanticInstructionForGeneration__appendSyntaxSignature.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of function "syntaxSignatureOfInstructionList"        *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_semanticInstructionListForGeneration  function_syntaxSignatureOfInstructionList (C_Compiler & inLexique,
                                const GGS_semanticInstructionListForGeneration   var_cas_inInstructionList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_syntaxSignatureOfInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_semanticInstructionListForGeneration  var_cas_outResult ;
  var_cas_outResult = GGS_semanticInstructionListForGeneration ::constructor_emptyList () ;
  {
    GGS_semanticInstructionListForGeneration::cEnumerator enumerator_2534 (var_cas_inInstructionList, true) ;
    const GGS_semanticInstructionListForGeneration::cElement * operand_2534 = NULL ;
    while (((operand_2534 = enumerator_2534.nextObject ()))) {
      macroValidPointer (operand_2534) ;
      { typeCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature method = findCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature (operand_2534->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_2534->mInstruction (HERE), var_cas_outResult COMMA_SOURCE_FILE_AT_LINE (46)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_syntaxSignatureOfInstructionList\n") ;
  #endif
  return var_cas_outResult ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_syntaxSignatureOfInstructionList (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_semanticInstructionListForGeneration  arg_0 = GGS_semanticInstructionListForGeneration ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_semanticInstructionListForGeneration  result = function_syntaxSignatureOfInstructionList (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_syntaxSignatureOfInstructionList [1] = {& kTypeDescriptor_GGS_semanticInstructionListForGeneration } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_syntaxSignatureOfInstructionList ("syntaxSignatureOfInstructionList",
                              functionForGenericCall_syntaxSignatureOfInstructionList,
                              & kTypeDescriptor_GGS_semanticInstructionListForGeneration ,
                              1,
                              kArgumentTypeList_syntaxSignatureOfInstructionList) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@nonterminalInstructionForGeneration.appendSyntaxSignature'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__nonterminalInstructionForGeneration__appendSyntaxSignature (C_Compiler & inLexique,
                                const cPtr_nonterminalInstructionForGeneration * operand_2778,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2778 != NULL) {
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_nonterminalInstructionForGeneration ::constructor_new (inLexique, operand_2778->mInstructionLocation, operand_2778->mNonterminalName, GGS_string ("parse"), GGS_actualParameterListForGeneration ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (55))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@terminalCheckInstructionForGeneration.appendSyntaxSignature'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__terminalCheckInstructionForGeneration__appendSyntaxSignature (C_Compiler & inLexique,
                                const cPtr_terminalCheckInstructionForGeneration * operand_3220,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3220 != NULL) {
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_terminalCheckInstructionForGeneration ::constructor_new (inLexique, operand_3220->mInstructionLocation, operand_3220->mTerminalName, operand_3220->mLexiqueIdentifier, GGS_terminalCheckAssignementList ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (68))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@repeatInstructionForGeneration.appendSyntaxSignature'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__repeatInstructionForGeneration__appendSyntaxSignature (C_Compiler & inLexique,
                                const cPtr_repeatInstructionForGeneration * operand_3661,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3661 != NULL) {
    const GGS_semanticInstructionListForGeneration  var_cas_repeated_instructionList = function_syntaxSignatureOfInstructionList (inLexique, operand_3661->m_repeated_instructionList COMMA_SOURCE_FILE_AT_LINE (81)) ;
    GGS_listOfSemanticInstructionListForGeneration  var_cas_listOfSemanticInstructionListForGeneration = GGS_listOfSemanticInstructionListForGeneration ::constructor_emptyList () ;
    {
      GGS_listOfSemanticInstructionListForGeneration::cEnumerator enumerator_4032 (operand_3661->mListOfSemanticInstructionListForGeneration, true) ;
      const GGS_listOfSemanticInstructionListForGeneration::cElement * operand_4032 = NULL ;
      while (((operand_4032 = enumerator_4032.nextObject ()))) {
        macroValidPointer (operand_4032) ;
        var_cas_listOfSemanticInstructionListForGeneration.addAssign_operation (function_syntaxSignatureOfInstructionList (inLexique, operand_4032->mInstructionList COMMA_SOURCE_FILE_AT_LINE (85)), operand_4032->mEndOfInstructionList) ;
      }
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_repeatInstructionForGeneration ::constructor_new (inLexique, operand_3661->mInstructionLocation, operand_3661->mSyntaxComponentName, operand_3661->mChoiceIndex, var_cas_repeated_instructionList, operand_3661->mEndOfRepeatedInstructions, var_cas_listOfSemanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (90))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@selectInstructionForGeneration.appendSyntaxSignature'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__selectInstructionForGeneration__appendSyntaxSignature (C_Compiler & inLexique,
                                const cPtr_selectInstructionForGeneration * operand_4624,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4624 != NULL) {
    GGS_listOfSemanticInstructionListForGeneration  var_cas_listOfSemanticInstructionListForGeneration = GGS_listOfSemanticInstructionListForGeneration ::constructor_emptyList () ;
    {
      GGS_listOfSemanticInstructionListForGeneration::cEnumerator enumerator_4856 (operand_4624->mListOfSemanticInstructionListForGeneration, true) ;
      const GGS_listOfSemanticInstructionListForGeneration::cElement * operand_4856 = NULL ;
      while (((operand_4856 = enumerator_4856.nextObject ()))) {
        macroValidPointer (operand_4856) ;
        var_cas_listOfSemanticInstructionListForGeneration.addAssign_operation (function_syntaxSignatureOfInstructionList (inLexique, operand_4856->mInstructionList COMMA_SOURCE_FILE_AT_LINE (108)), operand_4856->mEndOfInstructionList) ;
      }
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_selectInstructionForGeneration ::constructor_new (inLexique, operand_4624->mInstructionLocation, operand_4624->mSyntaxComponentName, operand_4624->mChoiceIndex, var_cas_listOfSemanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (112))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@parseDoInstructionForGeneration.appendSyntaxSignature'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__parseDoInstructionForGeneration__appendSyntaxSignature (C_Compiler & inLexique,
                                const cPtr_parseDoInstructionForGeneration * operand_5381,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5381 != NULL) {
    GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
    GGS_location  automatic_var_5588_0 ;
    if (operand_5381->mListOfSemanticInstructionListForGeneration.isBuilt ()) {
      operand_5381->mListOfSemanticInstructionListForGeneration (HERE)->method_first (inLexique, var_cas_instructionList, automatic_var_5588_0 COMMA_SOURCE_FILE_AT_LINE (126)) ;
    }
    var_cas_ioInstructionListForGeneration.dotAssign_operation (function_syntaxSignatureOfInstructionList (inLexique, var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (127))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@parseLoopInstructionForGeneration.appendSyntaxSignature' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__parseLoopInstructionForGeneration__appendSyntaxSignature (C_Compiler & inLexique,
                                const cPtr_parseLoopInstructionForGeneration * operand_5846,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5846 != NULL) {
    var_cas_ioInstructionListForGeneration.dotAssign_operation (function_syntaxSignatureOfInstructionList (inLexique, operand_5846->mInstructionList COMMA_SOURCE_FILE_AT_LINE (135))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@parseWhenInstructionForGeneration.appendSyntaxSignature' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__parseWhenInstructionForGeneration__appendSyntaxSignature (C_Compiler & inLexique,
                                const cPtr_parseWhenInstructionForGeneration * operand_6178,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6178 != NULL) {
    var_cas_ioInstructionListForGeneration.dotAssign_operation (function_syntaxSignatureOfInstructionList (inLexique, operand_6178->mInstructionList COMMA_SOURCE_FILE_AT_LINE (143))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category reader '@semanticInstructionForGeneration.compareSyntaxInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_bool
category_reader__semanticInstructionForGeneration__compareSyntaxInstruction (C_Compiler &,
                                const cPtr_semanticInstructionForGeneration * operand_6815,
                                const GGS_semanticInstructionForGeneration   /* var_cas_inTestedInstruction */
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_bool var_cas_outOk ;
  if (operand_6815 != NULL) {
    var_cas_outOk = GGS_bool (true) ;
  }
  return var_cas_outOk ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category reader '@semanticInstructionForGeneration.compareSyntaxInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryReader__semanticInstructionForGeneration__compareSyntaxInstruction> gDispatchTableForReader__semanticInstructionForGeneration__compareSyntaxInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryReader__semanticInstructionForGeneration__compareSyntaxInstruction (typeCategoryReader__semanticInstructionForGeneration__compareSyntaxInstruction inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForReader__semanticInstructionForGeneration__compareSyntaxInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

static GGS_bool
category_reader__semanticInstructionForGeneration_defaultReader_compareSyntaxInstruction (C_Compiler &,
                                const cPtr_semanticInstructionForGeneration *,
                                const GGS_semanticInstructionForGeneration   
                                COMMA_UNUSED_LOCATION_ARGS) {
  return GGS_bool () ;
}

//---------------------------------------------------------------------------*

typeCategoryReader__semanticInstructionForGeneration__compareSyntaxInstruction
findCategoryReader__semanticInstructionForGeneration__compareSyntaxInstruction (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryReader__semanticInstructionForGeneration__compareSyntaxInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForReader__semanticInstructionForGeneration__compareSyntaxInstruction.count ()) {
    result = gDispatchTableForReader__semanticInstructionForGeneration__compareSyntaxInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryReader__semanticInstructionForGeneration__compareSyntaxInstruction (superClassPtr) ;
      gDispatchTableForReader__semanticInstructionForGeneration__compareSyntaxInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  if (NULL == result) {
    result = category_reader__semanticInstructionForGeneration_defaultReader_compareSyntaxInstruction ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of function "compareSyntaxSignature"             *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_bool function_compareSyntaxSignature (C_Compiler & inLexique,
                                const GGS_semanticInstructionListForGeneration   var_cas_inReferenceSignature,
                                const GGS_semanticInstructionListForGeneration   var_cas_inTestedSignature,
                                const GGS_location   var_cas_inErrorLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_compareSyntaxSignature at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_outOk ;
  var_cas_outOk = GGS_bool (true) ;
  {
    GGS_semanticInstructionListForGeneration::cEnumerator enumerator_7261 (var_cas_inReferenceSignature, true) ;
    const GGS_semanticInstructionListForGeneration::cElement * operand_7261 = NULL ;
    GGS_semanticInstructionListForGeneration::cEnumerator enumerator_7296 (var_cas_inTestedSignature, true) ;
    const GGS_semanticInstructionListForGeneration::cElement * operand_7296 = NULL ;
    while (((operand_7261 = enumerator_7261.nextObject ()))
        && ((operand_7296 = enumerator_7296.nextObject ()))
        && (var_cas_outOk.isBuiltAndTrue ())) {
      macroValidPointer (operand_7261) ;
      macroValidPointer (operand_7296) ;
      var_cas_outOk = (findCategoryReader__semanticInstructionForGeneration__compareSyntaxInstruction (operand_7261->mInstruction (HERE)->galgasRTTI ()) (inLexique, operand_7261->mInstruction.getPtr (), operand_7296->mInstruction COMMA_SOURCE_FILE_AT_LINE (169))) ;
    }
  }
  const GGS_bool cond_7946 = (var_cas_outOk).operator_and ((var_cas_inReferenceSignature.reader_length ()).operator_strictInf (var_cas_inTestedSignature.reader_length ())) ;
  if (cond_7946.isBuiltAndTrue ()) {
    GGS_semanticInstructionForGeneration  var_cas_instruction = var_cas_inTestedSignature.reader_mInstructionAtIndex (inLexique, var_cas_inReferenceSignature.reader_length () COMMA_SOURCE_FILE_AT_LINE (172)) ;
    { const GGS_semanticInstructionForGeneration _var_7931 = var_cas_instruction ; // CAST instruction
      if (_var_7931.getPtr () != NULL) {
        macroValidPointer (_var_7931.getPtr ()) ;
        if (dynamic_cast <cPtr_syntaxInstructionForGeneration *> (_var_7931.getPtr ()) != NULL) {
          const GGS_syntaxInstructionForGeneration var_cas_si (_var_7931.getPtr ()) ;
          var_cas_si.reader_mInstructionLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (175)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("syntax signature error, exceeding instruction; this branch has more syntax instructions than reference branch") COMMA_SOURCE_FILE_AT_LINE (178)) ;
        }else{
          var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error") COMMA_SOURCE_FILE_AT_LINE (180)) ;
        }
      }
    }
  }else if (cond_7946.isBuiltAndFalse ()) {
    const GGS_bool cond_8600 = (var_cas_outOk).operator_and ((var_cas_inReferenceSignature.reader_length ()).operator_strictSup (var_cas_inTestedSignature.reader_length ())) ;
    if (cond_8600.isBuiltAndTrue ()) {
      var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("syntax signature error, missing instruction; this branch has less syntax instructions than reference branch") COMMA_SOURCE_FILE_AT_LINE (185)) ;
      GGS_semanticInstructionForGeneration  var_cas_instruction = var_cas_inReferenceSignature.reader_mInstructionAtIndex (inLexique, var_cas_inTestedSignature.reader_length () COMMA_SOURCE_FILE_AT_LINE (185)) ;
      { const GGS_semanticInstructionForGeneration _var_8587 = var_cas_instruction ; // CAST instruction
        if (_var_8587.getPtr () != NULL) {
          macroValidPointer (_var_8587.getPtr ()) ;
          if (dynamic_cast <cPtr_syntaxInstructionForGeneration *> (_var_8587.getPtr ()) != NULL) {
            const GGS_syntaxInstructionForGeneration var_cas_si (_var_8587.getPtr ()) ;
            var_cas_si.reader_mInstructionLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (188)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this is the syntax instruction in reference branch that corresponds to the first missing instruction") COMMA_SOURCE_FILE_AT_LINE (191)) ;
          }else{
            var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error") COMMA_SOURCE_FILE_AT_LINE (193)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_compareSyntaxSignature\n") ;
  #endif
  return var_cas_outOk ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_compareSyntaxSignature (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_semanticInstructionListForGeneration  arg_0 = GGS_semanticInstructionListForGeneration ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_semanticInstructionListForGeneration  arg_1 = GGS_semanticInstructionListForGeneration ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (1) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_location  arg_2 = GGS_location ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (2) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_bool result = function_compareSyntaxSignature (inLexique,
                            arg_0,
                            arg_1,
                            arg_2
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_compareSyntaxSignature [3] = {& kTypeDescriptor_GGS_semanticInstructionListForGeneration ,
                              & kTypeDescriptor_GGS_semanticInstructionListForGeneration ,
                              & kTypeDescriptor_GGS_location } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_compareSyntaxSignature ("compareSyntaxSignature",
                              functionForGenericCall_compareSyntaxSignature,
                              & kTypeDescriptor_GGS_bool,
                              3,
                              kArgumentTypeList_compareSyntaxSignature) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Category reader '@terminalCheckInstructionForGeneration.compareSyntaxInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_bool
category_reader__terminalCheckInstructionForGeneration__compareSyntaxInstruction (C_Compiler & inLexique,
                                const cPtr_terminalCheckInstructionForGeneration * operand_8780,
                                const GGS_semanticInstructionForGeneration   var_cas_inTestedInstruction
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_bool var_cas_outOk ;
  if (operand_8780 != NULL) {
    { const GGS_semanticInstructionForGeneration _var_9506 = var_cas_inTestedInstruction ; // CAST instruction
      if (_var_9506.getPtr () != NULL) {
        macroValidPointer (_var_9506.getPtr ()) ;
        if (typeid (cPtr_terminalCheckInstructionForGeneration) == typeid (* (_var_9506.getPtr ()))) {
          const GGS_terminalCheckInstructionForGeneration var_cas_si (_var_9506.getPtr ()) ;
          var_cas_outOk = (operand_8780->mTerminalName).operator_isEqual (var_cas_si.reader_mTerminalName (inLexique COMMA_SOURCE_FILE_AT_LINE (205))) ;
          const GGS_bool cond_9184 = (var_cas_outOk).operator_not () ;
          if (cond_9184.isBuiltAndTrue ()) {
            var_cas_si.reader_mInstructionLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (207)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("syntax signature error; the expected syntax instruction here is the '$")).operator_concat (operand_8780->mTerminalName)).operator_concat (GGS_string ("$' terminal check")) COMMA_SOURCE_FILE_AT_LINE (210)) ;
          }
        }else if (dynamic_cast <cPtr_syntaxInstructionForGeneration *> (_var_9506.getPtr ()) != NULL) {
          const GGS_syntaxInstructionForGeneration var_cas_si (_var_9506.getPtr ()) ;
          var_cas_si.reader_mInstructionLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (212)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("syntax signature error; the expected syntax instruction here is the '$")).operator_concat (operand_8780->mTerminalName)).operator_concat (GGS_string ("$' terminal check")) COMMA_SOURCE_FILE_AT_LINE (215)) ;
          var_cas_outOk = GGS_bool (false) ;
        }else{
          operand_8780->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error") COMMA_SOURCE_FILE_AT_LINE (218)) ;
          var_cas_outOk = GGS_bool (false) ;
        }
      }
    }
    const GGS_bool cond_9620 = (var_cas_outOk).operator_not () ;
    if (cond_9620.isBuiltAndTrue ()) {
      operand_8780->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("reference syntax instruction is here") COMMA_SOURCE_FILE_AT_LINE (224)) ;
    }
  }
  return var_cas_outOk ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category reader '@nonterminalInstructionForGeneration.compareSyntaxInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_bool
category_reader__nonterminalInstructionForGeneration__compareSyntaxInstruction (C_Compiler & inLexique,
                                const cPtr_nonterminalInstructionForGeneration * operand_9798,
                                const GGS_semanticInstructionForGeneration   var_cas_inTestedInstruction
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_bool var_cas_outOk ;
  if (operand_9798 != NULL) {
    { const GGS_semanticInstructionForGeneration _var_10550 = var_cas_inTestedInstruction ; // CAST instruction
      if (_var_10550.getPtr () != NULL) {
        macroValidPointer (_var_10550.getPtr ()) ;
        if (typeid (cPtr_nonterminalInstructionForGeneration) == typeid (* (_var_10550.getPtr ()))) {
          const GGS_nonterminalInstructionForGeneration var_cas_si (_var_10550.getPtr ()) ;
          var_cas_outOk = (operand_9798->mNonterminalName).operator_isEqual (var_cas_si.reader_mNonterminalName (inLexique COMMA_SOURCE_FILE_AT_LINE (235))) ;
          const GGS_bool cond_10217 = (var_cas_outOk).operator_not () ;
          if (cond_10217.isBuiltAndTrue ()) {
            var_cas_si.reader_mInstructionLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (237)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("syntax signature error; the expected syntax instruction here is the '<")).operator_concat (operand_9798->mNonterminalName)).operator_concat (GGS_string (">' nonterminal invocation")) COMMA_SOURCE_FILE_AT_LINE (240)) ;
          }
        }else if (dynamic_cast <cPtr_syntaxInstructionForGeneration *> (_var_10550.getPtr ()) != NULL) {
          const GGS_syntaxInstructionForGeneration var_cas_si (_var_10550.getPtr ()) ;
          var_cas_si.reader_mInstructionLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (242)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("syntax signature error; the expected syntax instruction here is the '<")).operator_concat (operand_9798->mNonterminalName)).operator_concat (GGS_string (">' nonterminal invocation")) COMMA_SOURCE_FILE_AT_LINE (245)) ;
          var_cas_outOk = GGS_bool (false) ;
        }else{
          operand_9798->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error") COMMA_SOURCE_FILE_AT_LINE (248)) ;
          var_cas_outOk = GGS_bool (false) ;
        }
      }
    }
    const GGS_bool cond_10664 = (var_cas_outOk).operator_not () ;
    if (cond_10664.isBuiltAndTrue ()) {
      operand_9798->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("reference syntax instruction is here") COMMA_SOURCE_FILE_AT_LINE (254)) ;
    }
  }
  return var_cas_outOk ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category reader '@repeatInstructionForGeneration.compareSyntaxInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_bool
category_reader__repeatInstructionForGeneration__compareSyntaxInstruction (C_Compiler & inLexique,
                                const cPtr_repeatInstructionForGeneration * operand_10837,
                                const GGS_semanticInstructionForGeneration   var_cas_inTestedInstruction
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_bool var_cas_outOk ;
  if (operand_10837 != NULL) {
    { const GGS_semanticInstructionForGeneration _var_12212 = var_cas_inTestedInstruction ; // CAST instruction
      if (_var_12212.getPtr () != NULL) {
        macroValidPointer (_var_12212.getPtr ()) ;
        if (typeid (cPtr_repeatInstructionForGeneration) == typeid (* (_var_12212.getPtr ()))) {
          const GGS_repeatInstructionForGeneration var_cas_si (_var_12212.getPtr ()) ;
          var_cas_outOk = function_compareSyntaxSignature (inLexique, operand_10837->m_repeated_instructionList, var_cas_si.reader_m_repeated_instructionList (inLexique COMMA_SOURCE_FILE_AT_LINE (265)), var_cas_si.reader_mEndOfRepeatedInstructions (inLexique COMMA_SOURCE_FILE_AT_LINE (265)) COMMA_SOURCE_FILE_AT_LINE (265)) ;
          const GGS_bool cond_11621 = (var_cas_outOk).operator_and ((operand_10837->mListOfSemanticInstructionListForGeneration.reader_length ()).operator_isNotEqual (var_cas_si.reader_mListOfSemanticInstructionListForGeneration (inLexique COMMA_SOURCE_FILE_AT_LINE (266)).reader_length ())) ;
          if (cond_11621.isBuiltAndTrue ()) {
            var_cas_si.reader_mInstructionLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (267)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("syntax signature error; the reference 'repeat' instruction has ")).operator_concat (operand_10837->mListOfSemanticInstructionListForGeneration.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (269)))).operator_concat (GGS_string (" 'while' branche(s), but this instruction has "))).operator_concat (var_cas_si.reader_mListOfSemanticInstructionListForGeneration (inLexique COMMA_SOURCE_FILE_AT_LINE (271)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (271))) COMMA_SOURCE_FILE_AT_LINE (273)) ;
            var_cas_outOk = GGS_bool (false) ;
          }
          {
            GGS_listOfSemanticInstructionListForGeneration::cEnumerator enumerator_11682 (operand_10837->mListOfSemanticInstructionListForGeneration, true) ;
            const GGS_listOfSemanticInstructionListForGeneration::cElement * operand_11682 = NULL ;
            GGS_listOfSemanticInstructionListForGeneration::cEnumerator enumerator_11701 (var_cas_si.reader_mListOfSemanticInstructionListForGeneration (inLexique COMMA_SOURCE_FILE_AT_LINE (275)), true) ;
            const GGS_listOfSemanticInstructionListForGeneration::cElement * operand_11701 = NULL ;
            while (((operand_11682 = enumerator_11682.nextObject ()))
                && ((operand_11701 = enumerator_11701.nextObject ()))
                && (var_cas_outOk.isBuiltAndTrue ())) {
              macroValidPointer (operand_11682) ;
              macroValidPointer (operand_11701) ;
              var_cas_outOk = function_compareSyntaxSignature (inLexique, operand_11682->mInstructionList, operand_11701->mInstructionList, operand_11701->mEndOfInstructionList COMMA_SOURCE_FILE_AT_LINE (276)) ;
            }
          }
        }else if (dynamic_cast <cPtr_syntaxInstructionForGeneration *> (_var_12212.getPtr ()) != NULL) {
          const GGS_syntaxInstructionForGeneration var_cas_si (_var_12212.getPtr ()) ;
          var_cas_si.reader_mInstructionLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (279)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("syntax signature error; the expected syntax instruction here is a 'repeat' instruction") COMMA_SOURCE_FILE_AT_LINE (282)) ;
          var_cas_outOk = GGS_bool (false) ;
        }else{
          operand_10837->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error") COMMA_SOURCE_FILE_AT_LINE (285)) ;
          var_cas_outOk = GGS_bool (false) ;
        }
      }
    }
    const GGS_bool cond_12326 = (var_cas_outOk).operator_not () ;
    if (cond_12326.isBuiltAndTrue ()) {
      operand_10837->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("reference syntax instruction is here") COMMA_SOURCE_FILE_AT_LINE (291)) ;
    }
  }
  return var_cas_outOk ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category reader '@selectInstructionForGeneration.compareSyntaxInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_bool
category_reader__selectInstructionForGeneration__compareSyntaxInstruction (C_Compiler & inLexique,
                                const cPtr_selectInstructionForGeneration * operand_12499,
                                const GGS_semanticInstructionForGeneration   var_cas_inTestedInstruction
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_bool var_cas_outOk ;
  if (operand_12499 != NULL) {
    { const GGS_semanticInstructionForGeneration _var_13760 = var_cas_inTestedInstruction ; // CAST instruction
      if (_var_13760.getPtr () != NULL) {
        macroValidPointer (_var_13760.getPtr ()) ;
        if (typeid (cPtr_selectInstructionForGeneration) == typeid (* (_var_13760.getPtr ()))) {
          const GGS_selectInstructionForGeneration var_cas_si (_var_13760.getPtr ()) ;
          var_cas_outOk = GGS_bool (true) ;
          const GGS_bool cond_13169 = (var_cas_outOk).operator_and ((operand_12499->mListOfSemanticInstructionListForGeneration.reader_length ()).operator_isNotEqual (var_cas_si.reader_mListOfSemanticInstructionListForGeneration (inLexique COMMA_SOURCE_FILE_AT_LINE (303)).reader_length ())) ;
          if (cond_13169.isBuiltAndTrue ()) {
            var_cas_si.reader_mInstructionLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (304)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("syntax signature error; the reference 'select' instruction has ")).operator_concat (operand_12499->mListOfSemanticInstructionListForGeneration.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (306)))).operator_concat (GGS_string (" 'while' branche(s), but this instruction has "))).operator_concat (var_cas_si.reader_mListOfSemanticInstructionListForGeneration (inLexique COMMA_SOURCE_FILE_AT_LINE (308)).reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (308))) COMMA_SOURCE_FILE_AT_LINE (310)) ;
            var_cas_outOk = GGS_bool (false) ;
          }
          {
            GGS_listOfSemanticInstructionListForGeneration::cEnumerator enumerator_13230 (operand_12499->mListOfSemanticInstructionListForGeneration, true) ;
            const GGS_listOfSemanticInstructionListForGeneration::cElement * operand_13230 = NULL ;
            GGS_listOfSemanticInstructionListForGeneration::cEnumerator enumerator_13249 (var_cas_si.reader_mListOfSemanticInstructionListForGeneration (inLexique COMMA_SOURCE_FILE_AT_LINE (312)), true) ;
            const GGS_listOfSemanticInstructionListForGeneration::cElement * operand_13249 = NULL ;
            while (((operand_13230 = enumerator_13230.nextObject ()))
                && ((operand_13249 = enumerator_13249.nextObject ()))
                && (var_cas_outOk.isBuiltAndTrue ())) {
              macroValidPointer (operand_13230) ;
              macroValidPointer (operand_13249) ;
              var_cas_outOk = function_compareSyntaxSignature (inLexique, operand_13230->mInstructionList, operand_13249->mInstructionList, operand_13249->mEndOfInstructionList COMMA_SOURCE_FILE_AT_LINE (313)) ;
            }
          }
        }else if (dynamic_cast <cPtr_syntaxInstructionForGeneration *> (_var_13760.getPtr ()) != NULL) {
          const GGS_syntaxInstructionForGeneration var_cas_si (_var_13760.getPtr ()) ;
          var_cas_si.reader_mInstructionLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (316)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("syntax signature error; the expected syntax instruction here is a 'select' instruction") COMMA_SOURCE_FILE_AT_LINE (319)) ;
          var_cas_outOk = GGS_bool (false) ;
        }else{
          operand_12499->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error") COMMA_SOURCE_FILE_AT_LINE (322)) ;
          var_cas_outOk = GGS_bool (false) ;
        }
      }
    }
    const GGS_bool cond_13874 = (var_cas_outOk).operator_not () ;
    if (cond_13874.isBuiltAndTrue ()) {
      operand_12499->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("reference syntax instruction is here") COMMA_SOURCE_FILE_AT_LINE (328)) ;
    }
  }
  return var_cas_outOk ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_syntaxSignature (void) {
  enterCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature (category_method__semanticInstructionForGeneration__appendSyntaxSignature, gClassInfoFor__semanticInstructionForGeneration.slotID ()) ;
  enterCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature ((typeCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature) category_method__nonterminalInstructionForGeneration__appendSyntaxSignature, gClassInfoFor__nonterminalInstructionForGeneration.slotID ()) ;
  enterCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature ((typeCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature) category_method__terminalCheckInstructionForGeneration__appendSyntaxSignature, gClassInfoFor__terminalCheckInstructionForGeneration.slotID ()) ;
  enterCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature ((typeCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature) category_method__repeatInstructionForGeneration__appendSyntaxSignature, gClassInfoFor__repeatInstructionForGeneration.slotID ()) ;
  enterCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature ((typeCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature) category_method__selectInstructionForGeneration__appendSyntaxSignature, gClassInfoFor__selectInstructionForGeneration.slotID ()) ;
  enterCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature ((typeCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature) category_method__parseDoInstructionForGeneration__appendSyntaxSignature, gClassInfoFor__parseDoInstructionForGeneration.slotID ()) ;
  enterCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature ((typeCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature) category_method__parseLoopInstructionForGeneration__appendSyntaxSignature, gClassInfoFor__parseLoopInstructionForGeneration.slotID ()) ;
  enterCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature ((typeCategoryMethod__semanticInstructionForGeneration__appendSyntaxSignature) category_method__parseWhenInstructionForGeneration__appendSyntaxSignature, gClassInfoFor__parseWhenInstructionForGeneration.slotID ()) ;
  enterCategoryReader__semanticInstructionForGeneration__compareSyntaxInstruction (category_reader__semanticInstructionForGeneration__compareSyntaxInstruction, gClassInfoFor__semanticInstructionForGeneration.slotID ()) ;
  enterCategoryReader__semanticInstructionForGeneration__compareSyntaxInstruction ((typeCategoryReader__semanticInstructionForGeneration__compareSyntaxInstruction) category_reader__terminalCheckInstructionForGeneration__compareSyntaxInstruction, gClassInfoFor__terminalCheckInstructionForGeneration.slotID ()) ;
  enterCategoryReader__semanticInstructionForGeneration__compareSyntaxInstruction ((typeCategoryReader__semanticInstructionForGeneration__compareSyntaxInstruction) category_reader__nonterminalInstructionForGeneration__compareSyntaxInstruction, gClassInfoFor__nonterminalInstructionForGeneration.slotID ()) ;
  enterCategoryReader__semanticInstructionForGeneration__compareSyntaxInstruction ((typeCategoryReader__semanticInstructionForGeneration__compareSyntaxInstruction) category_reader__repeatInstructionForGeneration__compareSyntaxInstruction, gClassInfoFor__repeatInstructionForGeneration.slotID ()) ;
  enterCategoryReader__semanticInstructionForGeneration__compareSyntaxInstruction ((typeCategoryReader__semanticInstructionForGeneration__compareSyntaxInstruction) category_reader__selectInstructionForGeneration__compareSyntaxInstruction, gClassInfoFor__selectInstructionForGeneration.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_syntaxSignature (void) {
  gDispatchTableForMethod__semanticInstructionForGeneration__appendSyntaxSignature.free () ;
  gDispatchTableForReader__semanticInstructionForGeneration__compareSyntaxInstruction.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_syntaxSignature (prologueRoutineFor_syntaxSignature, epilogueRoutineFor_syntaxSignature) ;

//---------------------------------------------------------------------------*

