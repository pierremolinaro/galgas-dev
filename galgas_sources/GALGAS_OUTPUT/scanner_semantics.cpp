//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'scanner_semantics.cpp'                        *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                     october 14th, 2006, at 23h17'23"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "scanner_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  static const char gGGSsourceFile [] = "scanner_semantics.ggs" ;
  #define SOURCE_FILE_AT_LINE(line) , gGGSsourceFile, line
#else
  #define SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                   class map 'typeLexicalAttributesMap'                    *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_typeLexicalAttributesMap::
elementOf_GGS_typeLexicalAttributesMap (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_typeLexicalAttributesMap & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_typeLexicalAttributesMap::
appendForMapDescription (C_Lexique & _inLexique,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "["
           << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "->" ;
  ioString << mInfo.attributType.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "]" ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_typeLexicalAttributesMap::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_typeLexicalAttributesMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_typeLexicalAttributesMap * info = (e_typeLexicalAttributesMap *) inInfo ;
  macroMyNew (p, element_type (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

GGS_typeLexicalAttributesMap GGS_typeLexicalAttributesMap::
constructor_emptyMap (C_Lexique & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_typeLexicalAttributesMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_typeLexicalAttributesMap::internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <element_type *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  element_type * p = (element_type *) inPtr ;
  bool extension = false ; // Unused here
  sint32 index = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, mSharedMapRoot->_mRoot, extension, index, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_typeLexicalAttributesMap::
insertElement (C_Lexique & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_AC_galgasType &  inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  sint32 index = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_typeLexicalAttributesMap info  ;
    info.attributType = inParameter0 ;
    bool extension = false ; // Unused here
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, extension, index, existingKeyLocation) ;
    if (index < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
     }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (index >= 0, (uint32) index), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_typeLexicalAttributesMap::
searchElement (C_Lexique & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_AC_galgasType   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  element_type * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <element_type *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (element_type *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop_operation () ;
    if (outIndex != NULL) {
      outIndex->_drop_operation () ;
     }
  }else{
    outParameter0 = node->mInfo.attributType ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mIndex), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_typeLexicalAttributesMap::method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_AC_galgasType   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 "the lexical attribute '%K' is not declared",
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_typeLexicalAttributesMap::
method_insertKey (C_Lexique & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (_inLexique,
                 "the lexical attribute '%K' is already declared in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_typeLexicalAttributesMap GGS_typeLexicalAttributesMap::
constructor_mapWithMapToOverride (C_Lexique & /* inLexique */,
                                  const GGS_typeLexicalAttributesMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_typeLexicalAttributesMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mNextIndex = inMapToOverride.mSharedMapRoot->mNextIndex ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_typeLexicalAttributesMap GGS_typeLexicalAttributesMap::
reader_overriddenMap (C_Lexique & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_typeLexicalAttributesMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_typeLexicalAttributesMap::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @typeLexicalAttributesMap " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    element_type * p = firstObject () ;
    while (p != NULL) {
      macroValidPointer (p) ;
      s << "\n" ;
      s.writeSpaces (inIndentation + 1) ;
      p->appendForMapDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
      p = p->nextObject () ;
    }
  }else{
    s << "not built" ;
  }
  s << ">\n" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        class map 'lexicalTypeMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_lexicalTypeMap::
elementOf_GGS_lexicalTypeMap (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_lexicalTypeMap & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_lexicalTypeMap::
appendForMapDescription (C_Lexique & _inLexique,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "["
           << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "->" ;
  ioString << mInfo.mAttributType.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "]" ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_lexicalTypeMap::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_lexicalTypeMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_lexicalTypeMap * info = (e_lexicalTypeMap *) inInfo ;
  macroMyNew (p, element_type (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

GGS_lexicalTypeMap GGS_lexicalTypeMap::
constructor_emptyMap (C_Lexique & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_lexicalTypeMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_lexicalTypeMap::internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <element_type *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  element_type * p = (element_type *) inPtr ;
  bool extension = false ; // Unused here
  sint32 index = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, mSharedMapRoot->_mRoot, extension, index, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_lexicalTypeMap::
insertElement (C_Lexique & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_AC_galgasType &  inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  sint32 index = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_lexicalTypeMap info  ;
    info.mAttributType = inParameter0 ;
    bool extension = false ; // Unused here
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, extension, index, existingKeyLocation) ;
    if (index < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
     }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (index >= 0, (uint32) index), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_lexicalTypeMap::
searchElement (C_Lexique & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_AC_galgasType   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  element_type * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <element_type *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (element_type *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop_operation () ;
    if (outIndex != NULL) {
      outIndex->_drop_operation () ;
     }
  }else{
    outParameter0 = node->mInfo.mAttributType ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mIndex), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_lexicalTypeMap::method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_AC_galgasType   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 "there is no type named '@%K'",
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_lexicalTypeMap::
method_insertKey (C_Lexique & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (_inLexique,
                 "--- internal error ---",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_lexicalTypeMap GGS_lexicalTypeMap::
constructor_mapWithMapToOverride (C_Lexique & /* inLexique */,
                                  const GGS_lexicalTypeMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_lexicalTypeMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mNextIndex = inMapToOverride.mSharedMapRoot->mNextIndex ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lexicalTypeMap GGS_lexicalTypeMap::
reader_overriddenMap (C_Lexique & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lexicalTypeMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_lexicalTypeMap::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @lexicalTypeMap " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    element_type * p = firstObject () ;
    while (p != NULL) {
      macroValidPointer (p) ;
      s << "\n" ;
      s.writeSpaces (inIndentation + 1) ;
      p->appendForMapDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
      p = p->nextObject () ;
    }
  }else{
    s << "not built" ;
  }
  s << ">\n" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   class map 'typeTableMessagesErreurs'                    *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_typeTableMessagesErreurs::
elementOf_GGS_typeTableMessagesErreurs (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_typeTableMessagesErreurs & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_typeTableMessagesErreurs::
appendForMapDescription (C_Lexique & _inLexique,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "["
           << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "->" ;
  ioString << mInfo.mErrorMessage.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "]" ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_typeTableMessagesErreurs::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_typeTableMessagesErreurs *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_typeTableMessagesErreurs * info = (e_typeTableMessagesErreurs *) inInfo ;
  macroMyNew (p, element_type (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

GGS_typeTableMessagesErreurs GGS_typeTableMessagesErreurs::
constructor_emptyMap (C_Lexique & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_typeTableMessagesErreurs result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_typeTableMessagesErreurs::internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <element_type *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  element_type * p = (element_type *) inPtr ;
  bool extension = false ; // Unused here
  sint32 index = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, mSharedMapRoot->_mRoot, extension, index, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_typeTableMessagesErreurs::
insertElement (C_Lexique & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_lstring &  inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  sint32 index = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_typeTableMessagesErreurs info  ;
    info.mErrorMessage = inParameter0 ;
    bool extension = false ; // Unused here
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, extension, index, existingKeyLocation) ;
    if (index < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
     }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (index >= 0, (uint32) index), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_typeTableMessagesErreurs::
searchElement (C_Lexique & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_lstring   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  element_type * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <element_type *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (element_type *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop_operation () ;
    if (outIndex != NULL) {
      outIndex->_drop_operation () ;
     }
  }else{
    outParameter0 = node->mInfo.mErrorMessage ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mIndex), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_typeTableMessagesErreurs::method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_lstring   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 "the error message '%K' is not declared",
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_typeTableMessagesErreurs::method_searchKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_lstring   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 "the error message '%K' is not declared",
                 inKey,
                 outParameter0,
                 & outIndex
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_typeTableMessagesErreurs::
method_insertKey (C_Lexique & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_lstring & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (_inLexique,
                 "the error message '%K' is already declared in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_typeTableMessagesErreurs GGS_typeTableMessagesErreurs::
constructor_mapWithMapToOverride (C_Lexique & /* inLexique */,
                                  const GGS_typeTableMessagesErreurs & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_typeTableMessagesErreurs result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mNextIndex = inMapToOverride.mSharedMapRoot->mNextIndex ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_typeTableMessagesErreurs GGS_typeTableMessagesErreurs::
reader_overriddenMap (C_Lexique & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_typeTableMessagesErreurs result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_typeTableMessagesErreurs::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @typeTableMessagesErreurs " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    element_type * p = firstObject () ;
    while (p != NULL) {
      macroValidPointer (p) ;
      s << "\n" ;
      s.writeSpaces (inIndentation + 1) ;
      p->appendForMapDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
      p = p->nextObject () ;
    }
  }else{
    s << "not built" ;
  }
  s << ">\n" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                           class map 'M_styles'                            *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_M_styles::
elementOf_GGS_M_styles (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_M_styles & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_M_styles::
appendForMapDescription (C_Lexique & _inLexique,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "["
           << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "->" ;
  ioString << mInfo.mTitle.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "]" ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_M_styles::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_M_styles *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_M_styles * info = (e_M_styles *) inInfo ;
  macroMyNew (p, element_type (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

GGS_M_styles GGS_M_styles::
constructor_emptyMap (C_Lexique & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_M_styles result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_M_styles::internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <element_type *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  element_type * p = (element_type *) inPtr ;
  bool extension = false ; // Unused here
  sint32 index = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, mSharedMapRoot->_mRoot, extension, index, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_M_styles::
insertElement (C_Lexique & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_lstring &  inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  sint32 index = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_M_styles info  ;
    info.mTitle = inParameter0 ;
    bool extension = false ; // Unused here
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, extension, index, existingKeyLocation) ;
    if (index < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
     }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (index >= 0, (uint32) index), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_M_styles::
searchElement (C_Lexique & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_lstring   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  element_type * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <element_type *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (element_type *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop_operation () ;
    if (outIndex != NULL) {
      outIndex->_drop_operation () ;
     }
  }else{
    outParameter0 = node->mInfo.mTitle ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mIndex), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_M_styles::method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_lstring   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 "the '%K' style is not declared",
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_M_styles::method_searchKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_lstring   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 "the '%K' style is not declared",
                 inKey,
                 outParameter0,
                 & outIndex
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_M_styles::
method_insertKey (C_Lexique & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_lstring & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (_inLexique,
                 "the '%K' style is already declared in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_M_styles GGS_M_styles::
constructor_mapWithMapToOverride (C_Lexique & /* inLexique */,
                                  const GGS_M_styles & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_M_styles result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mNextIndex = inMapToOverride.mSharedMapRoot->mNextIndex ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_M_styles GGS_M_styles::
reader_overriddenMap (C_Lexique & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_M_styles result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_M_styles::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @M_styles " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    element_type * p = firstObject () ;
    while (p != NULL) {
      macroValidPointer (p) ;
      s << "\n" ;
      s.writeSpaces (inIndentation + 1) ;
      p->appendForMapDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
      p = p->nextObject () ;
    }
  }else{
    s << "not built" ;
  }
  s << ">\n" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 class map 'typeTableDefinitionTerminaux'                  *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_typeTableDefinitionTerminaux::
elementOf_GGS_typeTableDefinitionTerminaux (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_typeTableDefinitionTerminaux & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_typeTableDefinitionTerminaux::
appendForMapDescription (C_Lexique & _inLexique,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "["
           << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "->" ;
  ioString << mInfo.mErrorMessage.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << mInfo.attributListeDesAttributs.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << mInfo.mStyleIndex.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "]" ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_typeTableDefinitionTerminaux::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_typeTableDefinitionTerminaux *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_typeTableDefinitionTerminaux * info = (e_typeTableDefinitionTerminaux *) inInfo ;
  macroMyNew (p, element_type (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

GGS_typeTableDefinitionTerminaux GGS_typeTableDefinitionTerminaux::
constructor_emptyMap (C_Lexique & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_typeTableDefinitionTerminaux result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_typeTableDefinitionTerminaux::internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <element_type *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  element_type * p = (element_type *) inPtr ;
  bool extension = false ; // Unused here
  sint32 index = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, mSharedMapRoot->_mRoot, extension, index, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_typeTableDefinitionTerminaux::
insertElement (C_Lexique & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_string&  inParameter0,
               const GGS_typeListeAttributsSemantiques &  inParameter1,
               const GGS_luint &  inParameter2,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  sint32 index = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inParameter1._isBuilt ()
   && inParameter2._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_typeTableDefinitionTerminaux info  ;
    info.mErrorMessage = inParameter0 ;
    info.attributListeDesAttributs = inParameter1 ;
    info.mStyleIndex = inParameter2 ;
    bool extension = false ; // Unused here
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, extension, index, existingKeyLocation) ;
    if (index < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
     }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (index >= 0, (uint32) index), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_typeTableDefinitionTerminaux::
searchElement (C_Lexique & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_string  & outParameter0,
               GGS_typeListeAttributsSemantiques   & outParameter1,
               GGS_luint   & outParameter2,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  element_type * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <element_type *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (element_type *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop_operation () ;
    outParameter1._drop_operation () ;
    outParameter2._drop_operation () ;
    if (outIndex != NULL) {
      outIndex->_drop_operation () ;
     }
  }else{
    outParameter0 = node->mInfo.mErrorMessage ;
    outParameter1 = node->mInfo.attributListeDesAttributs ;
    outParameter2 = node->mInfo.mStyleIndex ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mIndex), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_typeTableDefinitionTerminaux::method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_string  & outParameter0,
                                GGS_typeListeAttributsSemantiques   & outParameter1,
                                GGS_luint   & outParameter2 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 "the terminal symbol '$%K$' is not declared",
                 inKey,
                 outParameter0,
                 outParameter1,
                 outParameter2,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_typeTableDefinitionTerminaux::
method_insertKey (C_Lexique & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_string& inParameter0,
                                const GGS_typeListeAttributsSemantiques & inParameter1,
                                const GGS_luint & inParameter2 COMMA_LOCATION_ARGS) {
  insertElement (_inLexique,
                 "the terminal symbol '$%K$' is already declared in %L",
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_typeTableDefinitionTerminaux GGS_typeTableDefinitionTerminaux::
constructor_mapWithMapToOverride (C_Lexique & /* inLexique */,
                                  const GGS_typeTableDefinitionTerminaux & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_typeTableDefinitionTerminaux result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mNextIndex = inMapToOverride.mSharedMapRoot->mNextIndex ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_typeTableDefinitionTerminaux GGS_typeTableDefinitionTerminaux::
reader_overriddenMap (C_Lexique & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_typeTableDefinitionTerminaux result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_typeTableDefinitionTerminaux::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @typeTableDefinitionTerminaux " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    element_type * p = firstObject () ;
    while (p != NULL) {
      macroValidPointer (p) ;
      s << "\n" ;
      s.writeSpaces (inIndentation + 1) ;
      p->appendForMapDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
      p = p->nextObject () ;
    }
  }else{
    s << "not built" ;
  }
  s << ">\n" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    class map 'typeTableMotsReserves'                      *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_typeTableMotsReserves::
elementOf_GGS_typeTableMotsReserves (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_typeTableMotsReserves & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_typeTableMotsReserves::
appendForMapDescription (C_Lexique & _inLexique,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "["
           << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "->" ;
  ioString << mInfo.attributNomTerminal.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "]" ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_typeTableMotsReserves::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_typeTableMotsReserves *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_typeTableMotsReserves * info = (e_typeTableMotsReserves *) inInfo ;
  macroMyNew (p, element_type (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

GGS_typeTableMotsReserves GGS_typeTableMotsReserves::
constructor_emptyMap (C_Lexique & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_typeTableMotsReserves result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_typeTableMotsReserves::internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <element_type *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  element_type * p = (element_type *) inPtr ;
  bool extension = false ; // Unused here
  sint32 index = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, mSharedMapRoot->_mRoot, extension, index, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_typeTableMotsReserves::
insertElement (C_Lexique & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_lstring &  inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  sint32 index = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_typeTableMotsReserves info  ;
    info.attributNomTerminal = inParameter0 ;
    bool extension = false ; // Unused here
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, extension, index, existingKeyLocation) ;
    if (index < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
     }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (index >= 0, (uint32) index), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_typeTableMotsReserves::
searchElement (C_Lexique & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_lstring   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  element_type * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <element_type *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (element_type *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop_operation () ;
    if (outIndex != NULL) {
      outIndex->_drop_operation () ;
     }
  }else{
    outParameter0 = node->mInfo.attributNomTerminal ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mIndex), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_typeTableMotsReserves::method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_lstring   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 "the word '%K' is not declared",
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_typeTableMotsReserves::
method_insertKey (C_Lexique & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_lstring & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (_inLexique,
                 "the word '%K' is already declared in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_typeTableMotsReserves GGS_typeTableMotsReserves::
constructor_mapWithMapToOverride (C_Lexique & /* inLexique */,
                                  const GGS_typeTableMotsReserves & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_typeTableMotsReserves result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mNextIndex = inMapToOverride.mSharedMapRoot->mNextIndex ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_typeTableMotsReserves GGS_typeTableMotsReserves::
reader_overriddenMap (C_Lexique & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_typeTableMotsReserves result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_typeTableMotsReserves::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @typeTableMotsReserves " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    element_type * p = firstObject () ;
    while (p != NULL) {
      macroValidPointer (p) ;
      s << "\n" ;
      s.writeSpaces (inIndentation + 1) ;
      p->appendForMapDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
      p = p->nextObject () ;
    }
  }else{
    s << "not built" ;
  }
  s << ">\n" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                class map 'typeTableTablesDeMotsReserves'                  *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_typeTableTablesDeMotsReserves::
elementOf_GGS_typeTableTablesDeMotsReserves (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_typeTableTablesDeMotsReserves & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_typeTableTablesDeMotsReserves::
appendForMapDescription (C_Lexique & _inLexique,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "["
           << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "->" ;
  ioString << mInfo.attributSimpleTable.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "]" ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_typeTableTablesDeMotsReserves::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_typeTableTablesDeMotsReserves *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_typeTableTablesDeMotsReserves * info = (e_typeTableTablesDeMotsReserves *) inInfo ;
  macroMyNew (p, element_type (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

GGS_typeTableTablesDeMotsReserves GGS_typeTableTablesDeMotsReserves::
constructor_emptyMap (C_Lexique & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_typeTableTablesDeMotsReserves result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_typeTableTablesDeMotsReserves::internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <element_type *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  element_type * p = (element_type *) inPtr ;
  bool extension = false ; // Unused here
  sint32 index = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, mSharedMapRoot->_mRoot, extension, index, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_typeTableTablesDeMotsReserves::
insertElement (C_Lexique & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_typeTableMotsReserves &  inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  sint32 index = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_typeTableTablesDeMotsReserves info  ;
    info.attributSimpleTable = inParameter0 ;
    bool extension = false ; // Unused here
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, extension, index, existingKeyLocation) ;
    if (index < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
     }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (index >= 0, (uint32) index), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_typeTableTablesDeMotsReserves::
searchElement (C_Lexique & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_typeTableMotsReserves   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  element_type * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <element_type *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (element_type *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop_operation () ;
    if (outIndex != NULL) {
      outIndex->_drop_operation () ;
     }
  }else{
    outParameter0 = node->mInfo.attributSimpleTable ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mIndex), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_typeTableTablesDeMotsReserves::method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_typeTableMotsReserves   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 "the mord map '%K' is not declared",
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_typeTableTablesDeMotsReserves::
method_insertKey (C_Lexique & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_typeTableMotsReserves & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (_inLexique,
                 "the word map '%K' is already declared in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_typeTableTablesDeMotsReserves GGS_typeTableTablesDeMotsReserves::
constructor_mapWithMapToOverride (C_Lexique & /* inLexique */,
                                  const GGS_typeTableTablesDeMotsReserves & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_typeTableTablesDeMotsReserves result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mNextIndex = inMapToOverride.mSharedMapRoot->mNextIndex ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_typeTableTablesDeMotsReserves GGS_typeTableTablesDeMotsReserves::
reader_overriddenMap (C_Lexique & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_typeTableTablesDeMotsReserves result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_typeTableTablesDeMotsReserves::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @typeTableTablesDeMotsReserves " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    element_type * p = firstObject () ;
    while (p != NULL) {
      macroValidPointer (p) ;
      s << "\n" ;
      s.writeSpaces (inIndentation + 1) ;
      p->appendForMapDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
      p = p->nextObject () ;
    }
  }else{
    s << "not built" ;
  }
  s << ">\n" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_typeConditionLexicale'                 *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_typeConditionLexicale::
cPtr_typeConditionLexicale (LOCATION_ARGS)
:C_GGS_Object (THERE) {
}

//---------------------------------------------------------------------------*

void cPtr_typeConditionLexicale::
appendForDescription (C_Lexique & /* _inLexique */,
                      C_String & ioString,
                      const sint32 /* inIndentation */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  ioString << "->@typeConditionLexicale:" ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeConditionLexicale'                  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeConditionLexicale::
GGS_typeConditionLexicale (void) {
  mPointer = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeConditionLexicale::
GGS_typeConditionLexicale (const GGS_typeConditionLexicale & inOperand) {
  mPointer = (cPtr_typeConditionLexicale *) NULL ;
  macroAttachPointer (mPointer, inOperand.mPointer) ;
}

//---------------------------------------------------------------------------*

GGS_typeConditionLexicale::
~GGS_typeConditionLexicale (void) {
  macroDetachPointer (mPointer, cPtr_typeConditionLexicale) ;
}

//---------------------------------------------------------------------------*

void GGS_typeConditionLexicale::
operator = (const GGS_typeConditionLexicale & inSource) {
  macroAttachPointer (mPointer, inSource.mPointer) ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_typeConditionLexicale * GGS_typeConditionLexicale::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return mPointer ;  }
#endif

//---------------------------------------------------------------------------*

void GGS_typeConditionLexicale::
_drop_operation (void) {
  macroDetachPointer (mPointer, cPtr_typeConditionLexicale) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_typeConditionLexicale::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<class @typeConditionLexicale" ;
  if (_isBuilt ()) {
    mPointer->appendForDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
  }else{
    s << "not built" ;
  }
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'typeConditionChaine'                         *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_typeConditionChaine::cPtr_typeConditionChaine (const GGS_lstring & argument_0 COMMA_LOCATION_ARGS)
:cPtr_typeConditionLexicale (THERE),
attributChaine (argument_0) {
}

//---------------------------------------------------------------------------*

void cPtr_typeConditionChaine::
appendForDescription (C_Lexique & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@typeConditionChaine:"
           << attributChaine.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeConditionChaine'                   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeConditionChaine::
GGS_typeConditionChaine (void) {
  mPointer = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeConditionChaine GGS_typeConditionChaine::
constructor_new (C_Lexique & /* inLexique */,
                 const GGS_lstring & argument_0 COMMA_LOCATION_ARGS) {
  cPtr_typeConditionChaine * _ptr = (cPtr_typeConditionChaine *) NULL ;
  macroMyNew (_ptr, cPtr_typeConditionChaine (argument_0 COMMA_THERE)) ;
  GGS_typeConditionChaine result ;
  macroAttachPointer (result.mPointer, _ptr) ;
  return result ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_typeConditionChaine * GGS_typeConditionChaine::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_typeConditionChaine *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_typeConditionChaine *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

GGS_string GGS_typeConditionChaine::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<class @typeConditionChaine" ;
  if (_isBuilt ()) {
    mPointer->appendForDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
  }else{
    s << "not built" ;
  }
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'typeConditionCaractere'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_typeConditionCaractere::cPtr_typeConditionCaractere (const GGS_lchar & argument_0 COMMA_LOCATION_ARGS)
:cPtr_typeConditionLexicale (THERE),
attributCaractere (argument_0) {
}

//---------------------------------------------------------------------------*

void cPtr_typeConditionCaractere::
appendForDescription (C_Lexique & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@typeConditionCaractere:"
           << attributCaractere.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeConditionCaractere'                  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeConditionCaractere::
GGS_typeConditionCaractere (void) {
  mPointer = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeConditionCaractere GGS_typeConditionCaractere::
constructor_new (C_Lexique & /* inLexique */,
                 const GGS_lchar & argument_0 COMMA_LOCATION_ARGS) {
  cPtr_typeConditionCaractere * _ptr = (cPtr_typeConditionCaractere *) NULL ;
  macroMyNew (_ptr, cPtr_typeConditionCaractere (argument_0 COMMA_THERE)) ;
  GGS_typeConditionCaractere result ;
  macroAttachPointer (result.mPointer, _ptr) ;
  return result ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_typeConditionCaractere * GGS_typeConditionCaractere::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_typeConditionCaractere *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_typeConditionCaractere *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

GGS_string GGS_typeConditionCaractere::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<class @typeConditionCaractere" ;
  if (_isBuilt ()) {
    mPointer->appendForDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
  }else{
    s << "not built" ;
  }
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'typeConditionIntervalle'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_typeConditionIntervalle::cPtr_typeConditionIntervalle (const GGS_lchar & argument_0,
                                const GGS_lchar & argument_1 COMMA_LOCATION_ARGS)
:cPtr_typeConditionLexicale (THERE),
attributBorneInf (argument_0),
attributBorneSup (argument_1) {
}

//---------------------------------------------------------------------------*

void cPtr_typeConditionIntervalle::
appendForDescription (C_Lexique & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@typeConditionIntervalle:"
           << attributBorneInf.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << attributBorneSup.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeConditionIntervalle'                 *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeConditionIntervalle::
GGS_typeConditionIntervalle (void) {
  mPointer = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeConditionIntervalle GGS_typeConditionIntervalle::
constructor_new (C_Lexique & /* inLexique */,
                 const GGS_lchar & argument_0,
                 const GGS_lchar & argument_1 COMMA_LOCATION_ARGS) {
  cPtr_typeConditionIntervalle * _ptr = (cPtr_typeConditionIntervalle *) NULL ;
  macroMyNew (_ptr, cPtr_typeConditionIntervalle (argument_0,
                                argument_1 COMMA_THERE)) ;
  GGS_typeConditionIntervalle result ;
  macroAttachPointer (result.mPointer, _ptr) ;
  return result ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_typeConditionIntervalle * GGS_typeConditionIntervalle::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_typeConditionIntervalle *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_typeConditionIntervalle *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

GGS_string GGS_typeConditionIntervalle::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<class @typeConditionIntervalle" ;
  if (_isBuilt ()) {
    mPointer->appendForDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
  }else{
    s << "not built" ;
  }
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@typeListeConditionsLexicales'               *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_typeListeConditionsLexicales::
elementOf_GGS_typeListeConditionsLexicales (const GGS_typeConditionLexicale & argument_0):
mNextItem (NULL),
attributCondition (argument_0) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_typeListeConditionsLexicales::
appendForListDescription (C_Lexique & _inLexique,
                          C_String & ioString,
                          const sint32 inIndentation
                          COMMA_LOCATION_ARGS) const {
  ioString << "[" ;
  ioString << attributCondition.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "]" ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   List '@typeListeConditionsLexicales'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeListeConditionsLexicales::cRootList::cRootList (void):
mFirstItem (NULL),
mLastItem (NULL),
mListLength (0),
mCountReference (1) {
}

//---------------------------------------------------------------------------*

GGS_typeListeConditionsLexicales::cRootList::~cRootList (void) {
  while (mFirstItem != NULL) {
    element_type * p = mFirstItem->nextObject () ;
    macroMyDelete (mFirstItem, element_type) ;
    mFirstItem = p ;
  }
}

//---------------------------------------------------------------------------*

GGS_typeListeConditionsLexicales::GGS_typeListeConditionsLexicales (void) { // Default Constructor
  _mRoot = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeListeConditionsLexicales::~GGS_typeListeConditionsLexicales (void) {
  _drop_operation () ;
}

//---------------------------------------------------------------------------*

GGS_typeListeConditionsLexicales::
GGS_typeListeConditionsLexicales (const GGS_typeListeConditionsLexicales & inSource) {
  _mRoot = inSource._mRoot ;
  if (_mRoot != NULL) {
    macroValidPointer (_mRoot) ;
    _mRoot->mCountReference ++ ;
  }
}

//---------------------------------------------------------------------------*

void GGS_typeListeConditionsLexicales::
operator = (const GGS_typeListeConditionsLexicales & inSource) {
  if (this != & inSource) {
    _drop_operation () ;
    _mRoot = inSource._mRoot ;
    if (_mRoot != NULL) {
      macroValidPointer (_mRoot) ;
      _mRoot->mCountReference ++ ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_typeListeConditionsLexicales::element_type * GGS_typeListeConditionsLexicales::
firstObject (void) const {
  return (_mRoot == NULL) ? NULL : _mRoot->mFirstItem ;
}

//---------------------------------------------------------------------------*

void GGS_typeListeConditionsLexicales::
_internalAppendItem (const GGS_typeConditionLexicale & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0)) ;
  if (nouvelElement != NULL) {
    macroValidPointer (nouvelElement) ;
    if (_mRoot->mLastItem == NULL) {
      _mRoot->mFirstItem = nouvelElement ;
    }else{
      macroValidPointer (_mRoot->mLastItem) ;
      _mRoot->mLastItem->mNextItem = nouvelElement ;
    }
    _mRoot->mLastItem = nouvelElement ;
    nouvelElement = (element_type *) NULL ;
    _mRoot->mListLength ++ ;
  }
}

//---------------------------------------------------------------------------*

void GGS_typeListeConditionsLexicales::
_addAssign_operation (const GGS_typeConditionLexicale & argument_0) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (argument_0) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_typeListeConditionsLexicales::
_insulateList (void) {
  if (_mRoot != NULL) {
    macroValidPointer (_mRoot) ;
    if (_mRoot->mCountReference > 1) {
      element_type * p = _mRoot->mFirstItem ;
      _mRoot->mCountReference -- ;
      _mRoot = NULL ;
      macroMyNew (_mRoot, cRootList) ;
      while (p != NULL) {
        macroValidPointer (p) ;
        _internalAppendItem (p->attributCondition) ;
        p = p->mNextItem ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

GGS_typeListeConditionsLexicales  GGS_typeListeConditionsLexicales::
constructor_emptyList (C_Lexique & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_typeListeConditionsLexicales result ;
  macroMyNew (result._mRoot, cRootList) ;
  return result ;
}

//---------------------------------------------------------------------------*

sint32 GGS_typeListeConditionsLexicales::
count (void) const {
  return (_mRoot == NULL) ? 0 : _mRoot->mListLength ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_typeListeConditionsLexicales::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<list @typeListeConditionsLexicales" ;
  if (_isBuilt ()) {
    s << " " << _mRoot->mListLength << " object" << ((_mRoot->mListLength > 1) ? "s " : " ") ;
    element_type * p = _mRoot->mFirstItem ;
    while (p != NULL) {
      macroValidPointer (p) ;
      s << "\n" ;
      s.writeSpaces (inIndentation + 1) ;
      p->appendForListDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
      p = p->mNextItem ;
    }
  }else{
    s << "not built" ;
  }
  s << ">\n" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_uint GGS_typeListeConditionsLexicales::
reader_length (C_Lexique & /* inLexique */
               COMMA_UNUSED_LOCATION_ARGS) const {
  return GGS_uint (_mRoot != NULL,
                   (_mRoot == NULL) ? 0 : (uint32) _mRoot->mListLength) ;
}

//---------------------------------------------------------------------------*

void GGS_typeListeConditionsLexicales::
_drop_operation (void) {
  if (_mRoot != NULL) {
    macroValidPointer (_mRoot) ;
    if (_mRoot->mCountReference == 1) {
      macroMyDelete (_mRoot, cRootList) ;
    }else{
      _mRoot->mCountReference -- ;
      _mRoot = NULL ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_typeInstructionLexicale'                *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_typeInstructionLexicale::
cPtr_typeInstructionLexicale (LOCATION_ARGS)
:C_GGS_Object (THERE) {
}

//---------------------------------------------------------------------------*

void cPtr_typeInstructionLexicale::
appendForDescription (C_Lexique & /* _inLexique */,
                      C_String & ioString,
                      const sint32 /* inIndentation */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  ioString << "->@typeInstructionLexicale:" ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeInstructionLexicale'                 *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeInstructionLexicale::
GGS_typeInstructionLexicale (void) {
  mPointer = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeInstructionLexicale::
GGS_typeInstructionLexicale (const GGS_typeInstructionLexicale & inOperand) {
  mPointer = (cPtr_typeInstructionLexicale *) NULL ;
  macroAttachPointer (mPointer, inOperand.mPointer) ;
}

//---------------------------------------------------------------------------*

GGS_typeInstructionLexicale::
~GGS_typeInstructionLexicale (void) {
  macroDetachPointer (mPointer, cPtr_typeInstructionLexicale) ;
}

//---------------------------------------------------------------------------*

void GGS_typeInstructionLexicale::
operator = (const GGS_typeInstructionLexicale & inSource) {
  macroAttachPointer (mPointer, inSource.mPointer) ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_typeInstructionLexicale * GGS_typeInstructionLexicale::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return mPointer ;  }
#endif

//---------------------------------------------------------------------------*

void GGS_typeInstructionLexicale::
_drop_operation (void) {
  macroDetachPointer (mPointer, cPtr_typeInstructionLexicale) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_typeInstructionLexicale::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<class @typeInstructionLexicale" ;
  if (_isBuilt ()) {
    mPointer->appendForDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
  }else{
    s << "not built" ;
  }
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@tListeInstructionsLexicales'               *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_tListeInstructionsLexicales::
elementOf_GGS_tListeInstructionsLexicales (const GGS_typeInstructionLexicale & argument_0):
mNextItem (NULL),
attributInstruction (argument_0) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_tListeInstructionsLexicales::
appendForListDescription (C_Lexique & _inLexique,
                          C_String & ioString,
                          const sint32 inIndentation
                          COMMA_LOCATION_ARGS) const {
  ioString << "[" ;
  ioString << attributInstruction.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "]" ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   List '@tListeInstructionsLexicales'                     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_tListeInstructionsLexicales::cRootList::cRootList (void):
mFirstItem (NULL),
mLastItem (NULL),
mListLength (0),
mCountReference (1) {
}

//---------------------------------------------------------------------------*

GGS_tListeInstructionsLexicales::cRootList::~cRootList (void) {
  while (mFirstItem != NULL) {
    element_type * p = mFirstItem->nextObject () ;
    macroMyDelete (mFirstItem, element_type) ;
    mFirstItem = p ;
  }
}

//---------------------------------------------------------------------------*

GGS_tListeInstructionsLexicales::GGS_tListeInstructionsLexicales (void) { // Default Constructor
  _mRoot = NULL ;
}

//---------------------------------------------------------------------------*

GGS_tListeInstructionsLexicales::~GGS_tListeInstructionsLexicales (void) {
  _drop_operation () ;
}

//---------------------------------------------------------------------------*

GGS_tListeInstructionsLexicales::
GGS_tListeInstructionsLexicales (const GGS_tListeInstructionsLexicales & inSource) {
  _mRoot = inSource._mRoot ;
  if (_mRoot != NULL) {
    macroValidPointer (_mRoot) ;
    _mRoot->mCountReference ++ ;
  }
}

//---------------------------------------------------------------------------*

void GGS_tListeInstructionsLexicales::
operator = (const GGS_tListeInstructionsLexicales & inSource) {
  if (this != & inSource) {
    _drop_operation () ;
    _mRoot = inSource._mRoot ;
    if (_mRoot != NULL) {
      macroValidPointer (_mRoot) ;
      _mRoot->mCountReference ++ ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_tListeInstructionsLexicales::element_type * GGS_tListeInstructionsLexicales::
firstObject (void) const {
  return (_mRoot == NULL) ? NULL : _mRoot->mFirstItem ;
}

//---------------------------------------------------------------------------*

void GGS_tListeInstructionsLexicales::
_internalAppendItem (const GGS_typeInstructionLexicale & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0)) ;
  if (nouvelElement != NULL) {
    macroValidPointer (nouvelElement) ;
    if (_mRoot->mLastItem == NULL) {
      _mRoot->mFirstItem = nouvelElement ;
    }else{
      macroValidPointer (_mRoot->mLastItem) ;
      _mRoot->mLastItem->mNextItem = nouvelElement ;
    }
    _mRoot->mLastItem = nouvelElement ;
    nouvelElement = (element_type *) NULL ;
    _mRoot->mListLength ++ ;
  }
}

//---------------------------------------------------------------------------*

void GGS_tListeInstructionsLexicales::
_addAssign_operation (const GGS_typeInstructionLexicale & argument_0) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (argument_0) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_tListeInstructionsLexicales::
_insulateList (void) {
  if (_mRoot != NULL) {
    macroValidPointer (_mRoot) ;
    if (_mRoot->mCountReference > 1) {
      element_type * p = _mRoot->mFirstItem ;
      _mRoot->mCountReference -- ;
      _mRoot = NULL ;
      macroMyNew (_mRoot, cRootList) ;
      while (p != NULL) {
        macroValidPointer (p) ;
        _internalAppendItem (p->attributInstruction) ;
        p = p->mNextItem ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

GGS_tListeInstructionsLexicales  GGS_tListeInstructionsLexicales::
constructor_emptyList (C_Lexique & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_tListeInstructionsLexicales result ;
  macroMyNew (result._mRoot, cRootList) ;
  return result ;
}

//---------------------------------------------------------------------------*

sint32 GGS_tListeInstructionsLexicales::
count (void) const {
  return (_mRoot == NULL) ? 0 : _mRoot->mListLength ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_tListeInstructionsLexicales::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<list @tListeInstructionsLexicales" ;
  if (_isBuilt ()) {
    s << " " << _mRoot->mListLength << " object" << ((_mRoot->mListLength > 1) ? "s " : " ") ;
    element_type * p = _mRoot->mFirstItem ;
    while (p != NULL) {
      macroValidPointer (p) ;
      s << "\n" ;
      s.writeSpaces (inIndentation + 1) ;
      p->appendForListDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
      p = p->mNextItem ;
    }
  }else{
    s << "not built" ;
  }
  s << ">\n" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_uint GGS_tListeInstructionsLexicales::
reader_length (C_Lexique & /* inLexique */
               COMMA_UNUSED_LOCATION_ARGS) const {
  return GGS_uint (_mRoot != NULL,
                   (_mRoot == NULL) ? 0 : (uint32) _mRoot->mListLength) ;
}

//---------------------------------------------------------------------------*

void GGS_tListeInstructionsLexicales::
_drop_operation (void) {
  if (_mRoot != NULL) {
    macroValidPointer (_mRoot) ;
    if (_mRoot->mCountReference == 1) {
      macroMyDelete (_mRoot, cRootList) ;
    }else{
      _mRoot->mCountReference -- ;
      _mRoot = NULL ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@typeListeTestsEtInstructions'               *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_typeListeTestsEtInstructions::
elementOf_GGS_typeListeTestsEtInstructions (const GGS_typeListeConditionsLexicales & argument_0,
                                const GGS_tListeInstructionsLexicales & argument_1):
mNextItem (NULL),
attributListeConditions (argument_0),
attributListeInstructions (argument_1) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_typeListeTestsEtInstructions::
appendForListDescription (C_Lexique & _inLexique,
                          C_String & ioString,
                          const sint32 inIndentation
                          COMMA_LOCATION_ARGS) const {
  ioString << "[" ;
  ioString << attributListeConditions.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << attributListeInstructions.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "]" ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   List '@typeListeTestsEtInstructions'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeListeTestsEtInstructions::cRootList::cRootList (void):
mFirstItem (NULL),
mLastItem (NULL),
mListLength (0),
mCountReference (1) {
}

//---------------------------------------------------------------------------*

GGS_typeListeTestsEtInstructions::cRootList::~cRootList (void) {
  while (mFirstItem != NULL) {
    element_type * p = mFirstItem->nextObject () ;
    macroMyDelete (mFirstItem, element_type) ;
    mFirstItem = p ;
  }
}

//---------------------------------------------------------------------------*

GGS_typeListeTestsEtInstructions::GGS_typeListeTestsEtInstructions (void) { // Default Constructor
  _mRoot = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeListeTestsEtInstructions::~GGS_typeListeTestsEtInstructions (void) {
  _drop_operation () ;
}

//---------------------------------------------------------------------------*

GGS_typeListeTestsEtInstructions::
GGS_typeListeTestsEtInstructions (const GGS_typeListeTestsEtInstructions & inSource) {
  _mRoot = inSource._mRoot ;
  if (_mRoot != NULL) {
    macroValidPointer (_mRoot) ;
    _mRoot->mCountReference ++ ;
  }
}

//---------------------------------------------------------------------------*

void GGS_typeListeTestsEtInstructions::
operator = (const GGS_typeListeTestsEtInstructions & inSource) {
  if (this != & inSource) {
    _drop_operation () ;
    _mRoot = inSource._mRoot ;
    if (_mRoot != NULL) {
      macroValidPointer (_mRoot) ;
      _mRoot->mCountReference ++ ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_typeListeTestsEtInstructions::element_type * GGS_typeListeTestsEtInstructions::
firstObject (void) const {
  return (_mRoot == NULL) ? NULL : _mRoot->mFirstItem ;
}

//---------------------------------------------------------------------------*

void GGS_typeListeTestsEtInstructions::
_internalAppendItem (const GGS_typeListeConditionsLexicales & argument_0,
                    const GGS_tListeInstructionsLexicales & argument_1) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1)) ;
  if (nouvelElement != NULL) {
    macroValidPointer (nouvelElement) ;
    if (_mRoot->mLastItem == NULL) {
      _mRoot->mFirstItem = nouvelElement ;
    }else{
      macroValidPointer (_mRoot->mLastItem) ;
      _mRoot->mLastItem->mNextItem = nouvelElement ;
    }
    _mRoot->mLastItem = nouvelElement ;
    nouvelElement = (element_type *) NULL ;
    _mRoot->mListLength ++ ;
  }
}

//---------------------------------------------------------------------------*

void GGS_typeListeTestsEtInstructions::
_addAssign_operation (const GGS_typeListeConditionsLexicales & argument_0,
                                const GGS_tListeInstructionsLexicales & argument_1) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (argument_0,
                                argument_1) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_typeListeTestsEtInstructions::
_insulateList (void) {
  if (_mRoot != NULL) {
    macroValidPointer (_mRoot) ;
    if (_mRoot->mCountReference > 1) {
      element_type * p = _mRoot->mFirstItem ;
      _mRoot->mCountReference -- ;
      _mRoot = NULL ;
      macroMyNew (_mRoot, cRootList) ;
      while (p != NULL) {
        macroValidPointer (p) ;
        _internalAppendItem (p->attributListeConditions,
                                p->attributListeInstructions) ;
        p = p->mNextItem ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

GGS_typeListeTestsEtInstructions  GGS_typeListeTestsEtInstructions::
constructor_emptyList (C_Lexique & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_typeListeTestsEtInstructions result ;
  macroMyNew (result._mRoot, cRootList) ;
  return result ;
}

//---------------------------------------------------------------------------*

sint32 GGS_typeListeTestsEtInstructions::
count (void) const {
  return (_mRoot == NULL) ? 0 : _mRoot->mListLength ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_typeListeTestsEtInstructions::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<list @typeListeTestsEtInstructions" ;
  if (_isBuilt ()) {
    s << " " << _mRoot->mListLength << " object" << ((_mRoot->mListLength > 1) ? "s " : " ") ;
    element_type * p = _mRoot->mFirstItem ;
    while (p != NULL) {
      macroValidPointer (p) ;
      s << "\n" ;
      s.writeSpaces (inIndentation + 1) ;
      p->appendForListDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
      p = p->mNextItem ;
    }
  }else{
    s << "not built" ;
  }
  s << ">\n" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_uint GGS_typeListeTestsEtInstructions::
reader_length (C_Lexique & /* inLexique */
               COMMA_UNUSED_LOCATION_ARGS) const {
  return GGS_uint (_mRoot != NULL,
                   (_mRoot == NULL) ? 0 : (uint32) _mRoot->mListLength) ;
}

//---------------------------------------------------------------------------*

void GGS_typeListeTestsEtInstructions::
_drop_operation (void) {
  if (_mRoot != NULL) {
    macroValidPointer (_mRoot) ;
    if (_mRoot->mCountReference == 1) {
      macroMyDelete (_mRoot, cRootList) ;
    }else{
      _mRoot->mCountReference -- ;
      _mRoot = NULL ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             abstract class 'cPtr_typeArgumentRoutineExterne'              *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_typeArgumentRoutineExterne::
cPtr_typeArgumentRoutineExterne (LOCATION_ARGS)
:C_GGS_Object (THERE) {
}

//---------------------------------------------------------------------------*

void cPtr_typeArgumentRoutineExterne::
appendForDescription (C_Lexique & /* _inLexique */,
                      C_String & ioString,
                      const sint32 /* inIndentation */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  ioString << "->@typeArgumentRoutineExterne:" ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_typeArgumentRoutineExterne'                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeArgumentRoutineExterne::
GGS_typeArgumentRoutineExterne (void) {
  mPointer = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeArgumentRoutineExterne::
GGS_typeArgumentRoutineExterne (const GGS_typeArgumentRoutineExterne & inOperand) {
  mPointer = (cPtr_typeArgumentRoutineExterne *) NULL ;
  macroAttachPointer (mPointer, inOperand.mPointer) ;
}

//---------------------------------------------------------------------------*

GGS_typeArgumentRoutineExterne::
~GGS_typeArgumentRoutineExterne (void) {
  macroDetachPointer (mPointer, cPtr_typeArgumentRoutineExterne) ;
}

//---------------------------------------------------------------------------*

void GGS_typeArgumentRoutineExterne::
operator = (const GGS_typeArgumentRoutineExterne & inSource) {
  macroAttachPointer (mPointer, inSource.mPointer) ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_typeArgumentRoutineExterne * GGS_typeArgumentRoutineExterne::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return mPointer ;  }
#endif

//---------------------------------------------------------------------------*

void GGS_typeArgumentRoutineExterne::
_drop_operation (void) {
  macroDetachPointer (mPointer, cPtr_typeArgumentRoutineExterne) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_typeArgumentRoutineExterne::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<class @typeArgumentRoutineExterne" ;
  if (_isBuilt ()) {
    mPointer->appendForDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
  }else{
    s << "not built" ;
  }
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@typeListeArgumentsRoutExterne'              *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_typeListeArgumentsRoutExterne::
elementOf_GGS_typeListeArgumentsRoutExterne (const GGS_typeArgumentRoutineExterne & argument_0):
mNextItem (NULL),
attributArgument (argument_0) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_typeListeArgumentsRoutExterne::
appendForListDescription (C_Lexique & _inLexique,
                          C_String & ioString,
                          const sint32 inIndentation
                          COMMA_LOCATION_ARGS) const {
  ioString << "[" ;
  ioString << attributArgument.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "]" ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  List '@typeListeArgumentsRoutExterne'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeListeArgumentsRoutExterne::cRootList::cRootList (void):
mFirstItem (NULL),
mLastItem (NULL),
mListLength (0),
mCountReference (1) {
}

//---------------------------------------------------------------------------*

GGS_typeListeArgumentsRoutExterne::cRootList::~cRootList (void) {
  while (mFirstItem != NULL) {
    element_type * p = mFirstItem->nextObject () ;
    macroMyDelete (mFirstItem, element_type) ;
    mFirstItem = p ;
  }
}

//---------------------------------------------------------------------------*

GGS_typeListeArgumentsRoutExterne::GGS_typeListeArgumentsRoutExterne (void) { // Default Constructor
  _mRoot = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeListeArgumentsRoutExterne::~GGS_typeListeArgumentsRoutExterne (void) {
  _drop_operation () ;
}

//---------------------------------------------------------------------------*

GGS_typeListeArgumentsRoutExterne::
GGS_typeListeArgumentsRoutExterne (const GGS_typeListeArgumentsRoutExterne & inSource) {
  _mRoot = inSource._mRoot ;
  if (_mRoot != NULL) {
    macroValidPointer (_mRoot) ;
    _mRoot->mCountReference ++ ;
  }
}

//---------------------------------------------------------------------------*

void GGS_typeListeArgumentsRoutExterne::
operator = (const GGS_typeListeArgumentsRoutExterne & inSource) {
  if (this != & inSource) {
    _drop_operation () ;
    _mRoot = inSource._mRoot ;
    if (_mRoot != NULL) {
      macroValidPointer (_mRoot) ;
      _mRoot->mCountReference ++ ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_typeListeArgumentsRoutExterne::element_type * GGS_typeListeArgumentsRoutExterne::
firstObject (void) const {
  return (_mRoot == NULL) ? NULL : _mRoot->mFirstItem ;
}

//---------------------------------------------------------------------------*

void GGS_typeListeArgumentsRoutExterne::
_internalAppendItem (const GGS_typeArgumentRoutineExterne & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0)) ;
  if (nouvelElement != NULL) {
    macroValidPointer (nouvelElement) ;
    if (_mRoot->mLastItem == NULL) {
      _mRoot->mFirstItem = nouvelElement ;
    }else{
      macroValidPointer (_mRoot->mLastItem) ;
      _mRoot->mLastItem->mNextItem = nouvelElement ;
    }
    _mRoot->mLastItem = nouvelElement ;
    nouvelElement = (element_type *) NULL ;
    _mRoot->mListLength ++ ;
  }
}

//---------------------------------------------------------------------------*

void GGS_typeListeArgumentsRoutExterne::
_addAssign_operation (const GGS_typeArgumentRoutineExterne & argument_0) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (argument_0) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_typeListeArgumentsRoutExterne::
_insulateList (void) {
  if (_mRoot != NULL) {
    macroValidPointer (_mRoot) ;
    if (_mRoot->mCountReference > 1) {
      element_type * p = _mRoot->mFirstItem ;
      _mRoot->mCountReference -- ;
      _mRoot = NULL ;
      macroMyNew (_mRoot, cRootList) ;
      while (p != NULL) {
        macroValidPointer (p) ;
        _internalAppendItem (p->attributArgument) ;
        p = p->mNextItem ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

GGS_typeListeArgumentsRoutExterne  GGS_typeListeArgumentsRoutExterne::
constructor_emptyList (C_Lexique & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_typeListeArgumentsRoutExterne result ;
  macroMyNew (result._mRoot, cRootList) ;
  return result ;
}

//---------------------------------------------------------------------------*

sint32 GGS_typeListeArgumentsRoutExterne::
count (void) const {
  return (_mRoot == NULL) ? 0 : _mRoot->mListLength ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_typeListeArgumentsRoutExterne::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<list @typeListeArgumentsRoutExterne" ;
  if (_isBuilt ()) {
    s << " " << _mRoot->mListLength << " object" << ((_mRoot->mListLength > 1) ? "s " : " ") ;
    element_type * p = _mRoot->mFirstItem ;
    while (p != NULL) {
      macroValidPointer (p) ;
      s << "\n" ;
      s.writeSpaces (inIndentation + 1) ;
      p->appendForListDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
      p = p->mNextItem ;
    }
  }else{
    s << "not built" ;
  }
  s << ">\n" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_uint GGS_typeListeArgumentsRoutExterne::
reader_length (C_Lexique & /* inLexique */
               COMMA_UNUSED_LOCATION_ARGS) const {
  return GGS_uint (_mRoot != NULL,
                   (_mRoot == NULL) ? 0 : (uint32) _mRoot->mListLength) ;
}

//---------------------------------------------------------------------------*

void GGS_typeListeArgumentsRoutExterne::
_drop_operation (void) {
  if (_mRoot != NULL) {
    macroValidPointer (_mRoot) ;
    if (_mRoot->mCountReference == 1) {
      macroMyDelete (_mRoot, cRootList) ;
    }else{
      _mRoot->mCountReference -- ;
      _mRoot = NULL ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'typeArgumentAttribut'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_typeArgumentAttribut::cPtr_typeArgumentAttribut (const GGS_lstring & argument_0,
                                const GGS_AC_galgasType & argument_1 COMMA_LOCATION_ARGS)
:cPtr_typeArgumentRoutineExterne (THERE),
attributNom (argument_0),
attributTypeAttribut (argument_1) {
}

//---------------------------------------------------------------------------*

void cPtr_typeArgumentAttribut::
appendForDescription (C_Lexique & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@typeArgumentAttribut:"
           << attributNom.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << attributTypeAttribut.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeArgumentAttribut'                   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeArgumentAttribut::
GGS_typeArgumentAttribut (void) {
  mPointer = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeArgumentAttribut GGS_typeArgumentAttribut::
constructor_new (C_Lexique & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_AC_galgasType & argument_1 COMMA_LOCATION_ARGS) {
  cPtr_typeArgumentAttribut * _ptr = (cPtr_typeArgumentAttribut *) NULL ;
  macroMyNew (_ptr, cPtr_typeArgumentAttribut (argument_0,
                                argument_1 COMMA_THERE)) ;
  GGS_typeArgumentAttribut result ;
  macroAttachPointer (result.mPointer, _ptr) ;
  return result ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_typeArgumentAttribut * GGS_typeArgumentAttribut::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_typeArgumentAttribut *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_typeArgumentAttribut *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

GGS_string GGS_typeArgumentAttribut::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<class @typeArgumentAttribut" ;
  if (_isBuilt ()) {
    mPointer->appendForDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
  }else{
    s << "not built" ;
  }
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'typeArgumentCaractere'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_typeArgumentCaractere::cPtr_typeArgumentCaractere (const GGS_lchar & argument_0 COMMA_LOCATION_ARGS)
:cPtr_typeArgumentRoutineExterne (THERE),
attributCaractere (argument_0) {
}

//---------------------------------------------------------------------------*

void cPtr_typeArgumentCaractere::
appendForDescription (C_Lexique & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@typeArgumentCaractere:"
           << attributCaractere.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeArgumentCaractere'                  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeArgumentCaractere::
GGS_typeArgumentCaractere (void) {
  mPointer = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeArgumentCaractere GGS_typeArgumentCaractere::
constructor_new (C_Lexique & /* inLexique */,
                 const GGS_lchar & argument_0 COMMA_LOCATION_ARGS) {
  cPtr_typeArgumentCaractere * _ptr = (cPtr_typeArgumentCaractere *) NULL ;
  macroMyNew (_ptr, cPtr_typeArgumentCaractere (argument_0 COMMA_THERE)) ;
  GGS_typeArgumentCaractere result ;
  macroAttachPointer (result.mPointer, _ptr) ;
  return result ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_typeArgumentCaractere * GGS_typeArgumentCaractere::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_typeArgumentCaractere *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_typeArgumentCaractere *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

GGS_string GGS_typeArgumentCaractere::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<class @typeArgumentCaractere" ;
  if (_isBuilt ()) {
    mPointer->appendForDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
  }else{
    s << "not built" ;
  }
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   class 'typeArgumentCaractereCourant'                    *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_typeArgumentCaractereCourant::cPtr_typeArgumentCaractereCourant (LOCATION_ARGS)
:cPtr_typeArgumentRoutineExterne (THERE) {
}

//---------------------------------------------------------------------------*

void cPtr_typeArgumentCaractereCourant::
appendForDescription (C_Lexique & /* _inLexique */,
                      C_String & ioString,
                      const sint32 /* inIndentation */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  ioString << "->@typeArgumentCaractereCourant:" ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_typeArgumentCaractereCourant'               *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeArgumentCaractereCourant::
GGS_typeArgumentCaractereCourant (void) {
  mPointer = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeArgumentCaractereCourant GGS_typeArgumentCaractereCourant::
constructor_new (C_Lexique & /* inLexique */ COMMA_LOCATION_ARGS) {
  cPtr_typeArgumentCaractereCourant * _ptr = (cPtr_typeArgumentCaractereCourant *) NULL ;
  macroMyNew (_ptr, cPtr_typeArgumentCaractereCourant (THERE)) ;
  GGS_typeArgumentCaractereCourant result ;
  macroAttachPointer (result.mPointer, _ptr) ;
  return result ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_typeArgumentCaractereCourant * GGS_typeArgumentCaractereCourant::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_typeArgumentCaractereCourant *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_typeArgumentCaractereCourant *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

GGS_string GGS_typeArgumentCaractereCourant::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<class @typeArgumentCaractereCourant" ;
  if (_isBuilt ()) {
    mPointer->appendForDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
  }else{
    s << "not built" ;
  }
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeArgumentEntier'                         *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_typeArgumentEntier::cPtr_typeArgumentEntier (const GGS_luint & argument_0 COMMA_LOCATION_ARGS)
:cPtr_typeArgumentRoutineExterne (THERE),
attributValeur (argument_0) {
}

//---------------------------------------------------------------------------*

void cPtr_typeArgumentEntier::
appendForDescription (C_Lexique & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@typeArgumentEntier:"
           << attributValeur.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeArgumentEntier'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeArgumentEntier::
GGS_typeArgumentEntier (void) {
  mPointer = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeArgumentEntier GGS_typeArgumentEntier::
constructor_new (C_Lexique & /* inLexique */,
                 const GGS_luint & argument_0 COMMA_LOCATION_ARGS) {
  cPtr_typeArgumentEntier * _ptr = (cPtr_typeArgumentEntier *) NULL ;
  macroMyNew (_ptr, cPtr_typeArgumentEntier (argument_0 COMMA_THERE)) ;
  GGS_typeArgumentEntier result ;
  macroAttachPointer (result.mPointer, _ptr) ;
  return result ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_typeArgumentEntier * GGS_typeArgumentEntier::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_typeArgumentEntier *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_typeArgumentEntier *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

GGS_string GGS_typeArgumentEntier::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<class @typeArgumentEntier" ;
  if (_isBuilt ()) {
    mPointer->appendForDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
  }else{
    s << "not built" ;
  }
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'typeArgumentRoutine'                         *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_typeArgumentRoutine::cPtr_typeArgumentRoutine (const GGS_lstring & argument_0,
                                const GGS_typeListeArgumentsRoutExterne & argument_1 COMMA_LOCATION_ARGS)
:cPtr_typeArgumentRoutineExterne (THERE),
attributNomRoutine (argument_0),
attributListeArguments (argument_1) {
}

//---------------------------------------------------------------------------*

void cPtr_typeArgumentRoutine::
appendForDescription (C_Lexique & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@typeArgumentRoutine:"
           << attributNomRoutine.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << attributListeArguments.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeArgumentRoutine'                   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeArgumentRoutine::
GGS_typeArgumentRoutine (void) {
  mPointer = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeArgumentRoutine GGS_typeArgumentRoutine::
constructor_new (C_Lexique & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_typeListeArgumentsRoutExterne & argument_1 COMMA_LOCATION_ARGS) {
  cPtr_typeArgumentRoutine * _ptr = (cPtr_typeArgumentRoutine *) NULL ;
  macroMyNew (_ptr, cPtr_typeArgumentRoutine (argument_0,
                                argument_1 COMMA_THERE)) ;
  GGS_typeArgumentRoutine result ;
  macroAttachPointer (result.mPointer, _ptr) ;
  return result ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_typeArgumentRoutine * GGS_typeArgumentRoutine::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_typeArgumentRoutine *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_typeArgumentRoutine *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

GGS_string GGS_typeArgumentRoutine::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<class @typeArgumentRoutine" ;
  if (_isBuilt ()) {
    mPointer->appendForDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
  }else{
    s << "not built" ;
  }
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@typeListeMessagesErreur'                 *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_typeListeMessagesErreur::
elementOf_GGS_typeListeMessagesErreur (const GGS_luint & argument_0):
mNextItem (NULL),
mErrorMessageIndex (argument_0) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_typeListeMessagesErreur::
appendForListDescription (C_Lexique & _inLexique,
                          C_String & ioString,
                          const sint32 inIndentation
                          COMMA_LOCATION_ARGS) const {
  ioString << "[" ;
  ioString << mErrorMessageIndex.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "]" ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     List '@typeListeMessagesErreur'                       *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeListeMessagesErreur::cRootList::cRootList (void):
mFirstItem (NULL),
mLastItem (NULL),
mListLength (0),
mCountReference (1) {
}

//---------------------------------------------------------------------------*

GGS_typeListeMessagesErreur::cRootList::~cRootList (void) {
  while (mFirstItem != NULL) {
    element_type * p = mFirstItem->nextObject () ;
    macroMyDelete (mFirstItem, element_type) ;
    mFirstItem = p ;
  }
}

//---------------------------------------------------------------------------*

GGS_typeListeMessagesErreur::GGS_typeListeMessagesErreur (void) { // Default Constructor
  _mRoot = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeListeMessagesErreur::~GGS_typeListeMessagesErreur (void) {
  _drop_operation () ;
}

//---------------------------------------------------------------------------*

GGS_typeListeMessagesErreur::
GGS_typeListeMessagesErreur (const GGS_typeListeMessagesErreur & inSource) {
  _mRoot = inSource._mRoot ;
  if (_mRoot != NULL) {
    macroValidPointer (_mRoot) ;
    _mRoot->mCountReference ++ ;
  }
}

//---------------------------------------------------------------------------*

void GGS_typeListeMessagesErreur::
operator = (const GGS_typeListeMessagesErreur & inSource) {
  if (this != & inSource) {
    _drop_operation () ;
    _mRoot = inSource._mRoot ;
    if (_mRoot != NULL) {
      macroValidPointer (_mRoot) ;
      _mRoot->mCountReference ++ ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_typeListeMessagesErreur::element_type * GGS_typeListeMessagesErreur::
firstObject (void) const {
  return (_mRoot == NULL) ? NULL : _mRoot->mFirstItem ;
}

//---------------------------------------------------------------------------*

void GGS_typeListeMessagesErreur::
_internalAppendItem (const GGS_luint & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0)) ;
  if (nouvelElement != NULL) {
    macroValidPointer (nouvelElement) ;
    if (_mRoot->mLastItem == NULL) {
      _mRoot->mFirstItem = nouvelElement ;
    }else{
      macroValidPointer (_mRoot->mLastItem) ;
      _mRoot->mLastItem->mNextItem = nouvelElement ;
    }
    _mRoot->mLastItem = nouvelElement ;
    nouvelElement = (element_type *) NULL ;
    _mRoot->mListLength ++ ;
  }
}

//---------------------------------------------------------------------------*

void GGS_typeListeMessagesErreur::
_addAssign_operation (const GGS_luint & argument_0) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (argument_0) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_typeListeMessagesErreur::
_insulateList (void) {
  if (_mRoot != NULL) {
    macroValidPointer (_mRoot) ;
    if (_mRoot->mCountReference > 1) {
      element_type * p = _mRoot->mFirstItem ;
      _mRoot->mCountReference -- ;
      _mRoot = NULL ;
      macroMyNew (_mRoot, cRootList) ;
      while (p != NULL) {
        macroValidPointer (p) ;
        _internalAppendItem (p->mErrorMessageIndex) ;
        p = p->mNextItem ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

GGS_typeListeMessagesErreur  GGS_typeListeMessagesErreur::
constructor_emptyList (C_Lexique & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_typeListeMessagesErreur result ;
  macroMyNew (result._mRoot, cRootList) ;
  return result ;
}

//---------------------------------------------------------------------------*

sint32 GGS_typeListeMessagesErreur::
count (void) const {
  return (_mRoot == NULL) ? 0 : _mRoot->mListLength ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_typeListeMessagesErreur::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<list @typeListeMessagesErreur" ;
  if (_isBuilt ()) {
    s << " " << _mRoot->mListLength << " object" << ((_mRoot->mListLength > 1) ? "s " : " ") ;
    element_type * p = _mRoot->mFirstItem ;
    while (p != NULL) {
      macroValidPointer (p) ;
      s << "\n" ;
      s.writeSpaces (inIndentation + 1) ;
      p->appendForListDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
      p = p->mNextItem ;
    }
  }else{
    s << "not built" ;
  }
  s << ">\n" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_uint GGS_typeListeMessagesErreur::
reader_length (C_Lexique & /* inLexique */
               COMMA_UNUSED_LOCATION_ARGS) const {
  return GGS_uint (_mRoot != NULL,
                   (_mRoot == NULL) ? 0 : (uint32) _mRoot->mListLength) ;
}

//---------------------------------------------------------------------------*

void GGS_typeListeMessagesErreur::
_drop_operation (void) {
  if (_mRoot != NULL) {
    macroValidPointer (_mRoot) ;
    if (_mRoot->mCountReference == 1) {
      macroMyDelete (_mRoot, cRootList) ;
    }else{
      _mRoot->mCountReference -- ;
      _mRoot = NULL ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_typeEmissionParDefaut'                 *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_typeEmissionParDefaut::
cPtr_typeEmissionParDefaut (LOCATION_ARGS)
:C_GGS_Object (THERE) {
}

//---------------------------------------------------------------------------*

void cPtr_typeEmissionParDefaut::
appendForDescription (C_Lexique & /* _inLexique */,
                      C_String & ioString,
                      const sint32 /* inIndentation */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  ioString << "->@typeEmissionParDefaut:" ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeEmissionParDefaut'                  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeEmissionParDefaut::
GGS_typeEmissionParDefaut (void) {
  mPointer = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeEmissionParDefaut::
GGS_typeEmissionParDefaut (const GGS_typeEmissionParDefaut & inOperand) {
  mPointer = (cPtr_typeEmissionParDefaut *) NULL ;
  macroAttachPointer (mPointer, inOperand.mPointer) ;
}

//---------------------------------------------------------------------------*

GGS_typeEmissionParDefaut::
~GGS_typeEmissionParDefaut (void) {
  macroDetachPointer (mPointer, cPtr_typeEmissionParDefaut) ;
}

//---------------------------------------------------------------------------*

void GGS_typeEmissionParDefaut::
operator = (const GGS_typeEmissionParDefaut & inSource) {
  macroAttachPointer (mPointer, inSource.mPointer) ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_typeEmissionParDefaut * GGS_typeEmissionParDefaut::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return mPointer ;  }
#endif

//---------------------------------------------------------------------------*

void GGS_typeEmissionParDefaut::
_drop_operation (void) {
  macroDetachPointer (mPointer, cPtr_typeEmissionParDefaut) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_typeEmissionParDefaut::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<class @typeEmissionParDefaut" ;
  if (_isBuilt ()) {
    mPointer->appendForDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
  }else{
    s << "not built" ;
  }
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'typeEmissionTerminalParDefaut'                    *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_typeEmissionTerminalParDefaut::cPtr_typeEmissionTerminalParDefaut (const GGS_lstring & argument_0 COMMA_LOCATION_ARGS)
:cPtr_typeEmissionParDefaut (THERE),
attributNomTerminal (argument_0) {
}

//---------------------------------------------------------------------------*

void cPtr_typeEmissionTerminalParDefaut::
appendForDescription (C_Lexique & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@typeEmissionTerminalParDefaut:"
           << attributNomTerminal.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_typeEmissionTerminalParDefaut'              *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeEmissionTerminalParDefaut::
GGS_typeEmissionTerminalParDefaut (void) {
  mPointer = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeEmissionTerminalParDefaut GGS_typeEmissionTerminalParDefaut::
constructor_new (C_Lexique & /* inLexique */,
                 const GGS_lstring & argument_0 COMMA_LOCATION_ARGS) {
  cPtr_typeEmissionTerminalParDefaut * _ptr = (cPtr_typeEmissionTerminalParDefaut *) NULL ;
  macroMyNew (_ptr, cPtr_typeEmissionTerminalParDefaut (argument_0 COMMA_THERE)) ;
  GGS_typeEmissionTerminalParDefaut result ;
  macroAttachPointer (result.mPointer, _ptr) ;
  return result ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_typeEmissionTerminalParDefaut * GGS_typeEmissionTerminalParDefaut::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_typeEmissionTerminalParDefaut *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_typeEmissionTerminalParDefaut *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

GGS_string GGS_typeEmissionTerminalParDefaut::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<class @typeEmissionTerminalParDefaut" ;
  if (_isBuilt ()) {
    mPointer->appendForDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
  }else{
    s << "not built" ;
  }
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   class 'typeEmissionErreurParDefaut'                     *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_typeEmissionErreurParDefaut::cPtr_typeEmissionErreurParDefaut (const GGS_luint & argument_0 COMMA_LOCATION_ARGS)
:cPtr_typeEmissionParDefaut (THERE),
mErrorMessageIndex (argument_0) {
}

//---------------------------------------------------------------------------*

void cPtr_typeEmissionErreurParDefaut::
appendForDescription (C_Lexique & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@typeEmissionErreurParDefaut:"
           << mErrorMessageIndex.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_typeEmissionErreurParDefaut'               *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeEmissionErreurParDefaut::
GGS_typeEmissionErreurParDefaut (void) {
  mPointer = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeEmissionErreurParDefaut GGS_typeEmissionErreurParDefaut::
constructor_new (C_Lexique & /* inLexique */,
                 const GGS_luint & argument_0 COMMA_LOCATION_ARGS) {
  cPtr_typeEmissionErreurParDefaut * _ptr = (cPtr_typeEmissionErreurParDefaut *) NULL ;
  macroMyNew (_ptr, cPtr_typeEmissionErreurParDefaut (argument_0 COMMA_THERE)) ;
  GGS_typeEmissionErreurParDefaut result ;
  macroAttachPointer (result.mPointer, _ptr) ;
  return result ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_typeEmissionErreurParDefaut * GGS_typeEmissionErreurParDefaut::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_typeEmissionErreurParDefaut *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_typeEmissionErreurParDefaut *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

GGS_string GGS_typeEmissionErreurParDefaut::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<class @typeEmissionErreurParDefaut" ;
  if (_isBuilt ()) {
    mPointer->appendForDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
  }else{
    s << "not built" ;
  }
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@typeListeRecherche'                    *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_typeListeRecherche::
elementOf_GGS_typeListeRecherche (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1):
mNextItem (NULL),
attributNomAttribut (argument_0),
attributNomTable (argument_1) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_typeListeRecherche::
appendForListDescription (C_Lexique & _inLexique,
                          C_String & ioString,
                          const sint32 inIndentation
                          COMMA_LOCATION_ARGS) const {
  ioString << "[" ;
  ioString << attributNomAttribut.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << attributNomTable.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "]" ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        List '@typeListeRecherche'                         *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeListeRecherche::cRootList::cRootList (void):
mFirstItem (NULL),
mLastItem (NULL),
mListLength (0),
mCountReference (1) {
}

//---------------------------------------------------------------------------*

GGS_typeListeRecherche::cRootList::~cRootList (void) {
  while (mFirstItem != NULL) {
    element_type * p = mFirstItem->nextObject () ;
    macroMyDelete (mFirstItem, element_type) ;
    mFirstItem = p ;
  }
}

//---------------------------------------------------------------------------*

GGS_typeListeRecherche::GGS_typeListeRecherche (void) { // Default Constructor
  _mRoot = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeListeRecherche::~GGS_typeListeRecherche (void) {
  _drop_operation () ;
}

//---------------------------------------------------------------------------*

GGS_typeListeRecherche::
GGS_typeListeRecherche (const GGS_typeListeRecherche & inSource) {
  _mRoot = inSource._mRoot ;
  if (_mRoot != NULL) {
    macroValidPointer (_mRoot) ;
    _mRoot->mCountReference ++ ;
  }
}

//---------------------------------------------------------------------------*

void GGS_typeListeRecherche::
operator = (const GGS_typeListeRecherche & inSource) {
  if (this != & inSource) {
    _drop_operation () ;
    _mRoot = inSource._mRoot ;
    if (_mRoot != NULL) {
      macroValidPointer (_mRoot) ;
      _mRoot->mCountReference ++ ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_typeListeRecherche::element_type * GGS_typeListeRecherche::
firstObject (void) const {
  return (_mRoot == NULL) ? NULL : _mRoot->mFirstItem ;
}

//---------------------------------------------------------------------------*

void GGS_typeListeRecherche::
_internalAppendItem (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1)) ;
  if (nouvelElement != NULL) {
    macroValidPointer (nouvelElement) ;
    if (_mRoot->mLastItem == NULL) {
      _mRoot->mFirstItem = nouvelElement ;
    }else{
      macroValidPointer (_mRoot->mLastItem) ;
      _mRoot->mLastItem->mNextItem = nouvelElement ;
    }
    _mRoot->mLastItem = nouvelElement ;
    nouvelElement = (element_type *) NULL ;
    _mRoot->mListLength ++ ;
  }
}

//---------------------------------------------------------------------------*

void GGS_typeListeRecherche::
_addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (argument_0,
                                argument_1) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_typeListeRecherche::
_insulateList (void) {
  if (_mRoot != NULL) {
    macroValidPointer (_mRoot) ;
    if (_mRoot->mCountReference > 1) {
      element_type * p = _mRoot->mFirstItem ;
      _mRoot->mCountReference -- ;
      _mRoot = NULL ;
      macroMyNew (_mRoot, cRootList) ;
      while (p != NULL) {
        macroValidPointer (p) ;
        _internalAppendItem (p->attributNomAttribut,
                                p->attributNomTable) ;
        p = p->mNextItem ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

GGS_typeListeRecherche  GGS_typeListeRecherche::
constructor_emptyList (C_Lexique & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_typeListeRecherche result ;
  macroMyNew (result._mRoot, cRootList) ;
  return result ;
}

//---------------------------------------------------------------------------*

sint32 GGS_typeListeRecherche::
count (void) const {
  return (_mRoot == NULL) ? 0 : _mRoot->mListLength ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_typeListeRecherche::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<list @typeListeRecherche" ;
  if (_isBuilt ()) {
    s << " " << _mRoot->mListLength << " object" << ((_mRoot->mListLength > 1) ? "s " : " ") ;
    element_type * p = _mRoot->mFirstItem ;
    while (p != NULL) {
      macroValidPointer (p) ;
      s << "\n" ;
      s.writeSpaces (inIndentation + 1) ;
      p->appendForListDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
      p = p->mNextItem ;
    }
  }else{
    s << "not built" ;
  }
  s << ">\n" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_uint GGS_typeListeRecherche::
reader_length (C_Lexique & /* inLexique */
               COMMA_UNUSED_LOCATION_ARGS) const {
  return GGS_uint (_mRoot != NULL,
                   (_mRoot == NULL) ? 0 : (uint32) _mRoot->mListLength) ;
}

//---------------------------------------------------------------------------*

void GGS_typeListeRecherche::
_drop_operation (void) {
  if (_mRoot != NULL) {
    macroValidPointer (_mRoot) ;
    if (_mRoot->mCountReference == 1) {
      macroMyDelete (_mRoot, cRootList) ;
    }else{
      _mRoot->mCountReference -- ;
      _mRoot = NULL ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   class 'typeInstructionActionExterne'                    *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_typeInstructionActionExterne::cPtr_typeInstructionActionExterne (const GGS_lstring & argument_0,
                                const GGS_typeListeArgumentsRoutExterne & argument_1,
                                const GGS_typeListeMessagesErreur & argument_2 COMMA_LOCATION_ARGS)
:cPtr_typeInstructionLexicale (THERE),
attributNomRoutineExterne (argument_0),
attributListeArguments (argument_1),
attributListeMessageErreur (argument_2) {
}

//---------------------------------------------------------------------------*

void cPtr_typeInstructionActionExterne::
appendForDescription (C_Lexique & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@typeInstructionActionExterne:"
           << attributNomRoutineExterne.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << attributListeArguments.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << attributListeMessageErreur.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_typeInstructionActionExterne'               *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeInstructionActionExterne::
GGS_typeInstructionActionExterne (void) {
  mPointer = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeInstructionActionExterne GGS_typeInstructionActionExterne::
constructor_new (C_Lexique & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_typeListeArgumentsRoutExterne & argument_1,
                 const GGS_typeListeMessagesErreur & argument_2 COMMA_LOCATION_ARGS) {
  cPtr_typeInstructionActionExterne * _ptr = (cPtr_typeInstructionActionExterne *) NULL ;
  macroMyNew (_ptr, cPtr_typeInstructionActionExterne (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  GGS_typeInstructionActionExterne result ;
  macroAttachPointer (result.mPointer, _ptr) ;
  return result ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_typeInstructionActionExterne * GGS_typeInstructionActionExterne::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_typeInstructionActionExterne *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_typeInstructionActionExterne *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

GGS_string GGS_typeInstructionActionExterne::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<class @typeInstructionActionExterne" ;
  if (_isBuilt ()) {
    mPointer->appendForDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
  }else{
    s << "not built" ;
  }
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                class 'typeInstructionRepetitionLexicale'                  *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_typeInstructionRepetitionLexicale::cPtr_typeInstructionRepetitionLexicale (const GGS_tListeInstructionsLexicales & argument_0,
                                const GGS_typeListeTestsEtInstructions & argument_1 COMMA_LOCATION_ARGS)
:cPtr_typeInstructionLexicale (THERE),
attributListeInstructionsDebut (argument_0),
attributListeBranches (argument_1) {
}

//---------------------------------------------------------------------------*

void cPtr_typeInstructionRepetitionLexicale::
appendForDescription (C_Lexique & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@typeInstructionRepetitionLexicale:"
           << attributListeInstructionsDebut.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << attributListeBranches.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           GALGAS class 'GGS_typeInstructionRepetitionLexicale'            *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeInstructionRepetitionLexicale::
GGS_typeInstructionRepetitionLexicale (void) {
  mPointer = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeInstructionRepetitionLexicale GGS_typeInstructionRepetitionLexicale::
constructor_new (C_Lexique & /* inLexique */,
                 const GGS_tListeInstructionsLexicales & argument_0,
                 const GGS_typeListeTestsEtInstructions & argument_1 COMMA_LOCATION_ARGS) {
  cPtr_typeInstructionRepetitionLexicale * _ptr = (cPtr_typeInstructionRepetitionLexicale *) NULL ;
  macroMyNew (_ptr, cPtr_typeInstructionRepetitionLexicale (argument_0,
                                argument_1 COMMA_THERE)) ;
  GGS_typeInstructionRepetitionLexicale result ;
  macroAttachPointer (result.mPointer, _ptr) ;
  return result ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_typeInstructionRepetitionLexicale * GGS_typeInstructionRepetitionLexicale::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_typeInstructionRepetitionLexicale *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_typeInstructionRepetitionLexicale *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

GGS_string GGS_typeInstructionRepetitionLexicale::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<class @typeInstructionRepetitionLexicale" ;
  if (_isBuilt ()) {
    mPointer->appendForDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
  }else{
    s << "not built" ;
  }
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'typeInstructionSiLexical'                      *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_typeInstructionSiLexical::cPtr_typeInstructionSiLexical (const GGS_typeListeTestsEtInstructions & argument_0,
                                const GGS_tListeInstructionsLexicales & argument_1 COMMA_LOCATION_ARGS)
:cPtr_typeInstructionLexicale (THERE),
attributListeBranches (argument_0),
attributBrancheSinon (argument_1) {
}

//---------------------------------------------------------------------------*

void cPtr_typeInstructionSiLexical::
appendForDescription (C_Lexique & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@typeInstructionSiLexical:"
           << attributListeBranches.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << attributBrancheSinon.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeInstructionSiLexical'                 *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeInstructionSiLexical::
GGS_typeInstructionSiLexical (void) {
  mPointer = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeInstructionSiLexical GGS_typeInstructionSiLexical::
constructor_new (C_Lexique & /* inLexique */,
                 const GGS_typeListeTestsEtInstructions & argument_0,
                 const GGS_tListeInstructionsLexicales & argument_1 COMMA_LOCATION_ARGS) {
  cPtr_typeInstructionSiLexical * _ptr = (cPtr_typeInstructionSiLexical *) NULL ;
  macroMyNew (_ptr, cPtr_typeInstructionSiLexical (argument_0,
                                argument_1 COMMA_THERE)) ;
  GGS_typeInstructionSiLexical result ;
  macroAttachPointer (result.mPointer, _ptr) ;
  return result ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_typeInstructionSiLexical * GGS_typeInstructionSiLexical::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_typeInstructionSiLexical *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_typeInstructionSiLexical *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

GGS_string GGS_typeInstructionSiLexical::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<class @typeInstructionSiLexical" ;
  if (_isBuilt ()) {
    mPointer->appendForDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
  }else{
    s << "not built" ;
  }
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   class 'typeInstructionEmettreSimple'                    *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_typeInstructionEmettreSimple::cPtr_typeInstructionEmettreSimple (const GGS_lstring & argument_0 COMMA_LOCATION_ARGS)
:cPtr_typeInstructionLexicale (THERE),
attributTerminal (argument_0) {
}

//---------------------------------------------------------------------------*

void cPtr_typeInstructionEmettreSimple::
appendForDescription (C_Lexique & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@typeInstructionEmettreSimple:"
           << attributTerminal.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_typeInstructionEmettreSimple'               *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeInstructionEmettreSimple::
GGS_typeInstructionEmettreSimple (void) {
  mPointer = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeInstructionEmettreSimple GGS_typeInstructionEmettreSimple::
constructor_new (C_Lexique & /* inLexique */,
                 const GGS_lstring & argument_0 COMMA_LOCATION_ARGS) {
  cPtr_typeInstructionEmettreSimple * _ptr = (cPtr_typeInstructionEmettreSimple *) NULL ;
  macroMyNew (_ptr, cPtr_typeInstructionEmettreSimple (argument_0 COMMA_THERE)) ;
  GGS_typeInstructionEmettreSimple result ;
  macroAttachPointer (result.mPointer, _ptr) ;
  return result ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_typeInstructionEmettreSimple * GGS_typeInstructionEmettreSimple::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_typeInstructionEmettreSimple *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_typeInstructionEmettreSimple *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

GGS_string GGS_typeInstructionEmettreSimple::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<class @typeInstructionEmettreSimple" ;
  if (_isBuilt ()) {
    mPointer->appendForDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
  }else{
    s << "not built" ;
  }
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'typeInstructionEmettre'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_typeInstructionEmettre::cPtr_typeInstructionEmettre (const GGS_typeListeRecherche & argument_0,
                                const GGS_typeEmissionParDefaut & argument_1 COMMA_LOCATION_ARGS)
:cPtr_typeInstructionLexicale (THERE),
attributListeRecherches (argument_0),
attributEmissionParDefaut (argument_1) {
}

//---------------------------------------------------------------------------*

void cPtr_typeInstructionEmettre::
appendForDescription (C_Lexique & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@typeInstructionEmettre:"
           << attributListeRecherches.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << attributEmissionParDefaut.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeInstructionEmettre'                  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeInstructionEmettre::
GGS_typeInstructionEmettre (void) {
  mPointer = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeInstructionEmettre GGS_typeInstructionEmettre::
constructor_new (C_Lexique & /* inLexique */,
                 const GGS_typeListeRecherche & argument_0,
                 const GGS_typeEmissionParDefaut & argument_1 COMMA_LOCATION_ARGS) {
  cPtr_typeInstructionEmettre * _ptr = (cPtr_typeInstructionEmettre *) NULL ;
  macroMyNew (_ptr, cPtr_typeInstructionEmettre (argument_0,
                                argument_1 COMMA_THERE)) ;
  GGS_typeInstructionEmettre result ;
  macroAttachPointer (result.mPointer, _ptr) ;
  return result ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_typeInstructionEmettre * GGS_typeInstructionEmettre::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_typeInstructionEmettre *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_typeInstructionEmettre *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

GGS_string GGS_typeInstructionEmettre::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<class @typeInstructionEmettre" ;
  if (_isBuilt ()) {
    mPointer->appendForDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
  }else{
    s << "not built" ;
  }
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'typeInstructionErreurLexicale'                    *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_typeInstructionErreurLexicale::cPtr_typeInstructionErreurLexicale (const GGS_luint & argument_0 COMMA_LOCATION_ARGS)
:cPtr_typeInstructionLexicale (THERE),
mErrorMessageIndex (argument_0) {
}

//---------------------------------------------------------------------------*

void cPtr_typeInstructionErreurLexicale::
appendForDescription (C_Lexique & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@typeInstructionErreurLexicale:"
           << mErrorMessageIndex.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_typeInstructionErreurLexicale'              *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_typeInstructionErreurLexicale::
GGS_typeInstructionErreurLexicale (void) {
  mPointer = NULL ;
}

//---------------------------------------------------------------------------*

GGS_typeInstructionErreurLexicale GGS_typeInstructionErreurLexicale::
constructor_new (C_Lexique & /* inLexique */,
                 const GGS_luint & argument_0 COMMA_LOCATION_ARGS) {
  cPtr_typeInstructionErreurLexicale * _ptr = (cPtr_typeInstructionErreurLexicale *) NULL ;
  macroMyNew (_ptr, cPtr_typeInstructionErreurLexicale (argument_0 COMMA_THERE)) ;
  GGS_typeInstructionErreurLexicale result ;
  macroAttachPointer (result.mPointer, _ptr) ;
  return result ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_typeInstructionErreurLexicale * GGS_typeInstructionErreurLexicale::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_typeInstructionErreurLexicale *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_typeInstructionErreurLexicale *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

GGS_string GGS_typeInstructionErreurLexicale::
reader_description (C_Lexique & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<class @typeInstructionErreurLexicale" ;
  if (_isBuilt ()) {
    mPointer->appendForDescription (_inLexique, s, inIndentation + 1 COMMA_THERE) ;
  }else{
    s << "not built" ;
  }
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "appendToLexicalInstructionList"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_appendToLexicalInstructionList (C_Lexique & _inLexique,
                                GGS_typeListeTestsEtInstructions  & var_cas_ioLexicalRulesList,
                                const GGS_lstring  & var_cas_ioDefinitionString,
                                GGS_lstring  & var_cas_ioTerminalSymbolName COMMA_UNUSED_LOCATION_ARGS) {
  GGS_typeListeConditionsLexicales  var_cas_lexicalConditionsList ;
  var_cas_lexicalConditionsList = GGS_typeListeConditionsLexicales::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_typeConditionLexicale  var_cas_c ;
  var_cas_c = GGS_typeConditionChaine::constructor_new (_inLexique, var_cas_ioDefinitionString COMMA_HERE) ;
  var_cas_lexicalConditionsList._addAssign_operation (var_cas_c) ;
  GGS_typeInstructionLexicale  var_cas_lexicalInstruction ;
  var_cas_lexicalInstruction = GGS_typeInstructionEmettreSimple::constructor_new (_inLexique, var_cas_ioTerminalSymbolName COMMA_HERE) ;
  GGS_tListeInstructionsLexicales  var_cas_instructionList ;
  var_cas_instructionList = GGS_tListeInstructionsLexicales::constructor_emptyList (_inLexique COMMA_HERE) ;
  var_cas_instructionList._addAssign_operation (var_cas_lexicalInstruction) ;
  var_cas_ioLexicalRulesList._addAssign_operation (var_cas_lexicalConditionsList, var_cas_instructionList) ;
}

//---------------------------------------------------------------------------*

