//-----------------------------------------------------------------------------*
//                                                                             *
//                           File 'galgas_prgm.cpp'                            *
//                         Generated by version 2.6.0                          *
//                       june 26th, 2014, at 11h10'36"                         *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "galgas_prgm.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/F_DisplayException.h"
#include "utilities/basic-allocation.h"
#include "utilities/cpp-allocation.h"
#include "utilities/C_PrologueEpilogue.h"
#include "command_line_interface/F_mainForLIBPM.h"
#include "command_line_interface/C_builtin_CLI_Options.h"
#include "command_line_interface/F_Analyze_CLI_Options.h"
#include "project_header.h"

//-----------------------------------------------------------------------------*

#include "optionLL1grammar.h"
#include "templateGrammar.h"
#include "galgas_cli_options.h"
#include "grammarLL1grammar.h"
#include "syntaxSLRgrammar.h"
#include "lexiqueLL1grammar.h"
#include "semanticsSLRgrammar.h"
#include "guiGrammar.h"
#include "programSLRgrammar.h"
#include "projectLL1grammar.h"

//-----------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "galgas_prgm.gProgram", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//-----------------------------------------------------------------------------*
//                                                                             *
//                      print_tool_help_message                                *
//                                                                             *
//-----------------------------------------------------------------------------*

static void print_tool_help_message (void) {
  co << "Compiled with GALGAS revision NUMERO_REVISION_GALGAS\n" ;
}

//-----------------------------------------------------------------------------*

static const char * kSourceFileExtensions [] = {
  "gOption",
  "gLexique",
  "gSemantics",
  "gSyntax",
  "gGrammar",
  "gGui",
  "gProgram",
  "gProject",
  "gTemplate",
  NULL
} ;    

//-----------------------------------------------------------------------------*

static const char * kSourceFileHelpMessages [] = {
  "a GALGAS option source file",
  "a GALGAS lexique source file",
  "a GALGAS semantics source file",
  "a GALGAS syntax source file",
  "a GALGAS grammar source file",
  "a GALGAS GUI source file",
  "a GALGAS program source file",
  "a GALGAS project source file",
  "a GALGAS Template source file",
  NULL
} ;    

//-----------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  static const char * kVersionString = "version " PROJECT_VERSION_STRING " [debug]" ;
#else
  static const char * kVersionString = "version " PROJECT_VERSION_STRING ;
#endif

//-----------------------------------------------------------------------------*
//                                                                             *
//                      M A I N    F O R    L I B P M                          *
//                                                                             *
//-----------------------------------------------------------------------------*

int mainForLIBPM (int inArgc, const char * inArgv []) {
//--- Analyze Command Line Options
  TC_UniqueArray <C_String> sourceFilesArray ;
  F_Analyze_CLI_Options (inArgc, inArgv,
                         kVersionString,
                         sourceFilesArray,
                         kSourceFileExtensions,
                         kSourceFileHelpMessages,
                         print_tool_help_message) ;
//---
  bool verboseOptionOn = true ;
  int16_t returnCode = 0 ; // No error
//--- Set Execution mode
  C_String executionModeOptionErrorMessage ;
  setExecutionMode (executionModeOptionErrorMessage) ;
  if (executionModeOptionErrorMessage.length () > 0) {
    co << executionModeOptionErrorMessage ;
    returnCode = 1 ;
  }else{
  //--- Common lexique object
    C_Compiler * commonLexique = NULL ;
    macroMyNew (commonLexique, C_Compiler (NULL, "", "" COMMA_HERE)) ;
    try{
      routine_before (commonLexique COMMA_HERE) ;
      verboseOptionOn = gOption_galgas_5F_builtin_5F_options_verbose_5F_output.mValue ;
      for (int32_t i=0 ; i<sourceFilesArray.count () ; i++) {
        setCurrentCompiledFilePath (sourceFilesArray (i COMMA_HERE)) ;
        if (gOption_galgas_5F_builtin_5F_options_trace.mValue) {
          enableTraceWithPath (sourceFilesArray (i COMMA_HERE)) ;
        }
        const C_String fileExtension = sourceFilesArray (i COMMA_HERE).pathExtension () ;
        const GALGAS_string sfp = GALGAS_string (sourceFilesArray (i COMMA_HERE)) ;
        const GALGAS_location location = commonLexique->here () ;
        const GALGAS_lstring sourceFilePath (sfp, location) ;
        int16_t r = 0 ;
        if (fileExtension == "gOption") {
          if (executionModeIsIndexing ()) {
            cGrammar_optionLL_31_grammar::performIndexing (commonLexique, sourceFilesArray (i COMMA_HERE)) ;
          }else{
            routine_programRule_5F__30_ (sourceFilePath, commonLexique COMMA_HERE) ;
          }
        }else if (fileExtension == "gLexique") {
          if (executionModeIsIndexing ()) {
            cGrammar_lexiqueLL_31_grammar::performIndexing (commonLexique, sourceFilesArray (i COMMA_HERE)) ;
          }else{
            routine_programRule_5F__31_ (sourceFilePath, commonLexique COMMA_HERE) ;
          }
        }else if (fileExtension == "gSemantics") {
          if (executionModeIsIndexing ()) {
            cGrammar_semanticsSLRgrammar::performIndexing (commonLexique, sourceFilesArray (i COMMA_HERE)) ;
          }else{
            routine_programRule_5F__32_ (sourceFilePath, commonLexique COMMA_HERE) ;
          }
        }else if (fileExtension == "gSyntax") {
          if (executionModeIsIndexing ()) {
            cGrammar_syntaxSLRgrammar::performIndexing (commonLexique, sourceFilesArray (i COMMA_HERE)) ;
          }else{
            routine_programRule_5F__33_ (sourceFilePath, commonLexique COMMA_HERE) ;
          }
        }else if (fileExtension == "gGrammar") {
          if (executionModeIsIndexing ()) {
            cGrammar_grammarLL_31_grammar::performIndexing (commonLexique, sourceFilesArray (i COMMA_HERE)) ;
          }else{
            routine_programRule_5F__34_ (sourceFilePath, commonLexique COMMA_HERE) ;
          }
        }else if (fileExtension == "gGui") {
          if (executionModeIsIndexing ()) {
            cGrammar_guiGrammar::performIndexing (commonLexique, sourceFilesArray (i COMMA_HERE)) ;
          }else{
            routine_programRule_5F__35_ (sourceFilePath, commonLexique COMMA_HERE) ;
          }
        }else if (fileExtension == "gProgram") {
          if (executionModeIsIndexing ()) {
            cGrammar_programSLRgrammar::performIndexing (commonLexique, sourceFilesArray (i COMMA_HERE)) ;
          }else{
            routine_programRule_5F__36_ (sourceFilePath, commonLexique COMMA_HERE) ;
          }
        }else if (fileExtension == "gProject") {
          if (executionModeIsIndexing ()) {
            cGrammar_projectLL_31_grammar::performIndexing (commonLexique, sourceFilesArray (i COMMA_HERE)) ;
          }else{
            routine_programRule_5F__37_ (sourceFilePath, commonLexique COMMA_HERE) ;
          }
        }else if (fileExtension == "gTemplate") {
          if (executionModeIsIndexing ()) {
            cGrammar_projectLL_31_grammar::performIndexing (commonLexique, sourceFilesArray (i COMMA_HERE)) ;
          }else{
            routine_programRule_5F__38_ (sourceFilePath, commonLexique COMMA_HERE) ;
          }
        }else{
          printf ("*** Error: unhandled extension for file '%s' ***\n", sourceFilesArray (i COMMA_HERE).cString (HERE)) ;
          r = 1 ;
        }
        if (r != 0) {
          returnCode = r ;
        }
        closeTrace () ;
      }
    //--- Error or warnings ?
      if (totalErrorCount () > 0) {
        returnCode = 1 ; // Error code
      }else if (totalWarningCount () > 0) {
        if (gOption_galgas_5F_builtin_5F_options_treat_5F_warnings_5F_as_5F_error.mValue) {
          returnCode = 1 ; // Error code
          if (verboseOptionOn) {
            printf ("** Note: warnings are treated as errors. **\n") ;
          }
        }
      }
    //--- Epilogue
      routine_after (commonLexique COMMA_HERE) ;
    //--- Display error and warnings count
      if (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.mValue || (totalWarningCount () > 0) || (totalErrorCount () > 0)) {
        C_String message ;
        if (totalWarningCount () == 0) {
          message << "No warning" ;
        }else if (totalWarningCount () == 1) {
          message << "1 warning" ;
        }else{
          message << cStringWithSigned (totalWarningCount ()) << " warnings" ;
        }
        message << ", " ;
        if (totalErrorCount () == 0) {
          message << "no error" ;
        }else if (totalErrorCount () == 1) {
          message << "1 error" ;
        }else{
          message << cStringWithSigned (totalErrorCount ()) << " errors" ;
        }
        message << ".\n" ;
        ggs_printMessage (message COMMA_HERE) ;
      }
    }catch (const ::std:: exception & e) {
      F_default_display_exception (e) ;
      returnCode = 1 ; // Error code
    }catch (...) {
      printf ("**** Unknow exception ****\n") ;
      throw ;
    }
    macroDetachSharedObject (commonLexique) ;
  }
  return returnCode ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                              Routine 'before'                               *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_before (C_Compiler * inCompiler
                     COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string var_creationProjectName = GALGAS_string (gOption_galgas_5F_cli_5F_options_create_5F_project.reader_value ()) ;
  {
  routine_projectCreation (var_creationProjectName, inCompiler COMMA_SOURCE_FILE_AT_LINE (37)) ;
  }
  const enumGalgasBool test_0 = GALGAS_bool (gOption_galgas_5F_cli_5F_options_printPredefinedLexicalActions.reader_value ()).boolEnum () ;
  if (kBoolTrue == test_0) {
    {
    routine_printPredefinedLexicalActions (inCompiler COMMA_SOURCE_FILE_AT_LINE (40)) ;
    }
  }
  {
  routine_generatePredefinedTypeFiles (GALGAS_string (gOption_galgas_5F_cli_5F_options_generatePredefinedTypes.reader_value ()), inCompiler COMMA_SOURCE_FILE_AT_LINE (43)) ;
  }
  const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, GALGAS_string (gOption_galgas_5F_cli_5F_options_extractLIBPMOption.reader_value ()).objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_1) {
    {
    routine_updateLIBPMatPath (GALGAS_string (gOption_galgas_5F_cli_5F_options_extractLIBPMOption.reader_value ()), inCompiler COMMA_SOURCE_FILE_AT_LINE (46)) ;
    }
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                           Routine 'programRule_0'                           *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_programRule_5F__30_ (const GALGAS_lstring constinArgument_inSourceFile,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_parsedComponentStruct var_parsedComponentStruct = GALGAS_parsedComponentStruct::constructor_new (GALGAS_parsedSemanticsComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (57)), GALGAS_parsedLexiqueComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (58)), GALGAS_parsedSyntaxComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (59)), GALGAS_parsedOptionComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (60)), GALGAS_parsedGrammarComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (61)), GALGAS_parsedProgramComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (62)), GALGAS_parsedGuiComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (63)) COMMA_SOURCE_FILE_AT_LINE (56)) ;
  {
  routine_compileOptionComponentFromSourceFile (constinArgument_inSourceFile, function_outputDirectory (constinArgument_inSourceFile, inCompiler COMMA_SOURCE_FILE_AT_LINE (65)), var_parsedComponentStruct, inCompiler COMMA_SOURCE_FILE_AT_LINE (65)) ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                           Routine 'programRule_1'                           *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_programRule_5F__31_ (const GALGAS_lstring constinArgument_inSourceFile,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_parsedComponentStruct var_parsedComponentStruct = GALGAS_parsedComponentStruct::constructor_new (GALGAS_parsedSemanticsComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (75)), GALGAS_parsedLexiqueComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (76)), GALGAS_parsedSyntaxComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (77)), GALGAS_parsedOptionComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (78)), GALGAS_parsedGrammarComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (79)), GALGAS_parsedProgramComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (80)), GALGAS_parsedGuiComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (81)) COMMA_SOURCE_FILE_AT_LINE (74)) ;
  {
  routine_compileLexiqueComponentFromSource (constinArgument_inSourceFile, function_outputDirectory (constinArgument_inSourceFile, inCompiler COMMA_SOURCE_FILE_AT_LINE (83)), var_parsedComponentStruct, inCompiler COMMA_SOURCE_FILE_AT_LINE (83)) ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                           Routine 'programRule_2'                           *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_programRule_5F__32_ (const GALGAS_lstring constinArgument_inSourceFile,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_parsedComponentStruct var_parsedComponentStruct = GALGAS_parsedComponentStruct::constructor_new (GALGAS_parsedSemanticsComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (93)), GALGAS_parsedLexiqueComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (94)), GALGAS_parsedSyntaxComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (95)), GALGAS_parsedOptionComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (96)), GALGAS_parsedGrammarComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (97)), GALGAS_parsedProgramComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (98)), GALGAS_parsedGuiComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (99)) COMMA_SOURCE_FILE_AT_LINE (92)) ;
  {
  routine_compileSemanticsComponentFromSourceFile (constinArgument_inSourceFile, function_outputDirectory (constinArgument_inSourceFile, inCompiler COMMA_SOURCE_FILE_AT_LINE (101)), var_parsedComponentStruct, inCompiler COMMA_SOURCE_FILE_AT_LINE (101)) ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                           Routine 'programRule_3'                           *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_programRule_5F__33_ (const GALGAS_lstring constinArgument_inSourceFile,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_parsedComponentStruct var_parsedComponentStruct = GALGAS_parsedComponentStruct::constructor_new (GALGAS_parsedSemanticsComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (111)), GALGAS_parsedLexiqueComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (112)), GALGAS_parsedSyntaxComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (113)), GALGAS_parsedOptionComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (114)), GALGAS_parsedGrammarComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (115)), GALGAS_parsedProgramComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (116)), GALGAS_parsedGuiComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (117)) COMMA_SOURCE_FILE_AT_LINE (110)) ;
  {
  routine_compileSyntaxComponentFromSourceFile (constinArgument_inSourceFile, function_outputDirectory (constinArgument_inSourceFile, inCompiler COMMA_SOURCE_FILE_AT_LINE (119)), var_parsedComponentStruct, inCompiler COMMA_SOURCE_FILE_AT_LINE (119)) ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                           Routine 'programRule_4'                           *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_programRule_5F__34_ (const GALGAS_lstring constinArgument_inSourceFile,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_parsedComponentStruct var_parsedComponentStruct = GALGAS_parsedComponentStruct::constructor_new (GALGAS_parsedSemanticsComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (129)), GALGAS_parsedLexiqueComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (130)), GALGAS_parsedSyntaxComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (131)), GALGAS_parsedOptionComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (132)), GALGAS_parsedGrammarComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (133)), GALGAS_parsedProgramComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (134)), GALGAS_parsedGuiComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (135)) COMMA_SOURCE_FILE_AT_LINE (128)) ;
  {
  routine_compileGrammarComponentFromSourceFile (constinArgument_inSourceFile, function_outputDirectory (constinArgument_inSourceFile, inCompiler COMMA_SOURCE_FILE_AT_LINE (139)), var_parsedComponentStruct, inCompiler COMMA_SOURCE_FILE_AT_LINE (137)) ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                           Routine 'programRule_5'                           *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_programRule_5F__35_ (const GALGAS_lstring constinArgument_inSourceFile,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_parsedComponentStruct var_parsedComponentStruct = GALGAS_parsedComponentStruct::constructor_new (GALGAS_parsedSemanticsComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (150)), GALGAS_parsedLexiqueComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (151)), GALGAS_parsedSyntaxComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (152)), GALGAS_parsedOptionComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (153)), GALGAS_parsedGrammarComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (154)), GALGAS_parsedProgramComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (155)), GALGAS_parsedGuiComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (156)) COMMA_SOURCE_FILE_AT_LINE (149)) ;
  {
  routine_compileGuiComponentFromSourceFile (constinArgument_inSourceFile, function_outputDirectory (constinArgument_inSourceFile, inCompiler COMMA_SOURCE_FILE_AT_LINE (158)), var_parsedComponentStruct, inCompiler COMMA_SOURCE_FILE_AT_LINE (158)) ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                           Routine 'programRule_6'                           *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_programRule_5F__36_ (const GALGAS_lstring constinArgument_inSourceFile,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_parsedComponentStruct var_parsedComponentStruct = GALGAS_parsedComponentStruct::constructor_new (GALGAS_parsedSemanticsComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (168)), GALGAS_parsedLexiqueComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (169)), GALGAS_parsedSyntaxComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (170)), GALGAS_parsedOptionComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (171)), GALGAS_parsedGrammarComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (172)), GALGAS_parsedProgramComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (173)), GALGAS_parsedGuiComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (174)) COMMA_SOURCE_FILE_AT_LINE (167)) ;
  {
  routine_compileProgramComponentFromSourceFile (constinArgument_inSourceFile, function_outputDirectory (constinArgument_inSourceFile, inCompiler COMMA_SOURCE_FILE_AT_LINE (176)), var_parsedComponentStruct, inCompiler COMMA_SOURCE_FILE_AT_LINE (176)) ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                           Routine 'programRule_7'                           *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_programRule_5F__37_ (const GALGAS_lstring constinArgument_inProjectSourceFile,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string var_outputDirectory = function_outputDirectory (constinArgument_inProjectSourceFile, inCompiler COMMA_SOURCE_FILE_AT_LINE (189)) ;
  GALGAS_projectComponentAST var_projectComponentAST ;
  cGrammar_projectLL_31_grammar::_performSourceFileParsing_ (inCompiler, constinArgument_inProjectSourceFile, var_projectComponentAST COMMA_SOURCE_FILE_AT_LINE (192)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_projectComponentAST.reader_mProjectName (SOURCE_FILE_AT_LINE (194)).reader_string (SOURCE_FILE_AT_LINE (194)).objectCompare (constinArgument_inProjectSourceFile.mAttribute_string.reader_lastPathComponent (SOURCE_FILE_AT_LINE (194)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (194)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (var_projectComponentAST.reader_mProjectName (SOURCE_FILE_AT_LINE (195)).reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("the project name ('").operator_concat (var_projectComponentAST.reader_mProjectName (SOURCE_FILE_AT_LINE (196)).reader_string (SOURCE_FILE_AT_LINE (196)) COMMA_SOURCE_FILE_AT_LINE (196)).operator_concat (GALGAS_string ("') should be the same as the source file base name ('") COMMA_SOURCE_FILE_AT_LINE (196)).operator_concat (constinArgument_inProjectSourceFile.mAttribute_string.reader_lastPathComponent (SOURCE_FILE_AT_LINE (197)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (197)) COMMA_SOURCE_FILE_AT_LINE (196)).operator_concat (GALGAS_string ("')") COMMA_SOURCE_FILE_AT_LINE (197)) COMMA_SOURCE_FILE_AT_LINE (195)) ;
  }
  GALGAS_string var_targetName = var_projectComponentAST.reader_mTargetName (SOURCE_FILE_AT_LINE (200)).reader_string (SOURCE_FILE_AT_LINE (200)) ;
  const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, var_targetName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_2) {
    GALGAS_location location_3 (var_projectComponentAST.reader_mTargetName (SOURCE_FILE_AT_LINE (202)).reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_3, GALGAS_string ("the target name should not be empty") COMMA_SOURCE_FILE_AT_LINE (202)) ;
  }
  GALGAS_projectQualifiedFeatureMap var_projectQualifiedFeatureMap = GALGAS_projectQualifiedFeatureMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (205)) ;
  cEnumerator_qualifiedFeatureList enumerator_8734 (var_projectComponentAST.mAttribute_mQualifiedFeatureList, kEnumeration_up) ;
  while (enumerator_8734.hasCurrentObject ()) {
    {
    var_projectQualifiedFeatureMap.modifier_insertKey (enumerator_8734.current_mFeatureName (HERE), enumerator_8734.current_mFeatureValue (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (207)) ;
    }
    enumerator_8734.gotoNextObject () ;
  }
  GALGAS_parsedComponentStruct var_parsedComponentStruct = GALGAS_parsedComponentStruct::constructor_new (GALGAS_parsedSemanticsComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (214)), GALGAS_parsedLexiqueComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (215)), GALGAS_parsedSyntaxComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (216)), GALGAS_parsedOptionComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (217)), GALGAS_parsedGrammarComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (218)), GALGAS_parsedProgramComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (219)), GALGAS_parsedGuiComponentMap::constructor_emptyMap (SOURCE_FILE_AT_LINE (220)) COMMA_SOURCE_FILE_AT_LINE (213)) ;
  cEnumerator_projectSourceList enumerator_9330 (var_projectComponentAST.reader_mProjectSourceList (SOURCE_FILE_AT_LINE (223)), kEnumeration_up) ;
  while (enumerator_9330.hasCurrentObject ()) {
    GALGAS_string var_extension = enumerator_9330.current_mFilePath (HERE).mAttribute_string.reader_pathExtension (SOURCE_FILE_AT_LINE (224)) ;
    GALGAS_lstring var_componentName = GALGAS_lstring::constructor_new (enumerator_9330.current_mFilePath (HERE).mAttribute_string.reader_lastPathComponent (SOURCE_FILE_AT_LINE (226)).reader_stringByDeletingPathExtension (SOURCE_FILE_AT_LINE (226)), enumerator_9330.current_mFilePath (HERE).reader_location (SOURCE_FILE_AT_LINE (227)) COMMA_SOURCE_FILE_AT_LINE (225)) ;
    GALGAS_lstring var_fullFilePath = GALGAS_lstring::constructor_new (constinArgument_inProjectSourceFile.mAttribute_string.reader_stringByDeletingLastPathComponent (SOURCE_FILE_AT_LINE (230)).operator_concat (GALGAS_string ("/") COMMA_SOURCE_FILE_AT_LINE (230)).operator_concat (enumerator_9330.current_mFilePath (HERE).reader_string (SOURCE_FILE_AT_LINE (230)) COMMA_SOURCE_FILE_AT_LINE (230)), enumerator_9330.current_mFilePath (HERE).reader_location (SOURCE_FILE_AT_LINE (231)) COMMA_SOURCE_FILE_AT_LINE (229)) ;
    if (enumerator_9330.current_mSourceKind (HERE).isValid ()) {
      switch (enumerator_9330.current_mSourceKind (HERE).enumValue ()) {
      case GALGAS_sourceFileKind::kNotBuilt:
        break ;
      case GALGAS_sourceFileKind::kEnum_externSourceFile: {
        } break ;
      case GALGAS_sourceFileKind::kEnum_guiSourceFile: {
        const enumGalgasBool test_4 = GALGAS_bool (kIsEqual, var_extension.objectCompare (GALGAS_string ("gGui"))).boolEnum () ;
        if (kBoolTrue == test_4) {
          const enumGalgasBool test_5 = GALGAS_bool (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.reader_value ()).boolEnum () ;
          if (kBoolTrue == test_5) {
            inCompiler->printMessage (GALGAS_string ("*** Parse '").operator_concat (var_fullFilePath.mAttribute_string.reader_lastPathComponent (SOURCE_FILE_AT_LINE (238)) COMMA_SOURCE_FILE_AT_LINE (238)).operator_concat (GALGAS_string ("'\n") COMMA_SOURCE_FILE_AT_LINE (238)) COMMA_SOURCE_FILE_AT_LINE (238)) ;
          }
          GALGAS_guiComponentAST var_guiComponentRoot ;
          cGrammar_guiGrammar::_performSourceFileParsing_ (inCompiler, var_fullFilePath, var_guiComponentRoot COMMA_SOURCE_FILE_AT_LINE (241)) ;
          {
          var_parsedComponentStruct.mAttribute_mParsedGuiComponentMap.modifier_insertKey (var_componentName, var_fullFilePath, var_guiComponentRoot, inCompiler COMMA_SOURCE_FILE_AT_LINE (242)) ;
          }
        }else if (kBoolFalse == test_4) {
          GALGAS_location location_6 (enumerator_9330.current_mFilePath (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_6, GALGAS_string ("extension of a gui component should be '.gGui'.") COMMA_SOURCE_FILE_AT_LINE (244)) ;
        }
        } break ;
      case GALGAS_sourceFileKind::kEnum_lexiqueSourceFile: {
        const enumGalgasBool test_7 = GALGAS_bool (kIsEqual, var_extension.objectCompare (GALGAS_string ("gLexique"))).boolEnum () ;
        if (kBoolTrue == test_7) {
          const enumGalgasBool test_8 = GALGAS_bool (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.reader_value ()).boolEnum () ;
          if (kBoolTrue == test_8) {
            inCompiler->printMessage (GALGAS_string ("*** Parse '").operator_concat (var_fullFilePath.mAttribute_string.reader_lastPathComponent (SOURCE_FILE_AT_LINE (249)) COMMA_SOURCE_FILE_AT_LINE (249)).operator_concat (GALGAS_string ("'\n") COMMA_SOURCE_FILE_AT_LINE (249)) COMMA_SOURCE_FILE_AT_LINE (249)) ;
          }
          GALGAS_lexiqueComponentAST var_lexiqueComponentRoot ;
          cGrammar_lexiqueLL_31_grammar::_performSourceFileParsing_ (inCompiler, var_fullFilePath, var_lexiqueComponentRoot COMMA_SOURCE_FILE_AT_LINE (252)) ;
          {
          var_parsedComponentStruct.mAttribute_mParsedLexiqueComponentMap.modifier_insertKey (var_componentName, var_lexiqueComponentRoot, inCompiler COMMA_SOURCE_FILE_AT_LINE (253)) ;
          }
        }else if (kBoolFalse == test_7) {
          GALGAS_location location_9 (enumerator_9330.current_mFilePath (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_9, GALGAS_string ("extension of a lexique component should be '.gLexique'.") COMMA_SOURCE_FILE_AT_LINE (255)) ;
        }
        } break ;
      case GALGAS_sourceFileKind::kEnum_optionSourceFile: {
        const enumGalgasBool test_10 = GALGAS_bool (kIsEqual, var_extension.objectCompare (GALGAS_string ("gOption"))).boolEnum () ;
        if (kBoolTrue == test_10) {
          const enumGalgasBool test_11 = GALGAS_bool (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.reader_value ()).boolEnum () ;
          if (kBoolTrue == test_11) {
            inCompiler->printMessage (GALGAS_string ("*** Parse '").operator_concat (var_fullFilePath.mAttribute_string.reader_lastPathComponent (SOURCE_FILE_AT_LINE (260)) COMMA_SOURCE_FILE_AT_LINE (260)).operator_concat (GALGAS_string ("'\n") COMMA_SOURCE_FILE_AT_LINE (260)) COMMA_SOURCE_FILE_AT_LINE (260)) ;
          }
          GALGAS_optionComponentAST var_optionComponentAST ;
          C_String syntaxDirectedTranslationResult_11116 ;
          cGrammar_optionLL_31_grammar::_performSourceFileParsing_ (inCompiler, syntaxDirectedTranslationResult_11116, var_fullFilePath, var_optionComponentAST COMMA_SOURCE_FILE_AT_LINE (263)) ;
          GALGAS_commandLineOptionMap var_boolOptionMap ;
          GALGAS_commandLineOptionMap var_UIntOptionMap ;
          GALGAS_commandLineOptionMap var_stringOptionMap ;
          {
          routine_semanticAnalysisOfOptionComponent (var_optionComponentAST, var_boolOptionMap, var_UIntOptionMap, var_stringOptionMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (268)) ;
          }
          {
          var_parsedComponentStruct.mAttribute_mParsedOptionComponentMap.modifier_insertKey (var_componentName, var_boolOptionMap, var_UIntOptionMap, var_stringOptionMap, inCompiler COMMA_SOURCE_FILE_AT_LINE (274)) ;
          }
        }else if (kBoolFalse == test_10) {
          GALGAS_location location_12 (enumerator_9330.current_mFilePath (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_12, GALGAS_string ("extension of an option component should be '.gOption'.") COMMA_SOURCE_FILE_AT_LINE (281)) ;
        }
        } break ;
      case GALGAS_sourceFileKind::kEnum_semanticsSourceFile: {
        const enumGalgasBool test_13 = GALGAS_bool (kIsEqual, var_extension.objectCompare (GALGAS_string ("gSemantics"))).boolEnum () ;
        if (kBoolTrue == test_13) {
          const enumGalgasBool test_14 = GALGAS_bool (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.reader_value ()).boolEnum () ;
          if (kBoolTrue == test_14) {
            inCompiler->printMessage (GALGAS_string ("*** Parse '").operator_concat (var_fullFilePath.mAttribute_string.reader_lastPathComponent (SOURCE_FILE_AT_LINE (286)) COMMA_SOURCE_FILE_AT_LINE (286)).operator_concat (GALGAS_string ("'\n") COMMA_SOURCE_FILE_AT_LINE (286)) COMMA_SOURCE_FILE_AT_LINE (286)) ;
          }
          GALGAS_semanticsComponentAST var_semanticsComponentRoot ;
          cGrammar_semanticsSLRgrammar::_performSourceFileParsing_ (inCompiler, var_fullFilePath, var_semanticsComponentRoot COMMA_SOURCE_FILE_AT_LINE (289)) ;
          {
          var_parsedComponentStruct.mAttribute_mParsedSemanticsComponentMap.modifier_insertKey (var_componentName, var_fullFilePath, var_semanticsComponentRoot, inCompiler COMMA_SOURCE_FILE_AT_LINE (290)) ;
          }
        }else if (kBoolFalse == test_13) {
          GALGAS_location location_15 (enumerator_9330.current_mFilePath (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_15, GALGAS_string ("extension of a semantics component should be '.gSemantics'.") COMMA_SOURCE_FILE_AT_LINE (292)) ;
        }
        } break ;
      case GALGAS_sourceFileKind::kEnum_syntaxSourceFile: {
        const enumGalgasBool test_16 = GALGAS_bool (kIsEqual, var_extension.objectCompare (GALGAS_string ("gSyntax"))).boolEnum () ;
        if (kBoolTrue == test_16) {
          const enumGalgasBool test_17 = GALGAS_bool (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.reader_value ()).boolEnum () ;
          if (kBoolTrue == test_17) {
            inCompiler->printMessage (GALGAS_string ("*** Parse '").operator_concat (var_fullFilePath.mAttribute_string.reader_lastPathComponent (SOURCE_FILE_AT_LINE (297)) COMMA_SOURCE_FILE_AT_LINE (297)).operator_concat (GALGAS_string ("'\n") COMMA_SOURCE_FILE_AT_LINE (297)) COMMA_SOURCE_FILE_AT_LINE (297)) ;
          }
          GALGAS_syntaxComponentAST var_syntaxComponentRoot ;
          cGrammar_syntaxSLRgrammar::_performSourceFileParsing_ (inCompiler, var_fullFilePath, var_syntaxComponentRoot COMMA_SOURCE_FILE_AT_LINE (300)) ;
          {
          var_parsedComponentStruct.mAttribute_mParsedSyntaxComponentMap.modifier_insertKey (var_componentName, var_fullFilePath, var_syntaxComponentRoot, inCompiler COMMA_SOURCE_FILE_AT_LINE (301)) ;
          }
        }else if (kBoolFalse == test_16) {
          GALGAS_location location_18 (enumerator_9330.current_mFilePath (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_18, GALGAS_string ("extension of a syntax component should be '.gSyntax'.") COMMA_SOURCE_FILE_AT_LINE (303)) ;
        }
        } break ;
      case GALGAS_sourceFileKind::kEnum_grammarSourceFile: {
        const enumGalgasBool test_19 = GALGAS_bool (kIsEqual, var_extension.objectCompare (GALGAS_string ("gGrammar"))).boolEnum () ;
        if (kBoolTrue == test_19) {
          const enumGalgasBool test_20 = GALGAS_bool (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.reader_value ()).boolEnum () ;
          if (kBoolTrue == test_20) {
            inCompiler->printMessage (GALGAS_string ("*** Parse '").operator_concat (var_fullFilePath.mAttribute_string.reader_lastPathComponent (SOURCE_FILE_AT_LINE (308)) COMMA_SOURCE_FILE_AT_LINE (308)).operator_concat (GALGAS_string ("'\n") COMMA_SOURCE_FILE_AT_LINE (308)) COMMA_SOURCE_FILE_AT_LINE (308)) ;
          }
          GALGAS_grammarComponentAST var_grammarComponentRoot ;
          cGrammar_grammarLL_31_grammar::_performSourceFileParsing_ (inCompiler, var_fullFilePath, var_grammarComponentRoot COMMA_SOURCE_FILE_AT_LINE (311)) ;
          {
          var_parsedComponentStruct.mAttribute_mParsedGrammarComponentMap.modifier_insertKey (var_componentName, var_fullFilePath, var_grammarComponentRoot, inCompiler COMMA_SOURCE_FILE_AT_LINE (312)) ;
          }
        }else if (kBoolFalse == test_19) {
          GALGAS_location location_21 (enumerator_9330.current_mFilePath (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_21, GALGAS_string ("extension of a grammar component should be '.gGrammar'.") COMMA_SOURCE_FILE_AT_LINE (314)) ;
        }
        } break ;
      case GALGAS_sourceFileKind::kEnum_programSourceFile: {
        const enumGalgasBool test_22 = GALGAS_bool (kIsEqual, var_extension.objectCompare (GALGAS_string ("gProgram"))).boolEnum () ;
        if (kBoolTrue == test_22) {
          const enumGalgasBool test_23 = GALGAS_bool (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.reader_value ()).boolEnum () ;
          if (kBoolTrue == test_23) {
            inCompiler->printMessage (GALGAS_string ("*** Parse '").operator_concat (var_fullFilePath.mAttribute_string.reader_lastPathComponent (SOURCE_FILE_AT_LINE (319)) COMMA_SOURCE_FILE_AT_LINE (319)).operator_concat (GALGAS_string ("'\n") COMMA_SOURCE_FILE_AT_LINE (319)) COMMA_SOURCE_FILE_AT_LINE (319)) ;
          }
          GALGAS_programComponentAST var_programComponentAST ;
          cGrammar_programSLRgrammar::_performSourceFileParsing_ (inCompiler, var_fullFilePath, var_programComponentAST COMMA_SOURCE_FILE_AT_LINE (322)) ;
          {
          var_parsedComponentStruct.mAttribute_mParsedProgramComponentMap.modifier_insertKey (var_componentName, var_fullFilePath, var_programComponentAST, inCompiler COMMA_SOURCE_FILE_AT_LINE (323)) ;
          }
        }else if (kBoolFalse == test_22) {
          GALGAS_location location_24 (enumerator_9330.current_mFilePath (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_24, GALGAS_string ("extension of a program component should be '.gProgram'.") COMMA_SOURCE_FILE_AT_LINE (325)) ;
        }
        } break ;
      }
    }
    enumerator_9330.gotoNextObject () ;
  }
  GALGAS_stringset var_handledExtensionSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE_AT_LINE (330)) ;
  const enumGalgasBool test_25 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (331)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_25) {
    cEnumerator_parsedLexiqueComponentMap enumerator_14338 (var_parsedComponentStruct.mAttribute_mParsedLexiqueComponentMap, kEnumeration_up) ;
    while (enumerator_14338.hasCurrentObject ()) {
      const enumGalgasBool test_26 = GALGAS_bool (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.reader_value ()).boolEnum () ;
      if (kBoolTrue == test_26) {
        inCompiler->printMessage (GALGAS_string ("*** Compiling '").operator_concat (enumerator_14338.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (335)) COMMA_SOURCE_FILE_AT_LINE (335)).operator_concat (GALGAS_string (".gLexique'\n") COMMA_SOURCE_FILE_AT_LINE (335)) COMMA_SOURCE_FILE_AT_LINE (335)) ;
      }
      {
      routine_compileLexiqueComponentFromAST (enumerator_14338.current_lkey (HERE).mAttribute_string, var_outputDirectory, enumerator_14338.current_mLexiqueComponentAST (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (337)) ;
      }
      enumerator_14338.gotoNextObject () ;
    }
    cEnumerator_parsedGuiComponentMap enumerator_14681 (var_parsedComponentStruct.mAttribute_mParsedGuiComponentMap, kEnumeration_up) ;
    while (enumerator_14681.hasCurrentObject ()) {
      const enumGalgasBool test_27 = GALGAS_bool (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.reader_value ()).boolEnum () ;
      if (kBoolTrue == test_27) {
        inCompiler->printMessage (GALGAS_string ("*** Compiling '").operator_concat (enumerator_14681.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (346)) COMMA_SOURCE_FILE_AT_LINE (346)).operator_concat (GALGAS_string (".gGui'\n") COMMA_SOURCE_FILE_AT_LINE (346)) COMMA_SOURCE_FILE_AT_LINE (346)) ;
      }
      {
      routine_compileGuiComponentFromAST (enumerator_14681.current_mSourceFullFilePath (HERE), var_outputDirectory, enumerator_14681.current_mGuiComponentAST (HERE), var_parsedComponentStruct, inCompiler COMMA_SOURCE_FILE_AT_LINE (348)) ;
      }
      enumerator_14681.gotoNextObject () ;
    }
    cEnumerator_parsedOptionComponentMap enumerator_15057 (var_parsedComponentStruct.mAttribute_mParsedOptionComponentMap, kEnumeration_up) ;
    while (enumerator_15057.hasCurrentObject ()) {
      const enumGalgasBool test_28 = GALGAS_bool (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.reader_value ()).boolEnum () ;
      if (kBoolTrue == test_28) {
        inCompiler->printMessage (GALGAS_string ("*** Compiling '").operator_concat (enumerator_15057.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (358)) COMMA_SOURCE_FILE_AT_LINE (358)).operator_concat (GALGAS_string (".gOption'\n") COMMA_SOURCE_FILE_AT_LINE (358)) COMMA_SOURCE_FILE_AT_LINE (358)) ;
      }
      {
      routine_compileOptionComponentAST (var_outputDirectory, enumerator_15057.current_lkey (HERE), enumerator_15057.current_mBoolOptionMap (HERE), enumerator_15057.current_mUIntOptionMap (HERE), enumerator_15057.current_mStringOptionMap (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (360)) ;
      }
      enumerator_15057.gotoNextObject () ;
    }
    cEnumerator_parsedSemanticsComponentMap enumerator_15441 (var_parsedComponentStruct.mAttribute_mParsedSemanticsComponentMap, kEnumeration_up) ;
    while (enumerator_15441.hasCurrentObject ()) {
      const enumGalgasBool test_29 = GALGAS_bool (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.reader_value ()).boolEnum () ;
      if (kBoolTrue == test_29) {
        inCompiler->printMessage (GALGAS_string ("*** Compiling '").operator_concat (enumerator_15441.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (371)) COMMA_SOURCE_FILE_AT_LINE (371)).operator_concat (GALGAS_string (".gSemantics'\n") COMMA_SOURCE_FILE_AT_LINE (371)) COMMA_SOURCE_FILE_AT_LINE (371)) ;
      }
      {
      routine_compileSemanticsComponentAST (enumerator_15441.current_mSourceFullFilePath (HERE), var_outputDirectory, enumerator_15441.current_mSemanticComponentRoot (HERE), var_parsedComponentStruct, inCompiler COMMA_SOURCE_FILE_AT_LINE (373)) ;
      }
      enumerator_15441.gotoNextObject () ;
    }
    cEnumerator_parsedSyntaxComponentMap enumerator_15831 (var_parsedComponentStruct.mAttribute_mParsedSyntaxComponentMap, kEnumeration_up) ;
    while (enumerator_15831.hasCurrentObject ()) {
      const enumGalgasBool test_30 = GALGAS_bool (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.reader_value ()).boolEnum () ;
      if (kBoolTrue == test_30) {
        inCompiler->printMessage (GALGAS_string ("*** Compiling '").operator_concat (enumerator_15831.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (383)) COMMA_SOURCE_FILE_AT_LINE (383)).operator_concat (GALGAS_string (".gSyntax'\n") COMMA_SOURCE_FILE_AT_LINE (383)) COMMA_SOURCE_FILE_AT_LINE (383)) ;
      }
      {
      routine_compileSyntaxComponentFromAST (enumerator_15831.current_mSourceFullFilePath (HERE), var_outputDirectory, enumerator_15831.current_mSyntaxComponentRoot (HERE), var_parsedComponentStruct, inCompiler COMMA_SOURCE_FILE_AT_LINE (385)) ;
      }
      enumerator_15831.gotoNextObject () ;
    }
    cEnumerator_parsedGrammarComponentMap enumerator_16219 (var_parsedComponentStruct.mAttribute_mParsedGrammarComponentMap, kEnumeration_up) ;
    while (enumerator_16219.hasCurrentObject ()) {
      const enumGalgasBool test_31 = GALGAS_bool (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.reader_value ()).boolEnum () ;
      if (kBoolTrue == test_31) {
        inCompiler->printMessage (GALGAS_string ("*** Compiling '").operator_concat (enumerator_16219.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (395)) COMMA_SOURCE_FILE_AT_LINE (395)).operator_concat (GALGAS_string (".gGrammar'\n") COMMA_SOURCE_FILE_AT_LINE (395)) COMMA_SOURCE_FILE_AT_LINE (395)) ;
      }
      {
      routine_compileGrammarComponentFromAST (enumerator_16219.current_mSourceFullFilePath (HERE), var_outputDirectory, enumerator_16219.current_mGrammarComponentRoot (HERE), var_parsedComponentStruct, inCompiler COMMA_SOURCE_FILE_AT_LINE (397)) ;
      }
      enumerator_16219.gotoNextObject () ;
    }
    cEnumerator_parsedProgramComponentMap enumerator_16610 (var_parsedComponentStruct.mAttribute_mParsedProgramComponentMap, kEnumeration_up) ;
    while (enumerator_16610.hasCurrentObject ()) {
      cEnumerator_programRuleList enumerator_16663 (enumerator_16610.current_mProgramComponentAST (HERE).mAttribute_mProgramRules, kEnumeration_up) ;
      while (enumerator_16663.hasCurrentObject ()) {
        var_handledExtensionSet.addAssign_operation (enumerator_16663.current_mSourceFileExtension (HERE).mAttribute_string COMMA_SOURCE_FILE_AT_LINE (407)) ;
        enumerator_16663.gotoNextObject () ;
      }
      const enumGalgasBool test_32 = GALGAS_bool (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.reader_value ()).boolEnum () ;
      if (kBoolTrue == test_32) {
        inCompiler->printMessage (GALGAS_string ("*** Compiling '").operator_concat (enumerator_16610.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (410)) COMMA_SOURCE_FILE_AT_LINE (410)).operator_concat (GALGAS_string (".gProgram'\n") COMMA_SOURCE_FILE_AT_LINE (410)) COMMA_SOURCE_FILE_AT_LINE (410)) ;
      }
      {
      routine_compileProgramComponentFromAST (enumerator_16610.current_mSourceFullFilePath (HERE), var_outputDirectory, enumerator_16610.current_mProgramComponentAST (HERE), var_parsedComponentStruct, inCompiler COMMA_SOURCE_FILE_AT_LINE (412)) ;
      }
      enumerator_16610.gotoNextObject () ;
    }
  }
  const enumGalgasBool test_33 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (421)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_33) {
    const enumGalgasBool test_34 = GALGAS_bool (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.reader_value ()).boolEnum () ;
    if (kBoolTrue == test_34) {
      inCompiler->printMessage (GALGAS_string ("*** Perform global checkings\n") COMMA_SOURCE_FILE_AT_LINE (423)) ;
    }
    {
    routine_performProjectGlobalCheckings (var_parsedComponentStruct, constinArgument_inProjectSourceFile.mAttribute_string, var_projectComponentAST.reader_mEndOfSourceFile (SOURCE_FILE_AT_LINE (428)), inCompiler COMMA_SOURCE_FILE_AT_LINE (425)) ;
    }
  }
  const enumGalgasBool test_35 = GALGAS_bool (kIsEqual, GALGAS_uint ((uint32_t) 0U).objectCompare (GALGAS_uint::constructor_errorCount (SOURCE_FILE_AT_LINE (432)))).boolEnum () ;
  if (kBoolTrue == test_35) {
    {
    routine_updateTargets (constinArgument_inProjectSourceFile, var_projectComponentAST.mAttribute_mMajorVersion.mAttribute_uint.reader_string (SOURCE_FILE_AT_LINE (435)).operator_concat (GALGAS_string (".") COMMA_SOURCE_FILE_AT_LINE (435)).operator_concat (var_projectComponentAST.mAttribute_mMinorVersion.mAttribute_uint.reader_string (SOURCE_FILE_AT_LINE (435)) COMMA_SOURCE_FILE_AT_LINE (435)).operator_concat (GALGAS_string (".") COMMA_SOURCE_FILE_AT_LINE (435)).operator_concat (var_projectComponentAST.mAttribute_mRevisionVersion.mAttribute_uint.reader_string (SOURCE_FILE_AT_LINE (435)) COMMA_SOURCE_FILE_AT_LINE (435)), var_projectComponentAST.reader_mProjectName (SOURCE_FILE_AT_LINE (436)), var_targetName, var_projectQualifiedFeatureMap, var_projectComponentAST.reader_mGenerationFeatureList (SOURCE_FILE_AT_LINE (439)), var_projectComponentAST.reader_mProjectSourceList (SOURCE_FILE_AT_LINE (440)), var_handledExtensionSet, inCompiler COMMA_SOURCE_FILE_AT_LINE (433)) ;
    }
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                           Routine 'programRule_8'                           *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_programRule_5F__38_ (const GALGAS_lstring constinArgument_inSourceFile,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_templateInstructionListAST joker_18547_0 ; // Joker input parameter
  cGrammar_templateGrammar::_performSourceFileParsing_ (inCompiler, constinArgument_inSourceFile, joker_18547_0 COMMA_SOURCE_FILE_AT_LINE (458)) ;
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                               Routine 'after'                               *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_after (C_Compiler * /* inCompiler */
                    COMMA_UNUSED_LOCATION_ARGS) {
}


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


