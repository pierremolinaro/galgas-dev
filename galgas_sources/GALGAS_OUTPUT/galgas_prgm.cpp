//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'galgas_prgm.cpp'                           *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 27th, 2010, at 16h9'55"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include "utilities/F_DisplayException.h"
#include "utilities/MF_MemoryControl.h"
#include "collections/TC_UniqueArray.h"
#include "command_line_interface/F_Analyze_CLI_Options.h"
#include "command_line_interface/mainForLIBPM.h"
#include "utilities/MF_MemoryControl.h"
#include "command_line_interface/C_StringCommandLineOption.h"
#include "utilities/cpp-allocation.h"
#include "utilities/basic-allocation.h"

#ifdef TARGET_API_MAC_CARBON
  #include <SIOUX.H>
#endif

#ifdef COMPILE_FOR_WIN32
  #ifdef __MWERKS__
    #include <WINSIOUX.H>
  #endif
#endif

#include <typeinfo>

//---------------------------------------------------------------------------*

#include "XcodeProjectGeneration.h"
#include "galgas_LL1_grammar.h"
#include "galgas_prgm.h"
#include "grammarCompilation.h"
#include "grammarMetamodel.h"
#include "guiCompilation.h"
#include "guiTypesForAST.h"
#include "lexiqueCompilation.h"
#include "lexiqueSemantics.h"
#include "optionCompilation.h"
#include "optionSemantics.h"
#include "optionTypesForAST.h"
#include "predefinedLexicalActions.h"
#include "predefinedTypes.h"
#include "programComponentCompilation.h"
#include "projectCreation.h"
#include "projectGlobalCheckings.h"
#include "projectLL1grammar.h"
#include "semantics_semantics.h"
#include "syntaxCompilation.h"
#include "syntaxMetamodel.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "galgas_prgm.gProgram", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                     P R O G R A M    P R O L O G U E                      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
galgas_prgm_prologue (C_Compiler & inLexique,
                     const TC_UniqueArray <C_String> & /* inSourceFilesArray */) {
  const GGS_string var_cas_creationProjectName = gOption_galgas_5F_cli_5F_options_create_5F_project.reader_value () ;
  ::routine_projectCreation (inLexique,  var_cas_creationProjectName COMMA_SOURCE_FILE_AT_LINE (60)) ;
  const GGS_bool cond_3797 = gOption_galgas_5F_cli_5F_options_printPredefinedLexicalActions.reader_value () ;
  if (cond_3797.isBuiltAndTrue ()) {
    ::routine_printPredefinedLexicalActions (inLexique COMMA_SOURCE_FILE_AT_LINE (62)) ;
  }
  ::routine_generatePredefinedTypeFiles (inLexique,  gOption_galgas_5F_cli_5F_options_generatePredefinedTypes.reader_value () COMMA_SOURCE_FILE_AT_LINE (64)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     P R O G R A M    E P I L O G U E                      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
galgas_prgm_epilogue (C_Compiler & /* inLexique */,
                     const TC_UniqueArray <C_String> & /* inSourceFilesArray */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      M A I N    F O R    L I B P M                        *
//                                                                           *
//---------------------------------------------------------------------------*

int mainForLIBPM  (const int argc, const char * argv []) {
  bool verboseOptionOn = true ;
  PMSInt16 returnCode = 0 ; // No error
  {
  //--- Input/output parameters
    const char * extensions [] = {"gOption", "gLexique", "gSemantics", "gSyntax", "gGrammar", "gGui", "gProgram", "gProject", NULL} ;
    const char * helpMessages [] = {"a GALGAS option source file", "a GALGAS lexique source file", "a GALGAS semantics source file", "a GALGAS syntax source file", "a GALGAS grammar source file", "a GALGAS GUI source file", "a GALGAS program source file", "a GALGAS project source file", NULL} ;
    TC_UniqueArray <C_String> sourceFilesArray ;
  //--- Analyze Command Line Options
    F_Analyze_CLI_Options (argc, argv,
                                 #ifndef DO_NOT_GENERATE_CHECKINGS
        "version GALGAS_BETA_VERSION" " [debug]",
      #else
        "version GALGAS_BETA_VERSION",
      #endif
                           sourceFilesArray,
                           extensions,
                           helpMessages) ;
  //--- Build galgas io object
    C_galgas_io * galgasIOptr = NULL ;
    macroMyNew (galgasIOptr, C_galgas_io (HERE)) ;
  //--- Common lexique object
    C_Compiler * commonLexique = NULL ;
    macroMyNew (commonLexique, C_Compiler (NULL, "", "", galgasIOptr COMMA_HERE)) ;
  //--- Ask Save On Close ? (Carbon and Windows SIOUX Only)
    #ifdef SIOUX_IS_IMPLEMENTED
      SIOUXSettings.asktosaveonclose = gOption_generic_5F_cli_5F_options_options_asktosaveonclose.mValue ;
    #endif
  //--- Enable 64 bit alloc debug ? Only if compiled in 64 bit and in debug mode
    #ifndef DO_NOT_GENERATE_CHECKINGS
      #ifdef __LP64__
        if (gOption_generic_5F_cli_5F_options_enable_5F_allocation_5F_debugging.mValue) {
          enableAllocDebugFor64BitTool () ;
        }
      #endif
    #endif
    try{
      verboseOptionOn = gOption_galgas_5F_cli_5F_options_verbose_5F_output.mValue ;
      galgas_prgm_prologue (* commonLexique, sourceFilesArray) ;
      for (PMSInt32 i=0 ; i<sourceFilesArray.count () ; i++) {
        const C_String fileExtension = sourceFilesArray (i COMMA_HERE).pathExtension () ;
        PMSInt16 r = 0 ;
          if (fileExtension.compare ("gOption") == 0) {
          C_Compiler & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (75)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (76)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (77)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (78)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (79)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (80))) ;
            ::routine_compileOptionComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (82)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (82)) ;
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
          }else if (fileExtension.compare ("gLexique") == 0) {
          C_Compiler & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (91)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (92)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (93)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (94)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (95)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (96))) ;
            ::routine_compileLexiqueComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (98)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (98)) ;
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
          }else if (fileExtension.compare ("gSemantics") == 0) {
          C_Compiler & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (107)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (108)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (109)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (110)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (111)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (112))) ;
            ::routine_compileSemanticsComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (114)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (114)) ;
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
          }else if (fileExtension.compare ("gSyntax") == 0) {
          C_Compiler & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (123)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (124)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (125)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (126)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (127)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (128))) ;
            ::routine_compileSyntaxComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (130)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (130)) ;
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
          }else if (fileExtension.compare ("gGrammar") == 0) {
          C_Compiler & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (139)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (140)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (141)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (142)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (143)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (144))) ;
            ::routine_compileGrammarComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (148)),  var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent (),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (146)) ;
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
          }else if (fileExtension.compare ("gGui") == 0) {
          C_Compiler & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (159)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (160)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (161)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (162)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (163)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (164))) ;
            ::routine_compileGuiComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (166)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (166)) ;
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
          }else if (fileExtension.compare ("gProgram") == 0) {
          C_Compiler & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (175)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (176)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (177)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (178)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (179)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (180))) ;
            ::routine_compileProgramComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (182)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (182)) ;
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
          }else if (fileExtension.compare ("gProject") == 0) {
          C_Compiler & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            GGS_string var_cas_outputDirectory = function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (194)) ;
            GGS_projectSourceList  var_cas_projectSourceList ;
            GGS_lstring  var_cas_projectName ;
            GGS_location  var_cas_endOfSourceFile ;
            const GGS_string _depExtension = GGS_string ("") ;
            const GGS_string _depPath = GGS_string ("") ;
            if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
              C_Grammar_projectLL_31_grammar::_performSourceFileParsing_ (inLexique,
                                            _depExtension.string (),
                                            _depPath.string (),
                                            NULL,
                                            var_cas_inSourceFile,
                                            var_cas_projectSourceList,
                                            var_cas_projectName,
                                            var_cas_endOfSourceFile
                                            COMMA_SOURCE_FILE_AT_LINE (199)) ;
            }
            GGS_sourceFileMap  var_cas_sourceFileMap = GGS_sourceFileMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (201)) ;
            GGS_targetFileListMap var_cas_targetFileListMap = GGS_targetFileListMap::constructor_emptyMap () ;
            {
              GGS_projectSourceList::cEnumerator enumerator_8979 (var_cas_projectSourceList, true) ;
              const GGS_projectSourceList::cElement * operand_8979 = NULL ;
              while (((operand_8979 = enumerator_8979.nextObject ()))) {
                macroValidPointer (operand_8979) ;
                GGS_string var_cas_baseName = operand_8979->mFilePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (204)).reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
                var_cas_sourceFileMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_baseName, operand_8979->mFilePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (205)) COMMA_SOURCE_FILE_AT_LINE (205)), operand_8979->mFilePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (205)), operand_8979->mSourceKind COMMA_SOURCE_FILE_AT_LINE (205)) ;
                {
                  GGS_lstringlist::cEnumerator enumerator_9218 (operand_8979->mTargetList, true) ;
                  const GGS_lstringlist::cElement * operand_9218 = NULL ;
                  while (((operand_9218 = enumerator_9218.nextObject ()))) {
                    macroValidPointer (operand_9218) ;
                    const GGS_bool cond_9447 = (((operand_9218->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (207))).operator_isNotEqual (GGS_string ("makefile"))).operator_and ((operand_9218->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (207))).operator_isNotEqual (GGS_string ("xcode_tool")))).operator_and ((operand_9218->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (207))).operator_isNotEqual (GGS_string ("xcode_app"))) ;
                    if (cond_9447.isBuiltAndTrue ()) {
                      operand_9218->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the target name should be \"makefile\", \"xcode_tool\" or \"xcode_app\"") COMMA_SOURCE_FILE_AT_LINE (209)) ;
                    }else if (cond_9447.isBuiltAndFalse ()) {
                      var_cas_targetFileListMap.addAssign_operation (operand_9218->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (210)), var_cas_baseName) ;
                    }
                  }
                }
              }
            }
            GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (216)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (217)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (218)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (219)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (220)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (221))) ;
            {
              GGS_projectSourceList::cEnumerator enumerator_9953 (var_cas_projectSourceList, true) ;
              const GGS_projectSourceList::cElement * operand_9953 = NULL ;
              while (((operand_9953 = enumerator_9953.nextObject ()))) {
                macroValidPointer (operand_9953) ;
                GGS_string var_cas_extension = operand_9953->mFilePath.ggs_string ().reader_pathExtension () ;
                GGS_lstring  var_cas_fullFilePath = GGS_lstring ::constructor_new (inLexique, ((var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent ()).operator_concat (GGS_string ("/"))).operator_concat (operand_9953->mFilePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (227))), operand_9953->mFilePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (228)) COMMA_SOURCE_FILE_AT_LINE (226)) ;
                const GGS_bool cond_10283 = (operand_9953->mSourceKind).operator_isNotEqual (GGS_sourceFileKind::constructor_externSourceFile (inLexique COMMA_SOURCE_FILE_AT_LINE (230))) ;
                if (cond_10283.isBuiltAndTrue ()) {
                  inLexique.printMessage (((GGS_string ("*** Compiling '")).operator_concat (operand_9953->mFilePath)).operator_concat (GGS_string ("'\n")) COMMA_SOURCE_FILE_AT_LINE (231)) ;
                }
                switch (operand_9953->mSourceKind.enumValue ()) {
                case GGS_sourceFileKind::enum_externSourceFile:
                  {
                  }
                  break ;
                case GGS_sourceFileKind::enum_guiSourceFile:
                  {
                  const GGS_bool cond_10495 = (var_cas_extension).operator_isEqual (GGS_string ("gGui")) ;
                  if (cond_10495.isBuiltAndTrue ()) {
                    ::routine_compileGuiComponent (inLexique,  var_cas_fullFilePath,  var_cas_outputDirectory,  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (237)) ;
                  }else if (cond_10495.isBuiltAndFalse ()) {
                    operand_9953->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a gui component should be '.gGui'.") COMMA_SOURCE_FILE_AT_LINE (240)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_lexiqueSourceFile:
                  {
                  const GGS_bool cond_10754 = (var_cas_extension).operator_isEqual (GGS_string ("gLexique")) ;
                  if (cond_10754.isBuiltAndTrue ()) {
                    ::routine_compileLexiqueComponent (inLexique,  var_cas_fullFilePath,  var_cas_outputDirectory,  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (243)) ;
                  }else if (cond_10754.isBuiltAndFalse ()) {
                    operand_9953->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a lexique component should be '.gLexique'.") COMMA_SOURCE_FILE_AT_LINE (246)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_optionSourceFile:
                  {
                  const GGS_bool cond_11018 = (var_cas_extension).operator_isEqual (GGS_string ("gOption")) ;
                  if (cond_11018.isBuiltAndTrue ()) {
                    ::routine_compileOptionComponent (inLexique,  var_cas_fullFilePath,  var_cas_outputDirectory,  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (249)) ;
                  }else if (cond_11018.isBuiltAndFalse ()) {
                    operand_9953->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of an option component should be '.gOption'.") COMMA_SOURCE_FILE_AT_LINE (252)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_semanticsSourceFile:
                  {
                  const GGS_bool cond_11290 = (var_cas_extension).operator_isEqual (GGS_string ("gSemantics")) ;
                  if (cond_11290.isBuiltAndTrue ()) {
                    ::routine_compileSemanticsComponent (inLexique,  var_cas_fullFilePath,  var_cas_outputDirectory,  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (255)) ;
                  }else if (cond_11290.isBuiltAndFalse ()) {
                    operand_9953->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a semantics component should be '.gSemantics'.") COMMA_SOURCE_FILE_AT_LINE (258)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_syntaxSourceFile:
                  {
                  const GGS_bool cond_11571 = (var_cas_extension).operator_isEqual (GGS_string ("gSyntax")) ;
                  if (cond_11571.isBuiltAndTrue ()) {
                    ::routine_compileSyntaxComponent (inLexique,  var_cas_fullFilePath,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (261)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (261)) ;
                  }else if (cond_11571.isBuiltAndFalse ()) {
                    operand_9953->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a syntax component should be '.gSyntax'.") COMMA_SOURCE_FILE_AT_LINE (264)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_grammarSourceFile:
                  {
                  const GGS_bool cond_11949 = (var_cas_extension).operator_isEqual (GGS_string ("gGrammar")) ;
                  if (cond_11949.isBuiltAndTrue ()) {
                    ::routine_compileGrammarComponent (inLexique,  var_cas_fullFilePath,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (269)),  var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent (),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (267)) ;
                  }else if (cond_11949.isBuiltAndFalse ()) {
                    operand_9953->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a grammar component should be '.gGrammar'.") COMMA_SOURCE_FILE_AT_LINE (275)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_programSourceFile:
                  {
                  const GGS_bool cond_12215 = (var_cas_extension).operator_isEqual (GGS_string ("gProgram")) ;
                  if (cond_12215.isBuiltAndTrue ()) {
                    ::routine_compileProgramComponent (inLexique,  var_cas_fullFilePath,  var_cas_outputDirectory,  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (278)) ;
                  }else if (cond_12215.isBuiltAndFalse ()) {
                    operand_9953->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a program component should be '.gProgram'.") COMMA_SOURCE_FILE_AT_LINE (281)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::kNotBuilt:
                  break ;
                }
              }
            }
            const GGS_bool cond_12540 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (285))).operator_isEqual (GGS_uint (0U)) ;
            if (cond_12540.isBuiltAndTrue ()) {
              inLexique.printMessage (GGS_string ("*** Perform global checkings\n") COMMA_SOURCE_FILE_AT_LINE (286)) ;
              ::routine_performProjectGlobalCheckings (inLexique,  var_cas_parsedComponentStruct,  var_cas_endOfSourceFile COMMA_SOURCE_FILE_AT_LINE (287)) ;
            }
            const GGS_bool cond_14209 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (290))).operator_isEqual (GGS_uint (0U)) ;
            if (cond_14209.isBuiltAndTrue ()) {
              GGS_stringlist  var_cas_makefileFiles = var_cas_targetFileListMap.reader_listForKey (inLexique, GGS_string ("makefile") COMMA_SOURCE_FILE_AT_LINE (291)) ;
              const GGS_bool cond_14198 = (var_cas_makefileFiles.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
              if (cond_14198.isBuiltAndTrue ()) {
                GGS_string var_cas_externSourceFileList = GGS_string ("") ;
                GGS_string var_cas_galgasSourceList = GGS_string ("") ;
                GGS_stringset  var_cas_pathSet = GGS_stringset ::constructor_emptySet () ;
                var_cas_pathSet.addAssign_operation (GGS_string ("SOURCES_DIR += ../hand_coded_sources\n")) ;
                {
                  GGS_stringlist::cEnumerator enumerator_12940 (var_cas_makefileFiles, true) ;
                  const GGS_stringlist::cElement * operand_12940 = NULL ;
                  while (((operand_12940 = enumerator_12940.nextObject ()))) {
                    macroValidPointer (operand_12940) ;
                    GGS_string var_cas_fullPath ;
                    GGS_sourceFileKind var_cas_sourceKind ;
                    if (var_cas_sourceFileMap.isBuilt ()) {
                      var_cas_sourceFileMap (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_12940->mValue, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (300)), var_cas_fullPath, var_cas_sourceKind COMMA_SOURCE_FILE_AT_LINE (300)) ;
                    }
                    GGS_string var_cas_filePath = var_cas_fullPath.reader_stringByDeletingLastPathComponent () ;
                    const GGS_bool cond_13593 = (var_cas_sourceKind).operator_isEqual (GGS_sourceFileKind::constructor_externSourceFile (inLexique COMMA_SOURCE_FILE_AT_LINE (302))) ;
                    if (cond_13593.isBuiltAndTrue ()) {
                      const GGS_bool cond_13369 = (var_cas_filePath.reader_firstCharacterOrNul ()).operator_isEqual (GGS_char (TO_UNICODE ('/'))) ;
                      if (cond_13369.isBuiltAndTrue ()) {
                        var_cas_pathSet.addAssign_operation (((GGS_string ("SOURCES_DIR += ")).operator_concat (var_cas_filePath)).operator_concat (GGS_string ("\n"))) ;
                      }else if (cond_13369.isBuiltAndFalse ()) {
                        const GGS_bool cond_13487 = (var_cas_filePath).operator_isNotEqual (GGS_string ("")) ;
                        if (cond_13487.isBuiltAndTrue ()) {
                          var_cas_pathSet.addAssign_operation (((GGS_string ("SOURCES_DIR += ../hand_coded_sources/")).operator_concat (var_cas_filePath)).operator_concat (GGS_string ("\n"))) ;
                        }
                      }
                      var_cas_externSourceFileList.appendCString ("SOURCES += ") ;
                      var_cas_externSourceFileList.dotAssign_operation (var_cas_fullPath.reader_lastPathComponent ()) ;
                      var_cas_externSourceFileList.appendCString ("\n") ;
                    }else if (cond_13593.isBuiltAndFalse ()) {
                      var_cas_galgasSourceList.appendCString ("SOURCES += ") ;
                      var_cas_galgasSourceList.dotAssign_operation (var_cas_fullPath.reader_lastPathComponent ().reader_stringByDeletingPathExtension ()) ;
                      var_cas_galgasSourceList.appendCString (".cpp\n") ;
                    }
                  }
                }
                GGS_string var_cas_pathesString = GGS_string ("") ;
                {
                  GGS_stringset::cEnumerator enumerator_13807 (var_cas_pathSet, true) ;
                  while (enumerator_13807.hasCurrentObject ()) {
                    var_cas_pathesString.dotAssign_operation (enumerator_13807._key (HERE)) ;
                    enumerator_13807.next () ;
                  }
                }
                GGS_string var_cas_newFileListContents = template_filewrapper_fileListTemplateFileWrapper_fileListTemplate (inLexique, var_cas_pathesString, var_cas_galgasSourceList, var_cas_externSourceFileList) ;
                GGS_string var_cas_fileListPath = (var_cas_outputDirectory).operator_concat (GGS_string ("/file_list.mke")) ;
                GGS_bool automatic_var_14188_0 ;
                if (var_cas_newFileListContents.isBuilt ()) {
                  var_cas_newFileListContents (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_fileListPath, automatic_var_14188_0 COMMA_SOURCE_FILE_AT_LINE (323)) ;
                }
              }
            }
            GGS_stringlist  var_cas_xcode_tool_files = var_cas_targetFileListMap.reader_listForKey (inLexique, GGS_string ("xcode_tool") COMMA_SOURCE_FILE_AT_LINE (327)) ;
            GGS_stringlist  var_cas_xcode_app_files = var_cas_targetFileListMap.reader_listForKey (inLexique, GGS_string ("xcode_app") COMMA_SOURCE_FILE_AT_LINE (328)) ;
            const GGS_bool cond_18873 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (329))).operator_isEqual (GGS_uint (0U)) ;
            if (cond_18873.isBuiltAndTrue ()) {
              GGS_string var_cas_XcodeProjectDir = (var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent ().reader_stringByDeletingLastPathComponent ()).operator_concat (GGS_string ("/project_xcode")) ;
              GGS_stringlist  var_cas_iconFiles = var_cas_XcodeProjectDir.reader_regularFilesWithExtensions (GGS_bool (false), GGS_stringlist ::constructor_listWithValue (GGS_string ("icns"))) ;
              GGS_stringlist  var_cas_xcodeProjects = var_cas_XcodeProjectDir.reader_directoriesWithExtensions (GGS_bool (false), GGS_stringlist ::constructor_listWithValue (GGS_string ("xcodeproj"))) ;
              const GGS_bool cond_15043 = (var_cas_xcodeProjects.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
              if (cond_15043.isBuiltAndTrue ()) {
                inLexique.printMessage (((GGS_string ("****** Cannot update Xcode project, no project found in '")).operator_concat (var_cas_XcodeProjectDir)).operator_concat (GGS_string ("' directory. ********\n")) COMMA_SOURCE_FILE_AT_LINE (336)) ;
              }else if (cond_15043.isBuiltAndFalse ()) {
                const GGS_bool cond_15218 = (var_cas_xcodeProjects.reader_length ()).operator_strictSup (GGS_uint (1U)) ;
                if (cond_15218.isBuiltAndTrue ()) {
                  inLexique.printMessage (((GGS_string ("****** Cannot update Xcode project, more than one project exist in '")).operator_concat (var_cas_XcodeProjectDir)).operator_concat (GGS_string ("' directory. ********\n")) COMMA_SOURCE_FILE_AT_LINE (338)) ;
                }else if (cond_15218.isBuiltAndFalse ()) {
                  const GGS_bool cond_18862 = (var_cas_xcodeProjects.reader_length ()).operator_isEqual (GGS_uint (1U)) ;
                  if (cond_18862.isBuiltAndTrue ()) {
                    GGS_string var_cas_name ;
                    if (var_cas_xcodeProjects.isBuilt ()) {
                      var_cas_xcodeProjects (HERE)->method_first (inLexique, var_cas_name COMMA_SOURCE_FILE_AT_LINE (340)) ;
                    }
                    const GGS_string var_cas_fullXcodePath = (((var_cas_XcodeProjectDir).operator_concat (GGS_string ("/"))).operator_concat (var_cas_name)).operator_concat (GGS_string ("/project.pbxproj")) ;
                    const GGS_string var_cas_intermediateFilePath = (var_cas_outputDirectory).operator_concat (GGS_string ("/file_list_for_xcode_project.txt")) ;
                    GGS_stringset  var_cas_externSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_guiSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_scannerSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_optionSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_semanticsSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_syntaxSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_grammarSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_programSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                    {
                      GGS_stringlist::cEnumerator enumerator_15996 (var_cas_xcode_tool_files, true) ;
                      const GGS_stringlist::cElement * operand_15996 = NULL ;
                      while (((operand_15996 = enumerator_15996.nextObject ()))) {
                        macroValidPointer (operand_15996) ;
                        GGS_string var_cas_fullPath ;
                        GGS_sourceFileKind var_cas_sourceKind ;
                        if (var_cas_sourceFileMap.isBuilt ()) {
                          var_cas_sourceFileMap (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_15996->mValue, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (356)), var_cas_fullPath, var_cas_sourceKind COMMA_SOURCE_FILE_AT_LINE (356)) ;
                        }
                        switch (var_cas_sourceKind.enumValue ()) {
                        case GGS_sourceFileKind::enum_externSourceFile:
                          {
                          var_cas_externSourceSet_tool.addAssign_operation (var_cas_fullPath) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_lexiqueSourceFile:
                          {
                          var_cas_scannerSourceSet_tool.addAssign_operation (operand_15996->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_guiSourceFile:
                          {
                          var_cas_guiSourceSet_tool.addAssign_operation (operand_15996->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_optionSourceFile:
                          {
                          var_cas_optionSourceSet_tool.addAssign_operation (operand_15996->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_syntaxSourceFile:
                          {
                          var_cas_syntaxSourceSet_tool.addAssign_operation (operand_15996->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_semanticsSourceFile:
                          {
                          var_cas_semanticsSourceSet_tool.addAssign_operation (operand_15996->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_grammarSourceFile:
                          {
                          var_cas_grammarSourceSet_tool.addAssign_operation (operand_15996->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_programSourceFile:
                          {
                          var_cas_programSourceSet_tool.addAssign_operation (operand_15996->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::kNotBuilt:
                          break ;
                        }
                      }
                    }
                    GGS_stringset  var_cas_externSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_guiSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_scannerSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_optionSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_semanticsSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_syntaxSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_grammarSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_programSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                    {
                      GGS_stringlist::cEnumerator enumerator_17268 (var_cas_xcode_app_files, true) ;
                      const GGS_stringlist::cElement * operand_17268 = NULL ;
                      while (((operand_17268 = enumerator_17268.nextObject ()))) {
                        macroValidPointer (operand_17268) ;
                        GGS_string var_cas_fullPath ;
                        GGS_sourceFileKind var_cas_sourceKind ;
                        if (var_cas_sourceFileMap.isBuilt ()) {
                          var_cas_sourceFileMap (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_17268->mValue, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (387)), var_cas_fullPath, var_cas_sourceKind COMMA_SOURCE_FILE_AT_LINE (387)) ;
                        }
                        switch (var_cas_sourceKind.enumValue ()) {
                        case GGS_sourceFileKind::enum_externSourceFile:
                          {
                          var_cas_externSourceSet_app.addAssign_operation (var_cas_fullPath) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_lexiqueSourceFile:
                          {
                          var_cas_scannerSourceSet_app.addAssign_operation (operand_17268->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_guiSourceFile:
                          {
                          var_cas_guiSourceSet_app.addAssign_operation (operand_17268->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_optionSourceFile:
                          {
                          var_cas_optionSourceSet_app.addAssign_operation (operand_17268->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_syntaxSourceFile:
                          {
                          var_cas_syntaxSourceSet_app.addAssign_operation (operand_17268->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_semanticsSourceFile:
                          {
                          var_cas_semanticsSourceSet_app.addAssign_operation (operand_17268->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_grammarSourceFile:
                          {
                          var_cas_grammarSourceSet_app.addAssign_operation (operand_17268->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_programSourceFile:
                          {
                          var_cas_programSourceSet_app.addAssign_operation (operand_17268->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::kNotBuilt:
                          break ;
                        }
                      }
                    }
                    ::routine_generateXcodeProject (inLexique,  var_cas_externSourceSet_tool,  var_cas_guiSourceSet_tool,  var_cas_scannerSourceSet_tool,  var_cas_optionSourceSet_tool,  var_cas_semanticsSourceSet_tool,  var_cas_syntaxSourceSet_tool,  var_cas_grammarSourceSet_tool,  var_cas_programSourceSet_tool,  var_cas_externSourceSet_app,  var_cas_guiSourceSet_app,  var_cas_scannerSourceSet_app,  var_cas_optionSourceSet_app,  var_cas_semanticsSourceSet_app,  var_cas_syntaxSourceSet_app,  var_cas_grammarSourceSet_app,  var_cas_programSourceSet_app,  var_cas_name.reader_stringByDeletingPathExtension (),  var_cas_fullXcodePath.reader_stringByDeletingLastPathComponent (),  var_cas_iconFiles,  var_cas_intermediateFilePath COMMA_SOURCE_FILE_AT_LINE (408)) ;
                  }
                }
              }
            }
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
        }else{
          printf ("*** Error: unhandled extension for file '%s' ***\n", sourceFilesArray (i COMMA_HERE).cString (HERE)) ;
          r = 1 ;
        }
        if (r != 0) {
          returnCode = r ;
        }
      }
    //--- Error or warnings ?
      if (commonLexique->totalErrorCount () > 0) {
        returnCode = 1 ; // Error code
      }else if (commonLexique->totalWarningCount () > 0) {
        if (gOption_galgas_5F_cli_5F_options_treat_5F_warnings_5F_as_5F_error.mValue) {
          returnCode = 1 ; // Error code
          if (verboseOptionOn) {
            printf ("** Note: warnings are treated as errors. **\n") ;
          }
        }
      }
    //--- Epilogue
      galgas_prgm_epilogue (* commonLexique, sourceFilesArray) ;
    }catch (const M_STD_NAMESPACE exception & e) {
      F_default_display_exception (e) ;
      returnCode = 1 ; // Error code
    }catch (...) {
      throw ;
    }
    macroReleaseObject (galgasIOptr) ;
    macroReleaseObject (commonLexique) ;
  }
  return returnCode ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


