//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'grammarSemantics.h'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    november 13th, 2009, at 22h45'45"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef grammarSemantics_DEFINED
#define grammarSemantics_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_data.h"
#include "galgas/GGS_type.h"
#include "galgas/GGS_function.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_listmap.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

// Include imported semantics
#include "parameterArgumentMetamodel.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_signatureForGrammarAnalysis ;
class GGS_nonterminalSymbolLabelMapForGrammarAnalysis ;
class GGS_abstractSyntaxInstructionForGrammarAnalysis ;
class cPtr_abstractSyntaxInstructionForGrammarAnalysis ;
class GGS_syntaxInstructionListForGrammarAnalysis ;
class GGS_productionRuleListForGrammarAnalysis ;
class GGS_unusedNonTerminalSymbolMapForGrammarAnalysis ;
class GGS_nonTerminalSymbolMapForGrammarAnalysis ;
class GGS_terminalInstructionForGrammarAnalysis ;
class cPtr_terminalInstructionForGrammarAnalysis ;
class GGS_nonTerminalInstructionForGrammarAnalysis ;
class cPtr_nonTerminalInstructionForGrammarAnalysis ;
class GGS_branchListForGrammarAnalysis ;
class GGS_selectInstructionForGrammarAnalysis ;
class cPtr_selectInstructionForGrammarAnalysis ;
class GGS_repeatInstructionForGrammarAnalysis ;
class cPtr_repeatInstructionForGrammarAnalysis ;
class GGS_syntaxComponentListForGrammarAnalysis ;
class GGS_terminalSymbolsMapForGrammarAnalysis ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@signatureForGrammarAnalysis'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_signatureForGrammarAnalysis ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_signatureForGrammarAnalysis ;

//---------------------------------------------------------------------------*

class GGS_signatureForGrammarAnalysis : public AC_galgas_list {
  public : typedef elementOf_GGS_signatureForGrammarAnalysis cElement ;

//--- Constructor 'emptyList'
  public : static GGS_signatureForGrammarAnalysis constructor_emptyList (void) ;
  public : static GGS_signatureForGrammarAnalysis constructor_listWithValue (const GGS_formalArgumentPassingMode& argument_0,
                                const GGS_lstring & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_signatureForGrammarAnalysis & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_signatureForGrammarAnalysis
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_signatureForGrammarAnalysis
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_signatureForGrammarAnalysis * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_formalArgumentPassingMode& _out_0,
                              GGS_lstring & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_formalArgumentPassingMode& _out_0,
                             GGS_lstring & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_formalArgumentPassingMode& _out_0,
                                GGS_lstring & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_formalArgumentPassingMode& _out_0,
                                 GGS_lstring & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_signatureForGrammarAnalysis inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_formalArgumentPassingMode& argument_0,
                                const GGS_lstring & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_signatureForGrammarAnalysis operator_concat (const GGS_signatureForGrammarAnalysis & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_formalArgumentPassingMode& argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_formalArgumentPassingMode& argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_formalArgumentPassingMode& argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & inLexique
                      COMMA_LOCATION_ARGS,
                      const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_formalArgumentPassingMode
  reader_mFormalArgumentPassingModeForGrammarAnalysisAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mGalgasTypeNameForGrammarAnalysisAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMFormalArgumentPassingModeForGrammarAnalysisAtIndex (C_Compiler & inLexique,
                              const GGS_formalArgumentPassingMode & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMGalgasTypeNameForGrammarAnalysisAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_signatureForGrammarAnalysis & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_formalArgumentPassingMode  & _mFormalArgumentPassingModeForGrammarAnalysis (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mGalgasTypeNameForGrammarAnalysis (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Map '@nonterminalSymbolLabelMapForGrammarAnalysis'             *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_nonterminalSymbolLabelMapForGrammarAnalysis ;

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_nonterminalSymbolLabelMapForGrammarAnalysis ;

//---------------------------------------------------------------------------*

class GGS_nonterminalSymbolLabelMapForGrammarAnalysis : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_nonterminalSymbolLabelMapForGrammarAnalysis cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_nonterminalSymbolLabelMapForGrammarAnalysis & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_nonterminalSymbolLabelMapForGrammarAnalysis & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_nonterminalSymbolLabelMapForGrammarAnalysis * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_nonterminalSymbolLabelMapForGrammarAnalysis * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_nonterminalSymbolLabelMapForGrammarAnalysis constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kInsertMessage_insertKey [] ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_signatureForGrammarAnalysis &  inParameter0 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_searchKey [] ;

//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_signatureForGrammarAnalysis   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_signatureForGrammarAnalysis & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_signatureForGrammarAnalysis & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & inLexique
                                          COMMA_LOCATION_ARGS,
                                          const PMSInt32 inIndentation = 0) const ;
  public : static GGS_nonterminalSymbolLabelMapForGrammarAnalysis constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_nonterminalSymbolLabelMapForGrammarAnalysis & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_nonterminalSymbolLabelMapForGrammarAnalysis reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_nonterminalSymbolLabelMapForGrammarAnalysis & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_nonterminalSymbolLabelMapForGrammarAnalysis & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_signatureForGrammarAnalysis   & _mFormalParametersList (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//      GALGAS class 'GGS_abstractSyntaxInstructionForGrammarAnalysis'       *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_abstractSyntaxInstructionForGrammarAnalysis ;

//---------------------------------------------------------------------------*

class GGS_abstractSyntaxInstructionForGrammarAnalysis : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_abstractSyntaxInstructionForGrammarAnalysis (void) :
  AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_abstractSyntaxInstructionForGrammarAnalysis (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_abstractSyntaxInstructionForGrammarAnalysis (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_abstractSyntaxInstructionForGrammarAnalysis
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_abstractSyntaxInstructionForGrammarAnalysis * getPtr (void) const {
    return (cPtr_abstractSyntaxInstructionForGrammarAnalysis *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_abstractSyntaxInstructionForGrammarAnalysis * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_abstractSyntaxInstructionForGrammarAnalysis * operator () (LOCATION_ARGS) const {
      return (cPtr_abstractSyntaxInstructionForGrammarAnalysis *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__abstractSyntaxInstructionForGrammarAnalysis ;

//---------------------------------------------------------------------------*
//                                                                           *
//             list '@syntaxInstructionListForGrammarAnalysis'               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_syntaxInstructionListForGrammarAnalysis ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_syntaxInstructionListForGrammarAnalysis ;

//---------------------------------------------------------------------------*

class GGS_syntaxInstructionListForGrammarAnalysis : public AC_galgas_list {
  public : typedef elementOf_GGS_syntaxInstructionListForGrammarAnalysis cElement ;

//--- Constructor 'emptyList'
  public : static GGS_syntaxInstructionListForGrammarAnalysis constructor_emptyList (void) ;
  public : static GGS_syntaxInstructionListForGrammarAnalysis constructor_listWithValue (const GGS_abstractSyntaxInstructionForGrammarAnalysis & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_syntaxInstructionListForGrammarAnalysis & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_syntaxInstructionListForGrammarAnalysis
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_syntaxInstructionListForGrammarAnalysis
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_syntaxInstructionListForGrammarAnalysis * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_abstractSyntaxInstructionForGrammarAnalysis & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_abstractSyntaxInstructionForGrammarAnalysis & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_abstractSyntaxInstructionForGrammarAnalysis & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_abstractSyntaxInstructionForGrammarAnalysis & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_syntaxInstructionListForGrammarAnalysis inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_abstractSyntaxInstructionForGrammarAnalysis & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_syntaxInstructionListForGrammarAnalysis operator_concat (const GGS_syntaxInstructionListForGrammarAnalysis & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_abstractSyntaxInstructionForGrammarAnalysis & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_abstractSyntaxInstructionForGrammarAnalysis & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_abstractSyntaxInstructionForGrammarAnalysis & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & inLexique
                      COMMA_LOCATION_ARGS,
                      const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_abstractSyntaxInstructionForGrammarAnalysis 
  reader_mInstructionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMInstructionAtIndex (C_Compiler & inLexique,
                              const GGS_abstractSyntaxInstructionForGrammarAnalysis  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_syntaxInstructionListForGrammarAnalysis & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_abstractSyntaxInstructionForGrammarAnalysis   & _mInstruction (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               list '@productionRuleListForGrammarAnalysis'                *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_productionRuleListForGrammarAnalysis ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_productionRuleListForGrammarAnalysis ;

//---------------------------------------------------------------------------*

class GGS_productionRuleListForGrammarAnalysis : public AC_galgas_list {
  public : typedef elementOf_GGS_productionRuleListForGrammarAnalysis cElement ;

//--- Constructor 'emptyList'
  public : static GGS_productionRuleListForGrammarAnalysis constructor_emptyList (void) ;
  public : static GGS_productionRuleListForGrammarAnalysis constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_syntaxInstructionListForGrammarAnalysis & argument_2) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_productionRuleListForGrammarAnalysis & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_productionRuleListForGrammarAnalysis
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_productionRuleListForGrammarAnalysis
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_productionRuleListForGrammarAnalysis * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_uint & _out_1,
                              GGS_syntaxInstructionListForGrammarAnalysis & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_uint & _out_1,
                             GGS_syntaxInstructionListForGrammarAnalysis & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_uint & _out_1,
                                GGS_syntaxInstructionListForGrammarAnalysis & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_uint & _out_1,
                                 GGS_syntaxInstructionListForGrammarAnalysis & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_productionRuleListForGrammarAnalysis inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_syntaxInstructionListForGrammarAnalysis & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_productionRuleListForGrammarAnalysis operator_concat (const GGS_productionRuleListForGrammarAnalysis & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_syntaxInstructionListForGrammarAnalysis & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_syntaxInstructionListForGrammarAnalysis & argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_syntaxInstructionListForGrammarAnalysis & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & inLexique
                      COMMA_LOCATION_ARGS,
                      const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mLeftNonterminalSymbolAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_uint 
  reader_mLeftNonterminalSymbolIndexAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_syntaxInstructionListForGrammarAnalysis 
  reader_mInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMLeftNonterminalSymbolAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMLeftNonterminalSymbolIndexAtIndex (C_Compiler & inLexique,
                              const GGS_uint  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_syntaxInstructionListForGrammarAnalysis  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_productionRuleListForGrammarAnalysis & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mLeftNonterminalSymbol (LOCATION_ARGS) const ;
    public : /* const */ GGS_uint   & _mLeftNonterminalSymbolIndex (LOCATION_ARGS) const ;
    public : /* const */ GGS_syntaxInstructionListForGrammarAnalysis   & _mInstructionList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Map '@unusedNonTerminalSymbolMapForGrammarAnalysis'             *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_unusedNonTerminalSymbolMapForGrammarAnalysis ;

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_unusedNonTerminalSymbolMapForGrammarAnalysis ;

//---------------------------------------------------------------------------*

class GGS_unusedNonTerminalSymbolMapForGrammarAnalysis : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_unusedNonTerminalSymbolMapForGrammarAnalysis cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_unusedNonTerminalSymbolMapForGrammarAnalysis & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_unusedNonTerminalSymbolMapForGrammarAnalysis & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_unusedNonTerminalSymbolMapForGrammarAnalysis * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_unusedNonTerminalSymbolMapForGrammarAnalysis * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_unusedNonTerminalSymbolMapForGrammarAnalysis constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kInsertMessage_insertKey [] ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint &  inParameter0 COMMA_LOCATION_ARGS) ;

//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_uint & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_uint & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & inLexique
                                          COMMA_LOCATION_ARGS,
                                          const PMSInt32 inIndentation = 0) const ;
  public : static GGS_unusedNonTerminalSymbolMapForGrammarAnalysis constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_unusedNonTerminalSymbolMapForGrammarAnalysis & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_unusedNonTerminalSymbolMapForGrammarAnalysis reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_unusedNonTerminalSymbolMapForGrammarAnalysis & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_unusedNonTerminalSymbolMapForGrammarAnalysis & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uint   & _mNonTerminalIndex (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Map '@nonTerminalSymbolMapForGrammarAnalysis'                *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_nonTerminalSymbolMapForGrammarAnalysis ;

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_nonTerminalSymbolMapForGrammarAnalysis ;

//---------------------------------------------------------------------------*

class GGS_nonTerminalSymbolMapForGrammarAnalysis : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_nonTerminalSymbolMapForGrammarAnalysis cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_nonTerminalSymbolMapForGrammarAnalysis & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_nonTerminalSymbolMapForGrammarAnalysis & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_nonTerminalSymbolMapForGrammarAnalysis * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_nonTerminalSymbolMapForGrammarAnalysis * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_nonTerminalSymbolMapForGrammarAnalysis constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kInsertMessage_insertKey [] ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint &  inParameter0,
                                const GGS_nonterminalSymbolLabelMapForGrammarAnalysis &  inParameter1 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_searchKey [] ;

//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0,
                                GGS_nonterminalSymbolLabelMapForGrammarAnalysis   & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_uint & inParameter0,
                                   const GGS_nonterminalSymbolLabelMapForGrammarAnalysis & inParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_uint & outParameter0,
                                   GGS_nonterminalSymbolLabelMapForGrammarAnalysis & outParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & inLexique
                                          COMMA_LOCATION_ARGS,
                                          const PMSInt32 inIndentation = 0) const ;
  public : static GGS_nonTerminalSymbolMapForGrammarAnalysis constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_nonTerminalSymbolMapForGrammarAnalysis & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_nonTerminalSymbolMapForGrammarAnalysis reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_nonTerminalSymbolMapForGrammarAnalysis & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_nonTerminalSymbolMapForGrammarAnalysis & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uint   & _mNonTerminalIndex (LOCATION_ARGS) const ;
    public : /* const */ GGS_nonterminalSymbolLabelMapForGrammarAnalysis   & _mNonterminalSymbolParametersMap (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//         GALGAS class 'GGS_terminalInstructionForGrammarAnalysis'          *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_terminalInstructionForGrammarAnalysis ;

//---------------------------------------------------------------------------*

class GGS_terminalInstructionForGrammarAnalysis : public GGS_abstractSyntaxInstructionForGrammarAnalysis {
//--- Default constructor
  public : inline GGS_terminalInstructionForGrammarAnalysis (void) :
  GGS_abstractSyntaxInstructionForGrammarAnalysis () {}

//--- Pointer assignment constructor
  public : GGS_terminalInstructionForGrammarAnalysis (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_terminalInstructionForGrammarAnalysis (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_terminalInstructionForGrammarAnalysis
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_terminalInstructionForGrammarAnalysis constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_uint & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_terminalInstructionForGrammarAnalysis * getPtr (void) const {
    return (cPtr_terminalInstructionForGrammarAnalysis *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_terminalInstructionForGrammarAnalysis * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_terminalInstructionForGrammarAnalysis * operator () (LOCATION_ARGS) const {
      return (cPtr_terminalInstructionForGrammarAnalysis *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__terminalInstructionForGrammarAnalysis ;

//---------------------------------------------------------------------------*
//                                                                           *
//       GALGAS class 'GGS_nonTerminalInstructionForGrammarAnalysis'         *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_nonTerminalInstructionForGrammarAnalysis ;

//---------------------------------------------------------------------------*

class GGS_nonTerminalInstructionForGrammarAnalysis : public GGS_abstractSyntaxInstructionForGrammarAnalysis {
//--- Default constructor
  public : inline GGS_nonTerminalInstructionForGrammarAnalysis (void) :
  GGS_abstractSyntaxInstructionForGrammarAnalysis () {}

//--- Pointer assignment constructor
  public : GGS_nonTerminalInstructionForGrammarAnalysis (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_nonTerminalInstructionForGrammarAnalysis (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_nonTerminalInstructionForGrammarAnalysis
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_nonTerminalInstructionForGrammarAnalysis constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_uint & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_nonTerminalInstructionForGrammarAnalysis * getPtr (void) const {
    return (cPtr_nonTerminalInstructionForGrammarAnalysis *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_nonTerminalInstructionForGrammarAnalysis * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_nonTerminalInstructionForGrammarAnalysis * operator () (LOCATION_ARGS) const {
      return (cPtr_nonTerminalInstructionForGrammarAnalysis *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__nonTerminalInstructionForGrammarAnalysis ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@branchListForGrammarAnalysis'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_branchListForGrammarAnalysis ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_branchListForGrammarAnalysis ;

//---------------------------------------------------------------------------*

class GGS_branchListForGrammarAnalysis : public AC_galgas_list {
  public : typedef elementOf_GGS_branchListForGrammarAnalysis cElement ;

//--- Constructor 'emptyList'
  public : static GGS_branchListForGrammarAnalysis constructor_emptyList (void) ;
  public : static GGS_branchListForGrammarAnalysis constructor_listWithValue (const GGS_syntaxInstructionListForGrammarAnalysis & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_branchListForGrammarAnalysis & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_branchListForGrammarAnalysis
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_branchListForGrammarAnalysis
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_branchListForGrammarAnalysis * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_syntaxInstructionListForGrammarAnalysis & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_syntaxInstructionListForGrammarAnalysis & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_syntaxInstructionListForGrammarAnalysis & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_syntaxInstructionListForGrammarAnalysis & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_branchListForGrammarAnalysis inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_syntaxInstructionListForGrammarAnalysis & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_branchListForGrammarAnalysis operator_concat (const GGS_branchListForGrammarAnalysis & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_syntaxInstructionListForGrammarAnalysis & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_syntaxInstructionListForGrammarAnalysis & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_syntaxInstructionListForGrammarAnalysis & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & inLexique
                      COMMA_LOCATION_ARGS,
                      const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_syntaxInstructionListForGrammarAnalysis 
  reader_mSyntaxInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMSyntaxInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_syntaxInstructionListForGrammarAnalysis  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_branchListForGrammarAnalysis & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_syntaxInstructionListForGrammarAnalysis   & _mSyntaxInstructionList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          GALGAS class 'GGS_selectInstructionForGrammarAnalysis'           *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_selectInstructionForGrammarAnalysis ;

//---------------------------------------------------------------------------*

class GGS_selectInstructionForGrammarAnalysis : public GGS_abstractSyntaxInstructionForGrammarAnalysis {
//--- Default constructor
  public : inline GGS_selectInstructionForGrammarAnalysis (void) :
  GGS_abstractSyntaxInstructionForGrammarAnalysis () {}

//--- Pointer assignment constructor
  public : GGS_selectInstructionForGrammarAnalysis (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_selectInstructionForGrammarAnalysis (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_selectInstructionForGrammarAnalysis
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_selectInstructionForGrammarAnalysis constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_branchListForGrammarAnalysis & argument_1,
                                const GGS_uint & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_selectInstructionForGrammarAnalysis * getPtr (void) const {
    return (cPtr_selectInstructionForGrammarAnalysis *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_selectInstructionForGrammarAnalysis * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_selectInstructionForGrammarAnalysis * operator () (LOCATION_ARGS) const {
      return (cPtr_selectInstructionForGrammarAnalysis *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__selectInstructionForGrammarAnalysis ;

//---------------------------------------------------------------------------*
//                                                                           *
//          GALGAS class 'GGS_repeatInstructionForGrammarAnalysis'           *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_repeatInstructionForGrammarAnalysis ;

//---------------------------------------------------------------------------*

class GGS_repeatInstructionForGrammarAnalysis : public GGS_abstractSyntaxInstructionForGrammarAnalysis {
//--- Default constructor
  public : inline GGS_repeatInstructionForGrammarAnalysis (void) :
  GGS_abstractSyntaxInstructionForGrammarAnalysis () {}

//--- Pointer assignment constructor
  public : GGS_repeatInstructionForGrammarAnalysis (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_repeatInstructionForGrammarAnalysis (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_repeatInstructionForGrammarAnalysis
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_repeatInstructionForGrammarAnalysis constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_branchListForGrammarAnalysis & argument_1,
                                const GGS_uint & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_repeatInstructionForGrammarAnalysis * getPtr (void) const {
    return (cPtr_repeatInstructionForGrammarAnalysis *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_repeatInstructionForGrammarAnalysis * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_repeatInstructionForGrammarAnalysis * operator () (LOCATION_ARGS) const {
      return (cPtr_repeatInstructionForGrammarAnalysis *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__repeatInstructionForGrammarAnalysis ;

//---------------------------------------------------------------------------*
//                                                                           *
//              list '@syntaxComponentListForGrammarAnalysis'                *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_syntaxComponentListForGrammarAnalysis ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_syntaxComponentListForGrammarAnalysis ;

//---------------------------------------------------------------------------*

class GGS_syntaxComponentListForGrammarAnalysis : public AC_galgas_list {
  public : typedef elementOf_GGS_syntaxComponentListForGrammarAnalysis cElement ;

//--- Constructor 'emptyList'
  public : static GGS_syntaxComponentListForGrammarAnalysis constructor_emptyList (void) ;
  public : static GGS_syntaxComponentListForGrammarAnalysis constructor_listWithValue (const GGS_productionRuleListForGrammarAnalysis & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_syntaxComponentListForGrammarAnalysis & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_syntaxComponentListForGrammarAnalysis
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_syntaxComponentListForGrammarAnalysis
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_syntaxComponentListForGrammarAnalysis * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_productionRuleListForGrammarAnalysis & _out_0,
                              GGS_lstring & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_productionRuleListForGrammarAnalysis & _out_0,
                             GGS_lstring & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_productionRuleListForGrammarAnalysis & _out_0,
                                GGS_lstring & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_productionRuleListForGrammarAnalysis & _out_0,
                                 GGS_lstring & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_syntaxComponentListForGrammarAnalysis inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_productionRuleListForGrammarAnalysis & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_syntaxComponentListForGrammarAnalysis operator_concat (const GGS_syntaxComponentListForGrammarAnalysis & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_productionRuleListForGrammarAnalysis & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_productionRuleListForGrammarAnalysis & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_productionRuleListForGrammarAnalysis & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & inLexique
                      COMMA_LOCATION_ARGS,
                      const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_productionRuleListForGrammarAnalysis 
  reader_mProductionRulesListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mSyntaxComponentNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMProductionRulesListAtIndex (C_Compiler & inLexique,
                              const GGS_productionRuleListForGrammarAnalysis  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMSyntaxComponentNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_syntaxComponentListForGrammarAnalysis & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_productionRuleListForGrammarAnalysis   & _mProductionRulesList (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mSyntaxComponentName (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Map '@terminalSymbolsMapForGrammarAnalysis'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_terminalSymbolsMapForGrammarAnalysis ;

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_terminalSymbolsMapForGrammarAnalysis ;

//---------------------------------------------------------------------------*

class GGS_terminalSymbolsMapForGrammarAnalysis : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_terminalSymbolsMapForGrammarAnalysis cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_terminalSymbolsMapForGrammarAnalysis & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_terminalSymbolsMapForGrammarAnalysis & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_terminalSymbolsMapForGrammarAnalysis * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_terminalSymbolsMapForGrammarAnalysis * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_terminalSymbolsMapForGrammarAnalysis constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kInsertMessage_insertKey [] ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint &  inParameter0 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_searchKey [] ;

//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_uint & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_uint & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & inLexique
                                          COMMA_LOCATION_ARGS,
                                          const PMSInt32 inIndentation = 0) const ;
  public : static GGS_terminalSymbolsMapForGrammarAnalysis constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_terminalSymbolsMapForGrammarAnalysis & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_terminalSymbolsMapForGrammarAnalysis reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_terminalSymbolsMapForGrammarAnalysis & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_terminalSymbolsMapForGrammarAnalysis & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uint   & _mTerminalIndex (LOCATION_ARGS) const ;
  } ;
} ;

void routine_analyzeGrammar (C_Compiler &,
                                const GGS_lstring  ,
                                const GGS_lstring  ,
                                const GGS_uint  ,
                                const GGS_string ,
                                const GGS_location  ,
                                const GGS_terminalSymbolsMapForGrammarAnalysis  ,
                                const GGS_syntaxComponentListForGrammarAnalysis  ,
                                const GGS_nonTerminalSymbolMapForGrammarAnalysis  ,
                                const GGS_unusedNonTerminalSymbolMapForGrammarAnalysis  ,
                                const GGS_string ,
                                const GGS_string  COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@signatureForGrammarAnalysis'               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_signatureForGrammarAnalysis : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_formalArgumentPassingMode mFormalArgumentPassingModeForGrammarAnalysis ;
  public : GGS_lstring  mGalgasTypeNameForGrammarAnalysis ;
//--- Constructor
  public : elementOf_GGS_signatureForGrammarAnalysis (const GGS_formalArgumentPassingMode& ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_signatureForGrammarAnalysis * nextObject (void) const { return (elementOf_GGS_signatureForGrammarAnalysis *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_signatureForGrammarAnalysis * previousObject (void) const { return (elementOf_GGS_signatureForGrammarAnalysis *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_signatureForGrammarAnalysis ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//      Element of map '@nonterminalSymbolLabelMapForGrammarAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

class e_nonterminalSymbolLabelMapForGrammarAnalysis {
  public : GGS_signatureForGrammarAnalysis  mFormalParametersList ;

  public : e_nonterminalSymbolLabelMapForGrammarAnalysis (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_nonterminalSymbolLabelMapForGrammarAnalysis : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_nonterminalSymbolLabelMapForGrammarAnalysis (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_nonterminalSymbolLabelMapForGrammarAnalysis & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_nonterminalSymbolLabelMapForGrammarAnalysis * nextObject (void) const { return (elementOf_GGS_nonterminalSymbolLabelMapForGrammarAnalysis *) mNextItem ; }
  public : inline elementOf_GGS_nonterminalSymbolLabelMapForGrammarAnalysis * infObject (void) const { return (elementOf_GGS_nonterminalSymbolLabelMapForGrammarAnalysis *) mInfPtr ; }
  public : inline elementOf_GGS_nonterminalSymbolLabelMapForGrammarAnalysis * supObject (void) const { return (elementOf_GGS_nonterminalSymbolLabelMapForGrammarAnalysis *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_nonterminalSymbolLabelMapForGrammarAnalysis mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & inLexique,
                                         const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#include "include_abstractSyntaxInstructionForGrammarAnalysis.h"

//---------------------------------------------------------------------------*
//                                                                           *
//        Element of list '@syntaxInstructionListForGrammarAnalysis'         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_syntaxInstructionListForGrammarAnalysis : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_abstractSyntaxInstructionForGrammarAnalysis  mInstruction ;
//--- Constructor
  public : elementOf_GGS_syntaxInstructionListForGrammarAnalysis (const GGS_abstractSyntaxInstructionForGrammarAnalysis & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_syntaxInstructionListForGrammarAnalysis * nextObject (void) const { return (elementOf_GGS_syntaxInstructionListForGrammarAnalysis *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_syntaxInstructionListForGrammarAnalysis * previousObject (void) const { return (elementOf_GGS_syntaxInstructionListForGrammarAnalysis *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_syntaxInstructionListForGrammarAnalysis ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//         Element of list '@productionRuleListForGrammarAnalysis'           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_productionRuleListForGrammarAnalysis : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mLeftNonterminalSymbol ;
  public : GGS_uint  mLeftNonterminalSymbolIndex ;
  public : GGS_syntaxInstructionListForGrammarAnalysis  mInstructionList ;
//--- Constructor
  public : elementOf_GGS_productionRuleListForGrammarAnalysis (const GGS_lstring & ,
                                const GGS_uint & ,
                                const GGS_syntaxInstructionListForGrammarAnalysis & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_productionRuleListForGrammarAnalysis * nextObject (void) const { return (elementOf_GGS_productionRuleListForGrammarAnalysis *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_productionRuleListForGrammarAnalysis * previousObject (void) const { return (elementOf_GGS_productionRuleListForGrammarAnalysis *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_productionRuleListForGrammarAnalysis ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//      Element of map '@unusedNonTerminalSymbolMapForGrammarAnalysis'       *
//                                                                           *
//---------------------------------------------------------------------------*

class e_unusedNonTerminalSymbolMapForGrammarAnalysis {
  public : GGS_uint  mNonTerminalIndex ;

  public : e_unusedNonTerminalSymbolMapForGrammarAnalysis (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_unusedNonTerminalSymbolMapForGrammarAnalysis : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_unusedNonTerminalSymbolMapForGrammarAnalysis (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_unusedNonTerminalSymbolMapForGrammarAnalysis & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_unusedNonTerminalSymbolMapForGrammarAnalysis * nextObject (void) const { return (elementOf_GGS_unusedNonTerminalSymbolMapForGrammarAnalysis *) mNextItem ; }
  public : inline elementOf_GGS_unusedNonTerminalSymbolMapForGrammarAnalysis * infObject (void) const { return (elementOf_GGS_unusedNonTerminalSymbolMapForGrammarAnalysis *) mInfPtr ; }
  public : inline elementOf_GGS_unusedNonTerminalSymbolMapForGrammarAnalysis * supObject (void) const { return (elementOf_GGS_unusedNonTerminalSymbolMapForGrammarAnalysis *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_unusedNonTerminalSymbolMapForGrammarAnalysis mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & inLexique,
                                         const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//         Element of map '@nonTerminalSymbolMapForGrammarAnalysis'          *
//                                                                           *
//---------------------------------------------------------------------------*

class e_nonTerminalSymbolMapForGrammarAnalysis {
  public : GGS_uint  mNonTerminalIndex ;
  public : GGS_nonterminalSymbolLabelMapForGrammarAnalysis  mNonterminalSymbolParametersMap ;

  public : e_nonTerminalSymbolMapForGrammarAnalysis (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_nonTerminalSymbolMapForGrammarAnalysis : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_nonTerminalSymbolMapForGrammarAnalysis (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_nonTerminalSymbolMapForGrammarAnalysis & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_nonTerminalSymbolMapForGrammarAnalysis * nextObject (void) const { return (elementOf_GGS_nonTerminalSymbolMapForGrammarAnalysis *) mNextItem ; }
  public : inline elementOf_GGS_nonTerminalSymbolMapForGrammarAnalysis * infObject (void) const { return (elementOf_GGS_nonTerminalSymbolMapForGrammarAnalysis *) mInfPtr ; }
  public : inline elementOf_GGS_nonTerminalSymbolMapForGrammarAnalysis * supObject (void) const { return (elementOf_GGS_nonTerminalSymbolMapForGrammarAnalysis *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_nonTerminalSymbolMapForGrammarAnalysis mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & inLexique,
                                         const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#include "include_terminalInstructionForGrammarAnalysis.h"

//---------------------------------------------------------------------------*

#include "include_nonTerminalInstructionForGrammarAnalysis.h"

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@branchListForGrammarAnalysis'               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_branchListForGrammarAnalysis : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_syntaxInstructionListForGrammarAnalysis  mSyntaxInstructionList ;
//--- Constructor
  public : elementOf_GGS_branchListForGrammarAnalysis (const GGS_syntaxInstructionListForGrammarAnalysis & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_branchListForGrammarAnalysis * nextObject (void) const { return (elementOf_GGS_branchListForGrammarAnalysis *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_branchListForGrammarAnalysis * previousObject (void) const { return (elementOf_GGS_branchListForGrammarAnalysis *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_branchListForGrammarAnalysis ;
} ;

//---------------------------------------------------------------------------*

#include "include_selectInstructionForGrammarAnalysis.h"

//---------------------------------------------------------------------------*

#include "include_repeatInstructionForGrammarAnalysis.h"

//---------------------------------------------------------------------------*
//                                                                           *
//         Element of list '@syntaxComponentListForGrammarAnalysis'          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_syntaxComponentListForGrammarAnalysis : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_productionRuleListForGrammarAnalysis  mProductionRulesList ;
  public : GGS_lstring  mSyntaxComponentName ;
//--- Constructor
  public : elementOf_GGS_syntaxComponentListForGrammarAnalysis (const GGS_productionRuleListForGrammarAnalysis & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_syntaxComponentListForGrammarAnalysis * nextObject (void) const { return (elementOf_GGS_syntaxComponentListForGrammarAnalysis *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_syntaxComponentListForGrammarAnalysis * previousObject (void) const { return (elementOf_GGS_syntaxComponentListForGrammarAnalysis *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_syntaxComponentListForGrammarAnalysis ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          Element of map '@terminalSymbolsMapForGrammarAnalysis'           *
//                                                                           *
//---------------------------------------------------------------------------*

class e_terminalSymbolsMapForGrammarAnalysis {
  public : GGS_uint  mTerminalIndex ;

  public : e_terminalSymbolsMapForGrammarAnalysis (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_terminalSymbolsMapForGrammarAnalysis : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_terminalSymbolsMapForGrammarAnalysis (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_terminalSymbolsMapForGrammarAnalysis & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_terminalSymbolsMapForGrammarAnalysis * nextObject (void) const { return (elementOf_GGS_terminalSymbolsMapForGrammarAnalysis *) mNextItem ; }
  public : inline elementOf_GGS_terminalSymbolsMapForGrammarAnalysis * infObject (void) const { return (elementOf_GGS_terminalSymbolsMapForGrammarAnalysis *) mInfPtr ; }
  public : inline elementOf_GGS_terminalSymbolsMapForGrammarAnalysis * supObject (void) const { return (elementOf_GGS_terminalSymbolsMapForGrammarAnalysis *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_terminalSymbolsMapForGrammarAnalysis mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & inLexique,
                                         const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#endif
