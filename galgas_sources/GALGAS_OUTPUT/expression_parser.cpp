//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'expression_parser.cpp'                        *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      april 24th, 2006, at 14h27'25"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "expression_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  static const char gGGSsourceFile [] = "expression_parser.ggs" ;
  #define SOURCE_FILE_AT_LINE(line) , gGGSsourceFile, line
#else
  #define SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchAndOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchAndOperator (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_4756 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_4781 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_bool * operand_4756 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_4756) ;
    cPtr_typeGalgas_bool * operand_4781 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_4781) ;
    if ((operand_4756 != NULL) && (operand_4781 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_stringset * operand_4756 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_4756) ;
      cPtr_typeGalgas_stringset * operand_4781 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_4781) ;
      if ((operand_4756 != NULL) && (operand_4781 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
          GGS_location (_inLexique).reader_location ().signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "operand type error : (")) + (var_cas_inLeftExpressionType.reader_messageGalgasType ()))) + (GGS_string (true, " & ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType ()))) + (GGS_string (true, ") is not valid"))) SOURCE_FILE_AT_LINE (137)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchOrOperator"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchOrOperator (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_5778 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_5803 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_bool * operand_5778 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_5778) ;
    cPtr_typeGalgas_bool * operand_5803 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_5803) ;
    if ((operand_5778 != NULL) && (operand_5803 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_stringset * operand_5778 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_5778) ;
      cPtr_typeGalgas_stringset * operand_5803 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_5803) ;
      if ((operand_5778 != NULL) && (operand_5803 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
          GGS_location (_inLexique).reader_location ().signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "operand type error : (")) + (var_cas_inLeftExpressionType.reader_messageGalgasType ()))) + (GGS_string (true, " | ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType ()))) + (GGS_string (true, ") is not valid"))) SOURCE_FILE_AT_LINE (160)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "matchMinusOperator"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchMinusOperator (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_6803 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_6828 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_stringset * operand_6803 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_6803) ;
    cPtr_typeGalgas_stringset * operand_6828 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_6828) ;
    if ((operand_6803 != NULL) && (operand_6828 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
        GGS_location (_inLexique).reader_location ().signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "operand type error : (")) + (var_cas_inLeftExpressionType.reader_messageGalgasType ()))) + (GGS_string (true, " | ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType ()))) + (GGS_string (true, ") is not valid"))) SOURCE_FILE_AT_LINE (181)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "matchConcatOperator"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchConcatOperator (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_7733 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_7758 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_string * operand_7733 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_7733) ;
    cPtr_typeGalgas_string * operand_7758 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_7758) ;
    if ((operand_7733 != NULL) && (operand_7758 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
        GGS_location (_inLexique).reader_location ().signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "operand type error : (")) + (var_cas_inLeftExpressionType.reader_messageGalgasType ()))) + (GGS_string (true, " . ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType ()))) + (GGS_string (true, ") is not valid"))) SOURCE_FILE_AT_LINE (202)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "checkNotOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkNotOperator (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  { cPtr_typeGalgas_bool * ptrExtraire_ = dynamic_cast <cPtr_typeGalgas_bool *> (var_cas_inOperandType.getPtr ()) ;
    if (ptrExtraire_ == NULL) {
      if (var_cas_inOperandType.getPtr () != NULL) {
        TC_UniqueArray <C_String> message1_ (1 COMMA_HERE) ;
        C_String message2_ ;
        message1_ (0 COMMA_HERE) << cPtr_typeGalgas_bool::static_string_message_messageGalgasType () ;
        message2_ << var_cas_inOperandType (HERE)->message_messageGalgasType () ;
        GGS_location (_inLexique).signalExtractError (_inLexique, message1_, message2_ SOURCE_FILE_AT_LINE (217)) ;
      }
    }else{
      macroValidPointer (ptrExtraire_) ;
    }
  }
  var_cas_outResultType = var_cas_inOperandType ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "comparison_types_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_comparison_types_check (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_9241 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_9266 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_stringset * operand_9241 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_9241) ;
    cPtr_typeGalgas_stringset * operand_9266 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_9266) ;
    if ((operand_9241 != NULL) && (operand_9266 != NULL)) {
    }else{
      cPtr_typeGalgas_bool * operand_9241 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_9241) ;
      cPtr_typeGalgas_bool * operand_9266 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_9266) ;
      if ((operand_9241 != NULL) && (operand_9266 != NULL)) {
      }else{
        cPtr_typeGalgas_char * operand_9241 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_9241) ;
        cPtr_typeGalgas_char * operand_9266 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_9266) ;
        if ((operand_9241 != NULL) && (operand_9266 != NULL)) {
        }else{
          cPtr_typeGalgas_uint * operand_9241 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_9241) ;
          cPtr_typeGalgas_uint * operand_9266 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_9266) ;
          if ((operand_9241 != NULL) && (operand_9266 != NULL)) {
          }else{
            cPtr_typeGalgas_sint * operand_9241 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_9241) ;
            cPtr_typeGalgas_sint * operand_9266 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_9266) ;
            if ((operand_9241 != NULL) && (operand_9266 != NULL)) {
            }else{
              cPtr_typeGalgas_double * operand_9241 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_9241) ;
              cPtr_typeGalgas_double * operand_9266 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_9266) ;
              if ((operand_9241 != NULL) && (operand_9266 != NULL)) {
              }else{
                cPtr_typeGalgas_string * operand_9241 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_9241) ;
                cPtr_typeGalgas_string * operand_9266 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_9266) ;
                if ((operand_9241 != NULL) && (operand_9266 != NULL)) {
                }else{
                  cPtr_typeGalgas_enum * operand_9241 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_9241) ;
                  cPtr_typeGalgas_enum * operand_9266 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_9266) ;
                  if ((operand_9241 != NULL) && (operand_9266 != NULL)) {
                    if (((operand_9241->mEnumTypeName.reader_value ()) != (operand_9266->mEnumTypeName.reader_value ())).isBuiltAndTrue ()) {
                        GGS_location (_inLexique).reader_location ().signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "comparison between a '@")) + (operand_9241->mEnumTypeName.reader_value ()))) + (GGS_string (true, "' enumeration and a '@")))) + (operand_9266->mEnumTypeName.reader_value ()))) + (GGS_string (true, "' is not valid"))) SOURCE_FILE_AT_LINE (242)) ;
                    }
                  }else{
                      GGS_location (_inLexique).reader_location ().signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "comparison between ")) + (var_cas_inLeftExpressionType.reader_messageGalgasType ()))) + (GGS_string (true, " and ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType ()))) + (GGS_string (true, " is not valid"))) SOURCE_FILE_AT_LINE (246)) ;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_expression_expression_parser_256_18_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_concatenation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_0 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2E) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_concatenation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeConcatOperation::constructor_new (var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchConcatOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType SOURCE_FILE_AT_LINE (286)) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_expression_expression_parser_256_18_parse (galgas_scanner & _inLexique) {
  nt_concatenation_term_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_0 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2E) ;
          nt_concatenation_term_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'concatenation_term'           *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_concatenation_term_expression_parser_299_26_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_1 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__7C) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeOrOperation::constructor_new (var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchOrOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType SOURCE_FILE_AT_LINE (329)) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2D) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeMinusOperation::constructor_new (var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchMinusOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType SOURCE_FILE_AT_LINE (348)) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_concatenation_term_expression_parser_299_26_parse (galgas_scanner & _inLexique) {
  nt_relation_term_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_1 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__7C) ;
          nt_relation_term_parse (_inLexique) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2D) ;
          nt_relation_term_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'relation_term'              *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_relation_term_expression_parser_361_21_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_2 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__26) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeAndOperation::constructor_new (var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchAndOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType SOURCE_FILE_AT_LINE (391)) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_relation_term_expression_parser_361_21_parse (galgas_scanner & _inLexique) {
  nt_relation_factor_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_2 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__26) ;
          nt_relation_factor_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'relation_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_relation_factor_expression_parser_404_23_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  switch (select_expression_parser_3 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3D_3D) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType SOURCE_FILE_AT_LINE (431)) ;
      var_cas_outExpression = GGS_typeEqualTest::constructor_new (var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (HERE) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__21_3D) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType SOURCE_FILE_AT_LINE (447)) ;
      var_cas_outExpression = GGS_typeNonEqualTest::constructor_new (var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (HERE) ;
      } break ;
    case 4 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3C_3D) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType SOURCE_FILE_AT_LINE (463)) ;
      var_cas_outExpression = GGS_typeInfOrEqualTest::constructor_new (var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (HERE) ;
      } break ;
    case 5 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3E_3D) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType SOURCE_FILE_AT_LINE (479)) ;
      var_cas_outExpression = GGS_typeSupOrEqualTest::constructor_new (var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (HERE) ;
      } break ;
    case 6 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType SOURCE_FILE_AT_LINE (495)) ;
      var_cas_outExpression = GGS_typeStrictSupTest::constructor_new (var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (HERE) ;
      } break ;
    case 7 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType SOURCE_FILE_AT_LINE (511)) ;
      var_cas_outExpression = GGS_typeStrictInfTest::constructor_new (var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_relation_factor_expression_parser_404_23_parse (galgas_scanner & _inLexique) {
  nt_simple_expression_parse (_inLexique) ;
  switch (select_expression_parser_3 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3D_3D) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__21_3D) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 4 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3C_3D) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 5 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3E_3D) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 6 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 7 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "addition_types_check"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addition_types_check (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_19153 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_19178 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_19153 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19153) ;
    cPtr_typeGalgas_uint * operand_19178 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19178) ;
    if ((operand_19153 != NULL) && (operand_19178 != NULL)) {
    }else{
        GGS_location (_inLexique).reader_location ().signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "addition between ")) + (var_cas_inLeftExpressionType.reader_messageGalgasType ()))) + (GGS_string (true, " and ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType ()))) + (GGS_string (true, " is not valid"))) SOURCE_FILE_AT_LINE (531)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'simple_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_simple_expression_expression_parser_541_25_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2B) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_addition_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType SOURCE_FILE_AT_LINE (569)) ;
          var_cas_outExpression = GGS_typeAddOperation::constructor_new (var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          var_cas_outResultType = GGS_typeGalgas_uint::constructor_new (HERE) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_simple_expression_expression_parser_541_25_parse (galgas_scanner & _inLexique) {
  nt_term_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2B) ;
          nt_term_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'term'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_term_expression_parser_581_12_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_term_expression_parser_581_12_parse (galgas_scanner & _inLexique) {
  nt_factor_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_603_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lstring  var_cas_nomEntite ;
  GGS_typeCplusPlusName  var_cas_nomCppEntite1 ;
  nt_read_access_ (_inLexique, var_cas_nomEntite, var_cas_nomCppEntite1, var_cas_outResultType, var_cas_ioVariablesMap) ;
  var_cas_outExpression = GGS_typeVarInExpression::constructor_new (var_cas_nomCppEntite1 COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_603_14_parse (galgas_scanner & _inLexique) {
  nt_read_access_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_622_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__28) ;
  nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__29) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_622_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__28) ;
  nt_expression_parse (_inLexique) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__29) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_646_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_not) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeTestComplement::constructor_new (var_cas_ifCondition COMMA_HERE) ;
  ::routine_checkNotOperator (_inLexique,  var_cas_operandType,  var_cas_outResultType SOURCE_FILE_AT_LINE (664)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_646_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_not) ;
  nt_factor_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_673_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_true) ;
  var_cas_outExpression = GGS_typeTrueBool::constructor_new (HERE) ;
  var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_673_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_true) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_691_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_false) ;
  var_cas_outExpression = GGS_typeFalseBool::constructor_new (HERE) ;
  var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_691_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_false) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_709_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lstring  var_cas_literalString ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
  var_cas_literalString.defineAttribute (_inLexique.tokenString, _inLexique) ;
  var_cas_outExpression = GGS_typeLiteralStringExpression::constructor_new (var_cas_literalString COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_string::constructor_new (HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_709_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_728_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint  var_cas_literalInt ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) ;
  var_cas_literalInt.defineAttribute (_inLexique.ulongValue, _inLexique) ;
  var_cas_outExpression = GGS_typeLiteralUIntExpression::constructor_new (var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_uint::constructor_new (HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_728_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_747_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint  var_cas_literalInt ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger) ;
  var_cas_literalInt.defineAttribute (_inLexique.longValue, _inLexique) ;
  var_cas_outExpression = GGS_typeLiteralSIntExpression::constructor_new (var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_sint::constructor_new (HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_747_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_766_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lchar  var_cas_literalChar ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fchar) ;
  var_cas_literalChar.defineAttribute (_inLexique.charValue, _inLexique) ;
  var_cas_outExpression = GGS_typeLiteralCharExpression::constructor_new (var_cas_literalChar COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_char::constructor_new (HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_766_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fchar) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_785_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_here) ;
  var_cas_outExpression = GGS_typeHereExpression::constructor_new (HERE) ;
  var_cas_outResultType = GGS_typeGalgas_location::constructor_new (HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_785_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_here) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_806_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__5B) ;
  switch (select_expression_parser_5 (_inLexique)) {
    case 1 : {
      GGS_typeExpression  var_cas_expressionValue ;
      GGS_AC_galgasType  var_cas_expressionType ;
      nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_expressionValue, var_cas_expressionType) ;
      GGS_lstring  var_cas_methodName ;
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      var_cas_methodName.defineAttribute (_inLexique.tokenString, _inLexique) ;
      GGS_typeListeAttributsSemantiques  var_cas_accessorsTypeList ;
      ::routine_handleReaderCall (_inLexique,  var_cas_expressionType,  var_cas_methodName,  var_cas_accessorsTypeList,  var_cas_outResultType SOURCE_FILE_AT_LINE (830)) ;
      GGS_typeExpressionList  var_cas_expressionList ;
      nt_output_expression_list_ (_inLexique, var_cas_expressionList, var_cas_accessorsTypeList, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap) ;
      var_cas_outExpression = GGS_typeReaderCallInExpression::constructor_new (var_cas_expressionValue, var_cas_methodName, var_cas_expressionList COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_lstring  var_cas_className ;
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_type_5Fname) ;
      var_cas_className.defineAttribute (_inLexique.tokenString, _inLexique) ;
      GGS_lstring  var_cas_mClassMethodName ;
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      var_cas_mClassMethodName.defineAttribute (_inLexique.tokenString, _inLexique) ;
      GGS_AC_semanticsEntity  var_cas_e ;
      var_cas_ioEntitiesMap.methode_searchKey (_inLexique, var_cas_className, var_cas_e SOURCE_FILE_AT_LINE (849)) ;
      { cPtr_typeEntiteType * ptrExtraire_ = dynamic_cast <cPtr_typeEntiteType *> (var_cas_e.getPtr ()) ;
        if (ptrExtraire_ == NULL) {
          var_cas_outResultType.drop_operation () ;
          if (var_cas_e.getPtr () != NULL) {
            TC_UniqueArray <C_String> message1_ (1 COMMA_HERE) ;
            C_String message2_ ;
            message1_ (0 COMMA_HERE) << cPtr_typeEntiteType::static_string_message_messageTypeEntite () ;
            message2_ << var_cas_e (HERE)->message_messageTypeEntite () ;
            var_cas_className.signalExtractError (_inLexique, message1_, message2_ SOURCE_FILE_AT_LINE (850)) ;
          }
        }else{
          macroValidPointer (ptrExtraire_) ;
          var_cas_outResultType = ptrExtraire_->aDefType ;
        }
      }
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques ;
      if (var_cas_outResultType.isBuilt ()) {
        var_cas_outResultType (HERE)->methode_handleConstructorCall (_inLexique, var_cas_mClassMethodName, var_cas_listeAttributsSemantiques) ;
      }
      GGS_typeExpressionList  var_cas_expressionList ;
      nt_output_expression_list_ (_inLexique, var_cas_expressionList, var_cas_listeAttributsSemantiques, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap) ;
      var_cas_outExpression = GGS_typeConstructorExpression::constructor_new (var_cas_className, var_cas_mClassMethodName, var_cas_expressionList COMMA_HERE) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;
      GGS_lstring  var_cas_optionComponentName ;
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      var_cas_optionComponentName.defineAttribute (_inLexique.tokenString, _inLexique) ;
      GGS_M_cli_options  var_cas_boolOptionsMap ;
      GGS_M_cli_options  var_cas_uintOptionsMap ;
      GGS_M_cli_options  var_cas_stringOptionsMap ;
      var_cas_ioOptionsComponentsMapForUse.methode_searchKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap SOURCE_FILE_AT_LINE (870)) ;
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2E) ;
      GGS_lstring  var_cas_optionName ;
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      var_cas_optionName.defineAttribute (_inLexique.tokenString, _inLexique) ;
      if ((var_cas_boolOptionsMap.reader_hasKey (var_cas_optionName.reader_value ())).isBuiltAndTrue ()) {
        var_cas_outExpression = GGS_typeBoolOption::constructor_new (var_cas_optionComponentName, var_cas_optionName COMMA_HERE) ;
        var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (HERE) ;
      }else if ((var_cas_uintOptionsMap.reader_hasKey (var_cas_optionName.reader_value ())).isBuiltAndTrue ()) {
        var_cas_outExpression = GGS_typeUIntOption::constructor_new (var_cas_optionComponentName, var_cas_optionName COMMA_HERE) ;
        var_cas_outResultType = GGS_typeGalgas_uint::constructor_new (HERE) ;
      }else if ((var_cas_stringOptionsMap.reader_hasKey (var_cas_optionName.reader_value ())).isBuiltAndTrue ()) {
        var_cas_outExpression = GGS_typeStringOption::constructor_new (var_cas_optionComponentName, var_cas_optionName COMMA_HERE) ;
        var_cas_outResultType = GGS_typeGalgas_uint::constructor_new (HERE) ;
      }else{
          var_cas_optionName.reader_location ().signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "the '")) + (var_cas_optionComponentName.reader_value ()))) + (GGS_string (true, "' option component has no '")))) + (var_cas_optionName.reader_value ()))) + (GGS_string (true, "' option"))) SOURCE_FILE_AT_LINE (884)) ;
      }
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__5D) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_806_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__5B) ;
  switch (select_expression_parser_5 (_inLexique)) {
    case 1 : {
      nt_expression_parse (_inLexique) ;
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      nt_output_expression_list_parse (_inLexique) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_type_5Fname) ;
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      nt_output_expression_list_parse (_inLexique) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2E) ;
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__5D) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'read_access'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_read_access_expression_parser_897_19_ (galgas_scanner & _inLexique,
                                GGS_lstring  &var_cas_nomVariable,
                                GGS_typeCplusPlusName  &var_cas_nomCppEntite,
                                GGS_AC_galgasType  &var_cas_typeEntite,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  var_cas_nomVariable.defineAttribute (_inLexique.tokenString, _inLexique) ;
  var_cas_ioVariablesMap.methode_searchForReadOnlyAccess (_inLexique, var_cas_nomVariable, var_cas_typeEntite, var_cas_nomCppEntite SOURCE_FILE_AT_LINE (904)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_read_access_expression_parser_897_19_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'output_expression_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_output_expression_list_expression_parser_913_30_ (galgas_scanner & _inLexique,
                                GGS_typeExpressionList  &var_cas_outExpressionList,
                                const GGS_typeListeAttributsSemantiques  &var_cas_inFormalAttributesList,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  GGS_typeTypesList  var_cas_effectiveTypesList ;
  var_cas_effectiveTypesList = GGS_typeTypesList::constructor_empty (HERE) ;
  var_cas_outExpressionList = GGS_typeExpressionList::constructor_empty (HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_6 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__21) ;
          GGS_typeExpression  var_cas_expression ;
          GGS_AC_galgasType  var_cas_resultType ;
          nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_expression, var_cas_resultType) ;
          GGS_location  var_cas_errorLocation ;
          var_cas_errorLocation = GGS_location (_inLexique) ;
          var_cas_effectiveTypesList.addAssign_operation (var_cas_resultType, var_cas_errorLocation) ;
          var_cas_outExpressionList.addAssign_operation (var_cas_expression) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  GGS_location  var_cas_endOfListLocation ;
  var_cas_endOfListLocation = GGS_location (_inLexique) ;
  if (((var_cas_inFormalAttributesList.reader_length ()) < (var_cas_effectiveTypesList.reader_length ())).isBuiltAndTrue ()) {
      var_cas_endOfListLocation.reader_location ().signalGGSSemanticError (_inLexique, GGS_string (true, "too much expressions") SOURCE_FILE_AT_LINE (941)) ;
  }else if (((var_cas_inFormalAttributesList.reader_length ()) > (var_cas_effectiveTypesList.reader_length ())).isBuiltAndTrue ()) {
      var_cas_endOfListLocation.reader_location ().signalGGSSemanticError (_inLexique, GGS_string (true, "one or more expressions missing") SOURCE_FILE_AT_LINE (943)) ;
  }else{
    GGS_typeListeAttributsSemantiques::element_type * operand_35635 = var_cas_inFormalAttributesList.firstObject () ;
    GGS_typeTypesList::element_type * operand_35730 = var_cas_effectiveTypesList.firstObject () ;
    while ((operand_35635 != NULL)
        && (operand_35730 != NULL)) {
      macroValidPointer (operand_35635) ;
      macroValidPointer (operand_35730) ;
      ::routine_verifierCompatibiliteTypesSemantiques (_inLexique,  operand_35635->mAttributType,  operand_35730->mType,  operand_35730->mEndOfExpressionLocation SOURCE_FILE_AT_LINE (947)) ;
      operand_35635 = operand_35635->nextObject () ;
      operand_35730 = operand_35730->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_output_expression_list_expression_parser_913_30_parse (galgas_scanner & _inLexique) {
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_6 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__21) ;
          nt_expression_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'parse_effective_input_parameters_list'  *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_parse_effective_input_parameters_list_expression_parser_958_45_ (galgas_scanner & _inLexique,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeListeAttributsSemantiques  var_cas_inFormalArgumentsList,
                                GGS_location  var_cas_inVarLocation,
                                GGS_localConstantBuildStyleEnum var_cas_inLocalConstantStyle) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__28) ;
  GGS_L_nameWithType  var_cas_argumentsList ;
  var_cas_argumentsList = GGS_L_nameWithType::constructor_empty (HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_7 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3F_3F) ;
          GGS_lstring  var_cas_typeName ;
          GGS_lstring  var_cas_constantName ;
          switch (select_expression_parser_8 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_type_5Fname) ;
              var_cas_typeName.defineAttribute (_inLexique.tokenString, _inLexique) ;
              _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
              var_cas_constantName.defineAttribute (_inLexique.tokenString, _inLexique) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2A) ;
              var_cas_typeName = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
              var_cas_constantName = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          var_cas_argumentsList.addAssign_operation (var_cas_typeName, var_cas_constantName) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  GGS_bool var_cas_ellipsisFound ;
  switch (select_expression_parser_9 (_inLexique)) {
    case 1 : {
      var_cas_ellipsisFound = GGS_bool (true, false) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2E_2E_2E) ;
      var_cas_ellipsisFound = GGS_bool (true, true) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__29) ;
  ::routine_buildMapWithLocalConstants (_inLexique,  var_cas_argumentsList,  var_cas_inFormalArgumentsList,  var_cas_ioVariablesMap,  var_cas_inVarLocation,  var_cas_inLocalConstantStyle,  var_cas_ellipsisFound SOURCE_FILE_AT_LINE (991)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_parse_effective_input_parameters_list_expression_parser_958_45_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__28) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_7 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3F_3F) ;
          switch (select_expression_parser_8 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_type_5Fname) ;
              _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2A) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  switch (select_expression_parser_9 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2E_2E_2E) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__29) ;
}

//---------------------------------------------------------------------------*

