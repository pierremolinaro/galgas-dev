//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'expression_parser.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 20th, 2009, at 19h52'53"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "expression_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "expression_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchAndOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchAndOperator (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchAndOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_5337 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_5361 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_5337 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_5337) ;
    cPtr_typeGalgas_binaryset * operand_5361 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_5361) ;
    if ((operand_5337 != NULL) && (operand_5361 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_5337 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_5337) ;
      cPtr_typeGalgas_bool * operand_5361 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_5361) ;
      if ((operand_5337 != NULL) && (operand_5361 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_5337 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_5337) ;
        cPtr_typeGalgas_uint * operand_5361 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_5361) ;
        if ((operand_5337 != NULL) && (operand_5361 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_5337 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_5337) ;
          cPtr_typeGalgas_uint64 * operand_5361 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_5361) ;
          if ((operand_5337 != NULL) && (operand_5361 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_stringset * operand_5337 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_5337) ;
            cPtr_typeGalgas_stringset * operand_5361 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_5361) ;
            if ((operand_5337 != NULL) && (operand_5361 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint * operand_5337 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_5337) ;
              cPtr_typeGalgas_sint * operand_5361 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_5361) ;
              if ((operand_5337 != NULL) && (operand_5361 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                cPtr_typeGalgas_sint64 * operand_5337 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_5337) ;
                cPtr_typeGalgas_sint64 * operand_5361 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_5361) ;
                if ((operand_5337 != NULL) && (operand_5361 != NULL)) {
                  var_cas_outResultType = var_cas_inLeftExpressionType ;
                }else{
                  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (158)))).operator_concat (GGS_string (" & "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (159)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (161)) ;
                  var_cas_outResultType.drop () ;
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchAndOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchOrOperator"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchOrOperator (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchOrOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_6858 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_6882 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_6858 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_6858) ;
    cPtr_typeGalgas_binaryset * operand_6882 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_6882) ;
    if ((operand_6858 != NULL) && (operand_6882 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_6858 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_6858) ;
      cPtr_typeGalgas_bool * operand_6882 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_6882) ;
      if ((operand_6858 != NULL) && (operand_6882 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_6858 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_6858) ;
        cPtr_typeGalgas_uint * operand_6882 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_6882) ;
        if ((operand_6858 != NULL) && (operand_6882 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_6858 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_6858) ;
          cPtr_typeGalgas_uint64 * operand_6882 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_6882) ;
          if ((operand_6858 != NULL) && (operand_6882 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint * operand_6858 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_6858) ;
            cPtr_typeGalgas_sint * operand_6882 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_6882) ;
            if ((operand_6858 != NULL) && (operand_6882 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint64 * operand_6858 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_6858) ;
              cPtr_typeGalgas_sint64 * operand_6882 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_6882) ;
              if ((operand_6858 != NULL) && (operand_6882 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                cPtr_typeGalgas_stringset * operand_6858 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_6858) ;
                cPtr_typeGalgas_stringset * operand_6882 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_6882) ;
                if ((operand_6858 != NULL) && (operand_6882 != NULL)) {
                  var_cas_outResultType = var_cas_inLeftExpressionType ;
                }else{
                  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (191)))).operator_concat (GGS_string (" | "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (192)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (194)) ;
                  var_cas_outResultType.drop () ;
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchOrOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchXorOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchXorOperator (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchXorOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_8380 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_8404 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_8380 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_8380) ;
    cPtr_typeGalgas_binaryset * operand_8404 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_8404) ;
    if ((operand_8380 != NULL) && (operand_8404 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_8380 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_8380) ;
      cPtr_typeGalgas_bool * operand_8404 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_8404) ;
      if ((operand_8380 != NULL) && (operand_8404 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_8380 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_8380) ;
        cPtr_typeGalgas_uint * operand_8404 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_8404) ;
        if ((operand_8380 != NULL) && (operand_8404 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_8380 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_8380) ;
          cPtr_typeGalgas_uint64 * operand_8404 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_8404) ;
          if ((operand_8380 != NULL) && (operand_8404 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint * operand_8380 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_8380) ;
            cPtr_typeGalgas_sint * operand_8404 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_8404) ;
            if ((operand_8380 != NULL) && (operand_8404 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint64 * operand_8380 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_8380) ;
              cPtr_typeGalgas_sint64 * operand_8404 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_8404) ;
              if ((operand_8380 != NULL) && (operand_8404 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (222)))).operator_concat (GGS_string (" | "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (223)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (225)) ;
                var_cas_outResultType.drop () ;
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchXorOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "matchConcatOperator"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchConcatOperator (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchConcatOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_9799 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_9823 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_string * operand_9799 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_9799) ;
    cPtr_typeGalgas_string * operand_9823 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_9823) ;
    if ((operand_9799 != NULL) && (operand_9823 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_string * operand_9799 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_9799) ;
      cPtr_typeGalgas_lstring * operand_9823 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_9823) ;
      if ((operand_9799 != NULL) && (operand_9823 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgasUndefinedListType * operand_9799 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_9799) ;
        cPtr_typeGalgasUndefinedListType * operand_9823 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_9823) ;
        if ((operand_9799 != NULL) && (operand_9823 != NULL)) {
          if (((operand_9799->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (245))).operator_isNotEqual (operand_9823->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (245)))).isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("concatenation operator error: lists should have the same type (here '@")).operator_concat (operand_9799->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (247)))).operator_concat (GGS_string ("' is different from '@"))).operator_concat (operand_9823->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (247)))).operator_concat (GGS_string ("')")) COMMA_SOURCE_FILE_AT_LINE (248)) ;
          }
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgasListmapType * operand_9799 = dynamic_cast <cPtr_typeGalgasListmapType *> (ptr_9799) ;
          cPtr_typeGalgasListmapType * operand_9823 = dynamic_cast <cPtr_typeGalgasListmapType *> (ptr_9823) ;
          if ((operand_9799 != NULL) && (operand_9823 != NULL)) {
            if (((operand_9799->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (251))).operator_isNotEqual (operand_9823->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (251)))).isBuiltAndTrue ()) {
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("concatenation operator error: listmaps should have the same type (here '@")).operator_concat (operand_9799->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (253)))).operator_concat (GGS_string ("' is different from '@"))).operator_concat (operand_9823->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (253)))).operator_concat (GGS_string ("')")) COMMA_SOURCE_FILE_AT_LINE (254)) ;
            }
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("concatenation operator error: @")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (257)))).operator_concat (GGS_string (" and @"))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (258)))).operator_concat (GGS_string (" objects cannot be concatened")) COMMA_SOURCE_FILE_AT_LINE (260)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchConcatOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "checkNotOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkNotOperator (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkNotOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_typeGalgas_bool  var_cas_gb = GGS_typeGalgas_bool::castFrom (inLexique, var_cas_inOperandType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (273)) ;
  var_cas_outResultType = var_cas_inOperandType ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkNotOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "checkLogicalNegateOperator"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkLogicalNegateOperator (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkLogicalNegateOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_AC_galgasType _var_12719 = var_cas_inOperandType ; // CAST instruction
    if (_var_12719.getPtr () != NULL) {
      macroValidPointer (_var_12719.getPtr ()) ;
      if (dynamic_cast <cPtr_typeGalgas_binaryset *> (_var_12719.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_uint *> (_var_12719.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint *> (_var_12719.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_uint64 *> (_var_12719.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint64 *> (_var_12719.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the ~ operator is not defined for an ")).operator_concat (var_cas_inOperandType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (300)))).operator_concat (GGS_string (" object")) COMMA_SOURCE_FILE_AT_LINE (302)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkLogicalNegateOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "comparison_types_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_comparison_types_check (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_comparison_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_13278 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_13302 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_13278 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_13278) ;
    cPtr_typeGalgas_binaryset * operand_13302 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_13302) ;
    if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
    }else{
      cPtr_typeGalgas_stringset * operand_13278 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_13278) ;
      cPtr_typeGalgas_stringset * operand_13302 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_13302) ;
      if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
      }else{
        cPtr_typeGalgas_bool * operand_13278 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_13278) ;
        cPtr_typeGalgas_bool * operand_13302 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_13302) ;
        if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
        }else{
          cPtr_typeGalgas_char * operand_13278 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_13278) ;
          cPtr_typeGalgas_char * operand_13302 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_13302) ;
          if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
          }else{
            cPtr_typeGalgas_uint * operand_13278 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_13278) ;
            cPtr_typeGalgas_uint * operand_13302 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_13302) ;
            if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
            }else{
              cPtr_typeGalgas_sint * operand_13278 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_13278) ;
              cPtr_typeGalgas_sint * operand_13302 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_13302) ;
              if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
              }else{
                cPtr_typeGalgas_uint64 * operand_13278 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_13278) ;
                cPtr_typeGalgas_uint64 * operand_13302 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_13302) ;
                if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
                }else{
                  cPtr_typeGalgas_sint64 * operand_13278 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_13278) ;
                  cPtr_typeGalgas_sint64 * operand_13302 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_13302) ;
                  if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
                  }else{
                    cPtr_typeGalgas_double * operand_13278 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_13278) ;
                    cPtr_typeGalgas_double * operand_13302 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_13302) ;
                    if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
                    }else{
                      cPtr_typeGalgas_string * operand_13278 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_13278) ;
                      cPtr_typeGalgas_string * operand_13302 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_13302) ;
                      if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
                      }else{
                        cPtr_typeGalgas_lbool * operand_13278 = dynamic_cast <cPtr_typeGalgas_lbool *> (ptr_13278) ;
                        cPtr_typeGalgas_lbool * operand_13302 = dynamic_cast <cPtr_typeGalgas_lbool *> (ptr_13302) ;
                        if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
                        }else{
                          cPtr_typeGalgas_lchar * operand_13278 = dynamic_cast <cPtr_typeGalgas_lchar *> (ptr_13278) ;
                          cPtr_typeGalgas_lchar * operand_13302 = dynamic_cast <cPtr_typeGalgas_lchar *> (ptr_13302) ;
                          if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
                          }else{
                            cPtr_typeGalgas_luint * operand_13278 = dynamic_cast <cPtr_typeGalgas_luint *> (ptr_13278) ;
                            cPtr_typeGalgas_luint * operand_13302 = dynamic_cast <cPtr_typeGalgas_luint *> (ptr_13302) ;
                            if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
                            }else{
                              cPtr_typeGalgas_lsint * operand_13278 = dynamic_cast <cPtr_typeGalgas_lsint *> (ptr_13278) ;
                              cPtr_typeGalgas_lsint * operand_13302 = dynamic_cast <cPtr_typeGalgas_lsint *> (ptr_13302) ;
                              if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
                              }else{
                                cPtr_typeGalgas_luint64 * operand_13278 = dynamic_cast <cPtr_typeGalgas_luint64 *> (ptr_13278) ;
                                cPtr_typeGalgas_luint64 * operand_13302 = dynamic_cast <cPtr_typeGalgas_luint64 *> (ptr_13302) ;
                                if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
                                }else{
                                  cPtr_typeGalgas_lsint64 * operand_13278 = dynamic_cast <cPtr_typeGalgas_lsint64 *> (ptr_13278) ;
                                  cPtr_typeGalgas_lsint64 * operand_13302 = dynamic_cast <cPtr_typeGalgas_lsint64 *> (ptr_13302) ;
                                  if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
                                  }else{
                                    cPtr_typeGalgas_ldouble * operand_13278 = dynamic_cast <cPtr_typeGalgas_ldouble *> (ptr_13278) ;
                                    cPtr_typeGalgas_ldouble * operand_13302 = dynamic_cast <cPtr_typeGalgas_ldouble *> (ptr_13302) ;
                                    if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
                                    }else{
                                      cPtr_typeGalgas_lstring * operand_13278 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_13278) ;
                                      cPtr_typeGalgas_lstring * operand_13302 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_13302) ;
                                      if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
                                      }else{
                                        cPtr_typeGalgas_location * operand_13278 = dynamic_cast <cPtr_typeGalgas_location *> (ptr_13278) ;
                                        cPtr_typeGalgas_location * operand_13302 = dynamic_cast <cPtr_typeGalgas_location *> (ptr_13302) ;
                                        if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
                                        }else{
                                          cPtr_typeGalgas_filewrapper * operand_13278 = dynamic_cast <cPtr_typeGalgas_filewrapper *> (ptr_13278) ;
                                          cPtr_typeGalgas_filewrapper * operand_13302 = dynamic_cast <cPtr_typeGalgas_filewrapper *> (ptr_13302) ;
                                          if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
                                          }else{
                                            cPtr_typeGalgas_enum * operand_13278 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_13278) ;
                                            cPtr_typeGalgas_enum * operand_13302 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_13302) ;
                                            if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
                                              if (((operand_13278->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (337))).operator_isNotEqual (operand_13302->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (337)))).isBuiltAndTrue ()) {
                                                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between an '@")).operator_concat (operand_13278->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (338)))).operator_concat (GGS_string ("' enumeration and an '@"))).operator_concat (operand_13302->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (339)))).operator_concat (GGS_string ("' enumeration is not valid")) COMMA_SOURCE_FILE_AT_LINE (340)) ;
                                              }
                                            }else{
                                              cPtr_typeGalgasUndefinedListType * operand_13278 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_13278) ;
                                              cPtr_typeGalgasUndefinedListType * operand_13302 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_13302) ;
                                              if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
                                                if (((operand_13278->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (342))).operator_isNotEqual (operand_13302->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (342)))).isBuiltAndTrue ()) {
                                                  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("I was expecting the list type '@")).operator_concat (operand_13278->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (343)))).operator_concat (GGS_string ("', I have got the list type '@"))).operator_concat (operand_13302->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (344)))).operator_concat (GGS_string ("\"")) COMMA_SOURCE_FILE_AT_LINE (345)) ;
                                                }
                                              }else{
                                                cPtr_typeGalgasUndefinedMapType * operand_13278 = dynamic_cast <cPtr_typeGalgasUndefinedMapType *> (ptr_13278) ;
                                                cPtr_typeGalgasUndefinedMapType * operand_13302 = dynamic_cast <cPtr_typeGalgasUndefinedMapType *> (ptr_13302) ;
                                                if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
                                                  if (((operand_13278->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (348))).operator_isNotEqual (operand_13302->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (348)))).isBuiltAndTrue ()) {
                                                    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("I was expecting the map type '@")).operator_concat (operand_13278->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (349)))).operator_concat (GGS_string ("', I have got the map type '@"))).operator_concat (operand_13302->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (350)))).operator_concat (GGS_string ("\"")) COMMA_SOURCE_FILE_AT_LINE (351)) ;
                                                  }
                                                }else{
                                                  cPtr_typeGalgasUndefinedClassType * operand_13278 = dynamic_cast <cPtr_typeGalgasUndefinedClassType *> (ptr_13278) ;
                                                  cPtr_typeGalgasUndefinedClassType * operand_13302 = dynamic_cast <cPtr_typeGalgasUndefinedClassType *> (ptr_13302) ;
                                                  if ((operand_13278 != NULL) && (operand_13302 != NULL)) {
                                                    if (((operand_13278->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (355))).operator_isNotEqual (operand_13302->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (355)))).isBuiltAndTrue ()) {
                                                      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("I was expecting the class type '@")).operator_concat (operand_13278->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (356)))).operator_concat (GGS_string ("', I have got the class type '@"))).operator_concat (operand_13302->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (357)))).operator_concat (GGS_string ("\"")) COMMA_SOURCE_FILE_AT_LINE (358)) ;
                                                    }
                                                  }else{
                                                    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (360)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (361)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (362)) ;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_comparison_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "magnitude_comparison_types_check"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_magnitude_comparison_types_check (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_magnitude_comparison_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_16648 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_16672 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_stringset * operand_16648 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_16648) ;
    cPtr_typeGalgas_stringset * operand_16672 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_16672) ;
    if ((operand_16648 != NULL) && (operand_16672 != NULL)) {
    }else{
      cPtr_typeGalgas_bool * operand_16648 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_16648) ;
      cPtr_typeGalgas_bool * operand_16672 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_16672) ;
      if ((operand_16648 != NULL) && (operand_16672 != NULL)) {
      }else{
        cPtr_typeGalgas_char * operand_16648 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_16648) ;
        cPtr_typeGalgas_char * operand_16672 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_16672) ;
        if ((operand_16648 != NULL) && (operand_16672 != NULL)) {
        }else{
          cPtr_typeGalgas_uint * operand_16648 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_16648) ;
          cPtr_typeGalgas_uint * operand_16672 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_16672) ;
          if ((operand_16648 != NULL) && (operand_16672 != NULL)) {
          }else{
            cPtr_typeGalgas_sint * operand_16648 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_16648) ;
            cPtr_typeGalgas_sint * operand_16672 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_16672) ;
            if ((operand_16648 != NULL) && (operand_16672 != NULL)) {
            }else{
              cPtr_typeGalgas_uint64 * operand_16648 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_16648) ;
              cPtr_typeGalgas_uint64 * operand_16672 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_16672) ;
              if ((operand_16648 != NULL) && (operand_16672 != NULL)) {
              }else{
                cPtr_typeGalgas_sint64 * operand_16648 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_16648) ;
                cPtr_typeGalgas_sint64 * operand_16672 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_16672) ;
                if ((operand_16648 != NULL) && (operand_16672 != NULL)) {
                }else{
                  cPtr_typeGalgas_double * operand_16648 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_16648) ;
                  cPtr_typeGalgas_double * operand_16672 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_16672) ;
                  if ((operand_16648 != NULL) && (operand_16672 != NULL)) {
                  }else{
                    cPtr_typeGalgas_string * operand_16648 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_16648) ;
                    cPtr_typeGalgas_string * operand_16672 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_16672) ;
                    if ((operand_16648 != NULL) && (operand_16672 != NULL)) {
                    }else{
                      cPtr_typeGalgas_enum * operand_16648 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_16648) ;
                      cPtr_typeGalgas_enum * operand_16672 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_16672) ;
                      if ((operand_16648 != NULL) && (operand_16672 != NULL)) {
                        if (((operand_16648->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (386))).operator_isNotEqual (operand_16672->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (386)))).isBuiltAndTrue ()) {
                          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between an '@")).operator_concat (operand_16648->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (387)))).operator_concat (GGS_string ("' enumeration and an '@"))).operator_concat (operand_16672->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (388)))).operator_concat (GGS_string ("' enumeration is not valid")) COMMA_SOURCE_FILE_AT_LINE (389)) ;
                        }
                      }else{
                        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (391)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (392)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (393)) ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_magnitude_comparison_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "left_shift_types_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_left_shift_types_check (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_left_shift_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_18306 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_18330 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_18306 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_18306) ;
    cPtr_typeGalgas_uint * operand_18330 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18330) ;
    if ((operand_18306 != NULL) && (operand_18330 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_uint * operand_18306 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18306) ;
      cPtr_typeGalgas_uint * operand_18330 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18330) ;
      if ((operand_18306 != NULL) && (operand_18330 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_sint * operand_18306 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_18306) ;
        cPtr_typeGalgas_uint * operand_18330 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18330) ;
        if ((operand_18306 != NULL) && (operand_18330 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_18306 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_18306) ;
          cPtr_typeGalgas_uint * operand_18330 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18330) ;
          if ((operand_18306 != NULL) && (operand_18330 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint64 * operand_18306 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_18306) ;
            cPtr_typeGalgas_uint * operand_18330 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18330) ;
            if ((operand_18306 != NULL) && (operand_18330 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("shift between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (419)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (420)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (423)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_left_shift_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "right_shift_types_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_right_shift_types_check (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_right_shift_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_19312 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_19336 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_19312 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_19312) ;
    cPtr_typeGalgas_uint * operand_19336 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19336) ;
    if ((operand_19312 != NULL) && (operand_19336 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_uint * operand_19312 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19312) ;
      cPtr_typeGalgas_uint * operand_19336 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19336) ;
      if ((operand_19312 != NULL) && (operand_19336 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_sint * operand_19312 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_19312) ;
        cPtr_typeGalgas_uint * operand_19336 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19336) ;
        if ((operand_19312 != NULL) && (operand_19336 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_19312 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_19312) ;
          cPtr_typeGalgas_uint * operand_19336 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19336) ;
          if ((operand_19312 != NULL) && (operand_19336 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint64 * operand_19312 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_19312) ;
            cPtr_typeGalgas_uint * operand_19336 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19336) ;
            if ((operand_19312 != NULL) && (operand_19336 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("shift between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (445)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (446)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (449)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_right_shift_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "addition_types_check"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addition_types_check (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addition_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_20627 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_20651 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_20627 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_20627) ;
    cPtr_typeGalgas_uint * operand_20651 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_20651) ;
    if ((operand_20627 != NULL) && (operand_20651 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_20627 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_20627) ;
      cPtr_typeGalgas_sint * operand_20651 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_20651) ;
      if ((operand_20627 != NULL) && (operand_20651 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_20627 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_20627) ;
        cPtr_typeGalgas_uint64 * operand_20651 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_20651) ;
        if ((operand_20627 != NULL) && (operand_20651 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_20627 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_20627) ;
          cPtr_typeGalgas_sint64 * operand_20651 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_20651) ;
          if ((operand_20627 != NULL) && (operand_20651 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("addition between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (473)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (474)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (477)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addition_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "substraction_types_check"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_substraction_types_check (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_substraction_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_21852 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_21876 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_21852 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_21852) ;
    cPtr_typeGalgas_uint * operand_21876 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_21876) ;
    if ((operand_21852 != NULL) && (operand_21876 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_21852 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_21852) ;
      cPtr_typeGalgas_sint * operand_21876 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_21876) ;
      if ((operand_21852 != NULL) && (operand_21876 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_21852 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_21852) ;
        cPtr_typeGalgas_uint64 * operand_21876 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_21876) ;
        if ((operand_21852 != NULL) && (operand_21876 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_21852 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_21852) ;
          cPtr_typeGalgas_sint64 * operand_21876 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_21876) ;
          if ((operand_21852 != NULL) && (operand_21876 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_stringset * operand_21852 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_21852) ;
            cPtr_typeGalgas_stringset * operand_21876 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_21876) ;
            if ((operand_21852 != NULL) && (operand_21876 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("substraction between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (503)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (504)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (507)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_substraction_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "multiply_types_check"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_multiply_types_check (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_multiply_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_23183 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_23207 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_23183 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_23183) ;
    cPtr_typeGalgas_uint * operand_23207 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_23207) ;
    if ((operand_23183 != NULL) && (operand_23207 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_23183 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_23183) ;
      cPtr_typeGalgas_sint * operand_23207 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_23207) ;
      if ((operand_23183 != NULL) && (operand_23207 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_23183 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_23183) ;
        cPtr_typeGalgas_uint64 * operand_23207 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_23207) ;
        if ((operand_23183 != NULL) && (operand_23207 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_23183 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_23183) ;
          cPtr_typeGalgas_sint64 * operand_23207 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_23207) ;
          if ((operand_23183 != NULL) && (operand_23207 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("multiplication between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (531)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (532)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (535)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_multiply_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "divide_types_check"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_divide_types_check (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_divide_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_24408 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_24432 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_24408 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_24408) ;
    cPtr_typeGalgas_uint * operand_24432 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_24432) ;
    if ((operand_24408 != NULL) && (operand_24432 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_24408 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_24408) ;
      cPtr_typeGalgas_sint * operand_24432 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_24432) ;
      if ((operand_24408 != NULL) && (operand_24432 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_24408 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_24408) ;
        cPtr_typeGalgas_uint64 * operand_24432 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_24432) ;
        if ((operand_24408 != NULL) && (operand_24432 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_24408 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_24408) ;
          cPtr_typeGalgas_sint64 * operand_24432 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_24432) ;
          if ((operand_24408 != NULL) && (operand_24432 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("division between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (559)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (560)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (563)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_divide_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "modulo_types_check"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_modulo_types_check (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_modulo_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_25627 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_25651 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_25627 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_25627) ;
    cPtr_typeGalgas_uint * operand_25651 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_25651) ;
    if ((operand_25627 != NULL) && (operand_25651 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_25627 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_25627) ;
      cPtr_typeGalgas_sint * operand_25651 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_25651) ;
      if ((operand_25627 != NULL) && (operand_25651 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_25627 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_25627) ;
        cPtr_typeGalgas_uint64 * operand_25651 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_25651) ;
        if ((operand_25627 != NULL) && (operand_25651 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_25627 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_25627) ;
          cPtr_typeGalgas_sint64 * operand_25651 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_25651) ;
          if ((operand_25627 != NULL) && (operand_25651 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("modulo between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (587)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (588)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (591)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_modulo_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "unary_minus_type_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_unary_minus_type_check (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_unary_minus_type_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_AC_galgasType _var_27080 = var_cas_inExpressionType ; // CAST instruction
    if (_var_27080.getPtr () != NULL) {
      macroValidPointer (_var_27080.getPtr ()) ;
      if (dynamic_cast <cPtr_typeGalgas_sint *> (_var_27080.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inExpressionType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint64 *> (_var_27080.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inExpressionType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("unary minus for ")).operator_concat (var_cas_inExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (610)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (614)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_unary_minus_type_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_expression_expression_parser_623_17_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_concatenation_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_expression_parser_0 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_concatenation_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeConcatOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchConcatOperator (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (656)) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_expression_expression_parser_623_17_parse (galgas_scanner & inLexique) {
  nt_concatenation_term_parse (inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_expression_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
          nt_concatenation_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'concatenation_term'           *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_concatenation_term_expression_parser_670_25_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_expression_parser_1 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7C_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeOrOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchOrOperator (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (703)) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5E_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeXorOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchXorOperator (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (724)) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_concatenation_term_expression_parser_670_25_parse (galgas_scanner & inLexique) {
  nt_relation_term_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_expression_parser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7C_) COMMA_HERE) ;
          nt_relation_term_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5E_) COMMA_HERE) ;
          nt_relation_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'relation_term'              *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_relation_term_expression_parser_738_20_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_expression_parser_2 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__26_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeAndOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchAndOperator (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (771)) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_relation_term_expression_parser_738_20_parse (galgas_scanner & inLexique) {
  nt_relation_factor_parse (inLexique) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_expression_parser_2 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__26_) COMMA_HERE) ;
          nt_relation_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'relation_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_relation_factor_expression_parser_785_22_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  switch (select_expression_parser_3 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (816)) ;
      var_cas_outExpression = GGS_typeEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (834)) ;
      var_cas_outExpression = GGS_typeNonEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 4 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (852)) ;
      var_cas_outExpression = GGS_typeInfOrEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 5 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (870)) ;
      var_cas_outExpression = GGS_typeSupOrEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 6 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (888)) ;
      var_cas_outExpression = GGS_typeStrictSupTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 7 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (906)) ;
      var_cas_outExpression = GGS_typeStrictInfTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_relation_factor_expression_parser_785_22_parse (galgas_scanner & inLexique) {
  nt_simple_expression_parse (inLexique) ;
  switch (select_expression_parser_3 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'simple_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_simple_expression_expression_parser_918_24_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_repeat_expression_parser_4 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C__3C_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_left_shift_types_check (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (950)) ;
          var_cas_outExpression = GGS_typeLeftShiftOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E__3E_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_right_shift_types_check (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (967)) ;
          var_cas_outExpression = GGS_typeRightShiftOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_addition_types_check (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (984)) ;
          var_cas_outExpression = GGS_typeAddOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 5 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_substraction_types_check (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1001)) ;
          var_cas_outExpression = GGS_typeSubOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_simple_expression_expression_parser_918_24_parse (galgas_scanner & inLexique) {
  nt_term_parse (inLexique) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_repeat_expression_parser_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C__3C_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E__3E_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'term'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_term_expression_parser_1012_11_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_repeat_expression_parser_5 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_multiply_types_check (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1044)) ;
          var_cas_outExpression = GGS_typeMultiplyOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2F_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_divide_types_check (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1061)) ;
          var_cas_outExpression = GGS_typeDivideOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_mod) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_modulo_types_check (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1078)) ;
          var_cas_outExpression = GGS_typeModuloOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_term_expression_parser_1012_11_parse (galgas_scanner & inLexique) {
  nt_factor_parse (inLexique) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_repeat_expression_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2F_) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_mod) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1089_13_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_expression ;
  GGS_AC_galgasType  var_cas_type ;
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expression, var_cas_type) ;
  ::routine_unary_minus_type_check (inLexique,  var_cas_type,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1109)) ;
  var_cas_outExpression = GGS_typeUnaryMinusOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_expression COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1089_13_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1119_13_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_typeCplusPlusName  var_cas_nomCppEntite1 ;
  GGS_lstring  automatic_var_0 ;
  nt_read_access_ (inLexique, automatic_var_0, var_cas_nomCppEntite1, var_cas_outResultType, var_cas_ioVariablesMap) ;
  var_cas_outExpression = GGS_typeVarInExpression ::constructor_new (inLexique, var_cas_nomCppEntite1, GGS_lstringlist ::constructor_emptyList () COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1119_13_parse (galgas_scanner & inLexique) {
  nt_read_access_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1140_13_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  switch (select_expression_parser_6 (inLexique)) {
    case 1 : {
      nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_cast) COMMA_HERE) ;
      GGS_typeExpression  var_cas_castedExpression ;
      GGS_AC_galgasType  var_cas_castExpressionType ;
      nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_castedExpression, var_cas_castExpressionType) ;
      GGS_lstring  var_cas_kSourceExpresionClassName = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_castExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1171)).reader_mClassTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (1171)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
      GGS_bool var_cas_checkForKindOfClass ;
      switch (select_expression_parser_7 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E__3D_) COMMA_HERE) ;
          var_cas_checkForKindOfClass = GGS_bool (true) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D__3D_) COMMA_HERE) ;
          var_cas_checkForKindOfClass = GGS_bool (false) ;
          } break ;
        default :
          break ;
      }
      GGS_lstring  var_cas_castedTypeName ;
      inLexique.assignFromAttribute_tokenString (var_cas_castedTypeName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite ;
      const GGS_M_semanticsEntitiesForUse  temp_45987 = var_cas_inEntitiesMap ;
      if (temp_45987.isBuilt ()) {
        temp_45987 (HERE)->method_searchKey (inLexique, var_cas_castedTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1186)) ;
      }
      var_cas_outResultType = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_castedTypeName COMMA_SOURCE_FILE_AT_LINE (1187)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (1187)) ;
      GGS_typeGalgasClassType  var_cas_resultClassType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_outResultType.getPtr (), true, var_cas_castedTypeName COMMA_SOURCE_FILE_AT_LINE (1189)) ;
      GGS_typeSuperClassesMap  var_cas_superClassMap = var_cas_resultClassType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1190)) ;
      GGS_string var_cas_classMessage = var_cas_resultClassType.reader_mClassMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (1191)) ;
      if (((var_cas_classMessage.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1193))).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
        var_cas_castedTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("in order to be used in a cast expression, the '@")).operator_concat (var_cas_castedTypeName)).operator_concat (GGS_string ("' class should define a class message")) COMMA_SOURCE_FILE_AT_LINE (1195)) ;
      }
      GGS_string var_cas_sourceExpressionTypeNameString = var_cas_kSourceExpresionClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1197)) ;
      if (((var_cas_checkForKindOfClass).operator_not ()).isBuiltAndTrue ()) {
        if ((((var_cas_castedTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1199))).operator_isNotEqual (var_cas_sourceExpressionTypeNameString)).operator_and ((var_cas_superClassMap.reader_hasKey (inLexique, var_cas_sourceExpressionTypeNameString COMMA_SOURCE_FILE_AT_LINE (1199))).operator_not ())).isBuiltAndTrue ()) {
          var_cas_castedTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("This class is not '@")).operator_concat (var_cas_sourceExpressionTypeNameString)).operator_concat (GGS_string ("' and does inherit from it")) COMMA_SOURCE_FILE_AT_LINE (1201)) ;
        }
      }else if (((var_cas_superClassMap.reader_hasKey (inLexique, var_cas_sourceExpressionTypeNameString COMMA_SOURCE_FILE_AT_LINE (1202))).operator_not ()).isBuiltAndTrue ()) {
        var_cas_castedTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("This class does not inherit from '@")).operator_concat (var_cas_sourceExpressionTypeNameString)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1204)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
      GGS_typeExpression  var_cas_errorLocationExpression ;
      GGS_AC_galgasType  var_cas_errorLocationExpressionType ;
      nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_errorLocationExpression, var_cas_errorLocationExpressionType) ;
      const GGS_AC_galgasType  temp_47755 = var_cas_errorLocationExpressionType ;
      if (temp_47755.isBuilt ()) {
        temp_47755 (HERE)->method_checkAbilityToBeSilentlyConvertedToLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (1218)) ;
      }
      var_cas_outExpression = GGS_typeCastInExpression ::constructor_new (inLexique, var_cas_castedExpression, var_cas_checkForKindOfClass, var_cas_castedTypeName, var_cas_errorLocationExpression COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1140_13_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  switch (select_expression_parser_6 (inLexique)) {
    case 1 : {
      nt_expression_parse (inLexique) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_cast) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
      switch (select_expression_parser_7 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E__3D_) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D__3D_) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1236_13_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_not) COMMA_HERE) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeTestComplement ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_ifCondition COMMA_HERE) ;
  ::routine_checkNotOperator (inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1257)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1236_13_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_not) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1266_13_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7E_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeLogicalNegate ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_ifCondition COMMA_HERE) ;
  ::routine_checkLogicalNegateOperator (inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1287)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1266_13_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7E_) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1296_13_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_true) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeTrueBool ::constructor_new (inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1296_13_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_true) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1315_13_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_false) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeFalseBool ::constructor_new (inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1315_13_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_false) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1334_13_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_stringlist  var_cas_literalStringList = GGS_stringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
        GGS_lstring  var_cas_literalString ;
        inLexique.assignFromAttribute_tokenString (var_cas_literalString) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
        var_cas_literalStringList.addAssign_operation (var_cas_literalString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1346))) ;
      switch (select_repeat_expression_parser_8 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
  var_cas_outExpression = GGS_typeLiteralStringExpression ::constructor_new (inLexique, var_cas_literalStringList COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1334_13_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      switch (select_repeat_expression_parser_8 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1359_13_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint32value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralUIntExpression ::constructor_new (inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1359_13_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1379_13_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint  var_cas_literalInt ;
  inLexique.assignFromAttribute_sint32value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_signed_5F_literal_5F_integer) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralSIntExpression ::constructor_new (inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_sint ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1379_13_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_signed_5F_literal_5F_integer) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1399_13_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint64value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralUInt64Expression ::constructor_new (inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_uint64 ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1399_13_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1419_13_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_sint64value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_signed_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralSInt64Expression ::constructor_new (inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_sint64 ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1419_13_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_signed_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1439_13_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lchar  var_cas_literalChar ;
  inLexique.assignFromAttribute_charValue (var_cas_literalChar) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_char) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralCharExpression ::constructor_new (inLexique, var_cas_literalChar COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_char ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1439_13_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_char) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1459_13_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_ldouble  var_cas_literalDouble ;
  inLexique.assignFromAttribute_floatValue (var_cas_literalDouble) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_double) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralDoubleExpression ::constructor_new (inLexique, var_cas_literalDouble COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_double ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1459_13_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_double) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1479_13_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_here) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeHereExpression ::constructor_new (inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_location ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1479_13_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_here) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1498_13_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
  GGS_typeExpression  var_cas_ifExpression ;
  GGS_AC_galgasType  var_cas_ifExpressionType ;
  nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_ifExpression, var_cas_ifExpressionType) ;
  GGS_typeGalgas_bool  var_cas_gb = GGS_typeGalgas_bool::castFrom (inLexique, var_cas_ifExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1519)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_then) COMMA_HERE) ;
  GGS_typeExpression  var_cas_thenExpression ;
  nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_thenExpression, var_cas_outResultType) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
  GGS_location  var_cas_errorLocation = GGS_location (inLexique) ;
  GGS_typeExpression  var_cas_elseExpression ;
  GGS_AC_galgasType  var_cas_elseExpressionType ;
  nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_elseExpression, var_cas_elseExpressionType) ;
  ::routine_checkAssignmentTypesCompatibility (inLexique,  var_cas_outResultType,  var_cas_elseExpressionType,  var_cas_errorLocation,  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1545)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeIfThenElseExpression ::constructor_new (inLexique, var_cas_ifExpression, var_cas_thenExpression, var_cas_elseExpression COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1498_13_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_then) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1570_13_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_expressionValue ;
  GGS_AC_galgasType  var_cas_expressionType ;
  nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expressionValue, var_cas_expressionType) ;
  switch (select_expression_parser_9 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_description) COMMA_HERE) ;
      var_cas_outExpression = GGS_typeDescriptionInExpression ::constructor_new (inLexique, var_cas_expressionValue, GGS_location (inLexique) COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_lstring  var_cas_methodName ;
      inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_accessorsTypeList ;
      GGS_string var_cas_conversionMethod ;
      GGS_string var_cas_categoryReaderClassBaseName ;
      ::routine_handleReaderCall (inLexique,  var_cas_inEntitiesMap,  var_cas_inSemanticContext.reader_mCategoryReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1604)),  var_cas_expressionType,  var_cas_methodName,  var_cas_accessorsTypeList,  var_cas_outResultType,  var_cas_conversionMethod,  var_cas_categoryReaderClassBaseName COMMA_SOURCE_FILE_AT_LINE (1602)) ;
      GGS_typeExpressionList  var_cas_expressionList ;
      nt_output_expression_list_ (inLexique, var_cas_expressionList, var_cas_accessorsTypeList, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap) ;
      var_cas_outExpression = GGS_typeReaderCallInExpression ::constructor_new (inLexique, var_cas_expressionValue, var_cas_methodName, var_cas_expressionList, var_cas_conversionMethod, var_cas_categoryReaderClassBaseName COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1570_13_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  switch (select_expression_parser_9 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_description) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      nt_output_expression_list_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1635_13_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_mClassMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mClassMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_e ;
  const GGS_M_semanticsEntitiesForUse  temp_64015 = var_cas_inEntitiesMap ;
  if (temp_64015.isBuilt ()) {
    temp_64015 (HERE)->method_searchKey (inLexique, var_cas_className, var_cas_e COMMA_SOURCE_FILE_AT_LINE (1651)) ;
  }
  var_cas_outResultType = GGS_typeEntiteType::castFrom (inLexique, var_cas_e.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (1652)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (1652)) ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques ;
  GGS_bool var_cas_hasLexiqueAndLocationArguments ;
  const GGS_AC_galgasType  temp_64257 = var_cas_outResultType ;
  if (temp_64257.isBuilt ()) {
    temp_64257 (HERE)->method_handleConstructorCall (inLexique, var_cas_mClassMethodName, var_cas_listeAttributsSemantiques, var_cas_hasLexiqueAndLocationArguments COMMA_SOURCE_FILE_AT_LINE (1655)) ;
  }
  GGS_typeExpressionList  var_cas_expressionList ;
  nt_output_expression_list_ (inLexique, var_cas_expressionList, var_cas_listeAttributsSemantiques, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap) ;
  var_cas_outExpression = GGS_typeConstructorExpression ::constructor_new (inLexique, var_cas_outResultType, var_cas_mClassMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1668)), var_cas_hasLexiqueAndLocationArguments, var_cas_expressionList COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1635_13_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_output_expression_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1684_13_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
  switch (select_expression_parser_10 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
      GGS_lstring  var_cas_optionName ;
      inLexique.assignFromAttribute_tokenString (var_cas_optionName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      if (((var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1698))).operator_isNotEqual (GGS_string ("verbose_output"))).isBuiltAndTrue ()) {
        var_cas_optionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this option name does not correspond to a builtin option") COMMA_SOURCE_FILE_AT_LINE (1700)) ;
      }
      var_cas_outExpression = GGS_typeBoolOption ::constructor_new (inLexique, GGS_string ("galgas_cli_options"), var_cas_optionName COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_lstring  var_cas_optionComponentName ;
      inLexique.assignFromAttribute_tokenString (var_cas_optionComponentName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_M_cli_options  var_cas_boolOptionsMap ;
      GGS_M_cli_options  var_cas_uintOptionsMap ;
      GGS_M_cli_options  var_cas_stringOptionsMap ;
      const GGS_M_optionComponents  temp_66298 = var_cas_inOptionsComponentsMapForUse ;
      if (temp_66298.isBuilt ()) {
        temp_66298 (HERE)->method_searchKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (1709)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
      GGS_lstring  var_cas_optionName ;
      inLexique.assignFromAttribute_tokenString (var_cas_optionName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      if ((var_cas_boolOptionsMap.reader_hasKey (inLexique, var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1713)) COMMA_SOURCE_FILE_AT_LINE (1713))).isBuiltAndTrue ()) {
        var_cas_outExpression = GGS_typeBoolOption ::constructor_new (inLexique, var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1714)), var_cas_optionName COMMA_HERE) ;
        var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      }else if ((var_cas_uintOptionsMap.reader_hasKey (inLexique, var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1716)) COMMA_SOURCE_FILE_AT_LINE (1716))).isBuiltAndTrue ()) {
        var_cas_outExpression = GGS_typeUIntOption ::constructor_new (inLexique, var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1717)), var_cas_optionName COMMA_HERE) ;
        var_cas_outResultType = GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_HERE) ;
      }else if ((var_cas_stringOptionsMap.reader_hasKey (inLexique, var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1719)) COMMA_SOURCE_FILE_AT_LINE (1719))).isBuiltAndTrue ()) {
        var_cas_outExpression = GGS_typeStringOption ::constructor_new (inLexique, var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1720)), var_cas_optionName COMMA_HERE) ;
        var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE) ;
      }else{
        var_cas_optionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1723)))).operator_concat (GGS_string ("' option component has no '"))).operator_concat (var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1723)))).operator_concat (GGS_string ("' option")) COMMA_SOURCE_FILE_AT_LINE (1725)) ;
        var_cas_outExpression.drop () ;
        var_cas_outResultType.drop () ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1684_13_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
  switch (select_expression_parser_10 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1740_13_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_filewrapper) COMMA_HERE) ;
  GGS_lstring  var_cas_filewrapperName ;
  inLexique.assignFromAttribute_tokenString (var_cas_filewrapperName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_M_regularFiles  var_cas_regularFileMap ;
  GGS_filewrapperTemplateMap  var_cas_templateMap ;
  const GGS_M_filewrappers  temp_68486 = var_cas_inSemanticContext.reader_mFilewrappers (inLexique COMMA_SOURCE_FILE_AT_LINE (1755)) ;
  if (temp_68486.isBuilt ()) {
    temp_68486 (HERE)->method_searchKey (inLexique, var_cas_filewrapperName, var_cas_regularFileMap, var_cas_templateMap COMMA_SOURCE_FILE_AT_LINE (1755)) ;
  }
  switch (select_expression_parser_11 (inLexique)) {
    case 1 : {
      var_cas_outExpression = GGS_typeFileWrapperObjectInstanciation ::constructor_new (inLexique, var_cas_filewrapperName COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_filewrapper ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
      switch (select_expression_parser_12 (inLexique)) {
        case 1 : {
          GGS_lstring  var_cas_templateName ;
          inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_typeListeAttributsSemantiques  var_cas_formalAttributeList ;
          const GGS_filewrapperTemplateMap  temp_68894 = var_cas_templateMap ;
          if (temp_68894.isBuilt ()) {
            temp_68894 (HERE)->method_searchKey (inLexique, var_cas_templateName, var_cas_formalAttributeList COMMA_SOURCE_FILE_AT_LINE (1767)) ;
          }
          GGS_typeExpressionList  var_cas_expressionList ;
          nt_output_expression_list_ (inLexique, var_cas_expressionList, var_cas_formalAttributeList, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap) ;
          var_cas_outExpression = GGS_typeFileWrapperTemplateCall ::constructor_new (inLexique, var_cas_filewrapperName, var_cas_templateName, var_cas_expressionList COMMA_HERE) ;
          var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          GGS_lstring  var_cas_path ;
          inLexique.assignFromAttribute_tokenString (var_cas_path) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          GGS_uint  var_cas_wrapperFileIndex ;
          GGS_uint  automatic_var_1 ;
          const GGS_M_regularFiles  temp_69526 = var_cas_regularFileMap ;
          if (temp_69526.isBuilt ()) {
            temp_69526 (HERE)->method_searchKey (inLexique, var_cas_path, automatic_var_1, var_cas_wrapperFileIndex COMMA_SOURCE_FILE_AT_LINE (1787)) ;
          }
          var_cas_outExpression = GGS_typeFileWrapperWithStaticPath ::constructor_new (inLexique, var_cas_filewrapperName, var_cas_wrapperFileIndex COMMA_HERE) ;
          var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1740_13_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_filewrapper) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_expression_parser_11 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
      switch (select_expression_parser_12 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          nt_output_expression_list_parse (inLexique) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1802_13_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lstring  var_cas_functionName ;
  inLexique.assignFromAttribute_tokenString (var_cas_functionName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_signatureRoutine ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_70682 = var_cas_inEntitiesMap ;
  if (temp_70682.isBuilt ()) {
    temp_70682 (HERE)->method_searchKey (inLexique, var_cas_functionName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1815)) ;
  }
  GGS_bool var_cas_isExternActionCall ;
  { const GGS_AC_semanticsEntity _var_71262 = var_cas_entite ; // CAST instruction
    if (_var_71262.getPtr () != NULL) {
      macroValidPointer (_var_71262.getPtr ()) ;
      if (dynamic_cast <cPtr_typeEntiteFonction *> (_var_71262.getPtr ()) != NULL) {
        const GGS_typeEntiteFonction var_cas_r (_var_71262.getPtr ()) ;
        var_cas_signatureRoutine = var_cas_r.reader_aListeArgumentsFormels (inLexique COMMA_SOURCE_FILE_AT_LINE (1819)) ;
        var_cas_outResultType = var_cas_r.reader_mReturnedType (inLexique COMMA_SOURCE_FILE_AT_LINE (1820)) ;
        var_cas_isExternActionCall = GGS_bool (false) ;
      }else if (dynamic_cast <cPtr_typeEntiteFonctionExterne *> (_var_71262.getPtr ()) != NULL) {
        const GGS_typeEntiteFonctionExterne var_cas_ae (_var_71262.getPtr ()) ;
        var_cas_signatureRoutine = var_cas_ae.reader_aSignature (inLexique COMMA_SOURCE_FILE_AT_LINE (1823)) ;
        var_cas_outResultType = var_cas_ae.reader_mReturnedType (inLexique COMMA_SOURCE_FILE_AT_LINE (1824)) ;
        var_cas_isExternActionCall = GGS_bool (true) ;
      }else{
        var_cas_functionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("'")).operator_concat (var_cas_functionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1828)))).operator_concat (GGS_string ("' should name a function or an extern function")) COMMA_SOURCE_FILE_AT_LINE (1831)) ;
        var_cas_signatureRoutine.drop () ;
        var_cas_isExternActionCall.drop () ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  GGS_typeExpressionList  var_cas_expressionList ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  {
    GGS_L_EXsignature::cEnumerator enumerator_71430 (var_cas_signatureRoutine, true) ;
    const GGS_L_EXsignature::cElement * operand_71430 = NULL ;
    while (((operand_71430 = enumerator_71430.nextObject ()))) {
      macroValidPointer (operand_71430) ;
      var_cas_listeAttributsSemantiques.addAssign_operation (operand_71430->mType, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE)) ;
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  nt_output_expression_list_ (inLexique, var_cas_expressionList, var_cas_listeAttributsSemantiques, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeFunctionCall ::constructor_new (inLexique, var_cas_functionName, var_cas_expressionList COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1802_13_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  nt_output_expression_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'read_access'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_read_access_expression_parser_1857_18_ (galgas_scanner & inLexique,
                                GGS_lstring  &var_cas_nomVariable,
                                GGS_typeCplusPlusName  &var_cas_nomCppEntite,
                                GGS_AC_galgasType  &var_cas_typeEntite,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  inLexique.assignFromAttribute_tokenString (var_cas_nomVariable) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  var_cas_ioVariablesMap.modifier_searchForReadOnlyAccess (inLexique, var_cas_nomVariable, var_cas_typeEntite, var_cas_nomCppEntite COMMA_SOURCE_FILE_AT_LINE (1864)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_read_access_expression_parser_1857_18_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'read_access'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_read_access_expression_parser_1873_18_ (galgas_scanner & inLexique,
                                GGS_lstring  &var_cas_nomVariable,
                                GGS_typeCplusPlusName  &var_cas_nomCppEntite,
                                GGS_AC_galgasType  &var_cas_typeEntite,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_self) COMMA_HERE) ;
  if ((var_cas_ioVariablesMap.reader_hasKey (inLexique, GGS_string ("self") COMMA_SOURCE_FILE_AT_LINE (1880))).isBuiltAndTrue ()) {
    var_cas_nomVariable = GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_HERE) ;
    var_cas_ioVariablesMap.modifier_searchForReadOnlyAccess (inLexique, var_cas_nomVariable, var_cas_typeEntite, var_cas_nomCppEntite COMMA_SOURCE_FILE_AT_LINE (1882)) ;
  }else{
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'self' is not defined in this context") COMMA_SOURCE_FILE_AT_LINE (1886)) ;
    var_cas_nomVariable.drop () ;
    var_cas_nomCppEntite.drop () ;
    var_cas_typeEntite.drop () ;
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_read_access_expression_parser_1873_18_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_self) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'output_expression_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_output_expression_list_expression_parser_1895_29_ (galgas_scanner & inLexique,
                                GGS_typeExpressionList  &var_cas_outExpressionList,
                                const GGS_typeListeAttributsSemantiques  var_cas_inFormalAttributesList,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  GGS_typeTypesList  var_cas_effectiveTypesList = GGS_typeTypesList ::constructor_emptyList () ;
  var_cas_outExpressionList = GGS_typeExpressionList ::constructor_emptyList () ;
  { bool syntaxRepeat_13 = true ;
    while (syntaxRepeat_13) {
      switch (select_repeat_expression_parser_13 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_expression ;
          GGS_AC_galgasType  var_cas_resultType ;
          nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expression, var_cas_resultType) ;
          GGS_location  var_cas_errorLocation = GGS_location (inLexique) ;
          var_cas_effectiveTypesList.addAssign_operation (var_cas_resultType, var_cas_errorLocation) ;
          var_cas_outExpressionList.addAssign_operation (var_cas_expression) ;
          } break ;
        default :
          syntaxRepeat_13 = false ;
          break ;
      }
    }
  }
  GGS_location  var_cas_endOfListLocation = GGS_location (inLexique) ;
  if (((var_cas_inFormalAttributesList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1924))).operator_strictInf (var_cas_effectiveTypesList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1924)))).isBuiltAndTrue ()) {
    var_cas_endOfListLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("too much expressions") COMMA_SOURCE_FILE_AT_LINE (1926)) ;
  }else if (((var_cas_inFormalAttributesList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1926))).operator_strictSup (var_cas_effectiveTypesList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1926)))).isBuiltAndTrue ()) {
    var_cas_endOfListLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("one or more expressions missing") COMMA_SOURCE_FILE_AT_LINE (1928)) ;
  }else{
    {
      GGS_typeListeAttributsSemantiques::cEnumerator enumerator_74967 (var_cas_inFormalAttributesList, true) ;
      const GGS_typeListeAttributsSemantiques::cElement * operand_74967 = NULL ;
      GGS_typeTypesList::cEnumerator enumerator_75058 (var_cas_effectiveTypesList, true) ;
      const GGS_typeTypesList::cElement * operand_75058 = NULL ;
      while (((operand_74967 = enumerator_74967.nextObject ()))
          && ((operand_75058 = enumerator_75058.nextObject ()))) {
        macroValidPointer (operand_74967) ;
        macroValidPointer (operand_75058) ;
        ::routine_checkAssignmentTypesCompatibility (inLexique,  operand_74967->mAttributType,  operand_75058->mType,  operand_75058->mEndOfExpressionLocation,  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1931)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_output_expression_list_expression_parser_1895_29_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_13 = true ;
    while (syntaxRepeat_13) {
      switch (select_repeat_expression_parser_13 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
          nt_expression_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_13 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'parse_effective_input_parameters_list'  *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_parse_effective_input_parameters_list_expression_parser_1942_44_ (galgas_scanner & inLexique,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeListeAttributsSemantiques  var_cas_inFormalArgumentsList,
                                GGS_location  var_cas_inVarLocation,
                                GGS_localConstantBuildStyleEnum var_cas_inLocalConstantStyle,
                                GGS_bool var_cas_inEnumeratorNewStyle,
                                GGS_bool &var_cas_outNoUsedParameter) {
  var_cas_outNoUsedParameter = GGS_bool (true) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  GGS_L_nameWithType  var_cas_argumentsList = GGS_L_nameWithType ::constructor_emptyList () ;
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
      switch (select_repeat_expression_parser_14 (inLexique)) {
        case 2 : {
          switch (select_expression_parser_15 (inLexique)) {
            case 1 : {
              var_cas_outNoUsedParameter = GGS_bool (false) ;
              GGS_lstring  var_cas_typeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              GGS_lstring  var_cas_constantName ;
              inLexique.assignFromAttribute_tokenString (var_cas_constantName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_argumentsList.addAssign_operation (var_cas_typeName, var_cas_constantName) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              var_cas_argumentsList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE)) ;
              } break ;
            case 3 : {
              GGS_luint  var_cas_jokerCountWithLocation ;
              inLexique.assignFromAttribute_uint32value (var_cas_jokerCountWithLocation) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              GGS_uint  var_cas_jokerCount = var_cas_jokerCountWithLocation.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1969)) ;
              GGS_uint _variant_76685 = var_cas_jokerCount.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1970)) ;
              GGS_bool _condition_76685 (_variant_76685.isBuilt (), true) ;
              while (_condition_76685.isBuiltAndTrue ()) {
                _condition_76685 = (var_cas_jokerCount).operator_strictSup (GGS_uint (0U)) ;
                if (_condition_76685.isBuiltAndTrue ()) {
                  if (_variant_76685.uintValue () == 0) {
                    inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1974)) ;
                    _condition_76685 = GGS_bool (false) ;
                  }else{
                    _variant_76685.decrement_operation (inLexique COMMA_HERE) ;
                    var_cas_argumentsList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE)) ;
                    var_cas_jokerCount.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1973)) ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
  GGS_bool var_cas_ellipsisFound ;
  switch (select_expression_parser_16 (inLexique)) {
    case 1 : {
      var_cas_ellipsisFound = GGS_bool (false) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E__2E__2E_) COMMA_HERE) ;
      var_cas_ellipsisFound = GGS_bool (true) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  ::routine_buildMapWithLocalConstants (inLexique,  var_cas_inEnumeratorNewStyle,  var_cas_argumentsList,  var_cas_inFormalArgumentsList,  var_cas_ioVariablesMap,  var_cas_inVarLocation,  var_cas_inLocalConstantStyle,  var_cas_ellipsisFound COMMA_SOURCE_FILE_AT_LINE (1986)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_parse_effective_input_parameters_list_expression_parser_1942_44_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
      switch (select_repeat_expression_parser_14 (inLexique)) {
        case 2 : {
          switch (select_expression_parser_15 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
  switch (select_expression_parser_16 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E__2E__2E_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

