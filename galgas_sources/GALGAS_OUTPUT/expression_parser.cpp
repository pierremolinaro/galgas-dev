//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'expression_parser.cpp'                        *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                     january 23th, 2007, at 16h19'23"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "expression_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  static const char gGGSsourceFile [] = "expression_parser.ggs" ;
  #define SOURCE_FILE_AT_LINE(line) , gGGSsourceFile, line
#else
  #define SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchAndOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchAndOperator (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchAndOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_4932 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_4957 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_bdd * operand_4932 = dynamic_cast <cPtr_typeGalgas_bdd *> (ptr_4932) ;
    cPtr_typeGalgas_bdd * operand_4957 = dynamic_cast <cPtr_typeGalgas_bdd *> (ptr_4957) ;
    if ((operand_4932 != NULL) && (operand_4957 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_4932 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_4932) ;
      cPtr_typeGalgas_bool * operand_4957 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_4957) ;
      if ((operand_4932 != NULL) && (operand_4957 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_4932 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_4932) ;
        cPtr_typeGalgas_uint * operand_4957 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_4957) ;
        if ((operand_4932 != NULL) && (operand_4957 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_4932 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_4932) ;
          cPtr_typeGalgas_uint64 * operand_4957 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_4957) ;
          if ((operand_4932 != NULL) && (operand_4957 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_stringset * operand_4932 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_4932) ;
            cPtr_typeGalgas_stringset * operand_4957 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_4957) ;
            if ((operand_4932 != NULL) && (operand_4957 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint * operand_4932 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_4932) ;
              cPtr_typeGalgas_sint * operand_4957 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_4957) ;
              if ((operand_4932 != NULL) && (operand_4957 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                cPtr_typeGalgas_sint64 * operand_4932 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_4932) ;
                cPtr_typeGalgas_sint64 * operand_4957 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_4957) ;
                if ((operand_4932 != NULL) && (operand_4957 != NULL)) {
                  var_cas_outResultType = var_cas_inLeftExpressionType ;
                }else{
                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "operand type error : (")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (148))))) + (GGS_string (true, " & ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (149))))) + (GGS_string (true, ") is not valid"))) SOURCE_FILE_AT_LINE (151)) ;
                  var_cas_outResultType._drop_operation () ;
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchAndOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchOrOperator"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchOrOperator (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchOrOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_6441 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_6466 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_bdd * operand_6441 = dynamic_cast <cPtr_typeGalgas_bdd *> (ptr_6441) ;
    cPtr_typeGalgas_bdd * operand_6466 = dynamic_cast <cPtr_typeGalgas_bdd *> (ptr_6466) ;
    if ((operand_6441 != NULL) && (operand_6466 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_6441 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_6441) ;
      cPtr_typeGalgas_bool * operand_6466 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_6466) ;
      if ((operand_6441 != NULL) && (operand_6466 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_6441 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_6441) ;
        cPtr_typeGalgas_uint * operand_6466 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_6466) ;
        if ((operand_6441 != NULL) && (operand_6466 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_6441 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_6441) ;
          cPtr_typeGalgas_uint64 * operand_6466 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_6466) ;
          if ((operand_6441 != NULL) && (operand_6466 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint * operand_6441 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_6441) ;
            cPtr_typeGalgas_sint * operand_6466 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_6466) ;
            if ((operand_6441 != NULL) && (operand_6466 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint64 * operand_6441 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_6441) ;
              cPtr_typeGalgas_sint64 * operand_6466 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_6466) ;
              if ((operand_6441 != NULL) && (operand_6466 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                cPtr_typeGalgas_stringset * operand_6441 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_6441) ;
                cPtr_typeGalgas_stringset * operand_6466 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_6466) ;
                if ((operand_6441 != NULL) && (operand_6466 != NULL)) {
                  var_cas_outResultType = var_cas_inLeftExpressionType ;
                }else{
                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "operand type error : (")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (181))))) + (GGS_string (true, " | ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (182))))) + (GGS_string (true, ") is not valid"))) SOURCE_FILE_AT_LINE (184)) ;
                  var_cas_outResultType._drop_operation () ;
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchOrOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchXorOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchXorOperator (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchXorOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_7951 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_7976 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_bool * operand_7951 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_7951) ;
    cPtr_typeGalgas_bool * operand_7976 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_7976) ;
    if ((operand_7951 != NULL) && (operand_7976 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_uint * operand_7951 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_7951) ;
      cPtr_typeGalgas_uint * operand_7976 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_7976) ;
      if ((operand_7951 != NULL) && (operand_7976 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_7951 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_7951) ;
        cPtr_typeGalgas_uint64 * operand_7976 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_7976) ;
        if ((operand_7951 != NULL) && (operand_7976 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint * operand_7951 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_7951) ;
          cPtr_typeGalgas_sint * operand_7976 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_7976) ;
          if ((operand_7951 != NULL) && (operand_7976 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint64 * operand_7951 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_7951) ;
            cPtr_typeGalgas_sint64 * operand_7976 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_7976) ;
            if ((operand_7951 != NULL) && (operand_7976 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "operand type error : (")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (210))))) + (GGS_string (true, " | ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (211))))) + (GGS_string (true, ") is not valid"))) SOURCE_FILE_AT_LINE (213)) ;
              var_cas_outResultType._drop_operation () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchXorOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "matchConcatOperator"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchConcatOperator (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchConcatOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_9263 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_9288 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_string * operand_9263 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_9263) ;
    cPtr_typeGalgas_string * operand_9288 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_9288) ;
    if ((operand_9263 != NULL) && (operand_9288 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_string * operand_9263 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_9263) ;
      cPtr_typeGalgas_lstring * operand_9288 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_9288) ;
      if ((operand_9263 != NULL) && (operand_9288 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgasUndefinedListType * operand_9263 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_9263) ;
        cPtr_typeGalgasUndefinedListType * operand_9288 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_9288) ;
        if ((operand_9263 != NULL) && (operand_9288 != NULL)) {
          if (((operand_9263->mListTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (233))) != (operand_9288->mListTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (233)))).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "concatenation operator error: lists should have the same type (here '@")) + (operand_9263->mListTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (235))))) + (GGS_string (true, "' and '@")))) + (operand_9288->mListTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (235))))) + (GGS_string (true, "')"))) SOURCE_FILE_AT_LINE (236)) ;
          }
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "concatenation operator error: ")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (239))))) + (GGS_string (true, " . ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (240))))) + (GGS_string (true, ") cannot be concatened"))) SOURCE_FILE_AT_LINE (242)) ;
          var_cas_outResultType._drop_operation () ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchConcatOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "checkNotOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkNotOperator (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkNotOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { cPtr_typeGalgas_bool * ptrExtraire_ = dynamic_cast <cPtr_typeGalgas_bool *> (var_cas_inOperandType.getPtr ()) ;
    if (ptrExtraire_ == NULL) {
      if (var_cas_inOperandType.getPtr () != NULL) {
        TC_UniqueArray <C_String> message1_ (1, "" COMMA_HERE) ;
        C_String message2_ ;
        message1_ (0 COMMA_HERE) << cPtr_typeGalgas_bool::static_string_message_messageGalgasType () ;
        message2_ << var_cas_inOperandType (HERE)->message_messageGalgasType () ;
        GGS_location (_inLexique).signalExtractError (_inLexique, message1_, message2_ SOURCE_FILE_AT_LINE (255)) ;
      }
    }else{
      macroValidPointer (ptrExtraire_) ;
    }
  }
  var_cas_outResultType = var_cas_inOperandType ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkNotOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "checkLogicalNegateOperator"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkLogicalNegateOperator (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkLogicalNegateOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inOperandType._isBuilt ()) {
    cPtr_typeGalgas_bdd * operand_11271 = dynamic_cast <cPtr_typeGalgas_bdd *> (var_cas_inOperandType.getPtr ()) ;
    if (operand_11271 != NULL) {
      macroValidPointer (operand_11271) ; 
      var_cas_outResultType = var_cas_inOperandType ;
    }else{
      cPtr_typeGalgas_uint * operand_11337 = dynamic_cast <cPtr_typeGalgas_uint *> (var_cas_inOperandType.getPtr ()) ;
      if (operand_11337 != NULL) {
        macroValidPointer (operand_11337) ; 
        var_cas_outResultType = var_cas_inOperandType ;
      }else{
        cPtr_typeGalgas_sint * operand_11404 = dynamic_cast <cPtr_typeGalgas_sint *> (var_cas_inOperandType.getPtr ()) ;
        if (operand_11404 != NULL) {
          macroValidPointer (operand_11404) ; 
          var_cas_outResultType = var_cas_inOperandType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_11471 = dynamic_cast <cPtr_typeGalgas_uint64 *> (var_cas_inOperandType.getPtr ()) ;
          if (operand_11471 != NULL) {
            macroValidPointer (operand_11471) ; 
            var_cas_outResultType = var_cas_inOperandType ;
          }else{
            cPtr_typeGalgas_sint64 * operand_11540 = dynamic_cast <cPtr_typeGalgas_sint64 *> (var_cas_inOperandType.getPtr ()) ;
            if (operand_11540 != NULL) {
              macroValidPointer (operand_11540) ; 
              var_cas_outResultType = var_cas_inOperandType ;
            }else{ // Else part
              GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the ~ operator is not defined for an ")) + (var_cas_inOperandType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (282))))) + (GGS_string (true, " object"))) SOURCE_FILE_AT_LINE (284)) ;
              var_cas_outResultType._drop_operation () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkLogicalNegateOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "comparison_types_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_comparison_types_check (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_comparison_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_12306 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_12331 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_stringset * operand_12306 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_12306) ;
    cPtr_typeGalgas_stringset * operand_12331 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_12331) ;
    if ((operand_12306 != NULL) && (operand_12331 != NULL)) {
    }else{
      cPtr_typeGalgas_bool * operand_12306 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_12306) ;
      cPtr_typeGalgas_bool * operand_12331 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_12331) ;
      if ((operand_12306 != NULL) && (operand_12331 != NULL)) {
      }else{
        cPtr_typeGalgas_char * operand_12306 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_12306) ;
        cPtr_typeGalgas_char * operand_12331 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_12331) ;
        if ((operand_12306 != NULL) && (operand_12331 != NULL)) {
        }else{
          cPtr_typeGalgas_uint * operand_12306 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_12306) ;
          cPtr_typeGalgas_uint * operand_12331 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_12331) ;
          if ((operand_12306 != NULL) && (operand_12331 != NULL)) {
          }else{
            cPtr_typeGalgas_sint * operand_12306 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_12306) ;
            cPtr_typeGalgas_sint * operand_12331 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_12331) ;
            if ((operand_12306 != NULL) && (operand_12331 != NULL)) {
            }else{
              cPtr_typeGalgas_uint64 * operand_12306 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_12306) ;
              cPtr_typeGalgas_uint64 * operand_12331 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_12331) ;
              if ((operand_12306 != NULL) && (operand_12331 != NULL)) {
              }else{
                cPtr_typeGalgas_sint64 * operand_12306 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_12306) ;
                cPtr_typeGalgas_sint64 * operand_12331 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_12331) ;
                if ((operand_12306 != NULL) && (operand_12331 != NULL)) {
                }else{
                  cPtr_typeGalgas_double * operand_12306 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_12306) ;
                  cPtr_typeGalgas_double * operand_12331 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_12331) ;
                  if ((operand_12306 != NULL) && (operand_12331 != NULL)) {
                  }else{
                    cPtr_typeGalgas_string * operand_12306 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_12306) ;
                    cPtr_typeGalgas_string * operand_12331 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_12331) ;
                    if ((operand_12306 != NULL) && (operand_12331 != NULL)) {
                    }else{
                      cPtr_typeGalgas_lbool * operand_12306 = dynamic_cast <cPtr_typeGalgas_lbool *> (ptr_12306) ;
                      cPtr_typeGalgas_lbool * operand_12331 = dynamic_cast <cPtr_typeGalgas_lbool *> (ptr_12331) ;
                      if ((operand_12306 != NULL) && (operand_12331 != NULL)) {
                      }else{
                        cPtr_typeGalgas_lchar * operand_12306 = dynamic_cast <cPtr_typeGalgas_lchar *> (ptr_12306) ;
                        cPtr_typeGalgas_lchar * operand_12331 = dynamic_cast <cPtr_typeGalgas_lchar *> (ptr_12331) ;
                        if ((operand_12306 != NULL) && (operand_12331 != NULL)) {
                        }else{
                          cPtr_typeGalgas_luint * operand_12306 = dynamic_cast <cPtr_typeGalgas_luint *> (ptr_12306) ;
                          cPtr_typeGalgas_luint * operand_12331 = dynamic_cast <cPtr_typeGalgas_luint *> (ptr_12331) ;
                          if ((operand_12306 != NULL) && (operand_12331 != NULL)) {
                          }else{
                            cPtr_typeGalgas_lsint * operand_12306 = dynamic_cast <cPtr_typeGalgas_lsint *> (ptr_12306) ;
                            cPtr_typeGalgas_lsint * operand_12331 = dynamic_cast <cPtr_typeGalgas_lsint *> (ptr_12331) ;
                            if ((operand_12306 != NULL) && (operand_12331 != NULL)) {
                            }else{
                              cPtr_typeGalgas_luint64 * operand_12306 = dynamic_cast <cPtr_typeGalgas_luint64 *> (ptr_12306) ;
                              cPtr_typeGalgas_luint64 * operand_12331 = dynamic_cast <cPtr_typeGalgas_luint64 *> (ptr_12331) ;
                              if ((operand_12306 != NULL) && (operand_12331 != NULL)) {
                              }else{
                                cPtr_typeGalgas_lsint64 * operand_12306 = dynamic_cast <cPtr_typeGalgas_lsint64 *> (ptr_12306) ;
                                cPtr_typeGalgas_lsint64 * operand_12331 = dynamic_cast <cPtr_typeGalgas_lsint64 *> (ptr_12331) ;
                                if ((operand_12306 != NULL) && (operand_12331 != NULL)) {
                                }else{
                                  cPtr_typeGalgas_ldouble * operand_12306 = dynamic_cast <cPtr_typeGalgas_ldouble *> (ptr_12306) ;
                                  cPtr_typeGalgas_ldouble * operand_12331 = dynamic_cast <cPtr_typeGalgas_ldouble *> (ptr_12331) ;
                                  if ((operand_12306 != NULL) && (operand_12331 != NULL)) {
                                  }else{
                                    cPtr_typeGalgas_lstring * operand_12306 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_12306) ;
                                    cPtr_typeGalgas_lstring * operand_12331 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_12331) ;
                                    if ((operand_12306 != NULL) && (operand_12331 != NULL)) {
                                    }else{
                                      cPtr_typeGalgas_location * operand_12306 = dynamic_cast <cPtr_typeGalgas_location *> (ptr_12306) ;
                                      cPtr_typeGalgas_location * operand_12331 = dynamic_cast <cPtr_typeGalgas_location *> (ptr_12331) ;
                                      if ((operand_12306 != NULL) && (operand_12331 != NULL)) {
                                      }else{
                                        cPtr_typeGalgas_enum * operand_12306 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_12306) ;
                                        cPtr_typeGalgas_enum * operand_12331 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_12331) ;
                                        if ((operand_12306 != NULL) && (operand_12331 != NULL)) {
                                          if (((operand_12306->mEnumTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (317))) != (operand_12331->mEnumTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (317)))).isBuiltAndTrue ()) {
                                            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "comparison between an '@")) + (operand_12306->mEnumTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (318))))) + (GGS_string (true, "' enumeration and an '@")))) + (operand_12331->mEnumTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (319))))) + (GGS_string (true, "' enumeration is not valid"))) SOURCE_FILE_AT_LINE (320)) ;
                                          }
                                        }else{
                                          cPtr_typeGalgasUndefinedListType * operand_12306 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_12306) ;
                                          cPtr_typeGalgasUndefinedListType * operand_12331 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_12331) ;
                                          if ((operand_12306 != NULL) && (operand_12331 != NULL)) {
                                            if (((operand_12306->mListTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (322))) != (operand_12331->mListTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (322)))).isBuiltAndTrue ()) {
                                              GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "I was expecting the list type '@")) + (operand_12306->mListTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (323))))) + (GGS_string (true, "', I have got the list type '@")))) + (operand_12331->mListTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (324))))) + (GGS_string (true, "\""))) SOURCE_FILE_AT_LINE (325)) ;
                                            }
                                          }else{
                                            cPtr_typeGalgasUndefinedMapType * operand_12306 = dynamic_cast <cPtr_typeGalgasUndefinedMapType *> (ptr_12306) ;
                                            cPtr_typeGalgasUndefinedMapType * operand_12331 = dynamic_cast <cPtr_typeGalgasUndefinedMapType *> (ptr_12331) ;
                                            if ((operand_12306 != NULL) && (operand_12331 != NULL)) {
                                              if (((operand_12306->mMapTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (328))) != (operand_12331->mMapTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (328)))).isBuiltAndTrue ()) {
                                                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "I was expecting the map type '@")) + (operand_12306->mMapTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (329))))) + (GGS_string (true, "', I have got the map type '@")))) + (operand_12331->mMapTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (330))))) + (GGS_string (true, "\""))) SOURCE_FILE_AT_LINE (331)) ;
                                              }
                                            }else{
                                              cPtr_typeGalgasUndefinedClassType * operand_12306 = dynamic_cast <cPtr_typeGalgasUndefinedClassType *> (ptr_12306) ;
                                              cPtr_typeGalgasUndefinedClassType * operand_12331 = dynamic_cast <cPtr_typeGalgasUndefinedClassType *> (ptr_12331) ;
                                              if ((operand_12306 != NULL) && (operand_12331 != NULL)) {
                                                if (((operand_12306->mClassTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (335))) != (operand_12331->mClassTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (335)))).isBuiltAndTrue ()) {
                                                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "I was expecting the class type '@")) + (operand_12306->mClassTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (336))))) + (GGS_string (true, "', I have got the class type '@")))) + (operand_12331->mClassTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (337))))) + (GGS_string (true, "\""))) SOURCE_FILE_AT_LINE (338)) ;
                                                }
                                              }else{
                                                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "comparison between ")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (340))))) + (GGS_string (true, " and ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (341))))) + (GGS_string (true, " is not valid"))) SOURCE_FILE_AT_LINE (342)) ;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_comparison_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "magnitude_comparison_types_check"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_magnitude_comparison_types_check (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_magnitude_comparison_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_15512 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_15537 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_stringset * operand_15512 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_15512) ;
    cPtr_typeGalgas_stringset * operand_15537 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_15537) ;
    if ((operand_15512 != NULL) && (operand_15537 != NULL)) {
    }else{
      cPtr_typeGalgas_bool * operand_15512 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_15512) ;
      cPtr_typeGalgas_bool * operand_15537 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_15537) ;
      if ((operand_15512 != NULL) && (operand_15537 != NULL)) {
      }else{
        cPtr_typeGalgas_char * operand_15512 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_15512) ;
        cPtr_typeGalgas_char * operand_15537 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_15537) ;
        if ((operand_15512 != NULL) && (operand_15537 != NULL)) {
        }else{
          cPtr_typeGalgas_uint * operand_15512 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_15512) ;
          cPtr_typeGalgas_uint * operand_15537 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_15537) ;
          if ((operand_15512 != NULL) && (operand_15537 != NULL)) {
          }else{
            cPtr_typeGalgas_sint * operand_15512 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_15512) ;
            cPtr_typeGalgas_sint * operand_15537 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_15537) ;
            if ((operand_15512 != NULL) && (operand_15537 != NULL)) {
            }else{
              cPtr_typeGalgas_uint64 * operand_15512 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_15512) ;
              cPtr_typeGalgas_uint64 * operand_15537 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_15537) ;
              if ((operand_15512 != NULL) && (operand_15537 != NULL)) {
              }else{
                cPtr_typeGalgas_sint64 * operand_15512 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_15512) ;
                cPtr_typeGalgas_sint64 * operand_15537 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_15537) ;
                if ((operand_15512 != NULL) && (operand_15537 != NULL)) {
                }else{
                  cPtr_typeGalgas_double * operand_15512 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_15512) ;
                  cPtr_typeGalgas_double * operand_15537 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_15537) ;
                  if ((operand_15512 != NULL) && (operand_15537 != NULL)) {
                  }else{
                    cPtr_typeGalgas_string * operand_15512 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_15512) ;
                    cPtr_typeGalgas_string * operand_15537 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_15537) ;
                    if ((operand_15512 != NULL) && (operand_15537 != NULL)) {
                    }else{
                      cPtr_typeGalgas_enum * operand_15512 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_15512) ;
                      cPtr_typeGalgas_enum * operand_15537 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_15537) ;
                      if ((operand_15512 != NULL) && (operand_15537 != NULL)) {
                        if (((operand_15512->mEnumTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (366))) != (operand_15537->mEnumTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (366)))).isBuiltAndTrue ()) {
                          GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "comparison between an '@")) + (operand_15512->mEnumTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (367))))) + (GGS_string (true, "' enumeration and an '@")))) + (operand_15537->mEnumTypeName.reader_string (_inLexique SOURCE_FILE_AT_LINE (368))))) + (GGS_string (true, "' enumeration is not valid"))) SOURCE_FILE_AT_LINE (369)) ;
                        }
                      }else{
                        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "comparison between ")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (371))))) + (GGS_string (true, " and ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (372))))) + (GGS_string (true, " is not valid"))) SOURCE_FILE_AT_LINE (373)) ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_magnitude_comparison_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "shift_types_check"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_shift_types_check (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_shift_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_17167 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_17192 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_17167 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17167) ;
    cPtr_typeGalgas_uint * operand_17192 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17192) ;
    if ((operand_17167 != NULL) && (operand_17192 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_17167 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_17167) ;
      cPtr_typeGalgas_uint * operand_17192 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17192) ;
      if ((operand_17167 != NULL) && (operand_17192 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_17167 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_17167) ;
        cPtr_typeGalgas_uint * operand_17192 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17192) ;
        if ((operand_17167 != NULL) && (operand_17192 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_17167 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_17167) ;
          cPtr_typeGalgas_uint * operand_17192 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17192) ;
          if ((operand_17167 != NULL) && (operand_17192 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "shift between ")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (397))))) + (GGS_string (true, " and ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (398))))) + (GGS_string (true, " is not valid"))) SOURCE_FILE_AT_LINE (401)) ;
            var_cas_outResultType._drop_operation () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_shift_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "addition_types_check"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addition_types_check (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addition_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_18381 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_18406 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_18381 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18381) ;
    cPtr_typeGalgas_uint * operand_18406 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18406) ;
    if ((operand_18381 != NULL) && (operand_18406 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_18381 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_18381) ;
      cPtr_typeGalgas_sint * operand_18406 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_18406) ;
      if ((operand_18381 != NULL) && (operand_18406 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_18381 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_18381) ;
        cPtr_typeGalgas_uint64 * operand_18406 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_18406) ;
        if ((operand_18381 != NULL) && (operand_18406 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_18381 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_18381) ;
          cPtr_typeGalgas_sint64 * operand_18406 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_18406) ;
          if ((operand_18381 != NULL) && (operand_18406 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "addition between ")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (425))))) + (GGS_string (true, " and ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (426))))) + (GGS_string (true, " is not valid"))) SOURCE_FILE_AT_LINE (429)) ;
            var_cas_outResultType._drop_operation () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addition_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "substraction_types_check"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_substraction_types_check (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_substraction_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_19606 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_19631 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_19606 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19606) ;
    cPtr_typeGalgas_uint * operand_19631 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19631) ;
    if ((operand_19606 != NULL) && (operand_19631 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_19606 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_19606) ;
      cPtr_typeGalgas_sint * operand_19631 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_19631) ;
      if ((operand_19606 != NULL) && (operand_19631 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_19606 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_19606) ;
        cPtr_typeGalgas_uint64 * operand_19631 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_19631) ;
        if ((operand_19606 != NULL) && (operand_19631 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_19606 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_19606) ;
          cPtr_typeGalgas_sint64 * operand_19631 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_19631) ;
          if ((operand_19606 != NULL) && (operand_19631 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_stringset * operand_19606 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_19606) ;
            cPtr_typeGalgas_stringset * operand_19631 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_19631) ;
            if ((operand_19606 != NULL) && (operand_19631 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "substraction between ")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (455))))) + (GGS_string (true, " and ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (456))))) + (GGS_string (true, " is not valid"))) SOURCE_FILE_AT_LINE (459)) ;
              var_cas_outResultType._drop_operation () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_substraction_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "multiply_types_check"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_multiply_types_check (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_multiply_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_20937 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_20962 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_20937 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_20937) ;
    cPtr_typeGalgas_uint * operand_20962 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_20962) ;
    if ((operand_20937 != NULL) && (operand_20962 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_20937 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_20937) ;
      cPtr_typeGalgas_sint * operand_20962 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_20962) ;
      if ((operand_20937 != NULL) && (operand_20962 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_20937 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_20937) ;
        cPtr_typeGalgas_uint64 * operand_20962 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_20962) ;
        if ((operand_20937 != NULL) && (operand_20962 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_20937 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_20937) ;
          cPtr_typeGalgas_sint64 * operand_20962 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_20962) ;
          if ((operand_20937 != NULL) && (operand_20962 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "multiplication between ")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (483))))) + (GGS_string (true, " and ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (484))))) + (GGS_string (true, " is not valid"))) SOURCE_FILE_AT_LINE (487)) ;
            var_cas_outResultType._drop_operation () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_multiply_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "divide_types_check"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_divide_types_check (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_divide_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_22162 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_22187 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_22162 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_22162) ;
    cPtr_typeGalgas_uint * operand_22187 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_22187) ;
    if ((operand_22162 != NULL) && (operand_22187 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_22162 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_22162) ;
      cPtr_typeGalgas_sint * operand_22187 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_22187) ;
      if ((operand_22162 != NULL) && (operand_22187 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_22162 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_22162) ;
        cPtr_typeGalgas_uint64 * operand_22187 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_22187) ;
        if ((operand_22162 != NULL) && (operand_22187 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_22162 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_22162) ;
          cPtr_typeGalgas_sint64 * operand_22187 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_22187) ;
          if ((operand_22162 != NULL) && (operand_22187 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "division between ")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (511))))) + (GGS_string (true, " and ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (512))))) + (GGS_string (true, " is not valid"))) SOURCE_FILE_AT_LINE (515)) ;
            var_cas_outResultType._drop_operation () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_divide_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "modulo_types_check"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_modulo_types_check (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_modulo_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_23381 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_23406 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_23381 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_23381) ;
    cPtr_typeGalgas_uint * operand_23406 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_23406) ;
    if ((operand_23381 != NULL) && (operand_23406 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_23381 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_23381) ;
      cPtr_typeGalgas_sint * operand_23406 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_23406) ;
      if ((operand_23381 != NULL) && (operand_23406 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_23381 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_23381) ;
        cPtr_typeGalgas_uint64 * operand_23406 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_23406) ;
        if ((operand_23381 != NULL) && (operand_23406 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_23381 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_23381) ;
          cPtr_typeGalgas_sint64 * operand_23406 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_23406) ;
          if ((operand_23381 != NULL) && (operand_23406 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "modulo between ")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (539))))) + (GGS_string (true, " and ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (540))))) + (GGS_string (true, " is not valid"))) SOURCE_FILE_AT_LINE (543)) ;
            var_cas_outResultType._drop_operation () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_modulo_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "unary_minus_type_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_unary_minus_type_check (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_unary_minus_type_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inExpressionType._isBuilt ()) {
    cPtr_typeGalgas_sint * operand_24564 = dynamic_cast <cPtr_typeGalgas_sint *> (var_cas_inExpressionType.getPtr ()) ;
    if (operand_24564 != NULL) {
      macroValidPointer (operand_24564) ; 
      var_cas_outResultType = var_cas_inExpressionType ;
    }else{
      cPtr_typeGalgas_sint64 * operand_24633 = dynamic_cast <cPtr_typeGalgas_sint64 *> (var_cas_inExpressionType.getPtr ()) ;
      if (operand_24633 != NULL) {
        macroValidPointer (operand_24633) ; 
        var_cas_outResultType = var_cas_inExpressionType ;
      }else{ // Else part
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "unary minus for ")) + (var_cas_inExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (562))))) + (GGS_string (true, " is not valid"))) SOURCE_FILE_AT_LINE (566)) ;
        var_cas_outResultType._drop_operation () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_unary_minus_type_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_expression_expression_parser_575_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  &var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_concatenation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_0 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_concatenation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeConcatOperation::constructor_new (_inLexique, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchConcatOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType SOURCE_FILE_AT_LINE (604)) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_expression_expression_parser_575_6_parse (galgas_scanner & _inLexique) {
  nt_concatenation_term_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_0 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          nt_concatenation_term_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'concatenation_term'           *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_concatenation_term_expression_parser_618_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  &var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_1 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7C) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeOrOperation::constructor_new (_inLexique, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchOrOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType SOURCE_FILE_AT_LINE (647)) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5E) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeXorOperation::constructor_new (_inLexique, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchXorOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType SOURCE_FILE_AT_LINE (666)) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_concatenation_term_expression_parser_618_6_parse (galgas_scanner & _inLexique) {
  nt_relation_term_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_1 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7C) COMMA_HERE) ;
          nt_relation_term_parse (_inLexique) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5E) COMMA_HERE) ;
          nt_relation_term_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'relation_term'              *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_relation_term_expression_parser_680_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  &var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_2 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__26) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeAndOperation::constructor_new (_inLexique, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchAndOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType SOURCE_FILE_AT_LINE (709)) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_relation_term_expression_parser_680_6_parse (galgas_scanner & _inLexique) {
  nt_relation_factor_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_2 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__26) COMMA_HERE) ;
          nt_relation_factor_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'relation_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_relation_factor_expression_parser_723_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  &var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  switch (select_expression_parser_3 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D_3D) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType SOURCE_FILE_AT_LINE (750)) ;
      var_cas_outExpression = GGS_typeEqualTest::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_3D) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType SOURCE_FILE_AT_LINE (766)) ;
      var_cas_outExpression = GGS_typeNonEqualTest::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 4 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_3D) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType SOURCE_FILE_AT_LINE (782)) ;
      var_cas_outExpression = GGS_typeInfOrEqualTest::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 5 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_3D) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType SOURCE_FILE_AT_LINE (798)) ;
      var_cas_outExpression = GGS_typeSupOrEqualTest::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 6 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType SOURCE_FILE_AT_LINE (814)) ;
      var_cas_outExpression = GGS_typeStrictSupTest::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 7 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType SOURCE_FILE_AT_LINE (830)) ;
      var_cas_outExpression = GGS_typeStrictInfTest::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_relation_factor_expression_parser_723_6_parse (galgas_scanner & _inLexique) {
  nt_simple_expression_parse (_inLexique) ;
  switch (select_expression_parser_3 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D_3D) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_3D) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 4 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_3D) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 5 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_3D) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 6 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 7 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'simple_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_simple_expression_expression_parser_842_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  &var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_3C) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_shift_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType SOURCE_FILE_AT_LINE (870)) ;
          var_cas_outExpression = GGS_typeLeftShiftOperation::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression, GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_3E) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_shift_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType SOURCE_FILE_AT_LINE (885)) ;
          var_cas_outExpression = GGS_typeRightShiftOperation::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression, GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_addition_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType SOURCE_FILE_AT_LINE (900)) ;
          var_cas_outExpression = GGS_typeAddOperation::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression, GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        case 5 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_substraction_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType SOURCE_FILE_AT_LINE (915)) ;
          var_cas_outExpression = GGS_typeSubOperation::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression, GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_simple_expression_expression_parser_842_6_parse (galgas_scanner & _inLexique) {
  nt_term_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_3C) COMMA_HERE) ;
          nt_term_parse (_inLexique) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_3E) COMMA_HERE) ;
          nt_term_parse (_inLexique) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B) COMMA_HERE) ;
          nt_term_parse (_inLexique) ;
          } break ;
        case 5 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D) COMMA_HERE) ;
          nt_term_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'term'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_term_expression_parser_926_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  &var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_5 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_multiply_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType SOURCE_FILE_AT_LINE (954)) ;
          var_cas_outExpression = GGS_typeMultiplyOperation::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression, GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2F) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_divide_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType SOURCE_FILE_AT_LINE (969)) ;
          var_cas_outExpression = GGS_typeDivideOperation::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression, GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_mod) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_modulo_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType SOURCE_FILE_AT_LINE (984)) ;
          var_cas_outExpression = GGS_typeModuloOperation::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression, GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_term_expression_parser_926_6_parse (galgas_scanner & _inLexique) {
  nt_factor_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_5 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
          nt_factor_parse (_inLexique) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2F) COMMA_HERE) ;
          nt_factor_parse (_inLexique) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_mod) COMMA_HERE) ;
          nt_factor_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_995_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  &var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D) COMMA_HERE) ;
  GGS_typeExpression  var_cas_expression ;
  GGS_AC_galgasType  var_cas_type ;
  nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_expression, var_cas_type) ;
  ::routine_unary_minus_type_check (_inLexique,  var_cas_type,  var_cas_outResultType SOURCE_FILE_AT_LINE (1012)) ;
  var_cas_outExpression = GGS_typeUnaryMinusOperation::constructor_new (_inLexique, var_cas_expression, GGS_location (_inLexique) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_995_6_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D) COMMA_HERE) ;
  nt_factor_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1022_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  &/* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_typeCplusPlusName  var_cas_nomCppEntite1 ;
  GGS_lstring  automatic_var_0 ;
  nt_read_access_ (_inLexique, automatic_var_0, var_cas_nomCppEntite1, var_cas_outResultType, var_cas_ioVariablesMap) ;
  var_cas_outExpression = GGS_typeVarInExpression::constructor_new (_inLexique, var_cas_nomCppEntite1 COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1022_6_parse (galgas_scanner & _inLexique) {
  nt_read_access_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1040_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  &var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1040_6_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  nt_expression_parse (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1064_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  &var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_not) COMMA_HERE) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeTestComplement::constructor_new (_inLexique, var_cas_ifCondition COMMA_HERE) ;
  ::routine_checkNotOperator (_inLexique,  var_cas_operandType,  var_cas_outResultType SOURCE_FILE_AT_LINE (1082)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1064_6_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_not) COMMA_HERE) ;
  nt_factor_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1091_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  &var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7E) COMMA_HERE) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeLogicalNegate::constructor_new (_inLexique, var_cas_ifCondition COMMA_HERE) ;
  ::routine_checkLogicalNegateOperator (_inLexique,  var_cas_operandType,  var_cas_outResultType SOURCE_FILE_AT_LINE (1109)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1091_6_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7E) COMMA_HERE) ;
  nt_factor_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1118_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  &/* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_true) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeTrueBool::constructor_new (_inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1118_6_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_true) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1136_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  &/* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_false) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeFalseBool::constructor_new (_inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1136_6_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_false) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1154_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  &/* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lstring  var_cas_literalString ;
  _inLexique._assignFromAttribute_tokenString (var_cas_literalString) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralStringExpression::constructor_new (_inLexique, var_cas_literalString COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_string::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1154_6_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1173_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  &/* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint  var_cas_literalInt ;
  _inLexique._assignFromAttribute_uint32value (var_cas_literalInt) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralUIntExpression::constructor_new (_inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_uint::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1173_6_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1192_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  &/* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint  var_cas_literalInt ;
  _inLexique._assignFromAttribute_sint32value (var_cas_literalInt) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralSIntExpression::constructor_new (_inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_sint::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1192_6_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1211_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  &/* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint64  var_cas_literalInt ;
  _inLexique._assignFromAttribute_uint64value (var_cas_literalInt) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger64) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralUInt64Expression::constructor_new (_inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_uint64::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1211_6_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger64) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1230_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  &/* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint64  var_cas_literalInt ;
  _inLexique._assignFromAttribute_sint64value (var_cas_literalInt) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger64) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralSInt64Expression::constructor_new (_inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_sint64::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1230_6_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger64) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1249_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  &/* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lchar  var_cas_literalChar ;
  _inLexique._assignFromAttribute_charValue (var_cas_literalChar) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fchar) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralCharExpression::constructor_new (_inLexique, var_cas_literalChar COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_char::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1249_6_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fchar) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1268_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  &/* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_ldouble  var_cas_literalDouble ;
  _inLexique._assignFromAttribute_floatValue (var_cas_literalDouble) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fdouble) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralDoubleExpression::constructor_new (_inLexique, var_cas_literalDouble COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_double::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1268_6_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fdouble) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1287_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  &/* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_here) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeHereExpression::constructor_new (_inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_location::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1287_6_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_here) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1308_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  &var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B) COMMA_HERE) ;
  switch (select_expression_parser_6 (_inLexique)) {
    case 1 : {
      GGS_typeExpression  var_cas_expressionValue ;
      GGS_AC_galgasType  var_cas_expressionType ;
      nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_expressionValue, var_cas_expressionType) ;
      GGS_lstring  var_cas_methodName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_methodName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_accessorsTypeList ;
      GGS_string var_cas_conversionMethod ;
      ::routine_handleReaderCall (_inLexique,  var_cas_expressionType,  var_cas_methodName,  var_cas_accessorsTypeList,  var_cas_outResultType,  var_cas_conversionMethod SOURCE_FILE_AT_LINE (1333)) ;
      GGS_typeExpressionList  var_cas_expressionList ;
      nt_output_expression_list_ (_inLexique, var_cas_expressionList, var_cas_accessorsTypeList, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap) ;
      var_cas_outExpression = GGS_typeReaderCallInExpression::constructor_new (_inLexique, var_cas_expressionValue, var_cas_methodName, var_cas_expressionList, GGS_location (_inLexique), var_cas_conversionMethod COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_lstring  var_cas_className ;
      _inLexique._assignFromAttribute_tokenString (var_cas_className) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      GGS_lstring  var_cas_mClassMethodName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_mClassMethodName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_e ;
      if (var_cas_ioEntitiesMap._isBuilt ()) {
        var_cas_ioEntitiesMap (HERE)->method_searchKey (_inLexique, var_cas_className, var_cas_e SOURCE_FILE_AT_LINE (1352)) ;
      }
      { cPtr_typeEntiteType * ptrExtraire_ = dynamic_cast <cPtr_typeEntiteType *> (var_cas_e.getPtr ()) ;
        if (ptrExtraire_ == NULL) {
          var_cas_outResultType._drop_operation () ;
          if (var_cas_e.getPtr () != NULL) {
            TC_UniqueArray <C_String> message1_ (1, "" COMMA_HERE) ;
            C_String message2_ ;
            message1_ (0 COMMA_HERE) << cPtr_typeEntiteType::static_string_message_messageTypeEntite () ;
            message2_ << var_cas_e (HERE)->message_messageTypeEntite () ;
            var_cas_className.signalExtractError (_inLexique, message1_, message2_ SOURCE_FILE_AT_LINE (1353)) ;
          }
        }else{
          macroValidPointer (ptrExtraire_) ;
          var_cas_outResultType = ptrExtraire_->aDefType ;
        }
      }
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques ;
      if (var_cas_outResultType._isBuilt ()) {
        var_cas_outResultType (HERE)->method_handleConstructorCall (_inLexique, var_cas_mClassMethodName, var_cas_listeAttributsSemantiques SOURCE_FILE_AT_LINE (1355)) ;
      }
      GGS_typeExpressionList  var_cas_expressionList ;
      nt_output_expression_list_ (_inLexique, var_cas_expressionList, var_cas_listeAttributsSemantiques, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap) ;
      var_cas_outExpression = GGS_typeConstructorExpression::constructor_new (_inLexique, var_cas_className, var_cas_mClassMethodName, var_cas_expressionList COMMA_HERE) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
      switch (select_expression_parser_7 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          GGS_lstring  var_cas_optionName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_optionName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          if (((var_cas_optionName.reader_string (_inLexique SOURCE_FILE_AT_LINE (1372))) != (GGS_string (true, "verbose_output"))).isBuiltAndTrue ()) {
            var_cas_optionName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "this option name does not correspond to a builtin option") SOURCE_FILE_AT_LINE (1374)) ;
          }
          var_cas_outExpression = GGS_typeBoolOption::constructor_new (_inLexique, GGS_string (true, "generic_galgas_cli_options"), var_cas_optionName COMMA_HERE) ;
          var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          GGS_lstring  var_cas_optionComponentName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_optionComponentName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_M_cli_options  var_cas_boolOptionsMap ;
          GGS_M_cli_options  var_cas_uintOptionsMap ;
          GGS_M_cli_options  var_cas_stringOptionsMap ;
          if (var_cas_inOptionsComponentsMapForUse._isBuilt ()) {
            var_cas_inOptionsComponentsMapForUse (HERE)->method_searchKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap SOURCE_FILE_AT_LINE (1383)) ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          GGS_lstring  var_cas_optionName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_optionName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          if ((var_cas_boolOptionsMap.reader_hasKey (_inLexique, var_cas_optionName.reader_string (_inLexique SOURCE_FILE_AT_LINE (1387)) SOURCE_FILE_AT_LINE (1387))).isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_typeBoolOption::constructor_new (_inLexique, var_cas_optionComponentName.reader_string (_inLexique SOURCE_FILE_AT_LINE (1388)), var_cas_optionName COMMA_HERE) ;
            var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
          }else if ((var_cas_uintOptionsMap.reader_hasKey (_inLexique, var_cas_optionName.reader_string (_inLexique SOURCE_FILE_AT_LINE (1390)) SOURCE_FILE_AT_LINE (1390))).isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_typeUIntOption::constructor_new (_inLexique, var_cas_optionComponentName.reader_string (_inLexique SOURCE_FILE_AT_LINE (1391)), var_cas_optionName COMMA_HERE) ;
            var_cas_outResultType = GGS_typeGalgas_uint::constructor_new (_inLexique COMMA_HERE) ;
          }else if ((var_cas_stringOptionsMap.reader_hasKey (_inLexique, var_cas_optionName.reader_string (_inLexique SOURCE_FILE_AT_LINE (1393)) SOURCE_FILE_AT_LINE (1393))).isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_typeStringOption::constructor_new (_inLexique, var_cas_optionComponentName.reader_string (_inLexique SOURCE_FILE_AT_LINE (1394)), var_cas_optionName COMMA_HERE) ;
            var_cas_outResultType = GGS_typeGalgas_string::constructor_new (_inLexique COMMA_HERE) ;
          }else{
            var_cas_optionName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "the '")) + (var_cas_optionComponentName.reader_string (_inLexique SOURCE_FILE_AT_LINE (1397))))) + (GGS_string (true, "' option component has no '")))) + (var_cas_optionName.reader_string (_inLexique SOURCE_FILE_AT_LINE (1397))))) + (GGS_string (true, "' option"))) SOURCE_FILE_AT_LINE (1399)) ;
            var_cas_outExpression._drop_operation () ;
            var_cas_outResultType._drop_operation () ;
          }
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1308_6_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B) COMMA_HERE) ;
  switch (select_expression_parser_6 (_inLexique)) {
    case 1 : {
      nt_expression_parse (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      nt_output_expression_list_parse (_inLexique) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      nt_output_expression_list_parse (_inLexique) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
      switch (select_expression_parser_7 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'read_access'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_read_access_expression_parser_1411_6_ (galgas_scanner & _inLexique,
                                GGS_lstring  &var_cas_nomVariable,
                                GGS_typeCplusPlusName  &var_cas_nomCppEntite,
                                GGS_AC_galgasType  &var_cas_typeEntite,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  _inLexique._assignFromAttribute_tokenString (var_cas_nomVariable) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  var_cas_ioVariablesMap.modifier_searchForReadOnlyAccess (_inLexique, var_cas_nomVariable, var_cas_typeEntite, var_cas_nomCppEntite SOURCE_FILE_AT_LINE (1418)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_read_access_expression_parser_1411_6_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'read_access'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_read_access_expression_parser_1427_6_ (galgas_scanner & _inLexique,
                                GGS_lstring  &var_cas_nomVariable,
                                GGS_typeCplusPlusName  &var_cas_nomCppEntite,
                                GGS_AC_galgasType  &var_cas_typeEntite,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_self) COMMA_HERE) ;
  if ((var_cas_ioVariablesMap.reader_hasKey (_inLexique, GGS_string (true, "self") SOURCE_FILE_AT_LINE (1434))).isBuiltAndTrue ()) {
    var_cas_nomVariable = GGS_lstring::constructor_new (_inLexique, GGS_string (true, "self"), GGS_location (_inLexique) COMMA_HERE) ;
    var_cas_ioVariablesMap.modifier_searchForReadOnlyAccess (_inLexique, var_cas_nomVariable, var_cas_typeEntite, var_cas_nomCppEntite SOURCE_FILE_AT_LINE (1436)) ;
  }else{
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "'self' is not defined in this context") SOURCE_FILE_AT_LINE (1440)) ;
    var_cas_nomVariable._drop_operation () ;
    var_cas_nomCppEntite._drop_operation () ;
    var_cas_typeEntite._drop_operation () ;
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_read_access_expression_parser_1427_6_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_self) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'output_expression_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_output_expression_list_expression_parser_1449_6_ (galgas_scanner & _inLexique,
                                GGS_typeExpressionList  &var_cas_outExpressionList,
                                const GGS_typeListeAttributsSemantiques  &var_cas_inFormalAttributesList,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  &var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  GGS_typeTypesList  var_cas_effectiveTypesList ;
  var_cas_effectiveTypesList = GGS_typeTypesList::constructor_emptyList (_inLexique COMMA_HERE) ;
  var_cas_outExpressionList = GGS_typeExpressionList::constructor_emptyList (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_8 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21) COMMA_HERE) ;
          GGS_typeExpression  var_cas_expression ;
          GGS_AC_galgasType  var_cas_resultType ;
          nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_expression, var_cas_resultType) ;
          GGS_location  var_cas_errorLocation ;
          var_cas_errorLocation = GGS_location (_inLexique) ;
          var_cas_effectiveTypesList._addAssign_operation (var_cas_resultType, var_cas_errorLocation) ;
          var_cas_outExpressionList._addAssign_operation (var_cas_expression) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  GGS_location  var_cas_endOfListLocation ;
  var_cas_endOfListLocation = GGS_location (_inLexique) ;
  if (((var_cas_inFormalAttributesList.reader_length (_inLexique SOURCE_FILE_AT_LINE (1476))) < (var_cas_effectiveTypesList.reader_length (_inLexique SOURCE_FILE_AT_LINE (1476)))).isBuiltAndTrue ()) {
    var_cas_endOfListLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "too much expressions") SOURCE_FILE_AT_LINE (1478)) ;
  }else if (((var_cas_inFormalAttributesList.reader_length (_inLexique SOURCE_FILE_AT_LINE (1478))) > (var_cas_effectiveTypesList.reader_length (_inLexique SOURCE_FILE_AT_LINE (1478)))).isBuiltAndTrue ()) {
    var_cas_endOfListLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "one or more expressions missing") SOURCE_FILE_AT_LINE (1480)) ;
  }else{
    GGS_typeListeAttributsSemantiques::element_type * operand_58161 = var_cas_inFormalAttributesList.firstObject () ;
    GGS_typeTypesList::element_type * operand_58252 = var_cas_effectiveTypesList.firstObject () ;
    while ((operand_58161 != NULL)
        && (operand_58252 != NULL)) {
      macroValidPointer (operand_58161) ;
      macroValidPointer (operand_58252) ;
      ::routine_checkAssignmentTypesCompatibility (_inLexique,  operand_58161->mAttributType,  operand_58252->mType,  operand_58252->mEndOfExpressionLocation,  GGS_bool (true, true) SOURCE_FILE_AT_LINE (1483)) ;
      operand_58161 = operand_58161->nextObject () ;
      operand_58252 = operand_58252->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_output_expression_list_expression_parser_1449_6_parse (galgas_scanner & _inLexique) {
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_8 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21) COMMA_HERE) ;
          nt_expression_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'parse_effective_input_parameters_list'  *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_parse_effective_input_parameters_list_expression_parser_1494_6_ (galgas_scanner & _inLexique,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeListeAttributsSemantiques  var_cas_inFormalArgumentsList,
                                GGS_location  var_cas_inVarLocation,
                                GGS_localConstantBuildStyleEnum var_cas_inLocalConstantStyle,
                                GGS_bool &var_cas_outNoUsedParameter) {
  var_cas_outNoUsedParameter = GGS_bool (true, true) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  GGS_L_nameWithType  var_cas_argumentsList ;
  var_cas_argumentsList = GGS_L_nameWithType::constructor_emptyList (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_9 (_inLexique)) {
        case 2 : {
          switch (select_expression_parser_10 (_inLexique)) {
            case 1 : {
              var_cas_outNoUsedParameter = GGS_bool (true, false) ;
              GGS_lstring  var_cas_typeName ;
              _inLexique._assignFromAttribute_tokenString (var_cas_typeName) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
              GGS_lstring  var_cas_constantName ;
              _inLexique._assignFromAttribute_tokenString (var_cas_constantName) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_argumentsList._addAssign_operation (var_cas_typeName, var_cas_constantName) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
              var_cas_argumentsList._addAssign_operation (GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE)) ;
              } break ;
            case 3 : {
              GGS_luint  var_cas_jokerCountWithLocation ;
              _inLexique._assignFromAttribute_uint32value (var_cas_jokerCountWithLocation) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
              GGS_uint  var_cas_jokerCount ;
              var_cas_jokerCount = var_cas_jokerCountWithLocation.reader_uint (_inLexique SOURCE_FILE_AT_LINE (1520)) ;
              GGS_uint _variant_59838 = var_cas_jokerCount._add_operation (_inLexique, GGS_uint (true, 1U) SOURCE_FILE_AT_LINE (1521)) ;
              GGS_bool _condition_59838 (_variant_59838._isBuilt (), true) ;
              while (_condition_59838.isBuiltAndTrue ()) {
                _condition_59838 = (var_cas_jokerCount) > (GGS_uint (true, 0U)) ;
                if (_condition_59838.isBuiltAndTrue ()) {
                  if (_variant_59838.uintValue () == 0) {
                    _inLexique.onTheFlyRunTimeError ("loop variant error" SOURCE_FILE_AT_LINE (1525)) ;
                    _condition_59838 = GGS_bool (true, false) ;
                  }else{
                    _variant_59838._decrement_operation (_inLexique COMMA_HERE) ;
                    var_cas_argumentsList._addAssign_operation (GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE)) ;
                    var_cas_jokerCount._decrement_operation (_inLexique SOURCE_FILE_AT_LINE (1524)) ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  GGS_bool var_cas_ellipsisFound ;
  switch (select_expression_parser_11 (_inLexique)) {
    case 1 : {
      var_cas_ellipsisFound = GGS_bool (true, false) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_2E_2E) COMMA_HERE) ;
      var_cas_ellipsisFound = GGS_bool (true, true) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
  ::routine_buildMapWithLocalConstants (_inLexique,  var_cas_argumentsList,  var_cas_inFormalArgumentsList,  var_cas_ioVariablesMap,  var_cas_inVarLocation,  var_cas_inLocalConstantStyle,  var_cas_ellipsisFound SOURCE_FILE_AT_LINE (1537)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_parse_effective_input_parameters_list_expression_parser_1494_6_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_9 (_inLexique)) {
        case 2 : {
          switch (select_expression_parser_10 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
              } break ;
            case 3 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  switch (select_expression_parser_11 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_2E_2E) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

