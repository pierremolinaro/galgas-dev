//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'expression_parser.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 17th, 2010, at 17h49'19"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "expression_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "expression_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchAndOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchAndOperator (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchAndOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_5615 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_5639 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_5615 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_5615) ;
    cPtr_typeGalgas_binaryset * operand_5639 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_5639) ;
    if ((operand_5615 != NULL) && (operand_5639 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_5615 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_5615) ;
      cPtr_typeGalgas_bool * operand_5639 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_5639) ;
      if ((operand_5615 != NULL) && (operand_5639 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_5615 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_5615) ;
        cPtr_typeGalgas_uint * operand_5639 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_5639) ;
        if ((operand_5615 != NULL) && (operand_5639 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_5615 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_5615) ;
          cPtr_typeGalgas_uint64 * operand_5639 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_5639) ;
          if ((operand_5615 != NULL) && (operand_5639 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_stringset * operand_5615 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_5615) ;
            cPtr_typeGalgas_stringset * operand_5639 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_5639) ;
            if ((operand_5615 != NULL) && (operand_5639 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint * operand_5615 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_5615) ;
              cPtr_typeGalgas_sint * operand_5639 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_5639) ;
              if ((operand_5615 != NULL) && (operand_5639 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                cPtr_typeGalgas_sint64 * operand_5615 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_5615) ;
                cPtr_typeGalgas_sint64 * operand_5639 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_5639) ;
                if ((operand_5615 != NULL) && (operand_5639 != NULL)) {
                  var_cas_outResultType = var_cas_inLeftExpressionType ;
                }else{
                  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (168)))).operator_concat (GGS_string (" & "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (169)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (171)) ;
                  var_cas_outResultType.drop () ;
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchAndOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchOrOperator"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchOrOperator (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchOrOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_7135 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_7159 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_7135 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_7135) ;
    cPtr_typeGalgas_binaryset * operand_7159 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_7159) ;
    if ((operand_7135 != NULL) && (operand_7159 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_7135 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_7135) ;
      cPtr_typeGalgas_bool * operand_7159 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_7159) ;
      if ((operand_7135 != NULL) && (operand_7159 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_7135 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_7135) ;
        cPtr_typeGalgas_uint * operand_7159 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_7159) ;
        if ((operand_7135 != NULL) && (operand_7159 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_7135 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_7135) ;
          cPtr_typeGalgas_uint64 * operand_7159 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_7159) ;
          if ((operand_7135 != NULL) && (operand_7159 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint * operand_7135 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_7135) ;
            cPtr_typeGalgas_sint * operand_7159 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_7159) ;
            if ((operand_7135 != NULL) && (operand_7159 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint64 * operand_7135 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_7135) ;
              cPtr_typeGalgas_sint64 * operand_7159 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_7159) ;
              if ((operand_7135 != NULL) && (operand_7159 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                cPtr_typeGalgas_stringset * operand_7135 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_7135) ;
                cPtr_typeGalgas_stringset * operand_7159 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_7159) ;
                if ((operand_7135 != NULL) && (operand_7159 != NULL)) {
                  var_cas_outResultType = var_cas_inLeftExpressionType ;
                }else{
                  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (201)))).operator_concat (GGS_string (" | "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (202)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (204)) ;
                  var_cas_outResultType.drop () ;
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchOrOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchXorOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchXorOperator (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchXorOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_8656 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_8680 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_8656 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_8656) ;
    cPtr_typeGalgas_binaryset * operand_8680 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_8680) ;
    if ((operand_8656 != NULL) && (operand_8680 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_8656 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_8656) ;
      cPtr_typeGalgas_bool * operand_8680 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_8680) ;
      if ((operand_8656 != NULL) && (operand_8680 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_8656 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_8656) ;
        cPtr_typeGalgas_uint * operand_8680 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_8680) ;
        if ((operand_8656 != NULL) && (operand_8680 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_8656 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_8656) ;
          cPtr_typeGalgas_uint64 * operand_8680 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_8680) ;
          if ((operand_8656 != NULL) && (operand_8680 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint * operand_8656 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_8656) ;
            cPtr_typeGalgas_sint * operand_8680 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_8680) ;
            if ((operand_8656 != NULL) && (operand_8680 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint64 * operand_8656 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_8656) ;
              cPtr_typeGalgas_sint64 * operand_8680 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_8680) ;
              if ((operand_8656 != NULL) && (operand_8680 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (232)))).operator_concat (GGS_string (" | "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (233)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (235)) ;
                var_cas_outResultType.drop () ;
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchXorOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "matchConcatOperator"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchConcatOperator (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchConcatOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_10074 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_10098 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_string * operand_10074 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_10074) ;
    cPtr_typeGalgas_string * operand_10098 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_10098) ;
    if ((operand_10074 != NULL) && (operand_10098 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_string * operand_10074 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_10074) ;
      cPtr_typeGalgas_lstring * operand_10098 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_10098) ;
      if ((operand_10074 != NULL) && (operand_10098 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgasUndefinedListType * operand_10074 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_10074) ;
        cPtr_typeGalgasUndefinedListType * operand_10098 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_10098) ;
        if ((operand_10074 != NULL) && (operand_10098 != NULL)) {
          const GGS_bool cond_10655 = (operand_10074->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (255))).operator_isNotEqual (operand_10098->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (255))) ;
          if (cond_10655.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("concatenation operator error: lists should have the same type (here '@")).operator_concat (operand_10074->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (257)))).operator_concat (GGS_string ("' is different from '@"))).operator_concat (operand_10098->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (257)))).operator_concat (GGS_string ("')")) COMMA_SOURCE_FILE_AT_LINE (258)) ;
          }
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgasListmapType * operand_10074 = dynamic_cast <cPtr_typeGalgasListmapType *> (ptr_10074) ;
          cPtr_typeGalgasListmapType * operand_10098 = dynamic_cast <cPtr_typeGalgasListmapType *> (ptr_10098) ;
          if ((operand_10074 != NULL) && (operand_10098 != NULL)) {
            const GGS_bool cond_11059 = (operand_10074->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (261))).operator_isNotEqual (operand_10098->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (261))) ;
            if (cond_11059.isBuiltAndTrue ()) {
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("concatenation operator error: listmaps should have the same type (here '@")).operator_concat (operand_10074->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (263)))).operator_concat (GGS_string ("' is different from '@"))).operator_concat (operand_10098->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (263)))).operator_concat (GGS_string ("')")) COMMA_SOURCE_FILE_AT_LINE (264)) ;
            }
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("concatenation operator error: @")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (267)))).operator_concat (GGS_string (" and @"))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (268)))).operator_concat (GGS_string (" objects cannot be concatened")) COMMA_SOURCE_FILE_AT_LINE (270)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchConcatOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "checkNotOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkNotOperator (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkNotOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_typeGalgas_bool  var_cas_gb = GGS_typeGalgas_bool::castFrom (inLexique, var_cas_inOperandType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (283)) ;
  var_cas_outResultType = var_cas_inOperandType ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkNotOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "checkLogicalNegateOperator"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkLogicalNegateOperator (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkLogicalNegateOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_AC_galgasType _var_12992 = var_cas_inOperandType ; // CAST instruction
    if (_var_12992.getPtr () != NULL) {
      macroValidPointer (_var_12992.getPtr ()) ;
      if (dynamic_cast <cPtr_typeGalgas_binaryset *> (_var_12992.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_uint *> (_var_12992.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint *> (_var_12992.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_uint64 *> (_var_12992.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint64 *> (_var_12992.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the ~ operator is not defined for an ")).operator_concat (var_cas_inOperandType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (310)))).operator_concat (GGS_string (" object")) COMMA_SOURCE_FILE_AT_LINE (312)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkLogicalNegateOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "comparison_types_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_comparison_types_check (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_comparison_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_13551 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_13575 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_function * operand_13551 = dynamic_cast <cPtr_typeGalgas_function *> (ptr_13551) ;
    cPtr_typeGalgas_function * operand_13575 = dynamic_cast <cPtr_typeGalgas_function *> (ptr_13575) ;
    if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
    }else{
      cPtr_typeGalgas_type * operand_13551 = dynamic_cast <cPtr_typeGalgas_type *> (ptr_13551) ;
      cPtr_typeGalgas_type * operand_13575 = dynamic_cast <cPtr_typeGalgas_type *> (ptr_13575) ;
      if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
      }else{
        cPtr_typeGalgas_object * operand_13551 = dynamic_cast <cPtr_typeGalgas_object *> (ptr_13551) ;
        cPtr_typeGalgas_object * operand_13575 = dynamic_cast <cPtr_typeGalgas_object *> (ptr_13575) ;
        if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
        }else{
          cPtr_typeGalgas_binaryset * operand_13551 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_13551) ;
          cPtr_typeGalgas_binaryset * operand_13575 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_13575) ;
          if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
          }else{
            cPtr_typeGalgas_stringset * operand_13551 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_13551) ;
            cPtr_typeGalgas_stringset * operand_13575 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_13575) ;
            if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
            }else{
              cPtr_typeGalgas_bool * operand_13551 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_13551) ;
              cPtr_typeGalgas_bool * operand_13575 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_13575) ;
              if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
              }else{
                cPtr_typeGalgas_char * operand_13551 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_13551) ;
                cPtr_typeGalgas_char * operand_13575 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_13575) ;
                if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
                }else{
                  cPtr_typeGalgas_uint * operand_13551 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_13551) ;
                  cPtr_typeGalgas_uint * operand_13575 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_13575) ;
                  if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
                  }else{
                    cPtr_typeGalgas_sint * operand_13551 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_13551) ;
                    cPtr_typeGalgas_sint * operand_13575 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_13575) ;
                    if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
                    }else{
                      cPtr_typeGalgas_uint64 * operand_13551 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_13551) ;
                      cPtr_typeGalgas_uint64 * operand_13575 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_13575) ;
                      if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
                      }else{
                        cPtr_typeGalgas_sint64 * operand_13551 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_13551) ;
                        cPtr_typeGalgas_sint64 * operand_13575 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_13575) ;
                        if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
                        }else{
                          cPtr_typeGalgas_double * operand_13551 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_13551) ;
                          cPtr_typeGalgas_double * operand_13575 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_13575) ;
                          if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
                          }else{
                            cPtr_typeGalgas_string * operand_13551 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_13551) ;
                            cPtr_typeGalgas_string * operand_13575 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_13575) ;
                            if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
                            }else{
                              cPtr_typeGalgas_lbool * operand_13551 = dynamic_cast <cPtr_typeGalgas_lbool *> (ptr_13551) ;
                              cPtr_typeGalgas_lbool * operand_13575 = dynamic_cast <cPtr_typeGalgas_lbool *> (ptr_13575) ;
                              if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
                              }else{
                                cPtr_typeGalgas_lchar * operand_13551 = dynamic_cast <cPtr_typeGalgas_lchar *> (ptr_13551) ;
                                cPtr_typeGalgas_lchar * operand_13575 = dynamic_cast <cPtr_typeGalgas_lchar *> (ptr_13575) ;
                                if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
                                }else{
                                  cPtr_typeGalgas_luint * operand_13551 = dynamic_cast <cPtr_typeGalgas_luint *> (ptr_13551) ;
                                  cPtr_typeGalgas_luint * operand_13575 = dynamic_cast <cPtr_typeGalgas_luint *> (ptr_13575) ;
                                  if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
                                  }else{
                                    cPtr_typeGalgas_lsint * operand_13551 = dynamic_cast <cPtr_typeGalgas_lsint *> (ptr_13551) ;
                                    cPtr_typeGalgas_lsint * operand_13575 = dynamic_cast <cPtr_typeGalgas_lsint *> (ptr_13575) ;
                                    if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
                                    }else{
                                      cPtr_typeGalgas_luint64 * operand_13551 = dynamic_cast <cPtr_typeGalgas_luint64 *> (ptr_13551) ;
                                      cPtr_typeGalgas_luint64 * operand_13575 = dynamic_cast <cPtr_typeGalgas_luint64 *> (ptr_13575) ;
                                      if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
                                      }else{
                                        cPtr_typeGalgas_lsint64 * operand_13551 = dynamic_cast <cPtr_typeGalgas_lsint64 *> (ptr_13551) ;
                                        cPtr_typeGalgas_lsint64 * operand_13575 = dynamic_cast <cPtr_typeGalgas_lsint64 *> (ptr_13575) ;
                                        if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
                                        }else{
                                          cPtr_typeGalgas_ldouble * operand_13551 = dynamic_cast <cPtr_typeGalgas_ldouble *> (ptr_13551) ;
                                          cPtr_typeGalgas_ldouble * operand_13575 = dynamic_cast <cPtr_typeGalgas_ldouble *> (ptr_13575) ;
                                          if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
                                          }else{
                                            cPtr_typeGalgas_lstring * operand_13551 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_13551) ;
                                            cPtr_typeGalgas_lstring * operand_13575 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_13575) ;
                                            if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
                                            }else{
                                              cPtr_typeGalgas_location * operand_13551 = dynamic_cast <cPtr_typeGalgas_location *> (ptr_13551) ;
                                              cPtr_typeGalgas_location * operand_13575 = dynamic_cast <cPtr_typeGalgas_location *> (ptr_13575) ;
                                              if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
                                              }else{
                                                cPtr_typeGalgas_filewrapper * operand_13551 = dynamic_cast <cPtr_typeGalgas_filewrapper *> (ptr_13551) ;
                                                cPtr_typeGalgas_filewrapper * operand_13575 = dynamic_cast <cPtr_typeGalgas_filewrapper *> (ptr_13575) ;
                                                if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
                                                }else{
                                                  cPtr_typeGalgas_enum * operand_13551 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_13551) ;
                                                  cPtr_typeGalgas_enum * operand_13575 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_13575) ;
                                                  if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
                                                    const GGS_bool cond_15313 = (operand_13551->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (350))).operator_isNotEqual (operand_13575->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (350))) ;
                                                    if (cond_15313.isBuiltAndTrue ()) {
                                                      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between an '@")).operator_concat (operand_13551->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (351)))).operator_concat (GGS_string ("' enumeration and an '@"))).operator_concat (operand_13575->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (352)))).operator_concat (GGS_string ("' enumeration is not valid")) COMMA_SOURCE_FILE_AT_LINE (353)) ;
                                                    }
                                                  }else{
                                                    cPtr_typeGalgasUndefinedListType * operand_13551 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_13551) ;
                                                    cPtr_typeGalgasUndefinedListType * operand_13575 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_13575) ;
                                                    if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
                                                      const GGS_bool cond_15660 = (operand_13551->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (355))).operator_isNotEqual (operand_13575->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (355))) ;
                                                      if (cond_15660.isBuiltAndTrue ()) {
                                                        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("I was expecting the list type '@")).operator_concat (operand_13551->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (356)))).operator_concat (GGS_string ("', I have got the list type '@"))).operator_concat (operand_13575->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (357)))).operator_concat (GGS_string ("\"")) COMMA_SOURCE_FILE_AT_LINE (358)) ;
                                                      }
                                                    }else{
                                                      cPtr_typeGalgasUndefinedMapType * operand_13551 = dynamic_cast <cPtr_typeGalgasUndefinedMapType *> (ptr_13551) ;
                                                      cPtr_typeGalgasUndefinedMapType * operand_13575 = dynamic_cast <cPtr_typeGalgasUndefinedMapType *> (ptr_13575) ;
                                                      if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
                                                        const GGS_bool cond_16004 = (operand_13551->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (361))).operator_isNotEqual (operand_13575->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (361))) ;
                                                        if (cond_16004.isBuiltAndTrue ()) {
                                                          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("I was expecting the map type '@")).operator_concat (operand_13551->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (362)))).operator_concat (GGS_string ("', I have got the map type '@"))).operator_concat (operand_13575->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (363)))).operator_concat (GGS_string ("\"")) COMMA_SOURCE_FILE_AT_LINE (364)) ;
                                                        }
                                                      }else{
                                                        cPtr_typeGalgasUndefinedMapindexType * operand_13551 = dynamic_cast <cPtr_typeGalgasUndefinedMapindexType *> (ptr_13551) ;
                                                        cPtr_typeGalgasUndefinedMapindexType * operand_13575 = dynamic_cast <cPtr_typeGalgasUndefinedMapindexType *> (ptr_13575) ;
                                                        if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
                                                          const GGS_bool cond_16393 = (operand_13551->mMapindexTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (367))).operator_isNotEqual (operand_13575->mMapindexTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (367))) ;
                                                          if (cond_16393.isBuiltAndTrue ()) {
                                                            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("I was expecting the map index type '@")).operator_concat (operand_13551->mMapindexTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (368)))).operator_concat (GGS_string ("', I have got the map index type '@"))).operator_concat (operand_13575->mMapindexTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (369)))).operator_concat (GGS_string ("\"")) COMMA_SOURCE_FILE_AT_LINE (370)) ;
                                                          }
                                                        }else{
                                                          cPtr_typeGalgasUndefinedClassType * operand_13551 = dynamic_cast <cPtr_typeGalgasUndefinedClassType *> (ptr_13551) ;
                                                          cPtr_typeGalgasUndefinedClassType * operand_13575 = dynamic_cast <cPtr_typeGalgasUndefinedClassType *> (ptr_13575) ;
                                                          if ((operand_13551 != NULL) && (operand_13575 != NULL)) {
                                                            const GGS_bool cond_16737 = (operand_13551->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (374))).operator_isNotEqual (operand_13575->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (374))) ;
                                                            if (cond_16737.isBuiltAndTrue ()) {
                                                              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("I was expecting the class type '@")).operator_concat (operand_13551->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (375)))).operator_concat (GGS_string ("', I have got the class type '@"))).operator_concat (operand_13575->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (376)))).operator_concat (GGS_string ("\"")) COMMA_SOURCE_FILE_AT_LINE (377)) ;
                                                            }
                                                          }else{
                                                            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (379)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (380)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (381)) ;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_comparison_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "magnitude_comparison_types_check"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_magnitude_comparison_types_check (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_magnitude_comparison_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_17493 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_17517 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_stringset * operand_17493 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_17493) ;
    cPtr_typeGalgas_stringset * operand_17517 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_17517) ;
    if ((operand_17493 != NULL) && (operand_17517 != NULL)) {
    }else{
      cPtr_typeGalgas_bool * operand_17493 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_17493) ;
      cPtr_typeGalgas_bool * operand_17517 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_17517) ;
      if ((operand_17493 != NULL) && (operand_17517 != NULL)) {
      }else{
        cPtr_typeGalgas_char * operand_17493 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_17493) ;
        cPtr_typeGalgas_char * operand_17517 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_17517) ;
        if ((operand_17493 != NULL) && (operand_17517 != NULL)) {
        }else{
          cPtr_typeGalgas_uint * operand_17493 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17493) ;
          cPtr_typeGalgas_uint * operand_17517 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17517) ;
          if ((operand_17493 != NULL) && (operand_17517 != NULL)) {
          }else{
            cPtr_typeGalgas_sint * operand_17493 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_17493) ;
            cPtr_typeGalgas_sint * operand_17517 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_17517) ;
            if ((operand_17493 != NULL) && (operand_17517 != NULL)) {
            }else{
              cPtr_typeGalgas_uint64 * operand_17493 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_17493) ;
              cPtr_typeGalgas_uint64 * operand_17517 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_17517) ;
              if ((operand_17493 != NULL) && (operand_17517 != NULL)) {
              }else{
                cPtr_typeGalgas_sint64 * operand_17493 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_17493) ;
                cPtr_typeGalgas_sint64 * operand_17517 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_17517) ;
                if ((operand_17493 != NULL) && (operand_17517 != NULL)) {
                }else{
                  cPtr_typeGalgas_double * operand_17493 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_17493) ;
                  cPtr_typeGalgas_double * operand_17517 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_17517) ;
                  if ((operand_17493 != NULL) && (operand_17517 != NULL)) {
                  }else{
                    cPtr_typeGalgas_string * operand_17493 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_17493) ;
                    cPtr_typeGalgas_string * operand_17517 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_17517) ;
                    if ((operand_17493 != NULL) && (operand_17517 != NULL)) {
                    }else{
                      cPtr_typeGalgas_enum * operand_17493 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_17493) ;
                      cPtr_typeGalgas_enum * operand_17517 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_17517) ;
                      if ((operand_17493 != NULL) && (operand_17517 != NULL)) {
                        const GGS_bool cond_18373 = (operand_17493->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (405))).operator_isNotEqual (operand_17517->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (405))) ;
                        if (cond_18373.isBuiltAndTrue ()) {
                          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between an '@")).operator_concat (operand_17493->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (406)))).operator_concat (GGS_string ("' enumeration and an '@"))).operator_concat (operand_17517->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (407)))).operator_concat (GGS_string ("' enumeration is not valid")) COMMA_SOURCE_FILE_AT_LINE (408)) ;
                        }
                      }else{
                        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (410)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (411)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (412)) ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_magnitude_comparison_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "left_shift_types_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_left_shift_types_check (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_left_shift_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_19151 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_19175 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_19151 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_19151) ;
    cPtr_typeGalgas_uint * operand_19175 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19175) ;
    if ((operand_19151 != NULL) && (operand_19175 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_uint * operand_19151 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19151) ;
      cPtr_typeGalgas_uint * operand_19175 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19175) ;
      if ((operand_19151 != NULL) && (operand_19175 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_sint * operand_19151 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_19151) ;
        cPtr_typeGalgas_uint * operand_19175 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19175) ;
        if ((operand_19151 != NULL) && (operand_19175 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_19151 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_19151) ;
          cPtr_typeGalgas_uint * operand_19175 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19175) ;
          if ((operand_19151 != NULL) && (operand_19175 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint64 * operand_19151 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_19151) ;
            cPtr_typeGalgas_uint * operand_19175 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19175) ;
            if ((operand_19151 != NULL) && (operand_19175 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("shift between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (438)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (439)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (442)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_left_shift_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "right_shift_types_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_right_shift_types_check (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_right_shift_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_20156 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_20180 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_20156 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_20156) ;
    cPtr_typeGalgas_uint * operand_20180 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_20180) ;
    if ((operand_20156 != NULL) && (operand_20180 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_uint * operand_20156 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_20156) ;
      cPtr_typeGalgas_uint * operand_20180 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_20180) ;
      if ((operand_20156 != NULL) && (operand_20180 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_sint * operand_20156 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_20156) ;
        cPtr_typeGalgas_uint * operand_20180 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_20180) ;
        if ((operand_20156 != NULL) && (operand_20180 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_20156 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_20156) ;
          cPtr_typeGalgas_uint * operand_20180 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_20180) ;
          if ((operand_20156 != NULL) && (operand_20180 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint64 * operand_20156 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_20156) ;
            cPtr_typeGalgas_uint * operand_20180 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_20180) ;
            if ((operand_20156 != NULL) && (operand_20180 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("shift between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (464)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (465)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (468)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_right_shift_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "addition_types_check"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addition_types_check (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addition_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_21470 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_21494 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_21470 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_21470) ;
    cPtr_typeGalgas_uint * operand_21494 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_21494) ;
    if ((operand_21470 != NULL) && (operand_21494 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_21470 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_21470) ;
      cPtr_typeGalgas_sint * operand_21494 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_21494) ;
      if ((operand_21470 != NULL) && (operand_21494 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_21470 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_21470) ;
        cPtr_typeGalgas_uint64 * operand_21494 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_21494) ;
        if ((operand_21470 != NULL) && (operand_21494 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_21470 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_21470) ;
          cPtr_typeGalgas_sint64 * operand_21494 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_21494) ;
          if ((operand_21470 != NULL) && (operand_21494 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_double * operand_21470 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_21470) ;
            cPtr_typeGalgas_double * operand_21494 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_21494) ;
            if ((operand_21470 != NULL) && (operand_21494 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("addition between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (494)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (495)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (498)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addition_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "substraction_types_check"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_substraction_types_check (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_substraction_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_22797 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_22821 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_22797 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_22797) ;
    cPtr_typeGalgas_uint * operand_22821 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_22821) ;
    if ((operand_22797 != NULL) && (operand_22821 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_22797 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_22797) ;
      cPtr_typeGalgas_sint * operand_22821 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_22821) ;
      if ((operand_22797 != NULL) && (operand_22821 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_22797 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_22797) ;
        cPtr_typeGalgas_uint64 * operand_22821 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_22821) ;
        if ((operand_22797 != NULL) && (operand_22821 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_22797 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_22797) ;
          cPtr_typeGalgas_sint64 * operand_22821 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_22821) ;
          if ((operand_22797 != NULL) && (operand_22821 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_stringset * operand_22797 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_22797) ;
            cPtr_typeGalgas_stringset * operand_22821 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_22821) ;
            if ((operand_22797 != NULL) && (operand_22821 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_double * operand_22797 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_22797) ;
              cPtr_typeGalgas_double * operand_22821 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_22821) ;
              if ((operand_22797 != NULL) && (operand_22821 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("substraction between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (526)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (527)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (530)) ;
                var_cas_outResultType.drop () ;
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_substraction_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "multiply_types_check"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_multiply_types_check (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_multiply_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_24230 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_24254 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_24230 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_24230) ;
    cPtr_typeGalgas_uint * operand_24254 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_24254) ;
    if ((operand_24230 != NULL) && (operand_24254 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_24230 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_24230) ;
      cPtr_typeGalgas_sint * operand_24254 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_24254) ;
      if ((operand_24230 != NULL) && (operand_24254 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_24230 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_24230) ;
        cPtr_typeGalgas_uint64 * operand_24254 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_24254) ;
        if ((operand_24230 != NULL) && (operand_24254 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_24230 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_24230) ;
          cPtr_typeGalgas_sint64 * operand_24254 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_24254) ;
          if ((operand_24230 != NULL) && (operand_24254 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_double * operand_24230 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_24230) ;
            cPtr_typeGalgas_double * operand_24254 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_24254) ;
            if ((operand_24230 != NULL) && (operand_24254 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("multiplication between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (556)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (557)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (560)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_multiply_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "divide_types_check"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_divide_types_check (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_divide_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_25557 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_25581 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_25557 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_25557) ;
    cPtr_typeGalgas_uint * operand_25581 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_25581) ;
    if ((operand_25557 != NULL) && (operand_25581 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_25557 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_25557) ;
      cPtr_typeGalgas_sint * operand_25581 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_25581) ;
      if ((operand_25557 != NULL) && (operand_25581 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_25557 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_25557) ;
        cPtr_typeGalgas_uint64 * operand_25581 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_25581) ;
        if ((operand_25557 != NULL) && (operand_25581 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_25557 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_25557) ;
          cPtr_typeGalgas_sint64 * operand_25581 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_25581) ;
          if ((operand_25557 != NULL) && (operand_25581 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_double * operand_25557 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_25557) ;
            cPtr_typeGalgas_double * operand_25581 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_25581) ;
            if ((operand_25557 != NULL) && (operand_25581 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("division between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (586)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (587)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (590)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_divide_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "modulo_types_check"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_modulo_types_check (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_modulo_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_26878 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_26902 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_26878 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_26878) ;
    cPtr_typeGalgas_uint * operand_26902 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_26902) ;
    if ((operand_26878 != NULL) && (operand_26902 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_26878 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_26878) ;
      cPtr_typeGalgas_sint * operand_26902 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_26902) ;
      if ((operand_26878 != NULL) && (operand_26902 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_26878 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_26878) ;
        cPtr_typeGalgas_uint64 * operand_26902 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_26902) ;
        if ((operand_26878 != NULL) && (operand_26902 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_26878 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_26878) ;
          cPtr_typeGalgas_sint64 * operand_26902 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_26902) ;
          if ((operand_26878 != NULL) && (operand_26902 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("modulo between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (614)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (615)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (618)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_modulo_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "unary_minus_type_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_unary_minus_type_check (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_unary_minus_type_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_AC_galgasType _var_28401 = var_cas_inExpressionType ; // CAST instruction
    if (_var_28401.getPtr () != NULL) {
      macroValidPointer (_var_28401.getPtr ()) ;
      if (dynamic_cast <cPtr_typeGalgas_sint *> (_var_28401.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inExpressionType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint64 *> (_var_28401.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inExpressionType ;
      }else if (dynamic_cast <cPtr_typeGalgas_double *> (_var_28401.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inExpressionType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("unary minus for ")).operator_concat (var_cas_inExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (639)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (643)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_unary_minus_type_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_expression_i0_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_concatenation_5F_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_expression_5F_parser_0 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_concatenation_5F_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeConcatOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (684)) ;
          ::routine_matchConcatOperator (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (685)) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_expression_i0_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  nt_concatenation_5F_term_parse (inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_expression_5F_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E_) COMMA_HERE) ;
          nt_concatenation_5F_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'concatenation_term'           *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_concatenation_5F_term_i1_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_5F_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_expression_5F_parser_1 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7C_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_5F_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeOrOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (731)) ;
          ::routine_matchOrOperator (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (732)) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5E_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_5F_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeXorOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (752)) ;
          ::routine_matchXorOperator (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (753)) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_concatenation_5F_term_i1_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  nt_relation_5F_term_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_expression_5F_parser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7C_) COMMA_HERE) ;
          nt_relation_5F_term_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5E_) COMMA_HERE) ;
          nt_relation_5F_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'relation_term'              *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_relation_5F_term_i2_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_5F_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_expression_5F_parser_2 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__26_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_5F_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeAndOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (799)) ;
          ::routine_matchAndOperator (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (800)) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_relation_5F_term_i2_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  nt_relation_5F_factor_parse (inLexique) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_expression_5F_parser_2 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__26_) COMMA_HERE) ;
          nt_relation_5F_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'relation_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_relation_5F_factor_i3_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_simple_5F_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  switch (select_expression_5F_parser_3 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3D__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_5F_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (845)) ;
      var_cas_outExpression = GGS_typeEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (846)) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (847)) ;
      } break ;
    case 3 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_5F_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (863)) ;
      var_cas_outExpression = GGS_typeNonEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (864)) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (865)) ;
      } break ;
    case 4 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3C__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_5F_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (881)) ;
      var_cas_outExpression = GGS_typeInfOrEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (882)) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (883)) ;
      } break ;
    case 5 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3E__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_5F_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (899)) ;
      var_cas_outExpression = GGS_typeSupOrEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (900)) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (901)) ;
      } break ;
    case 6 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3E_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_5F_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (917)) ;
      var_cas_outExpression = GGS_typeStrictSupTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (918)) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (919)) ;
      } break ;
    case 7 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3C_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_5F_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (935)) ;
      var_cas_outExpression = GGS_typeStrictInfTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (936)) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (937)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_relation_5F_factor_i3_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  nt_simple_5F_expression_parse (inLexique) ;
  switch (select_expression_5F_parser_3 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3D__3D_) COMMA_HERE) ;
      nt_simple_5F_expression_parse (inLexique) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21__3D_) COMMA_HERE) ;
      nt_simple_5F_expression_parse (inLexique) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3C__3D_) COMMA_HERE) ;
      nt_simple_5F_expression_parse (inLexique) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3E__3D_) COMMA_HERE) ;
      nt_simple_5F_expression_parse (inLexique) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3E_) COMMA_HERE) ;
      nt_simple_5F_expression_parse (inLexique) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3C_) COMMA_HERE) ;
      nt_simple_5F_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'simple_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_simple_5F_expression_i4_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_expression_5F_parser_4 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3C__3C_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_left_shift_types_check (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (979)) ;
          var_cas_outExpression = GGS_typeLeftShiftOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (980)) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3E__3E_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_right_shift_types_check (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (996)) ;
          var_cas_outExpression = GGS_typeRightShiftOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (997)) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2B_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_addition_types_check (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1013)) ;
          var_cas_outExpression = GGS_typeAddOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1014)) ;
          } break ;
        case 5 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_substraction_types_check (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1030)) ;
          var_cas_outExpression = GGS_typeSubOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1031)) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_simple_5F_expression_i4_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  nt_term_parse (inLexique) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_expression_5F_parser_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3C__3C_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3E__3E_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2B_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'term'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_term_i5_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_expression_5F_parser_5 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2A_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_multiply_types_check (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1073)) ;
          var_cas_outExpression = GGS_typeMultiplyOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1074)) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2F_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_divide_types_check (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1090)) ;
          var_cas_outExpression = GGS_typeDivideOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1091)) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_mod) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_modulo_types_check (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1107)) ;
          var_cas_outExpression = GGS_typeModuloOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1108)) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_term_i5_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  nt_factor_parse (inLexique) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_expression_5F_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2A_) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2F_) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_mod) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_factor_i6_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_expression ;
  GGS_AC_galgasType  var_cas_type ;
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expression, var_cas_type) ;
  ::routine_unary_minus_type_check (inLexique,  var_cas_type,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1138)) ;
  var_cas_outExpression = GGS_typeUnaryMinusOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1139)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_factor_i6_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D_) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_factor_i7_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_primary_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_expression_5F_parser_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
          GGS_lstring  var_cas_fieldName ;
          inLexique.assignFromAttribute_tokenString (var_cas_fieldName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          { const GGS_AC_galgasType _var_46033 = var_cas_outResultType ; // CAST instruction
            if (_var_46033.getPtr () != NULL) {
              macroValidPointer (_var_46033.getPtr ()) ;
              if (typeid (cPtr_typeGalgasStructType) == typeid (* (_var_46033.getPtr ()))) {
                const GGS_typeGalgasStructType var_cas_st (_var_46033.getPtr ()) ;
                GGS_bool var_cas_found = GGS_bool (false) ;
                {
                  GGS_typeListeAttributsSemantiques::cEnumerator enumerator_45573 (var_cas_st.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1171)), true) ;
                  const GGS_typeListeAttributsSemantiques::cElement * operand_45573 = NULL ;
                  while (((operand_45573 = enumerator_45573.nextObject ()))
                      && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
                    macroValidPointer (operand_45573) ;
                    var_cas_found = (var_cas_fieldName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1172))).operator_isEqual (operand_45573->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1172))) ;
                    var_cas_outResultType = operand_45573->mAttributType ;
                  }
                }
                const GGS_bool cond_45852 = var_cas_found ;
                if (cond_45852.isBuiltAndTrue ()) {
                  var_cas_outExpression = GGS_typeFieldAccessOperation ::constructor_new (inLexique, var_cas_outExpression, var_cas_fieldName COMMA_SOURCE_FILE_AT_LINE (1176)) ;
                }else if (cond_45852.isBuiltAndFalse ()) {
                  var_cas_fieldName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this structure does have a '")).operator_concat (var_cas_fieldName)).operator_concat (GGS_string ("' field")) COMMA_SOURCE_FILE_AT_LINE (1179)) ;
                }
              }else{
                var_cas_fieldName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only a structure accepts field access") COMMA_SOURCE_FILE_AT_LINE (1182)) ;
              }
            }
          }
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_factor_i7_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  nt_primary_parse (inLexique) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_expression_5F_parser_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_factor_i8_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_not) COMMA_HERE) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeTestComplement ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_ifCondition COMMA_SOURCE_FILE_AT_LINE (1212)) ;
  ::routine_checkNotOperator (inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1213)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_factor_i8_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_not) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_factor_i9_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7E_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeLogicalNegate ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_ifCondition COMMA_SOURCE_FILE_AT_LINE (1242)) ;
  ::routine_checkLogicalNegateOperator (inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1243)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_factor_i9_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7E_) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'primary'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i10_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_typeCplusPlusName  var_cas_nomCppEntite1 ;
  GGS_lstring  automatic_var_48984_0 ;
  nt_read_5F_access_ (inLexique, automatic_var_48984_0, var_cas_nomCppEntite1, var_cas_outResultType, var_cas_ioVariablesMap) ;
  var_cas_outExpression = GGS_typeVarInExpression ::constructor_new (inLexique, var_cas_nomCppEntite1, GGS_lstringlist ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (1262)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i10_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  nt_read_5F_access_parse (inLexique) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'primary'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i11_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_cast) COMMA_HERE) ;
  GGS_typeExpression  var_cas_castedExpression ;
  GGS_AC_galgasType  var_cas_castExpressionType ;
  nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_castedExpression, var_cas_castExpressionType) ;
  GGS_string var_cas_kSourceExpressionClassName ;
  GGS_bool var_cas_isObjectCast ;
  { const GGS_AC_galgasType _var_50616 = var_cas_castExpressionType ; // CAST instruction
    if (_var_50616.getPtr () != NULL) {
      macroValidPointer (_var_50616.getPtr ()) ;
      if (dynamic_cast <cPtr_typeGalgasClassType *> (_var_50616.getPtr ()) != NULL) {
        const GGS_typeGalgasClassType var_cas_aClass (_var_50616.getPtr ()) ;
        var_cas_kSourceExpressionClassName = var_cas_aClass.reader_mClassTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (1297)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1297)) ;
        var_cas_isObjectCast = GGS_bool (false) ;
      }else if (dynamic_cast <cPtr_typeGalgas_object *> (_var_50616.getPtr ()) != NULL) {
        var_cas_kSourceExpressionClassName = GGS_string ("object") ;
        var_cas_isObjectCast = GGS_bool (true) ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the cast expression should be an instance of an object type, or an instance of a class type") COMMA_SOURCE_FILE_AT_LINE (1304)) ;
        var_cas_kSourceExpressionClassName.drop () ;
        var_cas_isObjectCast.drop () ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_if) COMMA_HERE) ;
  GGS_bool var_cas_checkForKindOfClass ;
  switch (select_expression_5F_parser_7 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3E__3D_) COMMA_HERE) ;
      var_cas_checkForKindOfClass = GGS_bool (true) ;
      const GGS_bool cond_50824 = var_cas_isObjectCast ;
      if (cond_50824.isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("casting an object instance requires the '==' operator") COMMA_SOURCE_FILE_AT_LINE (1312)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3D__3D_) COMMA_HERE) ;
      var_cas_checkForKindOfClass = GGS_bool (false) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring  var_cas_castedTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_castedTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  if (var_cas_inEntitiesMap.isBuilt ()) {
    var_cas_inEntitiesMap (HERE)->method_searchKey (inLexique, var_cas_castedTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1322)) ;
  }
  var_cas_outResultType = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_castedTypeName COMMA_SOURCE_FILE_AT_LINE (1323)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (1323)) ;
  const GGS_bool cond_52327 = (var_cas_isObjectCast).operator_not () ;
  if (cond_52327.isBuiltAndTrue ()) {
    GGS_typeGalgasClassType  var_cas_resultClassType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_outResultType.getPtr (), true, var_cas_castedTypeName COMMA_SOURCE_FILE_AT_LINE (1327)) ;
    GGS_typeSuperClassesMap  var_cas_superClassMap = var_cas_resultClassType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1328)) ;
    GGS_string var_cas_classMessage = var_cas_resultClassType.reader_mClassMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (1329)) ;
    const GGS_bool cond_51786 = (var_cas_classMessage.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
    if (cond_51786.isBuiltAndTrue ()) {
      var_cas_castedTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("in order to be used in a cast expression, the '@")).operator_concat (var_cas_castedTypeName)).operator_concat (GGS_string ("' class should define a class message")) COMMA_SOURCE_FILE_AT_LINE (1333)) ;
    }
    const GGS_bool cond_52144 = (var_cas_checkForKindOfClass).operator_not () ;
    if (cond_52144.isBuiltAndTrue ()) {
      const GGS_bool cond_52129 = ((var_cas_castedTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1336))).operator_isNotEqual (var_cas_kSourceExpressionClassName)).operator_and ((var_cas_superClassMap.reader_hasKey (var_cas_kSourceExpressionClassName)).operator_not ()) ;
      if (cond_52129.isBuiltAndTrue ()) {
        var_cas_castedTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("This class is not '@")).operator_concat (var_cas_kSourceExpressionClassName)).operator_concat (GGS_string ("' and does inherit from it")) COMMA_SOURCE_FILE_AT_LINE (1338)) ;
      }
    }else if (cond_52144.isBuiltAndFalse ()) {
      const GGS_bool cond_52316 = (var_cas_superClassMap.reader_hasKey (var_cas_kSourceExpressionClassName)).operator_not () ;
      if (cond_52316.isBuiltAndTrue ()) {
        var_cas_castedTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("This class does not inherit from '@")).operator_concat (var_cas_kSourceExpressionClassName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1341)) ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_else) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
  GGS_typeExpression  var_cas_errorLocationExpression ;
  GGS_AC_galgasType  var_cas_errorLocationExpressionType ;
  nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_errorLocationExpression, var_cas_errorLocationExpressionType) ;
  if (var_cas_errorLocationExpressionType.isBuilt ()) {
    var_cas_errorLocationExpressionType (HERE)->method_checkAbilityToBeSilentlyConvertedToLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (1356)) ;
  }
  const GGS_bool cond_52980 = var_cas_isObjectCast ;
  if (cond_52980.isBuiltAndTrue ()) {
    var_cas_outExpression = GGS_objectCastInExpression ::constructor_new (inLexique, var_cas_castedExpression, var_cas_castedTypeName, var_cas_errorLocationExpression COMMA_SOURCE_FILE_AT_LINE (1359)) ;
  }else if (cond_52980.isBuiltAndFalse ()) {
    var_cas_outExpression = GGS_typeCastInExpression ::constructor_new (inLexique, var_cas_castedExpression, var_cas_checkForKindOfClass, var_cas_castedTypeName, var_cas_errorLocationExpression COMMA_SOURCE_FILE_AT_LINE (1365)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i11_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_cast) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_if) COMMA_HERE) ;
  switch (select_expression_5F_parser_7 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3E__3D_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3D__3D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_else) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'primary'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i12_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
  nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i12_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'primary'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i13_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_true) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeTrueBool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1416)) ;
  var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1417)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i13_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_true) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'primary'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i14_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_false) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeFalseBool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1435)) ;
  var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1436)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i14_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_false) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'primary'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i15_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_stringlist  var_cas_literalStringList = GGS_stringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
        GGS_lstring  var_cas_literalString ;
        inLexique.assignFromAttribute_tokenString (var_cas_literalString) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
        var_cas_literalStringList.addAssign_operation (var_cas_literalString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1457))) ;
      switch (select_expression_5F_parser_8 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
  var_cas_outExpression = GGS_typeLiteralStringExpression ::constructor_new (inLexique, var_cas_literalStringList COMMA_SOURCE_FILE_AT_LINE (1460)) ;
  var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1461)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i15_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      switch (select_expression_5F_parser_8 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'primary'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i16_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint_33__32_value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralUIntExpression ::constructor_new (inLexique, var_cas_literalInt COMMA_SOURCE_FILE_AT_LINE (1480)) ;
  var_cas_outResultType = GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1481)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i16_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'primary'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i17_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint  var_cas_literalInt ;
  inLexique.assignFromAttribute_sint_33__32_value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_signed_5F_literal_5F_integer) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralSIntExpression ::constructor_new (inLexique, var_cas_literalInt COMMA_SOURCE_FILE_AT_LINE (1500)) ;
  var_cas_outResultType = GGS_typeGalgas_sint ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1501)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i17_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_signed_5F_literal_5F_integer) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'primary'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i18_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint_36__34_value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralUInt64Expression ::constructor_new (inLexique, var_cas_literalInt COMMA_SOURCE_FILE_AT_LINE (1520)) ;
  var_cas_outResultType = GGS_typeGalgas_uint64 ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1521)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i18_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'primary'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i19_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_sint_36__34_value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_signed_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralSInt64Expression ::constructor_new (inLexique, var_cas_literalInt COMMA_SOURCE_FILE_AT_LINE (1540)) ;
  var_cas_outResultType = GGS_typeGalgas_sint64 ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1541)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i19_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_signed_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'primary'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i20_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lchar  var_cas_literalChar ;
  inLexique.assignFromAttribute_charValue (var_cas_literalChar) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_char) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralCharExpression ::constructor_new (inLexique, var_cas_literalChar COMMA_SOURCE_FILE_AT_LINE (1559)) ;
  var_cas_outResultType = GGS_typeGalgas_char ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1560)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i20_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_char) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'primary'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i21_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_ldouble  var_cas_literalDouble ;
  inLexique.assignFromAttribute_floatValue (var_cas_literalDouble) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_double) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralDoubleExpression ::constructor_new (inLexique, var_cas_literalDouble COMMA_SOURCE_FILE_AT_LINE (1579)) ;
  var_cas_outResultType = GGS_typeGalgas_double ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1580)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i21_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_double) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'primary'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i22_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_here) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeHereExpression ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1598)) ;
  var_cas_outResultType = GGS_typeGalgas_location ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1599)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i22_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_here) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'primary'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i23_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__60_) COMMA_HERE) ;
  GGS_lstring  var_cas_typeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_AC_semanticsEntity  automatic_var_63490_0 ;
  if (var_cas_inEntitiesMap.isBuilt ()) {
    var_cas_inEntitiesMap (HERE)->method_searchKey (inLexique, var_cas_typeName, automatic_var_63490_0 COMMA_SOURCE_FILE_AT_LINE (1618)) ;
  }
  var_cas_outExpression = GGS_typeClassToTypeOperand ::constructor_new (inLexique, var_cas_typeName COMMA_SOURCE_FILE_AT_LINE (1619)) ;
  var_cas_outResultType = GGS_typeGalgas_type ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1620)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i23_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__60_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'primary'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i24_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_if) COMMA_HERE) ;
  GGS_typeExpression  var_cas_ifExpression ;
  GGS_AC_galgasType  var_cas_ifExpressionType ;
  nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_ifExpression, var_cas_ifExpressionType) ;
  GGS_typeGalgas_bool  var_cas_gb = GGS_typeGalgas_bool::castFrom (inLexique, var_cas_ifExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1650)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_then) COMMA_HERE) ;
  GGS_typeExpression  var_cas_thenExpression ;
  nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_thenExpression, var_cas_outResultType) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_else) COMMA_HERE) ;
  GGS_location  var_cas_errorLocation = GGS_location (inLexique) ;
  GGS_typeExpression  var_cas_elseExpression ;
  GGS_AC_galgasType  var_cas_elseExpressionType ;
  nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_elseExpression, var_cas_elseExpressionType) ;
  ::routine_checkAssignmentTypesCompatibility (inLexique,  var_cas_outResultType,  var_cas_elseExpressionType,  var_cas_errorLocation,  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1676)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeIfThenElseExpression ::constructor_new (inLexique, var_cas_ifExpression, var_cas_thenExpression, var_cas_elseExpression COMMA_SOURCE_FILE_AT_LINE (1685)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i24_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_if) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_then) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_else) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'primary'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i25_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5B_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_expressionValue ;
  GGS_AC_galgasType  var_cas_expressionType ;
  nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expressionValue, var_cas_expressionType) ;
  GGS_lstring  var_cas_methodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_accessorsTypeList ;
  GGS_string var_cas_conversionMethod ;
  GGS_string var_cas_categoryReaderClassBaseName ;
  GGS_bool var_cas_hasLexiqueAndLocationArguments ;
  ::routine_handleReaderCall (inLexique,  var_cas_inEntitiesMap,  var_cas_inSemanticContext.reader_mCategoryReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1730)),  var_cas_expressionType,  var_cas_methodName,  var_cas_accessorsTypeList,  var_cas_outResultType,  var_cas_conversionMethod,  var_cas_categoryReaderClassBaseName,  var_cas_hasLexiqueAndLocationArguments COMMA_SOURCE_FILE_AT_LINE (1728)) ;
  GGS_typeExpressionList  var_cas_expressionList ;
  nt_output_5F_expression_5F_list_ (inLexique, var_cas_expressionList, var_cas_accessorsTypeList, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap) ;
  var_cas_outExpression = GGS_typeReaderCallInExpression ::constructor_new (inLexique, var_cas_expressionValue, var_cas_methodName, var_cas_expressionList, var_cas_conversionMethod, var_cas_categoryReaderClassBaseName, var_cas_hasLexiqueAndLocationArguments COMMA_SOURCE_FILE_AT_LINE (1749)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i25_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5B_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  nt_output_5F_expression_5F_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5D_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'primary'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i26_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5B_) COMMA_HERE) ;
  GGS_lstring  var_cas_typeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_e ;
  if (var_cas_inEntitiesMap.isBuilt ()) {
    var_cas_inEntitiesMap (HERE)->method_searchKey (inLexique, var_cas_typeName, var_cas_e COMMA_SOURCE_FILE_AT_LINE (1781)) ;
  }
  GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_e.getPtr (), true, var_cas_typeName COMMA_SOURCE_FILE_AT_LINE (1782)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (1782)) ;
  GGS_lstring  var_cas_mClassMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mClassMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques ;
  GGS_bool var_cas_hasLexiqueAndLocationArguments ;
  if (var_cas_type.isBuilt ()) {
    var_cas_type (HERE)->method_handleConstructorInvocation (inLexique, var_cas_mClassMethodName, var_cas_listeAttributsSemantiques, var_cas_hasLexiqueAndLocationArguments, var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1788)) ;
  }
  GGS_typeExpressionList  var_cas_expressionList ;
  nt_output_5F_expression_5F_list_ (inLexique, var_cas_expressionList, var_cas_listeAttributsSemantiques, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap) ;
  var_cas_outExpression = GGS_typeConstructorExpression ::constructor_new (inLexique, var_cas_type, var_cas_mClassMethodName, var_cas_hasLexiqueAndLocationArguments, var_cas_expressionList COMMA_SOURCE_FILE_AT_LINE (1799)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i26_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5B_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  nt_output_5F_expression_5F_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5D_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'primary'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i27_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5B_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_option) COMMA_HERE) ;
  switch (select_expression_5F_parser_9 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E_) COMMA_HERE) ;
      GGS_lstring  var_cas_optionName ;
      inLexique.assignFromAttribute_tokenString (var_cas_optionName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      const GGS_bool cond_70527 = (var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1830))).operator_isNotEqual (GGS_string ("verbose_output")) ;
      if (cond_70527.isBuiltAndTrue ()) {
        var_cas_optionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this option name does not correspond to a builtin option") COMMA_SOURCE_FILE_AT_LINE (1832)) ;
      }
      GGS_lstring  var_cas_readerName ;
      inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      const GGS_bool cond_70673 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1834))).operator_isEqual (GGS_string ("value")) ;
      if (cond_70673.isBuiltAndTrue ()) {
        var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1835)) ;
      }else if (cond_70673.isBuiltAndFalse ()) {
        const GGS_bool cond_70766 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1836))).operator_isEqual (GGS_string ("char")) ;
        if (cond_70766.isBuiltAndTrue ()) {
          var_cas_outResultType = GGS_typeGalgas_char ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1837)) ;
        }else if (cond_70766.isBuiltAndFalse ()) {
          const GGS_bool cond_70861 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1838))).operator_isEqual (GGS_string ("string")) ;
          if (cond_70861.isBuiltAndTrue ()) {
            var_cas_outResultType = GGS_typeGalgas_char ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1839)) ;
          }else if (cond_70861.isBuiltAndFalse ()) {
            const GGS_bool cond_70958 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1840))).operator_isEqual (GGS_string ("comment")) ;
            if (cond_70958.isBuiltAndTrue ()) {
              var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1841)) ;
            }else if (cond_70958.isBuiltAndFalse ()) {
              var_cas_readerName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'value', 'char', 'string' and 'comment' readers are defined") COMMA_SOURCE_FILE_AT_LINE (1844)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }
      var_cas_outExpression = GGS_typeOptionAccess ::constructor_new (inLexique, GGS_string ("galgas_cli_options"), var_cas_optionName, var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1845)) COMMA_SOURCE_FILE_AT_LINE (1845)) ;
      } break ;
    case 2 : {
      GGS_lstring  var_cas_optionComponentName ;
      inLexique.assignFromAttribute_tokenString (var_cas_optionComponentName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      GGS_M_cli_options  var_cas_boolOptionsMap ;
      GGS_M_cli_options  var_cas_uintOptionsMap ;
      GGS_M_cli_options  var_cas_stringOptionsMap ;
      if (var_cas_inOptionsComponentsMapForUse.isBuilt ()) {
        var_cas_inOptionsComponentsMapForUse (HERE)->method_searchKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (1851)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E_) COMMA_HERE) ;
      GGS_lstring  var_cas_optionName ;
      inLexique.assignFromAttribute_tokenString (var_cas_optionName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      GGS_lstring  var_cas_readerName ;
      inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      const GGS_bool cond_72134 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1855))).operator_isEqual (GGS_string ("value")) ;
      if (cond_72134.isBuiltAndTrue ()) {
        const GGS_bool cond_71720 = var_cas_boolOptionsMap.reader_hasKey (var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1856))) ;
        if (cond_71720.isBuiltAndTrue ()) {
          var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1857)) ;
        }else if (cond_71720.isBuiltAndFalse ()) {
          const GGS_bool cond_71832 = var_cas_uintOptionsMap.reader_hasKey (var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1858))) ;
          if (cond_71832.isBuiltAndTrue ()) {
            var_cas_outResultType = GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1859)) ;
          }else if (cond_71832.isBuiltAndFalse ()) {
            const GGS_bool cond_71947 = var_cas_stringOptionsMap.reader_hasKey (var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1860))) ;
            if (cond_71947.isBuiltAndTrue ()) {
              var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1861)) ;
            }else if (cond_71947.isBuiltAndFalse ()) {
              var_cas_optionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1863)))).operator_concat (GGS_string ("' option component has no '"))).operator_concat (var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1863)))).operator_concat (GGS_string ("' option")) COMMA_SOURCE_FILE_AT_LINE (1865)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }else if (cond_72134.isBuiltAndFalse ()) {
        const GGS_bool cond_72227 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1866))).operator_isEqual (GGS_string ("char")) ;
        if (cond_72227.isBuiltAndTrue ()) {
          var_cas_outResultType = GGS_typeGalgas_char ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1867)) ;
        }else if (cond_72227.isBuiltAndFalse ()) {
          const GGS_bool cond_72324 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1868))).operator_isEqual (GGS_string ("string")) ;
          if (cond_72324.isBuiltAndTrue ()) {
            var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1869)) ;
          }else if (cond_72324.isBuiltAndFalse ()) {
            const GGS_bool cond_72421 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1870))).operator_isEqual (GGS_string ("comment")) ;
            if (cond_72421.isBuiltAndTrue ()) {
              var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1871)) ;
            }else if (cond_72421.isBuiltAndFalse ()) {
              var_cas_readerName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'value', 'char', 'string' and 'comment' readers are defined") COMMA_SOURCE_FILE_AT_LINE (1874)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }
      var_cas_outExpression = GGS_typeOptionAccess ::constructor_new (inLexique, var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1875)), var_cas_optionName, var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1875)) COMMA_SOURCE_FILE_AT_LINE (1875)) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i27_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5B_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_option) COMMA_HERE) ;
  switch (select_expression_5F_parser_9 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5D_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'primary'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i28_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5B_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_filewrapper) COMMA_HERE) ;
  GGS_lstring  var_cas_filewrapperName ;
  inLexique.assignFromAttribute_tokenString (var_cas_filewrapperName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_M_regularFilesEX  var_cas_regularFileMap ;
  GGS_filewrapperTemplateMapEX  var_cas_templateMap ;
  const GGS_M_filewrappersEX  temp_73917 = var_cas_inSemanticContext.reader_mFilewrappers (inLexique COMMA_SOURCE_FILE_AT_LINE (1905)) ;
  if (temp_73917.isBuilt ()) {
    temp_73917 (HERE)->method_searchKey (inLexique, var_cas_filewrapperName, var_cas_regularFileMap, var_cas_templateMap COMMA_SOURCE_FILE_AT_LINE (1905)) ;
  }
  switch (select_expression_5F_parser_10 (inLexique)) {
    case 1 : {
      var_cas_outExpression = GGS_typeFileWrapperObjectInstanciation ::constructor_new (inLexique, var_cas_filewrapperName COMMA_SOURCE_FILE_AT_LINE (1907)) ;
      var_cas_outResultType = GGS_typeGalgas_filewrapper ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1908)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E_) COMMA_HERE) ;
      switch (select_expression_5F_parser_11 (inLexique)) {
        case 1 : {
          GGS_lstring  var_cas_templateName ;
          inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          GGS_typeListeAttributsSemantiques  var_cas_formalAttributeList ;
          if (var_cas_templateMap.isBuilt ()) {
            var_cas_templateMap (HERE)->method_searchKey (inLexique, var_cas_templateName, var_cas_formalAttributeList COMMA_SOURCE_FILE_AT_LINE (1917)) ;
          }
          GGS_typeExpressionList  var_cas_expressionList ;
          nt_output_5F_expression_5F_list_ (inLexique, var_cas_expressionList, var_cas_formalAttributeList, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap) ;
          var_cas_outExpression = GGS_typeFileWrapperTemplateCall ::constructor_new (inLexique, var_cas_filewrapperName, var_cas_templateName, var_cas_expressionList COMMA_SOURCE_FILE_AT_LINE (1929)) ;
          var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1930)) ;
          } break ;
        case 2 : {
          GGS_lstring  var_cas_path ;
          inLexique.assignFromAttribute_tokenString (var_cas_path) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
          GGS_uint  var_cas_wrapperFileIndex ;
          GGS_uint  automatic_var_74985_0 ;
          if (var_cas_regularFileMap.isBuilt ()) {
            var_cas_regularFileMap (HERE)->method_searchKey (inLexique, var_cas_path, automatic_var_74985_0, var_cas_wrapperFileIndex COMMA_SOURCE_FILE_AT_LINE (1937)) ;
          }
          var_cas_outExpression = GGS_typeFileWrapperWithStaticPath ::constructor_new (inLexique, var_cas_filewrapperName, var_cas_wrapperFileIndex COMMA_SOURCE_FILE_AT_LINE (1938)) ;
          var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1939)) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i28_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5B_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_filewrapper) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  switch (select_expression_5F_parser_10 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E_) COMMA_HERE) ;
      switch (select_expression_5F_parser_11 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          nt_output_5F_expression_5F_list_parse (inLexique) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5D_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'primary'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i29_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lstring  var_cas_functionName ;
  inLexique.assignFromAttribute_tokenString (var_cas_functionName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_signatureRoutine ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  if (var_cas_inEntitiesMap.isBuilt ()) {
    var_cas_inEntitiesMap (HERE)->method_searchKey (inLexique, var_cas_functionName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1965)) ;
  }
  GGS_bool var_cas_isExternActionCall ;
  { const GGS_AC_semanticsEntity _var_76693 = var_cas_entite ; // CAST instruction
    if (_var_76693.getPtr () != NULL) {
      macroValidPointer (_var_76693.getPtr ()) ;
      if (dynamic_cast <cPtr_typeEntiteFonction *> (_var_76693.getPtr ()) != NULL) {
        const GGS_typeEntiteFonction var_cas_r (_var_76693.getPtr ()) ;
        var_cas_signatureRoutine = var_cas_r.reader_aListeArgumentsFormels (inLexique COMMA_SOURCE_FILE_AT_LINE (1969)) ;
        var_cas_outResultType = var_cas_r.reader_mReturnedType (inLexique COMMA_SOURCE_FILE_AT_LINE (1970)) ;
        var_cas_isExternActionCall = GGS_bool (false) ;
      }else if (dynamic_cast <cPtr_typeEntiteFonctionExterne *> (_var_76693.getPtr ()) != NULL) {
        const GGS_typeEntiteFonctionExterne var_cas_ae (_var_76693.getPtr ()) ;
        var_cas_signatureRoutine = var_cas_ae.reader_aSignature (inLexique COMMA_SOURCE_FILE_AT_LINE (1973)) ;
        var_cas_outResultType = var_cas_ae.reader_mReturnedType (inLexique COMMA_SOURCE_FILE_AT_LINE (1974)) ;
        var_cas_isExternActionCall = GGS_bool (true) ;
      }else{
        var_cas_functionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("'")).operator_concat (var_cas_functionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1978)))).operator_concat (GGS_string ("' should name a function or an extern function")) COMMA_SOURCE_FILE_AT_LINE (1981)) ;
        var_cas_signatureRoutine.drop () ;
        var_cas_isExternActionCall.drop () ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  GGS_typeExpressionList  var_cas_expressionList ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  {
    GGS_L_EXsignature::cEnumerator enumerator_76861 (var_cas_signatureRoutine, true) ;
    const GGS_L_EXsignature::cElement * operand_76861 = NULL ;
    while (((operand_76861 = enumerator_76861.nextObject ()))) {
      macroValidPointer (operand_76861) ;
      var_cas_listeAttributsSemantiques.addAssign_operation (operand_76861->mType, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1986))) ;
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5B_) COMMA_HERE) ;
  nt_output_5F_expression_5F_list_ (inLexique, var_cas_expressionList, var_cas_listeAttributsSemantiques, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5D_) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeFunctionCall ::constructor_new (inLexique, var_cas_functionName, var_cas_expressionList COMMA_SOURCE_FILE_AT_LINE (1998)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_primary_i29_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5B_) COMMA_HERE) ;
  nt_output_5F_expression_5F_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5D_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'read_access'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_read_5F_access_i30_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lstring  &var_cas_nomVariable,
                                GGS_typeCplusPlusName  &var_cas_nomCppEntite,
                                GGS_AC_galgasType  &var_cas_typeEntite,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  inLexique.assignFromAttribute_tokenString (var_cas_nomVariable) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  var_cas_ioVariablesMap.modifier_searchForReadOnlyAccess (inLexique, var_cas_nomVariable, var_cas_typeEntite, var_cas_nomCppEntite COMMA_SOURCE_FILE_AT_LINE (2014)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_read_5F_access_i30_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'read_access'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_read_5F_access_i31_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lstring  &var_cas_nomVariable,
                                GGS_typeCplusPlusName  &var_cas_nomCppEntite,
                                GGS_AC_galgasType  &var_cas_typeEntite,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_self) COMMA_HERE) ;
  const GGS_bool cond_78662 = var_cas_ioVariablesMap.reader_hasKey (GGS_string ("self")) ;
  if (cond_78662.isBuiltAndTrue ()) {
    var_cas_nomVariable = GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2031)) ;
    var_cas_ioVariablesMap.modifier_searchForReadOnlyAccess (inLexique, var_cas_nomVariable, var_cas_typeEntite, var_cas_nomCppEntite COMMA_SOURCE_FILE_AT_LINE (2032)) ;
  }else if (cond_78662.isBuiltAndFalse ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'self' is not defined in this context") COMMA_SOURCE_FILE_AT_LINE (2036)) ;
    var_cas_nomVariable.drop () ;
    var_cas_nomCppEntite.drop () ;
    var_cas_typeEntite.drop () ;
  }
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_read_5F_access_i31_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_self) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'output_expression_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_output_5F_expression_5F_list_i32_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeExpressionList  &var_cas_outExpressionList,
                                const GGS_typeListeAttributsSemantiques  var_cas_inFormalAttributesList,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  GGS_typeTypesList  var_cas_effectiveTypesList = GGS_typeTypesList ::constructor_emptyList () ;
  var_cas_outExpressionList = GGS_typeExpressionList ::constructor_emptyList () ;
  { bool syntaxRepeat_12 = true ;
    while (syntaxRepeat_12) {
      switch (select_expression_5F_parser_12 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_expression ;
          GGS_AC_galgasType  var_cas_resultType ;
          nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expression, var_cas_resultType) ;
          GGS_location  var_cas_errorLocation = GGS_location (inLexique) ;
          var_cas_effectiveTypesList.addAssign_operation (var_cas_resultType, var_cas_errorLocation) ;
          var_cas_outExpressionList.addAssign_operation (var_cas_expression) ;
          } break ;
        default :
          syntaxRepeat_12 = false ;
          break ;
      }
    }
  }
  GGS_location  var_cas_endOfListLocation = GGS_location (inLexique) ;
  const GGS_bool cond_80222 = (var_cas_inFormalAttributesList.reader_length ()).operator_strictInf (var_cas_effectiveTypesList.reader_length ()) ;
  if (cond_80222.isBuiltAndTrue ()) {
    var_cas_endOfListLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("too much expressions") COMMA_SOURCE_FILE_AT_LINE (2076)) ;
  }else if (cond_80222.isBuiltAndFalse ()) {
    const GGS_bool cond_80362 = (var_cas_inFormalAttributesList.reader_length ()).operator_strictSup (var_cas_effectiveTypesList.reader_length ()) ;
    if (cond_80362.isBuiltAndTrue ()) {
      var_cas_endOfListLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("one or more expressions missing") COMMA_SOURCE_FILE_AT_LINE (2078)) ;
    }else if (cond_80362.isBuiltAndFalse ()) {
      {
        GGS_typeListeAttributsSemantiques::cEnumerator enumerator_80397 (var_cas_inFormalAttributesList, true) ;
        const GGS_typeListeAttributsSemantiques::cElement * operand_80397 = NULL ;
        GGS_typeTypesList::cEnumerator enumerator_80417 (var_cas_effectiveTypesList, true) ;
        const GGS_typeTypesList::cElement * operand_80417 = NULL ;
        while (((operand_80397 = enumerator_80397.nextObject ()))
            && ((operand_80417 = enumerator_80417.nextObject ()))) {
          macroValidPointer (operand_80397) ;
          macroValidPointer (operand_80417) ;
          ::routine_checkAssignmentTypesCompatibility (inLexique,  operand_80397->mAttributType,  operand_80417->mType,  operand_80417->mEndOfExpressionLocation,  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (2080)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_output_5F_expression_5F_list_i32_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  { bool syntaxRepeat_12 = true ;
    while (syntaxRepeat_12) {
      switch (select_expression_5F_parser_12 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21_) COMMA_HERE) ;
          nt_expression_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_12 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'parse_effective_input_parameters_list'  *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_parse_5F_effective_5F_input_5F_parameters_5F_list_i33_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeListeAttributsSemantiques  var_cas_inFormalArgumentsList,
                                GGS_location  var_cas_inVarLocation,
                                GGS_localConstantBuildStyleEnum var_cas_inLocalConstantStyle,
                                GGS_bool var_cas_inEnumeratorNewStyle,
                                GGS_bool &var_cas_outNoUsedParameter) {
  var_cas_outNoUsedParameter = GGS_bool (true) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
  GGS_L_nameWithType  var_cas_argumentsList = GGS_L_nameWithType ::constructor_emptyList () ;
  { bool syntaxRepeat_13 = true ;
    while (syntaxRepeat_13) {
      switch (select_expression_5F_parser_13 (inLexique)) {
        case 2 : {
          switch (select_expression_5F_parser_14 (inLexique)) {
            case 1 : {
              var_cas_outNoUsedParameter = GGS_bool (false) ;
              GGS_lstring  var_cas_typeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
              GGS_lstring  var_cas_constantName ;
              inLexique.assignFromAttribute_tokenString (var_cas_constantName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              var_cas_argumentsList.addAssign_operation (var_cas_typeName, var_cas_constantName) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2A_) COMMA_HERE) ;
              var_cas_argumentsList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2113)), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2113))) ;
              } break ;
            case 3 : {
              GGS_luint  var_cas_jokerCountWithLocation ;
              inLexique.assignFromAttribute_uint_33__32_value (var_cas_jokerCountWithLocation) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2A_) COMMA_HERE) ;
              GGS_uint  var_cas_jokerCount = var_cas_jokerCountWithLocation.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (2118)) ;
              GGS_uint _variant_81990 = var_cas_jokerCount.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (2119)) ;
              GGS_bool _condition_81990 (_variant_81990.isBuilt (), true) ;
              while (_condition_81990.isBuiltAndTrue ()) {
                _condition_81990 = (var_cas_jokerCount).operator_strictSup (GGS_uint (0U)) ;
                if (_condition_81990.isBuiltAndTrue ()) {
                  if (_variant_81990.uintValue () == 0) {
                    inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (2123)) ;
                    _condition_81990 = GGS_bool (false) ;
                  }else{
                    _variant_81990.decrement_operation (inLexique COMMA_HERE) ;
                    var_cas_argumentsList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2121)), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2121))) ;
                    var_cas_jokerCount.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (2122)) ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_13 = false ;
          break ;
      }
    }
  }
  GGS_bool var_cas_ellipsisFound ;
  switch (select_expression_5F_parser_15 (inLexique)) {
    case 1 : {
      var_cas_ellipsisFound = GGS_bool (false) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E__2E__2E_) COMMA_HERE) ;
      var_cas_ellipsisFound = GGS_bool (true) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
  ::routine_buildMapWithLocalConstants (inLexique,  var_cas_inEnumeratorNewStyle,  var_cas_argumentsList,  var_cas_inFormalArgumentsList,  var_cas_ioVariablesMap,  var_cas_inVarLocation,  var_cas_inLocalConstantStyle,  var_cas_ellipsisFound COMMA_SOURCE_FILE_AT_LINE (2135)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::rule_expression_5F_parser_parse_5F_effective_5F_input_5F_parameters_5F_list_i33_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
  { bool syntaxRepeat_13 = true ;
    while (syntaxRepeat_13) {
      switch (select_expression_5F_parser_13 (inLexique)) {
        case 2 : {
          switch (select_expression_5F_parser_14 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2A_) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2A_) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_13 = false ;
          break ;
      }
    }
  }
  switch (select_expression_5F_parser_15 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E__2E__2E_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

