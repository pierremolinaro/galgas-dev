//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'expression_parser.cpp'                        *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                       june 8th, 2006, at 15h15'8"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "expression_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  static const char gGGSsourceFile [] = "expression_parser.ggs" ;
  #define SOURCE_FILE_AT_LINE(line) , gGGSsourceFile, line
#else
  #define SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchAndOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchAndOperator (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_4756 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_4781 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_bool * operand_4756 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_4756) ;
    cPtr_typeGalgas_bool * operand_4781 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_4781) ;
    if ((operand_4756 != NULL) && (operand_4781 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_uint * operand_4756 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_4756) ;
      cPtr_typeGalgas_uint * operand_4781 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_4781) ;
      if ((operand_4756 != NULL) && (operand_4781 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_4756 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_4756) ;
        cPtr_typeGalgas_uint64 * operand_4781 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_4781) ;
        if ((operand_4756 != NULL) && (operand_4781 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_stringset * operand_4756 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_4756) ;
          cPtr_typeGalgas_stringset * operand_4781 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_4781) ;
          if ((operand_4756 != NULL) && (operand_4781 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint * operand_4756 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_4756) ;
            cPtr_typeGalgas_sint * operand_4781 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_4781) ;
            if ((operand_4756 != NULL) && (operand_4781 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint64 * operand_4756 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_4756) ;
              cPtr_typeGalgas_sint64 * operand_4781 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_4781) ;
              if ((operand_4756 != NULL) && (operand_4781 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "operand type error : (")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (144))))) + (GGS_string (true, " & ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (145))))) + (GGS_string (true, ") is not valid"))) SOURCE_FILE_AT_LINE (147)) ;
                var_cas_outResultType._drop_operation () ;
              }
            }
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchOrOperator"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchOrOperator (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_6170 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_6195 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_bool * operand_6170 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_6170) ;
    cPtr_typeGalgas_bool * operand_6195 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_6195) ;
    if ((operand_6170 != NULL) && (operand_6195 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_uint * operand_6170 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_6170) ;
      cPtr_typeGalgas_uint * operand_6195 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_6195) ;
      if ((operand_6170 != NULL) && (operand_6195 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_6170 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_6170) ;
        cPtr_typeGalgas_uint64 * operand_6195 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_6195) ;
        if ((operand_6170 != NULL) && (operand_6195 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint * operand_6170 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_6170) ;
          cPtr_typeGalgas_sint * operand_6195 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_6195) ;
          if ((operand_6170 != NULL) && (operand_6195 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint64 * operand_6170 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_6170) ;
            cPtr_typeGalgas_sint64 * operand_6195 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_6195) ;
            if ((operand_6170 != NULL) && (operand_6195 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_stringset * operand_6170 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_6170) ;
              cPtr_typeGalgas_stringset * operand_6195 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_6195) ;
              if ((operand_6170 != NULL) && (operand_6195 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "operand type error : (")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (175))))) + (GGS_string (true, " | ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (176))))) + (GGS_string (true, ") is not valid"))) SOURCE_FILE_AT_LINE (178)) ;
                var_cas_outResultType._drop_operation () ;
              }
            }
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchXorOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchXorOperator (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_7585 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_7610 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_bool * operand_7585 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_7585) ;
    cPtr_typeGalgas_bool * operand_7610 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_7610) ;
    if ((operand_7585 != NULL) && (operand_7610 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_uint * operand_7585 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_7585) ;
      cPtr_typeGalgas_uint * operand_7610 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_7610) ;
      if ((operand_7585 != NULL) && (operand_7610 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_7585 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_7585) ;
        cPtr_typeGalgas_uint64 * operand_7610 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_7610) ;
        if ((operand_7585 != NULL) && (operand_7610 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint * operand_7585 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_7585) ;
          cPtr_typeGalgas_sint * operand_7610 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_7610) ;
          if ((operand_7585 != NULL) && (operand_7610 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint64 * operand_7585 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_7585) ;
            cPtr_typeGalgas_sint64 * operand_7610 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_7610) ;
            if ((operand_7585 != NULL) && (operand_7610 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "operand type error : (")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (204))))) + (GGS_string (true, " | ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (205))))) + (GGS_string (true, ") is not valid"))) SOURCE_FILE_AT_LINE (207)) ;
              var_cas_outResultType._drop_operation () ;
            }
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "matchConcatOperator"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchConcatOperator (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_8897 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_8922 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_string * operand_8897 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_8897) ;
    cPtr_typeGalgas_string * operand_8922 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_8922) ;
    if ((operand_8897 != NULL) && (operand_8922 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "operand type error : (")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (225))))) + (GGS_string (true, " . ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (226))))) + (GGS_string (true, ") is not valid"))) SOURCE_FILE_AT_LINE (228)) ;
      var_cas_outResultType._drop_operation () ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "checkNotOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkNotOperator (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  { cPtr_typeGalgas_bool * ptrExtraire_ = dynamic_cast <cPtr_typeGalgas_bool *> (var_cas_inOperandType.getPtr ()) ;
    if (ptrExtraire_ == NULL) {
      if (var_cas_inOperandType.getPtr () != NULL) {
        TC_UniqueArray <C_String> message1_ (1 COMMA_HERE) ;
        C_String message2_ ;
        message1_ (0 COMMA_HERE) << cPtr_typeGalgas_bool::static_string_message_messageGalgasType () ;
        message2_ << var_cas_inOperandType (HERE)->message_messageGalgasType () ;
        GGS_location (_inLexique).signalExtractError (_inLexique, message1_, message2_ SOURCE_FILE_AT_LINE (241)) ;
      }
    }else{
      macroValidPointer (ptrExtraire_) ;
    }
  }
  var_cas_outResultType = var_cas_inOperandType ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "checkLogicalNegateOperator"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkLogicalNegateOperator (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  if (var_cas_inOperandType._isBuilt ()) {
    if (dynamic_cast <cPtr_typeGalgas_uint *> (var_cas_inOperandType.getPtr ()) != NULL) {
      var_cas_outResultType = var_cas_inOperandType ;
    }else if (dynamic_cast <cPtr_typeGalgas_sint *> (var_cas_inOperandType.getPtr ()) != NULL) {
      var_cas_outResultType = var_cas_inOperandType ;
    }else if (dynamic_cast <cPtr_typeGalgas_uint64 *> (var_cas_inOperandType.getPtr ()) != NULL) {
      var_cas_outResultType = var_cas_inOperandType ;
    }else if (dynamic_cast <cPtr_typeGalgas_sint64 *> (var_cas_inOperandType.getPtr ()) != NULL) {
      var_cas_outResultType = var_cas_inOperandType ;
    }else{ // Else part
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the ~ operator is not defined for an ")) + (var_cas_inOperandType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (266))))) + (GGS_string (true, " object"))) SOURCE_FILE_AT_LINE (268)) ;
      var_cas_outResultType._drop_operation () ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "comparison_types_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_comparison_types_check (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_11366 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_11391 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_stringset * operand_11366 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_11366) ;
    cPtr_typeGalgas_stringset * operand_11391 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_11391) ;
    if ((operand_11366 != NULL) && (operand_11391 != NULL)) {
    }else{
      cPtr_typeGalgas_bool * operand_11366 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_11366) ;
      cPtr_typeGalgas_bool * operand_11391 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_11391) ;
      if ((operand_11366 != NULL) && (operand_11391 != NULL)) {
      }else{
        cPtr_typeGalgas_char * operand_11366 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_11366) ;
        cPtr_typeGalgas_char * operand_11391 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_11391) ;
        if ((operand_11366 != NULL) && (operand_11391 != NULL)) {
        }else{
          cPtr_typeGalgas_uint * operand_11366 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_11366) ;
          cPtr_typeGalgas_uint * operand_11391 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_11391) ;
          if ((operand_11366 != NULL) && (operand_11391 != NULL)) {
          }else{
            cPtr_typeGalgas_sint * operand_11366 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_11366) ;
            cPtr_typeGalgas_sint * operand_11391 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_11391) ;
            if ((operand_11366 != NULL) && (operand_11391 != NULL)) {
            }else{
              cPtr_typeGalgas_uint64 * operand_11366 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_11366) ;
              cPtr_typeGalgas_uint64 * operand_11391 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_11391) ;
              if ((operand_11366 != NULL) && (operand_11391 != NULL)) {
              }else{
                cPtr_typeGalgas_sint64 * operand_11366 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_11366) ;
                cPtr_typeGalgas_sint64 * operand_11391 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_11391) ;
                if ((operand_11366 != NULL) && (operand_11391 != NULL)) {
                }else{
                  cPtr_typeGalgas_double * operand_11366 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_11366) ;
                  cPtr_typeGalgas_double * operand_11391 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_11391) ;
                  if ((operand_11366 != NULL) && (operand_11391 != NULL)) {
                  }else{
                    cPtr_typeGalgas_string * operand_11366 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_11366) ;
                    cPtr_typeGalgas_string * operand_11391 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_11391) ;
                    if ((operand_11366 != NULL) && (operand_11391 != NULL)) {
                    }else{
                      cPtr_typeGalgas_enum * operand_11366 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_11366) ;
                      cPtr_typeGalgas_enum * operand_11391 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_11391) ;
                      if ((operand_11366 != NULL) && (operand_11391 != NULL)) {
                        if (((operand_11366->mEnumTypeName.reader_value (_inLexique SOURCE_FILE_AT_LINE (292))) != (operand_11391->mEnumTypeName.reader_value (_inLexique SOURCE_FILE_AT_LINE (292)))).isBuiltAndTrue ()) {
                          GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "comparison between a '@")) + (operand_11366->mEnumTypeName.reader_value (_inLexique SOURCE_FILE_AT_LINE (293))))) + (GGS_string (true, "' enumeration and a '@")))) + (operand_11391->mEnumTypeName.reader_value (_inLexique SOURCE_FILE_AT_LINE (294))))) + (GGS_string (true, "' is not valid"))) SOURCE_FILE_AT_LINE (295)) ;
                        }
                      }else{
                        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "comparison between ")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (297))))) + (GGS_string (true, " and ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (298))))) + (GGS_string (true, " is not valid"))) SOURCE_FILE_AT_LINE (299)) ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_expression_expression_parser_308_18_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_concatenation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_0 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2E) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_concatenation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeConcatOperation::constructor_new (_inLexique, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchConcatOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType SOURCE_FILE_AT_LINE (338)) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_expression_expression_parser_308_18_parse (galgas_scanner & _inLexique) {
  nt_concatenation_term_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_0 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2E) ;
          nt_concatenation_term_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'concatenation_term'           *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_concatenation_term_expression_parser_351_26_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_1 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__7C) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeOrOperation::constructor_new (_inLexique, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchOrOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType SOURCE_FILE_AT_LINE (381)) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__5E) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeXorOperation::constructor_new (_inLexique, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchXorOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType SOURCE_FILE_AT_LINE (400)) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_concatenation_term_expression_parser_351_26_parse (galgas_scanner & _inLexique) {
  nt_relation_term_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_1 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__7C) ;
          nt_relation_term_parse (_inLexique) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__5E) ;
          nt_relation_term_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'relation_term'              *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_relation_term_expression_parser_413_21_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_2 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__26) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeAndOperation::constructor_new (_inLexique, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchAndOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType SOURCE_FILE_AT_LINE (443)) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_relation_term_expression_parser_413_21_parse (galgas_scanner & _inLexique) {
  nt_relation_factor_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_2 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__26) ;
          nt_relation_factor_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'relation_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_relation_factor_expression_parser_456_23_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  switch (select_expression_parser_3 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3D_3D) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType SOURCE_FILE_AT_LINE (483)) ;
      var_cas_outExpression = GGS_typeEqualTest::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__21_3D) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType SOURCE_FILE_AT_LINE (499)) ;
      var_cas_outExpression = GGS_typeNonEqualTest::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 4 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3C_3D) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType SOURCE_FILE_AT_LINE (515)) ;
      var_cas_outExpression = GGS_typeInfOrEqualTest::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 5 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3E_3D) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType SOURCE_FILE_AT_LINE (531)) ;
      var_cas_outExpression = GGS_typeSupOrEqualTest::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 6 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType SOURCE_FILE_AT_LINE (547)) ;
      var_cas_outExpression = GGS_typeStrictSupTest::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 7 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType SOURCE_FILE_AT_LINE (563)) ;
      var_cas_outExpression = GGS_typeStrictInfTest::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_relation_factor_expression_parser_456_23_parse (galgas_scanner & _inLexique) {
  nt_simple_expression_parse (_inLexique) ;
  switch (select_expression_parser_3 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3D_3D) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__21_3D) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 4 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3C_3D) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 5 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3E_3D) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 6 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 7 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "shift_types_check"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_shift_types_check (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_21421 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_21446 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_21421 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_21421) ;
    cPtr_typeGalgas_uint * operand_21446 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_21446) ;
    if ((operand_21421 != NULL) && (operand_21446 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_21421 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_21421) ;
      cPtr_typeGalgas_uint * operand_21446 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_21446) ;
      if ((operand_21421 != NULL) && (operand_21446 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_21421 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_21421) ;
        cPtr_typeGalgas_uint * operand_21446 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_21446) ;
        if ((operand_21421 != NULL) && (operand_21446 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_21421 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_21421) ;
          cPtr_typeGalgas_uint * operand_21446 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_21446) ;
          if ((operand_21421 != NULL) && (operand_21446 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "shift between ")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (590))))) + (GGS_string (true, " and ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (591))))) + (GGS_string (true, " is not valid"))) SOURCE_FILE_AT_LINE (594)) ;
            var_cas_outResultType._drop_operation () ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "addition_types_check"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addition_types_check (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_22635 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_22660 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_22635 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_22635) ;
    cPtr_typeGalgas_uint * operand_22660 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_22660) ;
    if ((operand_22635 != NULL) && (operand_22660 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_22635 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_22635) ;
      cPtr_typeGalgas_sint * operand_22660 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_22660) ;
      if ((operand_22635 != NULL) && (operand_22660 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_22635 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_22635) ;
        cPtr_typeGalgas_uint64 * operand_22660 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_22660) ;
        if ((operand_22635 != NULL) && (operand_22660 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_22635 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_22635) ;
          cPtr_typeGalgas_sint64 * operand_22660 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_22660) ;
          if ((operand_22635 != NULL) && (operand_22660 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "addition between ")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (618))))) + (GGS_string (true, " and ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (619))))) + (GGS_string (true, " is not valid"))) SOURCE_FILE_AT_LINE (622)) ;
            var_cas_outResultType._drop_operation () ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "substraction_types_check"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_substraction_types_check (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_23860 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_23885 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_23860 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_23860) ;
    cPtr_typeGalgas_uint * operand_23885 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_23885) ;
    if ((operand_23860 != NULL) && (operand_23885 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_23860 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_23860) ;
      cPtr_typeGalgas_sint * operand_23885 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_23885) ;
      if ((operand_23860 != NULL) && (operand_23885 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_23860 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_23860) ;
        cPtr_typeGalgas_uint64 * operand_23885 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_23885) ;
        if ((operand_23860 != NULL) && (operand_23885 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_23860 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_23860) ;
          cPtr_typeGalgas_sint64 * operand_23885 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_23885) ;
          if ((operand_23860 != NULL) && (operand_23885 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_stringset * operand_23860 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_23860) ;
            cPtr_typeGalgas_stringset * operand_23885 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_23885) ;
            if ((operand_23860 != NULL) && (operand_23885 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "substraction between ")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (648))))) + (GGS_string (true, " and ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (649))))) + (GGS_string (true, " is not valid"))) SOURCE_FILE_AT_LINE (652)) ;
              var_cas_outResultType._drop_operation () ;
            }
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "multiply_types_check"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_multiply_types_check (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_25191 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_25216 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_25191 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_25191) ;
    cPtr_typeGalgas_uint * operand_25216 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_25216) ;
    if ((operand_25191 != NULL) && (operand_25216 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_25191 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_25191) ;
      cPtr_typeGalgas_sint * operand_25216 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_25216) ;
      if ((operand_25191 != NULL) && (operand_25216 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_25191 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_25191) ;
        cPtr_typeGalgas_uint64 * operand_25216 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_25216) ;
        if ((operand_25191 != NULL) && (operand_25216 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_25191 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_25191) ;
          cPtr_typeGalgas_sint64 * operand_25216 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_25216) ;
          if ((operand_25191 != NULL) && (operand_25216 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "multiplication between ")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (676))))) + (GGS_string (true, " and ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (677))))) + (GGS_string (true, " is not valid"))) SOURCE_FILE_AT_LINE (680)) ;
            var_cas_outResultType._drop_operation () ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "divide_types_check"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_divide_types_check (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_26416 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_26441 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_26416 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_26416) ;
    cPtr_typeGalgas_uint * operand_26441 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_26441) ;
    if ((operand_26416 != NULL) && (operand_26441 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_26416 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_26416) ;
      cPtr_typeGalgas_sint * operand_26441 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_26441) ;
      if ((operand_26416 != NULL) && (operand_26441 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_26416 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_26416) ;
        cPtr_typeGalgas_uint64 * operand_26441 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_26441) ;
        if ((operand_26416 != NULL) && (operand_26441 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_26416 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_26416) ;
          cPtr_typeGalgas_sint64 * operand_26441 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_26441) ;
          if ((operand_26416 != NULL) && (operand_26441 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "division between ")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (704))))) + (GGS_string (true, " and ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (705))))) + (GGS_string (true, " is not valid"))) SOURCE_FILE_AT_LINE (708)) ;
            var_cas_outResultType._drop_operation () ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "modulo_types_check"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_modulo_types_check (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_27635 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_27660 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_27635 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_27635) ;
    cPtr_typeGalgas_uint * operand_27660 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_27660) ;
    if ((operand_27635 != NULL) && (operand_27660 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_27635 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_27635) ;
      cPtr_typeGalgas_sint * operand_27660 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_27660) ;
      if ((operand_27635 != NULL) && (operand_27660 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_27635 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_27635) ;
        cPtr_typeGalgas_uint64 * operand_27660 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_27660) ;
        if ((operand_27635 != NULL) && (operand_27660 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_27635 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_27635) ;
          cPtr_typeGalgas_sint64 * operand_27660 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_27660) ;
          if ((operand_27635 != NULL) && (operand_27660 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "modulo between ")) + (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (732))))) + (GGS_string (true, " and ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (733))))) + (GGS_string (true, " is not valid"))) SOURCE_FILE_AT_LINE (736)) ;
            var_cas_outResultType._drop_operation () ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "unary_minus_type_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_unary_minus_type_check (C_Lexique & _inLexique,
                                const GGS_AC_galgasType  & var_cas_inExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  if (var_cas_inExpressionType._isBuilt ()) {
    if (dynamic_cast <cPtr_typeGalgas_sint *> (var_cas_inExpressionType.getPtr ()) != NULL) {
      var_cas_outResultType = var_cas_inExpressionType ;
    }else if (dynamic_cast <cPtr_typeGalgas_sint64 *> (var_cas_inExpressionType.getPtr ()) != NULL) {
      var_cas_outResultType = var_cas_inExpressionType ;
    }else{ // Else part
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "unary minus for ")) + (var_cas_inExpressionType.reader_messageGalgasType (_inLexique SOURCE_FILE_AT_LINE (755))))) + (GGS_string (true, " is not valid"))) SOURCE_FILE_AT_LINE (759)) ;
      var_cas_outResultType._drop_operation () ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'simple_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_simple_expression_expression_parser_768_25_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3C_3C) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_shift_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType SOURCE_FILE_AT_LINE (796)) ;
          var_cas_outExpression = GGS_typeLeftShiftOperation::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression, GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3E_3E) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_shift_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType SOURCE_FILE_AT_LINE (811)) ;
          var_cas_outExpression = GGS_typeRightShiftOperation::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression, GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2B) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_addition_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType SOURCE_FILE_AT_LINE (826)) ;
          var_cas_outExpression = GGS_typeAddOperation::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression, GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        case 5 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2D) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_substraction_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType SOURCE_FILE_AT_LINE (841)) ;
          var_cas_outExpression = GGS_typeSubOperation::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression, GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_simple_expression_expression_parser_768_25_parse (galgas_scanner & _inLexique) {
  nt_term_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3C_3C) ;
          nt_term_parse (_inLexique) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3E_3E) ;
          nt_term_parse (_inLexique) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2B) ;
          nt_term_parse (_inLexique) ;
          } break ;
        case 5 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2D) ;
          nt_term_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'term'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_term_expression_parser_852_12_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_5 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2A) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_multiply_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType SOURCE_FILE_AT_LINE (880)) ;
          var_cas_outExpression = GGS_typeMultiplyOperation::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression, GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2F) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_divide_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType SOURCE_FILE_AT_LINE (895)) ;
          var_cas_outExpression = GGS_typeDivideOperation::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression, GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__25) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_modulo_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType SOURCE_FILE_AT_LINE (910)) ;
          var_cas_outExpression = GGS_typeModuloOperation::constructor_new (_inLexique, var_cas_leftExpression, var_cas_rightExpression, GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_term_expression_parser_852_12_parse (galgas_scanner & _inLexique) {
  nt_factor_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_5 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2A) ;
          nt_factor_parse (_inLexique) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2F) ;
          nt_factor_parse (_inLexique) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__25) ;
          nt_factor_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_921_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2D) ;
  GGS_typeExpression  var_cas_expression ;
  GGS_AC_galgasType  var_cas_type ;
  nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_expression, var_cas_type) ;
  ::routine_unary_minus_type_check (_inLexique,  var_cas_type,  var_cas_outResultType SOURCE_FILE_AT_LINE (938)) ;
  var_cas_outExpression = GGS_typeUnaryMinusOperation::constructor_new (_inLexique, var_cas_expression, GGS_location (_inLexique) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_921_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2D) ;
  nt_factor_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_948_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_typeCplusPlusName  var_cas_nomCppEntite1 ;
  GGS_lstring  var_cas_35687 ;
  nt_read_access_ (_inLexique, var_cas_35687, var_cas_nomCppEntite1, var_cas_outResultType, var_cas_ioVariablesMap) ;
  var_cas_outExpression = GGS_typeVarInExpression::constructor_new (_inLexique, var_cas_nomCppEntite1 COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_948_14_parse (galgas_scanner & _inLexique) {
  nt_read_access_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_966_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__28) ;
  nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__29) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_966_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__28) ;
  nt_expression_parse (_inLexique) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__29) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_990_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_not) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeTestComplement::constructor_new (_inLexique, var_cas_ifCondition COMMA_HERE) ;
  ::routine_checkNotOperator (_inLexique,  var_cas_operandType,  var_cas_outResultType SOURCE_FILE_AT_LINE (1008)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_990_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_not) ;
  nt_factor_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1017_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__7E) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeLogicalNegate::constructor_new (_inLexique, var_cas_ifCondition COMMA_HERE) ;
  ::routine_checkLogicalNegateOperator (_inLexique,  var_cas_operandType,  var_cas_outResultType SOURCE_FILE_AT_LINE (1035)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1017_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__7E) ;
  nt_factor_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1044_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_true) ;
  var_cas_outExpression = GGS_typeTrueBool::constructor_new (_inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1044_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_true) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1062_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_false) ;
  var_cas_outExpression = GGS_typeFalseBool::constructor_new (_inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1062_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_false) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1080_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lstring  var_cas_literalString ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
  var_cas_literalString.defineAttribute (_inLexique.tokenString, _inLexique) ;
  var_cas_outExpression = GGS_typeLiteralStringExpression::constructor_new (_inLexique, var_cas_literalString COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_string::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1080_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1099_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint  var_cas_literalInt ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) ;
  var_cas_literalInt.defineAttribute (_inLexique.uint32value, _inLexique) ;
  var_cas_outExpression = GGS_typeLiteralUIntExpression::constructor_new (_inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_uint::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1099_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1118_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint  var_cas_literalInt ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger) ;
  var_cas_literalInt.defineAttribute (_inLexique.sint32value, _inLexique) ;
  var_cas_outExpression = GGS_typeLiteralSIntExpression::constructor_new (_inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_sint::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1118_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1137_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint64  var_cas_literalInt ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger64) ;
  var_cas_literalInt.defineAttribute (_inLexique.uint64value, _inLexique) ;
  var_cas_outExpression = GGS_typeLiteralUInt64Expression::constructor_new (_inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_uint64::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1137_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger64) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1156_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint64  var_cas_literalInt ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger64) ;
  var_cas_literalInt.defineAttribute (_inLexique.sint64value, _inLexique) ;
  var_cas_outExpression = GGS_typeLiteralSInt64Expression::constructor_new (_inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_sint64::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1156_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger64) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1175_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lchar  var_cas_literalChar ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fchar) ;
  var_cas_literalChar.defineAttribute (_inLexique.charValue, _inLexique) ;
  var_cas_outExpression = GGS_typeLiteralCharExpression::constructor_new (_inLexique, var_cas_literalChar COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_char::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1175_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fchar) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1194_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_here) ;
  var_cas_outExpression = GGS_typeHereExpression::constructor_new (_inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_location::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1194_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_here) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1215_14_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__5B) ;
  switch (select_expression_parser_6 (_inLexique)) {
    case 1 : {
      GGS_typeExpression  var_cas_expressionValue ;
      GGS_AC_galgasType  var_cas_expressionType ;
      nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_expressionValue, var_cas_expressionType) ;
      GGS_lstring  var_cas_methodName ;
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      var_cas_methodName.defineAttribute (_inLexique.tokenString, _inLexique) ;
      GGS_typeListeAttributsSemantiques  var_cas_accessorsTypeList ;
      ::routine_handleReaderCall (_inLexique,  var_cas_expressionType,  var_cas_methodName,  var_cas_accessorsTypeList,  var_cas_outResultType SOURCE_FILE_AT_LINE (1239)) ;
      GGS_typeExpressionList  var_cas_expressionList ;
      nt_output_expression_list_ (_inLexique, var_cas_expressionList, var_cas_accessorsTypeList, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap) ;
      var_cas_outExpression = GGS_typeReaderCallInExpression::constructor_new (_inLexique, var_cas_expressionValue, var_cas_methodName, var_cas_expressionList, GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_lstring  var_cas_className ;
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_type_5Fname) ;
      var_cas_className.defineAttribute (_inLexique.tokenString, _inLexique) ;
      GGS_lstring  var_cas_mClassMethodName ;
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      var_cas_mClassMethodName.defineAttribute (_inLexique.tokenString, _inLexique) ;
      GGS_AC_semanticsEntity  var_cas_e ;
      if (var_cas_ioEntitiesMap._isBuilt ()) {
        var_cas_ioEntitiesMap (HERE)->method_searchKey (_inLexique, var_cas_className, var_cas_e SOURCE_FILE_AT_LINE (1258)) ;
      }
      { cPtr_typeEntiteType * ptrExtraire_ = dynamic_cast <cPtr_typeEntiteType *> (var_cas_e.getPtr ()) ;
        if (ptrExtraire_ == NULL) {
          var_cas_outResultType._drop_operation () ;
          if (var_cas_e.getPtr () != NULL) {
            TC_UniqueArray <C_String> message1_ (1 COMMA_HERE) ;
            C_String message2_ ;
            message1_ (0 COMMA_HERE) << cPtr_typeEntiteType::static_string_message_messageTypeEntite () ;
            message2_ << var_cas_e (HERE)->message_messageTypeEntite () ;
            var_cas_className.signalExtractError (_inLexique, message1_, message2_ SOURCE_FILE_AT_LINE (1259)) ;
          }
        }else{
          macroValidPointer (ptrExtraire_) ;
          var_cas_outResultType = ptrExtraire_->aDefType ;
        }
      }
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques ;
      if (var_cas_outResultType._isBuilt ()) {
        var_cas_outResultType (HERE)->method_handleConstructorCall (_inLexique, var_cas_mClassMethodName, var_cas_listeAttributsSemantiques SOURCE_FILE_AT_LINE (1261)) ;
      }
      GGS_typeExpressionList  var_cas_expressionList ;
      nt_output_expression_list_ (_inLexique, var_cas_expressionList, var_cas_listeAttributsSemantiques, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap) ;
      var_cas_outExpression = GGS_typeConstructorExpression::constructor_new (_inLexique, var_cas_className, var_cas_mClassMethodName, var_cas_expressionList COMMA_HERE) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;
      GGS_lstring  var_cas_optionComponentName ;
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      var_cas_optionComponentName.defineAttribute (_inLexique.tokenString, _inLexique) ;
      GGS_M_cli_options  var_cas_boolOptionsMap ;
      GGS_M_cli_options  var_cas_uintOptionsMap ;
      GGS_M_cli_options  var_cas_stringOptionsMap ;
      if (var_cas_ioOptionsComponentsMapForUse._isBuilt ()) {
        var_cas_ioOptionsComponentsMapForUse (HERE)->method_searchKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap SOURCE_FILE_AT_LINE (1279)) ;
      }
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2E) ;
      GGS_lstring  var_cas_optionName ;
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      var_cas_optionName.defineAttribute (_inLexique.tokenString, _inLexique) ;
      if ((var_cas_boolOptionsMap.reader_hasKey (_inLexique, var_cas_optionName.reader_value (_inLexique SOURCE_FILE_AT_LINE (1283)) SOURCE_FILE_AT_LINE (1283))).isBuiltAndTrue ()) {
        var_cas_outExpression = GGS_typeBoolOption::constructor_new (_inLexique, var_cas_optionComponentName, var_cas_optionName COMMA_HERE) ;
        var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      }else if ((var_cas_uintOptionsMap.reader_hasKey (_inLexique, var_cas_optionName.reader_value (_inLexique SOURCE_FILE_AT_LINE (1286)) SOURCE_FILE_AT_LINE (1286))).isBuiltAndTrue ()) {
        var_cas_outExpression = GGS_typeUIntOption::constructor_new (_inLexique, var_cas_optionComponentName, var_cas_optionName COMMA_HERE) ;
        var_cas_outResultType = GGS_typeGalgas_uint::constructor_new (_inLexique COMMA_HERE) ;
      }else if ((var_cas_stringOptionsMap.reader_hasKey (_inLexique, var_cas_optionName.reader_value (_inLexique SOURCE_FILE_AT_LINE (1289)) SOURCE_FILE_AT_LINE (1289))).isBuiltAndTrue ()) {
        var_cas_outExpression = GGS_typeStringOption::constructor_new (_inLexique, var_cas_optionComponentName, var_cas_optionName COMMA_HERE) ;
        var_cas_outResultType = GGS_typeGalgas_uint::constructor_new (_inLexique COMMA_HERE) ;
      }else{
        var_cas_optionName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((((((GGS_string (true, "the '")) + (var_cas_optionComponentName.reader_value (_inLexique SOURCE_FILE_AT_LINE (1293))))) + (GGS_string (true, "' option component has no '")))) + (var_cas_optionName.reader_value (_inLexique SOURCE_FILE_AT_LINE (1293))))) + (GGS_string (true, "' option"))) SOURCE_FILE_AT_LINE (1295)) ;
        var_cas_outExpression._drop_operation () ;
        var_cas_outResultType._drop_operation () ;
      }
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__5D) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1215_14_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__5B) ;
  switch (select_expression_parser_6 (_inLexique)) {
    case 1 : {
      nt_expression_parse (_inLexique) ;
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      nt_output_expression_list_parse (_inLexique) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_type_5Fname) ;
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      nt_output_expression_list_parse (_inLexique) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2E) ;
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__5D) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'read_access'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_read_access_expression_parser_1306_19_ (galgas_scanner & _inLexique,
                                GGS_lstring  &var_cas_nomVariable,
                                GGS_typeCplusPlusName  &var_cas_nomCppEntite,
                                GGS_AC_galgasType  &var_cas_typeEntite,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  var_cas_nomVariable.defineAttribute (_inLexique.tokenString, _inLexique) ;
  var_cas_ioVariablesMap.method_searchForReadOnlyAccess (_inLexique, var_cas_nomVariable, var_cas_typeEntite, var_cas_nomCppEntite SOURCE_FILE_AT_LINE (1313)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_read_access_expression_parser_1306_19_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'read_access'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_read_access_expression_parser_1322_19_ (galgas_scanner & _inLexique,
                                GGS_lstring  &var_cas_nomVariable,
                                GGS_typeCplusPlusName  &var_cas_nomCppEntite,
                                GGS_AC_galgasType  &var_cas_typeEntite,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_self) ;
  if ((var_cas_ioVariablesMap.reader_hasKey (_inLexique, GGS_string (true, "self") SOURCE_FILE_AT_LINE (1329))).isBuiltAndTrue ()) {
    var_cas_nomVariable = GGS_lstring::constructor_new (_inLexique, GGS_string (true, "self"), GGS_location (_inLexique) COMMA_HERE) ;
    var_cas_ioVariablesMap.method_searchForReadOnlyAccess (_inLexique, var_cas_nomVariable, var_cas_typeEntite, var_cas_nomCppEntite SOURCE_FILE_AT_LINE (1331)) ;
  }else{
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "'self' is not defined in this context") SOURCE_FILE_AT_LINE (1335)) ;
    var_cas_nomVariable._drop_operation () ;
    var_cas_nomCppEntite._drop_operation () ;
    var_cas_typeEntite._drop_operation () ;
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_read_access_expression_parser_1322_19_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_self) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'output_expression_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_output_expression_list_expression_parser_1344_30_ (galgas_scanner & _inLexique,
                                GGS_typeExpressionList  &var_cas_outExpressionList,
                                const GGS_typeListeAttributsSemantiques  &var_cas_inFormalAttributesList,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  GGS_typeTypesList  var_cas_effectiveTypesList ;
  var_cas_effectiveTypesList = GGS_typeTypesList::constructor_emptyList (_inLexique COMMA_HERE) ;
  var_cas_outExpressionList = GGS_typeExpressionList::constructor_emptyList (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_7 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__21) ;
          GGS_typeExpression  var_cas_expression ;
          GGS_AC_galgasType  var_cas_resultType ;
          nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_expression, var_cas_resultType) ;
          GGS_location  var_cas_errorLocation ;
          var_cas_errorLocation = GGS_location (_inLexique) ;
          var_cas_effectiveTypesList._addAssign_operation (var_cas_resultType, var_cas_errorLocation) ;
          var_cas_outExpressionList._addAssign_operation (var_cas_expression) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  GGS_location  var_cas_endOfListLocation ;
  var_cas_endOfListLocation = GGS_location (_inLexique) ;
  if (((var_cas_inFormalAttributesList.reader_length (_inLexique SOURCE_FILE_AT_LINE (1371))) < (var_cas_effectiveTypesList.reader_length (_inLexique SOURCE_FILE_AT_LINE (1371)))).isBuiltAndTrue ()) {
    var_cas_endOfListLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "too much expressions") SOURCE_FILE_AT_LINE (1373)) ;
  }else if (((var_cas_inFormalAttributesList.reader_length (_inLexique SOURCE_FILE_AT_LINE (1373))) > (var_cas_effectiveTypesList.reader_length (_inLexique SOURCE_FILE_AT_LINE (1373)))).isBuiltAndTrue ()) {
    var_cas_endOfListLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "one or more expressions missing") SOURCE_FILE_AT_LINE (1375)) ;
  }else{
    GGS_typeListeAttributsSemantiques::element_type * operand_52610 = var_cas_inFormalAttributesList.firstObject () ;
    GGS_typeTypesList::element_type * operand_52705 = var_cas_effectiveTypesList.firstObject () ;
    while ((operand_52610 != NULL)
        && (operand_52705 != NULL)) {
      macroValidPointer (operand_52610) ;
      macroValidPointer (operand_52705) ;
      ::routine_checkAssignmentTypesCompatibility (_inLexique,  operand_52610->mAttributType,  operand_52705->mType,  operand_52705->mEndOfExpressionLocation,  GGS_bool (true, true) SOURCE_FILE_AT_LINE (1378)) ;
      operand_52610 = operand_52610->nextObject () ;
      operand_52705 = operand_52705->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_output_expression_list_expression_parser_1344_30_parse (galgas_scanner & _inLexique) {
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_7 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__21) ;
          nt_expression_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'parse_effective_input_parameters_list'  *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_parse_effective_input_parameters_list_expression_parser_1389_45_ (galgas_scanner & _inLexique,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeListeAttributsSemantiques  var_cas_inFormalArgumentsList,
                                GGS_location  var_cas_inVarLocation,
                                GGS_localConstantBuildStyleEnum var_cas_inLocalConstantStyle) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__28) ;
  GGS_L_nameWithType  var_cas_argumentsList ;
  var_cas_argumentsList = GGS_L_nameWithType::constructor_emptyList (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_8 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3F_3F) ;
          GGS_lstring  var_cas_typeName ;
          GGS_lstring  var_cas_constantName ;
          switch (select_expression_parser_9 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_type_5Fname) ;
              var_cas_typeName.defineAttribute (_inLexique.tokenString, _inLexique) ;
              _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
              var_cas_constantName.defineAttribute (_inLexique.tokenString, _inLexique) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2A) ;
              var_cas_typeName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
              var_cas_constantName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          var_cas_argumentsList._addAssign_operation (var_cas_typeName, var_cas_constantName) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  GGS_bool var_cas_ellipsisFound ;
  switch (select_expression_parser_10 (_inLexique)) {
    case 1 : {
      var_cas_ellipsisFound = GGS_bool (true, false) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2E_2E_2E) ;
      var_cas_ellipsisFound = GGS_bool (true, true) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__29) ;
  ::routine_buildMapWithLocalConstants (_inLexique,  var_cas_argumentsList,  var_cas_inFormalArgumentsList,  var_cas_ioVariablesMap,  var_cas_inVarLocation,  var_cas_inLocalConstantStyle,  var_cas_ellipsisFound SOURCE_FILE_AT_LINE (1422)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_parse_effective_input_parameters_list_expression_parser_1389_45_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__28) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expression_parser_8 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3F_3F) ;
          switch (select_expression_parser_9 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_type_5Fname) ;
              _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2A) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  switch (select_expression_parser_10 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2E_2E_2E) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__29) ;
}

//---------------------------------------------------------------------------*

