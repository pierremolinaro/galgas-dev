//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'expression_parser.cpp'                        *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      march 9th, 2008, at 15h47'41"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "expression_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "expression_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchAndOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchAndOperator (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchAndOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_5223 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_5248 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_5223 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_5223) ;
    cPtr_typeGalgas_binaryset * operand_5248 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_5248) ;
    if ((operand_5223 != NULL) && (operand_5248 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_5223 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_5223) ;
      cPtr_typeGalgas_bool * operand_5248 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_5248) ;
      if ((operand_5223 != NULL) && (operand_5248 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_5223 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_5223) ;
        cPtr_typeGalgas_uint * operand_5248 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_5248) ;
        if ((operand_5223 != NULL) && (operand_5248 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_5223 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_5223) ;
          cPtr_typeGalgas_uint64 * operand_5248 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_5248) ;
          if ((operand_5223 != NULL) && (operand_5248 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_stringset * operand_5223 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_5223) ;
            cPtr_typeGalgas_stringset * operand_5248 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_5248) ;
            if ((operand_5223 != NULL) && (operand_5248 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint * operand_5223 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_5223) ;
              cPtr_typeGalgas_sint * operand_5248 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_5248) ;
              if ((operand_5223 != NULL) && (operand_5248 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                cPtr_typeGalgas_sint64 * operand_5223 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_5223) ;
                cPtr_typeGalgas_sint64 * operand_5248 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_5248) ;
                if ((operand_5223 != NULL) && (operand_5248 != NULL)) {
                  var_cas_outResultType = var_cas_inLeftExpressionType ;
                }else{
                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "operand type error : ("))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (156))))._operator_concat (GGS_string (true, " & ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (157))))._operator_concat (GGS_string (true, ") is not valid")) COMMA_SOURCE_FILE_AT_LINE (158)) ;
                  var_cas_outResultType._drop_operation () ;
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchAndOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchOrOperator"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchOrOperator (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchOrOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_6744 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_6769 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_6744 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_6744) ;
    cPtr_typeGalgas_binaryset * operand_6769 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_6769) ;
    if ((operand_6744 != NULL) && (operand_6769 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_6744 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_6744) ;
      cPtr_typeGalgas_bool * operand_6769 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_6769) ;
      if ((operand_6744 != NULL) && (operand_6769 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_6744 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_6744) ;
        cPtr_typeGalgas_uint * operand_6769 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_6769) ;
        if ((operand_6744 != NULL) && (operand_6769 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_6744 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_6744) ;
          cPtr_typeGalgas_uint64 * operand_6769 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_6769) ;
          if ((operand_6744 != NULL) && (operand_6769 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint * operand_6744 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_6744) ;
            cPtr_typeGalgas_sint * operand_6769 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_6769) ;
            if ((operand_6744 != NULL) && (operand_6769 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint64 * operand_6744 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_6744) ;
              cPtr_typeGalgas_sint64 * operand_6769 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_6769) ;
              if ((operand_6744 != NULL) && (operand_6769 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                cPtr_typeGalgas_stringset * operand_6744 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_6744) ;
                cPtr_typeGalgas_stringset * operand_6769 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_6769) ;
                if ((operand_6744 != NULL) && (operand_6769 != NULL)) {
                  var_cas_outResultType = var_cas_inLeftExpressionType ;
                }else{
                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "operand type error : ("))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (189))))._operator_concat (GGS_string (true, " | ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (190))))._operator_concat (GGS_string (true, ") is not valid")) COMMA_SOURCE_FILE_AT_LINE (191)) ;
                  var_cas_outResultType._drop_operation () ;
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchOrOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchXorOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchXorOperator (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchXorOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_8266 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_8291 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_8266 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_8266) ;
    cPtr_typeGalgas_binaryset * operand_8291 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_8291) ;
    if ((operand_8266 != NULL) && (operand_8291 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_8266 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_8266) ;
      cPtr_typeGalgas_bool * operand_8291 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_8291) ;
      if ((operand_8266 != NULL) && (operand_8291 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_8266 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_8266) ;
        cPtr_typeGalgas_uint * operand_8291 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_8291) ;
        if ((operand_8266 != NULL) && (operand_8291 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_8266 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_8266) ;
          cPtr_typeGalgas_uint64 * operand_8291 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_8291) ;
          if ((operand_8266 != NULL) && (operand_8291 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint * operand_8266 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_8266) ;
            cPtr_typeGalgas_sint * operand_8291 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_8291) ;
            if ((operand_8266 != NULL) && (operand_8291 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint64 * operand_8266 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_8266) ;
              cPtr_typeGalgas_sint64 * operand_8291 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_8291) ;
              if ((operand_8266 != NULL) && (operand_8291 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "operand type error : ("))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (220))))._operator_concat (GGS_string (true, " | ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (221))))._operator_concat (GGS_string (true, ") is not valid")) COMMA_SOURCE_FILE_AT_LINE (222)) ;
                var_cas_outResultType._drop_operation () ;
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchXorOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "matchConcatOperator"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchConcatOperator (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchConcatOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_9685 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_9710 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_string * operand_9685 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_9685) ;
    cPtr_typeGalgas_string * operand_9710 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_9710) ;
    if ((operand_9685 != NULL) && (operand_9710 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_string * operand_9685 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_9685) ;
      cPtr_typeGalgas_lstring * operand_9710 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_9710) ;
      if ((operand_9685 != NULL) && (operand_9710 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgasUndefinedListType * operand_9685 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_9685) ;
        cPtr_typeGalgasUndefinedListType * operand_9710 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_9710) ;
        if ((operand_9685 != NULL) && (operand_9710 != NULL)) {
          if (((operand_9685->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (243)))._operator_isNotEqual (operand_9710->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (243)))).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "concatenation operator error: lists should have the same type (here '@"))._operator_concat (operand_9685->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (245))))._operator_concat (GGS_string (true, "' and '@")))._operator_concat (operand_9710->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (245))))._operator_concat (GGS_string (true, "')")) COMMA_SOURCE_FILE_AT_LINE (245)) ;
          }
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "concatenation operator error: "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (249))))._operator_concat (GGS_string (true, " . ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (250))))._operator_concat (GGS_string (true, ") cannot be concatened")) COMMA_SOURCE_FILE_AT_LINE (251)) ;
          var_cas_outResultType._drop_operation () ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchConcatOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "checkNotOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkNotOperator (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkNotOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_typeGalgas_bool  var_cas_gb ;
  var_cas_gb = GGS_typeGalgas_bool::_castFrom (_inLexique, var_cas_inOperandType.getPtr (), true, GGS_location (_inLexique) COMMA_SOURCE_FILE_AT_LINE (265)) ;
  var_cas_outResultType = var_cas_inOperandType ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkNotOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "checkLogicalNegateOperator"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkLogicalNegateOperator (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkLogicalNegateOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_AC_galgasType _var_12173 = var_cas_inOperandType ; // CAST instruction
    if (_var_12173.getPtr () != NULL) {
      macroValidPointer (_var_12173.getPtr ()) ;
      if (dynamic_cast <cPtr_typeGalgas_binaryset *> (_var_12173.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_uint *> (_var_12173.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint *> (_var_12173.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_uint64 *> (_var_12173.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint64 *> (_var_12173.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else{
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the ~ operator is not defined for an "))._operator_concat (var_cas_inOperandType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (292))))._operator_concat (GGS_string (true, " object")) COMMA_SOURCE_FILE_AT_LINE (293)) ;
        var_cas_outResultType._drop_operation () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkLogicalNegateOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "comparison_types_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_comparison_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_comparison_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_12735 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_12760 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_12735 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_12735) ;
    cPtr_typeGalgas_binaryset * operand_12760 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_12760) ;
    if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
    }else{
      cPtr_typeGalgas_stringset * operand_12735 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_12735) ;
      cPtr_typeGalgas_stringset * operand_12760 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_12760) ;
      if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
      }else{
        cPtr_typeGalgas_bool * operand_12735 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_12735) ;
        cPtr_typeGalgas_bool * operand_12760 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_12760) ;
        if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
        }else{
          cPtr_typeGalgas_char * operand_12735 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_12735) ;
          cPtr_typeGalgas_char * operand_12760 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_12760) ;
          if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
          }else{
            cPtr_typeGalgas_uint * operand_12735 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_12735) ;
            cPtr_typeGalgas_uint * operand_12760 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_12760) ;
            if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
            }else{
              cPtr_typeGalgas_sint * operand_12735 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_12735) ;
              cPtr_typeGalgas_sint * operand_12760 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_12760) ;
              if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
              }else{
                cPtr_typeGalgas_uint64 * operand_12735 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_12735) ;
                cPtr_typeGalgas_uint64 * operand_12760 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_12760) ;
                if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
                }else{
                  cPtr_typeGalgas_sint64 * operand_12735 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_12735) ;
                  cPtr_typeGalgas_sint64 * operand_12760 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_12760) ;
                  if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
                  }else{
                    cPtr_typeGalgas_double * operand_12735 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_12735) ;
                    cPtr_typeGalgas_double * operand_12760 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_12760) ;
                    if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
                    }else{
                      cPtr_typeGalgas_string * operand_12735 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_12735) ;
                      cPtr_typeGalgas_string * operand_12760 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_12760) ;
                      if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
                      }else{
                        cPtr_typeGalgas_lbool * operand_12735 = dynamic_cast <cPtr_typeGalgas_lbool *> (ptr_12735) ;
                        cPtr_typeGalgas_lbool * operand_12760 = dynamic_cast <cPtr_typeGalgas_lbool *> (ptr_12760) ;
                        if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
                        }else{
                          cPtr_typeGalgas_lchar * operand_12735 = dynamic_cast <cPtr_typeGalgas_lchar *> (ptr_12735) ;
                          cPtr_typeGalgas_lchar * operand_12760 = dynamic_cast <cPtr_typeGalgas_lchar *> (ptr_12760) ;
                          if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
                          }else{
                            cPtr_typeGalgas_luint * operand_12735 = dynamic_cast <cPtr_typeGalgas_luint *> (ptr_12735) ;
                            cPtr_typeGalgas_luint * operand_12760 = dynamic_cast <cPtr_typeGalgas_luint *> (ptr_12760) ;
                            if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
                            }else{
                              cPtr_typeGalgas_lsint * operand_12735 = dynamic_cast <cPtr_typeGalgas_lsint *> (ptr_12735) ;
                              cPtr_typeGalgas_lsint * operand_12760 = dynamic_cast <cPtr_typeGalgas_lsint *> (ptr_12760) ;
                              if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
                              }else{
                                cPtr_typeGalgas_luint64 * operand_12735 = dynamic_cast <cPtr_typeGalgas_luint64 *> (ptr_12735) ;
                                cPtr_typeGalgas_luint64 * operand_12760 = dynamic_cast <cPtr_typeGalgas_luint64 *> (ptr_12760) ;
                                if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
                                }else{
                                  cPtr_typeGalgas_lsint64 * operand_12735 = dynamic_cast <cPtr_typeGalgas_lsint64 *> (ptr_12735) ;
                                  cPtr_typeGalgas_lsint64 * operand_12760 = dynamic_cast <cPtr_typeGalgas_lsint64 *> (ptr_12760) ;
                                  if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
                                  }else{
                                    cPtr_typeGalgas_ldouble * operand_12735 = dynamic_cast <cPtr_typeGalgas_ldouble *> (ptr_12735) ;
                                    cPtr_typeGalgas_ldouble * operand_12760 = dynamic_cast <cPtr_typeGalgas_ldouble *> (ptr_12760) ;
                                    if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
                                    }else{
                                      cPtr_typeGalgas_lstring * operand_12735 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_12735) ;
                                      cPtr_typeGalgas_lstring * operand_12760 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_12760) ;
                                      if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
                                      }else{
                                        cPtr_typeGalgas_location * operand_12735 = dynamic_cast <cPtr_typeGalgas_location *> (ptr_12735) ;
                                        cPtr_typeGalgas_location * operand_12760 = dynamic_cast <cPtr_typeGalgas_location *> (ptr_12760) ;
                                        if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
                                        }else{
                                          cPtr_typeGalgas_filewrapper * operand_12735 = dynamic_cast <cPtr_typeGalgas_filewrapper *> (ptr_12735) ;
                                          cPtr_typeGalgas_filewrapper * operand_12760 = dynamic_cast <cPtr_typeGalgas_filewrapper *> (ptr_12760) ;
                                          if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
                                          }else{
                                            cPtr_typeGalgas_enum * operand_12735 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_12735) ;
                                            cPtr_typeGalgas_enum * operand_12760 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_12760) ;
                                            if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
                                              if (((operand_12735->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (329)))._operator_isNotEqual (operand_12760->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (329)))).isBuiltAndTrue ()) {
                                                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "comparison between an '@"))._operator_concat (operand_12735->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (330))))._operator_concat (GGS_string (true, "' enumeration and an '@")))._operator_concat (operand_12760->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (331))))._operator_concat (GGS_string (true, "' enumeration is not valid")) COMMA_SOURCE_FILE_AT_LINE (331)) ;
                                              }
                                            }else{
                                              cPtr_typeGalgasUndefinedListType * operand_12735 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_12735) ;
                                              cPtr_typeGalgasUndefinedListType * operand_12760 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_12760) ;
                                              if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
                                                if (((operand_12735->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (334)))._operator_isNotEqual (operand_12760->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (334)))).isBuiltAndTrue ()) {
                                                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "I was expecting the list type '@"))._operator_concat (operand_12735->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (335))))._operator_concat (GGS_string (true, "', I have got the list type '@")))._operator_concat (operand_12760->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (336))))._operator_concat (GGS_string (true, "\"")) COMMA_SOURCE_FILE_AT_LINE (336)) ;
                                                }
                                              }else{
                                                cPtr_typeGalgasUndefinedMapType * operand_12735 = dynamic_cast <cPtr_typeGalgasUndefinedMapType *> (ptr_12735) ;
                                                cPtr_typeGalgasUndefinedMapType * operand_12760 = dynamic_cast <cPtr_typeGalgasUndefinedMapType *> (ptr_12760) ;
                                                if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
                                                  if (((operand_12735->mMapTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (340)))._operator_isNotEqual (operand_12760->mMapTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (340)))).isBuiltAndTrue ()) {
                                                    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "I was expecting the map type '@"))._operator_concat (operand_12735->mMapTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (341))))._operator_concat (GGS_string (true, "', I have got the map type '@")))._operator_concat (operand_12760->mMapTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (342))))._operator_concat (GGS_string (true, "\"")) COMMA_SOURCE_FILE_AT_LINE (342)) ;
                                                  }
                                                }else{
                                                  cPtr_typeGalgasUndefinedClassType * operand_12735 = dynamic_cast <cPtr_typeGalgasUndefinedClassType *> (ptr_12735) ;
                                                  cPtr_typeGalgasUndefinedClassType * operand_12760 = dynamic_cast <cPtr_typeGalgasUndefinedClassType *> (ptr_12760) ;
                                                  if ((operand_12735 != NULL) && (operand_12760 != NULL)) {
                                                    if (((operand_12735->mClassTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (347)))._operator_isNotEqual (operand_12760->mClassTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (347)))).isBuiltAndTrue ()) {
                                                      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "I was expecting the class type '@"))._operator_concat (operand_12735->mClassTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (348))))._operator_concat (GGS_string (true, "', I have got the class type '@")))._operator_concat (operand_12760->mClassTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (349))))._operator_concat (GGS_string (true, "\"")) COMMA_SOURCE_FILE_AT_LINE (349)) ;
                                                    }
                                                  }else{
                                                    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "comparison between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (352))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (353))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (353)) ;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_comparison_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "magnitude_comparison_types_check"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_magnitude_comparison_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_magnitude_comparison_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_16105 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_16130 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_stringset * operand_16105 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_16105) ;
    cPtr_typeGalgas_stringset * operand_16130 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_16130) ;
    if ((operand_16105 != NULL) && (operand_16130 != NULL)) {
    }else{
      cPtr_typeGalgas_bool * operand_16105 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_16105) ;
      cPtr_typeGalgas_bool * operand_16130 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_16130) ;
      if ((operand_16105 != NULL) && (operand_16130 != NULL)) {
      }else{
        cPtr_typeGalgas_char * operand_16105 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_16105) ;
        cPtr_typeGalgas_char * operand_16130 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_16130) ;
        if ((operand_16105 != NULL) && (operand_16130 != NULL)) {
        }else{
          cPtr_typeGalgas_uint * operand_16105 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_16105) ;
          cPtr_typeGalgas_uint * operand_16130 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_16130) ;
          if ((operand_16105 != NULL) && (operand_16130 != NULL)) {
          }else{
            cPtr_typeGalgas_sint * operand_16105 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_16105) ;
            cPtr_typeGalgas_sint * operand_16130 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_16130) ;
            if ((operand_16105 != NULL) && (operand_16130 != NULL)) {
            }else{
              cPtr_typeGalgas_uint64 * operand_16105 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_16105) ;
              cPtr_typeGalgas_uint64 * operand_16130 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_16130) ;
              if ((operand_16105 != NULL) && (operand_16130 != NULL)) {
              }else{
                cPtr_typeGalgas_sint64 * operand_16105 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_16105) ;
                cPtr_typeGalgas_sint64 * operand_16130 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_16130) ;
                if ((operand_16105 != NULL) && (operand_16130 != NULL)) {
                }else{
                  cPtr_typeGalgas_double * operand_16105 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_16105) ;
                  cPtr_typeGalgas_double * operand_16130 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_16130) ;
                  if ((operand_16105 != NULL) && (operand_16130 != NULL)) {
                  }else{
                    cPtr_typeGalgas_string * operand_16105 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_16105) ;
                    cPtr_typeGalgas_string * operand_16130 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_16130) ;
                    if ((operand_16105 != NULL) && (operand_16130 != NULL)) {
                    }else{
                      cPtr_typeGalgas_enum * operand_16105 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_16105) ;
                      cPtr_typeGalgas_enum * operand_16130 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_16130) ;
                      if ((operand_16105 != NULL) && (operand_16130 != NULL)) {
                        if (((operand_16105->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (378)))._operator_isNotEqual (operand_16130->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (378)))).isBuiltAndTrue ()) {
                          GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "comparison between an '@"))._operator_concat (operand_16105->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (379))))._operator_concat (GGS_string (true, "' enumeration and an '@")))._operator_concat (operand_16130->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (380))))._operator_concat (GGS_string (true, "' enumeration is not valid")) COMMA_SOURCE_FILE_AT_LINE (380)) ;
                        }
                      }else{
                        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "comparison between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (383))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (384))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (384)) ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_magnitude_comparison_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "left_shift_types_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_left_shift_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_left_shift_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_17763 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_17788 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_17763 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_17763) ;
    cPtr_typeGalgas_uint * operand_17788 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17788) ;
    if ((operand_17763 != NULL) && (operand_17788 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_uint * operand_17763 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17763) ;
      cPtr_typeGalgas_uint * operand_17788 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17788) ;
      if ((operand_17763 != NULL) && (operand_17788 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_sint * operand_17763 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_17763) ;
        cPtr_typeGalgas_uint * operand_17788 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17788) ;
        if ((operand_17763 != NULL) && (operand_17788 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_17763 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_17763) ;
          cPtr_typeGalgas_uint * operand_17788 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17788) ;
          if ((operand_17763 != NULL) && (operand_17788 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint64 * operand_17763 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_17763) ;
            cPtr_typeGalgas_uint * operand_17788 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17788) ;
            if ((operand_17763 != NULL) && (operand_17788 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "shift between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (411))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (412))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (414)) ;
              var_cas_outResultType._drop_operation () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_left_shift_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "right_shift_types_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_right_shift_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_right_shift_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_18769 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_18794 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_18769 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_18769) ;
    cPtr_typeGalgas_uint * operand_18794 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18794) ;
    if ((operand_18769 != NULL) && (operand_18794 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_uint * operand_18769 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18769) ;
      cPtr_typeGalgas_uint * operand_18794 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18794) ;
      if ((operand_18769 != NULL) && (operand_18794 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_sint * operand_18769 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_18769) ;
        cPtr_typeGalgas_uint * operand_18794 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18794) ;
        if ((operand_18769 != NULL) && (operand_18794 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_18769 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_18769) ;
          cPtr_typeGalgas_uint * operand_18794 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18794) ;
          if ((operand_18769 != NULL) && (operand_18794 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint64 * operand_18769 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_18769) ;
            cPtr_typeGalgas_uint * operand_18794 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18794) ;
            if ((operand_18769 != NULL) && (operand_18794 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "shift between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (437))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (438))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (440)) ;
              var_cas_outResultType._drop_operation () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_right_shift_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "addition_types_check"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addition_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addition_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_20084 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_20109 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_20084 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_20084) ;
    cPtr_typeGalgas_uint * operand_20109 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_20109) ;
    if ((operand_20084 != NULL) && (operand_20109 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_20084 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_20084) ;
      cPtr_typeGalgas_sint * operand_20109 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_20109) ;
      if ((operand_20084 != NULL) && (operand_20109 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_20084 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_20084) ;
        cPtr_typeGalgas_uint64 * operand_20109 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_20109) ;
        if ((operand_20084 != NULL) && (operand_20109 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_20084 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_20084) ;
          cPtr_typeGalgas_sint64 * operand_20109 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_20109) ;
          if ((operand_20084 != NULL) && (operand_20109 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "addition between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (465))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (466))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (468)) ;
            var_cas_outResultType._drop_operation () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addition_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "substraction_types_check"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_substraction_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_substraction_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_21309 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_21334 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_21309 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_21309) ;
    cPtr_typeGalgas_uint * operand_21334 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_21334) ;
    if ((operand_21309 != NULL) && (operand_21334 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_21309 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_21309) ;
      cPtr_typeGalgas_sint * operand_21334 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_21334) ;
      if ((operand_21309 != NULL) && (operand_21334 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_21309 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_21309) ;
        cPtr_typeGalgas_uint64 * operand_21334 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_21334) ;
        if ((operand_21309 != NULL) && (operand_21334 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_21309 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_21309) ;
          cPtr_typeGalgas_sint64 * operand_21334 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_21334) ;
          if ((operand_21309 != NULL) && (operand_21334 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_stringset * operand_21309 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_21309) ;
            cPtr_typeGalgas_stringset * operand_21334 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_21334) ;
            if ((operand_21309 != NULL) && (operand_21334 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "substraction between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (495))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (496))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (498)) ;
              var_cas_outResultType._drop_operation () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_substraction_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "multiply_types_check"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_multiply_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_multiply_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_22640 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_22665 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_22640 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_22640) ;
    cPtr_typeGalgas_uint * operand_22665 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_22665) ;
    if ((operand_22640 != NULL) && (operand_22665 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_22640 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_22640) ;
      cPtr_typeGalgas_sint * operand_22665 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_22665) ;
      if ((operand_22640 != NULL) && (operand_22665 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_22640 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_22640) ;
        cPtr_typeGalgas_uint64 * operand_22665 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_22665) ;
        if ((operand_22640 != NULL) && (operand_22665 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_22640 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_22640) ;
          cPtr_typeGalgas_sint64 * operand_22665 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_22665) ;
          if ((operand_22640 != NULL) && (operand_22665 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "multiplication between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (523))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (524))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (526)) ;
            var_cas_outResultType._drop_operation () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_multiply_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "divide_types_check"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_divide_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_divide_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_23865 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_23890 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_23865 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_23865) ;
    cPtr_typeGalgas_uint * operand_23890 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_23890) ;
    if ((operand_23865 != NULL) && (operand_23890 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_23865 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_23865) ;
      cPtr_typeGalgas_sint * operand_23890 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_23890) ;
      if ((operand_23865 != NULL) && (operand_23890 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_23865 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_23865) ;
        cPtr_typeGalgas_uint64 * operand_23890 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_23890) ;
        if ((operand_23865 != NULL) && (operand_23890 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_23865 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_23865) ;
          cPtr_typeGalgas_sint64 * operand_23890 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_23890) ;
          if ((operand_23865 != NULL) && (operand_23890 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "division between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (551))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (552))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (554)) ;
            var_cas_outResultType._drop_operation () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_divide_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "modulo_types_check"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_modulo_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_modulo_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_25084 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_25109 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_25084 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_25084) ;
    cPtr_typeGalgas_uint * operand_25109 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_25109) ;
    if ((operand_25084 != NULL) && (operand_25109 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_25084 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_25084) ;
      cPtr_typeGalgas_sint * operand_25109 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_25109) ;
      if ((operand_25084 != NULL) && (operand_25109 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_25084 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_25084) ;
        cPtr_typeGalgas_uint64 * operand_25109 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_25109) ;
        if ((operand_25084 != NULL) && (operand_25109 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_25084 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_25084) ;
          cPtr_typeGalgas_sint64 * operand_25109 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_25109) ;
          if ((operand_25084 != NULL) && (operand_25109 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "modulo between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (579))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (580))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (582)) ;
            var_cas_outResultType._drop_operation () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_modulo_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "unary_minus_type_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_unary_minus_type_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_unary_minus_type_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_AC_galgasType _var_26534 = var_cas_inExpressionType ; // CAST instruction
    if (_var_26534.getPtr () != NULL) {
      macroValidPointer (_var_26534.getPtr ()) ;
      if (dynamic_cast <cPtr_typeGalgas_sint *> (_var_26534.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inExpressionType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint64 *> (_var_26534.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inExpressionType ;
      }else{
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "unary minus for "))._operator_concat (var_cas_inExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (602))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (605)) ;
        var_cas_outResultType._drop_operation () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_unary_minus_type_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_expression_expression_parser_615_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_filewrappers  var_cas_inFileWrappers,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_concatenation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_expression_parser_0 (_inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_concatenation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeConcatOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchConcatOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (647)) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_expression_expression_parser_615_4_parse (galgas_scanner & _inLexique) {
  nt_concatenation_term_parse (_inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_expression_parser_0 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          nt_concatenation_term_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'concatenation_term'           *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_concatenation_term_expression_parser_662_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_filewrappers  var_cas_inFileWrappers,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_expression_parser_1 (_inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7C) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeOrOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchOrOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (694)) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5E) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeXorOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchXorOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (715)) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_concatenation_term_expression_parser_662_4_parse (galgas_scanner & _inLexique) {
  nt_relation_term_parse (_inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_expression_parser_1 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7C) COMMA_HERE) ;
          nt_relation_term_parse (_inLexique) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5E) COMMA_HERE) ;
          nt_relation_term_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'relation_term'              *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_relation_term_expression_parser_730_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_filewrappers  var_cas_inFileWrappers,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_expression_parser_2 (_inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__26) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeAndOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchAndOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (762)) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_relation_term_expression_parser_730_4_parse (galgas_scanner & _inLexique) {
  nt_relation_factor_parse (_inLexique) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_expression_parser_2 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__26) COMMA_HERE) ;
          nt_relation_factor_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'relation_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_relation_factor_expression_parser_777_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_filewrappers  var_cas_inFileWrappers,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  switch (select_expression_parser_3 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D_3D) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (807)) ;
      var_cas_outExpression = GGS_typeEqualTest::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_3D) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (825)) ;
      var_cas_outExpression = GGS_typeNonEqualTest::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 4 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_3D) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (843)) ;
      var_cas_outExpression = GGS_typeInfOrEqualTest::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 5 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_3D) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (861)) ;
      var_cas_outExpression = GGS_typeSupOrEqualTest::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 6 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (879)) ;
      var_cas_outExpression = GGS_typeStrictSupTest::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 7 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (897)) ;
      var_cas_outExpression = GGS_typeStrictInfTest::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_relation_factor_expression_parser_777_4_parse (galgas_scanner & _inLexique) {
  nt_simple_expression_parse (_inLexique) ;
  switch (select_expression_parser_3 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D_3D) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_3D) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 4 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_3D) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 5 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_3D) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 6 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 7 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'simple_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_simple_expression_expression_parser_910_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_filewrappers  var_cas_inFileWrappers,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_repeat_expression_parser_4 (_inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_3C) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_left_shift_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (941)) ;
          var_cas_outExpression = GGS_typeLeftShiftOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_3E) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_right_shift_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (958)) ;
          var_cas_outExpression = GGS_typeRightShiftOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_addition_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (975)) ;
          var_cas_outExpression = GGS_typeAddOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 5 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_substraction_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (992)) ;
          var_cas_outExpression = GGS_typeSubOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_simple_expression_expression_parser_910_4_parse (galgas_scanner & _inLexique) {
  nt_term_parse (_inLexique) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_repeat_expression_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_3C) COMMA_HERE) ;
          nt_term_parse (_inLexique) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_3E) COMMA_HERE) ;
          nt_term_parse (_inLexique) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B) COMMA_HERE) ;
          nt_term_parse (_inLexique) ;
          } break ;
        case 5 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D) COMMA_HERE) ;
          nt_term_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'term'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_term_expression_parser_1004_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_filewrappers  var_cas_inFileWrappers,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_repeat_expression_parser_5 (_inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_multiply_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1035)) ;
          var_cas_outExpression = GGS_typeMultiplyOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2F) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_divide_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1052)) ;
          var_cas_outExpression = GGS_typeDivideOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_mod) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_modulo_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1069)) ;
          var_cas_outExpression = GGS_typeModuloOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_term_expression_parser_1004_4_parse (galgas_scanner & _inLexique) {
  nt_factor_parse (_inLexique) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_repeat_expression_parser_5 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
          nt_factor_parse (_inLexique) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2F) COMMA_HERE) ;
          nt_factor_parse (_inLexique) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_mod) COMMA_HERE) ;
          nt_factor_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1081_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_filewrappers  var_cas_inFileWrappers,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation ;
  var_cas_operatorLocation = GGS_location (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D) COMMA_HERE) ;
  GGS_typeExpression  var_cas_expression ;
  GGS_AC_galgasType  var_cas_type ;
  nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_expression, var_cas_type) ;
  ::routine_unary_minus_type_check (_inLexique,  var_cas_type,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1100)) ;
  var_cas_outExpression = GGS_typeUnaryMinusOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_expression COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1081_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D) COMMA_HERE) ;
  nt_factor_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1111_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_M_filewrappers  /* var_cas_inFileWrappers */,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_typeCplusPlusName  var_cas_nomCppEntite1 ;
  GGS_lstring  automatic_var_0 ;
  nt_read_access_ (_inLexique, automatic_var_0, var_cas_nomCppEntite1, var_cas_outResultType, var_cas_ioVariablesMap) ;
  var_cas_outExpression = GGS_typeVarInExpression::constructor_new (_inLexique, var_cas_nomCppEntite1 COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1111_4_parse (galgas_scanner & _inLexique) {
  nt_read_access_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1132_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_filewrappers  var_cas_inFileWrappers,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  switch (select_expression_parser_6 (_inLexique)) {
    case 1 : {
      nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_cast) COMMA_HERE) ;
      GGS_typeExpression  var_cas_castedExpression ;
      GGS_AC_galgasType  var_cas_castExpressionType ;
      nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_castedExpression, var_cas_castExpressionType) ;
      GGS_lstring  var_cas_kSourceExpresionClassName ;
      var_cas_kSourceExpresionClassName = GGS_typeGalgasClassType::_castFrom (_inLexique, var_cas_castExpressionType.getPtr (), true, GGS_location (_inLexique) COMMA_SOURCE_FILE_AT_LINE (1163)).reader_mClassTypeName (_inLexique COMMA_SOURCE_FILE_AT_LINE (1163)) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
      GGS_bool var_cas_checkForKindOfClass ;
      switch (select_expression_parser_7 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_3D) COMMA_HERE) ;
          var_cas_checkForKindOfClass = GGS_bool (true, true) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D_3D) COMMA_HERE) ;
          var_cas_checkForKindOfClass = GGS_bool (true, false) ;
          } break ;
        default :
          break ;
      }
      GGS_lstring  var_cas_castedTypeName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_castedTypeName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite ;
      const GGS_M_semanticsEntitiesForUse  _temp_45285 = var_cas_ioEntitiesMap ;
      if (_temp_45285._isBuilt ()) {
        _temp_45285 (HERE)->method_searchKey (_inLexique, var_cas_castedTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1178)) ;
      }
      var_cas_outResultType = GGS_typeEntiteType::_castFrom (_inLexique, var_cas_entite.getPtr (), true, var_cas_castedTypeName COMMA_SOURCE_FILE_AT_LINE (1179)).reader_aDefType (_inLexique COMMA_SOURCE_FILE_AT_LINE (1179)) ;
      GGS_typeGalgasClassType  var_cas_resultClassType ;
      var_cas_resultClassType = GGS_typeGalgasClassType::_castFrom (_inLexique, var_cas_outResultType.getPtr (), true, var_cas_castedTypeName COMMA_SOURCE_FILE_AT_LINE (1181)) ;
      GGS_typeSuperClassesMap  var_cas_superClassMap ;
      var_cas_superClassMap = var_cas_resultClassType.reader_mAncestorClassesMap (_inLexique COMMA_SOURCE_FILE_AT_LINE (1182)) ;
      GGS_string var_cas_classMessage ;
      var_cas_classMessage = var_cas_resultClassType.reader_mClassMessage (_inLexique COMMA_SOURCE_FILE_AT_LINE (1183)) ;
      if (((var_cas_classMessage.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1185)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_castedTypeName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "in order to be used in a cast expression, the '@"))._operator_concat (var_cas_castedTypeName))._operator_concat (GGS_string (true, "' class should define a class message")) COMMA_SOURCE_FILE_AT_LINE (1186)) ;
      }
      GGS_string var_cas_sourceExpressionTypeNameString ;
      var_cas_sourceExpressionTypeNameString = var_cas_kSourceExpresionClassName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1189)) ;
      if (((var_cas_checkForKindOfClass)._operator_not ()).isBuiltAndTrue ()) {
        if ((((var_cas_castedTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1191)))._operator_isNotEqual (var_cas_sourceExpressionTypeNameString))._operator_and ((var_cas_superClassMap.reader_hasKey (_inLexique, var_cas_sourceExpressionTypeNameString COMMA_SOURCE_FILE_AT_LINE (1191)))._operator_not ())).isBuiltAndTrue ()) {
          var_cas_castedTypeName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "This class is not '@"))._operator_concat (var_cas_sourceExpressionTypeNameString))._operator_concat (GGS_string (true, "' and does inherit from it")) COMMA_SOURCE_FILE_AT_LINE (1192)) ;
        }
      }else if (((var_cas_superClassMap.reader_hasKey (_inLexique, var_cas_sourceExpressionTypeNameString COMMA_SOURCE_FILE_AT_LINE (1194)))._operator_not ()).isBuiltAndTrue ()) {
        var_cas_castedTypeName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "This class does not inherit from '@"))._operator_concat (var_cas_sourceExpressionTypeNameString))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (1195)) ;
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
      GGS_typeExpression  var_cas_errorLocationExpression ;
      GGS_AC_galgasType  var_cas_errorLocationExpressionType ;
      nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_errorLocationExpression, var_cas_errorLocationExpressionType) ;
      const GGS_AC_galgasType  _temp_47016 = var_cas_errorLocationExpressionType ;
      if (_temp_47016._isBuilt ()) {
        _temp_47016 (HERE)->method_checkAbilityToBeSilentlyConvertedToLocation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1210)) ;
      }
      var_cas_outExpression = GGS_typeCastInExpression::constructor_new (_inLexique, var_cas_castedExpression, var_cas_checkForKindOfClass, var_cas_castedTypeName, var_cas_errorLocationExpression COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1132_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  switch (select_expression_parser_6 (_inLexique)) {
    case 1 : {
      nt_expression_parse (_inLexique) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_cast) COMMA_HERE) ;
      nt_expression_parse (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
      switch (select_expression_parser_7 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_3D) COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D_3D) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
      nt_expression_parse (_inLexique) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1228_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_filewrappers  var_cas_inFileWrappers,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation ;
  var_cas_operatorLocation = GGS_location (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_not) COMMA_HERE) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeTestComplement::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_ifCondition COMMA_HERE) ;
  ::routine_checkNotOperator (_inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1248)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1228_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_not) COMMA_HERE) ;
  nt_factor_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1258_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_filewrappers  var_cas_inFileWrappers,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation ;
  var_cas_operatorLocation = GGS_location (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7E) COMMA_HERE) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeLogicalNegate::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_ifCondition COMMA_HERE) ;
  ::routine_checkLogicalNegateOperator (_inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1278)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1258_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7E) COMMA_HERE) ;
  nt_factor_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1288_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_M_filewrappers  /* var_cas_inFileWrappers */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_true) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeTrueBool::constructor_new (_inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1288_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_true) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1307_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_M_filewrappers  /* var_cas_inFileWrappers */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_false) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeFalseBool::constructor_new (_inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1307_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_false) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1326_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_M_filewrappers  /* var_cas_inFileWrappers */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_stringlist  var_cas_literalStringList ;
  var_cas_literalStringList = GGS_stringlist::constructor_emptyList (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
        GGS_lstring  var_cas_literalString ;
        _inLexique._assignFromAttribute_tokenString (var_cas_literalString) ;
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
        var_cas_literalStringList._addAssign_operation (var_cas_literalString.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1338))) ;
      switch (select_repeat_expression_parser_8 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
  var_cas_outExpression = GGS_typeLiteralStringExpression::constructor_new (_inLexique, var_cas_literalStringList COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_string::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1326_4_parse (galgas_scanner & _inLexique) {
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      switch (select_repeat_expression_parser_8 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1351_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_M_filewrappers  /* var_cas_inFileWrappers */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint  var_cas_literalInt ;
  _inLexique._assignFromAttribute_uint32value (var_cas_literalInt) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralUIntExpression::constructor_new (_inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_uint::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1351_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1371_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_M_filewrappers  /* var_cas_inFileWrappers */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint  var_cas_literalInt ;
  _inLexique._assignFromAttribute_sint32value (var_cas_literalInt) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralSIntExpression::constructor_new (_inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_sint::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1371_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1391_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_M_filewrappers  /* var_cas_inFileWrappers */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint64  var_cas_literalInt ;
  _inLexique._assignFromAttribute_uint64value (var_cas_literalInt) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger64) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralUInt64Expression::constructor_new (_inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_uint64::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1391_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger64) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1411_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_M_filewrappers  /* var_cas_inFileWrappers */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint64  var_cas_literalInt ;
  _inLexique._assignFromAttribute_sint64value (var_cas_literalInt) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger64) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralSInt64Expression::constructor_new (_inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_sint64::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1411_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger64) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1431_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_M_filewrappers  /* var_cas_inFileWrappers */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lchar  var_cas_literalChar ;
  _inLexique._assignFromAttribute_charValue (var_cas_literalChar) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fchar) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralCharExpression::constructor_new (_inLexique, var_cas_literalChar COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_char::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1431_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fchar) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1451_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_M_filewrappers  /* var_cas_inFileWrappers */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_ldouble  var_cas_literalDouble ;
  _inLexique._assignFromAttribute_floatValue (var_cas_literalDouble) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fdouble) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralDoubleExpression::constructor_new (_inLexique, var_cas_literalDouble COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_double::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1451_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fdouble) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1471_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_M_filewrappers  /* var_cas_inFileWrappers */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_here) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeHereExpression::constructor_new (_inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_location::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1471_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_here) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1495_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_filewrappers  var_cas_inFileWrappers,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B) COMMA_HERE) ;
  switch (select_expression_parser_9 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_filewrapper) COMMA_HERE) ;
      GGS_lstring  var_cas_filewrapperName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_filewrapperName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_M_regularFiles  var_cas_regularFileMap ;
      const GGS_M_filewrappers  _temp_59316 = var_cas_inFileWrappers ;
      if (_temp_59316._isBuilt ()) {
        _temp_59316 (HERE)->method_searchKey (_inLexique, var_cas_filewrapperName, var_cas_regularFileMap COMMA_SOURCE_FILE_AT_LINE (1511)) ;
      }
      switch (select_expression_parser_10 (_inLexique)) {
        case 1 : {
          var_cas_outExpression = GGS_typeFileWrapperObjectInstanciation::constructor_new (_inLexique, var_cas_filewrapperName COMMA_HERE) ;
          var_cas_outResultType = GGS_typeGalgas_filewrapper::constructor_new (_inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          GGS_lstring  var_cas_path ;
          _inLexique._assignFromAttribute_tokenString (var_cas_path) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          GGS_uint  var_cas_wrapperFileIndex ;
          GGS_uint  automatic_var_1 ;
          const GGS_M_regularFiles  _temp_59665 = var_cas_regularFileMap ;
          if (_temp_59665._isBuilt ()) {
            _temp_59665 (HERE)->method_searchKey (_inLexique, var_cas_path, automatic_var_1, var_cas_wrapperFileIndex COMMA_SOURCE_FILE_AT_LINE (1522)) ;
          }
          var_cas_outExpression = GGS_typeFileWrapperWithStaticPath::constructor_new (_inLexique, var_cas_filewrapperName, var_cas_wrapperFileIndex COMMA_HERE) ;
          var_cas_outResultType = GGS_typeGalgas_string::constructor_new (_inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      GGS_typeExpression  var_cas_expressionValue ;
      GGS_AC_galgasType  var_cas_expressionType ;
      nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_expressionValue, var_cas_expressionType) ;
      switch (select_expression_parser_11 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_description) COMMA_HERE) ;
          var_cas_outExpression = GGS_typeDescriptionInExpression::constructor_new (_inLexique, var_cas_expressionValue, GGS_location (_inLexique) COMMA_HERE) ;
          var_cas_outResultType = GGS_typeGalgas_string::constructor_new (_inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          GGS_lstring  var_cas_methodName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_methodName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_typeListeAttributsSemantiques  var_cas_accessorsTypeList ;
          GGS_string var_cas_conversionMethod ;
          ::routine_handleReaderCall (_inLexique,  var_cas_expressionType,  var_cas_methodName,  var_cas_accessorsTypeList,  var_cas_outResultType,  var_cas_conversionMethod COMMA_SOURCE_FILE_AT_LINE (1548)) ;
          GGS_typeExpressionList  var_cas_expressionList ;
          nt_output_expression_list_ (_inLexique, var_cas_expressionList, var_cas_accessorsTypeList, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap) ;
          var_cas_outExpression = GGS_typeReaderCallInExpression::constructor_new (_inLexique, var_cas_expressionValue, var_cas_methodName, var_cas_expressionList, var_cas_conversionMethod COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 3 : {
      GGS_lstring  var_cas_className ;
      _inLexique._assignFromAttribute_tokenString (var_cas_className) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      GGS_lstring  var_cas_mClassMethodName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_mClassMethodName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_e ;
      const GGS_M_semanticsEntitiesForUse  _temp_61303 = var_cas_ioEntitiesMap ;
      if (_temp_61303._isBuilt ()) {
        _temp_61303 (HERE)->method_searchKey (_inLexique, var_cas_className, var_cas_e COMMA_SOURCE_FILE_AT_LINE (1570)) ;
      }
      var_cas_outResultType = GGS_typeEntiteType::_castFrom (_inLexique, var_cas_e.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (1571)).reader_aDefType (_inLexique COMMA_SOURCE_FILE_AT_LINE (1571)) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques ;
      const GGS_AC_galgasType  _temp_61498 = var_cas_outResultType ;
      if (_temp_61498._isBuilt ()) {
        _temp_61498 (HERE)->method_handleConstructorCall (_inLexique, var_cas_mClassMethodName, var_cas_listeAttributsSemantiques COMMA_SOURCE_FILE_AT_LINE (1573)) ;
      }
      GGS_typeExpressionList  var_cas_expressionList ;
      nt_output_expression_list_ (_inLexique, var_cas_expressionList, var_cas_listeAttributsSemantiques, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap) ;
      var_cas_outExpression = GGS_typeConstructorExpression::constructor_new (_inLexique, var_cas_className.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1585)), var_cas_mClassMethodName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1586)), var_cas_expressionList COMMA_HERE) ;
      } break ;
    case 4 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
      switch (select_expression_parser_12 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          GGS_lstring  var_cas_optionName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_optionName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          if (((var_cas_optionName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1595)))._operator_isNotEqual (GGS_string (true, "verbose_output"))).isBuiltAndTrue ()) {
            var_cas_optionName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "this option name does not correspond to a builtin option") COMMA_SOURCE_FILE_AT_LINE (1596)) ;
          }
          var_cas_outExpression = GGS_typeBoolOption::constructor_new (_inLexique, GGS_string (true, "generic_galgas_cli_options"), var_cas_optionName COMMA_HERE) ;
          var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          GGS_lstring  var_cas_optionComponentName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_optionComponentName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_M_cli_options  var_cas_boolOptionsMap ;
          GGS_M_cli_options  var_cas_uintOptionsMap ;
          GGS_M_cli_options  var_cas_stringOptionsMap ;
          const GGS_M_optionComponents  _temp_62607 = var_cas_inOptionsComponentsMapForUse ;
          if (_temp_62607._isBuilt ()) {
            _temp_62607 (HERE)->method_searchKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (1606)) ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          GGS_lstring  var_cas_optionName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_optionName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          if ((var_cas_boolOptionsMap.reader_hasKey (_inLexique, var_cas_optionName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1610)) COMMA_SOURCE_FILE_AT_LINE (1610))).isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_typeBoolOption::constructor_new (_inLexique, var_cas_optionComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1611)), var_cas_optionName COMMA_HERE) ;
            var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
          }else if ((var_cas_uintOptionsMap.reader_hasKey (_inLexique, var_cas_optionName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1613)) COMMA_SOURCE_FILE_AT_LINE (1613))).isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_typeUIntOption::constructor_new (_inLexique, var_cas_optionComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1614)), var_cas_optionName COMMA_HERE) ;
            var_cas_outResultType = GGS_typeGalgas_uint::constructor_new (_inLexique COMMA_HERE) ;
          }else if ((var_cas_stringOptionsMap.reader_hasKey (_inLexique, var_cas_optionName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1616)) COMMA_SOURCE_FILE_AT_LINE (1616))).isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_typeStringOption::constructor_new (_inLexique, var_cas_optionComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1617)), var_cas_optionName COMMA_HERE) ;
            var_cas_outResultType = GGS_typeGalgas_string::constructor_new (_inLexique COMMA_HERE) ;
          }else{
            var_cas_optionName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the '"))._operator_concat (var_cas_optionComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1620))))._operator_concat (GGS_string (true, "' option component has no '")))._operator_concat (var_cas_optionName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1620))))._operator_concat (GGS_string (true, "' option")) COMMA_SOURCE_FILE_AT_LINE (1621)) ;
            var_cas_outExpression._drop_operation () ;
            var_cas_outResultType._drop_operation () ;
          }
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1495_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B) COMMA_HERE) ;
  switch (select_expression_parser_9 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_filewrapper) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      switch (select_expression_parser_10 (_inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      nt_expression_parse (_inLexique) ;
      switch (select_expression_parser_11 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_description) COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          nt_output_expression_list_parse (_inLexique) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      nt_output_expression_list_parse (_inLexique) ;
      } break ;
    case 4 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
      switch (select_expression_parser_12 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'read_access'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_read_access_expression_parser_1634_4_ (galgas_scanner & _inLexique,
                                GGS_lstring  &var_cas_nomVariable,
                                GGS_typeCplusPlusName  &var_cas_nomCppEntite,
                                GGS_AC_galgasType  &var_cas_typeEntite,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  _inLexique._assignFromAttribute_tokenString (var_cas_nomVariable) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  var_cas_ioVariablesMap.modifier_searchForReadOnlyAccess (_inLexique, var_cas_nomVariable, var_cas_typeEntite, var_cas_nomCppEntite COMMA_SOURCE_FILE_AT_LINE (1641)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_read_access_expression_parser_1634_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'read_access'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_read_access_expression_parser_1650_4_ (galgas_scanner & _inLexique,
                                GGS_lstring  &var_cas_nomVariable,
                                GGS_typeCplusPlusName  &var_cas_nomCppEntite,
                                GGS_AC_galgasType  &var_cas_typeEntite,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_self) COMMA_HERE) ;
  if ((var_cas_ioVariablesMap.reader_hasKey (_inLexique, GGS_string (true, "self") COMMA_SOURCE_FILE_AT_LINE (1657))).isBuiltAndTrue ()) {
    var_cas_nomVariable = GGS_lstring::constructor_new (_inLexique, GGS_string (true, "self"), GGS_location (_inLexique) COMMA_HERE) ;
    var_cas_ioVariablesMap.modifier_searchForReadOnlyAccess (_inLexique, var_cas_nomVariable, var_cas_typeEntite, var_cas_nomCppEntite COMMA_SOURCE_FILE_AT_LINE (1659)) ;
  }else{
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "'self' is not defined in this context") COMMA_SOURCE_FILE_AT_LINE (1662)) ;
    var_cas_nomVariable._drop_operation () ;
    var_cas_nomCppEntite._drop_operation () ;
    var_cas_typeEntite._drop_operation () ;
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_read_access_expression_parser_1650_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_self) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'output_expression_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_output_expression_list_expression_parser_1672_4_ (galgas_scanner & _inLexique,
                                GGS_typeExpressionList  &var_cas_outExpressionList,
                                const GGS_typeListeAttributsSemantiques  var_cas_inFormalAttributesList,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_filewrappers  var_cas_inFileWrappers,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  GGS_typeTypesList  var_cas_effectiveTypesList ;
  var_cas_effectiveTypesList = GGS_typeTypesList::constructor_emptyList (_inLexique COMMA_HERE) ;
  var_cas_outExpressionList = GGS_typeExpressionList::constructor_emptyList (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_13 = true ;
    while (syntaxRepeat_13) {
      switch (select_repeat_expression_parser_13 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21) COMMA_HERE) ;
          GGS_typeExpression  var_cas_expression ;
          GGS_AC_galgasType  var_cas_resultType ;
          nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inFileWrappers, var_cas_ioVariablesMap, var_cas_expression, var_cas_resultType) ;
          GGS_location  var_cas_errorLocation ;
          var_cas_errorLocation = GGS_location (_inLexique) ;
          var_cas_effectiveTypesList._addAssign_operation (var_cas_resultType, var_cas_errorLocation) ;
          var_cas_outExpressionList._addAssign_operation (var_cas_expression) ;
          } break ;
        default :
          syntaxRepeat_13 = false ;
          break ;
      }
    }
  }
  GGS_location  var_cas_endOfListLocation ;
  var_cas_endOfListLocation = GGS_location (_inLexique) ;
  if (((var_cas_inFormalAttributesList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1701)))._operator_strictInf (var_cas_effectiveTypesList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1701)))).isBuiltAndTrue ()) {
    var_cas_endOfListLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "too much expressions") COMMA_SOURCE_FILE_AT_LINE (1702)) ;
  }else if (((var_cas_inFormalAttributesList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1703)))._operator_strictSup (var_cas_effectiveTypesList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1703)))).isBuiltAndTrue ()) {
    var_cas_endOfListLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "one or more expressions missing") COMMA_SOURCE_FILE_AT_LINE (1704)) ;
  }else{
    GGS_typeListeAttributsSemantiques::cEnumerator enumerator_66768 (var_cas_inFormalAttributesList, true) ;
    const GGS_typeListeAttributsSemantiques::cElement * operand_66768 = NULL ;
    GGS_typeTypesList::cEnumerator enumerator_66851 (var_cas_effectiveTypesList, true) ;
    const GGS_typeTypesList::cElement * operand_66851 = NULL ;
    while (((operand_66768 = (GGS_typeListeAttributsSemantiques::cElement *) enumerator_66768.nextObject ()))
        && ((operand_66851 = enumerator_66851.nextObject ()))) {
      macroValidPointer (operand_66768) ;
      macroValidPointer (operand_66851) ;
      ::routine_checkAssignmentTypesCompatibility (_inLexique,  operand_66768->mAttributType,  operand_66851->mType,  operand_66851->mEndOfExpressionLocation,  GGS_bool (true, true) COMMA_SOURCE_FILE_AT_LINE (1707)) ;
    }
    enumerator_66768.reset () ;
    enumerator_66851.reset () ;
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_output_expression_list_expression_parser_1672_4_parse (galgas_scanner & _inLexique) {
  { bool syntaxRepeat_13 = true ;
    while (syntaxRepeat_13) {
      switch (select_repeat_expression_parser_13 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21) COMMA_HERE) ;
          nt_expression_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_13 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'parse_effective_input_parameters_list'  *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_parse_effective_input_parameters_list_expression_parser_1719_4_ (galgas_scanner & _inLexique,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeListeAttributsSemantiques  var_cas_inFormalArgumentsList,
                                GGS_location  var_cas_inVarLocation,
                                GGS_localConstantBuildStyleEnum var_cas_inLocalConstantStyle,
                                GGS_bool &var_cas_outNoUsedParameter) {
  var_cas_outNoUsedParameter = GGS_bool (true, true) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  GGS_L_nameWithType  var_cas_argumentsList ;
  var_cas_argumentsList = GGS_L_nameWithType::constructor_emptyList (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
      switch (select_repeat_expression_parser_14 (_inLexique)) {
        case 2 : {
          switch (select_expression_parser_15 (_inLexique)) {
            case 1 : {
              var_cas_outNoUsedParameter = GGS_bool (true, false) ;
              GGS_lstring  var_cas_typeName ;
              _inLexique._assignFromAttribute_tokenString (var_cas_typeName) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
              GGS_lstring  var_cas_constantName ;
              _inLexique._assignFromAttribute_tokenString (var_cas_constantName) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_argumentsList._addAssign_operation (var_cas_typeName, var_cas_constantName) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
              var_cas_argumentsList._addAssign_operation (GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE)) ;
              } break ;
            case 3 : {
              GGS_luint  var_cas_jokerCountWithLocation ;
              _inLexique._assignFromAttribute_uint32value (var_cas_jokerCountWithLocation) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
              GGS_uint  var_cas_jokerCount ;
              var_cas_jokerCount = var_cas_jokerCountWithLocation.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1745)) ;
              GGS_uint _variant_68468 = var_cas_jokerCount._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1746)) ;
              GGS_bool _condition_68468 (_variant_68468._isBuilt (), true) ;
              while (_condition_68468.isBuiltAndTrue ()) {
                _condition_68468 = (var_cas_jokerCount)._operator_strictSup (GGS_uint (true, 0U)) ;
                if (_condition_68468.isBuiltAndTrue ()) {
                  if (_variant_68468.uintValue () == 0) {
                    _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1749)) ;
                    _condition_68468 = GGS_bool (true, false) ;
                  }else{
                    _variant_68468._decrement_operation (_inLexique COMMA_HERE) ;
                    var_cas_argumentsList._addAssign_operation (GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE)) ;
                    var_cas_jokerCount._decrement_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1749)) ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
  GGS_bool var_cas_ellipsisFound ;
  switch (select_expression_parser_16 (_inLexique)) {
    case 1 : {
      var_cas_ellipsisFound = GGS_bool (true, false) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_2E_2E) COMMA_HERE) ;
      var_cas_ellipsisFound = GGS_bool (true, true) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
  ::routine_buildMapWithLocalConstants (_inLexique,  var_cas_argumentsList,  var_cas_inFormalArgumentsList,  var_cas_ioVariablesMap,  var_cas_inVarLocation,  var_cas_inLocalConstantStyle,  var_cas_ellipsisFound COMMA_SOURCE_FILE_AT_LINE (1761)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_parse_effective_input_parameters_list_expression_parser_1719_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
      switch (select_repeat_expression_parser_14 (_inLexique)) {
        case 2 : {
          switch (select_expression_parser_15 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
              } break ;
            case 3 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
  switch (select_expression_parser_16 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_2E_2E) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

