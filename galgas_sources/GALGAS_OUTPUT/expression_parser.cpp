//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'expression_parser.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 24th, 2008, at 13h50'48"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "expression_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "expression_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchAndOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchAndOperator (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchAndOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_5271 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_5296 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_5271 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_5271) ;
    cPtr_typeGalgas_binaryset * operand_5296 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_5296) ;
    if ((operand_5271 != NULL) && (operand_5296 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_5271 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_5271) ;
      cPtr_typeGalgas_bool * operand_5296 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_5296) ;
      if ((operand_5271 != NULL) && (operand_5296 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_5271 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_5271) ;
        cPtr_typeGalgas_uint * operand_5296 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_5296) ;
        if ((operand_5271 != NULL) && (operand_5296 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_5271 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_5271) ;
          cPtr_typeGalgas_uint64 * operand_5296 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_5296) ;
          if ((operand_5271 != NULL) && (operand_5296 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_stringset * operand_5271 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_5271) ;
            cPtr_typeGalgas_stringset * operand_5296 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_5296) ;
            if ((operand_5271 != NULL) && (operand_5296 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint * operand_5271 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_5271) ;
              cPtr_typeGalgas_sint * operand_5296 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_5296) ;
              if ((operand_5271 != NULL) && (operand_5296 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                cPtr_typeGalgas_sint64 * operand_5271 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_5271) ;
                cPtr_typeGalgas_sint64 * operand_5296 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_5296) ;
                if ((operand_5271 != NULL) && (operand_5296 != NULL)) {
                  var_cas_outResultType = var_cas_inLeftExpressionType ;
                }else{
                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "operand type error : ("))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (156))))._operator_concat (GGS_string (true, " & ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (157))))._operator_concat (GGS_string (true, ") is not valid")) COMMA_SOURCE_FILE_AT_LINE (158)) ;
                  var_cas_outResultType._drop () ;
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchAndOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchOrOperator"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchOrOperator (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchOrOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_6792 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_6817 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_6792 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_6792) ;
    cPtr_typeGalgas_binaryset * operand_6817 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_6817) ;
    if ((operand_6792 != NULL) && (operand_6817 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_6792 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_6792) ;
      cPtr_typeGalgas_bool * operand_6817 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_6817) ;
      if ((operand_6792 != NULL) && (operand_6817 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_6792 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_6792) ;
        cPtr_typeGalgas_uint * operand_6817 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_6817) ;
        if ((operand_6792 != NULL) && (operand_6817 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_6792 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_6792) ;
          cPtr_typeGalgas_uint64 * operand_6817 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_6817) ;
          if ((operand_6792 != NULL) && (operand_6817 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint * operand_6792 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_6792) ;
            cPtr_typeGalgas_sint * operand_6817 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_6817) ;
            if ((operand_6792 != NULL) && (operand_6817 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint64 * operand_6792 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_6792) ;
              cPtr_typeGalgas_sint64 * operand_6817 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_6817) ;
              if ((operand_6792 != NULL) && (operand_6817 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                cPtr_typeGalgas_stringset * operand_6792 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_6792) ;
                cPtr_typeGalgas_stringset * operand_6817 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_6817) ;
                if ((operand_6792 != NULL) && (operand_6817 != NULL)) {
                  var_cas_outResultType = var_cas_inLeftExpressionType ;
                }else{
                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "operand type error : ("))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (189))))._operator_concat (GGS_string (true, " | ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (190))))._operator_concat (GGS_string (true, ") is not valid")) COMMA_SOURCE_FILE_AT_LINE (191)) ;
                  var_cas_outResultType._drop () ;
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchOrOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchXorOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchXorOperator (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchXorOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_8314 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_8339 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_8314 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_8314) ;
    cPtr_typeGalgas_binaryset * operand_8339 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_8339) ;
    if ((operand_8314 != NULL) && (operand_8339 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_8314 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_8314) ;
      cPtr_typeGalgas_bool * operand_8339 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_8339) ;
      if ((operand_8314 != NULL) && (operand_8339 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_8314 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_8314) ;
        cPtr_typeGalgas_uint * operand_8339 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_8339) ;
        if ((operand_8314 != NULL) && (operand_8339 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_8314 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_8314) ;
          cPtr_typeGalgas_uint64 * operand_8339 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_8339) ;
          if ((operand_8314 != NULL) && (operand_8339 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint * operand_8314 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_8314) ;
            cPtr_typeGalgas_sint * operand_8339 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_8339) ;
            if ((operand_8314 != NULL) && (operand_8339 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint64 * operand_8314 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_8314) ;
              cPtr_typeGalgas_sint64 * operand_8339 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_8339) ;
              if ((operand_8314 != NULL) && (operand_8339 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "operand type error : ("))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (220))))._operator_concat (GGS_string (true, " | ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (221))))._operator_concat (GGS_string (true, ") is not valid")) COMMA_SOURCE_FILE_AT_LINE (222)) ;
                var_cas_outResultType._drop () ;
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchXorOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "matchConcatOperator"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchConcatOperator (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchConcatOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_9733 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_9758 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_string * operand_9733 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_9733) ;
    cPtr_typeGalgas_string * operand_9758 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_9758) ;
    if ((operand_9733 != NULL) && (operand_9758 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_string * operand_9733 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_9733) ;
      cPtr_typeGalgas_lstring * operand_9758 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_9758) ;
      if ((operand_9733 != NULL) && (operand_9758 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgasUndefinedListType * operand_9733 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_9733) ;
        cPtr_typeGalgasUndefinedListType * operand_9758 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_9758) ;
        if ((operand_9733 != NULL) && (operand_9758 != NULL)) {
          if (((operand_9733->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (243)))._operator_isNotEqual (operand_9758->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (243)))).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "concatenation operator error: lists should have the same type (here '@"))._operator_concat (operand_9733->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (245))))._operator_concat (GGS_string (true, "' is different from '@")))._operator_concat (operand_9758->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (245))))._operator_concat (GGS_string (true, "')")) COMMA_SOURCE_FILE_AT_LINE (245)) ;
          }
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgasListmapType * operand_9733 = dynamic_cast <cPtr_typeGalgasListmapType *> (ptr_9733) ;
          cPtr_typeGalgasListmapType * operand_9758 = dynamic_cast <cPtr_typeGalgasListmapType *> (ptr_9758) ;
          if ((operand_9733 != NULL) && (operand_9758 != NULL)) {
            if (((operand_9733->mListmapTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (249)))._operator_isNotEqual (operand_9758->mListmapTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (249)))).isBuiltAndTrue ()) {
              GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "concatenation operator error: listmaps should have the same type (here '@"))._operator_concat (operand_9733->mListmapTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (251))))._operator_concat (GGS_string (true, "' is different from '@")))._operator_concat (operand_9758->mListmapTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (251))))._operator_concat (GGS_string (true, "')")) COMMA_SOURCE_FILE_AT_LINE (251)) ;
            }
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "concatenation operator error: @"))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (255))))._operator_concat (GGS_string (true, " and @")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (256))))._operator_concat (GGS_string (true, " objects cannot be concatened")) COMMA_SOURCE_FILE_AT_LINE (257)) ;
            var_cas_outResultType._drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchConcatOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "checkNotOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkNotOperator (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkNotOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_typeGalgas_bool  var_cas_gb ;
  var_cas_gb = GGS_typeGalgas_bool::_castFrom (_inLexique, var_cas_inOperandType.getPtr (), true, GGS_location (_inLexique) COMMA_SOURCE_FILE_AT_LINE (271)) ;
  var_cas_outResultType = var_cas_inOperandType ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkNotOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "checkLogicalNegateOperator"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkLogicalNegateOperator (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkLogicalNegateOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_AC_galgasType _var_12650 = var_cas_inOperandType ; // CAST instruction
    if (_var_12650.getPtr () != NULL) {
      macroValidPointer (_var_12650.getPtr ()) ;
      if (dynamic_cast <cPtr_typeGalgas_binaryset *> (_var_12650.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_uint *> (_var_12650.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint *> (_var_12650.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_uint64 *> (_var_12650.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint64 *> (_var_12650.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else{
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the ~ operator is not defined for an "))._operator_concat (var_cas_inOperandType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (298))))._operator_concat (GGS_string (true, " object")) COMMA_SOURCE_FILE_AT_LINE (299)) ;
        var_cas_outResultType._drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkLogicalNegateOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "comparison_types_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_comparison_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_comparison_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_13212 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_13237 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_13212 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_13212) ;
    cPtr_typeGalgas_binaryset * operand_13237 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_13237) ;
    if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
    }else{
      cPtr_typeGalgas_stringset * operand_13212 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_13212) ;
      cPtr_typeGalgas_stringset * operand_13237 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_13237) ;
      if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
      }else{
        cPtr_typeGalgas_bool * operand_13212 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_13212) ;
        cPtr_typeGalgas_bool * operand_13237 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_13237) ;
        if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
        }else{
          cPtr_typeGalgas_char * operand_13212 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_13212) ;
          cPtr_typeGalgas_char * operand_13237 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_13237) ;
          if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
          }else{
            cPtr_typeGalgas_uint * operand_13212 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_13212) ;
            cPtr_typeGalgas_uint * operand_13237 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_13237) ;
            if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
            }else{
              cPtr_typeGalgas_sint * operand_13212 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_13212) ;
              cPtr_typeGalgas_sint * operand_13237 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_13237) ;
              if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
              }else{
                cPtr_typeGalgas_uint64 * operand_13212 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_13212) ;
                cPtr_typeGalgas_uint64 * operand_13237 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_13237) ;
                if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
                }else{
                  cPtr_typeGalgas_sint64 * operand_13212 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_13212) ;
                  cPtr_typeGalgas_sint64 * operand_13237 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_13237) ;
                  if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
                  }else{
                    cPtr_typeGalgas_double * operand_13212 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_13212) ;
                    cPtr_typeGalgas_double * operand_13237 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_13237) ;
                    if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
                    }else{
                      cPtr_typeGalgas_string * operand_13212 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_13212) ;
                      cPtr_typeGalgas_string * operand_13237 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_13237) ;
                      if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
                      }else{
                        cPtr_typeGalgas_lbool * operand_13212 = dynamic_cast <cPtr_typeGalgas_lbool *> (ptr_13212) ;
                        cPtr_typeGalgas_lbool * operand_13237 = dynamic_cast <cPtr_typeGalgas_lbool *> (ptr_13237) ;
                        if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
                        }else{
                          cPtr_typeGalgas_lchar * operand_13212 = dynamic_cast <cPtr_typeGalgas_lchar *> (ptr_13212) ;
                          cPtr_typeGalgas_lchar * operand_13237 = dynamic_cast <cPtr_typeGalgas_lchar *> (ptr_13237) ;
                          if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
                          }else{
                            cPtr_typeGalgas_luint * operand_13212 = dynamic_cast <cPtr_typeGalgas_luint *> (ptr_13212) ;
                            cPtr_typeGalgas_luint * operand_13237 = dynamic_cast <cPtr_typeGalgas_luint *> (ptr_13237) ;
                            if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
                            }else{
                              cPtr_typeGalgas_lsint * operand_13212 = dynamic_cast <cPtr_typeGalgas_lsint *> (ptr_13212) ;
                              cPtr_typeGalgas_lsint * operand_13237 = dynamic_cast <cPtr_typeGalgas_lsint *> (ptr_13237) ;
                              if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
                              }else{
                                cPtr_typeGalgas_luint64 * operand_13212 = dynamic_cast <cPtr_typeGalgas_luint64 *> (ptr_13212) ;
                                cPtr_typeGalgas_luint64 * operand_13237 = dynamic_cast <cPtr_typeGalgas_luint64 *> (ptr_13237) ;
                                if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
                                }else{
                                  cPtr_typeGalgas_lsint64 * operand_13212 = dynamic_cast <cPtr_typeGalgas_lsint64 *> (ptr_13212) ;
                                  cPtr_typeGalgas_lsint64 * operand_13237 = dynamic_cast <cPtr_typeGalgas_lsint64 *> (ptr_13237) ;
                                  if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
                                  }else{
                                    cPtr_typeGalgas_ldouble * operand_13212 = dynamic_cast <cPtr_typeGalgas_ldouble *> (ptr_13212) ;
                                    cPtr_typeGalgas_ldouble * operand_13237 = dynamic_cast <cPtr_typeGalgas_ldouble *> (ptr_13237) ;
                                    if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
                                    }else{
                                      cPtr_typeGalgas_lstring * operand_13212 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_13212) ;
                                      cPtr_typeGalgas_lstring * operand_13237 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_13237) ;
                                      if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
                                      }else{
                                        cPtr_typeGalgas_location * operand_13212 = dynamic_cast <cPtr_typeGalgas_location *> (ptr_13212) ;
                                        cPtr_typeGalgas_location * operand_13237 = dynamic_cast <cPtr_typeGalgas_location *> (ptr_13237) ;
                                        if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
                                        }else{
                                          cPtr_typeGalgas_filewrapper * operand_13212 = dynamic_cast <cPtr_typeGalgas_filewrapper *> (ptr_13212) ;
                                          cPtr_typeGalgas_filewrapper * operand_13237 = dynamic_cast <cPtr_typeGalgas_filewrapper *> (ptr_13237) ;
                                          if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
                                          }else{
                                            cPtr_typeGalgas_enum * operand_13212 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_13212) ;
                                            cPtr_typeGalgas_enum * operand_13237 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_13237) ;
                                            if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
                                              if (((operand_13212->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (335)))._operator_isNotEqual (operand_13237->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (335)))).isBuiltAndTrue ()) {
                                                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "comparison between an '@"))._operator_concat (operand_13212->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (336))))._operator_concat (GGS_string (true, "' enumeration and an '@")))._operator_concat (operand_13237->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (337))))._operator_concat (GGS_string (true, "' enumeration is not valid")) COMMA_SOURCE_FILE_AT_LINE (337)) ;
                                              }
                                            }else{
                                              cPtr_typeGalgasUndefinedListType * operand_13212 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_13212) ;
                                              cPtr_typeGalgasUndefinedListType * operand_13237 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_13237) ;
                                              if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
                                                if (((operand_13212->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (340)))._operator_isNotEqual (operand_13237->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (340)))).isBuiltAndTrue ()) {
                                                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "I was expecting the list type '@"))._operator_concat (operand_13212->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (341))))._operator_concat (GGS_string (true, "', I have got the list type '@")))._operator_concat (operand_13237->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (342))))._operator_concat (GGS_string (true, "\"")) COMMA_SOURCE_FILE_AT_LINE (342)) ;
                                                }
                                              }else{
                                                cPtr_typeGalgasUndefinedMapType * operand_13212 = dynamic_cast <cPtr_typeGalgasUndefinedMapType *> (ptr_13212) ;
                                                cPtr_typeGalgasUndefinedMapType * operand_13237 = dynamic_cast <cPtr_typeGalgasUndefinedMapType *> (ptr_13237) ;
                                                if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
                                                  if (((operand_13212->mMapTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (346)))._operator_isNotEqual (operand_13237->mMapTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (346)))).isBuiltAndTrue ()) {
                                                    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "I was expecting the map type '@"))._operator_concat (operand_13212->mMapTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (347))))._operator_concat (GGS_string (true, "', I have got the map type '@")))._operator_concat (operand_13237->mMapTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (348))))._operator_concat (GGS_string (true, "\"")) COMMA_SOURCE_FILE_AT_LINE (348)) ;
                                                  }
                                                }else{
                                                  cPtr_typeGalgasUndefinedClassType * operand_13212 = dynamic_cast <cPtr_typeGalgasUndefinedClassType *> (ptr_13212) ;
                                                  cPtr_typeGalgasUndefinedClassType * operand_13237 = dynamic_cast <cPtr_typeGalgasUndefinedClassType *> (ptr_13237) ;
                                                  if ((operand_13212 != NULL) && (operand_13237 != NULL)) {
                                                    if (((operand_13212->mClassTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (353)))._operator_isNotEqual (operand_13237->mClassTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (353)))).isBuiltAndTrue ()) {
                                                      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "I was expecting the class type '@"))._operator_concat (operand_13212->mClassTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (354))))._operator_concat (GGS_string (true, "', I have got the class type '@")))._operator_concat (operand_13237->mClassTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (355))))._operator_concat (GGS_string (true, "\"")) COMMA_SOURCE_FILE_AT_LINE (355)) ;
                                                    }
                                                  }else{
                                                    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "comparison between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (358))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (359))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (359)) ;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_comparison_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "magnitude_comparison_types_check"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_magnitude_comparison_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_magnitude_comparison_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_16582 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_16607 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_stringset * operand_16582 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_16582) ;
    cPtr_typeGalgas_stringset * operand_16607 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_16607) ;
    if ((operand_16582 != NULL) && (operand_16607 != NULL)) {
    }else{
      cPtr_typeGalgas_bool * operand_16582 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_16582) ;
      cPtr_typeGalgas_bool * operand_16607 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_16607) ;
      if ((operand_16582 != NULL) && (operand_16607 != NULL)) {
      }else{
        cPtr_typeGalgas_char * operand_16582 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_16582) ;
        cPtr_typeGalgas_char * operand_16607 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_16607) ;
        if ((operand_16582 != NULL) && (operand_16607 != NULL)) {
        }else{
          cPtr_typeGalgas_uint * operand_16582 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_16582) ;
          cPtr_typeGalgas_uint * operand_16607 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_16607) ;
          if ((operand_16582 != NULL) && (operand_16607 != NULL)) {
          }else{
            cPtr_typeGalgas_sint * operand_16582 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_16582) ;
            cPtr_typeGalgas_sint * operand_16607 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_16607) ;
            if ((operand_16582 != NULL) && (operand_16607 != NULL)) {
            }else{
              cPtr_typeGalgas_uint64 * operand_16582 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_16582) ;
              cPtr_typeGalgas_uint64 * operand_16607 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_16607) ;
              if ((operand_16582 != NULL) && (operand_16607 != NULL)) {
              }else{
                cPtr_typeGalgas_sint64 * operand_16582 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_16582) ;
                cPtr_typeGalgas_sint64 * operand_16607 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_16607) ;
                if ((operand_16582 != NULL) && (operand_16607 != NULL)) {
                }else{
                  cPtr_typeGalgas_double * operand_16582 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_16582) ;
                  cPtr_typeGalgas_double * operand_16607 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_16607) ;
                  if ((operand_16582 != NULL) && (operand_16607 != NULL)) {
                  }else{
                    cPtr_typeGalgas_string * operand_16582 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_16582) ;
                    cPtr_typeGalgas_string * operand_16607 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_16607) ;
                    if ((operand_16582 != NULL) && (operand_16607 != NULL)) {
                    }else{
                      cPtr_typeGalgas_enum * operand_16582 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_16582) ;
                      cPtr_typeGalgas_enum * operand_16607 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_16607) ;
                      if ((operand_16582 != NULL) && (operand_16607 != NULL)) {
                        if (((operand_16582->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (384)))._operator_isNotEqual (operand_16607->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (384)))).isBuiltAndTrue ()) {
                          GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "comparison between an '@"))._operator_concat (operand_16582->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (385))))._operator_concat (GGS_string (true, "' enumeration and an '@")))._operator_concat (operand_16607->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (386))))._operator_concat (GGS_string (true, "' enumeration is not valid")) COMMA_SOURCE_FILE_AT_LINE (386)) ;
                        }
                      }else{
                        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "comparison between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (389))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (390))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (390)) ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_magnitude_comparison_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "left_shift_types_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_left_shift_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_left_shift_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_18240 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_18265 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_18240 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_18240) ;
    cPtr_typeGalgas_uint * operand_18265 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18265) ;
    if ((operand_18240 != NULL) && (operand_18265 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_uint * operand_18240 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18240) ;
      cPtr_typeGalgas_uint * operand_18265 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18265) ;
      if ((operand_18240 != NULL) && (operand_18265 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_sint * operand_18240 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_18240) ;
        cPtr_typeGalgas_uint * operand_18265 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18265) ;
        if ((operand_18240 != NULL) && (operand_18265 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_18240 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_18240) ;
          cPtr_typeGalgas_uint * operand_18265 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18265) ;
          if ((operand_18240 != NULL) && (operand_18265 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint64 * operand_18240 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_18240) ;
            cPtr_typeGalgas_uint * operand_18265 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18265) ;
            if ((operand_18240 != NULL) && (operand_18265 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "shift between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (417))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (418))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (420)) ;
              var_cas_outResultType._drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_left_shift_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "right_shift_types_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_right_shift_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_right_shift_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_19246 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_19271 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_19246 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_19246) ;
    cPtr_typeGalgas_uint * operand_19271 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19271) ;
    if ((operand_19246 != NULL) && (operand_19271 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_uint * operand_19246 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19246) ;
      cPtr_typeGalgas_uint * operand_19271 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19271) ;
      if ((operand_19246 != NULL) && (operand_19271 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_sint * operand_19246 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_19246) ;
        cPtr_typeGalgas_uint * operand_19271 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19271) ;
        if ((operand_19246 != NULL) && (operand_19271 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_19246 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_19246) ;
          cPtr_typeGalgas_uint * operand_19271 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19271) ;
          if ((operand_19246 != NULL) && (operand_19271 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint64 * operand_19246 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_19246) ;
            cPtr_typeGalgas_uint * operand_19271 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19271) ;
            if ((operand_19246 != NULL) && (operand_19271 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "shift between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (443))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (444))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (446)) ;
              var_cas_outResultType._drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_right_shift_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "addition_types_check"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addition_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addition_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_20561 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_20586 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_20561 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_20561) ;
    cPtr_typeGalgas_uint * operand_20586 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_20586) ;
    if ((operand_20561 != NULL) && (operand_20586 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_20561 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_20561) ;
      cPtr_typeGalgas_sint * operand_20586 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_20586) ;
      if ((operand_20561 != NULL) && (operand_20586 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_20561 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_20561) ;
        cPtr_typeGalgas_uint64 * operand_20586 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_20586) ;
        if ((operand_20561 != NULL) && (operand_20586 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_20561 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_20561) ;
          cPtr_typeGalgas_sint64 * operand_20586 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_20586) ;
          if ((operand_20561 != NULL) && (operand_20586 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "addition between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (471))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (472))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (474)) ;
            var_cas_outResultType._drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addition_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "substraction_types_check"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_substraction_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_substraction_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_21786 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_21811 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_21786 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_21786) ;
    cPtr_typeGalgas_uint * operand_21811 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_21811) ;
    if ((operand_21786 != NULL) && (operand_21811 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_21786 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_21786) ;
      cPtr_typeGalgas_sint * operand_21811 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_21811) ;
      if ((operand_21786 != NULL) && (operand_21811 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_21786 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_21786) ;
        cPtr_typeGalgas_uint64 * operand_21811 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_21811) ;
        if ((operand_21786 != NULL) && (operand_21811 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_21786 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_21786) ;
          cPtr_typeGalgas_sint64 * operand_21811 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_21811) ;
          if ((operand_21786 != NULL) && (operand_21811 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_stringset * operand_21786 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_21786) ;
            cPtr_typeGalgas_stringset * operand_21811 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_21811) ;
            if ((operand_21786 != NULL) && (operand_21811 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "substraction between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (501))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (502))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (504)) ;
              var_cas_outResultType._drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_substraction_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "multiply_types_check"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_multiply_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_multiply_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_23117 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_23142 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_23117 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_23117) ;
    cPtr_typeGalgas_uint * operand_23142 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_23142) ;
    if ((operand_23117 != NULL) && (operand_23142 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_23117 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_23117) ;
      cPtr_typeGalgas_sint * operand_23142 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_23142) ;
      if ((operand_23117 != NULL) && (operand_23142 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_23117 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_23117) ;
        cPtr_typeGalgas_uint64 * operand_23142 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_23142) ;
        if ((operand_23117 != NULL) && (operand_23142 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_23117 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_23117) ;
          cPtr_typeGalgas_sint64 * operand_23142 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_23142) ;
          if ((operand_23117 != NULL) && (operand_23142 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "multiplication between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (529))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (530))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (532)) ;
            var_cas_outResultType._drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_multiply_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "divide_types_check"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_divide_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_divide_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_24342 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_24367 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_24342 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_24342) ;
    cPtr_typeGalgas_uint * operand_24367 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_24367) ;
    if ((operand_24342 != NULL) && (operand_24367 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_24342 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_24342) ;
      cPtr_typeGalgas_sint * operand_24367 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_24367) ;
      if ((operand_24342 != NULL) && (operand_24367 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_24342 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_24342) ;
        cPtr_typeGalgas_uint64 * operand_24367 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_24367) ;
        if ((operand_24342 != NULL) && (operand_24367 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_24342 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_24342) ;
          cPtr_typeGalgas_sint64 * operand_24367 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_24367) ;
          if ((operand_24342 != NULL) && (operand_24367 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "division between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (557))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (558))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (560)) ;
            var_cas_outResultType._drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_divide_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "modulo_types_check"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_modulo_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_modulo_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_25561 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_25586 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_25561 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_25561) ;
    cPtr_typeGalgas_uint * operand_25586 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_25586) ;
    if ((operand_25561 != NULL) && (operand_25586 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_25561 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_25561) ;
      cPtr_typeGalgas_sint * operand_25586 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_25586) ;
      if ((operand_25561 != NULL) && (operand_25586 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_25561 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_25561) ;
        cPtr_typeGalgas_uint64 * operand_25586 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_25586) ;
        if ((operand_25561 != NULL) && (operand_25586 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_25561 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_25561) ;
          cPtr_typeGalgas_sint64 * operand_25586 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_25586) ;
          if ((operand_25561 != NULL) && (operand_25586 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "modulo between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (585))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (586))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (588)) ;
            var_cas_outResultType._drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_modulo_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "unary_minus_type_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_unary_minus_type_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_unary_minus_type_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_AC_galgasType _var_27011 = var_cas_inExpressionType ; // CAST instruction
    if (_var_27011.getPtr () != NULL) {
      macroValidPointer (_var_27011.getPtr ()) ;
      if (dynamic_cast <cPtr_typeGalgas_sint *> (_var_27011.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inExpressionType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint64 *> (_var_27011.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inExpressionType ;
      }else{
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "unary minus for "))._operator_concat (var_cas_inExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (608))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (611)) ;
        var_cas_outResultType._drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_unary_minus_type_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_expression_expression_parser_621_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_concatenation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_expression_parser_0 (_inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_concatenation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeConcatOperation ::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchConcatOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (653)) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_expression_expression_parser_621_4_parse (galgas_scanner & _inLexique) {
  nt_concatenation_term_parse (_inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_expression_parser_0 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          nt_concatenation_term_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'concatenation_term'           *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_concatenation_term_expression_parser_668_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_expression_parser_1 (_inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7C) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeOrOperation ::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchOrOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (700)) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5E) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeXorOperation ::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchXorOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (721)) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_concatenation_term_expression_parser_668_4_parse (galgas_scanner & _inLexique) {
  nt_relation_term_parse (_inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_expression_parser_1 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7C) COMMA_HERE) ;
          nt_relation_term_parse (_inLexique) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5E) COMMA_HERE) ;
          nt_relation_term_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'relation_term'              *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_relation_term_expression_parser_736_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_expression_parser_2 (_inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__26) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeAndOperation ::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchAndOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (768)) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_relation_term_expression_parser_736_4_parse (galgas_scanner & _inLexique) {
  nt_relation_factor_parse (_inLexique) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_expression_parser_2 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__26) COMMA_HERE) ;
          nt_relation_factor_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'relation_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_relation_factor_expression_parser_783_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  switch (select_expression_parser_3 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D_3D) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (813)) ;
      var_cas_outExpression = GGS_typeEqualTest ::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_3D) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (831)) ;
      var_cas_outExpression = GGS_typeNonEqualTest ::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 4 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_3D) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (849)) ;
      var_cas_outExpression = GGS_typeInfOrEqualTest ::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 5 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_3D) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (867)) ;
      var_cas_outExpression = GGS_typeSupOrEqualTest ::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 6 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (885)) ;
      var_cas_outExpression = GGS_typeStrictSupTest ::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 7 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (903)) ;
      var_cas_outExpression = GGS_typeStrictInfTest ::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_relation_factor_expression_parser_783_4_parse (galgas_scanner & _inLexique) {
  nt_simple_expression_parse (_inLexique) ;
  switch (select_expression_parser_3 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D_3D) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_3D) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 4 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_3D) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 5 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_3D) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 6 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 7 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'simple_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_simple_expression_expression_parser_916_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_repeat_expression_parser_4 (_inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_3C) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_left_shift_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (947)) ;
          var_cas_outExpression = GGS_typeLeftShiftOperation ::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_3E) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_right_shift_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (964)) ;
          var_cas_outExpression = GGS_typeRightShiftOperation ::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_addition_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (981)) ;
          var_cas_outExpression = GGS_typeAddOperation ::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 5 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_substraction_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (998)) ;
          var_cas_outExpression = GGS_typeSubOperation ::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_simple_expression_expression_parser_916_4_parse (galgas_scanner & _inLexique) {
  nt_term_parse (_inLexique) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_repeat_expression_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_3C) COMMA_HERE) ;
          nt_term_parse (_inLexique) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_3E) COMMA_HERE) ;
          nt_term_parse (_inLexique) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B) COMMA_HERE) ;
          nt_term_parse (_inLexique) ;
          } break ;
        case 5 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D) COMMA_HERE) ;
          nt_term_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'term'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_term_expression_parser_1010_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_repeat_expression_parser_5 (_inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_multiply_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1041)) ;
          var_cas_outExpression = GGS_typeMultiplyOperation ::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2F) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_divide_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1058)) ;
          var_cas_outExpression = GGS_typeDivideOperation ::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_mod) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_modulo_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1075)) ;
          var_cas_outExpression = GGS_typeModuloOperation ::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_term_expression_parser_1010_4_parse (galgas_scanner & _inLexique) {
  nt_factor_parse (_inLexique) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_repeat_expression_parser_5 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
          nt_factor_parse (_inLexique) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2F) COMMA_HERE) ;
          nt_factor_parse (_inLexique) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_mod) COMMA_HERE) ;
          nt_factor_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1087_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation ;
  var_cas_operatorLocation = GGS_location (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D) COMMA_HERE) ;
  GGS_typeExpression  var_cas_expression ;
  GGS_AC_galgasType  var_cas_type ;
  nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expression, var_cas_type) ;
  ::routine_unary_minus_type_check (_inLexique,  var_cas_type,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1106)) ;
  var_cas_outExpression = GGS_typeUnaryMinusOperation ::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_expression COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1087_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D) COMMA_HERE) ;
  nt_factor_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1117_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_typeCplusPlusName  var_cas_nomCppEntite1 ;
  GGS_lstring  automatic_var_0 ;
  nt_read_access_ (_inLexique, automatic_var_0, var_cas_nomCppEntite1, var_cas_outResultType, var_cas_ioVariablesMap) ;
  var_cas_outExpression = GGS_typeVarInExpression ::constructor_new (_inLexique, var_cas_nomCppEntite1, GGS_lstringlist ::constructor_emptyList () COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1117_4_parse (galgas_scanner & _inLexique) {
  nt_read_access_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1138_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  switch (select_expression_parser_6 (_inLexique)) {
    case 1 : {
      nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_cast) COMMA_HERE) ;
      GGS_typeExpression  var_cas_castedExpression ;
      GGS_AC_galgasType  var_cas_castExpressionType ;
      nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_castedExpression, var_cas_castExpressionType) ;
      GGS_lstring  var_cas_kSourceExpresionClassName ;
      var_cas_kSourceExpresionClassName = GGS_typeGalgasClassType::_castFrom (_inLexique, var_cas_castExpressionType.getPtr (), true, GGS_location (_inLexique) COMMA_SOURCE_FILE_AT_LINE (1169)).reader_mClassTypeName (_inLexique COMMA_SOURCE_FILE_AT_LINE (1169)) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
      GGS_bool var_cas_checkForKindOfClass ;
      switch (select_expression_parser_7 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_3D) COMMA_HERE) ;
          var_cas_checkForKindOfClass = GGS_bool (true, true) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D_3D) COMMA_HERE) ;
          var_cas_checkForKindOfClass = GGS_bool (true, false) ;
          } break ;
        default :
          break ;
      }
      GGS_lstring  var_cas_castedTypeName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_castedTypeName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite ;
      const GGS_M_semanticsEntitiesForUse  _temp_45920 = var_cas_ioEntitiesMap ;
      if (_temp_45920._isBuilt ()) {
        _temp_45920 (HERE)->method_searchKey (_inLexique, var_cas_castedTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1184)) ;
      }
      var_cas_outResultType = GGS_typeEntiteType::_castFrom (_inLexique, var_cas_entite.getPtr (), true, var_cas_castedTypeName COMMA_SOURCE_FILE_AT_LINE (1185)).reader_aDefType (_inLexique COMMA_SOURCE_FILE_AT_LINE (1185)) ;
      GGS_typeGalgasClassType  var_cas_resultClassType ;
      var_cas_resultClassType = GGS_typeGalgasClassType::_castFrom (_inLexique, var_cas_outResultType.getPtr (), true, var_cas_castedTypeName COMMA_SOURCE_FILE_AT_LINE (1187)) ;
      GGS_typeSuperClassesMap  var_cas_superClassMap ;
      var_cas_superClassMap = var_cas_resultClassType.reader_mAncestorClassesMap (_inLexique COMMA_SOURCE_FILE_AT_LINE (1188)) ;
      GGS_string var_cas_classMessage ;
      var_cas_classMessage = var_cas_resultClassType.reader_mClassMessage (_inLexique COMMA_SOURCE_FILE_AT_LINE (1189)) ;
      if (((var_cas_classMessage.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1191)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_castedTypeName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "in order to be used in a cast expression, the '@"))._operator_concat (var_cas_castedTypeName))._operator_concat (GGS_string (true, "' class should define a class message")) COMMA_SOURCE_FILE_AT_LINE (1192)) ;
      }
      GGS_string var_cas_sourceExpressionTypeNameString ;
      var_cas_sourceExpressionTypeNameString = var_cas_kSourceExpresionClassName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1195)) ;
      if (((var_cas_checkForKindOfClass)._operator_not ()).isBuiltAndTrue ()) {
        if ((((var_cas_castedTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1197)))._operator_isNotEqual (var_cas_sourceExpressionTypeNameString))._operator_and ((var_cas_superClassMap.reader_hasKey (_inLexique, var_cas_sourceExpressionTypeNameString COMMA_SOURCE_FILE_AT_LINE (1197)))._operator_not ())).isBuiltAndTrue ()) {
          var_cas_castedTypeName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "This class is not '@"))._operator_concat (var_cas_sourceExpressionTypeNameString))._operator_concat (GGS_string (true, "' and does inherit from it")) COMMA_SOURCE_FILE_AT_LINE (1198)) ;
        }
      }else if (((var_cas_superClassMap.reader_hasKey (_inLexique, var_cas_sourceExpressionTypeNameString COMMA_SOURCE_FILE_AT_LINE (1200)))._operator_not ()).isBuiltAndTrue ()) {
        var_cas_castedTypeName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "This class does not inherit from '@"))._operator_concat (var_cas_sourceExpressionTypeNameString))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (1201)) ;
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
      GGS_typeExpression  var_cas_errorLocationExpression ;
      GGS_AC_galgasType  var_cas_errorLocationExpressionType ;
      nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_errorLocationExpression, var_cas_errorLocationExpressionType) ;
      const GGS_AC_galgasType  _temp_47654 = var_cas_errorLocationExpressionType ;
      if (_temp_47654._isBuilt ()) {
        _temp_47654 (HERE)->method_checkAbilityToBeSilentlyConvertedToLocation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1216)) ;
      }
      var_cas_outExpression = GGS_typeCastInExpression ::constructor_new (_inLexique, var_cas_castedExpression, var_cas_checkForKindOfClass, var_cas_castedTypeName, var_cas_errorLocationExpression COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1138_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  switch (select_expression_parser_6 (_inLexique)) {
    case 1 : {
      nt_expression_parse (_inLexique) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_cast) COMMA_HERE) ;
      nt_expression_parse (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
      switch (select_expression_parser_7 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_3D) COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D_3D) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
      nt_expression_parse (_inLexique) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1234_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation ;
  var_cas_operatorLocation = GGS_location (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_not) COMMA_HERE) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeTestComplement ::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_ifCondition COMMA_HERE) ;
  ::routine_checkNotOperator (_inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1254)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1234_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_not) COMMA_HERE) ;
  nt_factor_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1264_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation ;
  var_cas_operatorLocation = GGS_location (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7E) COMMA_HERE) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeLogicalNegate ::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_ifCondition COMMA_HERE) ;
  ::routine_checkLogicalNegateOperator (_inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1284)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1264_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7E) COMMA_HERE) ;
  nt_factor_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1294_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_true) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeTrueBool ::constructor_new (_inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1294_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_true) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1313_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_false) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeFalseBool ::constructor_new (_inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1313_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_false) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1332_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_stringlist  var_cas_literalStringList ;
  var_cas_literalStringList = GGS_stringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
        GGS_lstring  var_cas_literalString ;
        _inLexique._assignFromAttribute_tokenString (var_cas_literalString) ;
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
        var_cas_literalStringList._addAssign_operation (var_cas_literalString.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1344))) ;
      switch (select_repeat_expression_parser_8 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
  var_cas_outExpression = GGS_typeLiteralStringExpression ::constructor_new (_inLexique, var_cas_literalStringList COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1332_4_parse (galgas_scanner & _inLexique) {
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      switch (select_repeat_expression_parser_8 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1357_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint  var_cas_literalInt ;
  _inLexique._assignFromAttribute_uint32value (var_cas_literalInt) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralUIntExpression ::constructor_new (_inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_uint ::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1357_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1377_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint  var_cas_literalInt ;
  _inLexique._assignFromAttribute_sint32value (var_cas_literalInt) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralSIntExpression ::constructor_new (_inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_sint ::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1377_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1397_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint64  var_cas_literalInt ;
  _inLexique._assignFromAttribute_uint64value (var_cas_literalInt) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger64) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralUInt64Expression ::constructor_new (_inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_uint64 ::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1397_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger64) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1417_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint64  var_cas_literalInt ;
  _inLexique._assignFromAttribute_sint64value (var_cas_literalInt) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger64) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralSInt64Expression ::constructor_new (_inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_sint64 ::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1417_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger64) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1437_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lchar  var_cas_literalChar ;
  _inLexique._assignFromAttribute_charValue (var_cas_literalChar) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fchar) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralCharExpression ::constructor_new (_inLexique, var_cas_literalChar COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_char ::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1437_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fchar) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1457_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_ldouble  var_cas_literalDouble ;
  _inLexique._assignFromAttribute_floatValue (var_cas_literalDouble) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fdouble) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralDoubleExpression ::constructor_new (_inLexique, var_cas_literalDouble COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_double ::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1457_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fdouble) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1477_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_here) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeHereExpression ::constructor_new (_inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_location ::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1477_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_here) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1502_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B) COMMA_HERE) ;
  switch (select_expression_parser_9 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_filewrapper) COMMA_HERE) ;
      GGS_lstring  var_cas_filewrapperName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_filewrapperName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_M_regularFiles  var_cas_regularFileMap ;
      GGS_filewrapperTemplateMap  var_cas_templateMap ;
      const GGS_M_filewrappers  _temp_60180 = var_cas_inSemanticContext.reader_mFilewrappers (_inLexique COMMA_SOURCE_FILE_AT_LINE (1519)) ;
      if (_temp_60180._isBuilt ()) {
        _temp_60180 (HERE)->method_searchKey (_inLexique, var_cas_filewrapperName, var_cas_regularFileMap, var_cas_templateMap COMMA_SOURCE_FILE_AT_LINE (1519)) ;
      }
      switch (select_expression_parser_10 (_inLexique)) {
        case 1 : {
          var_cas_outExpression = GGS_typeFileWrapperObjectInstanciation ::constructor_new (_inLexique, var_cas_filewrapperName COMMA_HERE) ;
          var_cas_outResultType = GGS_typeGalgas_filewrapper ::constructor_new (_inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          switch (select_expression_parser_11 (_inLexique)) {
            case 1 : {
              GGS_lstring  var_cas_templateName ;
              _inLexique._assignFromAttribute_tokenString (var_cas_templateName) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeListeAttributsSemantiques  var_cas_formalAttributeList ;
              const GGS_filewrapperTemplateMap  _temp_60612 = var_cas_templateMap ;
              if (_temp_60612._isBuilt ()) {
                _temp_60612 (HERE)->method_searchKey (_inLexique, var_cas_templateName, var_cas_formalAttributeList COMMA_SOURCE_FILE_AT_LINE (1531)) ;
              }
              GGS_typeExpressionList  var_cas_expressionList ;
              nt_output_expression_list_ (_inLexique, var_cas_expressionList, var_cas_formalAttributeList, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap) ;
              var_cas_outExpression = GGS_typeFileWrapperTemplateCall ::constructor_new (_inLexique, var_cas_filewrapperName, var_cas_templateName, var_cas_expressionList COMMA_HERE) ;
              var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (_inLexique COMMA_HERE) ;
              } break ;
            case 2 : {
              GGS_lstring  var_cas_path ;
              _inLexique._assignFromAttribute_tokenString (var_cas_path) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
              GGS_uint  var_cas_wrapperFileIndex ;
              GGS_uint  automatic_var_1 ;
              const GGS_M_regularFiles  _temp_61284 = var_cas_regularFileMap ;
              if (_temp_61284._isBuilt ()) {
                _temp_61284 (HERE)->method_searchKey (_inLexique, var_cas_path, automatic_var_1, var_cas_wrapperFileIndex COMMA_SOURCE_FILE_AT_LINE (1551)) ;
              }
              var_cas_outExpression = GGS_typeFileWrapperWithStaticPath ::constructor_new (_inLexique, var_cas_filewrapperName, var_cas_wrapperFileIndex COMMA_HERE) ;
              var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (_inLexique COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      GGS_typeExpression  var_cas_expressionValue ;
      GGS_AC_galgasType  var_cas_expressionType ;
      nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expressionValue, var_cas_expressionType) ;
      switch (select_expression_parser_12 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_description) COMMA_HERE) ;
          var_cas_outExpression = GGS_typeDescriptionInExpression ::constructor_new (_inLexique, var_cas_expressionValue, GGS_location (_inLexique) COMMA_HERE) ;
          var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (_inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          GGS_lstring  var_cas_methodName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_methodName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_typeListeAttributsSemantiques  var_cas_accessorsTypeList ;
          GGS_string var_cas_conversionMethod ;
          ::routine_handleReaderCall (_inLexique,  var_cas_expressionType,  var_cas_methodName,  var_cas_accessorsTypeList,  var_cas_outResultType,  var_cas_conversionMethod COMMA_SOURCE_FILE_AT_LINE (1578)) ;
          GGS_typeExpressionList  var_cas_expressionList ;
          nt_output_expression_list_ (_inLexique, var_cas_expressionList, var_cas_accessorsTypeList, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap) ;
          var_cas_outExpression = GGS_typeReaderCallInExpression ::constructor_new (_inLexique, var_cas_expressionValue, var_cas_methodName, var_cas_expressionList, var_cas_conversionMethod COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 3 : {
      GGS_lstring  var_cas_className ;
      _inLexique._assignFromAttribute_tokenString (var_cas_className) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      GGS_lstring  var_cas_mClassMethodName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_mClassMethodName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_e ;
      const GGS_M_semanticsEntitiesForUse  _temp_62951 = var_cas_ioEntitiesMap ;
      if (_temp_62951._isBuilt ()) {
        _temp_62951 (HERE)->method_searchKey (_inLexique, var_cas_className, var_cas_e COMMA_SOURCE_FILE_AT_LINE (1600)) ;
      }
      var_cas_outResultType = GGS_typeEntiteType::_castFrom (_inLexique, var_cas_e.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (1601)).reader_aDefType (_inLexique COMMA_SOURCE_FILE_AT_LINE (1601)) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques ;
      GGS_bool var_cas_hasLexiqueAndLocationArguments ;
      const GGS_AC_galgasType  _temp_63189 = var_cas_outResultType ;
      if (_temp_63189._isBuilt ()) {
        _temp_63189 (HERE)->method_handleConstructorCall (_inLexique, var_cas_mClassMethodName, var_cas_listeAttributsSemantiques, var_cas_hasLexiqueAndLocationArguments COMMA_SOURCE_FILE_AT_LINE (1604)) ;
      }
      GGS_typeExpressionList  var_cas_expressionList ;
      nt_output_expression_list_ (_inLexique, var_cas_expressionList, var_cas_listeAttributsSemantiques, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap) ;
      var_cas_outExpression = GGS_typeConstructorExpression ::constructor_new (_inLexique, var_cas_outResultType, var_cas_mClassMethodName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1617)), var_cas_hasLexiqueAndLocationArguments, var_cas_expressionList COMMA_HERE) ;
      } break ;
    case 4 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
      switch (select_expression_parser_13 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          GGS_lstring  var_cas_optionName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_optionName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          if (((var_cas_optionName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1627)))._operator_isNotEqual (GGS_string (true, "verbose_output"))).isBuiltAndTrue ()) {
            var_cas_optionName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "this option name does not correspond to a builtin option") COMMA_SOURCE_FILE_AT_LINE (1628)) ;
          }
          var_cas_outExpression = GGS_typeBoolOption ::constructor_new (_inLexique, GGS_string (true, "generic_galgas_cli_options"), var_cas_optionName COMMA_HERE) ;
          var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (_inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          GGS_lstring  var_cas_optionComponentName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_optionComponentName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_M_cli_options  var_cas_boolOptionsMap ;
          GGS_M_cli_options  var_cas_uintOptionsMap ;
          GGS_M_cli_options  var_cas_stringOptionsMap ;
          const GGS_M_optionComponents  _temp_64366 = var_cas_inOptionsComponentsMapForUse ;
          if (_temp_64366._isBuilt ()) {
            _temp_64366 (HERE)->method_searchKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (1638)) ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          GGS_lstring  var_cas_optionName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_optionName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          if ((var_cas_boolOptionsMap.reader_hasKey (_inLexique, var_cas_optionName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1642)) COMMA_SOURCE_FILE_AT_LINE (1642))).isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_typeBoolOption ::constructor_new (_inLexique, var_cas_optionComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1643)), var_cas_optionName COMMA_HERE) ;
            var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (_inLexique COMMA_HERE) ;
          }else if ((var_cas_uintOptionsMap.reader_hasKey (_inLexique, var_cas_optionName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1645)) COMMA_SOURCE_FILE_AT_LINE (1645))).isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_typeUIntOption ::constructor_new (_inLexique, var_cas_optionComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1646)), var_cas_optionName COMMA_HERE) ;
            var_cas_outResultType = GGS_typeGalgas_uint ::constructor_new (_inLexique COMMA_HERE) ;
          }else if ((var_cas_stringOptionsMap.reader_hasKey (_inLexique, var_cas_optionName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1648)) COMMA_SOURCE_FILE_AT_LINE (1648))).isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_typeStringOption ::constructor_new (_inLexique, var_cas_optionComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1649)), var_cas_optionName COMMA_HERE) ;
            var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (_inLexique COMMA_HERE) ;
          }else{
            var_cas_optionName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the '"))._operator_concat (var_cas_optionComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1652))))._operator_concat (GGS_string (true, "' option component has no '")))._operator_concat (var_cas_optionName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1652))))._operator_concat (GGS_string (true, "' option")) COMMA_SOURCE_FILE_AT_LINE (1653)) ;
            var_cas_outExpression._drop () ;
            var_cas_outResultType._drop () ;
          }
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1502_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B) COMMA_HERE) ;
  switch (select_expression_parser_9 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_filewrapper) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      switch (select_expression_parser_10 (_inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          switch (select_expression_parser_11 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              nt_output_expression_list_parse (_inLexique) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      nt_expression_parse (_inLexique) ;
      switch (select_expression_parser_12 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_description) COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          nt_output_expression_list_parse (_inLexique) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      nt_output_expression_list_parse (_inLexique) ;
      } break ;
    case 4 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
      switch (select_expression_parser_13 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'read_access'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_read_access_expression_parser_1666_4_ (galgas_scanner & _inLexique,
                                GGS_lstring  &var_cas_nomVariable,
                                GGS_typeCplusPlusName  &var_cas_nomCppEntite,
                                GGS_AC_galgasType  &var_cas_typeEntite,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  _inLexique._assignFromAttribute_tokenString (var_cas_nomVariable) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  var_cas_ioVariablesMap.modifier_searchForReadOnlyAccess (_inLexique, var_cas_nomVariable, var_cas_typeEntite, var_cas_nomCppEntite COMMA_SOURCE_FILE_AT_LINE (1673)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_read_access_expression_parser_1666_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'read_access'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_read_access_expression_parser_1682_4_ (galgas_scanner & _inLexique,
                                GGS_lstring  &var_cas_nomVariable,
                                GGS_typeCplusPlusName  &var_cas_nomCppEntite,
                                GGS_AC_galgasType  &var_cas_typeEntite,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_self) COMMA_HERE) ;
  if ((var_cas_ioVariablesMap.reader_hasKey (_inLexique, GGS_string (true, "self") COMMA_SOURCE_FILE_AT_LINE (1689))).isBuiltAndTrue ()) {
    var_cas_nomVariable = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "self"), GGS_location (_inLexique) COMMA_HERE) ;
    var_cas_ioVariablesMap.modifier_searchForReadOnlyAccess (_inLexique, var_cas_nomVariable, var_cas_typeEntite, var_cas_nomCppEntite COMMA_SOURCE_FILE_AT_LINE (1691)) ;
  }else{
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "'self' is not defined in this context") COMMA_SOURCE_FILE_AT_LINE (1694)) ;
    var_cas_nomVariable._drop () ;
    var_cas_nomCppEntite._drop () ;
    var_cas_typeEntite._drop () ;
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_read_access_expression_parser_1682_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_self) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'output_expression_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_output_expression_list_expression_parser_1704_4_ (galgas_scanner & _inLexique,
                                GGS_typeExpressionList  &var_cas_outExpressionList,
                                const GGS_typeListeAttributsSemantiques  var_cas_inFormalAttributesList,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  GGS_typeTypesList  var_cas_effectiveTypesList ;
  var_cas_effectiveTypesList = GGS_typeTypesList ::constructor_emptyList () ;
  var_cas_outExpressionList = GGS_typeExpressionList ::constructor_emptyList () ;
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
      switch (select_repeat_expression_parser_14 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21) COMMA_HERE) ;
          GGS_typeExpression  var_cas_expression ;
          GGS_AC_galgasType  var_cas_resultType ;
          nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expression, var_cas_resultType) ;
          GGS_location  var_cas_errorLocation ;
          var_cas_errorLocation = GGS_location (_inLexique) ;
          var_cas_effectiveTypesList._addAssign_operation (var_cas_resultType, var_cas_errorLocation) ;
          var_cas_outExpressionList._addAssign_operation (var_cas_expression) ;
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
  GGS_location  var_cas_endOfListLocation ;
  var_cas_endOfListLocation = GGS_location (_inLexique) ;
  if (((var_cas_inFormalAttributesList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1733)))._operator_strictInf (var_cas_effectiveTypesList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1733)))).isBuiltAndTrue ()) {
    var_cas_endOfListLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "too much expressions") COMMA_SOURCE_FILE_AT_LINE (1734)) ;
  }else if (((var_cas_inFormalAttributesList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1735)))._operator_strictSup (var_cas_effectiveTypesList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1735)))).isBuiltAndTrue ()) {
    var_cas_endOfListLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "one or more expressions missing") COMMA_SOURCE_FILE_AT_LINE (1736)) ;
  }else{
    {
      GGS_typeListeAttributsSemantiques::cEnumerator enumerator_68536 (var_cas_inFormalAttributesList, true) ;
      const GGS_typeListeAttributsSemantiques::cElement * operand_68536 = NULL ;
      GGS_typeTypesList::cEnumerator enumerator_68619 (var_cas_effectiveTypesList, true) ;
      const GGS_typeTypesList::cElement * operand_68619 = NULL ;
      while (((operand_68536 = (GGS_typeListeAttributsSemantiques::cElement *) enumerator_68536.nextObject ()))
          && ((operand_68619 = enumerator_68619.nextObject ()))) {
        macroValidPointer (operand_68536) ;
        macroValidPointer (operand_68619) ;
        ::routine_checkAssignmentTypesCompatibility (_inLexique,  operand_68536->mAttributType,  operand_68619->mType,  operand_68619->mEndOfExpressionLocation,  GGS_bool (true, true) COMMA_SOURCE_FILE_AT_LINE (1739)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_output_expression_list_expression_parser_1704_4_parse (galgas_scanner & _inLexique) {
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
      switch (select_repeat_expression_parser_14 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21) COMMA_HERE) ;
          nt_expression_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'parse_effective_input_parameters_list'  *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
pr_parse_effective_input_parameters_list_expression_parser_1751_4_ (galgas_scanner & _inLexique,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeListeAttributsSemantiques  var_cas_inFormalArgumentsList,
                                GGS_location  var_cas_inVarLocation,
                                GGS_localConstantBuildStyleEnum var_cas_inLocalConstantStyle,
                                GGS_bool &var_cas_outNoUsedParameter) {
  var_cas_outNoUsedParameter = GGS_bool (true, true) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  GGS_L_nameWithType  var_cas_argumentsList ;
  var_cas_argumentsList = GGS_L_nameWithType ::constructor_emptyList () ;
  { bool syntaxRepeat_15 = true ;
    while (syntaxRepeat_15) {
      switch (select_repeat_expression_parser_15 (_inLexique)) {
        case 2 : {
          switch (select_expression_parser_16 (_inLexique)) {
            case 1 : {
              var_cas_outNoUsedParameter = GGS_bool (true, false) ;
              GGS_lstring  var_cas_typeName ;
              _inLexique._assignFromAttribute_tokenString (var_cas_typeName) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
              GGS_lstring  var_cas_constantName ;
              _inLexique._assignFromAttribute_tokenString (var_cas_constantName) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_argumentsList._addAssign_operation (var_cas_typeName, var_cas_constantName) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
              var_cas_argumentsList._addAssign_operation (GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE)) ;
              } break ;
            case 3 : {
              GGS_luint  var_cas_jokerCountWithLocation ;
              _inLexique._assignFromAttribute_uint32value (var_cas_jokerCountWithLocation) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
              GGS_uint  var_cas_jokerCount ;
              var_cas_jokerCount = var_cas_jokerCountWithLocation.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1777)) ;
              GGS_uint _variant_70237 = var_cas_jokerCount._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1778)) ;
              GGS_bool _condition_70237 (_variant_70237._isBuilt (), true) ;
              while (_condition_70237.isBuiltAndTrue ()) {
                _condition_70237 = (var_cas_jokerCount)._operator_strictSup (GGS_uint (true, 0U)) ;
                if (_condition_70237.isBuiltAndTrue ()) {
                  if (_variant_70237.uintValue () == 0) {
                    _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1781)) ;
                    _condition_70237 = GGS_bool (true, false) ;
                  }else{
                    _variant_70237._decrement_operation (_inLexique COMMA_HERE) ;
                    var_cas_argumentsList._addAssign_operation (GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE)) ;
                    var_cas_jokerCount._decrement_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1781)) ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_15 = false ;
          break ;
      }
    }
  }
  GGS_bool var_cas_ellipsisFound ;
  switch (select_expression_parser_17 (_inLexique)) {
    case 1 : {
      var_cas_ellipsisFound = GGS_bool (true, false) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_2E_2E) COMMA_HERE) ;
      var_cas_ellipsisFound = GGS_bool (true, true) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
  ::routine_buildMapWithLocalConstants (_inLexique,  var_cas_argumentsList,  var_cas_inFormalArgumentsList,  var_cas_ioVariablesMap,  var_cas_inVarLocation,  var_cas_inLocalConstantStyle,  var_cas_ellipsisFound COMMA_SOURCE_FILE_AT_LINE (1793)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_parse_effective_input_parameters_list_expression_parser_1751_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  { bool syntaxRepeat_15 = true ;
    while (syntaxRepeat_15) {
      switch (select_repeat_expression_parser_15 (_inLexique)) {
        case 2 : {
          switch (select_expression_parser_16 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
              } break ;
            case 3 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_15 = false ;
          break ;
      }
    }
  }
  switch (select_expression_parser_17 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_2E_2E) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

