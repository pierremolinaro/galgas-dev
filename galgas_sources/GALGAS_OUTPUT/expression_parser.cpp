//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'expression_parser.cpp'                        *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                     december 8th, 2007, at 14h24'21"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "expression_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "expression_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchAndOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchAndOperator (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchAndOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_4943 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_4968 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_4943 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_4943) ;
    cPtr_typeGalgas_binaryset * operand_4968 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_4968) ;
    if ((operand_4943 != NULL) && (operand_4968 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_4943 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_4943) ;
      cPtr_typeGalgas_bool * operand_4968 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_4968) ;
      if ((operand_4943 != NULL) && (operand_4968 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_4943 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_4943) ;
        cPtr_typeGalgas_uint * operand_4968 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_4968) ;
        if ((operand_4943 != NULL) && (operand_4968 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_4943 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_4943) ;
          cPtr_typeGalgas_uint64 * operand_4968 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_4968) ;
          if ((operand_4943 != NULL) && (operand_4968 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_stringset * operand_4943 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_4943) ;
            cPtr_typeGalgas_stringset * operand_4968 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_4968) ;
            if ((operand_4943 != NULL) && (operand_4968 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint * operand_4943 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_4943) ;
              cPtr_typeGalgas_sint * operand_4968 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_4968) ;
              if ((operand_4943 != NULL) && (operand_4968 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                cPtr_typeGalgas_sint64 * operand_4943 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_4943) ;
                cPtr_typeGalgas_sint64 * operand_4968 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_4968) ;
                if ((operand_4943 != NULL) && (operand_4968 != NULL)) {
                  var_cas_outResultType = var_cas_inLeftExpressionType ;
                }else{
                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "operand type error : ("))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (148))))._operator_concat (GGS_string (true, " & ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (149))))._operator_concat (GGS_string (true, ") is not valid")) COMMA_SOURCE_FILE_AT_LINE (150)) ;
                  var_cas_outResultType._drop_operation () ;
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchAndOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchOrOperator"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchOrOperator (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchOrOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_6464 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_6489 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_6464 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_6464) ;
    cPtr_typeGalgas_binaryset * operand_6489 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_6489) ;
    if ((operand_6464 != NULL) && (operand_6489 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_6464 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_6464) ;
      cPtr_typeGalgas_bool * operand_6489 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_6489) ;
      if ((operand_6464 != NULL) && (operand_6489 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_6464 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_6464) ;
        cPtr_typeGalgas_uint * operand_6489 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_6489) ;
        if ((operand_6464 != NULL) && (operand_6489 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_6464 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_6464) ;
          cPtr_typeGalgas_uint64 * operand_6489 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_6489) ;
          if ((operand_6464 != NULL) && (operand_6489 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint * operand_6464 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_6464) ;
            cPtr_typeGalgas_sint * operand_6489 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_6489) ;
            if ((operand_6464 != NULL) && (operand_6489 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint64 * operand_6464 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_6464) ;
              cPtr_typeGalgas_sint64 * operand_6489 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_6489) ;
              if ((operand_6464 != NULL) && (operand_6489 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                cPtr_typeGalgas_stringset * operand_6464 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_6464) ;
                cPtr_typeGalgas_stringset * operand_6489 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_6489) ;
                if ((operand_6464 != NULL) && (operand_6489 != NULL)) {
                  var_cas_outResultType = var_cas_inLeftExpressionType ;
                }else{
                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "operand type error : ("))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (181))))._operator_concat (GGS_string (true, " | ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (182))))._operator_concat (GGS_string (true, ") is not valid")) COMMA_SOURCE_FILE_AT_LINE (183)) ;
                  var_cas_outResultType._drop_operation () ;
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchOrOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "matchXorOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchXorOperator (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchXorOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_7986 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_8011 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_7986 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_7986) ;
    cPtr_typeGalgas_binaryset * operand_8011 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_8011) ;
    if ((operand_7986 != NULL) && (operand_8011 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_7986 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_7986) ;
      cPtr_typeGalgas_bool * operand_8011 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_8011) ;
      if ((operand_7986 != NULL) && (operand_8011 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_7986 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_7986) ;
        cPtr_typeGalgas_uint * operand_8011 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_8011) ;
        if ((operand_7986 != NULL) && (operand_8011 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_7986 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_7986) ;
          cPtr_typeGalgas_uint64 * operand_8011 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_8011) ;
          if ((operand_7986 != NULL) && (operand_8011 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint * operand_7986 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_7986) ;
            cPtr_typeGalgas_sint * operand_8011 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_8011) ;
            if ((operand_7986 != NULL) && (operand_8011 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint64 * operand_7986 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_7986) ;
              cPtr_typeGalgas_sint64 * operand_8011 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_8011) ;
              if ((operand_7986 != NULL) && (operand_8011 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "operand type error : ("))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (212))))._operator_concat (GGS_string (true, " | ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (213))))._operator_concat (GGS_string (true, ") is not valid")) COMMA_SOURCE_FILE_AT_LINE (214)) ;
                var_cas_outResultType._drop_operation () ;
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchXorOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "matchConcatOperator"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchConcatOperator (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchConcatOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_9405 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_9430 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_string * operand_9405 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_9405) ;
    cPtr_typeGalgas_string * operand_9430 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_9430) ;
    if ((operand_9405 != NULL) && (operand_9430 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_string * operand_9405 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_9405) ;
      cPtr_typeGalgas_lstring * operand_9430 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_9430) ;
      if ((operand_9405 != NULL) && (operand_9430 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgasUndefinedListType * operand_9405 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_9405) ;
        cPtr_typeGalgasUndefinedListType * operand_9430 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_9430) ;
        if ((operand_9405 != NULL) && (operand_9430 != NULL)) {
          if (((operand_9405->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (235)))._operator_isNotEqual (operand_9430->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (235)))).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "concatenation operator error: lists should have the same type (here '@"))._operator_concat (operand_9405->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (237))))._operator_concat (GGS_string (true, "' and '@")))._operator_concat (operand_9430->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (237))))._operator_concat (GGS_string (true, "')")) COMMA_SOURCE_FILE_AT_LINE (237)) ;
          }
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "concatenation operator error: "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (241))))._operator_concat (GGS_string (true, " . ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (242))))._operator_concat (GGS_string (true, ") cannot be concatened")) COMMA_SOURCE_FILE_AT_LINE (243)) ;
          var_cas_outResultType._drop_operation () ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchConcatOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "checkNotOperator"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkNotOperator (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkNotOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_typeGalgas_bool  var_cas_gb ;
  var_cas_gb = GGS_typeGalgas_bool::_castFrom (_inLexique, var_cas_inOperandType.getPtr (), true, GGS_location (_inLexique) COMMA_SOURCE_FILE_AT_LINE (257)) ;
  var_cas_outResultType = var_cas_inOperandType ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkNotOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "checkLogicalNegateOperator"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkLogicalNegateOperator (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkLogicalNegateOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_AC_galgasType _var_11977 = var_cas_inOperandType ; // CAST instruction
    if (_var_11977.getPtr () != NULL) {
      macroValidPointer (_var_11977.getPtr ()) ;
      if (dynamic_cast <cPtr_typeGalgas_binaryset *> (_var_11977.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_uint *> (_var_11977.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint *> (_var_11977.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_uint64 *> (_var_11977.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint64 *> (_var_11977.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else{
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the ~ operator is not defined for an "))._operator_concat (var_cas_inOperandType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (285))))._operator_concat (GGS_string (true, " object")) COMMA_SOURCE_FILE_AT_LINE (286)) ;
        var_cas_outResultType._drop_operation () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkLogicalNegateOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "comparison_types_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_comparison_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_comparison_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_12539 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_12564 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_12539 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_12539) ;
    cPtr_typeGalgas_binaryset * operand_12564 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_12564) ;
    if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
    }else{
      cPtr_typeGalgas_stringset * operand_12539 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_12539) ;
      cPtr_typeGalgas_stringset * operand_12564 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_12564) ;
      if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
      }else{
        cPtr_typeGalgas_bool * operand_12539 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_12539) ;
        cPtr_typeGalgas_bool * operand_12564 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_12564) ;
        if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
        }else{
          cPtr_typeGalgas_char * operand_12539 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_12539) ;
          cPtr_typeGalgas_char * operand_12564 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_12564) ;
          if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
          }else{
            cPtr_typeGalgas_uint * operand_12539 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_12539) ;
            cPtr_typeGalgas_uint * operand_12564 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_12564) ;
            if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
            }else{
              cPtr_typeGalgas_sint * operand_12539 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_12539) ;
              cPtr_typeGalgas_sint * operand_12564 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_12564) ;
              if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
              }else{
                cPtr_typeGalgas_uint64 * operand_12539 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_12539) ;
                cPtr_typeGalgas_uint64 * operand_12564 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_12564) ;
                if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
                }else{
                  cPtr_typeGalgas_sint64 * operand_12539 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_12539) ;
                  cPtr_typeGalgas_sint64 * operand_12564 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_12564) ;
                  if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
                  }else{
                    cPtr_typeGalgas_double * operand_12539 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_12539) ;
                    cPtr_typeGalgas_double * operand_12564 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_12564) ;
                    if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
                    }else{
                      cPtr_typeGalgas_string * operand_12539 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_12539) ;
                      cPtr_typeGalgas_string * operand_12564 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_12564) ;
                      if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
                      }else{
                        cPtr_typeGalgas_lbool * operand_12539 = dynamic_cast <cPtr_typeGalgas_lbool *> (ptr_12539) ;
                        cPtr_typeGalgas_lbool * operand_12564 = dynamic_cast <cPtr_typeGalgas_lbool *> (ptr_12564) ;
                        if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
                        }else{
                          cPtr_typeGalgas_lchar * operand_12539 = dynamic_cast <cPtr_typeGalgas_lchar *> (ptr_12539) ;
                          cPtr_typeGalgas_lchar * operand_12564 = dynamic_cast <cPtr_typeGalgas_lchar *> (ptr_12564) ;
                          if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
                          }else{
                            cPtr_typeGalgas_luint * operand_12539 = dynamic_cast <cPtr_typeGalgas_luint *> (ptr_12539) ;
                            cPtr_typeGalgas_luint * operand_12564 = dynamic_cast <cPtr_typeGalgas_luint *> (ptr_12564) ;
                            if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
                            }else{
                              cPtr_typeGalgas_lsint * operand_12539 = dynamic_cast <cPtr_typeGalgas_lsint *> (ptr_12539) ;
                              cPtr_typeGalgas_lsint * operand_12564 = dynamic_cast <cPtr_typeGalgas_lsint *> (ptr_12564) ;
                              if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
                              }else{
                                cPtr_typeGalgas_luint64 * operand_12539 = dynamic_cast <cPtr_typeGalgas_luint64 *> (ptr_12539) ;
                                cPtr_typeGalgas_luint64 * operand_12564 = dynamic_cast <cPtr_typeGalgas_luint64 *> (ptr_12564) ;
                                if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
                                }else{
                                  cPtr_typeGalgas_lsint64 * operand_12539 = dynamic_cast <cPtr_typeGalgas_lsint64 *> (ptr_12539) ;
                                  cPtr_typeGalgas_lsint64 * operand_12564 = dynamic_cast <cPtr_typeGalgas_lsint64 *> (ptr_12564) ;
                                  if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
                                  }else{
                                    cPtr_typeGalgas_ldouble * operand_12539 = dynamic_cast <cPtr_typeGalgas_ldouble *> (ptr_12539) ;
                                    cPtr_typeGalgas_ldouble * operand_12564 = dynamic_cast <cPtr_typeGalgas_ldouble *> (ptr_12564) ;
                                    if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
                                    }else{
                                      cPtr_typeGalgas_lstring * operand_12539 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_12539) ;
                                      cPtr_typeGalgas_lstring * operand_12564 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_12564) ;
                                      if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
                                      }else{
                                        cPtr_typeGalgas_location * operand_12539 = dynamic_cast <cPtr_typeGalgas_location *> (ptr_12539) ;
                                        cPtr_typeGalgas_location * operand_12564 = dynamic_cast <cPtr_typeGalgas_location *> (ptr_12564) ;
                                        if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
                                        }else{
                                          cPtr_typeGalgas_enum * operand_12539 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_12539) ;
                                          cPtr_typeGalgas_enum * operand_12564 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_12564) ;
                                          if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
                                            if (((operand_12539->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (321)))._operator_isNotEqual (operand_12564->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (321)))).isBuiltAndTrue ()) {
                                              GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "comparison between an '@"))._operator_concat (operand_12539->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (322))))._operator_concat (GGS_string (true, "' enumeration and an '@")))._operator_concat (operand_12564->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (323))))._operator_concat (GGS_string (true, "' enumeration is not valid")) COMMA_SOURCE_FILE_AT_LINE (323)) ;
                                            }
                                          }else{
                                            cPtr_typeGalgasUndefinedListType * operand_12539 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_12539) ;
                                            cPtr_typeGalgasUndefinedListType * operand_12564 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_12564) ;
                                            if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
                                              if (((operand_12539->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (326)))._operator_isNotEqual (operand_12564->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (326)))).isBuiltAndTrue ()) {
                                                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "I was expecting the list type '@"))._operator_concat (operand_12539->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (327))))._operator_concat (GGS_string (true, "', I have got the list type '@")))._operator_concat (operand_12564->mListTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (328))))._operator_concat (GGS_string (true, "\"")) COMMA_SOURCE_FILE_AT_LINE (328)) ;
                                              }
                                            }else{
                                              cPtr_typeGalgasUndefinedMapType * operand_12539 = dynamic_cast <cPtr_typeGalgasUndefinedMapType *> (ptr_12539) ;
                                              cPtr_typeGalgasUndefinedMapType * operand_12564 = dynamic_cast <cPtr_typeGalgasUndefinedMapType *> (ptr_12564) ;
                                              if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
                                                if (((operand_12539->mMapTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (332)))._operator_isNotEqual (operand_12564->mMapTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (332)))).isBuiltAndTrue ()) {
                                                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "I was expecting the map type '@"))._operator_concat (operand_12539->mMapTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (333))))._operator_concat (GGS_string (true, "', I have got the map type '@")))._operator_concat (operand_12564->mMapTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (334))))._operator_concat (GGS_string (true, "\"")) COMMA_SOURCE_FILE_AT_LINE (334)) ;
                                                }
                                              }else{
                                                cPtr_typeGalgasUndefinedClassType * operand_12539 = dynamic_cast <cPtr_typeGalgasUndefinedClassType *> (ptr_12539) ;
                                                cPtr_typeGalgasUndefinedClassType * operand_12564 = dynamic_cast <cPtr_typeGalgasUndefinedClassType *> (ptr_12564) ;
                                                if ((operand_12539 != NULL) && (operand_12564 != NULL)) {
                                                  if (((operand_12539->mClassTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (339)))._operator_isNotEqual (operand_12564->mClassTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (339)))).isBuiltAndTrue ()) {
                                                    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "I was expecting the class type '@"))._operator_concat (operand_12539->mClassTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (340))))._operator_concat (GGS_string (true, "', I have got the class type '@")))._operator_concat (operand_12564->mClassTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (341))))._operator_concat (GGS_string (true, "\"")) COMMA_SOURCE_FILE_AT_LINE (341)) ;
                                                  }
                                                }else{
                                                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "comparison between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (344))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (345))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (345)) ;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_comparison_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "magnitude_comparison_types_check"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_magnitude_comparison_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_magnitude_comparison_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_15807 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_15832 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_stringset * operand_15807 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_15807) ;
    cPtr_typeGalgas_stringset * operand_15832 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_15832) ;
    if ((operand_15807 != NULL) && (operand_15832 != NULL)) {
    }else{
      cPtr_typeGalgas_bool * operand_15807 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_15807) ;
      cPtr_typeGalgas_bool * operand_15832 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_15832) ;
      if ((operand_15807 != NULL) && (operand_15832 != NULL)) {
      }else{
        cPtr_typeGalgas_char * operand_15807 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_15807) ;
        cPtr_typeGalgas_char * operand_15832 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_15832) ;
        if ((operand_15807 != NULL) && (operand_15832 != NULL)) {
        }else{
          cPtr_typeGalgas_uint * operand_15807 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_15807) ;
          cPtr_typeGalgas_uint * operand_15832 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_15832) ;
          if ((operand_15807 != NULL) && (operand_15832 != NULL)) {
          }else{
            cPtr_typeGalgas_sint * operand_15807 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_15807) ;
            cPtr_typeGalgas_sint * operand_15832 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_15832) ;
            if ((operand_15807 != NULL) && (operand_15832 != NULL)) {
            }else{
              cPtr_typeGalgas_uint64 * operand_15807 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_15807) ;
              cPtr_typeGalgas_uint64 * operand_15832 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_15832) ;
              if ((operand_15807 != NULL) && (operand_15832 != NULL)) {
              }else{
                cPtr_typeGalgas_sint64 * operand_15807 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_15807) ;
                cPtr_typeGalgas_sint64 * operand_15832 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_15832) ;
                if ((operand_15807 != NULL) && (operand_15832 != NULL)) {
                }else{
                  cPtr_typeGalgas_double * operand_15807 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_15807) ;
                  cPtr_typeGalgas_double * operand_15832 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_15832) ;
                  if ((operand_15807 != NULL) && (operand_15832 != NULL)) {
                  }else{
                    cPtr_typeGalgas_string * operand_15807 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_15807) ;
                    cPtr_typeGalgas_string * operand_15832 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_15832) ;
                    if ((operand_15807 != NULL) && (operand_15832 != NULL)) {
                    }else{
                      cPtr_typeGalgas_enum * operand_15807 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_15807) ;
                      cPtr_typeGalgas_enum * operand_15832 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_15832) ;
                      if ((operand_15807 != NULL) && (operand_15832 != NULL)) {
                        if (((operand_15807->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (370)))._operator_isNotEqual (operand_15832->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (370)))).isBuiltAndTrue ()) {
                          GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "comparison between an '@"))._operator_concat (operand_15807->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (371))))._operator_concat (GGS_string (true, "' enumeration and an '@")))._operator_concat (operand_15832->mEnumTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (372))))._operator_concat (GGS_string (true, "' enumeration is not valid")) COMMA_SOURCE_FILE_AT_LINE (372)) ;
                        }
                      }else{
                        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "comparison between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (375))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (376))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (376)) ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_magnitude_comparison_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "left_shift_types_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_left_shift_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_left_shift_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_17467 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_17492 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_17467 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_17467) ;
    cPtr_typeGalgas_uint * operand_17492 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17492) ;
    if ((operand_17467 != NULL) && (operand_17492 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_uint * operand_17467 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17467) ;
      cPtr_typeGalgas_uint * operand_17492 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17492) ;
      if ((operand_17467 != NULL) && (operand_17492 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_sint * operand_17467 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_17467) ;
        cPtr_typeGalgas_uint * operand_17492 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17492) ;
        if ((operand_17467 != NULL) && (operand_17492 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_17467 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_17467) ;
          cPtr_typeGalgas_uint * operand_17492 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17492) ;
          if ((operand_17467 != NULL) && (operand_17492 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint64 * operand_17467 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_17467) ;
            cPtr_typeGalgas_uint * operand_17492 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17492) ;
            if ((operand_17467 != NULL) && (operand_17492 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "shift between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (403))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (404))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (406)) ;
              var_cas_outResultType._drop_operation () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_left_shift_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "right_shift_types_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_right_shift_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_right_shift_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_18473 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_18498 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_18473 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_18473) ;
    cPtr_typeGalgas_uint * operand_18498 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18498) ;
    if ((operand_18473 != NULL) && (operand_18498 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_uint * operand_18473 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18473) ;
      cPtr_typeGalgas_uint * operand_18498 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18498) ;
      if ((operand_18473 != NULL) && (operand_18498 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_sint * operand_18473 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_18473) ;
        cPtr_typeGalgas_uint * operand_18498 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18498) ;
        if ((operand_18473 != NULL) && (operand_18498 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_18473 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_18473) ;
          cPtr_typeGalgas_uint * operand_18498 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18498) ;
          if ((operand_18473 != NULL) && (operand_18498 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint64 * operand_18473 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_18473) ;
            cPtr_typeGalgas_uint * operand_18498 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18498) ;
            if ((operand_18473 != NULL) && (operand_18498 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "shift between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (429))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (430))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (432)) ;
              var_cas_outResultType._drop_operation () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_right_shift_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "addition_types_check"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addition_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addition_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_19788 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_19813 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_19788 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19788) ;
    cPtr_typeGalgas_uint * operand_19813 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19813) ;
    if ((operand_19788 != NULL) && (operand_19813 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_19788 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_19788) ;
      cPtr_typeGalgas_sint * operand_19813 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_19813) ;
      if ((operand_19788 != NULL) && (operand_19813 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_19788 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_19788) ;
        cPtr_typeGalgas_uint64 * operand_19813 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_19813) ;
        if ((operand_19788 != NULL) && (operand_19813 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_19788 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_19788) ;
          cPtr_typeGalgas_sint64 * operand_19813 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_19813) ;
          if ((operand_19788 != NULL) && (operand_19813 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "addition between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (457))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (458))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (460)) ;
            var_cas_outResultType._drop_operation () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addition_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "substraction_types_check"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_substraction_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_substraction_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_21013 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_21038 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_21013 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_21013) ;
    cPtr_typeGalgas_uint * operand_21038 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_21038) ;
    if ((operand_21013 != NULL) && (operand_21038 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_21013 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_21013) ;
      cPtr_typeGalgas_sint * operand_21038 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_21038) ;
      if ((operand_21013 != NULL) && (operand_21038 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_21013 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_21013) ;
        cPtr_typeGalgas_uint64 * operand_21038 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_21038) ;
        if ((operand_21013 != NULL) && (operand_21038 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_21013 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_21013) ;
          cPtr_typeGalgas_sint64 * operand_21038 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_21038) ;
          if ((operand_21013 != NULL) && (operand_21038 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_stringset * operand_21013 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_21013) ;
            cPtr_typeGalgas_stringset * operand_21038 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_21038) ;
            if ((operand_21013 != NULL) && (operand_21038 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "substraction between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (487))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (488))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (490)) ;
              var_cas_outResultType._drop_operation () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_substraction_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "multiply_types_check"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_multiply_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_multiply_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_22344 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_22369 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_22344 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_22344) ;
    cPtr_typeGalgas_uint * operand_22369 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_22369) ;
    if ((operand_22344 != NULL) && (operand_22369 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_22344 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_22344) ;
      cPtr_typeGalgas_sint * operand_22369 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_22369) ;
      if ((operand_22344 != NULL) && (operand_22369 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_22344 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_22344) ;
        cPtr_typeGalgas_uint64 * operand_22369 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_22369) ;
        if ((operand_22344 != NULL) && (operand_22369 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_22344 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_22344) ;
          cPtr_typeGalgas_sint64 * operand_22369 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_22369) ;
          if ((operand_22344 != NULL) && (operand_22369 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "multiplication between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (515))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (516))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (518)) ;
            var_cas_outResultType._drop_operation () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_multiply_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "divide_types_check"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_divide_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_divide_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_23569 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_23594 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_23569 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_23569) ;
    cPtr_typeGalgas_uint * operand_23594 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_23594) ;
    if ((operand_23569 != NULL) && (operand_23594 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_23569 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_23569) ;
      cPtr_typeGalgas_sint * operand_23594 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_23594) ;
      if ((operand_23569 != NULL) && (operand_23594 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_23569 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_23569) ;
        cPtr_typeGalgas_uint64 * operand_23594 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_23594) ;
        if ((operand_23569 != NULL) && (operand_23594 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_23569 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_23569) ;
          cPtr_typeGalgas_sint64 * operand_23594 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_23594) ;
          if ((operand_23569 != NULL) && (operand_23594 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "division between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (543))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (544))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (546)) ;
            var_cas_outResultType._drop_operation () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_divide_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "modulo_types_check"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_modulo_types_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_modulo_types_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType._isBuilt () && var_cas_inRightExpressionType._isBuilt ()) {
    cPtr_AC_galgasType * ptr_24788 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_24813 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_24788 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_24788) ;
    cPtr_typeGalgas_uint * operand_24813 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_24813) ;
    if ((operand_24788 != NULL) && (operand_24813 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_24788 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_24788) ;
      cPtr_typeGalgas_sint * operand_24813 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_24813) ;
      if ((operand_24788 != NULL) && (operand_24813 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_24788 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_24788) ;
        cPtr_typeGalgas_uint64 * operand_24813 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_24813) ;
        if ((operand_24788 != NULL) && (operand_24813 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_24788 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_24788) ;
          cPtr_typeGalgas_sint64 * operand_24813 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_24813) ;
          if ((operand_24788 != NULL) && (operand_24813 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "modulo between "))._operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (571))))._operator_concat (GGS_string (true, " and ")))._operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (572))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (574)) ;
            var_cas_outResultType._drop_operation () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_modulo_types_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "unary_minus_type_check"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_unary_minus_type_check (C_Compiler & _inLexique,
                                const GGS_AC_galgasType   var_cas_inExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_unary_minus_type_check at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_AC_galgasType _var_26238 = var_cas_inExpressionType ; // CAST instruction
    if (_var_26238.getPtr () != NULL) {
      macroValidPointer (_var_26238.getPtr ()) ;
      if (dynamic_cast <cPtr_typeGalgas_sint *> (_var_26238.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inExpressionType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint64 *> (_var_26238.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inExpressionType ;
      }else{
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "unary minus for "))._operator_concat (var_cas_inExpressionType.reader_messageGalgasType (_inLexique COMMA_SOURCE_FILE_AT_LINE (594))))._operator_concat (GGS_string (true, " is not valid")) COMMA_SOURCE_FILE_AT_LINE (597)) ;
        var_cas_outResultType._drop_operation () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_unary_minus_type_check\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_expression_expression_parser_607_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_concatenation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_expression_parser_0 (_inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_concatenation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeConcatOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchConcatOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (636)) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_expression_expression_parser_607_4_parse (galgas_scanner & _inLexique) {
  nt_concatenation_term_parse (_inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_expression_parser_0 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          nt_concatenation_term_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'concatenation_term'           *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_concatenation_term_expression_parser_651_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_expression_parser_1 (_inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7C) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeOrOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchOrOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (680)) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5E) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeXorOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchXorOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (700)) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_concatenation_term_expression_parser_651_4_parse (galgas_scanner & _inLexique) {
  nt_relation_term_parse (_inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_expression_parser_1 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7C) COMMA_HERE) ;
          nt_relation_term_parse (_inLexique) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5E) COMMA_HERE) ;
          nt_relation_term_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'relation_term'              *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_relation_term_expression_parser_715_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_expression_parser_2 (_inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__26) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeAndOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchAndOperator (_inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (744)) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_relation_term_expression_parser_715_4_parse (galgas_scanner & _inLexique) {
  nt_relation_factor_parse (_inLexique) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_expression_parser_2 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__26) COMMA_HERE) ;
          nt_relation_factor_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'relation_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_relation_factor_expression_parser_759_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  switch (select_expression_parser_3 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D_3D) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (786)) ;
      var_cas_outExpression = GGS_typeEqualTest::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_3D) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (803)) ;
      var_cas_outExpression = GGS_typeNonEqualTest::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 4 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_3D) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (820)) ;
      var_cas_outExpression = GGS_typeInfOrEqualTest::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 5 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_3D) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (837)) ;
      var_cas_outExpression = GGS_typeSupOrEqualTest::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 6 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (854)) ;
      var_cas_outExpression = GGS_typeStrictSupTest::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    case 7 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (871)) ;
      var_cas_outExpression = GGS_typeStrictInfTest::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_relation_factor_expression_parser_759_4_parse (galgas_scanner & _inLexique) {
  nt_simple_expression_parse (_inLexique) ;
  switch (select_expression_parser_3 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D_3D) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_3D) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 4 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_3D) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 5 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_3D) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 6 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    case 7 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C) COMMA_HERE) ;
      nt_simple_expression_parse (_inLexique) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'simple_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_simple_expression_expression_parser_884_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_repeat_expression_parser_4 (_inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_3C) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_left_shift_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (912)) ;
          var_cas_outExpression = GGS_typeLeftShiftOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_3E) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_right_shift_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (928)) ;
          var_cas_outExpression = GGS_typeRightShiftOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_addition_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (944)) ;
          var_cas_outExpression = GGS_typeAddOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 5 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_substraction_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (960)) ;
          var_cas_outExpression = GGS_typeSubOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_simple_expression_expression_parser_884_4_parse (galgas_scanner & _inLexique) {
  nt_term_parse (_inLexique) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_repeat_expression_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_3C) COMMA_HERE) ;
          nt_term_parse (_inLexique) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_3E) COMMA_HERE) ;
          nt_term_parse (_inLexique) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B) COMMA_HERE) ;
          nt_term_parse (_inLexique) ;
          } break ;
        case 5 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D) COMMA_HERE) ;
          nt_term_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'term'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_term_expression_parser_972_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_repeat_expression_parser_5 (_inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_multiply_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1000)) ;
          var_cas_outExpression = GGS_typeMultiplyOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2F) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_divide_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1016)) ;
          var_cas_outExpression = GGS_typeDivideOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_mod) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_modulo_types_check (_inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1032)) ;
          var_cas_outExpression = GGS_typeModuloOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_term_expression_parser_972_4_parse (galgas_scanner & _inLexique) {
  nt_factor_parse (_inLexique) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_repeat_expression_parser_5 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
          nt_factor_parse (_inLexique) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2F) COMMA_HERE) ;
          nt_factor_parse (_inLexique) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_mod) COMMA_HERE) ;
          nt_factor_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1044_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation ;
  var_cas_operatorLocation = GGS_location (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D) COMMA_HERE) ;
  GGS_typeExpression  var_cas_expression ;
  GGS_AC_galgasType  var_cas_type ;
  nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_expression, var_cas_type) ;
  ::routine_unary_minus_type_check (_inLexique,  var_cas_type,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1061)) ;
  var_cas_outExpression = GGS_typeUnaryMinusOperation::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_expression COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1044_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D) COMMA_HERE) ;
  nt_factor_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1072_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_typeCplusPlusName  var_cas_nomCppEntite1 ;
  GGS_lstring  automatic_var_0 ;
  nt_read_access_ (_inLexique, automatic_var_0, var_cas_nomCppEntite1, var_cas_outResultType, var_cas_ioVariablesMap) ;
  var_cas_outExpression = GGS_typeVarInExpression::constructor_new (_inLexique, var_cas_nomCppEntite1 COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1072_4_parse (galgas_scanner & _inLexique) {
  nt_read_access_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1092_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  switch (select_expression_parser_6 (_inLexique)) {
    case 1 : {
      nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_cast) COMMA_HERE) ;
      GGS_typeExpression  var_cas_castedExpression ;
      GGS_AC_galgasType  var_cas_castExpressionType ;
      nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_castedExpression, var_cas_castExpressionType) ;
      GGS_lstring  var_cas_kSourceExpresionClassName ;
      var_cas_kSourceExpresionClassName = GGS_typeGalgasClassType::_castFrom (_inLexique, var_cas_castExpressionType.getPtr (), true, GGS_location (_inLexique) COMMA_SOURCE_FILE_AT_LINE (1120)).reader_mClassTypeName (_inLexique COMMA_SOURCE_FILE_AT_LINE (1120)) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
      GGS_bool var_cas_checkForKindOfClass ;
      switch (select_expression_parser_7 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_3D) COMMA_HERE) ;
          var_cas_checkForKindOfClass = GGS_bool (true, true) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D_3D) COMMA_HERE) ;
          var_cas_checkForKindOfClass = GGS_bool (true, false) ;
          } break ;
        default :
          break ;
      }
      GGS_lstring  var_cas_castedTypeName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_castedTypeName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite ;
      if (var_cas_ioEntitiesMap._isBuilt ()) {
        var_cas_ioEntitiesMap (HERE)->method_searchKey (_inLexique, var_cas_castedTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1135)) ;
      }
      var_cas_outResultType = GGS_typeEntiteType::_castFrom (_inLexique, var_cas_entite.getPtr (), true, var_cas_castedTypeName COMMA_SOURCE_FILE_AT_LINE (1136)).reader_aDefType (_inLexique COMMA_SOURCE_FILE_AT_LINE (1136)) ;
      GGS_typeGalgasClassType  var_cas_resultClassType ;
      var_cas_resultClassType = GGS_typeGalgasClassType::_castFrom (_inLexique, var_cas_outResultType.getPtr (), true, var_cas_castedTypeName COMMA_SOURCE_FILE_AT_LINE (1138)) ;
      GGS_typeSuperClassesMap  var_cas_superClassMap ;
      var_cas_superClassMap = var_cas_resultClassType.reader_mAncestorClassesMap (_inLexique COMMA_SOURCE_FILE_AT_LINE (1139)) ;
      GGS_string var_cas_classMessage ;
      var_cas_classMessage = var_cas_resultClassType.reader_mClassMessage (_inLexique COMMA_SOURCE_FILE_AT_LINE (1140)) ;
      if (((var_cas_classMessage.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1142)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_castedTypeName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "in order to be used in a cast expression, the '@"))._operator_concat (var_cas_castedTypeName))._operator_concat (GGS_string (true, "' class should define a class message")) COMMA_SOURCE_FILE_AT_LINE (1143)) ;
      }
      GGS_string var_cas_sourceExpressionTypeNameString ;
      var_cas_sourceExpressionTypeNameString = var_cas_kSourceExpresionClassName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1146)) ;
      if (((var_cas_checkForKindOfClass)._operator_not ()).isBuiltAndTrue ()) {
        if ((((var_cas_castedTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1148)))._operator_isNotEqual (var_cas_sourceExpressionTypeNameString))._operator_and ((var_cas_superClassMap.reader_hasKey (_inLexique, var_cas_sourceExpressionTypeNameString COMMA_SOURCE_FILE_AT_LINE (1148)))._operator_not ())).isBuiltAndTrue ()) {
          var_cas_castedTypeName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "This class is not '@"))._operator_concat (var_cas_sourceExpressionTypeNameString))._operator_concat (GGS_string (true, "' and does inherit from it")) COMMA_SOURCE_FILE_AT_LINE (1149)) ;
        }
      }else if (((var_cas_superClassMap.reader_hasKey (_inLexique, var_cas_sourceExpressionTypeNameString COMMA_SOURCE_FILE_AT_LINE (1151)))._operator_not ()).isBuiltAndTrue ()) {
        var_cas_castedTypeName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "This class does not inherit from '@"))._operator_concat (var_cas_sourceExpressionTypeNameString))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (1152)) ;
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
      GGS_typeExpression  var_cas_errorLocationExpression ;
      GGS_AC_galgasType  var_cas_errorLocationExpressionType ;
      nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_errorLocationExpression, var_cas_errorLocationExpressionType) ;
      if (var_cas_errorLocationExpressionType._isBuilt ()) {
        var_cas_errorLocationExpressionType (HERE)->method_checkAbilityToBeSilentlyConvertedToLocation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1166)) ;
      }
      var_cas_outExpression = GGS_typeCastInExpression::constructor_new (_inLexique, var_cas_castedExpression, var_cas_checkForKindOfClass, var_cas_castedTypeName, var_cas_errorLocationExpression COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1092_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  switch (select_expression_parser_6 (_inLexique)) {
    case 1 : {
      nt_expression_parse (_inLexique) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_cast) COMMA_HERE) ;
      nt_expression_parse (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
      switch (select_expression_parser_7 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_3D) COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D_3D) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
      nt_expression_parse (_inLexique) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1184_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation ;
  var_cas_operatorLocation = GGS_location (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_not) COMMA_HERE) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeTestComplement::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_ifCondition COMMA_HERE) ;
  ::routine_checkNotOperator (_inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1202)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1184_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_not) COMMA_HERE) ;
  nt_factor_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1212_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation ;
  var_cas_operatorLocation = GGS_location (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7E) COMMA_HERE) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeLogicalNegate::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_ifCondition COMMA_HERE) ;
  ::routine_checkLogicalNegateOperator (_inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1230)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1212_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7E) COMMA_HERE) ;
  nt_factor_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1240_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_true) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeTrueBool::constructor_new (_inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1240_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_true) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1258_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_false) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeFalseBool::constructor_new (_inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1258_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_false) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1276_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_stringlist  var_cas_literalStringList ;
  var_cas_literalStringList = GGS_stringlist::constructor_emptyList (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
        GGS_lstring  var_cas_literalString ;
        _inLexique._assignFromAttribute_tokenString (var_cas_literalString) ;
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
        var_cas_literalStringList._addAssign_operation (var_cas_literalString.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1287))) ;
      switch (select_repeat_expression_parser_8 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
  var_cas_outExpression = GGS_typeLiteralStringExpression::constructor_new (_inLexique, var_cas_literalStringList COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_string::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1276_4_parse (galgas_scanner & _inLexique) {
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      switch (select_repeat_expression_parser_8 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1300_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint  var_cas_literalInt ;
  _inLexique._assignFromAttribute_uint32value (var_cas_literalInt) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralUIntExpression::constructor_new (_inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_uint::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1300_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1319_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint  var_cas_literalInt ;
  _inLexique._assignFromAttribute_sint32value (var_cas_literalInt) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralSIntExpression::constructor_new (_inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_sint::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1319_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1338_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint64  var_cas_literalInt ;
  _inLexique._assignFromAttribute_uint64value (var_cas_literalInt) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger64) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralUInt64Expression::constructor_new (_inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_uint64::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1338_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger64) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1357_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint64  var_cas_literalInt ;
  _inLexique._assignFromAttribute_sint64value (var_cas_literalInt) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger64) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralSInt64Expression::constructor_new (_inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_sint64::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1357_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger64) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1376_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lchar  var_cas_literalChar ;
  _inLexique._assignFromAttribute_charValue (var_cas_literalChar) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fchar) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralCharExpression::constructor_new (_inLexique, var_cas_literalChar COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_char::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1376_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fchar) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1395_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_ldouble  var_cas_literalDouble ;
  _inLexique._assignFromAttribute_floatValue (var_cas_literalDouble) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fdouble) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralDoubleExpression::constructor_new (_inLexique, var_cas_literalDouble COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_double::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1395_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fdouble) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1414_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_here) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeHereExpression::constructor_new (_inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_location::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1414_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_here) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_factor_expression_parser_1436_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B) COMMA_HERE) ;
  switch (select_expression_parser_9 (_inLexique)) {
    case 1 : {
      GGS_typeExpression  var_cas_expressionValue ;
      GGS_AC_galgasType  var_cas_expressionType ;
      nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_expressionValue, var_cas_expressionType) ;
      switch (select_expression_parser_10 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_description) COMMA_HERE) ;
          var_cas_outExpression = GGS_typeDescriptionInExpression::constructor_new (_inLexique, var_cas_expressionValue, GGS_location (_inLexique) COMMA_HERE) ;
          var_cas_outResultType = GGS_typeGalgas_string::constructor_new (_inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          GGS_lstring  var_cas_methodName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_methodName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_typeListeAttributsSemantiques  var_cas_accessorsTypeList ;
          GGS_string var_cas_conversionMethod ;
          ::routine_handleReaderCall (_inLexique,  var_cas_expressionType,  var_cas_methodName,  var_cas_accessorsTypeList,  var_cas_outResultType,  var_cas_conversionMethod COMMA_SOURCE_FILE_AT_LINE (1465)) ;
          GGS_typeExpressionList  var_cas_expressionList ;
          nt_output_expression_list_ (_inLexique, var_cas_expressionList, var_cas_accessorsTypeList, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap) ;
          var_cas_outExpression = GGS_typeReaderCallInExpression::constructor_new (_inLexique, var_cas_expressionValue, var_cas_methodName, var_cas_expressionList, var_cas_conversionMethod COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      GGS_lstring  var_cas_className ;
      _inLexique._assignFromAttribute_tokenString (var_cas_className) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      GGS_lstring  var_cas_mClassMethodName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_mClassMethodName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_e ;
      if (var_cas_ioEntitiesMap._isBuilt ()) {
        var_cas_ioEntitiesMap (HERE)->method_searchKey (_inLexique, var_cas_className, var_cas_e COMMA_SOURCE_FILE_AT_LINE (1486)) ;
      }
      var_cas_outResultType = GGS_typeEntiteType::_castFrom (_inLexique, var_cas_e.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (1487)).reader_aDefType (_inLexique COMMA_SOURCE_FILE_AT_LINE (1487)) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques ;
      if (var_cas_outResultType._isBuilt ()) {
        var_cas_outResultType (HERE)->method_handleConstructorCall (_inLexique, var_cas_mClassMethodName, var_cas_listeAttributsSemantiques COMMA_SOURCE_FILE_AT_LINE (1490)) ;
      }
      GGS_typeExpressionList  var_cas_expressionList ;
      nt_output_expression_list_ (_inLexique, var_cas_expressionList, var_cas_listeAttributsSemantiques, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap) ;
      var_cas_outExpression = GGS_typeConstructorExpression::constructor_new (_inLexique, var_cas_className.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1501)), var_cas_mClassMethodName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1502)), var_cas_expressionList COMMA_HERE) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
      switch (select_expression_parser_11 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          GGS_lstring  var_cas_optionName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_optionName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          if (((var_cas_optionName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1511)))._operator_isNotEqual (GGS_string (true, "verbose_output"))).isBuiltAndTrue ()) {
            var_cas_optionName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "this option name does not correspond to a builtin option") COMMA_SOURCE_FILE_AT_LINE (1512)) ;
          }
          var_cas_outExpression = GGS_typeBoolOption::constructor_new (_inLexique, GGS_string (true, "generic_galgas_cli_options"), var_cas_optionName COMMA_HERE) ;
          var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          GGS_lstring  var_cas_optionComponentName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_optionComponentName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_M_cli_options  var_cas_boolOptionsMap ;
          GGS_M_cli_options  var_cas_uintOptionsMap ;
          GGS_M_cli_options  var_cas_stringOptionsMap ;
          if (var_cas_inOptionsComponentsMapForUse._isBuilt ()) {
            var_cas_inOptionsComponentsMapForUse (HERE)->method_searchKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (1522)) ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          GGS_lstring  var_cas_optionName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_optionName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          if ((var_cas_boolOptionsMap.reader_hasKey (_inLexique, var_cas_optionName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1526)) COMMA_SOURCE_FILE_AT_LINE (1526))).isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_typeBoolOption::constructor_new (_inLexique, var_cas_optionComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1527)), var_cas_optionName COMMA_HERE) ;
            var_cas_outResultType = GGS_typeGalgas_bool::constructor_new (_inLexique COMMA_HERE) ;
          }else if ((var_cas_uintOptionsMap.reader_hasKey (_inLexique, var_cas_optionName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1529)) COMMA_SOURCE_FILE_AT_LINE (1529))).isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_typeUIntOption::constructor_new (_inLexique, var_cas_optionComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1530)), var_cas_optionName COMMA_HERE) ;
            var_cas_outResultType = GGS_typeGalgas_uint::constructor_new (_inLexique COMMA_HERE) ;
          }else if ((var_cas_stringOptionsMap.reader_hasKey (_inLexique, var_cas_optionName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1532)) COMMA_SOURCE_FILE_AT_LINE (1532))).isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_typeStringOption::constructor_new (_inLexique, var_cas_optionComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1533)), var_cas_optionName COMMA_HERE) ;
            var_cas_outResultType = GGS_typeGalgas_string::constructor_new (_inLexique COMMA_HERE) ;
          }else{
            var_cas_optionName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the '"))._operator_concat (var_cas_optionComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1536))))._operator_concat (GGS_string (true, "' option component has no '")))._operator_concat (var_cas_optionName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1536))))._operator_concat (GGS_string (true, "' option")) COMMA_SOURCE_FILE_AT_LINE (1537)) ;
            var_cas_outExpression._drop_operation () ;
            var_cas_outResultType._drop_operation () ;
          }
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_factor_expression_parser_1436_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B) COMMA_HERE) ;
  switch (select_expression_parser_9 (_inLexique)) {
    case 1 : {
      nt_expression_parse (_inLexique) ;
      switch (select_expression_parser_10 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_description) COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          nt_output_expression_list_parse (_inLexique) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      nt_output_expression_list_parse (_inLexique) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
      switch (select_expression_parser_11 (_inLexique)) {
        case 1 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'read_access'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_read_access_expression_parser_1550_4_ (galgas_scanner & _inLexique,
                                GGS_lstring  &var_cas_nomVariable,
                                GGS_typeCplusPlusName  &var_cas_nomCppEntite,
                                GGS_AC_galgasType  &var_cas_typeEntite,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  _inLexique._assignFromAttribute_tokenString (var_cas_nomVariable) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  var_cas_ioVariablesMap.modifier_searchForReadOnlyAccess (_inLexique, var_cas_nomVariable, var_cas_typeEntite, var_cas_nomCppEntite COMMA_SOURCE_FILE_AT_LINE (1557)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_read_access_expression_parser_1550_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'read_access'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_read_access_expression_parser_1566_4_ (galgas_scanner & _inLexique,
                                GGS_lstring  &var_cas_nomVariable,
                                GGS_typeCplusPlusName  &var_cas_nomCppEntite,
                                GGS_AC_galgasType  &var_cas_typeEntite,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_self) COMMA_HERE) ;
  if ((var_cas_ioVariablesMap.reader_hasKey (_inLexique, GGS_string (true, "self") COMMA_SOURCE_FILE_AT_LINE (1573))).isBuiltAndTrue ()) {
    var_cas_nomVariable = GGS_lstring::constructor_new (_inLexique, GGS_string (true, "self"), GGS_location (_inLexique) COMMA_HERE) ;
    var_cas_ioVariablesMap.modifier_searchForReadOnlyAccess (_inLexique, var_cas_nomVariable, var_cas_typeEntite, var_cas_nomCppEntite COMMA_SOURCE_FILE_AT_LINE (1575)) ;
  }else{
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "'self' is not defined in this context") COMMA_SOURCE_FILE_AT_LINE (1578)) ;
    var_cas_nomVariable._drop_operation () ;
    var_cas_nomCppEntite._drop_operation () ;
    var_cas_typeEntite._drop_operation () ;
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_read_access_expression_parser_1566_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_self) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'output_expression_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_output_expression_list_expression_parser_1588_4_ (galgas_scanner & _inLexique,
                                GGS_typeExpressionList  &var_cas_outExpressionList,
                                const GGS_typeListeAttributsSemantiques  var_cas_inFormalAttributesList,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  GGS_typeTypesList  var_cas_effectiveTypesList ;
  var_cas_effectiveTypesList = GGS_typeTypesList::constructor_emptyList (_inLexique COMMA_HERE) ;
  var_cas_outExpressionList = GGS_typeExpressionList::constructor_emptyList (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_12 = true ;
    while (syntaxRepeat_12) {
      switch (select_repeat_expression_parser_12 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21) COMMA_HERE) ;
          GGS_typeExpression  var_cas_expression ;
          GGS_AC_galgasType  var_cas_resultType ;
          nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_expression, var_cas_resultType) ;
          GGS_location  var_cas_errorLocation ;
          var_cas_errorLocation = GGS_location (_inLexique) ;
          var_cas_effectiveTypesList._addAssign_operation (var_cas_resultType, var_cas_errorLocation) ;
          var_cas_outExpressionList._addAssign_operation (var_cas_expression) ;
          } break ;
        default :
          syntaxRepeat_12 = false ;
          break ;
      }
    }
  }
  GGS_location  var_cas_endOfListLocation ;
  var_cas_endOfListLocation = GGS_location (_inLexique) ;
  if (((var_cas_inFormalAttributesList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1615)))._operator_strictInf (var_cas_effectiveTypesList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1615)))).isBuiltAndTrue ()) {
    var_cas_endOfListLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "too much expressions") COMMA_SOURCE_FILE_AT_LINE (1616)) ;
  }else if (((var_cas_inFormalAttributesList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1617)))._operator_strictSup (var_cas_effectiveTypesList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1617)))).isBuiltAndTrue ()) {
    var_cas_endOfListLocation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "one or more expressions missing") COMMA_SOURCE_FILE_AT_LINE (1618)) ;
  }else{
    const GGS_typeListeAttributsSemantiques _var_64137 = var_cas_inFormalAttributesList ;
    const GGS_typeListeAttributsSemantiques::element_type * operand_64137 = _var_64137.firstObject () ;
    const GGS_typeTypesList _var_64220 = var_cas_effectiveTypesList ;
    const GGS_typeTypesList::element_type * operand_64220 = _var_64220.firstObject () ;
    while ((operand_64137 != NULL)
        && (operand_64220 != NULL)) {
      macroValidPointer (operand_64137) ;
      macroValidPointer (operand_64220) ;
      ::routine_checkAssignmentTypesCompatibility (_inLexique,  operand_64137->mAttributType,  operand_64220->mType,  operand_64220->mEndOfExpressionLocation,  GGS_bool (true, true) COMMA_SOURCE_FILE_AT_LINE (1621)) ;
      operand_64137 = operand_64137->nextObject () ;
      operand_64220 = operand_64220->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_output_expression_list_expression_parser_1588_4_parse (galgas_scanner & _inLexique) {
  { bool syntaxRepeat_12 = true ;
    while (syntaxRepeat_12) {
      switch (select_repeat_expression_parser_12 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21) COMMA_HERE) ;
          nt_expression_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_12 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'parse_effective_input_parameters_list'  *
//                                                                           *
//---------------------------------------------------------------------------*

void expression_parser::
expression_parser::
pr_parse_effective_input_parameters_list_expression_parser_1633_4_ (galgas_scanner & _inLexique,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeListeAttributsSemantiques  var_cas_inFormalArgumentsList,
                                GGS_location  var_cas_inVarLocation,
                                GGS_localConstantBuildStyleEnum var_cas_inLocalConstantStyle,
                                GGS_bool &var_cas_outNoUsedParameter) {
  var_cas_outNoUsedParameter = GGS_bool (true, true) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  GGS_L_nameWithType  var_cas_argumentsList ;
  var_cas_argumentsList = GGS_L_nameWithType::constructor_emptyList (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_13 = true ;
    while (syntaxRepeat_13) {
      switch (select_repeat_expression_parser_13 (_inLexique)) {
        case 2 : {
          switch (select_expression_parser_14 (_inLexique)) {
            case 1 : {
              var_cas_outNoUsedParameter = GGS_bool (true, false) ;
              GGS_lstring  var_cas_typeName ;
              _inLexique._assignFromAttribute_tokenString (var_cas_typeName) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
              GGS_lstring  var_cas_constantName ;
              _inLexique._assignFromAttribute_tokenString (var_cas_constantName) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_argumentsList._addAssign_operation (var_cas_typeName, var_cas_constantName) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
              var_cas_argumentsList._addAssign_operation (GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE)) ;
              } break ;
            case 3 : {
              GGS_luint  var_cas_jokerCountWithLocation ;
              _inLexique._assignFromAttribute_uint32value (var_cas_jokerCountWithLocation) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
              GGS_uint  var_cas_jokerCount ;
              var_cas_jokerCount = var_cas_jokerCountWithLocation.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1659)) ;
              GGS_uint _variant_65837 = var_cas_jokerCount._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1660)) ;
              GGS_bool _condition_65837 (_variant_65837._isBuilt (), true) ;
              while (_condition_65837.isBuiltAndTrue ()) {
                _condition_65837 = (var_cas_jokerCount)._operator_strictSup (GGS_uint (true, 0U)) ;
                if (_condition_65837.isBuiltAndTrue ()) {
                  if (_variant_65837.uintValue () == 0) {
                    _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1663)) ;
                    _condition_65837 = GGS_bool (true, false) ;
                  }else{
                    _variant_65837._decrement_operation (_inLexique COMMA_HERE) ;
                    var_cas_argumentsList._addAssign_operation (GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE)) ;
                    var_cas_jokerCount._decrement_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1663)) ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_13 = false ;
          break ;
      }
    }
  }
  GGS_bool var_cas_ellipsisFound ;
  switch (select_expression_parser_15 (_inLexique)) {
    case 1 : {
      var_cas_ellipsisFound = GGS_bool (true, false) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_2E_2E) COMMA_HERE) ;
      var_cas_ellipsisFound = GGS_bool (true, true) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
  ::routine_buildMapWithLocalConstants (_inLexique,  var_cas_argumentsList,  var_cas_inFormalArgumentsList,  var_cas_ioVariablesMap,  var_cas_inVarLocation,  var_cas_inLocalConstantStyle,  var_cas_ellipsisFound COMMA_SOURCE_FILE_AT_LINE (1675)) ;
}

//---------------------------------------------------------------------------*

void expression_parser::
pr_parse_effective_input_parameters_list_expression_parser_1633_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  { bool syntaxRepeat_13 = true ;
    while (syntaxRepeat_13) {
      switch (select_repeat_expression_parser_13 (_inLexique)) {
        case 2 : {
          switch (select_expression_parser_14 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
              } break ;
            case 3 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_13 = false ;
          break ;
      }
    }
  }
  switch (select_expression_parser_15 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_2E_2E) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

