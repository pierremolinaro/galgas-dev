//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'grammarCompilation.h'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    september 20th, 2009, at 13h38'37"                     *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef grammarCompilation_DEFINED
#define grammarCompilation_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_data.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_listmap.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

// Include imported semantics
#include "grammarMetamodel.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_nonTerminalMap ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Map '@nonTerminalMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_nonTerminalMap ;

class GGS_nonTerminalMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_nonTerminalMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_nonTerminalMap & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_nonTerminalMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_nonTerminalMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_nonTerminalMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_nonTerminalMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kInsertMessage_insertKey [] ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_nonTerminalLabelList &  inParameter0,
                                const GGS_bool&  inParameter1 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_searchKey [] ;

//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_nonTerminalLabelList   & outParameter0,
                                GGS_bool  & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_nonTerminalLabelList & inParameter0,
                                   const GGS_bool& inParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_nonTerminalLabelList & outParameter0,
                                   GGS_bool& outParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & inLexique
                                          COMMA_LOCATION_ARGS,
                                          const PMSInt32 inIndentation = 0) const ;
  public : static GGS_nonTerminalMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_nonTerminalMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_nonTerminalMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_nonTerminalMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_nonTerminalMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_nonTerminalLabelList   & _mLabels (LOCATION_ARGS) const ;
    public : /* const */ GGS_bool  & _mHasParseLabel (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Routine 'handleNonTerminalDeclarations'                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_handleNonTerminalDeclarations (C_Compiler &,
                                GGS_nonTerminalMap  &,
                                const GGS_nonterminalDeclarationList   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@syntaxInstruction.buildSyntaxInstructionList'       *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList)  (C_Compiler & inLexique,
                                const cPtr_syntaxInstruction * inObjectPtr,
                                GGS_syntaxInstructionList  & var_cas_ioSyntaxInstructionList
                                COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__syntaxInstruction__buildSyntaxInstructionList (typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList inRoutine,
                     const PMSInt32 inClassID) ;

//---------------------------------------------------------------------------*

typeCategoryMethod__syntaxInstruction__buildSyntaxInstructionList
findCategoryMethod__syntaxInstruction__buildSyntaxInstructionList (AC_galgasClassRunTimeInformation * inClassPtr) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Routine 'buildSyntaxInstructionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildSyntaxInstructionList (C_Compiler &,
                                const GGS_syntaxInstructionList  ,
                                GGS_syntaxInstructionList  & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Routine 'handleRules'                            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_handleRules (C_Compiler &,
                                const GGS_syntaxRuleList   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Routine 'compileGrammarComponent'                      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileGrammarComponent (C_Compiler &,
                                const GGS_lstring  ,
                                const GGS_string ,
                                GGS_parsedComponentStruct & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of map '@nonTerminalMap'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class e_nonTerminalMap {
  public : GGS_nonTerminalLabelList  mLabels ;
  public : GGS_bool mHasParseLabel ;

  public : e_nonTerminalMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_nonTerminalMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_nonTerminalMap (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_nonTerminalMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_nonTerminalMap * nextObject (void) const { return (elementOf_GGS_nonTerminalMap *) mNextItem ; }
  public : inline elementOf_GGS_nonTerminalMap * infObject (void) const { return (elementOf_GGS_nonTerminalMap *) mInfPtr ; }
  public : inline elementOf_GGS_nonTerminalMap * supObject (void) const { return (elementOf_GGS_nonTerminalMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_nonTerminalMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & inLexique,
                                         const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#endif
