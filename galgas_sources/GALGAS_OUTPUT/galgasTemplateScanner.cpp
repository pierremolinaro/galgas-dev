//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'galgasTemplateScanner.cpp'                      *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 10th, 2009, at 14h48'44"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <ctype.h>
#include <string.h>

#include "utilities/MF_MemoryControl.h"
#include "galgasTemplateScanner.h"

#include "strings/unicode_character.h"
#include "galgas/scanner_actions.h"
#ifndef DO_NOT_GENERATE_CHECKINGS
  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFileName ().cString (HERE), lineNumber ()
  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE
#else
  #define LINE_AND_SOURCE_FILE
  #define COMMA_LINE_AND_SOURCE_FILE
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                           Template Delimiters                             *
//                                                                           *
//---------------------------------------------------------------------------*

static const utf32 kTemplateDefinitionArray_0_startString [] = {
  TO_UNICODE ('%'),
  TO_UNICODE (0)
} ;

static const utf32 kTemplateDefinitionArray_0_endString [] = {
  TO_UNICODE ('%'),
  TO_UNICODE (0)
} ;

static const templateDelimiterStruct kTemplateDefinitionArray [1] = {
  {kTemplateDefinitionArray_0_startString, 1, kTemplateDefinitionArray_0_endString, 1, NULL, true},
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Template Replacements                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const utf32 kTemplateReplacementArray_0_startString [] = {
  TO_UNICODE ('!'),
  TO_UNICODE ('%'),
  TO_UNICODE (0)
} ;

static const utf32 kTemplateReplacementArray_0_endString [] = {
  TO_UNICODE ('%'),
  TO_UNICODE (0)
} ;

static const utf32 kTemplateReplacementArray_1_startString [] = {
  TO_UNICODE ('\\'),
  TO_UNICODE ('%'),
  TO_UNICODE (0)
} ;

static const utf32 kTemplateReplacementArray_1_endString [] = {
  TO_UNICODE (10),
  TO_UNICODE (0)
} ;

static const templateDelimiterStruct kTemplateReplacementArray [2] = {
  {kTemplateReplacementArray_0_startString, 2, kTemplateReplacementArray_0_endString, 1, NULL, true},
  {kTemplateReplacementArray_1_startString, 2, kTemplateReplacementArray_1_endString, 1, NULL, true},
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Terminal Symbols as end of script in template mark             *
//                                                                           *
//---------------------------------------------------------------------------*

static const bool kEndOfScriptInTemplateArray [138] = {
  false, // $identifier$
  false, // $abstract$
  false, // $after$
  false, // $before$
  false, // $between$
  false, // $block$
  false, // $cast$
  false, // $class$
  false, // $compile$
  false, // $const$
  false, // $constructor$
  false, // $default$
  false, // $description$
  false, // $dependency$
  false, // $do$
  false, // $domain$
  false, // $drop$
  false, // $else$
  false, // $elsif$
  false, // $end$
  false, // $enum$
  false, // $error$
  false, // $extends$
  false, // $extern$
  false, // $extract$
  false, // $false$
  false, // $feature$
  false, // $filewrapper$
  false, // $foreach$
  false, // $function$
  false, // $grammar$
  false, // $gui$
  false, // $here$
  false, // $if$
  false, // $import$
  false, // $import__$
  false, // $in$
  false, // $insert$
  false, // $label$
  false, // $lazy$
  false, // $lexique$
  false, // $list$
  false, // $listmap$
  false, // $log$
  false, // $loop$
  false, // $map$
  false, // $mapindex$
  false, // $match$
  false, // $message$
  false, // $method$
  false, // $mod$
  false, // $modifier$
  false, // $nonterminal$
  false, // $not$
  false, // $on$
  false, // $operator$
  false, // $option$
  false, // $or$
  false, // $override$
  false, // $parse$
  false, // $project$
  false, // $program$
  false, // $reader$
  false, // $remove$
  false, // $replace$
  false, // $repeat$
  false, // $rewind$
  false, // $root$
  false, // $routine$
  false, // $rule$
  false, // $search$
  false, // $select$
  false, // $self$
  false, // $semantics$
  false, // $send$
  false, // $sortedlist$
  false, // $state$
  false, // $struct$
  false, // $style$
  false, // $switch$
  false, // $syntax$
  false, // $tag$
  false, // $template$
  false, // $then$
  false, // $true$
  false, // $unused$
  false, // $warning$
  false, // $when$
  false, // $while$
  false, // $with$
  false, // $literal_double$
  false, // $unsigned_literal_integer$
  false, // $signed_literal_integer$
  false, // $unsigned_literal_integer64$
  false, // $signed_literal_integer64$
  false, // $.$
  false, // $.=$
  false, // $...$
  false, // $*$
  false, // $|$
  false, // $,$
  false, // $+$
  false, // $--$
  false, // $::$
  false, // $>$
  false, // $;$
  false, // $:$
  false, // $-$
  false, // $($
  false, // $)$
  false, // $->$
  false, // $?$
  false, // $==$
  false, // $??$
  false, // $!$
  false, // $:=$
  false, // $++$
  false, // $[$
  false, // $]$
  false, // $+=$
  false, // $?!$
  false, // $!?$
  false, // $/$
  false, // $!=$
  false, // $>=$
  false, // $&$
  false, // ${$
  false, // $}$
  false, // $+>$
  false, // $-=$
  false, // $^$
  false, // $>>$
  false, // $~$
  false, // $<-$
  false, // $<$
  false, // $<=$
  false, // $<<$
  false, // $comment$
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                               Constructors                                *
//                                                                           *
//---------------------------------------------------------------------------*

cTokenFor_galgasTemplateScanner::cTokenFor_galgasTemplateScanner (void) :
identifierString (),
uint32value (),
sint32value (),
uint64value (),
sint64value (),
charValue (),
tokenString (),
floatValue () {
}

//---------------------------------------------------------------------------*

galgasTemplateScanner::
galgasTemplateScanner (C_Compiler * inCallerCompiler,
                const C_String & inDependencyFileExtension,
                const C_String & inDependencyFilePath,
                C_galgas_io * inParametersPtr,
                const C_String & inSourceFileName
                COMMA_LOCATION_ARGS) :
C_Lexique (inCallerCompiler, inDependencyFileExtension, inDependencyFilePath, inParametersPtr, inSourceFileName COMMA_THERE),
mMatchedTemplateDelimiterIndex (-1) {
}

//---------------------------------------------------------------------------*

galgasTemplateScanner::
galgasTemplateScanner (C_Compiler * inCallerCompiler,
                C_galgas_io * inParametersPtr,
                const C_String & inSourceString,
                const C_String & inStringForError
                COMMA_LOCATION_ARGS) :
C_Lexique (inCallerCompiler, inParametersPtr, inSourceString, inStringForError COMMA_THERE),
mMatchedTemplateDelimiterIndex (-1) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Lexical error message list                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Message 0
static const utf32 gErrorMessage_0 [] = {
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;
//--- Message 1
static const utf32 gErrorMessage_1 [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;
//--- Message 2
static const utf32 gErrorMessage_2 [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Syntax error messages                            *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Syntax error message for terminal '$identifier$' :
static const utf32 gSyntaxErrorMessage_identifier [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$abstract$' :
static const utf32 gSyntaxErrorMessage_abstract [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$after$' :
static const utf32 gSyntaxErrorMessage_after [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('a'),
  TO_UNICODE ('f'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$before$' :
static const utf32 gSyntaxErrorMessage_before [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$between$' :
static const utf32 gSyntaxErrorMessage_between [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$block$' :
static const utf32 gSyntaxErrorMessage_block [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('k'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$cast$' :
static const utf32 gSyntaxErrorMessage_cast [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$class$' :
static const utf32 gSyntaxErrorMessage_class [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$compile$' :
static const utf32 gSyntaxErrorMessage_compile [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$const$' :
static const utf32 gSyntaxErrorMessage_const [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$constructor$' :
static const utf32 gSyntaxErrorMessage_constructor [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('u'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$default$' :
static const utf32 gSyntaxErrorMessage_default [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('a'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$description$' :
static const utf32 gSyntaxErrorMessage_description [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('c'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$dependency$' :
static const utf32 gSyntaxErrorMessage_dependency [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('y'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$do$' :
static const utf32 gSyntaxErrorMessage_do [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('d'),
  TO_UNICODE ('o'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$domain$' :
static const utf32 gSyntaxErrorMessage_domain [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('d'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$drop$' :
static const utf32 gSyntaxErrorMessage_drop [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$else$' :
static const utf32 gSyntaxErrorMessage_else [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$elsif$' :
static const utf32 gSyntaxErrorMessage_elsif [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('s'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$end$' :
static const utf32 gSyntaxErrorMessage_end [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$enum$' :
static const utf32 gSyntaxErrorMessage_enum [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$error$' :
static const utf32 gSyntaxErrorMessage_error [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$extends$' :
static const utf32 gSyntaxErrorMessage_extends [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('e'),
  TO_UNICODE ('x'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('s'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$extern$' :
static const utf32 gSyntaxErrorMessage_extern [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('e'),
  TO_UNICODE ('x'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('n'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$extract$' :
static const utf32 gSyntaxErrorMessage_extract [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('e'),
  TO_UNICODE ('x'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$false$' :
static const utf32 gSyntaxErrorMessage_false [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('f'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$feature$' :
static const utf32 gSyntaxErrorMessage_feature [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$filewrapper$' :
static const utf32 gSyntaxErrorMessage_filewrapper [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$foreach$' :
static const utf32 gSyntaxErrorMessage_foreach [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$function$' :
static const utf32 gSyntaxErrorMessage_function [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('f'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$grammar$' :
static const utf32 gSyntaxErrorMessage_grammar [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('g'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$gui$' :
static const utf32 gSyntaxErrorMessage_gui [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('i'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$here$' :
static const utf32 gSyntaxErrorMessage_here [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$if$' :
static const utf32 gSyntaxErrorMessage_if [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$import$' :
static const utf32 gSyntaxErrorMessage_import [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$import__$' :
static const utf32 gSyntaxErrorMessage_import_5F_5F [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('t'),
  TO_UNICODE ('_'),
  TO_UNICODE ('_'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$in$' :
static const utf32 gSyntaxErrorMessage_in [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$insert$' :
static const utf32 gSyntaxErrorMessage_insert [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$label$' :
static const utf32 gSyntaxErrorMessage_label [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$lazy$' :
static const utf32 gSyntaxErrorMessage_lazy [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('z'),
  TO_UNICODE ('y'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$lexique$' :
static const utf32 gSyntaxErrorMessage_lexique [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('x'),
  TO_UNICODE ('i'),
  TO_UNICODE ('q'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$list$' :
static const utf32 gSyntaxErrorMessage_list [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$listmap$' :
static const utf32 gSyntaxErrorMessage_listmap [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('p'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$log$' :
static const utf32 gSyntaxErrorMessage_log [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('g'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$loop$' :
static const utf32 gSyntaxErrorMessage_loop [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$map$' :
static const utf32 gSyntaxErrorMessage_map [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('p'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$mapindex$' :
static const utf32 gSyntaxErrorMessage_mapindex [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('p'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('x'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$match$' :
static const utf32 gSyntaxErrorMessage_match [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$message$' :
static const utf32 gSyntaxErrorMessage_message [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$method$' :
static const utf32 gSyntaxErrorMessage_method [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$mod$' :
static const utf32 gSyntaxErrorMessage_mod [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('m'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$modifier$' :
static const utf32 gSyntaxErrorMessage_modifier [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('m'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$nonterminal$' :
static const utf32 gSyntaxErrorMessage_nonterminal [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$not$' :
static const utf32 gSyntaxErrorMessage_not [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$on$' :
static const utf32 gSyntaxErrorMessage_on [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$operator$' :
static const utf32 gSyntaxErrorMessage_operator [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$option$' :
static const utf32 gSyntaxErrorMessage_option [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$or$' :
static const utf32 gSyntaxErrorMessage_or [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$override$' :
static const utf32 gSyntaxErrorMessage_override [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('o'),
  TO_UNICODE ('v'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$parse$' :
static const utf32 gSyntaxErrorMessage_parse [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$project$' :
static const utf32 gSyntaxErrorMessage_project [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$program$' :
static const utf32 gSyntaxErrorMessage_program [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('g'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$reader$' :
static const utf32 gSyntaxErrorMessage_reader [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$remove$' :
static const utf32 gSyntaxErrorMessage_remove [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('m'),
  TO_UNICODE ('o'),
  TO_UNICODE ('v'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$replace$' :
static const utf32 gSyntaxErrorMessage_replace [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$repeat$' :
static const utf32 gSyntaxErrorMessage_repeat [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$rewind$' :
static const utf32 gSyntaxErrorMessage_rewind [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('w'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$root$' :
static const utf32 gSyntaxErrorMessage_root [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$routine$' :
static const utf32 gSyntaxErrorMessage_routine [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$rule$' :
static const utf32 gSyntaxErrorMessage_rule [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('r'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$search$' :
static const utf32 gSyntaxErrorMessage_search [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$select$' :
static const utf32 gSyntaxErrorMessage_select [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$self$' :
static const utf32 gSyntaxErrorMessage_self [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('f'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$semantics$' :
static const utf32 gSyntaxErrorMessage_semantics [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('c'),
  TO_UNICODE ('s'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$send$' :
static const utf32 gSyntaxErrorMessage_send [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$sortedlist$' :
static const utf32 gSyntaxErrorMessage_sortedlist [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$state$' :
static const utf32 gSyntaxErrorMessage_state [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$struct$' :
static const utf32 gSyntaxErrorMessage_struct [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('u'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$style$' :
static const utf32 gSyntaxErrorMessage_style [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$switch$' :
static const utf32 gSyntaxErrorMessage_switch [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('s'),
  TO_UNICODE ('w'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$syntax$' :
static const utf32 gSyntaxErrorMessage_syntax [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('s'),
  TO_UNICODE ('y'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('x'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$tag$' :
static const utf32 gSyntaxErrorMessage_tag [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$template$' :
static const utf32 gSyntaxErrorMessage_template [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$then$' :
static const utf32 gSyntaxErrorMessage_then [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$true$' :
static const utf32 gSyntaxErrorMessage_true [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$unused$' :
static const utf32 gSyntaxErrorMessage_unused [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$warning$' :
static const utf32 gSyntaxErrorMessage_warning [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$when$' :
static const utf32 gSyntaxErrorMessage_when [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$while$' :
static const utf32 gSyntaxErrorMessage_while [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$with$' :
static const utf32 gSyntaxErrorMessage_with [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('w'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('y'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$literal_double$' :
static const utf32 gSyntaxErrorMessage_literal_5Fdouble [] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$unsigned_literal_integer$' :
static const utf32 gSyntaxErrorMessage_unsigned_5Fliteral_5Finteger [] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('3'),
  TO_UNICODE ('2'),
  TO_UNICODE ('-'),
  TO_UNICODE ('b'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('i'),
  TO_UNICODE ('g'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$signed_literal_integer$' :
static const utf32 gSyntaxErrorMessage_signed_5Fliteral_5Finteger [] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('3'),
  TO_UNICODE ('2'),
  TO_UNICODE ('-'),
  TO_UNICODE ('b'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('i'),
  TO_UNICODE ('g'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$unsigned_literal_integer64$' :
static const utf32 gSyntaxErrorMessage_unsigned_5Fliteral_5Finteger64 [] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('6'),
  TO_UNICODE ('4'),
  TO_UNICODE ('-'),
  TO_UNICODE ('b'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('i'),
  TO_UNICODE ('g'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$signed_literal_integer64$' :
static const utf32 gSyntaxErrorMessage_signed_5Fliteral_5Finteger64 [] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('6'),
  TO_UNICODE ('4'),
  TO_UNICODE ('-'),
  TO_UNICODE ('b'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('i'),
  TO_UNICODE ('g'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$.$' :
static const utf32 gSyntaxErrorMessage__2E [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('.'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$.=$' :
static const utf32 gSyntaxErrorMessage__2E_3D [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('.'),
  TO_UNICODE ('='),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$...$' :
static const utf32 gSyntaxErrorMessage__2E_2E_2E [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('.'),
  TO_UNICODE ('.'),
  TO_UNICODE ('.'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$*$' :
static const utf32 gSyntaxErrorMessage__2A [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('*'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$|$' :
static const utf32 gSyntaxErrorMessage__7C [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('|'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$,$' :
static const utf32 gSyntaxErrorMessage__2C [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (','),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$+$' :
static const utf32 gSyntaxErrorMessage__2B [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('+'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$--$' :
static const utf32 gSyntaxErrorMessage__2D_2D [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('-'),
  TO_UNICODE ('-'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$::$' :
static const utf32 gSyntaxErrorMessage__3A_3A [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (':'),
  TO_UNICODE (':'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$>$' :
static const utf32 gSyntaxErrorMessage__3E [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('>'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$;$' :
static const utf32 gSyntaxErrorMessage__3B [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (';'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$:$' :
static const utf32 gSyntaxErrorMessage__3A [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (':'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$-$' :
static const utf32 gSyntaxErrorMessage__2D [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('-'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$($' :
static const utf32 gSyntaxErrorMessage__28 [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('('),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$)$' :
static const utf32 gSyntaxErrorMessage__29 [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (')'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$->$' :
static const utf32 gSyntaxErrorMessage__2D_3E [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('-'),
  TO_UNICODE ('>'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$?$' :
static const utf32 gSyntaxErrorMessage__3F [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('\?'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$==$' :
static const utf32 gSyntaxErrorMessage__3D_3D [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('='),
  TO_UNICODE ('='),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$??$' :
static const utf32 gSyntaxErrorMessage__3F_3F [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('\?'),
  TO_UNICODE ('\?'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$!$' :
static const utf32 gSyntaxErrorMessage__21 [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('!'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$:=$' :
static const utf32 gSyntaxErrorMessage__3A_3D [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (':'),
  TO_UNICODE ('='),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$++$' :
static const utf32 gSyntaxErrorMessage__2B_2B [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('+'),
  TO_UNICODE ('+'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$[$' :
static const utf32 gSyntaxErrorMessage__5B [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('['),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$]$' :
static const utf32 gSyntaxErrorMessage__5D [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE (']'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$+=$' :
static const utf32 gSyntaxErrorMessage__2B_3D [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('+'),
  TO_UNICODE ('='),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$?!$' :
static const utf32 gSyntaxErrorMessage__3F_21 [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('\?'),
  TO_UNICODE ('!'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$!?$' :
static const utf32 gSyntaxErrorMessage__21_3F [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('!'),
  TO_UNICODE ('\?'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$/$' :
static const utf32 gSyntaxErrorMessage__2F [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('/'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$!=$' :
static const utf32 gSyntaxErrorMessage__21_3D [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('!'),
  TO_UNICODE ('='),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$>=$' :
static const utf32 gSyntaxErrorMessage__3E_3D [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('>'),
  TO_UNICODE ('='),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$&$' :
static const utf32 gSyntaxErrorMessage__26 [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('&'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '${$' :
static const utf32 gSyntaxErrorMessage__7B [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('{'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$}$' :
static const utf32 gSyntaxErrorMessage__7D [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('}'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$+>$' :
static const utf32 gSyntaxErrorMessage__2B_3E [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('+'),
  TO_UNICODE ('>'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$-=$' :
static const utf32 gSyntaxErrorMessage__2D_3D [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('-'),
  TO_UNICODE ('='),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$^$' :
static const utf32 gSyntaxErrorMessage__5E [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('^'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$>>$' :
static const utf32 gSyntaxErrorMessage__3E_3E [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('>'),
  TO_UNICODE ('>'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$~$' :
static const utf32 gSyntaxErrorMessage__7E [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('~'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$<-$' :
static const utf32 gSyntaxErrorMessage__3C_2D [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('<'),
  TO_UNICODE ('-'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$<$' :
static const utf32 gSyntaxErrorMessage__3C [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('<'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$<=$' :
static const utf32 gSyntaxErrorMessage__3C_3D [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('<'),
  TO_UNICODE ('='),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$<<$' :
static const utf32 gSyntaxErrorMessage__3C_3C [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('<'),
  TO_UNICODE ('<'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$comment$' :
static const utf32 gSyntaxErrorMessage_comment [] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for 'end of source' :
static const utf32 kEndOfSourceLexicalErrorMessage [] = {
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                appendTerminalMessageToSyntaxErrorMessage                  *
//                                                                           *
//---------------------------------------------------------------------------*

void galgasTemplateScanner::
appendTerminalMessageToSyntaxErrorMessage (const sint16 inTerminalIndex,
                                           C_String & outSyntaxErrorMessage) {
  static const utf32 * syntaxErrorMessageArray [139] = {kEndOfSourceLexicalErrorMessage,
       gSyntaxErrorMessage_identifier,
       gSyntaxErrorMessage_abstract,
       gSyntaxErrorMessage_after,
       gSyntaxErrorMessage_before,
       gSyntaxErrorMessage_between,
       gSyntaxErrorMessage_block,
       gSyntaxErrorMessage_cast,
       gSyntaxErrorMessage_class,
       gSyntaxErrorMessage_compile,
       gSyntaxErrorMessage_const,
       gSyntaxErrorMessage_constructor,
       gSyntaxErrorMessage_default,
       gSyntaxErrorMessage_description,
       gSyntaxErrorMessage_dependency,
       gSyntaxErrorMessage_do,
       gSyntaxErrorMessage_domain,
       gSyntaxErrorMessage_drop,
       gSyntaxErrorMessage_else,
       gSyntaxErrorMessage_elsif,
       gSyntaxErrorMessage_end,
       gSyntaxErrorMessage_enum,
       gSyntaxErrorMessage_error,
       gSyntaxErrorMessage_extends,
       gSyntaxErrorMessage_extern,
       gSyntaxErrorMessage_extract,
       gSyntaxErrorMessage_false,
       gSyntaxErrorMessage_feature,
       gSyntaxErrorMessage_filewrapper,
       gSyntaxErrorMessage_foreach,
       gSyntaxErrorMessage_function,
       gSyntaxErrorMessage_grammar,
       gSyntaxErrorMessage_gui,
       gSyntaxErrorMessage_here,
       gSyntaxErrorMessage_if,
       gSyntaxErrorMessage_import,
       gSyntaxErrorMessage_import_5F_5F,
       gSyntaxErrorMessage_in,
       gSyntaxErrorMessage_insert,
       gSyntaxErrorMessage_label,
       gSyntaxErrorMessage_lazy,
       gSyntaxErrorMessage_lexique,
       gSyntaxErrorMessage_list,
       gSyntaxErrorMessage_listmap,
       gSyntaxErrorMessage_log,
       gSyntaxErrorMessage_loop,
       gSyntaxErrorMessage_map,
       gSyntaxErrorMessage_mapindex,
       gSyntaxErrorMessage_match,
       gSyntaxErrorMessage_message,
       gSyntaxErrorMessage_method,
       gSyntaxErrorMessage_mod,
       gSyntaxErrorMessage_modifier,
       gSyntaxErrorMessage_nonterminal,
       gSyntaxErrorMessage_not,
       gSyntaxErrorMessage_on,
       gSyntaxErrorMessage_operator,
       gSyntaxErrorMessage_option,
       gSyntaxErrorMessage_or,
       gSyntaxErrorMessage_override,
       gSyntaxErrorMessage_parse,
       gSyntaxErrorMessage_project,
       gSyntaxErrorMessage_program,
       gSyntaxErrorMessage_reader,
       gSyntaxErrorMessage_remove,
       gSyntaxErrorMessage_replace,
       gSyntaxErrorMessage_repeat,
       gSyntaxErrorMessage_rewind,
       gSyntaxErrorMessage_root,
       gSyntaxErrorMessage_routine,
       gSyntaxErrorMessage_rule,
       gSyntaxErrorMessage_search,
       gSyntaxErrorMessage_select,
       gSyntaxErrorMessage_self,
       gSyntaxErrorMessage_semantics,
       gSyntaxErrorMessage_send,
       gSyntaxErrorMessage_sortedlist,
       gSyntaxErrorMessage_state,
       gSyntaxErrorMessage_struct,
       gSyntaxErrorMessage_style,
       gSyntaxErrorMessage_switch,
       gSyntaxErrorMessage_syntax,
       gSyntaxErrorMessage_tag,
       gSyntaxErrorMessage_template,
       gSyntaxErrorMessage_then,
       gSyntaxErrorMessage_true,
       gSyntaxErrorMessage_unused,
       gSyntaxErrorMessage_warning,
       gSyntaxErrorMessage_when,
       gSyntaxErrorMessage_while,
       gSyntaxErrorMessage_with,
       gSyntaxErrorMessage_literal_5Fdouble,
       gSyntaxErrorMessage_unsigned_5Fliteral_5Finteger,
       gSyntaxErrorMessage_signed_5Fliteral_5Finteger,
       gSyntaxErrorMessage_unsigned_5Fliteral_5Finteger64,
       gSyntaxErrorMessage_signed_5Fliteral_5Finteger64,
       gSyntaxErrorMessage__2E,
       gSyntaxErrorMessage__2E_3D,
       gSyntaxErrorMessage__2E_2E_2E,
       gSyntaxErrorMessage__2A,
       gSyntaxErrorMessage__7C,
       gSyntaxErrorMessage__2C,
       gSyntaxErrorMessage__2B,
       gSyntaxErrorMessage__2D_2D,
       gSyntaxErrorMessage__3A_3A,
       gSyntaxErrorMessage__3E,
       gSyntaxErrorMessage__3B,
       gSyntaxErrorMessage__3A,
       gSyntaxErrorMessage__2D,
       gSyntaxErrorMessage__28,
       gSyntaxErrorMessage__29,
       gSyntaxErrorMessage__2D_3E,
       gSyntaxErrorMessage__3F,
       gSyntaxErrorMessage__3D_3D,
       gSyntaxErrorMessage__3F_3F,
       gSyntaxErrorMessage__21,
       gSyntaxErrorMessage__3A_3D,
       gSyntaxErrorMessage__2B_2B,
       gSyntaxErrorMessage__5B,
       gSyntaxErrorMessage__5D,
       gSyntaxErrorMessage__2B_3D,
       gSyntaxErrorMessage__3F_21,
       gSyntaxErrorMessage__21_3F,
       gSyntaxErrorMessage__2F,
       gSyntaxErrorMessage__21_3D,
       gSyntaxErrorMessage__3E_3D,
       gSyntaxErrorMessage__26,
       gSyntaxErrorMessage__7B,
       gSyntaxErrorMessage__7D,
       gSyntaxErrorMessage__2B_3E,
       gSyntaxErrorMessage__2D_3D,
       gSyntaxErrorMessage__5E,
       gSyntaxErrorMessage__3E_3E,
       gSyntaxErrorMessage__7E,
       gSyntaxErrorMessage__3C_2D,
       gSyntaxErrorMessage__3C,
       gSyntaxErrorMessage__3C_3D,
       gSyntaxErrorMessage__3C_3C,
       gSyntaxErrorMessage_comment} ;
  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Key words table 'galgasKeyWordList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_galgasKeyWordList = 89 ;

static const utf32 kEntry_0_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('d'),
  TO_UNICODE ('o'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('i'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('g'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_8_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('p'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_9_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_10_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_11_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_12_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_13_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_14_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_15_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_16_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_17_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('z'),
  TO_UNICODE ('y'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_18_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_19_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_20_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_21_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_22_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('f'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_23_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_24_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_25_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_26_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_27_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('w'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_28_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('f'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_29_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('k'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_30_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_31_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_32_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('s'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_33_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_34_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('f'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_35_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_36_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_37_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_38_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_39_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_40_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_41_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_42_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('d'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_43_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('e'),
  TO_UNICODE ('x'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_44_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_45_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_46_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_47_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_48_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_49_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('m'),
  TO_UNICODE ('o'),
  TO_UNICODE ('v'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_50_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_51_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('w'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_52_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_53_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_54_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('u'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_55_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('w'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_56_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('y'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('x'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_57_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_58_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_59_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_60_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('a'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_61_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('e'),
  TO_UNICODE ('x'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('s'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_62_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('e'),
  TO_UNICODE ('x'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_63_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_64_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_65_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('g'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_66_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('x'),
  TO_UNICODE ('i'),
  TO_UNICODE ('q'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_67_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('p'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_68_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_69_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('g'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_70_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_71_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_72_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_73_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_74_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_75_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('f'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_76_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('t'),
  TO_UNICODE ('_'),
  TO_UNICODE ('_'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_77_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('p'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('x'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_78_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_79_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_80_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('v'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_81_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_82_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('c'),
  TO_UNICODE ('s'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_83_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('y'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_84_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_85_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('u'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_86_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('c'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_87_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_88_forTable_galgasKeyWordList [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_galgasKeyWordList [ktable_size_galgasKeyWordList] = {
  {kEntry_0_forTable_galgasKeyWordList, 2, galgasTemplateScanner::galgasTemplateScanner_1_do},
  {kEntry_1_forTable_galgasKeyWordList, 2, galgasTemplateScanner::galgasTemplateScanner_1_if},
  {kEntry_2_forTable_galgasKeyWordList, 2, galgasTemplateScanner::galgasTemplateScanner_1_in},
  {kEntry_3_forTable_galgasKeyWordList, 2, galgasTemplateScanner::galgasTemplateScanner_1_on},
  {kEntry_4_forTable_galgasKeyWordList, 2, galgasTemplateScanner::galgasTemplateScanner_1_or},
  {kEntry_5_forTable_galgasKeyWordList, 3, galgasTemplateScanner::galgasTemplateScanner_1_end},
  {kEntry_6_forTable_galgasKeyWordList, 3, galgasTemplateScanner::galgasTemplateScanner_1_gui},
  {kEntry_7_forTable_galgasKeyWordList, 3, galgasTemplateScanner::galgasTemplateScanner_1_log},
  {kEntry_8_forTable_galgasKeyWordList, 3, galgasTemplateScanner::galgasTemplateScanner_1_map},
  {kEntry_9_forTable_galgasKeyWordList, 3, galgasTemplateScanner::galgasTemplateScanner_1_mod},
  {kEntry_10_forTable_galgasKeyWordList, 3, galgasTemplateScanner::galgasTemplateScanner_1_not},
  {kEntry_11_forTable_galgasKeyWordList, 3, galgasTemplateScanner::galgasTemplateScanner_1_tag},
  {kEntry_12_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_cast},
  {kEntry_13_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_drop},
  {kEntry_14_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_else},
  {kEntry_15_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_enum},
  {kEntry_16_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_here},
  {kEntry_17_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_lazy},
  {kEntry_18_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_list},
  {kEntry_19_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_loop},
  {kEntry_20_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_root},
  {kEntry_21_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_rule},
  {kEntry_22_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_self},
  {kEntry_23_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_send},
  {kEntry_24_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_then},
  {kEntry_25_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_true},
  {kEntry_26_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_when},
  {kEntry_27_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_with},
  {kEntry_28_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_after},
  {kEntry_29_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_block},
  {kEntry_30_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_class},
  {kEntry_31_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_const},
  {kEntry_32_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_elsif},
  {kEntry_33_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_error},
  {kEntry_34_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_false},
  {kEntry_35_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_label},
  {kEntry_36_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_match},
  {kEntry_37_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_parse},
  {kEntry_38_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_state},
  {kEntry_39_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_style},
  {kEntry_40_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_while},
  {kEntry_41_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_before},
  {kEntry_42_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_domain},
  {kEntry_43_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_extern},
  {kEntry_44_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_import},
  {kEntry_45_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_insert},
  {kEntry_46_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_method},
  {kEntry_47_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_option},
  {kEntry_48_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_reader},
  {kEntry_49_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_remove},
  {kEntry_50_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_repeat},
  {kEntry_51_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_rewind},
  {kEntry_52_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_search},
  {kEntry_53_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_select},
  {kEntry_54_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_struct},
  {kEntry_55_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_switch},
  {kEntry_56_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_syntax},
  {kEntry_57_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_unused},
  {kEntry_58_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_between},
  {kEntry_59_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_compile},
  {kEntry_60_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_default},
  {kEntry_61_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_extends},
  {kEntry_62_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_extract},
  {kEntry_63_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_feature},
  {kEntry_64_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_foreach},
  {kEntry_65_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_grammar},
  {kEntry_66_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_lexique},
  {kEntry_67_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_listmap},
  {kEntry_68_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_message},
  {kEntry_69_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_program},
  {kEntry_70_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_project},
  {kEntry_71_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_replace},
  {kEntry_72_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_routine},
  {kEntry_73_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_warning},
  {kEntry_74_forTable_galgasKeyWordList, 8, galgasTemplateScanner::galgasTemplateScanner_1_abstract},
  {kEntry_75_forTable_galgasKeyWordList, 8, galgasTemplateScanner::galgasTemplateScanner_1_function},
  {kEntry_76_forTable_galgasKeyWordList, 8, galgasTemplateScanner::galgasTemplateScanner_1_import_5F_5F},
  {kEntry_77_forTable_galgasKeyWordList, 8, galgasTemplateScanner::galgasTemplateScanner_1_mapindex},
  {kEntry_78_forTable_galgasKeyWordList, 8, galgasTemplateScanner::galgasTemplateScanner_1_modifier},
  {kEntry_79_forTable_galgasKeyWordList, 8, galgasTemplateScanner::galgasTemplateScanner_1_operator},
  {kEntry_80_forTable_galgasKeyWordList, 8, galgasTemplateScanner::galgasTemplateScanner_1_override},
  {kEntry_81_forTable_galgasKeyWordList, 8, galgasTemplateScanner::galgasTemplateScanner_1_template},
  {kEntry_82_forTable_galgasKeyWordList, 9, galgasTemplateScanner::galgasTemplateScanner_1_semantics},
  {kEntry_83_forTable_galgasKeyWordList, 10, galgasTemplateScanner::galgasTemplateScanner_1_dependency},
  {kEntry_84_forTable_galgasKeyWordList, 10, galgasTemplateScanner::galgasTemplateScanner_1_sortedlist},
  {kEntry_85_forTable_galgasKeyWordList, 11, galgasTemplateScanner::galgasTemplateScanner_1_constructor},
  {kEntry_86_forTable_galgasKeyWordList, 11, galgasTemplateScanner::galgasTemplateScanner_1_description},
  {kEntry_87_forTable_galgasKeyWordList, 11, galgasTemplateScanner::galgasTemplateScanner_1_filewrapper},
  {kEntry_88_forTable_galgasKeyWordList, 11, galgasTemplateScanner::galgasTemplateScanner_1_nonterminal}
} ;

sint16 galgasTemplateScanner::search_into_galgasKeyWordList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_galgasKeyWordList, ktable_size_galgasKeyWordList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Key words table 'galgasDelimitorsList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_galgasDelimitorsList = 36 ;

static const utf32 kEntry_0_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('!'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('&'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('('),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_galgasDelimitorsList [] = {
  TO_UNICODE (')'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('*'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('+'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_galgasDelimitorsList [] = {
  TO_UNICODE (','),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('-'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_8_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('/'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_9_forTable_galgasDelimitorsList [] = {
  TO_UNICODE (':'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_10_forTable_galgasDelimitorsList [] = {
  TO_UNICODE (';'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_11_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('>'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_12_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('\?'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_13_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('['),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_14_forTable_galgasDelimitorsList [] = {
  TO_UNICODE (']'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_15_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('^'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_16_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('{'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_17_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('|'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_18_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('}'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_19_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('~'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_20_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('!'),
  TO_UNICODE ('='),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_21_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('!'),
  TO_UNICODE ('\?'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_22_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('+'),
  TO_UNICODE ('+'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_23_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('+'),
  TO_UNICODE ('='),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_24_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('+'),
  TO_UNICODE ('>'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_25_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('-'),
  TO_UNICODE ('-'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_26_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('-'),
  TO_UNICODE ('='),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_27_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('-'),
  TO_UNICODE ('>'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_28_forTable_galgasDelimitorsList [] = {
  TO_UNICODE (':'),
  TO_UNICODE (':'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_29_forTable_galgasDelimitorsList [] = {
  TO_UNICODE (':'),
  TO_UNICODE ('='),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_30_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('<'),
  TO_UNICODE ('-'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_31_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('='),
  TO_UNICODE ('='),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_32_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('>'),
  TO_UNICODE ('='),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_33_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('>'),
  TO_UNICODE ('>'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_34_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('\?'),
  TO_UNICODE ('!'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_35_forTable_galgasDelimitorsList [] = {
  TO_UNICODE ('\?'),
  TO_UNICODE ('\?'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_galgasDelimitorsList [ktable_size_galgasDelimitorsList] = {
  {kEntry_0_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__21},
  {kEntry_1_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__26},
  {kEntry_2_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__28},
  {kEntry_3_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__29},
  {kEntry_4_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__2A},
  {kEntry_5_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__2B},
  {kEntry_6_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__2C},
  {kEntry_7_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__2D},
  {kEntry_8_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__2F},
  {kEntry_9_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__3A},
  {kEntry_10_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__3B},
  {kEntry_11_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__3E},
  {kEntry_12_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__3F},
  {kEntry_13_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__5B},
  {kEntry_14_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__5D},
  {kEntry_15_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__5E},
  {kEntry_16_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__7B},
  {kEntry_17_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__7C},
  {kEntry_18_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__7D},
  {kEntry_19_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__7E},
  {kEntry_20_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__21_3D},
  {kEntry_21_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__21_3F},
  {kEntry_22_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__2B_2B},
  {kEntry_23_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__2B_3D},
  {kEntry_24_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__2B_3E},
  {kEntry_25_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__2D_2D},
  {kEntry_26_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__2D_3D},
  {kEntry_27_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__2D_3E},
  {kEntry_28_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__3A_3A},
  {kEntry_29_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__3A_3D},
  {kEntry_30_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__3C_2D},
  {kEntry_31_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__3D_3D},
  {kEntry_32_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__3E_3D},
  {kEntry_33_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__3E_3E},
  {kEntry_34_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__3F_21},
  {kEntry_35_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__3F_3F}
} ;

sint16 galgasTemplateScanner::search_into_galgasDelimitorsList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_galgasDelimitorsList, ktable_size_galgasDelimitorsList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          getCurrentTokenString                            *
//                                                                           *
//---------------------------------------------------------------------------*

C_String galgasTemplateScanner::
getCurrentTokenString (const cToken * inTokenPtr) const {
  cTokenFor_galgasTemplateScanner * ptr = (cTokenFor_galgasTemplateScanner *) inTokenPtr ;
  C_String s ;
  if (ptr == NULL) {
    s << "$$" ;
  }else{
    switch (ptr->mTokenCode) {
    case  galgasTemplateScanner_1_:
      s << "$$" ;
      break ;
    case  galgasTemplateScanner_1_identifier:
      s << "$"
        << "identifier"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (ptr->tokenString) ;
      break;
    case  galgasTemplateScanner_1_abstract:
      s << "$"
        << "abstract"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_after:
      s << "$"
        << "after"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_before:
      s << "$"
        << "before"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_between:
      s << "$"
        << "between"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_block:
      s << "$"
        << "block"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_cast:
      s << "$"
        << "cast"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_class:
      s << "$"
        << "class"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_compile:
      s << "$"
        << "compile"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_const:
      s << "$"
        << "const"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_constructor:
      s << "$"
        << "constructor"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_default:
      s << "$"
        << "default"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_description:
      s << "$"
        << "description"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_dependency:
      s << "$"
        << "dependency"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_do:
      s << "$"
        << "do"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_domain:
      s << "$"
        << "domain"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_drop:
      s << "$"
        << "drop"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_else:
      s << "$"
        << "else"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_elsif:
      s << "$"
        << "elsif"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_end:
      s << "$"
        << "end"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_enum:
      s << "$"
        << "enum"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_error:
      s << "$"
        << "error"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_extends:
      s << "$"
        << "extends"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_extern:
      s << "$"
        << "extern"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_extract:
      s << "$"
        << "extract"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_false:
      s << "$"
        << "false"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_feature:
      s << "$"
        << "feature"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_filewrapper:
      s << "$"
        << "filewrapper"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_foreach:
      s << "$"
        << "foreach"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_function:
      s << "$"
        << "function"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_grammar:
      s << "$"
        << "grammar"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_gui:
      s << "$"
        << "gui"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_here:
      s << "$"
        << "here"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_if:
      s << "$"
        << "if"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_import:
      s << "$"
        << "import"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_import_5F_5F:
      s << "$"
        << "import__"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_in:
      s << "$"
        << "in"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_insert:
      s << "$"
        << "insert"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_label:
      s << "$"
        << "label"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_lazy:
      s << "$"
        << "lazy"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_lexique:
      s << "$"
        << "lexique"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_list:
      s << "$"
        << "list"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_listmap:
      s << "$"
        << "listmap"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_log:
      s << "$"
        << "log"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_loop:
      s << "$"
        << "loop"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_map:
      s << "$"
        << "map"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_mapindex:
      s << "$"
        << "mapindex"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_match:
      s << "$"
        << "match"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_message:
      s << "$"
        << "message"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_method:
      s << "$"
        << "method"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_mod:
      s << "$"
        << "mod"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_modifier:
      s << "$"
        << "modifier"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_nonterminal:
      s << "$"
        << "nonterminal"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_not:
      s << "$"
        << "not"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_on:
      s << "$"
        << "on"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_operator:
      s << "$"
        << "operator"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_option:
      s << "$"
        << "option"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_or:
      s << "$"
        << "or"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_override:
      s << "$"
        << "override"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_parse:
      s << "$"
        << "parse"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_project:
      s << "$"
        << "project"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_program:
      s << "$"
        << "program"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_reader:
      s << "$"
        << "reader"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_remove:
      s << "$"
        << "remove"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_replace:
      s << "$"
        << "replace"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_repeat:
      s << "$"
        << "repeat"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_rewind:
      s << "$"
        << "rewind"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_root:
      s << "$"
        << "root"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_routine:
      s << "$"
        << "routine"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_rule:
      s << "$"
        << "rule"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_search:
      s << "$"
        << "search"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_select:
      s << "$"
        << "select"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_self:
      s << "$"
        << "self"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_semantics:
      s << "$"
        << "semantics"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_send:
      s << "$"
        << "send"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_sortedlist:
      s << "$"
        << "sortedlist"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_state:
      s << "$"
        << "state"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_struct:
      s << "$"
        << "struct"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_style:
      s << "$"
        << "style"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_switch:
      s << "$"
        << "switch"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_syntax:
      s << "$"
        << "syntax"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_tag:
      s << "$"
        << "tag"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_template:
      s << "$"
        << "template"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_then:
      s << "$"
        << "then"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_true:
      s << "$"
        << "true"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_unused:
      s << "$"
        << "unused"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_warning:
      s << "$"
        << "warning"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_when:
      s << "$"
        << "when"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_while:
      s << "$"
        << "while"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_with:
      s << "$"
        << "with"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_literal_5Fdouble:
      s << "$"
        << "literal_double"
        << "$" ;
      s << " " ;
      s.appendDouble (ptr->floatValue) ;
    s << " " ;
    s.appendCLiteralStringConstant (ptr->tokenString) ;
      break;
    case  galgasTemplateScanner_1_unsigned_5Fliteral_5Finteger:
      s << "$"
        << "unsigned_literal_integer"
        << "$" ;
      s << " " ;
      s.appendUnsigned (ptr->uint32value) ;
      break;
    case  galgasTemplateScanner_1_signed_5Fliteral_5Finteger:
      s << "$"
        << "signed_literal_integer"
        << "$" ;
      s << " " ;
      s.appendSigned (ptr->sint32value) ;
      break;
    case  galgasTemplateScanner_1_unsigned_5Fliteral_5Finteger64:
      s << "$"
        << "unsigned_literal_integer64"
        << "$" ;
      s << " " ;
      s.appendUnsigned64 (ptr->uint64value) ;
      break;
    case  galgasTemplateScanner_1_signed_5Fliteral_5Finteger64:
      s << "$"
        << "signed_literal_integer64"
        << "$" ;
      s << " " ;
      s.appendSigned64 (ptr->sint64value) ;
      break;
    case  galgasTemplateScanner_1__2E:
      s << "$"
        << "."
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2E_3D:
      s << "$"
        << ".="
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2E_2E_2E:
      s << "$"
        << "..."
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2A:
      s << "$"
        << "*"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__7C:
      s << "$"
        << "|"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2C:
      s << "$"
        << ","
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2B:
      s << "$"
        << "+"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2D_2D:
      s << "$"
        << "--"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3A_3A:
      s << "$"
        << "::"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3E:
      s << "$"
        << ">"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3B:
      s << "$"
        << ";"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3A:
      s << "$"
        << ":"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2D:
      s << "$"
        << "-"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__28:
      s << "$"
        << "("
        << "$" ;
      break;
    case  galgasTemplateScanner_1__29:
      s << "$"
        << ")"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2D_3E:
      s << "$"
        << "->"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3F:
      s << "$"
        << "\?"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3D_3D:
      s << "$"
        << "=="
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3F_3F:
      s << "$"
        << "\?\?"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__21:
      s << "$"
        << "!"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3A_3D:
      s << "$"
        << ":="
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2B_2B:
      s << "$"
        << "++"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__5B:
      s << "$"
        << "["
        << "$" ;
      break;
    case  galgasTemplateScanner_1__5D:
      s << "$"
        << "]"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2B_3D:
      s << "$"
        << "+="
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3F_21:
      s << "$"
        << "\?!"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__21_3F:
      s << "$"
        << "!\?"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2F:
      s << "$"
        << "/"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__21_3D:
      s << "$"
        << "!="
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3E_3D:
      s << "$"
        << ">="
        << "$" ;
      break;
    case  galgasTemplateScanner_1__26:
      s << "$"
        << "&"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__7B:
      s << "$"
        << "{"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__7D:
      s << "$"
        << "}"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2B_3E:
      s << "$"
        << "+>"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2D_3D:
      s << "$"
        << "-="
        << "$" ;
      break;
    case  galgasTemplateScanner_1__5E:
      s << "$"
        << "^"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3E_3E:
      s << "$"
        << ">>"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__7E:
      s << "$"
        << "~"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3C_2D:
      s << "$"
        << "<-"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3C:
      s << "$"
        << "<"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3C_3D:
      s << "$"
        << "<="
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3C_3C:
      s << "$"
        << "<<"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_comment:
      s << "$"
        << "comment"
        << "$" ;
      break;
    default:
      break ;
    }
  }
  return s ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      U N I C O D E    S T R I N G S                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Unicode string for '!'
static const utf32 kUnicodeString__21_ [] = {
  TO_UNICODE ('!'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '!='
static const utf32 kUnicodeString__21__3D_ [] = {
  TO_UNICODE ('!'),
  TO_UNICODE ('='),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '!?'
static const utf32 kUnicodeString__21__3F_ [] = {
  TO_UNICODE ('!'),
  TO_UNICODE ('\?'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '&'
static const utf32 kUnicodeString__26_ [] = {
  TO_UNICODE ('&'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '('
static const utf32 kUnicodeString__28_ [] = {
  TO_UNICODE ('('),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ')'
static const utf32 kUnicodeString__29_ [] = {
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '*'
static const utf32 kUnicodeString__2A_ [] = {
  TO_UNICODE ('*'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '+'
static const utf32 kUnicodeString__2B_ [] = {
  TO_UNICODE ('+'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '++'
static const utf32 kUnicodeString__2B__2B_ [] = {
  TO_UNICODE ('+'),
  TO_UNICODE ('+'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '+='
static const utf32 kUnicodeString__2B__3D_ [] = {
  TO_UNICODE ('+'),
  TO_UNICODE ('='),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '+>'
static const utf32 kUnicodeString__2B__3E_ [] = {
  TO_UNICODE ('+'),
  TO_UNICODE ('>'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ','
static const utf32 kUnicodeString__2C_ [] = {
  TO_UNICODE (','),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '-'
static const utf32 kUnicodeString__2D_ [] = {
  TO_UNICODE ('-'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '--'
static const utf32 kUnicodeString__2D__2D_ [] = {
  TO_UNICODE ('-'),
  TO_UNICODE ('-'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '-='
static const utf32 kUnicodeString__2D__3D_ [] = {
  TO_UNICODE ('-'),
  TO_UNICODE ('='),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '->'
static const utf32 kUnicodeString__2D__3E_ [] = {
  TO_UNICODE ('-'),
  TO_UNICODE ('>'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '..'
static const utf32 kUnicodeString__2E__2E_ [] = {
  TO_UNICODE ('.'),
  TO_UNICODE ('.'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '/'
static const utf32 kUnicodeString__2F_ [] = {
  TO_UNICODE ('/'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ':'
static const utf32 kUnicodeString__3A_ [] = {
  TO_UNICODE (':'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '::'
static const utf32 kUnicodeString__3A__3A_ [] = {
  TO_UNICODE (':'),
  TO_UNICODE (':'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ':='
static const utf32 kUnicodeString__3A__3D_ [] = {
  TO_UNICODE (':'),
  TO_UNICODE ('='),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ';'
static const utf32 kUnicodeString__3B_ [] = {
  TO_UNICODE (';'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '<-'
static const utf32 kUnicodeString__3C__2D_ [] = {
  TO_UNICODE ('<'),
  TO_UNICODE ('-'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '='
static const utf32 kUnicodeString__3D_ [] = {
  TO_UNICODE ('='),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '=='
static const utf32 kUnicodeString__3D__3D_ [] = {
  TO_UNICODE ('='),
  TO_UNICODE ('='),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '>'
static const utf32 kUnicodeString__3E_ [] = {
  TO_UNICODE ('>'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '>='
static const utf32 kUnicodeString__3E__3D_ [] = {
  TO_UNICODE ('>'),
  TO_UNICODE ('='),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '>>'
static const utf32 kUnicodeString__3E__3E_ [] = {
  TO_UNICODE ('>'),
  TO_UNICODE ('>'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '?'
static const utf32 kUnicodeString__3F_ [] = {
  TO_UNICODE ('\?'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '?!'
static const utf32 kUnicodeString__3F__21_ [] = {
  TO_UNICODE ('\?'),
  TO_UNICODE ('!'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '??'
static const utf32 kUnicodeString__3F__3F_ [] = {
  TO_UNICODE ('\?'),
  TO_UNICODE ('\?'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for 'LS'
static const utf32 kUnicodeString_LS [] = {
  TO_UNICODE ('L'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '['
static const utf32 kUnicodeString__5B_ [] = {
  TO_UNICODE ('['),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ']'
static const utf32 kUnicodeString__5D_ [] = {
  TO_UNICODE (']'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '^'
static const utf32 kUnicodeString__5E_ [] = {
  TO_UNICODE ('^'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '{'
static const utf32 kUnicodeString__7B_ [] = {
  TO_UNICODE ('{'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '|'
static const utf32 kUnicodeString__7C_ [] = {
  TO_UNICODE ('|'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '}'
static const utf32 kUnicodeString__7D_ [] = {
  TO_UNICODE ('}'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '~'
static const utf32 kUnicodeString__7E_ [] = {
  TO_UNICODE ('~'),
  TO_UNICODE (0)
} ; 

//---------------------------------------------------------------------------*
//                                                                           *
//                            parseLexicalToken                              *
//                                                                           *
//---------------------------------------------------------------------------*

bool galgasTemplateScanner::
parseLexicalToken (void) {
  cTokenFor_galgasTemplateScanner token ;
  bool loop = true ;
  token.mTokenCode = -1 ;
  while ((token.mTokenCode < 0) && (UNICODE_VALUE (mCurrentChar) != '\0')) {
    if ((mMatchedTemplateDelimiterIndex >= 0)
     && (kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength > 0)
     && (UNICODE_VALUE (mCurrentChar) != '\0')) {
      const bool foundEndDelimitor = testForInputUTF32String (kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndString,
                                                              kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength,
                                                              true) ;
      if (foundEndDelimitor) {
        mMatchedTemplateDelimiterIndex = -1 ;
      }
    }
    while ((mMatchedTemplateDelimiterIndex < 0) && (UNICODE_VALUE (mCurrentChar) != '\0')) {
      sint32 replacementIndex = 0 ;
      while (replacementIndex >= 0) {
        replacementIndex = findTemplateDelimiterIndex (kTemplateReplacementArray, 2) ;
        if (replacementIndex >= 0) {
          if (kTemplateReplacementArray [replacementIndex].mReplacementFunction == NULL) {
            token.mTemplateStringBeforeToken << kTemplateReplacementArray [replacementIndex].mEndString ;
          }else{
            C_String s ;
            while (notTestForInputUTF32String (kTemplateReplacementArray [replacementIndex].mEndString,
                                               kTemplateReplacementArray [replacementIndex].mEndStringLength,
                                               kEndOfSourceLexicalErrorMessage
                                               COMMA_HERE)) {
              s.appendUnicodeCharacter (previousChar () COMMA_HERE) ;
            }
            kTemplateReplacementArray [replacementIndex].mReplacementFunction (*this, s, token.mTemplateStringBeforeToken) ;
          }
        }
      }
      mMatchedTemplateDelimiterIndex = findTemplateDelimiterIndex (kTemplateDefinitionArray, 1) ;
      if (mMatchedTemplateDelimiterIndex < 0) {
        token.mTemplateStringBeforeToken.appendUnicodeCharacter (mCurrentChar COMMA_HERE) ;
        advance () ;
      }
    }
    if ((mMatchedTemplateDelimiterIndex >= 0) && (UNICODE_VALUE (mCurrentChar) != '\0')) {
      token.identifierString.setLengthToZero () ;
      token.uint32value = 0 ;
      token.sint32value = 0 ;
      token.uint64value = 0 ;
      token.sint64value = 0 ;
      token.charValue = TO_UNICODE ('\0') ;
      token.tokenString.setLengthToZero () ;
      token.floatValue = 0.0 ;
      mTokenFirstLocation = mCurrentLocation ;
      try{
        if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
            testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z'))) {
          do {
            ::scanner_routine_enterCharacterIntoString (*this, token.identifierString, ::scanner_function_toLower (*this, previousChar ())) ;
            ::scanner_routine_enterCharacterIntoString (*this, token.tokenString, previousChar ()) ;
            if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
                testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z')) ||
                testForInputUTF32Char (TO_UNICODE ('_')) ||
                testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
            }else{
              loop = false ;
            }
          }while (loop) ;
          loop = true ;
          token.mTokenCode = search_into_galgasKeyWordList (token.identifierString) ;
          if (token.mTokenCode == -1) {
            token.mTokenCode = galgasTemplateScanner_1_identifier ;
          }
          enterToken (token) ;
        }else if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
          ::scanner_routine_enterCharacterIntoString (*this, token.tokenString, previousChar ()) ;
          do {
            if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.tokenString, previousChar ()) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('_'))) {
            }else{
              loop = false ;
            }
          }while (loop) ;
          loop = true ;
          if (testForInputUTF32Char (TO_UNICODE ('S')) ||
              testForInputUTF32Char (TO_UNICODE ('s'))) {
            ::scanner_routine_convertDecimalStringIntoSInt (*this, token.tokenString, token.sint32value, gErrorMessage_0, gErrorMessage_2) ;
            token.mTokenCode = galgasTemplateScanner_1_signed_5Fliteral_5Finteger ;
            enterToken (token) ;
          }else if (testForInputUTF32String (kUnicodeString_LS, 2, true)) {
            ::scanner_routine_convertDecimalStringIntoSInt64 (*this, token.tokenString, token.sint64value, gErrorMessage_0, gErrorMessage_2) ;
            token.mTokenCode = galgasTemplateScanner_1_signed_5Fliteral_5Finteger64 ;
            enterToken (token) ;
          }else if (testForInputUTF32Char (TO_UNICODE ('L'))) {
            ::scanner_routine_convertDecimalStringIntoUInt64 (*this, token.tokenString, token.uint64value, gErrorMessage_0, gErrorMessage_2) ;
            token.mTokenCode = galgasTemplateScanner_1_unsigned_5Fliteral_5Finteger64 ;
            enterToken (token) ;
          }else if (testForInputUTF32Char (TO_UNICODE ('.'))) {
            ::scanner_routine_enterCharacterIntoString (*this, token.tokenString, TO_UNICODE ('.')) ;
            do {
              if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
                ::scanner_routine_enterCharacterIntoString (*this, token.tokenString, previousChar ()) ;
              }else if (testForInputUTF32Char (TO_UNICODE ('_'))) {
              }else{
                loop = false ;
              }
            }while (loop) ;
            loop = true ;
            ::scanner_routine_convertStringToDouble (*this, token.tokenString, token.floatValue, gErrorMessage_1) ;
            token.mTokenCode = galgasTemplateScanner_1_literal_5Fdouble ;
            enterToken (token) ;
          }else{
            ::scanner_routine_convertDecimalStringIntoUInt (*this, token.tokenString, token.uint32value, gErrorMessage_0, gErrorMessage_2) ;
            token.mTokenCode = galgasTemplateScanner_1_unsigned_5Fliteral_5Finteger ;
            enterToken (token) ;
          }
        }else if (testForInputUTF32Char (TO_UNICODE ('.'))) {
          if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
            ::scanner_routine_enterCharacterIntoString (*this, token.tokenString, TO_UNICODE ('0')) ;
            ::scanner_routine_enterCharacterIntoString (*this, token.tokenString, TO_UNICODE ('.')) ;
            ::scanner_routine_enterCharacterIntoString (*this, token.tokenString, previousChar ()) ;
            do {
              if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
                ::scanner_routine_enterCharacterIntoString (*this, token.tokenString, previousChar ()) ;
              }else if (testForInputUTF32Char (TO_UNICODE ('_'))) {
              }else{
                loop = false ;
              }
            }while (loop) ;
            loop = true ;
            ::scanner_routine_convertStringToDouble (*this, token.tokenString, token.floatValue, gErrorMessage_1) ;
            token.mTokenCode = galgasTemplateScanner_1_literal_5Fdouble ;
            enterToken (token) ;
          }else{
            if (testForInputUTF32String (kUnicodeString__2E__2E_, 2, true)) {
              token.mTokenCode = galgasTemplateScanner_1__2E_2E_2E ;
              enterToken (token) ;
            }else if (testForInputUTF32String (kUnicodeString__3D_, 1, true)) {
              token.mTokenCode = galgasTemplateScanner_1__2E_3D ;
              enterToken (token) ;
            }else{
              token.mTokenCode = galgasTemplateScanner_1__2E ;
              enterToken (token) ;
            }
          }
        }else if (testForInputUTF32String (kUnicodeString__2D__2D_, 2, true)) {
          token.mTokenCode = galgasTemplateScanner_1__2D_2D ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__3A__3A_, 2, true)) {
          token.mTokenCode = galgasTemplateScanner_1__3A_3A ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__2D__3E_, 2, true)) {
          token.mTokenCode = galgasTemplateScanner_1__2D_3E ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__3D__3D_, 2, true)) {
          token.mTokenCode = galgasTemplateScanner_1__3D_3D ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__3F__3F_, 2, true)) {
          token.mTokenCode = galgasTemplateScanner_1__3F_3F ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__3A__3D_, 2, true)) {
          token.mTokenCode = galgasTemplateScanner_1__3A_3D ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__2B__2B_, 2, true)) {
          token.mTokenCode = galgasTemplateScanner_1__2B_2B ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__2B__3D_, 2, true)) {
          token.mTokenCode = galgasTemplateScanner_1__2B_3D ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__3F__21_, 2, true)) {
          token.mTokenCode = galgasTemplateScanner_1__3F_21 ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__21__3F_, 2, true)) {
          token.mTokenCode = galgasTemplateScanner_1__21_3F ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__21__3D_, 2, true)) {
          token.mTokenCode = galgasTemplateScanner_1__21_3D ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__3E__3D_, 2, true)) {
          token.mTokenCode = galgasTemplateScanner_1__3E_3D ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__2B__3E_, 2, true)) {
          token.mTokenCode = galgasTemplateScanner_1__2B_3E ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__2D__3D_, 2, true)) {
          token.mTokenCode = galgasTemplateScanner_1__2D_3D ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__3E__3E_, 2, true)) {
          token.mTokenCode = galgasTemplateScanner_1__3E_3E ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__3C__2D_, 2, true)) {
          token.mTokenCode = galgasTemplateScanner_1__3C_2D ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__2A_, 1, true)) {
          token.mTokenCode = galgasTemplateScanner_1__2A ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__7C_, 1, true)) {
          token.mTokenCode = galgasTemplateScanner_1__7C ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__2C_, 1, true)) {
          token.mTokenCode = galgasTemplateScanner_1__2C ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__2B_, 1, true)) {
          token.mTokenCode = galgasTemplateScanner_1__2B ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__3E_, 1, true)) {
          token.mTokenCode = galgasTemplateScanner_1__3E ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__3B_, 1, true)) {
          token.mTokenCode = galgasTemplateScanner_1__3B ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__3A_, 1, true)) {
          token.mTokenCode = galgasTemplateScanner_1__3A ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__2D_, 1, true)) {
          token.mTokenCode = galgasTemplateScanner_1__2D ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__28_, 1, true)) {
          token.mTokenCode = galgasTemplateScanner_1__28 ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__29_, 1, true)) {
          token.mTokenCode = galgasTemplateScanner_1__29 ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__3F_, 1, true)) {
          token.mTokenCode = galgasTemplateScanner_1__3F ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__21_, 1, true)) {
          token.mTokenCode = galgasTemplateScanner_1__21 ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__5B_, 1, true)) {
          token.mTokenCode = galgasTemplateScanner_1__5B ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__5D_, 1, true)) {
          token.mTokenCode = galgasTemplateScanner_1__5D ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__2F_, 1, true)) {
          token.mTokenCode = galgasTemplateScanner_1__2F ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__26_, 1, true)) {
          token.mTokenCode = galgasTemplateScanner_1__26 ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__7B_, 1, true)) {
          token.mTokenCode = galgasTemplateScanner_1__7B ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__7D_, 1, true)) {
          token.mTokenCode = galgasTemplateScanner_1__7D ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__5E_, 1, true)) {
          token.mTokenCode = galgasTemplateScanner_1__5E ;
          enterToken (token) ;
        }else if (testForInputUTF32String (kUnicodeString__7E_, 1, true)) {
          token.mTokenCode = galgasTemplateScanner_1__7E ;
          enterToken (token) ;
        }else if (testForInputUTF32Char (TO_UNICODE ('<'))) {
          if (testForInputUTF32Char (TO_UNICODE ('='))) {
            token.mTokenCode = galgasTemplateScanner_1__3C_3D ;
            enterToken (token) ;
          }else if (testForInputUTF32Char (TO_UNICODE ('<'))) {
            token.mTokenCode = galgasTemplateScanner_1__3C_3C ;
            enterToken (token) ;
          }else{
            token.mTokenCode = galgasTemplateScanner_1__3C ;
            enterToken (token) ;
          }
        }else if (testForInputUTF32Char (TO_UNICODE ('#'))) {
          do {
            if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE ('\t')) ||
                testForInputUTF32Char (TO_UNICODE ('\v')) ||
                testForInputUTF32Char (TO_UNICODE ('\f')) ||
                testForInputUTF32CharRange (TO_UNICODE (14), TO_UNICODE (65533))) {
            }else{
              loop = false ;
            }
          }while (loop) ;
          loop = true ;
        }else if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE (' '))) {
        }else if (testForInputUTF32Char (TO_UNICODE ('\0'))) { // End of source text ? 
          token.mTokenCode = galgasTemplateScanner_1_ ; // Empty string code
        }else{ // Unknown input character
          unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
        }
      }catch (const C_lexicalErrorException &) {
        token.mTokenCode = -1 ; // No token
        advance () ; // ... go throught unknown character
      }
    }
    if ((token.mTokenCode > 0) && kEndOfScriptInTemplateArray [token.mTokenCode - 1]) {
      mMatchedTemplateDelimiterIndex = -1 ;
    }
  }
  if ((UNICODE_VALUE (mCurrentChar) == '\0') && (token.mTemplateStringBeforeToken.length () > 0)) {
    token.mTokenCode = 0 ;
    enterToken (token) ;
  }
  return token.mTokenCode > 0 ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   parseLexicalTokenForLexicalColoring                     *
//                                                                           *
//---------------------------------------------------------------------------*

sint16 galgasTemplateScanner::
parseLexicalTokenForLexicalColoring (void) {
  cTokenFor_galgasTemplateScanner token ;
  bool loop = true ;
  token.mTokenCode = -1 ;
  while (token.mTokenCode < 0) {
    token.identifierString.setLengthToZero () ;
    token.uint32value = 0 ;
    token.sint32value = 0 ;
    token.uint64value = 0 ;
    token.sint64value = 0 ;
    token.charValue = TO_UNICODE ('\0') ;
    token.tokenString.setLengthToZero () ;
    token.floatValue = 0.0 ;
    mTokenFirstLocation = mCurrentLocation ;
    try{
      if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
          testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z'))) {
        do {
          ::scanner_routine_enterCharacterIntoString (*this, token.identifierString, ::scanner_function_toLower (*this, previousChar ())) ;
          ::scanner_routine_enterCharacterIntoString (*this, token.tokenString, previousChar ()) ;
          if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
              testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z')) ||
              testForInputUTF32Char (TO_UNICODE ('_')) ||
              testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        token.mTokenCode = search_into_galgasKeyWordList (token.identifierString) ;
        if (token.mTokenCode == -1) {
          token.mTokenCode = galgasTemplateScanner_1_identifier ;
        }
      }else if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
        ::scanner_routine_enterCharacterIntoString (*this, token.tokenString, previousChar ()) ;
        do {
          if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
            ::scanner_routine_enterCharacterIntoString (*this, token.tokenString, previousChar ()) ;
          }else if (testForInputUTF32Char (TO_UNICODE ('_'))) {
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        if (testForInputUTF32Char (TO_UNICODE ('S')) ||
            testForInputUTF32Char (TO_UNICODE ('s'))) {
          ::scanner_routine_convertDecimalStringIntoSInt (*this, token.tokenString, token.sint32value, gErrorMessage_0, gErrorMessage_2) ;
          token.mTokenCode = galgasTemplateScanner_1_signed_5Fliteral_5Finteger ;
        }else if (testForInputUTF32String (kUnicodeString_LS, 2, true)) {
          ::scanner_routine_convertDecimalStringIntoSInt64 (*this, token.tokenString, token.sint64value, gErrorMessage_0, gErrorMessage_2) ;
          token.mTokenCode = galgasTemplateScanner_1_signed_5Fliteral_5Finteger64 ;
        }else if (testForInputUTF32Char (TO_UNICODE ('L'))) {
          ::scanner_routine_convertDecimalStringIntoUInt64 (*this, token.tokenString, token.uint64value, gErrorMessage_0, gErrorMessage_2) ;
          token.mTokenCode = galgasTemplateScanner_1_unsigned_5Fliteral_5Finteger64 ;
        }else if (testForInputUTF32Char (TO_UNICODE ('.'))) {
          ::scanner_routine_enterCharacterIntoString (*this, token.tokenString, TO_UNICODE ('.')) ;
          do {
            if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.tokenString, previousChar ()) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('_'))) {
            }else{
              loop = false ;
            }
          }while (loop) ;
          loop = true ;
          ::scanner_routine_convertStringToDouble (*this, token.tokenString, token.floatValue, gErrorMessage_1) ;
          token.mTokenCode = galgasTemplateScanner_1_literal_5Fdouble ;
        }else{
          ::scanner_routine_convertDecimalStringIntoUInt (*this, token.tokenString, token.uint32value, gErrorMessage_0, gErrorMessage_2) ;
          token.mTokenCode = galgasTemplateScanner_1_unsigned_5Fliteral_5Finteger ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('.'))) {
        if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
          ::scanner_routine_enterCharacterIntoString (*this, token.tokenString, TO_UNICODE ('0')) ;
          ::scanner_routine_enterCharacterIntoString (*this, token.tokenString, TO_UNICODE ('.')) ;
          ::scanner_routine_enterCharacterIntoString (*this, token.tokenString, previousChar ()) ;
          do {
            if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
              ::scanner_routine_enterCharacterIntoString (*this, token.tokenString, previousChar ()) ;
            }else if (testForInputUTF32Char (TO_UNICODE ('_'))) {
            }else{
              loop = false ;
            }
          }while (loop) ;
          loop = true ;
          ::scanner_routine_convertStringToDouble (*this, token.tokenString, token.floatValue, gErrorMessage_1) ;
          token.mTokenCode = galgasTemplateScanner_1_literal_5Fdouble ;
        }else{
          if (testForInputUTF32String (kUnicodeString__2E__2E_, 2, true)) {
            token.mTokenCode = galgasTemplateScanner_1__2E_2E_2E ;
          }else if (testForInputUTF32String (kUnicodeString__3D_, 1, true)) {
            token.mTokenCode = galgasTemplateScanner_1__2E_3D ;
          }else{
            token.mTokenCode = galgasTemplateScanner_1__2E ;
          }
        }
      }else if (testForInputUTF32String (kUnicodeString__2D__2D_, 2, true)) {
        token.mTokenCode = galgasTemplateScanner_1__2D_2D ;
      }else if (testForInputUTF32String (kUnicodeString__3A__3A_, 2, true)) {
        token.mTokenCode = galgasTemplateScanner_1__3A_3A ;
      }else if (testForInputUTF32String (kUnicodeString__2D__3E_, 2, true)) {
        token.mTokenCode = galgasTemplateScanner_1__2D_3E ;
      }else if (testForInputUTF32String (kUnicodeString__3D__3D_, 2, true)) {
        token.mTokenCode = galgasTemplateScanner_1__3D_3D ;
      }else if (testForInputUTF32String (kUnicodeString__3F__3F_, 2, true)) {
        token.mTokenCode = galgasTemplateScanner_1__3F_3F ;
      }else if (testForInputUTF32String (kUnicodeString__3A__3D_, 2, true)) {
        token.mTokenCode = galgasTemplateScanner_1__3A_3D ;
      }else if (testForInputUTF32String (kUnicodeString__2B__2B_, 2, true)) {
        token.mTokenCode = galgasTemplateScanner_1__2B_2B ;
      }else if (testForInputUTF32String (kUnicodeString__2B__3D_, 2, true)) {
        token.mTokenCode = galgasTemplateScanner_1__2B_3D ;
      }else if (testForInputUTF32String (kUnicodeString__3F__21_, 2, true)) {
        token.mTokenCode = galgasTemplateScanner_1__3F_21 ;
      }else if (testForInputUTF32String (kUnicodeString__21__3F_, 2, true)) {
        token.mTokenCode = galgasTemplateScanner_1__21_3F ;
      }else if (testForInputUTF32String (kUnicodeString__21__3D_, 2, true)) {
        token.mTokenCode = galgasTemplateScanner_1__21_3D ;
      }else if (testForInputUTF32String (kUnicodeString__3E__3D_, 2, true)) {
        token.mTokenCode = galgasTemplateScanner_1__3E_3D ;
      }else if (testForInputUTF32String (kUnicodeString__2B__3E_, 2, true)) {
        token.mTokenCode = galgasTemplateScanner_1__2B_3E ;
      }else if (testForInputUTF32String (kUnicodeString__2D__3D_, 2, true)) {
        token.mTokenCode = galgasTemplateScanner_1__2D_3D ;
      }else if (testForInputUTF32String (kUnicodeString__3E__3E_, 2, true)) {
        token.mTokenCode = galgasTemplateScanner_1__3E_3E ;
      }else if (testForInputUTF32String (kUnicodeString__3C__2D_, 2, true)) {
        token.mTokenCode = galgasTemplateScanner_1__3C_2D ;
      }else if (testForInputUTF32String (kUnicodeString__2A_, 1, true)) {
        token.mTokenCode = galgasTemplateScanner_1__2A ;
      }else if (testForInputUTF32String (kUnicodeString__7C_, 1, true)) {
        token.mTokenCode = galgasTemplateScanner_1__7C ;
      }else if (testForInputUTF32String (kUnicodeString__2C_, 1, true)) {
        token.mTokenCode = galgasTemplateScanner_1__2C ;
      }else if (testForInputUTF32String (kUnicodeString__2B_, 1, true)) {
        token.mTokenCode = galgasTemplateScanner_1__2B ;
      }else if (testForInputUTF32String (kUnicodeString__3E_, 1, true)) {
        token.mTokenCode = galgasTemplateScanner_1__3E ;
      }else if (testForInputUTF32String (kUnicodeString__3B_, 1, true)) {
        token.mTokenCode = galgasTemplateScanner_1__3B ;
      }else if (testForInputUTF32String (kUnicodeString__3A_, 1, true)) {
        token.mTokenCode = galgasTemplateScanner_1__3A ;
      }else if (testForInputUTF32String (kUnicodeString__2D_, 1, true)) {
        token.mTokenCode = galgasTemplateScanner_1__2D ;
      }else if (testForInputUTF32String (kUnicodeString__28_, 1, true)) {
        token.mTokenCode = galgasTemplateScanner_1__28 ;
      }else if (testForInputUTF32String (kUnicodeString__29_, 1, true)) {
        token.mTokenCode = galgasTemplateScanner_1__29 ;
      }else if (testForInputUTF32String (kUnicodeString__3F_, 1, true)) {
        token.mTokenCode = galgasTemplateScanner_1__3F ;
      }else if (testForInputUTF32String (kUnicodeString__21_, 1, true)) {
        token.mTokenCode = galgasTemplateScanner_1__21 ;
      }else if (testForInputUTF32String (kUnicodeString__5B_, 1, true)) {
        token.mTokenCode = galgasTemplateScanner_1__5B ;
      }else if (testForInputUTF32String (kUnicodeString__5D_, 1, true)) {
        token.mTokenCode = galgasTemplateScanner_1__5D ;
      }else if (testForInputUTF32String (kUnicodeString__2F_, 1, true)) {
        token.mTokenCode = galgasTemplateScanner_1__2F ;
      }else if (testForInputUTF32String (kUnicodeString__26_, 1, true)) {
        token.mTokenCode = galgasTemplateScanner_1__26 ;
      }else if (testForInputUTF32String (kUnicodeString__7B_, 1, true)) {
        token.mTokenCode = galgasTemplateScanner_1__7B ;
      }else if (testForInputUTF32String (kUnicodeString__7D_, 1, true)) {
        token.mTokenCode = galgasTemplateScanner_1__7D ;
      }else if (testForInputUTF32String (kUnicodeString__5E_, 1, true)) {
        token.mTokenCode = galgasTemplateScanner_1__5E ;
      }else if (testForInputUTF32String (kUnicodeString__7E_, 1, true)) {
        token.mTokenCode = galgasTemplateScanner_1__7E ;
      }else if (testForInputUTF32Char (TO_UNICODE ('<'))) {
        if (testForInputUTF32Char (TO_UNICODE ('='))) {
          token.mTokenCode = galgasTemplateScanner_1__3C_3D ;
        }else if (testForInputUTF32Char (TO_UNICODE ('<'))) {
          token.mTokenCode = galgasTemplateScanner_1__3C_3C ;
        }else{
          token.mTokenCode = galgasTemplateScanner_1__3C ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('#'))) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE ('\t')) ||
              testForInputUTF32Char (TO_UNICODE ('\v')) ||
              testForInputUTF32Char (TO_UNICODE ('\f')) ||
              testForInputUTF32CharRange (TO_UNICODE (14), TO_UNICODE (65533))) {
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        token.mTokenCode = galgasTemplateScanner_1_comment ;
      }else if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE (' '))) {
      }else if (testForInputUTF32Char (TO_UNICODE ('\0'))) { // End of source text ? 
        token.mTokenCode = galgasTemplateScanner_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      token.mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
      throw ;
    }
  }
  return token.mTokenCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            Styles definition                              *
//                                                                           *
//---------------------------------------------------------------------------*

sint32 galgasTemplateScanner::getStylesCount (void) {
  return 11 ;
}

//---------------------------------------------------------------------------*

const char * galgasTemplateScanner::getStyleName (const sint32 inIndex) {
  const char * kStylesArray [12] = {"Default style", "Keywords:", "Delimiters:", "Terminal Symbols:", "Non Terminal Symbols:", "Integer Constants:", "Floating Point Constants:", "Character Constants:", "String Constants:", "Type Names (@...):", "Comments:", NULL} ;
  return (inIndex < 11) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

const char * galgasTemplateScanner::getStyleIdentifier (const sint32 inIndex) {
  const char * kStylesArray [12] = {"", "keywordsStyle", "delimitersStyle", "terminalStyle", "nonTerminalStyle", "integerStyle", "float_csts", "characterStyle", "stringStyle", "typeNameStyle", "commentStyle", NULL} ;
  return (inIndex < 11) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

uint8 galgasTemplateScanner::
terminalStyleIndex (const sint32 inTerminal) {
  static const uint8 kTerminalSymbolStyles [139] = {0,
    0 /* galgasTemplateScanner_1_identifier */,
    1 /* galgasTemplateScanner_1_abstract */,
    1 /* galgasTemplateScanner_1_after */,
    1 /* galgasTemplateScanner_1_before */,
    1 /* galgasTemplateScanner_1_between */,
    1 /* galgasTemplateScanner_1_block */,
    1 /* galgasTemplateScanner_1_cast */,
    1 /* galgasTemplateScanner_1_class */,
    1 /* galgasTemplateScanner_1_compile */,
    1 /* galgasTemplateScanner_1_const */,
    1 /* galgasTemplateScanner_1_constructor */,
    1 /* galgasTemplateScanner_1_default */,
    1 /* galgasTemplateScanner_1_description */,
    1 /* galgasTemplateScanner_1_dependency */,
    1 /* galgasTemplateScanner_1_do */,
    1 /* galgasTemplateScanner_1_domain */,
    1 /* galgasTemplateScanner_1_drop */,
    1 /* galgasTemplateScanner_1_else */,
    1 /* galgasTemplateScanner_1_elsif */,
    1 /* galgasTemplateScanner_1_end */,
    1 /* galgasTemplateScanner_1_enum */,
    1 /* galgasTemplateScanner_1_error */,
    1 /* galgasTemplateScanner_1_extends */,
    1 /* galgasTemplateScanner_1_extern */,
    1 /* galgasTemplateScanner_1_extract */,
    1 /* galgasTemplateScanner_1_false */,
    1 /* galgasTemplateScanner_1_feature */,
    1 /* galgasTemplateScanner_1_filewrapper */,
    1 /* galgasTemplateScanner_1_foreach */,
    1 /* galgasTemplateScanner_1_function */,
    1 /* galgasTemplateScanner_1_grammar */,
    1 /* galgasTemplateScanner_1_gui */,
    1 /* galgasTemplateScanner_1_here */,
    1 /* galgasTemplateScanner_1_if */,
    1 /* galgasTemplateScanner_1_import */,
    1 /* galgasTemplateScanner_1_import_5F_5F */,
    1 /* galgasTemplateScanner_1_in */,
    1 /* galgasTemplateScanner_1_insert */,
    1 /* galgasTemplateScanner_1_label */,
    1 /* galgasTemplateScanner_1_lazy */,
    1 /* galgasTemplateScanner_1_lexique */,
    1 /* galgasTemplateScanner_1_list */,
    1 /* galgasTemplateScanner_1_listmap */,
    1 /* galgasTemplateScanner_1_log */,
    1 /* galgasTemplateScanner_1_loop */,
    1 /* galgasTemplateScanner_1_map */,
    1 /* galgasTemplateScanner_1_mapindex */,
    1 /* galgasTemplateScanner_1_match */,
    1 /* galgasTemplateScanner_1_message */,
    1 /* galgasTemplateScanner_1_method */,
    1 /* galgasTemplateScanner_1_mod */,
    1 /* galgasTemplateScanner_1_modifier */,
    1 /* galgasTemplateScanner_1_nonterminal */,
    1 /* galgasTemplateScanner_1_not */,
    1 /* galgasTemplateScanner_1_on */,
    1 /* galgasTemplateScanner_1_operator */,
    1 /* galgasTemplateScanner_1_option */,
    1 /* galgasTemplateScanner_1_or */,
    1 /* galgasTemplateScanner_1_override */,
    1 /* galgasTemplateScanner_1_parse */,
    1 /* galgasTemplateScanner_1_project */,
    1 /* galgasTemplateScanner_1_program */,
    1 /* galgasTemplateScanner_1_reader */,
    1 /* galgasTemplateScanner_1_remove */,
    1 /* galgasTemplateScanner_1_replace */,
    1 /* galgasTemplateScanner_1_repeat */,
    1 /* galgasTemplateScanner_1_rewind */,
    1 /* galgasTemplateScanner_1_root */,
    1 /* galgasTemplateScanner_1_routine */,
    1 /* galgasTemplateScanner_1_rule */,
    1 /* galgasTemplateScanner_1_search */,
    1 /* galgasTemplateScanner_1_select */,
    1 /* galgasTemplateScanner_1_self */,
    1 /* galgasTemplateScanner_1_semantics */,
    1 /* galgasTemplateScanner_1_send */,
    1 /* galgasTemplateScanner_1_sortedlist */,
    1 /* galgasTemplateScanner_1_state */,
    1 /* galgasTemplateScanner_1_struct */,
    1 /* galgasTemplateScanner_1_style */,
    1 /* galgasTemplateScanner_1_switch */,
    1 /* galgasTemplateScanner_1_syntax */,
    1 /* galgasTemplateScanner_1_tag */,
    1 /* galgasTemplateScanner_1_template */,
    1 /* galgasTemplateScanner_1_then */,
    1 /* galgasTemplateScanner_1_true */,
    1 /* galgasTemplateScanner_1_unused */,
    1 /* galgasTemplateScanner_1_warning */,
    1 /* galgasTemplateScanner_1_when */,
    1 /* galgasTemplateScanner_1_while */,
    1 /* galgasTemplateScanner_1_with */,
    6 /* galgasTemplateScanner_1_literal_5Fdouble */,
    5 /* galgasTemplateScanner_1_unsigned_5Fliteral_5Finteger */,
    5 /* galgasTemplateScanner_1_signed_5Fliteral_5Finteger */,
    5 /* galgasTemplateScanner_1_unsigned_5Fliteral_5Finteger64 */,
    5 /* galgasTemplateScanner_1_signed_5Fliteral_5Finteger64 */,
    2 /* galgasTemplateScanner_1__2E */,
    2 /* galgasTemplateScanner_1__2E_3D */,
    2 /* galgasTemplateScanner_1__2E_2E_2E */,
    2 /* galgasTemplateScanner_1__2A */,
    2 /* galgasTemplateScanner_1__7C */,
    2 /* galgasTemplateScanner_1__2C */,
    2 /* galgasTemplateScanner_1__2B */,
    2 /* galgasTemplateScanner_1__2D_2D */,
    2 /* galgasTemplateScanner_1__3A_3A */,
    2 /* galgasTemplateScanner_1__3E */,
    2 /* galgasTemplateScanner_1__3B */,
    2 /* galgasTemplateScanner_1__3A */,
    2 /* galgasTemplateScanner_1__2D */,
    2 /* galgasTemplateScanner_1__28 */,
    2 /* galgasTemplateScanner_1__29 */,
    2 /* galgasTemplateScanner_1__2D_3E */,
    2 /* galgasTemplateScanner_1__3F */,
    2 /* galgasTemplateScanner_1__3D_3D */,
    2 /* galgasTemplateScanner_1__3F_3F */,
    2 /* galgasTemplateScanner_1__21 */,
    2 /* galgasTemplateScanner_1__3A_3D */,
    2 /* galgasTemplateScanner_1__2B_2B */,
    2 /* galgasTemplateScanner_1__5B */,
    2 /* galgasTemplateScanner_1__5D */,
    2 /* galgasTemplateScanner_1__2B_3D */,
    2 /* galgasTemplateScanner_1__3F_21 */,
    2 /* galgasTemplateScanner_1__21_3F */,
    2 /* galgasTemplateScanner_1__2F */,
    2 /* galgasTemplateScanner_1__21_3D */,
    2 /* galgasTemplateScanner_1__3E_3D */,
    2 /* galgasTemplateScanner_1__26 */,
    2 /* galgasTemplateScanner_1__7B */,
    2 /* galgasTemplateScanner_1__7D */,
    2 /* galgasTemplateScanner_1__2B_3E */,
    2 /* galgasTemplateScanner_1__2D_3D */,
    2 /* galgasTemplateScanner_1__5E */,
    2 /* galgasTemplateScanner_1__3E_3E */,
    2 /* galgasTemplateScanner_1__7E */,
    2 /* galgasTemplateScanner_1__3C_2D */,
    2 /* galgasTemplateScanner_1__3C */,
    2 /* galgasTemplateScanner_1__3C_3D */,
    2 /* galgasTemplateScanner_1__3C_3C */,
    10 /* galgasTemplateScanner_1_comment */
  } ;
  return kTerminalSymbolStyles [inTerminal] ;
}

//---------------------------------------------------------------------------*

void galgasTemplateScanner::enterToken (const cTokenFor_galgasTemplateScanner & inToken) {
  cTokenFor_galgasTemplateScanner * ptr = NULL ;
  macroMyNew (ptr, cTokenFor_galgasTemplateScanner ()) ;
  ptr->mTokenCode = inToken.mTokenCode ;
  ptr->mFirstLocation = mTokenFirstLocation ;
  ptr->mLastLocation  = mTokenLastLocation ;
  ptr->mTemplateStringBeforeToken  = inToken.mTemplateStringBeforeToken ;
  ptr->identifierString = inToken.identifierString ;
  ptr->uint32value = inToken.uint32value ;
  ptr->sint32value = inToken.sint32value ;
  ptr->uint64value = inToken.uint64value ;
  ptr->sint64value = inToken.sint64value ;
  ptr->charValue = inToken.charValue ;
  ptr->tokenString = inToken.tokenString ;
  ptr->floatValue = inToken.floatValue ;
  enterTokenFromPointer (ptr) ;
}

//---------------------------------------------------------------------------*

void galgasTemplateScanner::
_assignFromAttribute_identifierString (GGS_lstring & outValue) const {
  cTokenFor_galgasTemplateScanner * ptr = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, ptr->identifierString) ;
}

//---------------------------------------------------------------------------*

C_String galgasTemplateScanner::
_attributeValue_identifierString (void) const {
  cTokenFor_galgasTemplateScanner * ptr = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  return ptr->identifierString ;
}

//---------------------------------------------------------------------------*

void galgasTemplateScanner::
_assignFromAttribute_uint32value (GGS_luint & outValue) const {
  cTokenFor_galgasTemplateScanner * ptr = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  outValue = GGS_luint (* this, ptr->uint32value) ;
}

//---------------------------------------------------------------------------*

uint32 galgasTemplateScanner::
_attributeValue_uint32value (void) const {
  cTokenFor_galgasTemplateScanner * ptr = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  return ptr->uint32value ;
}

//---------------------------------------------------------------------------*

void galgasTemplateScanner::
_assignFromAttribute_sint32value (GGS_lsint & outValue) const {
  cTokenFor_galgasTemplateScanner * ptr = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  outValue = GGS_lsint (* this, ptr->sint32value) ;
}

//---------------------------------------------------------------------------*

sint32 galgasTemplateScanner::
_attributeValue_sint32value (void) const {
  cTokenFor_galgasTemplateScanner * ptr = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  return ptr->sint32value ;
}

//---------------------------------------------------------------------------*

void galgasTemplateScanner::
_assignFromAttribute_uint64value (GGS_luint64 & outValue) const {
  cTokenFor_galgasTemplateScanner * ptr = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  outValue = GGS_luint64 (* this, ptr->uint64value) ;
}

//---------------------------------------------------------------------------*

uint64 galgasTemplateScanner::
_attributeValue_uint64value (void) const {
  cTokenFor_galgasTemplateScanner * ptr = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  return ptr->uint64value ;
}

//---------------------------------------------------------------------------*

void galgasTemplateScanner::
_assignFromAttribute_sint64value (GGS_lsint64 & outValue) const {
  cTokenFor_galgasTemplateScanner * ptr = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  outValue = GGS_lsint64 (* this, ptr->sint64value) ;
}

//---------------------------------------------------------------------------*

sint64 galgasTemplateScanner::
_attributeValue_sint64value (void) const {
  cTokenFor_galgasTemplateScanner * ptr = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  return ptr->sint64value ;
}

//---------------------------------------------------------------------------*

void galgasTemplateScanner::
_assignFromAttribute_charValue (GGS_lchar & outValue) const {
  cTokenFor_galgasTemplateScanner * ptr = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  outValue = GGS_lchar (* this, ptr->charValue) ;
}

//---------------------------------------------------------------------------*

utf32 galgasTemplateScanner::
_attributeValue_charValue (void) const {
  cTokenFor_galgasTemplateScanner * ptr = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  return ptr->charValue ;
}

//---------------------------------------------------------------------------*

void galgasTemplateScanner::
_assignFromAttribute_tokenString (GGS_lstring & outValue) const {
  cTokenFor_galgasTemplateScanner * ptr = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, ptr->tokenString) ;
}

//---------------------------------------------------------------------------*

C_String galgasTemplateScanner::
_attributeValue_tokenString (void) const {
  cTokenFor_galgasTemplateScanner * ptr = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  return ptr->tokenString ;
}

//---------------------------------------------------------------------------*

void galgasTemplateScanner::
_assignFromAttribute_floatValue (GGS_ldouble & outValue) const {
  cTokenFor_galgasTemplateScanner * ptr = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  outValue = GGS_ldouble (* this, ptr->floatValue) ;
}

//---------------------------------------------------------------------------*

double galgasTemplateScanner::
_attributeValue_floatValue (void) const {
  cTokenFor_galgasTemplateScanner * ptr = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  return ptr->floatValue ;
}

//---------------------------------------------------------------------------*

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*

