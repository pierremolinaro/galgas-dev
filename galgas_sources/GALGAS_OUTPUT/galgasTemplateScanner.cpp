//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'galgasTemplateScanner.cpp'                      *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 5th, 2009, at 20h11'44"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <ctype.h>
#include <string.h>

#include "utilities/MF_MemoryControl.h"
#include "galgasTemplateScanner.h"

#include "strings/unicode_character.h"
#ifndef DO_NOT_GENERATE_CHECKINGS
  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFileName ().cString (HERE), lineNumber ()
  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE
#else
  #define LINE_AND_SOURCE_FILE
  #define COMMA_LINE_AND_SOURCE_FILE
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                           Template Delimiters                             *
//                                                                           *
//---------------------------------------------------------------------------*

static const utf32 kTemplateDefinitionArray_0_startString [] = {
  UNICODE ('%'),
  UNICODE (0)
} ;

static const utf32 kTemplateDefinitionArray_0_endString [] = {
  UNICODE ('%'),
  UNICODE (0)
} ;

static const templateStruct kTemplateDefinitionArray [1] = {
  {kTemplateDefinitionArray_0_startString, 1, kTemplateDefinitionArray_0_endString, 1, true},
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Template Replacements                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const utf32 kTemplateReplacementArray_0_startString [] = {
  UNICODE ('!'),
  UNICODE ('%'),
  UNICODE (0)
} ;

static const utf32 kTemplateReplacementArray_0_endString [] = {
  UNICODE ('%'),
  UNICODE (0)
} ;

static const templateStruct kTemplateReplacementArray [1] = {
  {kTemplateReplacementArray_0_startString, 2, kTemplateReplacementArray_0_endString, 1, true},
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Terminal Symbols as end of script in template mark             *
//                                                                           *
//---------------------------------------------------------------------------*

static const bool kEndOfScriptInTemplateArray [132] = {
  false, // $identifier$
  false, // $abstract$
  false, // $block$
  false, // $call$
  false, // $cast$
  false, // $class$
  false, // $compile$
  false, // $const$
  false, // $constructor$
  false, // $default$
  false, // $description$
  false, // $do$
  false, // $domain$
  false, // $drop$
  false, // $else$
  false, // $elsif$
  false, // $end$
  false, // $entity$
  false, // $enum$
  false, // $error$
  false, // $extends$
  false, // $extern$
  false, // $extract$
  false, // $false$
  false, // $filewrapper$
  false, // $foreach$
  false, // $grammar$
  false, // $gui$
  false, // $here$
  false, // $if$
  false, // $import$
  false, // $import__$
  false, // $in$
  false, // $insert$
  false, // $label$
  false, // $lexique$
  false, // $list$
  false, // $log$
  false, // $loop$
  false, // $map$
  false, // $mapindex$
  false, // $match$
  false, // $message$
  false, // $metamodel$
  false, // $method$
  false, // $mod$
  false, // $modifier$
  false, // $nonterminal$
  false, // $not$
  false, // $on$
  false, // $once$
  false, // $operator$
  false, // $option$
  false, // $or$
  false, // $override$
  false, // $parse$
  false, // $program$
  false, // $reader$
  false, // $remove$
  false, // $repeat$
  false, // $rewind$
  false, // $root$
  false, // $routine$
  false, // $rule$
  false, // $search$
  false, // $select$
  false, // $self$
  false, // $semantics$
  false, // $send$
  false, // $sortedlist$
  false, // $state$
  false, // $struct$
  false, // $style$
  false, // $switch$
  false, // $syntax$
  false, // $tag$
  false, // $template$
  false, // $then$
  false, // $treewalking$
  false, // $true$
  false, // $unused$
  false, // $warning$
  false, // $when$
  false, // $while$
  false, // $literal_double$
  false, // $unsigned_literal_integer$
  false, // $signed_literal_integer$
  false, // $unsigned_literal_integer64$
  false, // $signed_literal_integer64$
  false, // $.$
  false, // $.=$
  false, // $...$
  false, // $*$
  false, // $|$
  false, // $,$
  false, // $+$
  false, // $--$
  false, // $::$
  false, // $>$
  false, // $;$
  false, // $:$
  false, // $-$
  false, // $($
  false, // $)$
  false, // $->$
  false, // $?$
  false, // $==$
  false, // $??$
  false, // $!$
  false, // $:=$
  false, // $++$
  false, // $[$
  false, // $]$
  false, // $+=$
  false, // $?!$
  false, // $!?$
  false, // $/$
  false, // $!=$
  false, // $>=$
  false, // $&$
  false, // ${$
  false, // $}$
  false, // $+>$
  false, // $-=$
  false, // $^$
  false, // $>>$
  false, // $~$
  false, // $<-$
  false, // $<$
  false, // $<=$
  false, // $<<$
  false, // $comment$
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                               Constructors                                *
//                                                                           *
//---------------------------------------------------------------------------*

cTokenFor_galgasTemplateScanner::cTokenFor_galgasTemplateScanner (void) :
identifierString (),
uint32value (),
sint32value (),
uint64value (),
sint64value (),
charValue (),
tokenString (),
floatValue () {
}

//---------------------------------------------------------------------------*

galgasTemplateScanner::
galgasTemplateScanner (C_Compiler * inCallerCompiler,
                const C_String & inDependencyFileExtension,
                const C_String & inDependencyFilePath,
                C_galgas_io * inParametersPtr,
                const C_String & inSourceFileName
                COMMA_LOCATION_ARGS) :
C_Lexique (inCallerCompiler, inDependencyFileExtension, inDependencyFilePath, inParametersPtr, inSourceFileName COMMA_THERE),
_mMatchedTemplateDelimiterIndex (-1) {
}

//---------------------------------------------------------------------------*

galgasTemplateScanner::
galgasTemplateScanner (C_Compiler * inCallerCompiler,
                C_galgas_io * inParametersPtr,
                const C_String & inSourceString,
                const C_String & inStringForError
                COMMA_LOCATION_ARGS) :
C_Lexique (inCallerCompiler, inParametersPtr, inSourceString, inStringForError COMMA_THERE),
_mMatchedTemplateDelimiterIndex (-1) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Lexical error message list                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Message 0
static const utf32 gErrorMessage_0 [] = {
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('c'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('a'),
  UNICODE ('l'),
  UNICODE (' '),
  UNICODE ('n'),
  UNICODE ('u'),
  UNICODE ('m'),
  UNICODE ('b'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE (' '),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('o'),
  UNICODE (' '),
  UNICODE ('l'),
  UNICODE ('a'),
  UNICODE ('r'),
  UNICODE ('g'),
  UNICODE ('e'),
  UNICODE (0)
} ;
//--- Message 1
static const utf32 gErrorMessage_1 [] = {
  UNICODE ('i'),
  UNICODE ('n'),
  UNICODE ('v'),
  UNICODE ('a'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('d'),
  UNICODE (' '),
  UNICODE ('f'),
  UNICODE ('l'),
  UNICODE ('o'),
  UNICODE ('a'),
  UNICODE ('t'),
  UNICODE (' '),
  UNICODE ('n'),
  UNICODE ('u'),
  UNICODE ('m'),
  UNICODE ('b'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE (0)
} ;
//--- Message 2
static const utf32 gErrorMessage_2 [] = {
  UNICODE ('i'),
  UNICODE ('n'),
  UNICODE ('t'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE ('n'),
  UNICODE ('a'),
  UNICODE ('l'),
  UNICODE (' '),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE ('r'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Syntax error messages                            *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Syntax error message for terminal '$identifier$' :
static const utf32 gSyntaxErrorMessage_identifier [] = {
  UNICODE ('a'),
  UNICODE ('n'),
  UNICODE (' '),
  UNICODE ('i'),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('n'),
  UNICODE ('t'),
  UNICODE ('i'),
  UNICODE ('f'),
  UNICODE ('i'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$abstract$' :
static const utf32 gSyntaxErrorMessage_abstract [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('a'),
  UNICODE ('b'),
  UNICODE ('s'),
  UNICODE ('t'),
  UNICODE ('r'),
  UNICODE ('a'),
  UNICODE ('c'),
  UNICODE ('t'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$block$' :
static const utf32 gSyntaxErrorMessage_block [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('b'),
  UNICODE ('l'),
  UNICODE ('o'),
  UNICODE ('c'),
  UNICODE ('k'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$call$' :
static const utf32 gSyntaxErrorMessage_call [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('c'),
  UNICODE ('a'),
  UNICODE ('l'),
  UNICODE ('l'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$cast$' :
static const utf32 gSyntaxErrorMessage_cast [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('c'),
  UNICODE ('a'),
  UNICODE ('s'),
  UNICODE ('t'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$class$' :
static const utf32 gSyntaxErrorMessage_class [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('c'),
  UNICODE ('l'),
  UNICODE ('a'),
  UNICODE ('s'),
  UNICODE ('s'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$compile$' :
static const utf32 gSyntaxErrorMessage_compile [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('c'),
  UNICODE ('o'),
  UNICODE ('m'),
  UNICODE ('p'),
  UNICODE ('i'),
  UNICODE ('l'),
  UNICODE ('e'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$const$' :
static const utf32 gSyntaxErrorMessage_const [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('c'),
  UNICODE ('o'),
  UNICODE ('n'),
  UNICODE ('s'),
  UNICODE ('t'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$constructor$' :
static const utf32 gSyntaxErrorMessage_constructor [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('c'),
  UNICODE ('o'),
  UNICODE ('n'),
  UNICODE ('s'),
  UNICODE ('t'),
  UNICODE ('r'),
  UNICODE ('u'),
  UNICODE ('c'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$default$' :
static const utf32 gSyntaxErrorMessage_default [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('f'),
  UNICODE ('a'),
  UNICODE ('u'),
  UNICODE ('l'),
  UNICODE ('t'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$description$' :
static const utf32 gSyntaxErrorMessage_description [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('s'),
  UNICODE ('c'),
  UNICODE ('r'),
  UNICODE ('i'),
  UNICODE ('p'),
  UNICODE ('t'),
  UNICODE ('i'),
  UNICODE ('o'),
  UNICODE ('n'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$do$' :
static const utf32 gSyntaxErrorMessage_do [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('d'),
  UNICODE ('o'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$domain$' :
static const utf32 gSyntaxErrorMessage_domain [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('d'),
  UNICODE ('o'),
  UNICODE ('m'),
  UNICODE ('a'),
  UNICODE ('i'),
  UNICODE ('n'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$drop$' :
static const utf32 gSyntaxErrorMessage_drop [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('d'),
  UNICODE ('r'),
  UNICODE ('o'),
  UNICODE ('p'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$else$' :
static const utf32 gSyntaxErrorMessage_else [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('s'),
  UNICODE ('e'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$elsif$' :
static const utf32 gSyntaxErrorMessage_elsif [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('s'),
  UNICODE ('i'),
  UNICODE ('f'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$end$' :
static const utf32 gSyntaxErrorMessage_end [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('e'),
  UNICODE ('n'),
  UNICODE ('d'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$entity$' :
static const utf32 gSyntaxErrorMessage_entity [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('e'),
  UNICODE ('n'),
  UNICODE ('t'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('y'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$enum$' :
static const utf32 gSyntaxErrorMessage_enum [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('e'),
  UNICODE ('n'),
  UNICODE ('u'),
  UNICODE ('m'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$error$' :
static const utf32 gSyntaxErrorMessage_error [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE ('r'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$extends$' :
static const utf32 gSyntaxErrorMessage_extends [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('e'),
  UNICODE ('x'),
  UNICODE ('t'),
  UNICODE ('e'),
  UNICODE ('n'),
  UNICODE ('d'),
  UNICODE ('s'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$extern$' :
static const utf32 gSyntaxErrorMessage_extern [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('e'),
  UNICODE ('x'),
  UNICODE ('t'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE ('n'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$extract$' :
static const utf32 gSyntaxErrorMessage_extract [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('e'),
  UNICODE ('x'),
  UNICODE ('t'),
  UNICODE ('r'),
  UNICODE ('a'),
  UNICODE ('c'),
  UNICODE ('t'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$false$' :
static const utf32 gSyntaxErrorMessage_false [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('f'),
  UNICODE ('a'),
  UNICODE ('l'),
  UNICODE ('s'),
  UNICODE ('e'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$filewrapper$' :
static const utf32 gSyntaxErrorMessage_filewrapper [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('f'),
  UNICODE ('i'),
  UNICODE ('l'),
  UNICODE ('e'),
  UNICODE ('w'),
  UNICODE ('r'),
  UNICODE ('a'),
  UNICODE ('p'),
  UNICODE ('p'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$foreach$' :
static const utf32 gSyntaxErrorMessage_foreach [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('f'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('e'),
  UNICODE ('a'),
  UNICODE ('c'),
  UNICODE ('h'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$grammar$' :
static const utf32 gSyntaxErrorMessage_grammar [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('g'),
  UNICODE ('r'),
  UNICODE ('a'),
  UNICODE ('m'),
  UNICODE ('m'),
  UNICODE ('a'),
  UNICODE ('r'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$gui$' :
static const utf32 gSyntaxErrorMessage_gui [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('g'),
  UNICODE ('u'),
  UNICODE ('i'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$here$' :
static const utf32 gSyntaxErrorMessage_here [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE ('e'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$if$' :
static const utf32 gSyntaxErrorMessage_if [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('i'),
  UNICODE ('f'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$import$' :
static const utf32 gSyntaxErrorMessage_import [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('p'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('t'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$import__$' :
static const utf32 gSyntaxErrorMessage_import_5F_5F [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('p'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('t'),
  UNICODE ('_'),
  UNICODE ('_'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$in$' :
static const utf32 gSyntaxErrorMessage_in [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('i'),
  UNICODE ('n'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$insert$' :
static const utf32 gSyntaxErrorMessage_insert [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('i'),
  UNICODE ('n'),
  UNICODE ('s'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE ('t'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$label$' :
static const utf32 gSyntaxErrorMessage_label [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('l'),
  UNICODE ('a'),
  UNICODE ('b'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$lexique$' :
static const utf32 gSyntaxErrorMessage_lexique [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('l'),
  UNICODE ('e'),
  UNICODE ('x'),
  UNICODE ('i'),
  UNICODE ('q'),
  UNICODE ('u'),
  UNICODE ('e'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$list$' :
static const utf32 gSyntaxErrorMessage_list [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('s'),
  UNICODE ('t'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$log$' :
static const utf32 gSyntaxErrorMessage_log [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('l'),
  UNICODE ('o'),
  UNICODE ('g'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$loop$' :
static const utf32 gSyntaxErrorMessage_loop [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('l'),
  UNICODE ('o'),
  UNICODE ('o'),
  UNICODE ('p'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$map$' :
static const utf32 gSyntaxErrorMessage_map [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('m'),
  UNICODE ('a'),
  UNICODE ('p'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$mapindex$' :
static const utf32 gSyntaxErrorMessage_mapindex [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('m'),
  UNICODE ('a'),
  UNICODE ('p'),
  UNICODE ('i'),
  UNICODE ('n'),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('x'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$match$' :
static const utf32 gSyntaxErrorMessage_match [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('m'),
  UNICODE ('a'),
  UNICODE ('t'),
  UNICODE ('c'),
  UNICODE ('h'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$message$' :
static const utf32 gSyntaxErrorMessage_message [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('m'),
  UNICODE ('e'),
  UNICODE ('s'),
  UNICODE ('s'),
  UNICODE ('a'),
  UNICODE ('g'),
  UNICODE ('e'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$metamodel$' :
static const utf32 gSyntaxErrorMessage_metamodel [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('m'),
  UNICODE ('e'),
  UNICODE ('t'),
  UNICODE ('a'),
  UNICODE ('m'),
  UNICODE ('o'),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$method$' :
static const utf32 gSyntaxErrorMessage_method [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('m'),
  UNICODE ('e'),
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('o'),
  UNICODE ('d'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$mod$' :
static const utf32 gSyntaxErrorMessage_mod [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('m'),
  UNICODE ('o'),
  UNICODE ('d'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$modifier$' :
static const utf32 gSyntaxErrorMessage_modifier [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('m'),
  UNICODE ('o'),
  UNICODE ('d'),
  UNICODE ('i'),
  UNICODE ('f'),
  UNICODE ('i'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$nonterminal$' :
static const utf32 gSyntaxErrorMessage_nonterminal [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('n'),
  UNICODE ('o'),
  UNICODE ('n'),
  UNICODE ('t'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('n'),
  UNICODE ('a'),
  UNICODE ('l'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$not$' :
static const utf32 gSyntaxErrorMessage_not [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('n'),
  UNICODE ('o'),
  UNICODE ('t'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$on$' :
static const utf32 gSyntaxErrorMessage_on [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('o'),
  UNICODE ('n'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$once$' :
static const utf32 gSyntaxErrorMessage_once [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('o'),
  UNICODE ('n'),
  UNICODE ('c'),
  UNICODE ('e'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$operator$' :
static const utf32 gSyntaxErrorMessage_operator [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('o'),
  UNICODE ('p'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE ('a'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$option$' :
static const utf32 gSyntaxErrorMessage_option [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('o'),
  UNICODE ('p'),
  UNICODE ('t'),
  UNICODE ('i'),
  UNICODE ('o'),
  UNICODE ('n'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$or$' :
static const utf32 gSyntaxErrorMessage_or [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$override$' :
static const utf32 gSyntaxErrorMessage_override [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('o'),
  UNICODE ('v'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE ('r'),
  UNICODE ('i'),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$parse$' :
static const utf32 gSyntaxErrorMessage_parse [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('p'),
  UNICODE ('a'),
  UNICODE ('r'),
  UNICODE ('s'),
  UNICODE ('e'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$program$' :
static const utf32 gSyntaxErrorMessage_program [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('p'),
  UNICODE ('r'),
  UNICODE ('o'),
  UNICODE ('g'),
  UNICODE ('r'),
  UNICODE ('a'),
  UNICODE ('m'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$reader$' :
static const utf32 gSyntaxErrorMessage_reader [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('r'),
  UNICODE ('e'),
  UNICODE ('a'),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$remove$' :
static const utf32 gSyntaxErrorMessage_remove [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('r'),
  UNICODE ('e'),
  UNICODE ('m'),
  UNICODE ('o'),
  UNICODE ('v'),
  UNICODE ('e'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$repeat$' :
static const utf32 gSyntaxErrorMessage_repeat [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('r'),
  UNICODE ('e'),
  UNICODE ('p'),
  UNICODE ('e'),
  UNICODE ('a'),
  UNICODE ('t'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$rewind$' :
static const utf32 gSyntaxErrorMessage_rewind [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('r'),
  UNICODE ('e'),
  UNICODE ('w'),
  UNICODE ('i'),
  UNICODE ('n'),
  UNICODE ('d'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$root$' :
static const utf32 gSyntaxErrorMessage_root [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('r'),
  UNICODE ('o'),
  UNICODE ('o'),
  UNICODE ('t'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$routine$' :
static const utf32 gSyntaxErrorMessage_routine [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('r'),
  UNICODE ('o'),
  UNICODE ('u'),
  UNICODE ('t'),
  UNICODE ('i'),
  UNICODE ('n'),
  UNICODE ('e'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$rule$' :
static const utf32 gSyntaxErrorMessage_rule [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('r'),
  UNICODE ('u'),
  UNICODE ('l'),
  UNICODE ('e'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$search$' :
static const utf32 gSyntaxErrorMessage_search [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('s'),
  UNICODE ('e'),
  UNICODE ('a'),
  UNICODE ('r'),
  UNICODE ('c'),
  UNICODE ('h'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$select$' :
static const utf32 gSyntaxErrorMessage_select [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('s'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('e'),
  UNICODE ('c'),
  UNICODE ('t'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$self$' :
static const utf32 gSyntaxErrorMessage_self [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('s'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('f'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$semantics$' :
static const utf32 gSyntaxErrorMessage_semantics [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('s'),
  UNICODE ('e'),
  UNICODE ('m'),
  UNICODE ('a'),
  UNICODE ('n'),
  UNICODE ('t'),
  UNICODE ('i'),
  UNICODE ('c'),
  UNICODE ('s'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$send$' :
static const utf32 gSyntaxErrorMessage_send [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('s'),
  UNICODE ('e'),
  UNICODE ('n'),
  UNICODE ('d'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$sortedlist$' :
static const utf32 gSyntaxErrorMessage_sortedlist [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('s'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('t'),
  UNICODE ('e'),
  UNICODE ('d'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('s'),
  UNICODE ('t'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$state$' :
static const utf32 gSyntaxErrorMessage_state [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('s'),
  UNICODE ('t'),
  UNICODE ('a'),
  UNICODE ('t'),
  UNICODE ('e'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$struct$' :
static const utf32 gSyntaxErrorMessage_struct [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('s'),
  UNICODE ('t'),
  UNICODE ('r'),
  UNICODE ('u'),
  UNICODE ('c'),
  UNICODE ('t'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$style$' :
static const utf32 gSyntaxErrorMessage_style [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('s'),
  UNICODE ('t'),
  UNICODE ('y'),
  UNICODE ('l'),
  UNICODE ('e'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$switch$' :
static const utf32 gSyntaxErrorMessage_switch [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('s'),
  UNICODE ('w'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('c'),
  UNICODE ('h'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$syntax$' :
static const utf32 gSyntaxErrorMessage_syntax [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('s'),
  UNICODE ('y'),
  UNICODE ('n'),
  UNICODE ('t'),
  UNICODE ('a'),
  UNICODE ('x'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$tag$' :
static const utf32 gSyntaxErrorMessage_tag [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('t'),
  UNICODE ('a'),
  UNICODE ('g'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$template$' :
static const utf32 gSyntaxErrorMessage_template [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('t'),
  UNICODE ('e'),
  UNICODE ('m'),
  UNICODE ('p'),
  UNICODE ('l'),
  UNICODE ('a'),
  UNICODE ('t'),
  UNICODE ('e'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$then$' :
static const utf32 gSyntaxErrorMessage_then [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE ('n'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$treewalking$' :
static const utf32 gSyntaxErrorMessage_treewalking [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('t'),
  UNICODE ('r'),
  UNICODE ('e'),
  UNICODE ('e'),
  UNICODE ('w'),
  UNICODE ('a'),
  UNICODE ('l'),
  UNICODE ('k'),
  UNICODE ('i'),
  UNICODE ('n'),
  UNICODE ('g'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$true$' :
static const utf32 gSyntaxErrorMessage_true [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('t'),
  UNICODE ('r'),
  UNICODE ('u'),
  UNICODE ('e'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$unused$' :
static const utf32 gSyntaxErrorMessage_unused [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('u'),
  UNICODE ('n'),
  UNICODE ('u'),
  UNICODE ('s'),
  UNICODE ('e'),
  UNICODE ('d'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$warning$' :
static const utf32 gSyntaxErrorMessage_warning [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('w'),
  UNICODE ('a'),
  UNICODE ('r'),
  UNICODE ('n'),
  UNICODE ('i'),
  UNICODE ('n'),
  UNICODE ('g'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$when$' :
static const utf32 gSyntaxErrorMessage_when [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('w'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE ('n'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$while$' :
static const utf32 gSyntaxErrorMessage_while [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('w'),
  UNICODE ('h'),
  UNICODE ('i'),
  UNICODE ('l'),
  UNICODE ('e'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('k'),
  UNICODE ('e'),
  UNICODE ('y'),
  UNICODE ('w'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('d'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$literal_double$' :
static const utf32 gSyntaxErrorMessage_literal_5Fdouble [] = {
  UNICODE ('a'),
  UNICODE (' '),
  UNICODE ('f'),
  UNICODE ('l'),
  UNICODE ('o'),
  UNICODE ('a'),
  UNICODE ('t'),
  UNICODE (' '),
  UNICODE ('n'),
  UNICODE ('u'),
  UNICODE ('m'),
  UNICODE ('b'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$unsigned_literal_integer$' :
static const utf32 gSyntaxErrorMessage_unsigned_5Fliteral_5Finteger [] = {
  UNICODE ('a'),
  UNICODE (' '),
  UNICODE ('3'),
  UNICODE ('2'),
  UNICODE ('-'),
  UNICODE ('b'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE (' '),
  UNICODE ('u'),
  UNICODE ('n'),
  UNICODE ('s'),
  UNICODE ('i'),
  UNICODE ('g'),
  UNICODE ('n'),
  UNICODE ('e'),
  UNICODE ('d'),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('c'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('a'),
  UNICODE ('l'),
  UNICODE (' '),
  UNICODE ('n'),
  UNICODE ('u'),
  UNICODE ('m'),
  UNICODE ('b'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$signed_literal_integer$' :
static const utf32 gSyntaxErrorMessage_signed_5Fliteral_5Finteger [] = {
  UNICODE ('a'),
  UNICODE (' '),
  UNICODE ('3'),
  UNICODE ('2'),
  UNICODE ('-'),
  UNICODE ('b'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE (' '),
  UNICODE ('s'),
  UNICODE ('i'),
  UNICODE ('g'),
  UNICODE ('n'),
  UNICODE ('e'),
  UNICODE ('d'),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('c'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('a'),
  UNICODE ('l'),
  UNICODE (' '),
  UNICODE ('n'),
  UNICODE ('u'),
  UNICODE ('m'),
  UNICODE ('b'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$unsigned_literal_integer64$' :
static const utf32 gSyntaxErrorMessage_unsigned_5Fliteral_5Finteger64 [] = {
  UNICODE ('a'),
  UNICODE (' '),
  UNICODE ('6'),
  UNICODE ('4'),
  UNICODE ('-'),
  UNICODE ('b'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE (' '),
  UNICODE ('u'),
  UNICODE ('n'),
  UNICODE ('s'),
  UNICODE ('i'),
  UNICODE ('g'),
  UNICODE ('n'),
  UNICODE ('e'),
  UNICODE ('d'),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('c'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('a'),
  UNICODE ('l'),
  UNICODE (' '),
  UNICODE ('n'),
  UNICODE ('u'),
  UNICODE ('m'),
  UNICODE ('b'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$signed_literal_integer64$' :
static const utf32 gSyntaxErrorMessage_signed_5Fliteral_5Finteger64 [] = {
  UNICODE ('a'),
  UNICODE (' '),
  UNICODE ('6'),
  UNICODE ('4'),
  UNICODE ('-'),
  UNICODE ('b'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE (' '),
  UNICODE ('s'),
  UNICODE ('i'),
  UNICODE ('g'),
  UNICODE ('n'),
  UNICODE ('e'),
  UNICODE ('d'),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('c'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('a'),
  UNICODE ('l'),
  UNICODE (' '),
  UNICODE ('n'),
  UNICODE ('u'),
  UNICODE ('m'),
  UNICODE ('b'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$.$' :
static const utf32 gSyntaxErrorMessage__2E [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('.'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$.=$' :
static const utf32 gSyntaxErrorMessage__2E_3D [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('.'),
  UNICODE ('='),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$...$' :
static const utf32 gSyntaxErrorMessage__2E_2E_2E [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('.'),
  UNICODE ('.'),
  UNICODE ('.'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$*$' :
static const utf32 gSyntaxErrorMessage__2A [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('*'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$|$' :
static const utf32 gSyntaxErrorMessage__7C [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('|'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$,$' :
static const utf32 gSyntaxErrorMessage__2C [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE (','),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$+$' :
static const utf32 gSyntaxErrorMessage__2B [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('+'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$--$' :
static const utf32 gSyntaxErrorMessage__2D_2D [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('-'),
  UNICODE ('-'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$::$' :
static const utf32 gSyntaxErrorMessage__3A_3A [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE (':'),
  UNICODE (':'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$>$' :
static const utf32 gSyntaxErrorMessage__3E [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('>'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$;$' :
static const utf32 gSyntaxErrorMessage__3B [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE (';'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$:$' :
static const utf32 gSyntaxErrorMessage__3A [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE (':'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$-$' :
static const utf32 gSyntaxErrorMessage__2D [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('-'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$($' :
static const utf32 gSyntaxErrorMessage__28 [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('('),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$)$' :
static const utf32 gSyntaxErrorMessage__29 [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE (')'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$->$' :
static const utf32 gSyntaxErrorMessage__2D_3E [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('-'),
  UNICODE ('>'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$?$' :
static const utf32 gSyntaxErrorMessage__3F [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('\?'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$==$' :
static const utf32 gSyntaxErrorMessage__3D_3D [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('='),
  UNICODE ('='),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$??$' :
static const utf32 gSyntaxErrorMessage__3F_3F [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('\?'),
  UNICODE ('\?'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$!$' :
static const utf32 gSyntaxErrorMessage__21 [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('!'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$:=$' :
static const utf32 gSyntaxErrorMessage__3A_3D [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE (':'),
  UNICODE ('='),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$++$' :
static const utf32 gSyntaxErrorMessage__2B_2B [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('+'),
  UNICODE ('+'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$[$' :
static const utf32 gSyntaxErrorMessage__5B [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('['),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$]$' :
static const utf32 gSyntaxErrorMessage__5D [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE (']'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$+=$' :
static const utf32 gSyntaxErrorMessage__2B_3D [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('+'),
  UNICODE ('='),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$?!$' :
static const utf32 gSyntaxErrorMessage__3F_21 [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('\?'),
  UNICODE ('!'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$!?$' :
static const utf32 gSyntaxErrorMessage__21_3F [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('!'),
  UNICODE ('\?'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$/$' :
static const utf32 gSyntaxErrorMessage__2F [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('/'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$!=$' :
static const utf32 gSyntaxErrorMessage__21_3D [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('!'),
  UNICODE ('='),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$>=$' :
static const utf32 gSyntaxErrorMessage__3E_3D [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('>'),
  UNICODE ('='),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$&$' :
static const utf32 gSyntaxErrorMessage__26 [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('&'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '${$' :
static const utf32 gSyntaxErrorMessage__7B [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('{'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$}$' :
static const utf32 gSyntaxErrorMessage__7D [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('}'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$+>$' :
static const utf32 gSyntaxErrorMessage__2B_3E [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('+'),
  UNICODE ('>'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$-=$' :
static const utf32 gSyntaxErrorMessage__2D_3D [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('-'),
  UNICODE ('='),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$^$' :
static const utf32 gSyntaxErrorMessage__5E [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('^'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$>>$' :
static const utf32 gSyntaxErrorMessage__3E_3E [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('>'),
  UNICODE ('>'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$~$' :
static const utf32 gSyntaxErrorMessage__7E [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('~'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$<-$' :
static const utf32 gSyntaxErrorMessage__3C_2D [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('<'),
  UNICODE ('-'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$<$' :
static const utf32 gSyntaxErrorMessage__3C [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('<'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$<=$' :
static const utf32 gSyntaxErrorMessage__3C_3D [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('<'),
  UNICODE ('='),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$<<$' :
static const utf32 gSyntaxErrorMessage__3C_3C [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE (' '),
  UNICODE ('\''),
  UNICODE ('<'),
  UNICODE ('<'),
  UNICODE ('\''),
  UNICODE (' '),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
} ;

//--- Syntax error message for terminal '$comment$' :
static const utf32 gSyntaxErrorMessage_comment [] = {
  UNICODE ('a'),
  UNICODE (' '),
  UNICODE ('c'),
  UNICODE ('o'),
  UNICODE ('m'),
  UNICODE ('m'),
  UNICODE ('e'),
  UNICODE ('n'),
  UNICODE ('t'),
  UNICODE (0)
} ;

//--- Syntax error message for 'end of source' :
static const utf32 kEndOfSourceLexicalErrorMessage [] = {
  UNICODE ('e'),
  UNICODE ('n'),
  UNICODE ('d'),
  UNICODE (' '),
  UNICODE ('o'),
  UNICODE ('f'),
  UNICODE (' '),
  UNICODE ('s'),
  UNICODE ('o'),
  UNICODE ('u'),
  UNICODE ('r'),
  UNICODE ('c'),
  UNICODE ('e'),
  UNICODE (0)
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                appendTerminalMessageToSyntaxErrorMessage                  *
//                                                                           *
//---------------------------------------------------------------------------*

void galgasTemplateScanner::
appendTerminalMessageToSyntaxErrorMessage (const sint16 inTerminalIndex,
                                           C_String & outSyntaxErrorMessage) {
  static const utf32 * syntaxErrorMessageArray [133] = {kEndOfSourceLexicalErrorMessage,
       gSyntaxErrorMessage_identifier,
       gSyntaxErrorMessage_abstract,
       gSyntaxErrorMessage_block,
       gSyntaxErrorMessage_call,
       gSyntaxErrorMessage_cast,
       gSyntaxErrorMessage_class,
       gSyntaxErrorMessage_compile,
       gSyntaxErrorMessage_const,
       gSyntaxErrorMessage_constructor,
       gSyntaxErrorMessage_default,
       gSyntaxErrorMessage_description,
       gSyntaxErrorMessage_do,
       gSyntaxErrorMessage_domain,
       gSyntaxErrorMessage_drop,
       gSyntaxErrorMessage_else,
       gSyntaxErrorMessage_elsif,
       gSyntaxErrorMessage_end,
       gSyntaxErrorMessage_entity,
       gSyntaxErrorMessage_enum,
       gSyntaxErrorMessage_error,
       gSyntaxErrorMessage_extends,
       gSyntaxErrorMessage_extern,
       gSyntaxErrorMessage_extract,
       gSyntaxErrorMessage_false,
       gSyntaxErrorMessage_filewrapper,
       gSyntaxErrorMessage_foreach,
       gSyntaxErrorMessage_grammar,
       gSyntaxErrorMessage_gui,
       gSyntaxErrorMessage_here,
       gSyntaxErrorMessage_if,
       gSyntaxErrorMessage_import,
       gSyntaxErrorMessage_import_5F_5F,
       gSyntaxErrorMessage_in,
       gSyntaxErrorMessage_insert,
       gSyntaxErrorMessage_label,
       gSyntaxErrorMessage_lexique,
       gSyntaxErrorMessage_list,
       gSyntaxErrorMessage_log,
       gSyntaxErrorMessage_loop,
       gSyntaxErrorMessage_map,
       gSyntaxErrorMessage_mapindex,
       gSyntaxErrorMessage_match,
       gSyntaxErrorMessage_message,
       gSyntaxErrorMessage_metamodel,
       gSyntaxErrorMessage_method,
       gSyntaxErrorMessage_mod,
       gSyntaxErrorMessage_modifier,
       gSyntaxErrorMessage_nonterminal,
       gSyntaxErrorMessage_not,
       gSyntaxErrorMessage_on,
       gSyntaxErrorMessage_once,
       gSyntaxErrorMessage_operator,
       gSyntaxErrorMessage_option,
       gSyntaxErrorMessage_or,
       gSyntaxErrorMessage_override,
       gSyntaxErrorMessage_parse,
       gSyntaxErrorMessage_program,
       gSyntaxErrorMessage_reader,
       gSyntaxErrorMessage_remove,
       gSyntaxErrorMessage_repeat,
       gSyntaxErrorMessage_rewind,
       gSyntaxErrorMessage_root,
       gSyntaxErrorMessage_routine,
       gSyntaxErrorMessage_rule,
       gSyntaxErrorMessage_search,
       gSyntaxErrorMessage_select,
       gSyntaxErrorMessage_self,
       gSyntaxErrorMessage_semantics,
       gSyntaxErrorMessage_send,
       gSyntaxErrorMessage_sortedlist,
       gSyntaxErrorMessage_state,
       gSyntaxErrorMessage_struct,
       gSyntaxErrorMessage_style,
       gSyntaxErrorMessage_switch,
       gSyntaxErrorMessage_syntax,
       gSyntaxErrorMessage_tag,
       gSyntaxErrorMessage_template,
       gSyntaxErrorMessage_then,
       gSyntaxErrorMessage_treewalking,
       gSyntaxErrorMessage_true,
       gSyntaxErrorMessage_unused,
       gSyntaxErrorMessage_warning,
       gSyntaxErrorMessage_when,
       gSyntaxErrorMessage_while,
       gSyntaxErrorMessage_literal_5Fdouble,
       gSyntaxErrorMessage_unsigned_5Fliteral_5Finteger,
       gSyntaxErrorMessage_signed_5Fliteral_5Finteger,
       gSyntaxErrorMessage_unsigned_5Fliteral_5Finteger64,
       gSyntaxErrorMessage_signed_5Fliteral_5Finteger64,
       gSyntaxErrorMessage__2E,
       gSyntaxErrorMessage__2E_3D,
       gSyntaxErrorMessage__2E_2E_2E,
       gSyntaxErrorMessage__2A,
       gSyntaxErrorMessage__7C,
       gSyntaxErrorMessage__2C,
       gSyntaxErrorMessage__2B,
       gSyntaxErrorMessage__2D_2D,
       gSyntaxErrorMessage__3A_3A,
       gSyntaxErrorMessage__3E,
       gSyntaxErrorMessage__3B,
       gSyntaxErrorMessage__3A,
       gSyntaxErrorMessage__2D,
       gSyntaxErrorMessage__28,
       gSyntaxErrorMessage__29,
       gSyntaxErrorMessage__2D_3E,
       gSyntaxErrorMessage__3F,
       gSyntaxErrorMessage__3D_3D,
       gSyntaxErrorMessage__3F_3F,
       gSyntaxErrorMessage__21,
       gSyntaxErrorMessage__3A_3D,
       gSyntaxErrorMessage__2B_2B,
       gSyntaxErrorMessage__5B,
       gSyntaxErrorMessage__5D,
       gSyntaxErrorMessage__2B_3D,
       gSyntaxErrorMessage__3F_21,
       gSyntaxErrorMessage__21_3F,
       gSyntaxErrorMessage__2F,
       gSyntaxErrorMessage__21_3D,
       gSyntaxErrorMessage__3E_3D,
       gSyntaxErrorMessage__26,
       gSyntaxErrorMessage__7B,
       gSyntaxErrorMessage__7D,
       gSyntaxErrorMessage__2B_3E,
       gSyntaxErrorMessage__2D_3D,
       gSyntaxErrorMessage__5E,
       gSyntaxErrorMessage__3E_3E,
       gSyntaxErrorMessage__7E,
       gSyntaxErrorMessage__3C_2D,
       gSyntaxErrorMessage__3C,
       gSyntaxErrorMessage__3C_3D,
       gSyntaxErrorMessage__3C_3C,
       gSyntaxErrorMessage_comment} ;
  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Key words table 'galgasKeyWordList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_galgasKeyWordList = 83 ;

static const utf32 kEntry_0_forTable_galgasKeyWordList [] = {
  UNICODE ('d'),
  UNICODE ('o'),
  UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_galgasKeyWordList [] = {
  UNICODE ('i'),
  UNICODE ('f'),
  UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_galgasKeyWordList [] = {
  UNICODE ('i'),
  UNICODE ('n'),
  UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_galgasKeyWordList [] = {
  UNICODE ('o'),
  UNICODE ('n'),
  UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_galgasKeyWordList [] = {
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_galgasKeyWordList [] = {
  UNICODE ('e'),
  UNICODE ('n'),
  UNICODE ('d'),
  UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_galgasKeyWordList [] = {
  UNICODE ('g'),
  UNICODE ('u'),
  UNICODE ('i'),
  UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_galgasKeyWordList [] = {
  UNICODE ('l'),
  UNICODE ('o'),
  UNICODE ('g'),
  UNICODE (0)
}; 

static const utf32 kEntry_8_forTable_galgasKeyWordList [] = {
  UNICODE ('m'),
  UNICODE ('a'),
  UNICODE ('p'),
  UNICODE (0)
}; 

static const utf32 kEntry_9_forTable_galgasKeyWordList [] = {
  UNICODE ('m'),
  UNICODE ('o'),
  UNICODE ('d'),
  UNICODE (0)
}; 

static const utf32 kEntry_10_forTable_galgasKeyWordList [] = {
  UNICODE ('n'),
  UNICODE ('o'),
  UNICODE ('t'),
  UNICODE (0)
}; 

static const utf32 kEntry_11_forTable_galgasKeyWordList [] = {
  UNICODE ('t'),
  UNICODE ('a'),
  UNICODE ('g'),
  UNICODE (0)
}; 

static const utf32 kEntry_12_forTable_galgasKeyWordList [] = {
  UNICODE ('c'),
  UNICODE ('a'),
  UNICODE ('l'),
  UNICODE ('l'),
  UNICODE (0)
}; 

static const utf32 kEntry_13_forTable_galgasKeyWordList [] = {
  UNICODE ('c'),
  UNICODE ('a'),
  UNICODE ('s'),
  UNICODE ('t'),
  UNICODE (0)
}; 

static const utf32 kEntry_14_forTable_galgasKeyWordList [] = {
  UNICODE ('d'),
  UNICODE ('r'),
  UNICODE ('o'),
  UNICODE ('p'),
  UNICODE (0)
}; 

static const utf32 kEntry_15_forTable_galgasKeyWordList [] = {
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('s'),
  UNICODE ('e'),
  UNICODE (0)
}; 

static const utf32 kEntry_16_forTable_galgasKeyWordList [] = {
  UNICODE ('e'),
  UNICODE ('n'),
  UNICODE ('u'),
  UNICODE ('m'),
  UNICODE (0)
}; 

static const utf32 kEntry_17_forTable_galgasKeyWordList [] = {
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE ('e'),
  UNICODE (0)
}; 

static const utf32 kEntry_18_forTable_galgasKeyWordList [] = {
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('s'),
  UNICODE ('t'),
  UNICODE (0)
}; 

static const utf32 kEntry_19_forTable_galgasKeyWordList [] = {
  UNICODE ('l'),
  UNICODE ('o'),
  UNICODE ('o'),
  UNICODE ('p'),
  UNICODE (0)
}; 

static const utf32 kEntry_20_forTable_galgasKeyWordList [] = {
  UNICODE ('o'),
  UNICODE ('n'),
  UNICODE ('c'),
  UNICODE ('e'),
  UNICODE (0)
}; 

static const utf32 kEntry_21_forTable_galgasKeyWordList [] = {
  UNICODE ('r'),
  UNICODE ('o'),
  UNICODE ('o'),
  UNICODE ('t'),
  UNICODE (0)
}; 

static const utf32 kEntry_22_forTable_galgasKeyWordList [] = {
  UNICODE ('r'),
  UNICODE ('u'),
  UNICODE ('l'),
  UNICODE ('e'),
  UNICODE (0)
}; 

static const utf32 kEntry_23_forTable_galgasKeyWordList [] = {
  UNICODE ('s'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('f'),
  UNICODE (0)
}; 

static const utf32 kEntry_24_forTable_galgasKeyWordList [] = {
  UNICODE ('s'),
  UNICODE ('e'),
  UNICODE ('n'),
  UNICODE ('d'),
  UNICODE (0)
}; 

static const utf32 kEntry_25_forTable_galgasKeyWordList [] = {
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE ('n'),
  UNICODE (0)
}; 

static const utf32 kEntry_26_forTable_galgasKeyWordList [] = {
  UNICODE ('t'),
  UNICODE ('r'),
  UNICODE ('u'),
  UNICODE ('e'),
  UNICODE (0)
}; 

static const utf32 kEntry_27_forTable_galgasKeyWordList [] = {
  UNICODE ('w'),
  UNICODE ('h'),
  UNICODE ('e'),
  UNICODE ('n'),
  UNICODE (0)
}; 

static const utf32 kEntry_28_forTable_galgasKeyWordList [] = {
  UNICODE ('b'),
  UNICODE ('l'),
  UNICODE ('o'),
  UNICODE ('c'),
  UNICODE ('k'),
  UNICODE (0)
}; 

static const utf32 kEntry_29_forTable_galgasKeyWordList [] = {
  UNICODE ('c'),
  UNICODE ('l'),
  UNICODE ('a'),
  UNICODE ('s'),
  UNICODE ('s'),
  UNICODE (0)
}; 

static const utf32 kEntry_30_forTable_galgasKeyWordList [] = {
  UNICODE ('c'),
  UNICODE ('o'),
  UNICODE ('n'),
  UNICODE ('s'),
  UNICODE ('t'),
  UNICODE (0)
}; 

static const utf32 kEntry_31_forTable_galgasKeyWordList [] = {
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('s'),
  UNICODE ('i'),
  UNICODE ('f'),
  UNICODE (0)
}; 

static const utf32 kEntry_32_forTable_galgasKeyWordList [] = {
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE ('r'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
}; 

static const utf32 kEntry_33_forTable_galgasKeyWordList [] = {
  UNICODE ('f'),
  UNICODE ('a'),
  UNICODE ('l'),
  UNICODE ('s'),
  UNICODE ('e'),
  UNICODE (0)
}; 

static const utf32 kEntry_34_forTable_galgasKeyWordList [] = {
  UNICODE ('l'),
  UNICODE ('a'),
  UNICODE ('b'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE (0)
}; 

static const utf32 kEntry_35_forTable_galgasKeyWordList [] = {
  UNICODE ('m'),
  UNICODE ('a'),
  UNICODE ('t'),
  UNICODE ('c'),
  UNICODE ('h'),
  UNICODE (0)
}; 

static const utf32 kEntry_36_forTable_galgasKeyWordList [] = {
  UNICODE ('p'),
  UNICODE ('a'),
  UNICODE ('r'),
  UNICODE ('s'),
  UNICODE ('e'),
  UNICODE (0)
}; 

static const utf32 kEntry_37_forTable_galgasKeyWordList [] = {
  UNICODE ('s'),
  UNICODE ('t'),
  UNICODE ('a'),
  UNICODE ('t'),
  UNICODE ('e'),
  UNICODE (0)
}; 

static const utf32 kEntry_38_forTable_galgasKeyWordList [] = {
  UNICODE ('s'),
  UNICODE ('t'),
  UNICODE ('y'),
  UNICODE ('l'),
  UNICODE ('e'),
  UNICODE (0)
}; 

static const utf32 kEntry_39_forTable_galgasKeyWordList [] = {
  UNICODE ('w'),
  UNICODE ('h'),
  UNICODE ('i'),
  UNICODE ('l'),
  UNICODE ('e'),
  UNICODE (0)
}; 

static const utf32 kEntry_40_forTable_galgasKeyWordList [] = {
  UNICODE ('d'),
  UNICODE ('o'),
  UNICODE ('m'),
  UNICODE ('a'),
  UNICODE ('i'),
  UNICODE ('n'),
  UNICODE (0)
}; 

static const utf32 kEntry_41_forTable_galgasKeyWordList [] = {
  UNICODE ('e'),
  UNICODE ('n'),
  UNICODE ('t'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('y'),
  UNICODE (0)
}; 

static const utf32 kEntry_42_forTable_galgasKeyWordList [] = {
  UNICODE ('e'),
  UNICODE ('x'),
  UNICODE ('t'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE ('n'),
  UNICODE (0)
}; 

static const utf32 kEntry_43_forTable_galgasKeyWordList [] = {
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('p'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('t'),
  UNICODE (0)
}; 

static const utf32 kEntry_44_forTable_galgasKeyWordList [] = {
  UNICODE ('i'),
  UNICODE ('n'),
  UNICODE ('s'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE ('t'),
  UNICODE (0)
}; 

static const utf32 kEntry_45_forTable_galgasKeyWordList [] = {
  UNICODE ('m'),
  UNICODE ('e'),
  UNICODE ('t'),
  UNICODE ('h'),
  UNICODE ('o'),
  UNICODE ('d'),
  UNICODE (0)
}; 

static const utf32 kEntry_46_forTable_galgasKeyWordList [] = {
  UNICODE ('o'),
  UNICODE ('p'),
  UNICODE ('t'),
  UNICODE ('i'),
  UNICODE ('o'),
  UNICODE ('n'),
  UNICODE (0)
}; 

static const utf32 kEntry_47_forTable_galgasKeyWordList [] = {
  UNICODE ('r'),
  UNICODE ('e'),
  UNICODE ('a'),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE (0)
}; 

static const utf32 kEntry_48_forTable_galgasKeyWordList [] = {
  UNICODE ('r'),
  UNICODE ('e'),
  UNICODE ('m'),
  UNICODE ('o'),
  UNICODE ('v'),
  UNICODE ('e'),
  UNICODE (0)
}; 

static const utf32 kEntry_49_forTable_galgasKeyWordList [] = {
  UNICODE ('r'),
  UNICODE ('e'),
  UNICODE ('p'),
  UNICODE ('e'),
  UNICODE ('a'),
  UNICODE ('t'),
  UNICODE (0)
}; 

static const utf32 kEntry_50_forTable_galgasKeyWordList [] = {
  UNICODE ('r'),
  UNICODE ('e'),
  UNICODE ('w'),
  UNICODE ('i'),
  UNICODE ('n'),
  UNICODE ('d'),
  UNICODE (0)
}; 

static const utf32 kEntry_51_forTable_galgasKeyWordList [] = {
  UNICODE ('s'),
  UNICODE ('e'),
  UNICODE ('a'),
  UNICODE ('r'),
  UNICODE ('c'),
  UNICODE ('h'),
  UNICODE (0)
}; 

static const utf32 kEntry_52_forTable_galgasKeyWordList [] = {
  UNICODE ('s'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE ('e'),
  UNICODE ('c'),
  UNICODE ('t'),
  UNICODE (0)
}; 

static const utf32 kEntry_53_forTable_galgasKeyWordList [] = {
  UNICODE ('s'),
  UNICODE ('t'),
  UNICODE ('r'),
  UNICODE ('u'),
  UNICODE ('c'),
  UNICODE ('t'),
  UNICODE (0)
}; 

static const utf32 kEntry_54_forTable_galgasKeyWordList [] = {
  UNICODE ('s'),
  UNICODE ('w'),
  UNICODE ('i'),
  UNICODE ('t'),
  UNICODE ('c'),
  UNICODE ('h'),
  UNICODE (0)
}; 

static const utf32 kEntry_55_forTable_galgasKeyWordList [] = {
  UNICODE ('s'),
  UNICODE ('y'),
  UNICODE ('n'),
  UNICODE ('t'),
  UNICODE ('a'),
  UNICODE ('x'),
  UNICODE (0)
}; 

static const utf32 kEntry_56_forTable_galgasKeyWordList [] = {
  UNICODE ('u'),
  UNICODE ('n'),
  UNICODE ('u'),
  UNICODE ('s'),
  UNICODE ('e'),
  UNICODE ('d'),
  UNICODE (0)
}; 

static const utf32 kEntry_57_forTable_galgasKeyWordList [] = {
  UNICODE ('c'),
  UNICODE ('o'),
  UNICODE ('m'),
  UNICODE ('p'),
  UNICODE ('i'),
  UNICODE ('l'),
  UNICODE ('e'),
  UNICODE (0)
}; 

static const utf32 kEntry_58_forTable_galgasKeyWordList [] = {
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('f'),
  UNICODE ('a'),
  UNICODE ('u'),
  UNICODE ('l'),
  UNICODE ('t'),
  UNICODE (0)
}; 

static const utf32 kEntry_59_forTable_galgasKeyWordList [] = {
  UNICODE ('e'),
  UNICODE ('x'),
  UNICODE ('t'),
  UNICODE ('e'),
  UNICODE ('n'),
  UNICODE ('d'),
  UNICODE ('s'),
  UNICODE (0)
}; 

static const utf32 kEntry_60_forTable_galgasKeyWordList [] = {
  UNICODE ('e'),
  UNICODE ('x'),
  UNICODE ('t'),
  UNICODE ('r'),
  UNICODE ('a'),
  UNICODE ('c'),
  UNICODE ('t'),
  UNICODE (0)
}; 

static const utf32 kEntry_61_forTable_galgasKeyWordList [] = {
  UNICODE ('f'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('e'),
  UNICODE ('a'),
  UNICODE ('c'),
  UNICODE ('h'),
  UNICODE (0)
}; 

static const utf32 kEntry_62_forTable_galgasKeyWordList [] = {
  UNICODE ('g'),
  UNICODE ('r'),
  UNICODE ('a'),
  UNICODE ('m'),
  UNICODE ('m'),
  UNICODE ('a'),
  UNICODE ('r'),
  UNICODE (0)
}; 

static const utf32 kEntry_63_forTable_galgasKeyWordList [] = {
  UNICODE ('l'),
  UNICODE ('e'),
  UNICODE ('x'),
  UNICODE ('i'),
  UNICODE ('q'),
  UNICODE ('u'),
  UNICODE ('e'),
  UNICODE (0)
}; 

static const utf32 kEntry_64_forTable_galgasKeyWordList [] = {
  UNICODE ('m'),
  UNICODE ('e'),
  UNICODE ('s'),
  UNICODE ('s'),
  UNICODE ('a'),
  UNICODE ('g'),
  UNICODE ('e'),
  UNICODE (0)
}; 

static const utf32 kEntry_65_forTable_galgasKeyWordList [] = {
  UNICODE ('p'),
  UNICODE ('r'),
  UNICODE ('o'),
  UNICODE ('g'),
  UNICODE ('r'),
  UNICODE ('a'),
  UNICODE ('m'),
  UNICODE (0)
}; 

static const utf32 kEntry_66_forTable_galgasKeyWordList [] = {
  UNICODE ('r'),
  UNICODE ('o'),
  UNICODE ('u'),
  UNICODE ('t'),
  UNICODE ('i'),
  UNICODE ('n'),
  UNICODE ('e'),
  UNICODE (0)
}; 

static const utf32 kEntry_67_forTable_galgasKeyWordList [] = {
  UNICODE ('w'),
  UNICODE ('a'),
  UNICODE ('r'),
  UNICODE ('n'),
  UNICODE ('i'),
  UNICODE ('n'),
  UNICODE ('g'),
  UNICODE (0)
}; 

static const utf32 kEntry_68_forTable_galgasKeyWordList [] = {
  UNICODE ('a'),
  UNICODE ('b'),
  UNICODE ('s'),
  UNICODE ('t'),
  UNICODE ('r'),
  UNICODE ('a'),
  UNICODE ('c'),
  UNICODE ('t'),
  UNICODE (0)
}; 

static const utf32 kEntry_69_forTable_galgasKeyWordList [] = {
  UNICODE ('i'),
  UNICODE ('m'),
  UNICODE ('p'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('t'),
  UNICODE ('_'),
  UNICODE ('_'),
  UNICODE (0)
}; 

static const utf32 kEntry_70_forTable_galgasKeyWordList [] = {
  UNICODE ('m'),
  UNICODE ('a'),
  UNICODE ('p'),
  UNICODE ('i'),
  UNICODE ('n'),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('x'),
  UNICODE (0)
}; 

static const utf32 kEntry_71_forTable_galgasKeyWordList [] = {
  UNICODE ('m'),
  UNICODE ('o'),
  UNICODE ('d'),
  UNICODE ('i'),
  UNICODE ('f'),
  UNICODE ('i'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE (0)
}; 

static const utf32 kEntry_72_forTable_galgasKeyWordList [] = {
  UNICODE ('o'),
  UNICODE ('p'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE ('a'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
}; 

static const utf32 kEntry_73_forTable_galgasKeyWordList [] = {
  UNICODE ('o'),
  UNICODE ('v'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE ('r'),
  UNICODE ('i'),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE (0)
}; 

static const utf32 kEntry_74_forTable_galgasKeyWordList [] = {
  UNICODE ('t'),
  UNICODE ('e'),
  UNICODE ('m'),
  UNICODE ('p'),
  UNICODE ('l'),
  UNICODE ('a'),
  UNICODE ('t'),
  UNICODE ('e'),
  UNICODE (0)
}; 

static const utf32 kEntry_75_forTable_galgasKeyWordList [] = {
  UNICODE ('m'),
  UNICODE ('e'),
  UNICODE ('t'),
  UNICODE ('a'),
  UNICODE ('m'),
  UNICODE ('o'),
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('l'),
  UNICODE (0)
}; 

static const utf32 kEntry_76_forTable_galgasKeyWordList [] = {
  UNICODE ('s'),
  UNICODE ('e'),
  UNICODE ('m'),
  UNICODE ('a'),
  UNICODE ('n'),
  UNICODE ('t'),
  UNICODE ('i'),
  UNICODE ('c'),
  UNICODE ('s'),
  UNICODE (0)
}; 

static const utf32 kEntry_77_forTable_galgasKeyWordList [] = {
  UNICODE ('s'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE ('t'),
  UNICODE ('e'),
  UNICODE ('d'),
  UNICODE ('l'),
  UNICODE ('i'),
  UNICODE ('s'),
  UNICODE ('t'),
  UNICODE (0)
}; 

static const utf32 kEntry_78_forTable_galgasKeyWordList [] = {
  UNICODE ('c'),
  UNICODE ('o'),
  UNICODE ('n'),
  UNICODE ('s'),
  UNICODE ('t'),
  UNICODE ('r'),
  UNICODE ('u'),
  UNICODE ('c'),
  UNICODE ('t'),
  UNICODE ('o'),
  UNICODE ('r'),
  UNICODE (0)
}; 

static const utf32 kEntry_79_forTable_galgasKeyWordList [] = {
  UNICODE ('d'),
  UNICODE ('e'),
  UNICODE ('s'),
  UNICODE ('c'),
  UNICODE ('r'),
  UNICODE ('i'),
  UNICODE ('p'),
  UNICODE ('t'),
  UNICODE ('i'),
  UNICODE ('o'),
  UNICODE ('n'),
  UNICODE (0)
}; 

static const utf32 kEntry_80_forTable_galgasKeyWordList [] = {
  UNICODE ('f'),
  UNICODE ('i'),
  UNICODE ('l'),
  UNICODE ('e'),
  UNICODE ('w'),
  UNICODE ('r'),
  UNICODE ('a'),
  UNICODE ('p'),
  UNICODE ('p'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE (0)
}; 

static const utf32 kEntry_81_forTable_galgasKeyWordList [] = {
  UNICODE ('n'),
  UNICODE ('o'),
  UNICODE ('n'),
  UNICODE ('t'),
  UNICODE ('e'),
  UNICODE ('r'),
  UNICODE ('m'),
  UNICODE ('i'),
  UNICODE ('n'),
  UNICODE ('a'),
  UNICODE ('l'),
  UNICODE (0)
}; 

static const utf32 kEntry_82_forTable_galgasKeyWordList [] = {
  UNICODE ('t'),
  UNICODE ('r'),
  UNICODE ('e'),
  UNICODE ('e'),
  UNICODE ('w'),
  UNICODE ('a'),
  UNICODE ('l'),
  UNICODE ('k'),
  UNICODE ('i'),
  UNICODE ('n'),
  UNICODE ('g'),
  UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_galgasKeyWordList [ktable_size_galgasKeyWordList] = {
  {kEntry_0_forTable_galgasKeyWordList, 2, galgasTemplateScanner::galgasTemplateScanner_1_do},
  {kEntry_1_forTable_galgasKeyWordList, 2, galgasTemplateScanner::galgasTemplateScanner_1_if},
  {kEntry_2_forTable_galgasKeyWordList, 2, galgasTemplateScanner::galgasTemplateScanner_1_in},
  {kEntry_3_forTable_galgasKeyWordList, 2, galgasTemplateScanner::galgasTemplateScanner_1_on},
  {kEntry_4_forTable_galgasKeyWordList, 2, galgasTemplateScanner::galgasTemplateScanner_1_or},
  {kEntry_5_forTable_galgasKeyWordList, 3, galgasTemplateScanner::galgasTemplateScanner_1_end},
  {kEntry_6_forTable_galgasKeyWordList, 3, galgasTemplateScanner::galgasTemplateScanner_1_gui},
  {kEntry_7_forTable_galgasKeyWordList, 3, galgasTemplateScanner::galgasTemplateScanner_1_log},
  {kEntry_8_forTable_galgasKeyWordList, 3, galgasTemplateScanner::galgasTemplateScanner_1_map},
  {kEntry_9_forTable_galgasKeyWordList, 3, galgasTemplateScanner::galgasTemplateScanner_1_mod},
  {kEntry_10_forTable_galgasKeyWordList, 3, galgasTemplateScanner::galgasTemplateScanner_1_not},
  {kEntry_11_forTable_galgasKeyWordList, 3, galgasTemplateScanner::galgasTemplateScanner_1_tag},
  {kEntry_12_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_call},
  {kEntry_13_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_cast},
  {kEntry_14_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_drop},
  {kEntry_15_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_else},
  {kEntry_16_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_enum},
  {kEntry_17_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_here},
  {kEntry_18_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_list},
  {kEntry_19_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_loop},
  {kEntry_20_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_once},
  {kEntry_21_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_root},
  {kEntry_22_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_rule},
  {kEntry_23_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_self},
  {kEntry_24_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_send},
  {kEntry_25_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_then},
  {kEntry_26_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_true},
  {kEntry_27_forTable_galgasKeyWordList, 4, galgasTemplateScanner::galgasTemplateScanner_1_when},
  {kEntry_28_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_block},
  {kEntry_29_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_class},
  {kEntry_30_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_const},
  {kEntry_31_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_elsif},
  {kEntry_32_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_error},
  {kEntry_33_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_false},
  {kEntry_34_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_label},
  {kEntry_35_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_match},
  {kEntry_36_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_parse},
  {kEntry_37_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_state},
  {kEntry_38_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_style},
  {kEntry_39_forTable_galgasKeyWordList, 5, galgasTemplateScanner::galgasTemplateScanner_1_while},
  {kEntry_40_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_domain},
  {kEntry_41_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_entity},
  {kEntry_42_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_extern},
  {kEntry_43_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_import},
  {kEntry_44_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_insert},
  {kEntry_45_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_method},
  {kEntry_46_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_option},
  {kEntry_47_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_reader},
  {kEntry_48_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_remove},
  {kEntry_49_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_repeat},
  {kEntry_50_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_rewind},
  {kEntry_51_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_search},
  {kEntry_52_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_select},
  {kEntry_53_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_struct},
  {kEntry_54_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_switch},
  {kEntry_55_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_syntax},
  {kEntry_56_forTable_galgasKeyWordList, 6, galgasTemplateScanner::galgasTemplateScanner_1_unused},
  {kEntry_57_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_compile},
  {kEntry_58_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_default},
  {kEntry_59_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_extends},
  {kEntry_60_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_extract},
  {kEntry_61_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_foreach},
  {kEntry_62_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_grammar},
  {kEntry_63_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_lexique},
  {kEntry_64_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_message},
  {kEntry_65_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_program},
  {kEntry_66_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_routine},
  {kEntry_67_forTable_galgasKeyWordList, 7, galgasTemplateScanner::galgasTemplateScanner_1_warning},
  {kEntry_68_forTable_galgasKeyWordList, 8, galgasTemplateScanner::galgasTemplateScanner_1_abstract},
  {kEntry_69_forTable_galgasKeyWordList, 8, galgasTemplateScanner::galgasTemplateScanner_1_import_5F_5F},
  {kEntry_70_forTable_galgasKeyWordList, 8, galgasTemplateScanner::galgasTemplateScanner_1_mapindex},
  {kEntry_71_forTable_galgasKeyWordList, 8, galgasTemplateScanner::galgasTemplateScanner_1_modifier},
  {kEntry_72_forTable_galgasKeyWordList, 8, galgasTemplateScanner::galgasTemplateScanner_1_operator},
  {kEntry_73_forTable_galgasKeyWordList, 8, galgasTemplateScanner::galgasTemplateScanner_1_override},
  {kEntry_74_forTable_galgasKeyWordList, 8, galgasTemplateScanner::galgasTemplateScanner_1_template},
  {kEntry_75_forTable_galgasKeyWordList, 9, galgasTemplateScanner::galgasTemplateScanner_1_metamodel},
  {kEntry_76_forTable_galgasKeyWordList, 9, galgasTemplateScanner::galgasTemplateScanner_1_semantics},
  {kEntry_77_forTable_galgasKeyWordList, 10, galgasTemplateScanner::galgasTemplateScanner_1_sortedlist},
  {kEntry_78_forTable_galgasKeyWordList, 11, galgasTemplateScanner::galgasTemplateScanner_1_constructor},
  {kEntry_79_forTable_galgasKeyWordList, 11, galgasTemplateScanner::galgasTemplateScanner_1_description},
  {kEntry_80_forTable_galgasKeyWordList, 11, galgasTemplateScanner::galgasTemplateScanner_1_filewrapper},
  {kEntry_81_forTable_galgasKeyWordList, 11, galgasTemplateScanner::galgasTemplateScanner_1_nonterminal},
  {kEntry_82_forTable_galgasKeyWordList, 11, galgasTemplateScanner::galgasTemplateScanner_1_treewalking}
} ;

sint32 galgasTemplateScanner::search_into_galgasKeyWordList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_galgasKeyWordList, ktable_size_galgasKeyWordList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Key words table 'galgasDelimitorsList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_galgasDelimitorsList = 36 ;

static const utf32 kEntry_0_forTable_galgasDelimitorsList [] = {
  UNICODE ('!'),
  UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_galgasDelimitorsList [] = {
  UNICODE ('&'),
  UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_galgasDelimitorsList [] = {
  UNICODE ('('),
  UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_galgasDelimitorsList [] = {
  UNICODE (')'),
  UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_galgasDelimitorsList [] = {
  UNICODE ('*'),
  UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_galgasDelimitorsList [] = {
  UNICODE ('+'),
  UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_galgasDelimitorsList [] = {
  UNICODE (','),
  UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_galgasDelimitorsList [] = {
  UNICODE ('-'),
  UNICODE (0)
}; 

static const utf32 kEntry_8_forTable_galgasDelimitorsList [] = {
  UNICODE ('/'),
  UNICODE (0)
}; 

static const utf32 kEntry_9_forTable_galgasDelimitorsList [] = {
  UNICODE (':'),
  UNICODE (0)
}; 

static const utf32 kEntry_10_forTable_galgasDelimitorsList [] = {
  UNICODE (';'),
  UNICODE (0)
}; 

static const utf32 kEntry_11_forTable_galgasDelimitorsList [] = {
  UNICODE ('>'),
  UNICODE (0)
}; 

static const utf32 kEntry_12_forTable_galgasDelimitorsList [] = {
  UNICODE ('\?'),
  UNICODE (0)
}; 

static const utf32 kEntry_13_forTable_galgasDelimitorsList [] = {
  UNICODE ('['),
  UNICODE (0)
}; 

static const utf32 kEntry_14_forTable_galgasDelimitorsList [] = {
  UNICODE (']'),
  UNICODE (0)
}; 

static const utf32 kEntry_15_forTable_galgasDelimitorsList [] = {
  UNICODE ('^'),
  UNICODE (0)
}; 

static const utf32 kEntry_16_forTable_galgasDelimitorsList [] = {
  UNICODE ('{'),
  UNICODE (0)
}; 

static const utf32 kEntry_17_forTable_galgasDelimitorsList [] = {
  UNICODE ('|'),
  UNICODE (0)
}; 

static const utf32 kEntry_18_forTable_galgasDelimitorsList [] = {
  UNICODE ('}'),
  UNICODE (0)
}; 

static const utf32 kEntry_19_forTable_galgasDelimitorsList [] = {
  UNICODE ('~'),
  UNICODE (0)
}; 

static const utf32 kEntry_20_forTable_galgasDelimitorsList [] = {
  UNICODE ('!'),
  UNICODE ('='),
  UNICODE (0)
}; 

static const utf32 kEntry_21_forTable_galgasDelimitorsList [] = {
  UNICODE ('!'),
  UNICODE ('\?'),
  UNICODE (0)
}; 

static const utf32 kEntry_22_forTable_galgasDelimitorsList [] = {
  UNICODE ('+'),
  UNICODE ('+'),
  UNICODE (0)
}; 

static const utf32 kEntry_23_forTable_galgasDelimitorsList [] = {
  UNICODE ('+'),
  UNICODE ('='),
  UNICODE (0)
}; 

static const utf32 kEntry_24_forTable_galgasDelimitorsList [] = {
  UNICODE ('+'),
  UNICODE ('>'),
  UNICODE (0)
}; 

static const utf32 kEntry_25_forTable_galgasDelimitorsList [] = {
  UNICODE ('-'),
  UNICODE ('-'),
  UNICODE (0)
}; 

static const utf32 kEntry_26_forTable_galgasDelimitorsList [] = {
  UNICODE ('-'),
  UNICODE ('='),
  UNICODE (0)
}; 

static const utf32 kEntry_27_forTable_galgasDelimitorsList [] = {
  UNICODE ('-'),
  UNICODE ('>'),
  UNICODE (0)
}; 

static const utf32 kEntry_28_forTable_galgasDelimitorsList [] = {
  UNICODE (':'),
  UNICODE (':'),
  UNICODE (0)
}; 

static const utf32 kEntry_29_forTable_galgasDelimitorsList [] = {
  UNICODE (':'),
  UNICODE ('='),
  UNICODE (0)
}; 

static const utf32 kEntry_30_forTable_galgasDelimitorsList [] = {
  UNICODE ('<'),
  UNICODE ('-'),
  UNICODE (0)
}; 

static const utf32 kEntry_31_forTable_galgasDelimitorsList [] = {
  UNICODE ('='),
  UNICODE ('='),
  UNICODE (0)
}; 

static const utf32 kEntry_32_forTable_galgasDelimitorsList [] = {
  UNICODE ('>'),
  UNICODE ('='),
  UNICODE (0)
}; 

static const utf32 kEntry_33_forTable_galgasDelimitorsList [] = {
  UNICODE ('>'),
  UNICODE ('>'),
  UNICODE (0)
}; 

static const utf32 kEntry_34_forTable_galgasDelimitorsList [] = {
  UNICODE ('\?'),
  UNICODE ('!'),
  UNICODE (0)
}; 

static const utf32 kEntry_35_forTable_galgasDelimitorsList [] = {
  UNICODE ('\?'),
  UNICODE ('\?'),
  UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_galgasDelimitorsList [ktable_size_galgasDelimitorsList] = {
  {kEntry_0_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__21},
  {kEntry_1_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__26},
  {kEntry_2_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__28},
  {kEntry_3_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__29},
  {kEntry_4_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__2A},
  {kEntry_5_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__2B},
  {kEntry_6_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__2C},
  {kEntry_7_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__2D},
  {kEntry_8_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__2F},
  {kEntry_9_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__3A},
  {kEntry_10_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__3B},
  {kEntry_11_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__3E},
  {kEntry_12_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__3F},
  {kEntry_13_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__5B},
  {kEntry_14_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__5D},
  {kEntry_15_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__5E},
  {kEntry_16_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__7B},
  {kEntry_17_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__7C},
  {kEntry_18_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__7D},
  {kEntry_19_forTable_galgasDelimitorsList, 1, galgasTemplateScanner::galgasTemplateScanner_1__7E},
  {kEntry_20_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__21_3D},
  {kEntry_21_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__21_3F},
  {kEntry_22_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__2B_2B},
  {kEntry_23_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__2B_3D},
  {kEntry_24_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__2B_3E},
  {kEntry_25_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__2D_2D},
  {kEntry_26_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__2D_3D},
  {kEntry_27_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__2D_3E},
  {kEntry_28_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__3A_3A},
  {kEntry_29_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__3A_3D},
  {kEntry_30_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__3C_2D},
  {kEntry_31_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__3D_3D},
  {kEntry_32_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__3E_3D},
  {kEntry_33_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__3E_3E},
  {kEntry_34_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__3F_21},
  {kEntry_35_forTable_galgasDelimitorsList, 2, galgasTemplateScanner::galgasTemplateScanner_1__3F_3F}
} ;

sint32 galgasTemplateScanner::search_into_galgasDelimitorsList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_galgasDelimitorsList, ktable_size_galgasDelimitorsList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          getCurrentTokenString                            *
//                                                                           *
//---------------------------------------------------------------------------*

C_String galgasTemplateScanner::
getCurrentTokenString (const cToken * inTokenPtr) const {
  cTokenFor_galgasTemplateScanner * _p = (cTokenFor_galgasTemplateScanner *) inTokenPtr ;
  C_String s ;
  if (_p == NULL) {
    s << "$$" ;
  }else{
    switch (_p->_mTokenCode) {
    case  galgasTemplateScanner_1_:
      s << "$$" ;
      break ;
    case  galgasTemplateScanner_1_identifier:
      s << "$"
        << "identifier"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (_p->tokenString) ;
      break;
    case  galgasTemplateScanner_1_abstract:
      s << "$"
        << "abstract"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_block:
      s << "$"
        << "block"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_call:
      s << "$"
        << "call"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_cast:
      s << "$"
        << "cast"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_class:
      s << "$"
        << "class"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_compile:
      s << "$"
        << "compile"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_const:
      s << "$"
        << "const"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_constructor:
      s << "$"
        << "constructor"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_default:
      s << "$"
        << "default"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_description:
      s << "$"
        << "description"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_do:
      s << "$"
        << "do"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_domain:
      s << "$"
        << "domain"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_drop:
      s << "$"
        << "drop"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_else:
      s << "$"
        << "else"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_elsif:
      s << "$"
        << "elsif"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_end:
      s << "$"
        << "end"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_entity:
      s << "$"
        << "entity"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_enum:
      s << "$"
        << "enum"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_error:
      s << "$"
        << "error"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_extends:
      s << "$"
        << "extends"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_extern:
      s << "$"
        << "extern"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_extract:
      s << "$"
        << "extract"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_false:
      s << "$"
        << "false"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_filewrapper:
      s << "$"
        << "filewrapper"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_foreach:
      s << "$"
        << "foreach"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_grammar:
      s << "$"
        << "grammar"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_gui:
      s << "$"
        << "gui"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_here:
      s << "$"
        << "here"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_if:
      s << "$"
        << "if"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_import:
      s << "$"
        << "import"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_import_5F_5F:
      s << "$"
        << "import__"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_in:
      s << "$"
        << "in"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_insert:
      s << "$"
        << "insert"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_label:
      s << "$"
        << "label"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_lexique:
      s << "$"
        << "lexique"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_list:
      s << "$"
        << "list"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_log:
      s << "$"
        << "log"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_loop:
      s << "$"
        << "loop"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_map:
      s << "$"
        << "map"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_mapindex:
      s << "$"
        << "mapindex"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_match:
      s << "$"
        << "match"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_message:
      s << "$"
        << "message"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_metamodel:
      s << "$"
        << "metamodel"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_method:
      s << "$"
        << "method"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_mod:
      s << "$"
        << "mod"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_modifier:
      s << "$"
        << "modifier"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_nonterminal:
      s << "$"
        << "nonterminal"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_not:
      s << "$"
        << "not"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_on:
      s << "$"
        << "on"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_once:
      s << "$"
        << "once"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_operator:
      s << "$"
        << "operator"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_option:
      s << "$"
        << "option"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_or:
      s << "$"
        << "or"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_override:
      s << "$"
        << "override"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_parse:
      s << "$"
        << "parse"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_program:
      s << "$"
        << "program"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_reader:
      s << "$"
        << "reader"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_remove:
      s << "$"
        << "remove"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_repeat:
      s << "$"
        << "repeat"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_rewind:
      s << "$"
        << "rewind"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_root:
      s << "$"
        << "root"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_routine:
      s << "$"
        << "routine"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_rule:
      s << "$"
        << "rule"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_search:
      s << "$"
        << "search"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_select:
      s << "$"
        << "select"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_self:
      s << "$"
        << "self"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_semantics:
      s << "$"
        << "semantics"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_send:
      s << "$"
        << "send"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_sortedlist:
      s << "$"
        << "sortedlist"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_state:
      s << "$"
        << "state"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_struct:
      s << "$"
        << "struct"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_style:
      s << "$"
        << "style"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_switch:
      s << "$"
        << "switch"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_syntax:
      s << "$"
        << "syntax"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_tag:
      s << "$"
        << "tag"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_template:
      s << "$"
        << "template"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_then:
      s << "$"
        << "then"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_treewalking:
      s << "$"
        << "treewalking"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_true:
      s << "$"
        << "true"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_unused:
      s << "$"
        << "unused"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_warning:
      s << "$"
        << "warning"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_when:
      s << "$"
        << "when"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_while:
      s << "$"
        << "while"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_literal_5Fdouble:
      s << "$"
        << "literal_double"
        << "$" ;
      s << " " ;
      s.appendDouble (_p->floatValue) ;
    s << " " ;
    s.appendCLiteralStringConstant (_p->tokenString) ;
      break;
    case  galgasTemplateScanner_1_unsigned_5Fliteral_5Finteger:
      s << "$"
        << "unsigned_literal_integer"
        << "$" ;
      s << " " ;
      s.appendUnsigned (_p->uint32value) ;
      break;
    case  galgasTemplateScanner_1_signed_5Fliteral_5Finteger:
      s << "$"
        << "signed_literal_integer"
        << "$" ;
      s << " " ;
      s.appendSigned (_p->sint32value) ;
      break;
    case  galgasTemplateScanner_1_unsigned_5Fliteral_5Finteger64:
      s << "$"
        << "unsigned_literal_integer64"
        << "$" ;
      s << " " ;
      s.appendUnsigned64 (_p->uint64value) ;
      break;
    case  galgasTemplateScanner_1_signed_5Fliteral_5Finteger64:
      s << "$"
        << "signed_literal_integer64"
        << "$" ;
      s << " " ;
      s.appendSigned64 (_p->sint64value) ;
      break;
    case  galgasTemplateScanner_1__2E:
      s << "$"
        << "."
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2E_3D:
      s << "$"
        << ".="
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2E_2E_2E:
      s << "$"
        << "..."
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2A:
      s << "$"
        << "*"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__7C:
      s << "$"
        << "|"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2C:
      s << "$"
        << ","
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2B:
      s << "$"
        << "+"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2D_2D:
      s << "$"
        << "--"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3A_3A:
      s << "$"
        << "::"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3E:
      s << "$"
        << ">"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3B:
      s << "$"
        << ";"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3A:
      s << "$"
        << ":"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2D:
      s << "$"
        << "-"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__28:
      s << "$"
        << "("
        << "$" ;
      break;
    case  galgasTemplateScanner_1__29:
      s << "$"
        << ")"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2D_3E:
      s << "$"
        << "->"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3F:
      s << "$"
        << "\?"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3D_3D:
      s << "$"
        << "=="
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3F_3F:
      s << "$"
        << "\?\?"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__21:
      s << "$"
        << "!"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3A_3D:
      s << "$"
        << ":="
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2B_2B:
      s << "$"
        << "++"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__5B:
      s << "$"
        << "["
        << "$" ;
      break;
    case  galgasTemplateScanner_1__5D:
      s << "$"
        << "]"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2B_3D:
      s << "$"
        << "+="
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3F_21:
      s << "$"
        << "\?!"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__21_3F:
      s << "$"
        << "!\?"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2F:
      s << "$"
        << "/"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__21_3D:
      s << "$"
        << "!="
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3E_3D:
      s << "$"
        << ">="
        << "$" ;
      break;
    case  galgasTemplateScanner_1__26:
      s << "$"
        << "&"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__7B:
      s << "$"
        << "{"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__7D:
      s << "$"
        << "}"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2B_3E:
      s << "$"
        << "+>"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__2D_3D:
      s << "$"
        << "-="
        << "$" ;
      break;
    case  galgasTemplateScanner_1__5E:
      s << "$"
        << "^"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3E_3E:
      s << "$"
        << ">>"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__7E:
      s << "$"
        << "~"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3C_2D:
      s << "$"
        << "<-"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3C:
      s << "$"
        << "<"
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3C_3D:
      s << "$"
        << "<="
        << "$" ;
      break;
    case  galgasTemplateScanner_1__3C_3C:
      s << "$"
        << "<<"
        << "$" ;
      break;
    case  galgasTemplateScanner_1_comment:
      s << "$"
        << "comment"
        << "$" ;
      break;
    default:
      break ;
    }
  }
  return s ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            parseLexicalToken                              *
//                                                                           *
//---------------------------------------------------------------------------*

bool galgasTemplateScanner::
parseLexicalToken (void) {
  cTokenFor_galgasTemplateScanner _token ;
  bool loop_ = true ;
  _token._mTokenCode = -1 ;
  while ((_token._mTokenCode < 0) && (UNICODE_VALUE (mCurrentChar) != '\0')) {
    if ((_mMatchedTemplateDelimiterIndex >= 0)
     && (kTemplateDefinitionArray [_mMatchedTemplateDelimiterIndex].mEndStringLength > 0)
     && (UNICODE_VALUE (mCurrentChar) != '\0')) {
      const bool foundEndDelimitor = testForInputUTF32String (kTemplateDefinitionArray [_mMatchedTemplateDelimiterIndex].mEndString,
                                                              kTemplateDefinitionArray [_mMatchedTemplateDelimiterIndex].mEndStringLength,
                                                              true) ;
      if (foundEndDelimitor) {
        _mMatchedTemplateDelimiterIndex = -1 ;
      }
    }
    while ((_mMatchedTemplateDelimiterIndex < 0) && (UNICODE_VALUE (mCurrentChar) != '\0')) {
      sint32 _replacementIndex = 0 ;
      while (_replacementIndex >= 0) {
       _replacementIndex = findTemplateDelimiterIndex (kTemplateReplacementArray, 1) ;
         if (_replacementIndex >= 0) {
           _token._mTemplateStringBeforeToken << kTemplateReplacementArray [_replacementIndex].mEndString ;
        }
      }
      _mMatchedTemplateDelimiterIndex = findTemplateDelimiterIndex (kTemplateDefinitionArray, 1) ;
      if (_mMatchedTemplateDelimiterIndex < 0) {
        _token._mTemplateStringBeforeToken.appendUnicodeCharacter (mCurrentChar COMMA_HERE) ;
        advance () ;
      }
    }
    if ((_mMatchedTemplateDelimiterIndex >= 0) && (UNICODE_VALUE (mCurrentChar) != '\0')) {
      _token.identifierString.clear () ;
      _token.uint32value = 0 ;
      _token.sint32value = 0 ;
      _token.uint64value = 0 ;
      _token.sint64value = 0 ;
      _token.charValue = UNICODE ('\0') ;
      _token.tokenString.clear () ;
      _token.floatValue = 0.0 ;
      _mTokenFirstLocation = _mCurrentLocation ;
      try{
        if (testForInputCharRange (UNICODE ('a'), UNICODE ('z')) ||
            testForInputCharRange (UNICODE ('A'), UNICODE ('Z'))) {
          do {
            scanner_action_enterCharacterIntoString (_token.identifierString, scanner_action_toLower (previousChar ())) ;
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            if (testForInputCharRange (UNICODE ('a'), UNICODE ('z')) ||
                testForInputCharRange (UNICODE ('A'), UNICODE ('Z')) ||
                testForInputChar (UNICODE ('_')) ||
                testForInputCharRange (UNICODE ('0'), UNICODE ('9'))) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
          _token._mTokenCode = search_into_galgasKeyWordList (_token.identifierString) ;
          if (_token._mTokenCode == -1) {
            _token._mTokenCode = galgasTemplateScanner_1_identifier ;
          }
          _enterToken (_token) ;
        }else if (testForInputCharRange (UNICODE ('0'), UNICODE ('9'))) {
          scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          do {
            if (testForInputCharRange (UNICODE ('0'), UNICODE ('9'))) {
              scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            }else if (testForInputChar (UNICODE ('_'))) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
          if (testForInputChar (UNICODE ('S')) ||
              testForInputChar (UNICODE ('s'))) {
            scanner_action_convertDecimalStringIntoSInt (_token.tokenString, _token.sint32value, gErrorMessage_0, gErrorMessage_2) ;
            _token._mTokenCode = galgasTemplateScanner_1_signed_5Fliteral_5Finteger ;
            _enterToken (_token) ;
          }else if (testForInputString ("LS", 2, true)) {
            scanner_action_convertDecimalStringIntoSInt64 (_token.tokenString, _token.sint64value, gErrorMessage_0, gErrorMessage_2) ;
            _token._mTokenCode = galgasTemplateScanner_1_signed_5Fliteral_5Finteger64 ;
            _enterToken (_token) ;
          }else if (testForInputChar (UNICODE ('L'))) {
            scanner_action_convertDecimalStringIntoUInt64 (_token.tokenString, _token.uint64value, gErrorMessage_0, gErrorMessage_2) ;
            _token._mTokenCode = galgasTemplateScanner_1_unsigned_5Fliteral_5Finteger64 ;
            _enterToken (_token) ;
          }else if (testForInputChar (UNICODE ('.'))) {
            scanner_action_enterCharacterIntoString (_token.tokenString, UNICODE ('.')) ;
            do {
              if (testForInputCharRange (UNICODE ('0'), UNICODE ('9'))) {
                scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
              }else if (testForInputChar (UNICODE ('_'))) {
              }else{
                loop_ = false ;
              }
            }while (loop_) ;
            loop_ = true ;
            scanner_action_convertStringToDouble (_token.tokenString, _token.floatValue, gErrorMessage_1) ;
            _token._mTokenCode = galgasTemplateScanner_1_literal_5Fdouble ;
            _enterToken (_token) ;
          }else{
            scanner_action_convertDecimalStringIntoUInt (_token.tokenString, _token.uint32value, gErrorMessage_0, gErrorMessage_2) ;
            _token._mTokenCode = galgasTemplateScanner_1_unsigned_5Fliteral_5Finteger ;
            _enterToken (_token) ;
          }
        }else if (testForInputChar (UNICODE ('.'))) {
          if (testForInputCharRange (UNICODE ('0'), UNICODE ('9'))) {
            scanner_action_enterCharacterIntoString (_token.tokenString, UNICODE ('0')) ;
            scanner_action_enterCharacterIntoString (_token.tokenString, UNICODE ('.')) ;
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            do {
              if (testForInputCharRange (UNICODE ('0'), UNICODE ('9'))) {
                scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
              }else if (testForInputChar (UNICODE ('_'))) {
              }else{
                loop_ = false ;
              }
            }while (loop_) ;
            loop_ = true ;
            scanner_action_convertStringToDouble (_token.tokenString, _token.floatValue, gErrorMessage_1) ;
            _token._mTokenCode = galgasTemplateScanner_1_literal_5Fdouble ;
            _enterToken (_token) ;
          }else{
            if (testForInputString ("..", 2, true)) {
              _token._mTokenCode = galgasTemplateScanner_1__2E_2E_2E ;
              _enterToken (_token) ;
            }else if (testForInputString ("=", 1, true)) {
              _token._mTokenCode = galgasTemplateScanner_1__2E_3D ;
              _enterToken (_token) ;
            }else{
              _token._mTokenCode = galgasTemplateScanner_1__2E ;
              _enterToken (_token) ;
            }
          }
        }else if (testForInputString ("--", 2, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__2D_2D ;
          _enterToken (_token) ;
        }else if (testForInputString ("::", 2, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__3A_3A ;
          _enterToken (_token) ;
        }else if (testForInputString ("->", 2, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__2D_3E ;
          _enterToken (_token) ;
        }else if (testForInputString ("==", 2, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__3D_3D ;
          _enterToken (_token) ;
        }else if (testForInputString ("\?\?", 2, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__3F_3F ;
          _enterToken (_token) ;
        }else if (testForInputString (":=", 2, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__3A_3D ;
          _enterToken (_token) ;
        }else if (testForInputString ("++", 2, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__2B_2B ;
          _enterToken (_token) ;
        }else if (testForInputString ("+=", 2, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__2B_3D ;
          _enterToken (_token) ;
        }else if (testForInputString ("\?!", 2, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__3F_21 ;
          _enterToken (_token) ;
        }else if (testForInputString ("!\?", 2, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__21_3F ;
          _enterToken (_token) ;
        }else if (testForInputString ("!=", 2, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__21_3D ;
          _enterToken (_token) ;
        }else if (testForInputString (">=", 2, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__3E_3D ;
          _enterToken (_token) ;
        }else if (testForInputString ("+>", 2, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__2B_3E ;
          _enterToken (_token) ;
        }else if (testForInputString ("-=", 2, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__2D_3D ;
          _enterToken (_token) ;
        }else if (testForInputString (">>", 2, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__3E_3E ;
          _enterToken (_token) ;
        }else if (testForInputString ("<-", 2, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__3C_2D ;
          _enterToken (_token) ;
        }else if (testForInputString ("*", 1, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__2A ;
          _enterToken (_token) ;
        }else if (testForInputString ("|", 1, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__7C ;
          _enterToken (_token) ;
        }else if (testForInputString (",", 1, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__2C ;
          _enterToken (_token) ;
        }else if (testForInputString ("+", 1, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__2B ;
          _enterToken (_token) ;
        }else if (testForInputString (">", 1, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__3E ;
          _enterToken (_token) ;
        }else if (testForInputString (";", 1, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__3B ;
          _enterToken (_token) ;
        }else if (testForInputString (":", 1, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__3A ;
          _enterToken (_token) ;
        }else if (testForInputString ("-", 1, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__2D ;
          _enterToken (_token) ;
        }else if (testForInputString ("(", 1, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__28 ;
          _enterToken (_token) ;
        }else if (testForInputString (")", 1, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__29 ;
          _enterToken (_token) ;
        }else if (testForInputString ("\?", 1, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__3F ;
          _enterToken (_token) ;
        }else if (testForInputString ("!", 1, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__21 ;
          _enterToken (_token) ;
        }else if (testForInputString ("[", 1, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__5B ;
          _enterToken (_token) ;
        }else if (testForInputString ("]", 1, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__5D ;
          _enterToken (_token) ;
        }else if (testForInputString ("/", 1, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__2F ;
          _enterToken (_token) ;
        }else if (testForInputString ("&", 1, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__26 ;
          _enterToken (_token) ;
        }else if (testForInputString ("{", 1, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__7B ;
          _enterToken (_token) ;
        }else if (testForInputString ("}", 1, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__7D ;
          _enterToken (_token) ;
        }else if (testForInputString ("^", 1, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__5E ;
          _enterToken (_token) ;
        }else if (testForInputString ("~", 1, true)) {
          _token._mTokenCode = galgasTemplateScanner_1__7E ;
          _enterToken (_token) ;
        }else if (testForInputChar (UNICODE ('<'))) {
          if (testForInputChar (UNICODE ('='))) {
            _token._mTokenCode = galgasTemplateScanner_1__3C_3D ;
            _enterToken (_token) ;
          }else if (testForInputChar (UNICODE ('<'))) {
            _token._mTokenCode = galgasTemplateScanner_1__3C_3C ;
            _enterToken (_token) ;
          }else{
            _token._mTokenCode = galgasTemplateScanner_1__3C ;
            _enterToken (_token) ;
          }
        }else if (testForInputChar (UNICODE ('#'))) {
          do {
            if (testForInputCharRange (UNICODE (1), UNICODE ('\t')) ||
                testForInputChar (UNICODE ('\v')) ||
                testForInputChar (UNICODE ('\f')) ||
                testForInputCharRange (UNICODE (14), UNICODE (255))) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
        }else if (testForInputCharRange (UNICODE (1), UNICODE (' '))) {
        }else if (testForInputChar (UNICODE ('\0'))) { // End of source text ? 
          _token._mTokenCode = galgasTemplateScanner_1_ ; // Empty string code
        }else{ // Unknown input character
          unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
        }
      }catch (const C_lexicalErrorException &) {
        _token._mTokenCode = -1 ; // No token
        advance () ; // ... go throught unknown character
      }
    }
    if ((_token._mTokenCode > 0) && kEndOfScriptInTemplateArray [_token._mTokenCode - 1]) {
      _mMatchedTemplateDelimiterIndex = -1 ;
    }
  }
  if ((UNICODE_VALUE (mCurrentChar) == '\0') && (_token._mTemplateStringBeforeToken.length () > 0)) {
    _token._mTokenCode = 0 ;
    _enterToken (_token) ;
  }
  return _token._mTokenCode > 0 ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   parseLexicalTokenForLexicalColoring                     *
//                                                                           *
//---------------------------------------------------------------------------*

sint16 galgasTemplateScanner::
parseLexicalTokenForLexicalColoring (void) {
  cTokenFor_galgasTemplateScanner _token ;
  bool loop_ = true ;
  _token._mTokenCode = -1 ;
  while (_token._mTokenCode < 0) {
    _token.identifierString.clear () ;
    _token.uint32value = 0 ;
    _token.sint32value = 0 ;
    _token.uint64value = 0 ;
    _token.sint64value = 0 ;
    _token.charValue = UNICODE ('\0') ;
    _token.tokenString.clear () ;
    _token.floatValue = 0.0 ;
    _mTokenFirstLocation = _mCurrentLocation ;
    try{
      if (testForInputCharRange (UNICODE ('a'), UNICODE ('z')) ||
          testForInputCharRange (UNICODE ('A'), UNICODE ('Z'))) {
        do {
          scanner_action_enterCharacterIntoString (_token.identifierString, scanner_action_toLower (previousChar ())) ;
          scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          if (testForInputCharRange (UNICODE ('a'), UNICODE ('z')) ||
              testForInputCharRange (UNICODE ('A'), UNICODE ('Z')) ||
              testForInputChar (UNICODE ('_')) ||
              testForInputCharRange (UNICODE ('0'), UNICODE ('9'))) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = search_into_galgasKeyWordList (_token.identifierString) ;
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = galgasTemplateScanner_1_identifier ;
        }
      }else if (testForInputCharRange (UNICODE ('0'), UNICODE ('9'))) {
        scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
        do {
          if (testForInputCharRange (UNICODE ('0'), UNICODE ('9'))) {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          }else if (testForInputChar (UNICODE ('_'))) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar (UNICODE ('S')) ||
            testForInputChar (UNICODE ('s'))) {
          scanner_action_convertDecimalStringIntoSInt (_token.tokenString, _token.sint32value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgasTemplateScanner_1_signed_5Fliteral_5Finteger ;
        }else if (testForInputString ("LS", 2, true)) {
          scanner_action_convertDecimalStringIntoSInt64 (_token.tokenString, _token.sint64value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgasTemplateScanner_1_signed_5Fliteral_5Finteger64 ;
        }else if (testForInputChar (UNICODE ('L'))) {
          scanner_action_convertDecimalStringIntoUInt64 (_token.tokenString, _token.uint64value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgasTemplateScanner_1_unsigned_5Fliteral_5Finteger64 ;
        }else if (testForInputChar (UNICODE ('.'))) {
          scanner_action_enterCharacterIntoString (_token.tokenString, UNICODE ('.')) ;
          do {
            if (testForInputCharRange (UNICODE ('0'), UNICODE ('9'))) {
              scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            }else if (testForInputChar (UNICODE ('_'))) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
          scanner_action_convertStringToDouble (_token.tokenString, _token.floatValue, gErrorMessage_1) ;
          _token._mTokenCode = galgasTemplateScanner_1_literal_5Fdouble ;
        }else{
          scanner_action_convertDecimalStringIntoUInt (_token.tokenString, _token.uint32value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgasTemplateScanner_1_unsigned_5Fliteral_5Finteger ;
        }
      }else if (testForInputChar (UNICODE ('.'))) {
        if (testForInputCharRange (UNICODE ('0'), UNICODE ('9'))) {
          scanner_action_enterCharacterIntoString (_token.tokenString, UNICODE ('0')) ;
          scanner_action_enterCharacterIntoString (_token.tokenString, UNICODE ('.')) ;
          scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          do {
            if (testForInputCharRange (UNICODE ('0'), UNICODE ('9'))) {
              scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            }else if (testForInputChar (UNICODE ('_'))) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
          scanner_action_convertStringToDouble (_token.tokenString, _token.floatValue, gErrorMessage_1) ;
          _token._mTokenCode = galgasTemplateScanner_1_literal_5Fdouble ;
        }else{
          if (testForInputString ("..", 2, true)) {
            _token._mTokenCode = galgasTemplateScanner_1__2E_2E_2E ;
          }else if (testForInputString ("=", 1, true)) {
            _token._mTokenCode = galgasTemplateScanner_1__2E_3D ;
          }else{
            _token._mTokenCode = galgasTemplateScanner_1__2E ;
          }
        }
      }else if (testForInputString ("--", 2, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__2D_2D ;
      }else if (testForInputString ("::", 2, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__3A_3A ;
      }else if (testForInputString ("->", 2, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__2D_3E ;
      }else if (testForInputString ("==", 2, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__3D_3D ;
      }else if (testForInputString ("\?\?", 2, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__3F_3F ;
      }else if (testForInputString (":=", 2, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__3A_3D ;
      }else if (testForInputString ("++", 2, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__2B_2B ;
      }else if (testForInputString ("+=", 2, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__2B_3D ;
      }else if (testForInputString ("\?!", 2, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__3F_21 ;
      }else if (testForInputString ("!\?", 2, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__21_3F ;
      }else if (testForInputString ("!=", 2, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__21_3D ;
      }else if (testForInputString (">=", 2, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__3E_3D ;
      }else if (testForInputString ("+>", 2, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__2B_3E ;
      }else if (testForInputString ("-=", 2, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__2D_3D ;
      }else if (testForInputString (">>", 2, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__3E_3E ;
      }else if (testForInputString ("<-", 2, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__3C_2D ;
      }else if (testForInputString ("*", 1, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__2A ;
      }else if (testForInputString ("|", 1, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__7C ;
      }else if (testForInputString (",", 1, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__2C ;
      }else if (testForInputString ("+", 1, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__2B ;
      }else if (testForInputString (">", 1, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__3E ;
      }else if (testForInputString (";", 1, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__3B ;
      }else if (testForInputString (":", 1, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__3A ;
      }else if (testForInputString ("-", 1, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__2D ;
      }else if (testForInputString ("(", 1, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__28 ;
      }else if (testForInputString (")", 1, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__29 ;
      }else if (testForInputString ("\?", 1, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__3F ;
      }else if (testForInputString ("!", 1, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__21 ;
      }else if (testForInputString ("[", 1, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__5B ;
      }else if (testForInputString ("]", 1, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__5D ;
      }else if (testForInputString ("/", 1, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__2F ;
      }else if (testForInputString ("&", 1, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__26 ;
      }else if (testForInputString ("{", 1, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__7B ;
      }else if (testForInputString ("}", 1, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__7D ;
      }else if (testForInputString ("^", 1, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__5E ;
      }else if (testForInputString ("~", 1, true)) {
        _token._mTokenCode = galgasTemplateScanner_1__7E ;
      }else if (testForInputChar (UNICODE ('<'))) {
        if (testForInputChar (UNICODE ('='))) {
          _token._mTokenCode = galgasTemplateScanner_1__3C_3D ;
        }else if (testForInputChar (UNICODE ('<'))) {
          _token._mTokenCode = galgasTemplateScanner_1__3C_3C ;
        }else{
          _token._mTokenCode = galgasTemplateScanner_1__3C ;
        }
      }else if (testForInputChar (UNICODE ('#'))) {
        do {
          if (testForInputCharRange (UNICODE (1), UNICODE ('\t')) ||
              testForInputChar (UNICODE ('\v')) ||
              testForInputChar (UNICODE ('\f')) ||
              testForInputCharRange (UNICODE (14), UNICODE (255))) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = galgasTemplateScanner_1_comment ;
      }else if (testForInputCharRange (UNICODE (1), UNICODE (' '))) {
      }else if (testForInputChar (UNICODE ('\0'))) { // End of source text ? 
        _token._mTokenCode = galgasTemplateScanner_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      _token._mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
      throw ;
    }
  }
  return _token._mTokenCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            Styles definition                              *
//                                                                           *
//---------------------------------------------------------------------------*

sint32 galgasTemplateScanner::getStylesCount (void) {
  return 11 ;
}

//---------------------------------------------------------------------------*

const char * galgasTemplateScanner::getStyleName (const sint32 inIndex) {
  const char * kStylesArray [12] = {"Default style", "Keywords:", "Delimiters:", "Terminal Symbols:", "Non Terminal Symbols:", "Integer Constants:", "Floating Point Constants:", "Character Constants:", "String Constants:", "Type Names (@...):", "Comments:", NULL} ;
  return (inIndex < 11) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

const char * galgasTemplateScanner::getStyleIdentifier (const sint32 inIndex) {
  const char * kStylesArray [12] = {"", "keywordsStyle", "delimitersStyle", "terminalStyle", "nonTerminalStyle", "integerStyle", "float_csts", "characterStyle", "stringStyle", "typeNameStyle", "commentStyle", NULL} ;
  return (inIndex < 11) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

uint8 galgasTemplateScanner::
terminalStyleIndex (const sint32 inTerminal) {
  static const uint8 kTerminalSymbolStyles [133] = {0,
    0 /* galgasTemplateScanner_1_identifier */,
    1 /* galgasTemplateScanner_1_abstract */,
    1 /* galgasTemplateScanner_1_block */,
    1 /* galgasTemplateScanner_1_call */,
    1 /* galgasTemplateScanner_1_cast */,
    1 /* galgasTemplateScanner_1_class */,
    1 /* galgasTemplateScanner_1_compile */,
    1 /* galgasTemplateScanner_1_const */,
    1 /* galgasTemplateScanner_1_constructor */,
    1 /* galgasTemplateScanner_1_default */,
    1 /* galgasTemplateScanner_1_description */,
    1 /* galgasTemplateScanner_1_do */,
    1 /* galgasTemplateScanner_1_domain */,
    1 /* galgasTemplateScanner_1_drop */,
    1 /* galgasTemplateScanner_1_else */,
    1 /* galgasTemplateScanner_1_elsif */,
    1 /* galgasTemplateScanner_1_end */,
    1 /* galgasTemplateScanner_1_entity */,
    1 /* galgasTemplateScanner_1_enum */,
    1 /* galgasTemplateScanner_1_error */,
    1 /* galgasTemplateScanner_1_extends */,
    1 /* galgasTemplateScanner_1_extern */,
    1 /* galgasTemplateScanner_1_extract */,
    1 /* galgasTemplateScanner_1_false */,
    1 /* galgasTemplateScanner_1_filewrapper */,
    1 /* galgasTemplateScanner_1_foreach */,
    1 /* galgasTemplateScanner_1_grammar */,
    1 /* galgasTemplateScanner_1_gui */,
    1 /* galgasTemplateScanner_1_here */,
    1 /* galgasTemplateScanner_1_if */,
    1 /* galgasTemplateScanner_1_import */,
    1 /* galgasTemplateScanner_1_import_5F_5F */,
    1 /* galgasTemplateScanner_1_in */,
    1 /* galgasTemplateScanner_1_insert */,
    1 /* galgasTemplateScanner_1_label */,
    1 /* galgasTemplateScanner_1_lexique */,
    1 /* galgasTemplateScanner_1_list */,
    1 /* galgasTemplateScanner_1_log */,
    1 /* galgasTemplateScanner_1_loop */,
    1 /* galgasTemplateScanner_1_map */,
    1 /* galgasTemplateScanner_1_mapindex */,
    1 /* galgasTemplateScanner_1_match */,
    1 /* galgasTemplateScanner_1_message */,
    1 /* galgasTemplateScanner_1_metamodel */,
    1 /* galgasTemplateScanner_1_method */,
    1 /* galgasTemplateScanner_1_mod */,
    1 /* galgasTemplateScanner_1_modifier */,
    1 /* galgasTemplateScanner_1_nonterminal */,
    1 /* galgasTemplateScanner_1_not */,
    1 /* galgasTemplateScanner_1_on */,
    1 /* galgasTemplateScanner_1_once */,
    1 /* galgasTemplateScanner_1_operator */,
    1 /* galgasTemplateScanner_1_option */,
    1 /* galgasTemplateScanner_1_or */,
    1 /* galgasTemplateScanner_1_override */,
    1 /* galgasTemplateScanner_1_parse */,
    1 /* galgasTemplateScanner_1_program */,
    1 /* galgasTemplateScanner_1_reader */,
    1 /* galgasTemplateScanner_1_remove */,
    1 /* galgasTemplateScanner_1_repeat */,
    1 /* galgasTemplateScanner_1_rewind */,
    1 /* galgasTemplateScanner_1_root */,
    1 /* galgasTemplateScanner_1_routine */,
    1 /* galgasTemplateScanner_1_rule */,
    1 /* galgasTemplateScanner_1_search */,
    1 /* galgasTemplateScanner_1_select */,
    1 /* galgasTemplateScanner_1_self */,
    1 /* galgasTemplateScanner_1_semantics */,
    1 /* galgasTemplateScanner_1_send */,
    1 /* galgasTemplateScanner_1_sortedlist */,
    1 /* galgasTemplateScanner_1_state */,
    1 /* galgasTemplateScanner_1_struct */,
    1 /* galgasTemplateScanner_1_style */,
    1 /* galgasTemplateScanner_1_switch */,
    1 /* galgasTemplateScanner_1_syntax */,
    1 /* galgasTemplateScanner_1_tag */,
    1 /* galgasTemplateScanner_1_template */,
    1 /* galgasTemplateScanner_1_then */,
    1 /* galgasTemplateScanner_1_treewalking */,
    1 /* galgasTemplateScanner_1_true */,
    1 /* galgasTemplateScanner_1_unused */,
    1 /* galgasTemplateScanner_1_warning */,
    1 /* galgasTemplateScanner_1_when */,
    1 /* galgasTemplateScanner_1_while */,
    6 /* galgasTemplateScanner_1_literal_5Fdouble */,
    5 /* galgasTemplateScanner_1_unsigned_5Fliteral_5Finteger */,
    5 /* galgasTemplateScanner_1_signed_5Fliteral_5Finteger */,
    5 /* galgasTemplateScanner_1_unsigned_5Fliteral_5Finteger64 */,
    5 /* galgasTemplateScanner_1_signed_5Fliteral_5Finteger64 */,
    2 /* galgasTemplateScanner_1__2E */,
    2 /* galgasTemplateScanner_1__2E_3D */,
    2 /* galgasTemplateScanner_1__2E_2E_2E */,
    2 /* galgasTemplateScanner_1__2A */,
    2 /* galgasTemplateScanner_1__7C */,
    2 /* galgasTemplateScanner_1__2C */,
    2 /* galgasTemplateScanner_1__2B */,
    2 /* galgasTemplateScanner_1__2D_2D */,
    2 /* galgasTemplateScanner_1__3A_3A */,
    2 /* galgasTemplateScanner_1__3E */,
    2 /* galgasTemplateScanner_1__3B */,
    2 /* galgasTemplateScanner_1__3A */,
    2 /* galgasTemplateScanner_1__2D */,
    2 /* galgasTemplateScanner_1__28 */,
    2 /* galgasTemplateScanner_1__29 */,
    2 /* galgasTemplateScanner_1__2D_3E */,
    2 /* galgasTemplateScanner_1__3F */,
    2 /* galgasTemplateScanner_1__3D_3D */,
    2 /* galgasTemplateScanner_1__3F_3F */,
    2 /* galgasTemplateScanner_1__21 */,
    2 /* galgasTemplateScanner_1__3A_3D */,
    2 /* galgasTemplateScanner_1__2B_2B */,
    2 /* galgasTemplateScanner_1__5B */,
    2 /* galgasTemplateScanner_1__5D */,
    2 /* galgasTemplateScanner_1__2B_3D */,
    2 /* galgasTemplateScanner_1__3F_21 */,
    2 /* galgasTemplateScanner_1__21_3F */,
    2 /* galgasTemplateScanner_1__2F */,
    2 /* galgasTemplateScanner_1__21_3D */,
    2 /* galgasTemplateScanner_1__3E_3D */,
    2 /* galgasTemplateScanner_1__26 */,
    2 /* galgasTemplateScanner_1__7B */,
    2 /* galgasTemplateScanner_1__7D */,
    2 /* galgasTemplateScanner_1__2B_3E */,
    2 /* galgasTemplateScanner_1__2D_3D */,
    2 /* galgasTemplateScanner_1__5E */,
    2 /* galgasTemplateScanner_1__3E_3E */,
    2 /* galgasTemplateScanner_1__7E */,
    2 /* galgasTemplateScanner_1__3C_2D */,
    2 /* galgasTemplateScanner_1__3C */,
    2 /* galgasTemplateScanner_1__3C_3D */,
    2 /* galgasTemplateScanner_1__3C_3C */,
    10 /* galgasTemplateScanner_1_comment */
  } ;
  return kTerminalSymbolStyles [inTerminal] ;
}

//---------------------------------------------------------------------------*

void galgasTemplateScanner::_enterToken (const cTokenFor_galgasTemplateScanner & inToken) {
  cTokenFor_galgasTemplateScanner * _p = NULL ;
  macroMyNew (_p, cTokenFor_galgasTemplateScanner ()) ;
  _p->_mTokenCode = inToken._mTokenCode ;
  _p->_mFirstLocation = _mTokenFirstLocation ;
  _p->_mLastLocation  = _mTokenLastLocation ;
  _p->_mTemplateStringBeforeToken  = inToken._mTemplateStringBeforeToken ;
  _p->identifierString = inToken.identifierString ;
  _p->uint32value = inToken.uint32value ;
  _p->sint32value = inToken.sint32value ;
  _p->uint64value = inToken.uint64value ;
  _p->sint64value = inToken.sint64value ;
  _p->charValue = inToken.charValue ;
  _p->tokenString = inToken.tokenString ;
  _p->floatValue = inToken.floatValue ;
  _enterTokenFromPointer (_p) ;
}

//---------------------------------------------------------------------------*

void galgasTemplateScanner::
_assignFromAttribute_identifierString (GGS_lstring & outValue) const {
  cTokenFor_galgasTemplateScanner * _p = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, _p->identifierString) ;
}

//---------------------------------------------------------------------------*

C_String galgasTemplateScanner::
_attributeValue_identifierString (void) const {
  cTokenFor_galgasTemplateScanner * _p = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  return _p->identifierString ;
}

//---------------------------------------------------------------------------*

void galgasTemplateScanner::
_assignFromAttribute_uint32value (GGS_luint & outValue) const {
  cTokenFor_galgasTemplateScanner * _p = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  outValue = GGS_luint (* this, _p->uint32value) ;
}

//---------------------------------------------------------------------------*

uint32 galgasTemplateScanner::
_attributeValue_uint32value (void) const {
  cTokenFor_galgasTemplateScanner * _p = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  return _p->uint32value ;
}

//---------------------------------------------------------------------------*

void galgasTemplateScanner::
_assignFromAttribute_sint32value (GGS_lsint & outValue) const {
  cTokenFor_galgasTemplateScanner * _p = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  outValue = GGS_lsint (* this, _p->sint32value) ;
}

//---------------------------------------------------------------------------*

sint32 galgasTemplateScanner::
_attributeValue_sint32value (void) const {
  cTokenFor_galgasTemplateScanner * _p = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  return _p->sint32value ;
}

//---------------------------------------------------------------------------*

void galgasTemplateScanner::
_assignFromAttribute_uint64value (GGS_luint64 & outValue) const {
  cTokenFor_galgasTemplateScanner * _p = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  outValue = GGS_luint64 (* this, _p->uint64value) ;
}

//---------------------------------------------------------------------------*

uint64 galgasTemplateScanner::
_attributeValue_uint64value (void) const {
  cTokenFor_galgasTemplateScanner * _p = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  return _p->uint64value ;
}

//---------------------------------------------------------------------------*

void galgasTemplateScanner::
_assignFromAttribute_sint64value (GGS_lsint64 & outValue) const {
  cTokenFor_galgasTemplateScanner * _p = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  outValue = GGS_lsint64 (* this, _p->sint64value) ;
}

//---------------------------------------------------------------------------*

sint64 galgasTemplateScanner::
_attributeValue_sint64value (void) const {
  cTokenFor_galgasTemplateScanner * _p = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  return _p->sint64value ;
}

//---------------------------------------------------------------------------*

void galgasTemplateScanner::
_assignFromAttribute_charValue (GGS_lchar & outValue) const {
  cTokenFor_galgasTemplateScanner * _p = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  outValue = GGS_lchar (* this, _p->charValue) ;
}

//---------------------------------------------------------------------------*

utf32 galgasTemplateScanner::
_attributeValue_charValue (void) const {
  cTokenFor_galgasTemplateScanner * _p = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  return _p->charValue ;
}

//---------------------------------------------------------------------------*

void galgasTemplateScanner::
_assignFromAttribute_tokenString (GGS_lstring & outValue) const {
  cTokenFor_galgasTemplateScanner * _p = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, _p->tokenString) ;
}

//---------------------------------------------------------------------------*

C_String galgasTemplateScanner::
_attributeValue_tokenString (void) const {
  cTokenFor_galgasTemplateScanner * _p = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  return _p->tokenString ;
}

//---------------------------------------------------------------------------*

void galgasTemplateScanner::
_assignFromAttribute_floatValue (GGS_ldouble & outValue) const {
  cTokenFor_galgasTemplateScanner * _p = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  outValue = GGS_ldouble (* this, _p->floatValue) ;
}

//---------------------------------------------------------------------------*

double galgasTemplateScanner::
_attributeValue_floatValue (void) const {
  cTokenFor_galgasTemplateScanner * _p = (cTokenFor_galgasTemplateScanner *) mCurrentTokenPtr ;
  return _p->floatValue ;
}

//---------------------------------------------------------------------------*

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*

