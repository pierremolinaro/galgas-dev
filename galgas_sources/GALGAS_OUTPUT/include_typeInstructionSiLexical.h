//---------------------------------------------------------------------------*
//                                                                           *
//                File 'include_typeInstructionSiLexical.h'                  *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      april 1st, 2007, at 14h44'43"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_typeInstructionSiLexical'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_typeInstructionSiLexical : public cPtr_typeInstructionLexicale {
  private : typedef cPtr_typeInstructionLexicale inherited ;
//--- START OF USER ZONE 2

  public : virtual bool
  instruction__uses_loop_variable (void) const ;

  public : virtual void
  generate_scanner_instruction (const C_String & inLexiqueName,
                                const bool inGenerateEnterToken,
                                AC_OutputStream & inCppFile) const ;

  public : virtual void
  generateDecoderFromInstruction (C_Lexique & inLexique,
                                  cDecoderTargetState & ioCurrentState,
                                  cDecoderController & ioDecoderController) ;

//--- END OF USER ZONE 2

//--- Constructor
  public : cPtr_typeInstructionSiLexical (const GGS_typeListeTestsEtInstructions & ,
                                const GGS_tListeInstructionsLexicales & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_typeInstructionSiLexical (void) {}
  #endif

//--- Attributes
  public : GGS_typeListeTestsEtInstructions  attributListeBranches ;
  public : GGS_tListeInstructionsLexicales  attributBrancheSinon ;
//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;
} ;

//---------------------------------------------------------------------------*

