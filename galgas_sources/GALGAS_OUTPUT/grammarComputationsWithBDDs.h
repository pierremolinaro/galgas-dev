//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'grammarComputationsWithBDDs.h'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 20th, 2009, at 17h1'39"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef grammarComputationsWithBDDs_DEFINED
#define grammarComputationsWithBDDs_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_data.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_listmap.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_grammarDomain ;
class GGS_vocabularyMap ;
class GGS_derivationList ;
class GGS_productionListMap ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Class for 'grammarDomain' Domain                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_grammarDomain : public AC_galgas_domain {
//--- 'V' domain
  protected : GGS_stringlist mDomain_V ;
  protected : PMUInt16 mBDDVariableCountForDomain_V ;

//--- 'nonterminalsWithEmptyProduction' relation
  protected : C_BDD mBDDForRelation_nonterminalsWithEmptyProduction ;
  public : void modifier_addToNonterminalsWithEmptyProduction (C_Compiler & inLexique,
                                    const GGS_uint & inValue_0
                                    COMMA_LOCATION_ARGS) ;
  public : void modifier_resetNonterminalsWithEmptyProduction (C_Compiler & inLexique
                                    COMMA_LOCATION_ARGS) ;

  public : GGS_stringlist reader_nonterminalsWithEmptyProductionStringValueList (C_Compiler & inLexique
                                    COMMA_LOCATION_ARGS) const ;

//--- 'nonterminalsWithOneElementProduction' relation
  protected : C_BDD mBDDForRelation_nonterminalsWithOneElementProduction ;
  public : void modifier_addToNonterminalsWithOneElementProduction (C_Compiler & inLexique,
                                    const GGS_uint & inValue_0,
                                    const GGS_uint & inValue_1
                                    COMMA_LOCATION_ARGS) ;
  public : void modifier_resetNonterminalsWithOneElementProduction (C_Compiler & inLexique
                                    COMMA_LOCATION_ARGS) ;

//--- 'nonterminalsWithTwoElementProduction' relation
  protected : C_BDD mBDDForRelation_nonterminalsWithTwoElementProduction ;
  public : void modifier_addToNonterminalsWithTwoElementProduction (C_Compiler & inLexique,
                                    const GGS_uint & inValue_0,
                                    const GGS_uint & inValue_1,
                                    const GGS_uint & inValue_2
                                    COMMA_LOCATION_ARGS) ;
  public : void modifier_resetNonterminalsWithTwoElementProduction (C_Compiler & inLexique
                                    COMMA_LOCATION_ARGS) ;

//--- Default constructor
  public : GGS_grammarDomain (void) ;

//--- Destructor
  public : virtual ~GGS_grammarDomain (void) ;

//--- 'domainWithNames' GALGAS constructor
  public : static GGS_grammarDomain
  constructor_domainWithNames (C_Compiler & inLexique,
                               const GGS_stringlist & inDomain_V
                               COMMA_LOCATION_ARGS) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                           Map '@vocabularyMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_vocabularyMap ;

class GGS_vocabularyMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_vocabularyMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_vocabularyMap & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_vocabularyMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_vocabularyMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_vocabularyMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_vocabularyMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kInsertMessage_insertKey [] ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint &  inParameter0 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_searchKey [] ;

//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_uint & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_uint & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & inLexique
                                          COMMA_LOCATION_ARGS,
                                          const PMSInt32 inIndentation = 0) const ;
  public : static GGS_vocabularyMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_vocabularyMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_vocabularyMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_vocabularyMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_vocabularyMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uint   & _mIndex (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          list '@derivationList'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_derivationList ;

class GGS_derivationList : public AC_galgas_list {
  public : typedef elementOf_GGS_derivationList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_derivationList constructor_emptyList (void) ;
  public : static GGS_derivationList constructor_listWithValue (const GGS_uint64 & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_uint64list & argument_2) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_derivationList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_derivationList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_derivationList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_derivationList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_uint64 & _out_0,
                              GGS_uint & _out_1,
                              GGS_uint64list & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_uint64 & _out_0,
                             GGS_uint & _out_1,
                             GGS_uint64list & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_uint64 & _out_0,
                                GGS_uint & _out_1,
                                GGS_uint64list & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_uint64 & _out_0,
                                 GGS_uint & _out_1,
                                 GGS_uint64list & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_derivationList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_uint64 & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_uint64list & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_derivationList operator_concat (const GGS_derivationList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_uint64 & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_uint64list & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_uint64 & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_uint64list & argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_uint64 & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_uint64list & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & inLexique
                      COMMA_LOCATION_ARGS,
                      const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_uint64 
  reader_mLeftTerminalIndexAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_uint 
  reader_mProductionIndexAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_uint64list 
  reader_mDerivationAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMLeftTerminalIndexAtIndex (C_Compiler & inLexique,
                              const GGS_uint64  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMProductionIndexAtIndex (C_Compiler & inLexique,
                              const GGS_uint  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMDerivationAtIndex (C_Compiler & inLexique,
                              const GGS_uint64list  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_derivationList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uint64   & _mLeftTerminalIndex (LOCATION_ARGS) const ;
    public : /* const */ GGS_uint   & _mProductionIndex (LOCATION_ARGS) const ;
    public : /* const */ GGS_uint64list   & _mDerivation (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Map list '@productionListMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_productionListMap : public AC_galgas_listmap {
//--- Node class
  public : class cElement : public cPtrListMapObject {
 //--- List attribute
    public : GGS_derivationList mListObject ;
 //--- Constructor
    public : cElement (LOCATION_ARGS) ;
 //--- Description
    public : virtual C_String
    _description (C_Compiler & inLexique,
                  const PMSInt32 inIndentation
                  COMMA_LOCATION_ARGS) const ;
    public : virtual cPtrObject * _clone (LOCATION_ARGS) ;
    public : virtual bool isEqual (const cPtrListMapObject * inOperand) const ;
  } ;

//--- 'emptyMap' constructor
  public : static GGS_productionListMap
  constructor_emptyMap (void) ;

//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_productionListMap inOperand) ; //Don't pass 'inOperand' by reference !

//--- Handling '.' GALGAS operator
  public : GGS_productionListMap operator_concat (const GGS_productionListMap & inOperand) const ;

//--- Handle '+=' operator
  public : void
  addAssign_operation (const GGS_string & inKey,
                        const GGS_uint64 & inAttribute0,
                        const GGS_uint & inAttribute1,
                        const GGS_uint64list & inAttribute2) ;

//--- For 'description' reader
  protected : virtual const char * _typeNameForDescriptionReader (void) const ;

//--- Reader 'allKeys'
  public : GGS_stringset
  reader_allKeys (C_Compiler & inLexique
                  COMMA_LOCATION_ARGS) const ;

//--- Reader 'keyList'
  public : GGS_stringlist
  reader_keyList (C_Compiler & inLexique
                  COMMA_LOCATION_ARGS) const ;

//--- Reader 'listForKey'
  public : GGS_derivationList
  reader_listForKey (C_Compiler & inLexique,
                     const GGS_string & inKey
                     COMMA_LOCATION_ARGS) const ;

//--- Enumerator
  public : class cEnumerator : public cAbstractDictionaryEnumerator {
  //--- Contructor
    public : cEnumerator (const GGS_productionListMap & inListMap,
                          const bool inAscending) ;
  //--- Associated object accessor
    public : const GGS_derivationList & _object (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Routine 'newGrammarAnalyzer'                        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_newGrammarAnalyzer (C_Compiler &,
                                GGS_lstring  ,
                                GGS_uint  ,
                                GGS_string ,
                                const GGS_vocabularyMap  ,
                                const GGS_vocabularyMap  ,
                                const GGS_productionListMap ,
                                const GGS_uintlist  ,
                                GGS_string &,
                                GGS_string & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of map '@vocabularyMap'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class e_vocabularyMap {
  public : GGS_uint  mIndex ;

  public : e_vocabularyMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_vocabularyMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_vocabularyMap (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_vocabularyMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_vocabularyMap * nextObject (void) const { return (elementOf_GGS_vocabularyMap *) mNextItem ; }
  public : inline elementOf_GGS_vocabularyMap * infObject (void) const { return (elementOf_GGS_vocabularyMap *) mInfPtr ; }
  public : inline elementOf_GGS_vocabularyMap * supObject (void) const { return (elementOf_GGS_vocabularyMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_vocabularyMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & inLexique,
                                         const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@derivationList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_derivationList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_uint64  mLeftTerminalIndex ;
  public : GGS_uint  mProductionIndex ;
  public : GGS_uint64list  mDerivation ;
//--- Constructor
  public : elementOf_GGS_derivationList (const GGS_uint64 & ,
                                const GGS_uint & ,
                                const GGS_uint64list & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_derivationList * nextObject (void) const { return (elementOf_GGS_derivationList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_derivationList * previousObject (void) const { return (elementOf_GGS_derivationList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const PMSInt32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_derivationList ;
} ;

//---------------------------------------------------------------------------*

#endif
