//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'galgas_scanner.cpp'                          *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                    december 15th, 2006, at 16h43'34"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <ctype.h>
#include <string.h>

#include "utilities/MF_MemoryControl.h"
#include "galgas_scanner.h"

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFileName ().cString (), currentLineNumber ()
  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE
#else
  #define LINE_AND_SOURCE_FILE
  #define COMMA_LINE_AND_SOURCE_FILE
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                               Constructor                                 *
//                                                                           *
//---------------------------------------------------------------------------*

galgas_scanner::
galgas_scanner (AC_galgas_io * inGalgasInputOutput COMMA_LOCATION_ARGS)
: C_Lexique (inGalgasInputOutput COMMA_THERE) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Lexical error message list                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Message 0
static const char * gErrorMessage_0 = "decimal number too large" ;
//--- Message 1
static const char * gErrorMessage_1 = "invalid float number" ;
//--- Message 2
static const char * gErrorMessage_2 = "internal error" ;
//--- Message 3
static const char * gErrorMessage_3 = "in a type name, a letter should follow the '@' character" ;
//--- Message 4
static const char * gErrorMessage_4 = "in an MDA type name, a letter should follow the '%' character" ;
//--- Message 5
static const char * gErrorMessage_5 = "incorrect literal character" ;
//--- Message 6
static const char * gErrorMessage_6 = "ASCII code > 255" ;
//--- Message 7
static const char * gErrorMessage_7 = "incorrect terminal start" ;
//--- Message 8
static const char * gErrorMessage_8 = "terminal does not end with '$'" ;
//--- Message 9
static const char * gErrorMessage_9 = "string does not end with '\"'" ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Syntax error messages                            *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Syntax error message for terminal '$identifier$' :
static const char * gSyntaxErrorMessage_identifier = "an identifier" ;

//--- Syntax error message for terminal '$compile$' :
static const char * gSyntaxErrorMessage_compile = "the 'compile' keyword" ;

//--- Syntax error message for terminal '$extract$' :
static const char * gSyntaxErrorMessage_extract = "the 'extract' keyword" ;

//--- Syntax error message for terminal '$program$' :
static const char * gSyntaxErrorMessage_program = "the 'program' keyword" ;

//--- Syntax error message for terminal '$enum$' :
static const char * gSyntaxErrorMessage_enum = "the 'enum' keyword" ;

//--- Syntax error message for terminal '$syntax$' :
static const char * gSyntaxErrorMessage_syntax = "the 'syntax' keyword" ;

//--- Syntax error message for terminal '$semantics$' :
static const char * gSyntaxErrorMessage_semantics = "the 'semantics' keyword" ;

//--- Syntax error message for terminal '$extends$' :
static const char * gSyntaxErrorMessage_extends = "the 'extends' keyword" ;

//--- Syntax error message for terminal '$reader$' :
static const char * gSyntaxErrorMessage_reader = "the 'reader' keyword" ;

//--- Syntax error message for terminal '$extern$' :
static const char * gSyntaxErrorMessage_extern = "the 'extern' keyword" ;

//--- Syntax error message for terminal '$routine$' :
static const char * gSyntaxErrorMessage_routine = "the 'routine' keyword" ;

//--- Syntax error message for terminal '$foreach$' :
static const char * gSyntaxErrorMessage_foreach = "the 'foreach' keyword" ;

//--- Syntax error message for terminal '$constructor$' :
static const char * gSyntaxErrorMessage_constructor = "the 'constructor' keyword" ;

//--- Syntax error message for terminal '$match$' :
static const char * gSyntaxErrorMessage_match = "the 'match' keyword" ;

//--- Syntax error message for terminal '$default$' :
static const char * gSyntaxErrorMessage_default = "the 'default' keyword" ;

//--- Syntax error message for terminal '$here$' :
static const char * gSyntaxErrorMessage_here = "the 'here' keyword" ;

//--- Syntax error message for terminal '$if$' :
static const char * gSyntaxErrorMessage_if = "the 'if' keyword" ;

//--- Syntax error message for terminal '$else$' :
static const char * gSyntaxErrorMessage_else = "the 'else' keyword" ;

//--- Syntax error message for terminal '$elsif$' :
static const char * gSyntaxErrorMessage_elsif = "the 'elsif' keyword" ;

//--- Syntax error message for terminal '$then$' :
static const char * gSyntaxErrorMessage_then = "the 'then' keyword" ;

//--- Syntax error message for terminal '$rewind$' :
static const char * gSyntaxErrorMessage_rewind = "the 'rewind' keyword" ;

//--- Syntax error message for terminal '$when$' :
static const char * gSyntaxErrorMessage_when = "the 'when' keyword" ;

//--- Syntax error message for terminal '$abstract$' :
static const char * gSyntaxErrorMessage_abstract = "the 'abstract' keyword" ;

//--- Syntax error message for terminal '$class$' :
static const char * gSyntaxErrorMessage_class = "the 'class' keyword" ;

//--- Syntax error message for terminal '$parse$' :
static const char * gSyntaxErrorMessage_parse = "the 'parse' keyword" ;

//--- Syntax error message for terminal '$map$' :
static const char * gSyntaxErrorMessage_map = "the 'map' keyword" ;

//--- Syntax error message for terminal '$warning$' :
static const char * gSyntaxErrorMessage_warning = "the 'warning' keyword" ;

//--- Syntax error message for terminal '$modifier$' :
static const char * gSyntaxErrorMessage_modifier = "the 'modifier' keyword" ;

//--- Syntax error message for terminal '$state$' :
static const char * gSyntaxErrorMessage_state = "the 'state' keyword" ;

//--- Syntax error message for terminal '$drop$' :
static const char * gSyntaxErrorMessage_drop = "the 'drop' keyword" ;

//--- Syntax error message for terminal '$override$' :
static const char * gSyntaxErrorMessage_override = "the 'override' keyword" ;

//--- Syntax error message for terminal '$select$' :
static const char * gSyntaxErrorMessage_select = "the 'select' keyword" ;

//--- Syntax error message for terminal '$while$' :
static const char * gSyntaxErrorMessage_while = "the 'while' keyword" ;

//--- Syntax error message for terminal '$or$' :
static const char * gSyntaxErrorMessage_or = "the 'or' keyword" ;

//--- Syntax error message for terminal '$block$' :
static const char * gSyntaxErrorMessage_block = "the 'block' keyword" ;

//--- Syntax error message for terminal '$not$' :
static const char * gSyntaxErrorMessage_not = "the 'not' keyword" ;

//--- Syntax error message for terminal '$loop$' :
static const char * gSyntaxErrorMessage_loop = "the 'loop' keyword" ;

//--- Syntax error message for terminal '$false$' :
static const char * gSyntaxErrorMessage_false = "the 'false' keyword" ;

//--- Syntax error message for terminal '$true$' :
static const char * gSyntaxErrorMessage_true = "the 'true' keyword" ;

//--- Syntax error message for terminal '$end$' :
static const char * gSyntaxErrorMessage_end = "the 'end' keyword" ;

//--- Syntax error message for terminal '$switch$' :
static const char * gSyntaxErrorMessage_switch = "the 'switch' keyword" ;

//--- Syntax error message for terminal '$rule$' :
static const char * gSyntaxErrorMessage_rule = "the 'rule' keyword" ;

//--- Syntax error message for terminal '$tag$' :
static const char * gSyntaxErrorMessage_tag = "the 'tag' keyword" ;

//--- Syntax error message for terminal '$metamodel$' :
static const char * gSyntaxErrorMessage_metamodel = "the 'metamodel' keyword" ;

//--- Syntax error message for terminal '$mod$' :
static const char * gSyntaxErrorMessage_mod = "the 'mod' keyword" ;

//--- Syntax error message for terminal '$import$' :
static const char * gSyntaxErrorMessage_import = "the 'import' keyword" ;

//--- Syntax error message for terminal '$lexique$' :
static const char * gSyntaxErrorMessage_lexique = "the 'lexique' keyword" ;

//--- Syntax error message for terminal '$list$' :
static const char * gSyntaxErrorMessage_list = "the 'list' keyword" ;

//--- Syntax error message for terminal '$message$' :
static const char * gSyntaxErrorMessage_message = "the 'message' keyword" ;

//--- Syntax error message for terminal '$repeat$' :
static const char * gSyntaxErrorMessage_repeat = "the 'repeat' keyword" ;

//--- Syntax error message for terminal '$error$' :
static const char * gSyntaxErrorMessage_error = "the 'error' keyword" ;

//--- Syntax error message for terminal '$search$' :
static const char * gSyntaxErrorMessage_search = "the 'search' keyword" ;

//--- Syntax error message for terminal '$log$' :
static const char * gSyntaxErrorMessage_log = "the 'log' keyword" ;

//--- Syntax error message for terminal '$insert$' :
static const char * gSyntaxErrorMessage_insert = "the 'insert' keyword" ;

//--- Syntax error message for terminal '$in$' :
static const char * gSyntaxErrorMessage_in = "the 'in' keyword" ;

//--- Syntax error message for terminal '$send$' :
static const char * gSyntaxErrorMessage_send = "the 'send' keyword" ;

//--- Syntax error message for terminal '$action$' :
static const char * gSyntaxErrorMessage_action = "the 'action' keyword" ;

//--- Syntax error message for terminal '$grammar$' :
static const char * gSyntaxErrorMessage_grammar = "the 'grammar' keyword" ;

//--- Syntax error message for terminal '$option$' :
static const char * gSyntaxErrorMessage_option = "the 'option' keyword" ;

//--- Syntax error message for terminal '$root$' :
static const char * gSyntaxErrorMessage_root = "the 'root' keyword" ;

//--- Syntax error message for terminal '$on$' :
static const char * gSyntaxErrorMessage_on = "the 'on' keyword" ;

//--- Syntax error message for terminal '$unused$' :
static const char * gSyntaxErrorMessage_unused = "the 'unused' keyword" ;

//--- Syntax error message for terminal '$label$' :
static const char * gSyntaxErrorMessage_label = "the 'label' keyword" ;

//--- Syntax error message for terminal '$style$' :
static const char * gSyntaxErrorMessage_style = "the 'style' keyword" ;

//--- Syntax error message for terminal '$gui$' :
static const char * gSyntaxErrorMessage_gui = "the 'gui' keyword" ;

//--- Syntax error message for terminal '$do$' :
static const char * gSyntaxErrorMessage_do = "the 'do' keyword" ;

//--- Syntax error message for terminal '$relation$' :
static const char * gSyntaxErrorMessage_relation = "the 'relation' keyword" ;

//--- Syntax error message for terminal '$of$' :
static const char * gSyntaxErrorMessage_of = "the 'of' keyword" ;

//--- Syntax error message for terminal '$self$' :
static const char * gSyntaxErrorMessage_self = "the 'self' keyword" ;

//--- Syntax error message for terminal '$constraint$' :
static const char * gSyntaxErrorMessage_constraint = "the 'constraint' keyword" ;

//--- Syntax error message for terminal '$context$' :
static const char * gSyntaxErrorMessage_context = "the 'context' keyword" ;

//--- Syntax error message for terminal '$call$' :
static const char * gSyntaxErrorMessage_call = "the 'call' keyword" ;

//--- Syntax error message for terminal '$mapindex$' :
static const char * gSyntaxErrorMessage_mapindex = "the 'mapindex' keyword" ;

//--- Syntax error message for terminal '$method$' :
static const char * gSyntaxErrorMessage_method = "the 'method' keyword" ;

//--- Syntax error message for terminal '$remove$' :
static const char * gSyntaxErrorMessage_remove = "the 'remove' keyword" ;

//--- Syntax error message for terminal '$sortedlist$' :
static const char * gSyntaxErrorMessage_sortedlist = "the 'sortedlist' keyword" ;

//--- Syntax error message for terminal '$literal_double$' :
static const char * gSyntaxErrorMessage_literal_5Fdouble = "a float number" ;

//--- Syntax error message for terminal '$unsigned_literal_integer$' :
static const char * gSyntaxErrorMessage_unsigned_5Fliteral_5Finteger = "a 32-bit unsigned decimal number" ;

//--- Syntax error message for terminal '$signed_literal_integer$' :
static const char * gSyntaxErrorMessage_signed_5Fliteral_5Finteger = "a 32-bit signed decimal number" ;

//--- Syntax error message for terminal '$unsigned_literal_integer64$' :
static const char * gSyntaxErrorMessage_unsigned_5Fliteral_5Finteger64 = "a 64-bit unsigned decimal number" ;

//--- Syntax error message for terminal '$signed_literal_integer64$' :
static const char * gSyntaxErrorMessage_signed_5Fliteral_5Finteger64 = "a 64-bit signed decimal number" ;

//--- Syntax error message for terminal '$.$' :
static const char * gSyntaxErrorMessage__2E = "the '.' delimitor" ;

//--- Syntax error message for terminal '$.=$' :
static const char * gSyntaxErrorMessage__2E_3D = "the '.=' delimitor" ;

//--- Syntax error message for terminal '$...$' :
static const char * gSyntaxErrorMessage__2E_2E_2E = "the '...' delimitor" ;

//--- Syntax error message for terminal '$type_name$' :
static const char * gSyntaxErrorMessage_type_5Fname = "a type name (@...)" ;

//--- Syntax error message for terminal '$mda_type_name$' :
static const char * gSyntaxErrorMessage_mda_5Ftype_5Fname = "an MDA type name (%...)" ;

//--- Syntax error message for terminal '$literal_char$' :
static const char * gSyntaxErrorMessage_literal_5Fchar = "a character constant" ;

//--- Syntax error message for terminal '$terminal$' :
static const char * gSyntaxErrorMessage_terminal = "a terminal symbol ($...$)" ;

//--- Syntax error message for terminal '$*$' :
static const char * gSyntaxErrorMessage__2A = "the '*' delimitor" ;

//--- Syntax error message for terminal '$|$' :
static const char * gSyntaxErrorMessage__7C = "the '|' delimitor" ;

//--- Syntax error message for terminal '$,$' :
static const char * gSyntaxErrorMessage__2C = "the ',' delimitor" ;

//--- Syntax error message for terminal '$+$' :
static const char * gSyntaxErrorMessage__2B = "the '+' delimitor" ;

//--- Syntax error message for terminal '$--$' :
static const char * gSyntaxErrorMessage__2D_2D = "the '--' delimitor" ;

//--- Syntax error message for terminal '$::$' :
static const char * gSyntaxErrorMessage__3A_3A = "the '::' delimitor" ;

//--- Syntax error message for terminal '$>$' :
static const char * gSyntaxErrorMessage__3E = "the '>' delimitor" ;

//--- Syntax error message for terminal '$;$' :
static const char * gSyntaxErrorMessage__3B = "the ';' delimitor" ;

//--- Syntax error message for terminal '$:$' :
static const char * gSyntaxErrorMessage__3A = "the ':' delimitor" ;

//--- Syntax error message for terminal '$-$' :
static const char * gSyntaxErrorMessage__2D = "the '-' delimitor" ;

//--- Syntax error message for terminal '$($' :
static const char * gSyntaxErrorMessage__28 = "the '(' delimitor" ;

//--- Syntax error message for terminal '$)$' :
static const char * gSyntaxErrorMessage__29 = "the ')' delimitor" ;

//--- Syntax error message for terminal '$->$' :
static const char * gSyntaxErrorMessage__2D_3E = "the '->' delimitor" ;

//--- Syntax error message for terminal '$?$' :
static const char * gSyntaxErrorMessage__3F = "the '\?' delimitor" ;

//--- Syntax error message for terminal '$==$' :
static const char * gSyntaxErrorMessage__3D_3D = "the '==' delimitor" ;

//--- Syntax error message for terminal '$??$' :
static const char * gSyntaxErrorMessage__3F_3F = "the '\?\?' delimitor" ;

//--- Syntax error message for terminal '$!$' :
static const char * gSyntaxErrorMessage__21 = "the '!' delimitor" ;

//--- Syntax error message for terminal '$:=$' :
static const char * gSyntaxErrorMessage__3A_3D = "the ':=' delimitor" ;

//--- Syntax error message for terminal '$++$' :
static const char * gSyntaxErrorMessage__2B_2B = "the '++' delimitor" ;

//--- Syntax error message for terminal '$[$' :
static const char * gSyntaxErrorMessage__5B = "the '[' delimitor" ;

//--- Syntax error message for terminal '$]$' :
static const char * gSyntaxErrorMessage__5D = "the ']' delimitor" ;

//--- Syntax error message for terminal '$+=$' :
static const char * gSyntaxErrorMessage__2B_3D = "the '+=' delimitor" ;

//--- Syntax error message for terminal '$?!$' :
static const char * gSyntaxErrorMessage__3F_21 = "the '\?!' delimitor" ;

//--- Syntax error message for terminal '$!?$' :
static const char * gSyntaxErrorMessage__21_3F = "the '!\?' delimitor" ;

//--- Syntax error message for terminal '$/$' :
static const char * gSyntaxErrorMessage__2F = "the '/' delimitor" ;

//--- Syntax error message for terminal '$!=$' :
static const char * gSyntaxErrorMessage__21_3D = "the '!=' delimitor" ;

//--- Syntax error message for terminal '$>=$' :
static const char * gSyntaxErrorMessage__3E_3D = "the '>=' delimitor" ;

//--- Syntax error message for terminal '$&$' :
static const char * gSyntaxErrorMessage__26 = "the '&' delimitor" ;

//--- Syntax error message for terminal '${$' :
static const char * gSyntaxErrorMessage__7B = "the '{' delimitor" ;

//--- Syntax error message for terminal '$}$' :
static const char * gSyntaxErrorMessage__7D = "the '}' delimitor" ;

//--- Syntax error message for terminal '$+>$' :
static const char * gSyntaxErrorMessage__2B_3E = "the '+>' delimitor" ;

//--- Syntax error message for terminal '$-=$' :
static const char * gSyntaxErrorMessage__2D_3D = "the '-=' delimitor" ;

//--- Syntax error message for terminal '$^$' :
static const char * gSyntaxErrorMessage__5E = "the '^' delimitor" ;

//--- Syntax error message for terminal '$>>$' :
static const char * gSyntaxErrorMessage__3E_3E = "the '>>' delimitor" ;

//--- Syntax error message for terminal '$~$' :
static const char * gSyntaxErrorMessage__7E = "the '~' delimitor" ;

//--- Syntax error message for terminal '$<$' :
static const char * gSyntaxErrorMessage__3C = "the '<' delimitor" ;

//--- Syntax error message for terminal '$<=$' :
static const char * gSyntaxErrorMessage__3C_3D = "the '<=' delimitor" ;

//--- Syntax error message for terminal '$<<$' :
static const char * gSyntaxErrorMessage__3C_3C = "the '<<' delimitor" ;

//--- Syntax error message for terminal '$non_terminal_symbol$' :
static const char * gSyntaxErrorMessage_non_5Fterminal_5Fsymbol = "a non terminal symbol <...>" ;

//--- Syntax error message for terminal '$literal_string$' :
static const char * gSyntaxErrorMessage_literal_5Fstring = "a character string constant \"...\"" ;

//--- Syntax error message for terminal '$comment$' :
static const char * gSyntaxErrorMessage_comment = "a comment" ;

//---------------------------------------------------------------------------*
//                                                                           *
//                appendTerminalMessageToSyntaxErrorMessage                  *
//                                                                           *
//---------------------------------------------------------------------------*

void galgas_scanner::
appendTerminalMessageToSyntaxErrorMessage (const sint16 inTerminalIndex,
                                           C_String & outSyntaxErrorMessage) {
  static const char * syntaxErrorMessageArray [130] = {"end of source",
       gSyntaxErrorMessage_identifier,
       gSyntaxErrorMessage_compile,
       gSyntaxErrorMessage_extract,
       gSyntaxErrorMessage_program,
       gSyntaxErrorMessage_enum,
       gSyntaxErrorMessage_syntax,
       gSyntaxErrorMessage_semantics,
       gSyntaxErrorMessage_extends,
       gSyntaxErrorMessage_reader,
       gSyntaxErrorMessage_extern,
       gSyntaxErrorMessage_routine,
       gSyntaxErrorMessage_foreach,
       gSyntaxErrorMessage_constructor,
       gSyntaxErrorMessage_match,
       gSyntaxErrorMessage_default,
       gSyntaxErrorMessage_here,
       gSyntaxErrorMessage_if,
       gSyntaxErrorMessage_else,
       gSyntaxErrorMessage_elsif,
       gSyntaxErrorMessage_then,
       gSyntaxErrorMessage_rewind,
       gSyntaxErrorMessage_when,
       gSyntaxErrorMessage_abstract,
       gSyntaxErrorMessage_class,
       gSyntaxErrorMessage_parse,
       gSyntaxErrorMessage_map,
       gSyntaxErrorMessage_warning,
       gSyntaxErrorMessage_modifier,
       gSyntaxErrorMessage_state,
       gSyntaxErrorMessage_drop,
       gSyntaxErrorMessage_override,
       gSyntaxErrorMessage_select,
       gSyntaxErrorMessage_while,
       gSyntaxErrorMessage_or,
       gSyntaxErrorMessage_block,
       gSyntaxErrorMessage_not,
       gSyntaxErrorMessage_loop,
       gSyntaxErrorMessage_false,
       gSyntaxErrorMessage_true,
       gSyntaxErrorMessage_end,
       gSyntaxErrorMessage_switch,
       gSyntaxErrorMessage_rule,
       gSyntaxErrorMessage_tag,
       gSyntaxErrorMessage_metamodel,
       gSyntaxErrorMessage_mod,
       gSyntaxErrorMessage_import,
       gSyntaxErrorMessage_lexique,
       gSyntaxErrorMessage_list,
       gSyntaxErrorMessage_message,
       gSyntaxErrorMessage_repeat,
       gSyntaxErrorMessage_error,
       gSyntaxErrorMessage_search,
       gSyntaxErrorMessage_log,
       gSyntaxErrorMessage_insert,
       gSyntaxErrorMessage_in,
       gSyntaxErrorMessage_send,
       gSyntaxErrorMessage_action,
       gSyntaxErrorMessage_grammar,
       gSyntaxErrorMessage_option,
       gSyntaxErrorMessage_root,
       gSyntaxErrorMessage_on,
       gSyntaxErrorMessage_unused,
       gSyntaxErrorMessage_label,
       gSyntaxErrorMessage_style,
       gSyntaxErrorMessage_gui,
       gSyntaxErrorMessage_do,
       gSyntaxErrorMessage_relation,
       gSyntaxErrorMessage_of,
       gSyntaxErrorMessage_self,
       gSyntaxErrorMessage_constraint,
       gSyntaxErrorMessage_context,
       gSyntaxErrorMessage_call,
       gSyntaxErrorMessage_mapindex,
       gSyntaxErrorMessage_method,
       gSyntaxErrorMessage_remove,
       gSyntaxErrorMessage_sortedlist,
       gSyntaxErrorMessage_literal_5Fdouble,
       gSyntaxErrorMessage_unsigned_5Fliteral_5Finteger,
       gSyntaxErrorMessage_signed_5Fliteral_5Finteger,
       gSyntaxErrorMessage_unsigned_5Fliteral_5Finteger64,
       gSyntaxErrorMessage_signed_5Fliteral_5Finteger64,
       gSyntaxErrorMessage__2E,
       gSyntaxErrorMessage__2E_3D,
       gSyntaxErrorMessage__2E_2E_2E,
       gSyntaxErrorMessage_type_5Fname,
       gSyntaxErrorMessage_mda_5Ftype_5Fname,
       gSyntaxErrorMessage_literal_5Fchar,
       gSyntaxErrorMessage_terminal,
       gSyntaxErrorMessage__2A,
       gSyntaxErrorMessage__7C,
       gSyntaxErrorMessage__2C,
       gSyntaxErrorMessage__2B,
       gSyntaxErrorMessage__2D_2D,
       gSyntaxErrorMessage__3A_3A,
       gSyntaxErrorMessage__3E,
       gSyntaxErrorMessage__3B,
       gSyntaxErrorMessage__3A,
       gSyntaxErrorMessage__2D,
       gSyntaxErrorMessage__28,
       gSyntaxErrorMessage__29,
       gSyntaxErrorMessage__2D_3E,
       gSyntaxErrorMessage__3F,
       gSyntaxErrorMessage__3D_3D,
       gSyntaxErrorMessage__3F_3F,
       gSyntaxErrorMessage__21,
       gSyntaxErrorMessage__3A_3D,
       gSyntaxErrorMessage__2B_2B,
       gSyntaxErrorMessage__5B,
       gSyntaxErrorMessage__5D,
       gSyntaxErrorMessage__2B_3D,
       gSyntaxErrorMessage__3F_21,
       gSyntaxErrorMessage__21_3F,
       gSyntaxErrorMessage__2F,
       gSyntaxErrorMessage__21_3D,
       gSyntaxErrorMessage__3E_3D,
       gSyntaxErrorMessage__26,
       gSyntaxErrorMessage__7B,
       gSyntaxErrorMessage__7D,
       gSyntaxErrorMessage__2B_3E,
       gSyntaxErrorMessage__2D_3D,
       gSyntaxErrorMessage__5E,
       gSyntaxErrorMessage__3E_3E,
       gSyntaxErrorMessage__7E,
       gSyntaxErrorMessage__3C,
       gSyntaxErrorMessage__3C_3D,
       gSyntaxErrorMessage__3C_3C,
       gSyntaxErrorMessage_non_5Fterminal_5Fsymbol,
       gSyntaxErrorMessage_literal_5Fstring,
       gSyntaxErrorMessage_comment} ;
  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Key words table 'galgasDelimitorsList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 galgas_scanner::galgas_scanner_table_size_galgasDelimitorsList = 35 ;

const C_lexique_table_entry galgas_scanner::galgas_scanner_table_for_galgasDelimitorsList [35] = {
  C_lexique_table_entry ("!", 1, galgas_scanner_1__21),
  C_lexique_table_entry ("&", 1, galgas_scanner_1__26),
  C_lexique_table_entry ("(", 1, galgas_scanner_1__28),
  C_lexique_table_entry (")", 1, galgas_scanner_1__29),
  C_lexique_table_entry ("*", 1, galgas_scanner_1__2A),
  C_lexique_table_entry ("+", 1, galgas_scanner_1__2B),
  C_lexique_table_entry (",", 1, galgas_scanner_1__2C),
  C_lexique_table_entry ("-", 1, galgas_scanner_1__2D),
  C_lexique_table_entry ("/", 1, galgas_scanner_1__2F),
  C_lexique_table_entry (":", 1, galgas_scanner_1__3A),
  C_lexique_table_entry (";", 1, galgas_scanner_1__3B),
  C_lexique_table_entry (">", 1, galgas_scanner_1__3E),
  C_lexique_table_entry ("\?", 1, galgas_scanner_1__3F),
  C_lexique_table_entry ("[", 1, galgas_scanner_1__5B),
  C_lexique_table_entry ("]", 1, galgas_scanner_1__5D),
  C_lexique_table_entry ("^", 1, galgas_scanner_1__5E),
  C_lexique_table_entry ("{", 1, galgas_scanner_1__7B),
  C_lexique_table_entry ("|", 1, galgas_scanner_1__7C),
  C_lexique_table_entry ("}", 1, galgas_scanner_1__7D),
  C_lexique_table_entry ("~", 1, galgas_scanner_1__7E),
  C_lexique_table_entry ("!=", 2, galgas_scanner_1__21_3D),
  C_lexique_table_entry ("!\?", 2, galgas_scanner_1__21_3F),
  C_lexique_table_entry ("++", 2, galgas_scanner_1__2B_2B),
  C_lexique_table_entry ("+=", 2, galgas_scanner_1__2B_3D),
  C_lexique_table_entry ("+>", 2, galgas_scanner_1__2B_3E),
  C_lexique_table_entry ("--", 2, galgas_scanner_1__2D_2D),
  C_lexique_table_entry ("-=", 2, galgas_scanner_1__2D_3D),
  C_lexique_table_entry ("->", 2, galgas_scanner_1__2D_3E),
  C_lexique_table_entry ("::", 2, galgas_scanner_1__3A_3A),
  C_lexique_table_entry (":=", 2, galgas_scanner_1__3A_3D),
  C_lexique_table_entry ("==", 2, galgas_scanner_1__3D_3D),
  C_lexique_table_entry (">=", 2, galgas_scanner_1__3E_3D),
  C_lexique_table_entry (">>", 2, galgas_scanner_1__3E_3E),
  C_lexique_table_entry ("\?!", 2, galgas_scanner_1__3F_21),
  C_lexique_table_entry ("\?\?", 2, galgas_scanner_1__3F_3F)
} ;

sint16 galgas_scanner::search_into_galgasDelimitorsList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, galgas_scanner_table_for_galgasDelimitorsList, galgas_scanner_table_size_galgasDelimitorsList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Key words table 'galgasKeyWordList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 galgas_scanner::galgas_scanner_table_size_galgasKeyWordList = 75 ;

const C_lexique_table_entry galgas_scanner::galgas_scanner_table_for_galgasKeyWordList [75] = {
  C_lexique_table_entry ("do", 2, galgas_scanner_1_do),
  C_lexique_table_entry ("if", 2, galgas_scanner_1_if),
  C_lexique_table_entry ("in", 2, galgas_scanner_1_in),
  C_lexique_table_entry ("of", 2, galgas_scanner_1_of),
  C_lexique_table_entry ("on", 2, galgas_scanner_1_on),
  C_lexique_table_entry ("or", 2, galgas_scanner_1_or),
  C_lexique_table_entry ("end", 3, galgas_scanner_1_end),
  C_lexique_table_entry ("gui", 3, galgas_scanner_1_gui),
  C_lexique_table_entry ("log", 3, galgas_scanner_1_log),
  C_lexique_table_entry ("map", 3, galgas_scanner_1_map),
  C_lexique_table_entry ("mod", 3, galgas_scanner_1_mod),
  C_lexique_table_entry ("not", 3, galgas_scanner_1_not),
  C_lexique_table_entry ("tag", 3, galgas_scanner_1_tag),
  C_lexique_table_entry ("call", 4, galgas_scanner_1_call),
  C_lexique_table_entry ("drop", 4, galgas_scanner_1_drop),
  C_lexique_table_entry ("else", 4, galgas_scanner_1_else),
  C_lexique_table_entry ("enum", 4, galgas_scanner_1_enum),
  C_lexique_table_entry ("here", 4, galgas_scanner_1_here),
  C_lexique_table_entry ("list", 4, galgas_scanner_1_list),
  C_lexique_table_entry ("loop", 4, galgas_scanner_1_loop),
  C_lexique_table_entry ("root", 4, galgas_scanner_1_root),
  C_lexique_table_entry ("rule", 4, galgas_scanner_1_rule),
  C_lexique_table_entry ("self", 4, galgas_scanner_1_self),
  C_lexique_table_entry ("send", 4, galgas_scanner_1_send),
  C_lexique_table_entry ("then", 4, galgas_scanner_1_then),
  C_lexique_table_entry ("true", 4, galgas_scanner_1_true),
  C_lexique_table_entry ("when", 4, galgas_scanner_1_when),
  C_lexique_table_entry ("block", 5, galgas_scanner_1_block),
  C_lexique_table_entry ("class", 5, galgas_scanner_1_class),
  C_lexique_table_entry ("elsif", 5, galgas_scanner_1_elsif),
  C_lexique_table_entry ("error", 5, galgas_scanner_1_error),
  C_lexique_table_entry ("false", 5, galgas_scanner_1_false),
  C_lexique_table_entry ("label", 5, galgas_scanner_1_label),
  C_lexique_table_entry ("match", 5, galgas_scanner_1_match),
  C_lexique_table_entry ("parse", 5, galgas_scanner_1_parse),
  C_lexique_table_entry ("state", 5, galgas_scanner_1_state),
  C_lexique_table_entry ("style", 5, galgas_scanner_1_style),
  C_lexique_table_entry ("while", 5, galgas_scanner_1_while),
  C_lexique_table_entry ("action", 6, galgas_scanner_1_action),
  C_lexique_table_entry ("extern", 6, galgas_scanner_1_extern),
  C_lexique_table_entry ("import", 6, galgas_scanner_1_import),
  C_lexique_table_entry ("insert", 6, galgas_scanner_1_insert),
  C_lexique_table_entry ("method", 6, galgas_scanner_1_method),
  C_lexique_table_entry ("option", 6, galgas_scanner_1_option),
  C_lexique_table_entry ("reader", 6, galgas_scanner_1_reader),
  C_lexique_table_entry ("remove", 6, galgas_scanner_1_remove),
  C_lexique_table_entry ("repeat", 6, galgas_scanner_1_repeat),
  C_lexique_table_entry ("rewind", 6, galgas_scanner_1_rewind),
  C_lexique_table_entry ("search", 6, galgas_scanner_1_search),
  C_lexique_table_entry ("select", 6, galgas_scanner_1_select),
  C_lexique_table_entry ("switch", 6, galgas_scanner_1_switch),
  C_lexique_table_entry ("syntax", 6, galgas_scanner_1_syntax),
  C_lexique_table_entry ("unused", 6, galgas_scanner_1_unused),
  C_lexique_table_entry ("compile", 7, galgas_scanner_1_compile),
  C_lexique_table_entry ("context", 7, galgas_scanner_1_context),
  C_lexique_table_entry ("default", 7, galgas_scanner_1_default),
  C_lexique_table_entry ("extends", 7, galgas_scanner_1_extends),
  C_lexique_table_entry ("extract", 7, galgas_scanner_1_extract),
  C_lexique_table_entry ("foreach", 7, galgas_scanner_1_foreach),
  C_lexique_table_entry ("grammar", 7, galgas_scanner_1_grammar),
  C_lexique_table_entry ("lexique", 7, galgas_scanner_1_lexique),
  C_lexique_table_entry ("message", 7, galgas_scanner_1_message),
  C_lexique_table_entry ("program", 7, galgas_scanner_1_program),
  C_lexique_table_entry ("routine", 7, galgas_scanner_1_routine),
  C_lexique_table_entry ("warning", 7, galgas_scanner_1_warning),
  C_lexique_table_entry ("abstract", 8, galgas_scanner_1_abstract),
  C_lexique_table_entry ("mapindex", 8, galgas_scanner_1_mapindex),
  C_lexique_table_entry ("modifier", 8, galgas_scanner_1_modifier),
  C_lexique_table_entry ("override", 8, galgas_scanner_1_override),
  C_lexique_table_entry ("relation", 8, galgas_scanner_1_relation),
  C_lexique_table_entry ("metamodel", 9, galgas_scanner_1_metamodel),
  C_lexique_table_entry ("semantics", 9, galgas_scanner_1_semantics),
  C_lexique_table_entry ("constraint", 10, galgas_scanner_1_constraint),
  C_lexique_table_entry ("sortedlist", 10, galgas_scanner_1_sortedlist),
  C_lexique_table_entry ("constructor", 11, galgas_scanner_1_constructor)
} ;

sint16 galgas_scanner::search_into_galgasKeyWordList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, galgas_scanner_table_for_galgasKeyWordList, galgas_scanner_table_size_galgasKeyWordList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          getCurrentTokenString                            *
//                                                                           *
//---------------------------------------------------------------------------*

C_String galgas_scanner::
getCurrentTokenString (const cToken * inTokenPtr) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) inTokenPtr ;
  C_String s ;
  switch (_p->_mTokenCode) {
  case  galgas_scanner_1_:
    s << "$$" ;
    break ;
  case  galgas_scanner_1_identifier:
    s << '$'
      << "identifier"
      << '$' ;
    s << ' ' ;
    s.writeCstringConstant (_p->tokenString) ;
    break;
  case  galgas_scanner_1_compile:
    s << '$'
      << "compile"
      << '$' ;
    break;
  case  galgas_scanner_1_extract:
    s << '$'
      << "extract"
      << '$' ;
    break;
  case  galgas_scanner_1_program:
    s << '$'
      << "program"
      << '$' ;
    break;
  case  galgas_scanner_1_enum:
    s << '$'
      << "enum"
      << '$' ;
    break;
  case  galgas_scanner_1_syntax:
    s << '$'
      << "syntax"
      << '$' ;
    break;
  case  galgas_scanner_1_semantics:
    s << '$'
      << "semantics"
      << '$' ;
    break;
  case  galgas_scanner_1_extends:
    s << '$'
      << "extends"
      << '$' ;
    break;
  case  galgas_scanner_1_reader:
    s << '$'
      << "reader"
      << '$' ;
    break;
  case  galgas_scanner_1_extern:
    s << '$'
      << "extern"
      << '$' ;
    break;
  case  galgas_scanner_1_routine:
    s << '$'
      << "routine"
      << '$' ;
    break;
  case  galgas_scanner_1_foreach:
    s << '$'
      << "foreach"
      << '$' ;
    break;
  case  galgas_scanner_1_constructor:
    s << '$'
      << "constructor"
      << '$' ;
    break;
  case  galgas_scanner_1_match:
    s << '$'
      << "match"
      << '$' ;
    break;
  case  galgas_scanner_1_default:
    s << '$'
      << "default"
      << '$' ;
    break;
  case  galgas_scanner_1_here:
    s << '$'
      << "here"
      << '$' ;
    break;
  case  galgas_scanner_1_if:
    s << '$'
      << "if"
      << '$' ;
    break;
  case  galgas_scanner_1_else:
    s << '$'
      << "else"
      << '$' ;
    break;
  case  galgas_scanner_1_elsif:
    s << '$'
      << "elsif"
      << '$' ;
    break;
  case  galgas_scanner_1_then:
    s << '$'
      << "then"
      << '$' ;
    break;
  case  galgas_scanner_1_rewind:
    s << '$'
      << "rewind"
      << '$' ;
    break;
  case  galgas_scanner_1_when:
    s << '$'
      << "when"
      << '$' ;
    break;
  case  galgas_scanner_1_abstract:
    s << '$'
      << "abstract"
      << '$' ;
    break;
  case  galgas_scanner_1_class:
    s << '$'
      << "class"
      << '$' ;
    break;
  case  galgas_scanner_1_parse:
    s << '$'
      << "parse"
      << '$' ;
    break;
  case  galgas_scanner_1_map:
    s << '$'
      << "map"
      << '$' ;
    break;
  case  galgas_scanner_1_warning:
    s << '$'
      << "warning"
      << '$' ;
    break;
  case  galgas_scanner_1_modifier:
    s << '$'
      << "modifier"
      << '$' ;
    break;
  case  galgas_scanner_1_state:
    s << '$'
      << "state"
      << '$' ;
    break;
  case  galgas_scanner_1_drop:
    s << '$'
      << "drop"
      << '$' ;
    break;
  case  galgas_scanner_1_override:
    s << '$'
      << "override"
      << '$' ;
    break;
  case  galgas_scanner_1_select:
    s << '$'
      << "select"
      << '$' ;
    break;
  case  galgas_scanner_1_while:
    s << '$'
      << "while"
      << '$' ;
    break;
  case  galgas_scanner_1_or:
    s << '$'
      << "or"
      << '$' ;
    break;
  case  galgas_scanner_1_block:
    s << '$'
      << "block"
      << '$' ;
    break;
  case  galgas_scanner_1_not:
    s << '$'
      << "not"
      << '$' ;
    break;
  case  galgas_scanner_1_loop:
    s << '$'
      << "loop"
      << '$' ;
    break;
  case  galgas_scanner_1_false:
    s << '$'
      << "false"
      << '$' ;
    break;
  case  galgas_scanner_1_true:
    s << '$'
      << "true"
      << '$' ;
    break;
  case  galgas_scanner_1_end:
    s << '$'
      << "end"
      << '$' ;
    break;
  case  galgas_scanner_1_switch:
    s << '$'
      << "switch"
      << '$' ;
    break;
  case  galgas_scanner_1_rule:
    s << '$'
      << "rule"
      << '$' ;
    break;
  case  galgas_scanner_1_tag:
    s << '$'
      << "tag"
      << '$' ;
    break;
  case  galgas_scanner_1_metamodel:
    s << '$'
      << "metamodel"
      << '$' ;
    break;
  case  galgas_scanner_1_mod:
    s << '$'
      << "mod"
      << '$' ;
    break;
  case  galgas_scanner_1_import:
    s << '$'
      << "import"
      << '$' ;
    break;
  case  galgas_scanner_1_lexique:
    s << '$'
      << "lexique"
      << '$' ;
    break;
  case  galgas_scanner_1_list:
    s << '$'
      << "list"
      << '$' ;
    break;
  case  galgas_scanner_1_message:
    s << '$'
      << "message"
      << '$' ;
    break;
  case  galgas_scanner_1_repeat:
    s << '$'
      << "repeat"
      << '$' ;
    break;
  case  galgas_scanner_1_error:
    s << '$'
      << "error"
      << '$' ;
    break;
  case  galgas_scanner_1_search:
    s << '$'
      << "search"
      << '$' ;
    break;
  case  galgas_scanner_1_log:
    s << '$'
      << "log"
      << '$' ;
    break;
  case  galgas_scanner_1_insert:
    s << '$'
      << "insert"
      << '$' ;
    break;
  case  galgas_scanner_1_in:
    s << '$'
      << "in"
      << '$' ;
    break;
  case  galgas_scanner_1_send:
    s << '$'
      << "send"
      << '$' ;
    break;
  case  galgas_scanner_1_action:
    s << '$'
      << "action"
      << '$' ;
    break;
  case  galgas_scanner_1_grammar:
    s << '$'
      << "grammar"
      << '$' ;
    break;
  case  galgas_scanner_1_option:
    s << '$'
      << "option"
      << '$' ;
    break;
  case  galgas_scanner_1_root:
    s << '$'
      << "root"
      << '$' ;
    break;
  case  galgas_scanner_1_on:
    s << '$'
      << "on"
      << '$' ;
    break;
  case  galgas_scanner_1_unused:
    s << '$'
      << "unused"
      << '$' ;
    break;
  case  galgas_scanner_1_label:
    s << '$'
      << "label"
      << '$' ;
    break;
  case  galgas_scanner_1_style:
    s << '$'
      << "style"
      << '$' ;
    break;
  case  galgas_scanner_1_gui:
    s << '$'
      << "gui"
      << '$' ;
    break;
  case  galgas_scanner_1_do:
    s << '$'
      << "do"
      << '$' ;
    break;
  case  galgas_scanner_1_relation:
    s << '$'
      << "relation"
      << '$' ;
    break;
  case  galgas_scanner_1_of:
    s << '$'
      << "of"
      << '$' ;
    break;
  case  galgas_scanner_1_self:
    s << '$'
      << "self"
      << '$' ;
    break;
  case  galgas_scanner_1_constraint:
    s << '$'
      << "constraint"
      << '$' ;
    break;
  case  galgas_scanner_1_context:
    s << '$'
      << "context"
      << '$' ;
    break;
  case  galgas_scanner_1_call:
    s << '$'
      << "call"
      << '$' ;
    break;
  case  galgas_scanner_1_mapindex:
    s << '$'
      << "mapindex"
      << '$' ;
    break;
  case  galgas_scanner_1_method:
    s << '$'
      << "method"
      << '$' ;
    break;
  case  galgas_scanner_1_remove:
    s << '$'
      << "remove"
      << '$' ;
    break;
  case  galgas_scanner_1_sortedlist:
    s << '$'
      << "sortedlist"
      << '$' ;
    break;
  case  galgas_scanner_1_literal_5Fdouble:
    s << '$'
      << "literal_double"
      << '$' ;
    s << ' ' << _p->floatValue ;
    s << ' ' ;
    s.writeCstringConstant (_p->tokenString) ;
    break;
  case  galgas_scanner_1_unsigned_5Fliteral_5Finteger:
    s << '$'
      << "unsigned_literal_integer"
      << '$' ;
    s << ' ' << _p->uint32value ;
    break;
  case  galgas_scanner_1_signed_5Fliteral_5Finteger:
    s << '$'
      << "signed_literal_integer"
      << '$' ;
    s << ' ' << _p->sint32value ;
    break;
  case  galgas_scanner_1_unsigned_5Fliteral_5Finteger64:
    s << '$'
      << "unsigned_literal_integer64"
      << '$' ;
    s << ' ' << _p->uint64value ;
    break;
  case  galgas_scanner_1_signed_5Fliteral_5Finteger64:
    s << '$'
      << "signed_literal_integer64"
      << '$' ;
    s << ' ' << _p->sint64value ;
    break;
  case  galgas_scanner_1__2E:
    s << '$'
      << "."
      << '$' ;
    break;
  case  galgas_scanner_1__2E_3D:
    s << '$'
      << ".="
      << '$' ;
    break;
  case  galgas_scanner_1__2E_2E_2E:
    s << '$'
      << "..."
      << '$' ;
    break;
  case  galgas_scanner_1_type_5Fname:
    s << '$'
      << "type_name"
      << '$' ;
    s << ' ' ;
    s.writeCstringConstant (_p->tokenString) ;
    break;
  case  galgas_scanner_1_mda_5Ftype_5Fname:
    s << '$'
      << "mda_type_name"
      << '$' ;
    s << ' ' ;
    s.writeCstringConstant (_p->tokenString) ;
    break;
  case  galgas_scanner_1_literal_5Fchar:
    s << '$'
      << "literal_char"
      << '$' ;
    s << ' ' ;
    s.writeCcharConstant (_p->charValue) ;
    break;
  case  galgas_scanner_1_terminal:
    s << '$'
      << "terminal"
      << '$' ;
    s << ' ' ;
    s.writeCstringConstant (_p->tokenString) ;
    break;
  case  galgas_scanner_1__2A:
    s << '$'
      << "*"
      << '$' ;
    break;
  case  galgas_scanner_1__7C:
    s << '$'
      << "|"
      << '$' ;
    break;
  case  galgas_scanner_1__2C:
    s << '$'
      << ","
      << '$' ;
    break;
  case  galgas_scanner_1__2B:
    s << '$'
      << "+"
      << '$' ;
    break;
  case  galgas_scanner_1__2D_2D:
    s << '$'
      << "--"
      << '$' ;
    break;
  case  galgas_scanner_1__3A_3A:
    s << '$'
      << "::"
      << '$' ;
    break;
  case  galgas_scanner_1__3E:
    s << '$'
      << ">"
      << '$' ;
    break;
  case  galgas_scanner_1__3B:
    s << '$'
      << ";"
      << '$' ;
    break;
  case  galgas_scanner_1__3A:
    s << '$'
      << ":"
      << '$' ;
    break;
  case  galgas_scanner_1__2D:
    s << '$'
      << "-"
      << '$' ;
    break;
  case  galgas_scanner_1__28:
    s << '$'
      << "("
      << '$' ;
    break;
  case  galgas_scanner_1__29:
    s << '$'
      << ")"
      << '$' ;
    break;
  case  galgas_scanner_1__2D_3E:
    s << '$'
      << "->"
      << '$' ;
    break;
  case  galgas_scanner_1__3F:
    s << '$'
      << "\?"
      << '$' ;
    break;
  case  galgas_scanner_1__3D_3D:
    s << '$'
      << "=="
      << '$' ;
    break;
  case  galgas_scanner_1__3F_3F:
    s << '$'
      << "\?\?"
      << '$' ;
    break;
  case  galgas_scanner_1__21:
    s << '$'
      << "!"
      << '$' ;
    break;
  case  galgas_scanner_1__3A_3D:
    s << '$'
      << ":="
      << '$' ;
    break;
  case  galgas_scanner_1__2B_2B:
    s << '$'
      << "++"
      << '$' ;
    break;
  case  galgas_scanner_1__5B:
    s << '$'
      << "["
      << '$' ;
    break;
  case  galgas_scanner_1__5D:
    s << '$'
      << "]"
      << '$' ;
    break;
  case  galgas_scanner_1__2B_3D:
    s << '$'
      << "+="
      << '$' ;
    break;
  case  galgas_scanner_1__3F_21:
    s << '$'
      << "\?!"
      << '$' ;
    break;
  case  galgas_scanner_1__21_3F:
    s << '$'
      << "!\?"
      << '$' ;
    break;
  case  galgas_scanner_1__2F:
    s << '$'
      << "/"
      << '$' ;
    break;
  case  galgas_scanner_1__21_3D:
    s << '$'
      << "!="
      << '$' ;
    break;
  case  galgas_scanner_1__3E_3D:
    s << '$'
      << ">="
      << '$' ;
    break;
  case  galgas_scanner_1__26:
    s << '$'
      << "&"
      << '$' ;
    break;
  case  galgas_scanner_1__7B:
    s << '$'
      << "{"
      << '$' ;
    break;
  case  galgas_scanner_1__7D:
    s << '$'
      << "}"
      << '$' ;
    break;
  case  galgas_scanner_1__2B_3E:
    s << '$'
      << "+>"
      << '$' ;
    break;
  case  galgas_scanner_1__2D_3D:
    s << '$'
      << "-="
      << '$' ;
    break;
  case  galgas_scanner_1__5E:
    s << '$'
      << "^"
      << '$' ;
    break;
  case  galgas_scanner_1__3E_3E:
    s << '$'
      << ">>"
      << '$' ;
    break;
  case  galgas_scanner_1__7E:
    s << '$'
      << "~"
      << '$' ;
    break;
  case  galgas_scanner_1__3C:
    s << '$'
      << "<"
      << '$' ;
    break;
  case  galgas_scanner_1__3C_3D:
    s << '$'
      << "<="
      << '$' ;
    break;
  case  galgas_scanner_1__3C_3C:
    s << '$'
      << "<<"
      << '$' ;
    break;
  case  galgas_scanner_1_non_5Fterminal_5Fsymbol:
    s << '$'
      << "non_terminal_symbol"
      << '$' ;
    s << ' ' ;
    s.writeCstringConstant (_p->tokenString) ;
    break;
  case  galgas_scanner_1_literal_5Fstring:
    s << '$'
      << "literal_string"
      << '$' ;
    s << ' ' ;
    s.writeCstringConstant (_p->tokenString) ;
    break;
  case  galgas_scanner_1_comment:
    s << '$'
      << "comment"
      << '$' ;
    break;
  default:
    break ;
  }
  return s ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            parseLexicalToken                              *
//                                                                           *
//---------------------------------------------------------------------------*

bool galgas_scanner::
parseLexicalToken (void) {
  cTokenFor_galgas_scanner _token ;
  bool loop_ = true ;
  _token._mTokenCode = -1 ;
  while (_token._mTokenCode < 0) {
    _token.charValue = '\0' ;
    _token.floatValue = 0.0 ;
    _token.identifierString.clear () ;
    _token.sint32value = 0 ;
    _token.sint64value = 0 ;
    _token.tokenString.clear () ;
    _token.uint32value = 0 ;
    _token.uint64value = 0 ;
    mCurrentTokenStartLocation = currentLocation () ;
    try{
      if (testForInputChar ('a', 'z') ||
          testForInputChar ('A', 'Z')) {
        do {
          scanner_action_enterCharacterIntoString (_token.identifierString, scanner_action_toLower (previousChar ())) ;
          scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          if (testForInputChar ('a', 'z') ||
              testForInputChar ('A', 'Z') ||
              testForInputChar ('_') ||
              testForInputChar ('0', '9')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = search_into_galgasKeyWordList (_token.identifierString) ;
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = galgas_scanner_1_identifier ;
        }
        _enterToken (_token) ;
      }else if (testForInputChar ('0', '9')) {
        scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
        do {
          if (testForInputChar ('0', '9')) {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          }else if (testForInputChar ('_')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('S') ||
            testForInputChar ('s')) {
          scanner_action_convertDecimalStringIntoSInt (_token.tokenString, _token.sint32value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_signed_5Fliteral_5Finteger ;
          _enterToken (_token) ;
        }else if (testForInputString ("LS", 2)) {
          scanner_action_convertDecimalStringIntoSInt64 (_token.tokenString, _token.sint64value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_signed_5Fliteral_5Finteger64 ;
          _enterToken (_token) ;
        }else if (testForInputChar ('L')) {
          scanner_action_convertDecimalStringIntoUInt64 (_token.tokenString, _token.uint64value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_unsigned_5Fliteral_5Finteger64 ;
          _enterToken (_token) ;
        }else if (testForInputChar ('.')) {
          scanner_action_enterCharacterIntoString (_token.tokenString, '.') ;
          do {
            if (testForInputChar ('0', '9')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            }else if (testForInputChar ('_')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
          scanner_action_convertStringToDouble (_token.tokenString, _token.floatValue, gErrorMessage_1) ;
          _token._mTokenCode = galgas_scanner_1_literal_5Fdouble ;
          _enterToken (_token) ;
        }else{
          scanner_action_convertDecimalStringIntoUInt (_token.tokenString, _token.uint32value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_unsigned_5Fliteral_5Finteger ;
          _enterToken (_token) ;
        }
      }else if (testForInputChar ('.')) {
        if (testForInputChar ('0', '9')) {
          scanner_action_enterCharacterIntoString (_token.tokenString, '0') ;
          scanner_action_enterCharacterIntoString (_token.tokenString, '.') ;
          scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          do {
            if (testForInputChar ('0', '9')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            }else if (testForInputChar ('_')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
          scanner_action_convertStringToDouble (_token.tokenString, _token.floatValue, gErrorMessage_1) ;
          _token._mTokenCode = galgas_scanner_1_literal_5Fdouble ;
          _enterToken (_token) ;
        }else{
          if (testForInputString ("..", 2)) {
            _token._mTokenCode = galgas_scanner_1__2E_2E_2E ;
            _enterToken (_token) ;
          }else if (testForInputString ("=", 1)) {
            _token._mTokenCode = galgas_scanner_1__2E_3D ;
            _enterToken (_token) ;
          }else{
            _token._mTokenCode = galgas_scanner_1__2E ;
            _enterToken (_token) ;
          }
        }
      }else if (testForInputChar ('@')) {
        if (testForInputChar ('a', 'z') ||
            testForInputChar ('A', 'Z') ||
            testForInputChar ('_')) {
          do {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            if (testForInputChar ('a', 'z') ||
                testForInputChar ('A', 'Z') ||
                testForInputChar ('_') ||
                testForInputChar ('0', '9')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
        }else{
          lexicalError (gErrorMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        _token._mTokenCode = galgas_scanner_1_type_5Fname ;
        _enterToken (_token) ;
      }else if (testForInputChar ('%')) {
        if (testForInputChar ('a', 'z') ||
            testForInputChar ('A', 'Z') ||
            testForInputChar ('_')) {
          do {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            if (testForInputChar ('a', 'z') ||
                testForInputChar ('A', 'Z') ||
                testForInputChar ('_') ||
                testForInputChar ('0', '9')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
        }else{
          lexicalError (gErrorMessage_4 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        _token._mTokenCode = galgas_scanner_1_mda_5Ftype_5Fname ;
        _enterToken (_token) ;
      }else if (testForInputChar ('\'')) {
        if (testForInputChar ('\\')) {
          if (testForInputChar ('f')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\f') ;
          }else if (testForInputChar ('n')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\n') ;
          }else if (testForInputChar ('r')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\r') ;
          }else if (testForInputChar ('t')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\t') ;
          }else if (testForInputChar ('v')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\v') ;
          }else if (testForInputChar ('\\')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\\') ;
          }else if (testForInputChar ('0')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\0') ;
          }else if (testForInputChar ('\'')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\'') ;
          }else if (testForInputChar ('x') ||
              testForInputChar ('X')) {
            if (testForInputChar ('0', '9') ||
                testForInputChar ('a', 'f') ||
                testForInputChar ('A', 'F')) {
              do {
                scanner_action_enterHexDigitIntoASCIIcharacter (_token.charValue, previousChar (), gErrorMessage_6, gErrorMessage_2) ;
                if (testForInputChar ('0', '9') ||
                    testForInputChar ('a', 'f') ||
                    testForInputChar ('A', 'F')) {
                }else{
                  loop_ = false ;
                }
              }while (loop_) ;
              loop_ = true ;
            }else{
              lexicalError (gErrorMessage_5 COMMA_LINE_AND_SOURCE_FILE) ;
            }
          }else{
            lexicalError (gErrorMessage_5 COMMA_LINE_AND_SOURCE_FILE) ;
          }
        }else if (testForInputChar (' ', '\xFF')) {
          scanner_action_enterCharacterIntoCharacter (_token.charValue, previousChar ()) ;
        }else{
          lexicalError (gErrorMessage_5 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        if (testForInputChar ('\'')) {
          _token._mTokenCode = galgas_scanner_1_literal_5Fchar ;
          _enterToken (_token) ;
        }else{
          lexicalError (gErrorMessage_5 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputChar ('$')) {
        if (testForInputChar ('!', '#') ||
            testForInputChar ('%', '~')) {
          do {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            if (testForInputChar ('!', '#') ||
                testForInputChar ('%', '~')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
        }else{
          lexicalError (gErrorMessage_7 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        if (testForInputChar ('$')) {
        }else{
          lexicalError (gErrorMessage_8 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        _token._mTokenCode = galgas_scanner_1_terminal ;
        _enterToken (_token) ;
      }else if (testForInputString ("--", 2)) {
        _token._mTokenCode = galgas_scanner_1__2D_2D ;
        _enterToken (_token) ;
      }else if (testForInputString ("::", 2)) {
        _token._mTokenCode = galgas_scanner_1__3A_3A ;
        _enterToken (_token) ;
      }else if (testForInputString ("->", 2)) {
        _token._mTokenCode = galgas_scanner_1__2D_3E ;
        _enterToken (_token) ;
      }else if (testForInputString ("==", 2)) {
        _token._mTokenCode = galgas_scanner_1__3D_3D ;
        _enterToken (_token) ;
      }else if (testForInputString ("\?\?", 2)) {
        _token._mTokenCode = galgas_scanner_1__3F_3F ;
        _enterToken (_token) ;
      }else if (testForInputString (":=", 2)) {
        _token._mTokenCode = galgas_scanner_1__3A_3D ;
        _enterToken (_token) ;
      }else if (testForInputString ("++", 2)) {
        _token._mTokenCode = galgas_scanner_1__2B_2B ;
        _enterToken (_token) ;
      }else if (testForInputString ("+=", 2)) {
        _token._mTokenCode = galgas_scanner_1__2B_3D ;
        _enterToken (_token) ;
      }else if (testForInputString ("\?!", 2)) {
        _token._mTokenCode = galgas_scanner_1__3F_21 ;
        _enterToken (_token) ;
      }else if (testForInputString ("!\?", 2)) {
        _token._mTokenCode = galgas_scanner_1__21_3F ;
        _enterToken (_token) ;
      }else if (testForInputString ("!=", 2)) {
        _token._mTokenCode = galgas_scanner_1__21_3D ;
        _enterToken (_token) ;
      }else if (testForInputString (">=", 2)) {
        _token._mTokenCode = galgas_scanner_1__3E_3D ;
        _enterToken (_token) ;
      }else if (testForInputString ("+>", 2)) {
        _token._mTokenCode = galgas_scanner_1__2B_3E ;
        _enterToken (_token) ;
      }else if (testForInputString ("-=", 2)) {
        _token._mTokenCode = galgas_scanner_1__2D_3D ;
        _enterToken (_token) ;
      }else if (testForInputString (">>", 2)) {
        _token._mTokenCode = galgas_scanner_1__3E_3E ;
        _enterToken (_token) ;
      }else if (testForInputString ("*", 1)) {
        _token._mTokenCode = galgas_scanner_1__2A ;
        _enterToken (_token) ;
      }else if (testForInputString ("|", 1)) {
        _token._mTokenCode = galgas_scanner_1__7C ;
        _enterToken (_token) ;
      }else if (testForInputString (",", 1)) {
        _token._mTokenCode = galgas_scanner_1__2C ;
        _enterToken (_token) ;
      }else if (testForInputString ("+", 1)) {
        _token._mTokenCode = galgas_scanner_1__2B ;
        _enterToken (_token) ;
      }else if (testForInputString (">", 1)) {
        _token._mTokenCode = galgas_scanner_1__3E ;
        _enterToken (_token) ;
      }else if (testForInputString (";", 1)) {
        _token._mTokenCode = galgas_scanner_1__3B ;
        _enterToken (_token) ;
      }else if (testForInputString (":", 1)) {
        _token._mTokenCode = galgas_scanner_1__3A ;
        _enterToken (_token) ;
      }else if (testForInputString ("-", 1)) {
        _token._mTokenCode = galgas_scanner_1__2D ;
        _enterToken (_token) ;
      }else if (testForInputString ("(", 1)) {
        _token._mTokenCode = galgas_scanner_1__28 ;
        _enterToken (_token) ;
      }else if (testForInputString (")", 1)) {
        _token._mTokenCode = galgas_scanner_1__29 ;
        _enterToken (_token) ;
      }else if (testForInputString ("\?", 1)) {
        _token._mTokenCode = galgas_scanner_1__3F ;
        _enterToken (_token) ;
      }else if (testForInputString ("!", 1)) {
        _token._mTokenCode = galgas_scanner_1__21 ;
        _enterToken (_token) ;
      }else if (testForInputString ("[", 1)) {
        _token._mTokenCode = galgas_scanner_1__5B ;
        _enterToken (_token) ;
      }else if (testForInputString ("]", 1)) {
        _token._mTokenCode = galgas_scanner_1__5D ;
        _enterToken (_token) ;
      }else if (testForInputString ("/", 1)) {
        _token._mTokenCode = galgas_scanner_1__2F ;
        _enterToken (_token) ;
      }else if (testForInputString ("&", 1)) {
        _token._mTokenCode = galgas_scanner_1__26 ;
        _enterToken (_token) ;
      }else if (testForInputString ("{", 1)) {
        _token._mTokenCode = galgas_scanner_1__7B ;
        _enterToken (_token) ;
      }else if (testForInputString ("}", 1)) {
        _token._mTokenCode = galgas_scanner_1__7D ;
        _enterToken (_token) ;
      }else if (testForInputString ("^", 1)) {
        _token._mTokenCode = galgas_scanner_1__5E ;
        _enterToken (_token) ;
      }else if (testForInputString ("~", 1)) {
        _token._mTokenCode = galgas_scanner_1__7E ;
        _enterToken (_token) ;
      }else if (testForInputChar ('<')) {
        const C_LocationInSource _locationForTag_onlyInfDelimiter = _mCurrentLocation ;
        if (testForInputChar ('=')) {
          _token._mTokenCode = galgas_scanner_1__3C_3D ;
          _enterToken (_token) ;
        }else if (testForInputChar ('<')) {
          _token._mTokenCode = galgas_scanner_1__3C_3C ;
          _enterToken (_token) ;
        }else if (testForInputChar ('a', 'z') ||
            testForInputChar ('A', 'Z')) {
          do {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            if (testForInputChar ('a', 'z') ||
                testForInputChar ('A', 'Z') ||
                testForInputChar ('0', '9') ||
                testForInputChar ('_')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
          if (testForInputChar ('>')) {
            _token._mTokenCode = galgas_scanner_1_non_5Fterminal_5Fsymbol ;
            _enterToken (_token) ;
          }else{
            _mCurrentLocation = _locationForTag_onlyInfDelimiter ;
            _token._mTokenCode = galgas_scanner_1__3C ;
            _enterToken (_token) ;
          }
        }else{
          _token._mTokenCode = galgas_scanner_1__3C ;
          _enterToken (_token) ;
        }
      }else if (testForInputChar ('\"')) {
        do {
          if (testForInputChar ('\\')) {
            if (testForInputChar ('f')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\f') ;
            }else if (testForInputChar ('n')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\n') ;
            }else if (testForInputChar ('r')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\r') ;
            }else if (testForInputChar ('t')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\t') ;
            }else if (testForInputChar ('v')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\v') ;
            }else if (testForInputChar ('\\')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\\') ;
            }else if (testForInputChar ('0')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\0') ;
            }else if (testForInputChar ('\"')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\"') ;
            }else if (testForInputChar ('\'')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\'') ;
            }else if (testForInputChar ('0', '9')) {
              do {
                scanner_action_enterHexDigitIntoASCIIcharacter (_token.charValue, previousChar (), gErrorMessage_6, gErrorMessage_2) ;
                if (testForInputChar ('0', '9')) {
                }else{
                  loop_ = false ;
                }
              }while (loop_) ;
              loop_ = true ;
              scanner_action_enterCharacterIntoString (_token.tokenString, _token.charValue) ;
            }else{
              lexicalError (gErrorMessage_5 COMMA_LINE_AND_SOURCE_FILE) ;
            }
          }else if (testForInputChar (' ') ||
              testForInputChar ('!') ||
              testForInputChar ('#', '\xFF')) {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('\"')) {
          _token._mTokenCode = galgas_scanner_1_literal_5Fstring ;
          _enterToken (_token) ;
        }else{
          lexicalError (gErrorMessage_9 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputChar ('#')) {
        do {
          if (testForInputChar ('\x1', '\t') ||
              testForInputChar ('\v') ||
              testForInputChar ('\f') ||
              testForInputChar ('\xE', '\xFF')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
      }else if (testForInputChar ('\x1', ' ')) {
      }else if (testForInputChar ('\0')) { // End of source text ? 
        _token._mTokenCode = galgas_scanner_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      _token._mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
    }
  }
  return _token._mTokenCode > 0 ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   parseLexicalTokenForLexicalColoring                     *
//                                                                           *
//---------------------------------------------------------------------------*

sint16 galgas_scanner::
parseLexicalTokenForLexicalColoring (void) {
  cTokenFor_galgas_scanner _token ;
  bool loop_ = true ;
  _token._mTokenCode = -1 ;
  while (_token._mTokenCode < 0) {
    _token.charValue = '\0' ;
    _token.floatValue = 0.0 ;
    _token.identifierString.clear () ;
    _token.sint32value = 0 ;
    _token.sint64value = 0 ;
    _token.tokenString.clear () ;
    _token.uint32value = 0 ;
    _token.uint64value = 0 ;
    mCurrentTokenStartLocation = currentLocation () ;
    try{
      if (testForInputChar ('a', 'z') ||
          testForInputChar ('A', 'Z')) {
        do {
          scanner_action_enterCharacterIntoString (_token.identifierString, scanner_action_toLower (previousChar ())) ;
          scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          if (testForInputChar ('a', 'z') ||
              testForInputChar ('A', 'Z') ||
              testForInputChar ('_') ||
              testForInputChar ('0', '9')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = search_into_galgasKeyWordList (_token.identifierString) ;
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = galgas_scanner_1_identifier ;
        }
      }else if (testForInputChar ('0', '9')) {
        scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
        do {
          if (testForInputChar ('0', '9')) {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          }else if (testForInputChar ('_')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('S') ||
            testForInputChar ('s')) {
          scanner_action_convertDecimalStringIntoSInt (_token.tokenString, _token.sint32value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_signed_5Fliteral_5Finteger ;
        }else if (testForInputString ("LS", 2)) {
          scanner_action_convertDecimalStringIntoSInt64 (_token.tokenString, _token.sint64value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_signed_5Fliteral_5Finteger64 ;
        }else if (testForInputChar ('L')) {
          scanner_action_convertDecimalStringIntoUInt64 (_token.tokenString, _token.uint64value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_unsigned_5Fliteral_5Finteger64 ;
        }else if (testForInputChar ('.')) {
          scanner_action_enterCharacterIntoString (_token.tokenString, '.') ;
          do {
            if (testForInputChar ('0', '9')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            }else if (testForInputChar ('_')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
          scanner_action_convertStringToDouble (_token.tokenString, _token.floatValue, gErrorMessage_1) ;
          _token._mTokenCode = galgas_scanner_1_literal_5Fdouble ;
        }else{
          scanner_action_convertDecimalStringIntoUInt (_token.tokenString, _token.uint32value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_unsigned_5Fliteral_5Finteger ;
        }
      }else if (testForInputChar ('.')) {
        if (testForInputChar ('0', '9')) {
          scanner_action_enterCharacterIntoString (_token.tokenString, '0') ;
          scanner_action_enterCharacterIntoString (_token.tokenString, '.') ;
          scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          do {
            if (testForInputChar ('0', '9')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            }else if (testForInputChar ('_')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
          scanner_action_convertStringToDouble (_token.tokenString, _token.floatValue, gErrorMessage_1) ;
          _token._mTokenCode = galgas_scanner_1_literal_5Fdouble ;
        }else{
          if (testForInputString ("..", 2)) {
            _token._mTokenCode = galgas_scanner_1__2E_2E_2E ;
          }else if (testForInputString ("=", 1)) {
            _token._mTokenCode = galgas_scanner_1__2E_3D ;
          }else{
            _token._mTokenCode = galgas_scanner_1__2E ;
          }
        }
      }else if (testForInputChar ('@')) {
        if (testForInputChar ('a', 'z') ||
            testForInputChar ('A', 'Z') ||
            testForInputChar ('_')) {
          do {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            if (testForInputChar ('a', 'z') ||
                testForInputChar ('A', 'Z') ||
                testForInputChar ('_') ||
                testForInputChar ('0', '9')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
        }else{
          lexicalError (gErrorMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        _token._mTokenCode = galgas_scanner_1_type_5Fname ;
      }else if (testForInputChar ('%')) {
        if (testForInputChar ('a', 'z') ||
            testForInputChar ('A', 'Z') ||
            testForInputChar ('_')) {
          do {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            if (testForInputChar ('a', 'z') ||
                testForInputChar ('A', 'Z') ||
                testForInputChar ('_') ||
                testForInputChar ('0', '9')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
        }else{
          lexicalError (gErrorMessage_4 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        _token._mTokenCode = galgas_scanner_1_mda_5Ftype_5Fname ;
      }else if (testForInputChar ('\'')) {
        if (testForInputChar ('\\')) {
          if (testForInputChar ('f')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\f') ;
          }else if (testForInputChar ('n')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\n') ;
          }else if (testForInputChar ('r')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\r') ;
          }else if (testForInputChar ('t')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\t') ;
          }else if (testForInputChar ('v')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\v') ;
          }else if (testForInputChar ('\\')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\\') ;
          }else if (testForInputChar ('0')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\0') ;
          }else if (testForInputChar ('\'')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\'') ;
          }else if (testForInputChar ('x') ||
              testForInputChar ('X')) {
            if (testForInputChar ('0', '9') ||
                testForInputChar ('a', 'f') ||
                testForInputChar ('A', 'F')) {
              do {
                scanner_action_enterHexDigitIntoASCIIcharacter (_token.charValue, previousChar (), gErrorMessage_6, gErrorMessage_2) ;
                if (testForInputChar ('0', '9') ||
                    testForInputChar ('a', 'f') ||
                    testForInputChar ('A', 'F')) {
                }else{
                  loop_ = false ;
                }
              }while (loop_) ;
              loop_ = true ;
            }else{
              lexicalError (gErrorMessage_5 COMMA_LINE_AND_SOURCE_FILE) ;
            }
          }else{
            lexicalError (gErrorMessage_5 COMMA_LINE_AND_SOURCE_FILE) ;
          }
        }else if (testForInputChar (' ', '\xFF')) {
          scanner_action_enterCharacterIntoCharacter (_token.charValue, previousChar ()) ;
        }else{
          lexicalError (gErrorMessage_5 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        if (testForInputChar ('\'')) {
          _token._mTokenCode = galgas_scanner_1_literal_5Fchar ;
        }else{
          lexicalError (gErrorMessage_5 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputChar ('$')) {
        if (testForInputChar ('!', '#') ||
            testForInputChar ('%', '~')) {
          do {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            if (testForInputChar ('!', '#') ||
                testForInputChar ('%', '~')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
        }else{
          lexicalError (gErrorMessage_7 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        if (testForInputChar ('$')) {
        }else{
          lexicalError (gErrorMessage_8 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        _token._mTokenCode = galgas_scanner_1_terminal ;
      }else if (testForInputString ("--", 2)) {
        _token._mTokenCode = galgas_scanner_1__2D_2D ;
      }else if (testForInputString ("::", 2)) {
        _token._mTokenCode = galgas_scanner_1__3A_3A ;
      }else if (testForInputString ("->", 2)) {
        _token._mTokenCode = galgas_scanner_1__2D_3E ;
      }else if (testForInputString ("==", 2)) {
        _token._mTokenCode = galgas_scanner_1__3D_3D ;
      }else if (testForInputString ("\?\?", 2)) {
        _token._mTokenCode = galgas_scanner_1__3F_3F ;
      }else if (testForInputString (":=", 2)) {
        _token._mTokenCode = galgas_scanner_1__3A_3D ;
      }else if (testForInputString ("++", 2)) {
        _token._mTokenCode = galgas_scanner_1__2B_2B ;
      }else if (testForInputString ("+=", 2)) {
        _token._mTokenCode = galgas_scanner_1__2B_3D ;
      }else if (testForInputString ("\?!", 2)) {
        _token._mTokenCode = galgas_scanner_1__3F_21 ;
      }else if (testForInputString ("!\?", 2)) {
        _token._mTokenCode = galgas_scanner_1__21_3F ;
      }else if (testForInputString ("!=", 2)) {
        _token._mTokenCode = galgas_scanner_1__21_3D ;
      }else if (testForInputString (">=", 2)) {
        _token._mTokenCode = galgas_scanner_1__3E_3D ;
      }else if (testForInputString ("+>", 2)) {
        _token._mTokenCode = galgas_scanner_1__2B_3E ;
      }else if (testForInputString ("-=", 2)) {
        _token._mTokenCode = galgas_scanner_1__2D_3D ;
      }else if (testForInputString (">>", 2)) {
        _token._mTokenCode = galgas_scanner_1__3E_3E ;
      }else if (testForInputString ("*", 1)) {
        _token._mTokenCode = galgas_scanner_1__2A ;
      }else if (testForInputString ("|", 1)) {
        _token._mTokenCode = galgas_scanner_1__7C ;
      }else if (testForInputString (",", 1)) {
        _token._mTokenCode = galgas_scanner_1__2C ;
      }else if (testForInputString ("+", 1)) {
        _token._mTokenCode = galgas_scanner_1__2B ;
      }else if (testForInputString (">", 1)) {
        _token._mTokenCode = galgas_scanner_1__3E ;
      }else if (testForInputString (";", 1)) {
        _token._mTokenCode = galgas_scanner_1__3B ;
      }else if (testForInputString (":", 1)) {
        _token._mTokenCode = galgas_scanner_1__3A ;
      }else if (testForInputString ("-", 1)) {
        _token._mTokenCode = galgas_scanner_1__2D ;
      }else if (testForInputString ("(", 1)) {
        _token._mTokenCode = galgas_scanner_1__28 ;
      }else if (testForInputString (")", 1)) {
        _token._mTokenCode = galgas_scanner_1__29 ;
      }else if (testForInputString ("\?", 1)) {
        _token._mTokenCode = galgas_scanner_1__3F ;
      }else if (testForInputString ("!", 1)) {
        _token._mTokenCode = galgas_scanner_1__21 ;
      }else if (testForInputString ("[", 1)) {
        _token._mTokenCode = galgas_scanner_1__5B ;
      }else if (testForInputString ("]", 1)) {
        _token._mTokenCode = galgas_scanner_1__5D ;
      }else if (testForInputString ("/", 1)) {
        _token._mTokenCode = galgas_scanner_1__2F ;
      }else if (testForInputString ("&", 1)) {
        _token._mTokenCode = galgas_scanner_1__26 ;
      }else if (testForInputString ("{", 1)) {
        _token._mTokenCode = galgas_scanner_1__7B ;
      }else if (testForInputString ("}", 1)) {
        _token._mTokenCode = galgas_scanner_1__7D ;
      }else if (testForInputString ("^", 1)) {
        _token._mTokenCode = galgas_scanner_1__5E ;
      }else if (testForInputString ("~", 1)) {
        _token._mTokenCode = galgas_scanner_1__7E ;
      }else if (testForInputChar ('<')) {
        const C_LocationInSource _locationForTag_onlyInfDelimiter = _mCurrentLocation ;
        if (testForInputChar ('=')) {
          _token._mTokenCode = galgas_scanner_1__3C_3D ;
        }else if (testForInputChar ('<')) {
          _token._mTokenCode = galgas_scanner_1__3C_3C ;
        }else if (testForInputChar ('a', 'z') ||
            testForInputChar ('A', 'Z')) {
          do {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            if (testForInputChar ('a', 'z') ||
                testForInputChar ('A', 'Z') ||
                testForInputChar ('0', '9') ||
                testForInputChar ('_')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
          if (testForInputChar ('>')) {
            _token._mTokenCode = galgas_scanner_1_non_5Fterminal_5Fsymbol ;
          }else{
            _mCurrentLocation = _locationForTag_onlyInfDelimiter ;
            _token._mTokenCode = galgas_scanner_1__3C ;
          }
        }else{
          _token._mTokenCode = galgas_scanner_1__3C ;
        }
      }else if (testForInputChar ('\"')) {
        do {
          if (testForInputChar ('\\')) {
            if (testForInputChar ('f')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\f') ;
            }else if (testForInputChar ('n')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\n') ;
            }else if (testForInputChar ('r')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\r') ;
            }else if (testForInputChar ('t')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\t') ;
            }else if (testForInputChar ('v')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\v') ;
            }else if (testForInputChar ('\\')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\\') ;
            }else if (testForInputChar ('0')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\0') ;
            }else if (testForInputChar ('\"')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\"') ;
            }else if (testForInputChar ('\'')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\'') ;
            }else if (testForInputChar ('0', '9')) {
              do {
                scanner_action_enterHexDigitIntoASCIIcharacter (_token.charValue, previousChar (), gErrorMessage_6, gErrorMessage_2) ;
                if (testForInputChar ('0', '9')) {
                }else{
                  loop_ = false ;
                }
              }while (loop_) ;
              loop_ = true ;
              scanner_action_enterCharacterIntoString (_token.tokenString, _token.charValue) ;
            }else{
              lexicalError (gErrorMessage_5 COMMA_LINE_AND_SOURCE_FILE) ;
            }
          }else if (testForInputChar (' ') ||
              testForInputChar ('!') ||
              testForInputChar ('#', '\xFF')) {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('\"')) {
          _token._mTokenCode = galgas_scanner_1_literal_5Fstring ;
        }else{
          lexicalError (gErrorMessage_9 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputChar ('#')) {
        do {
          if (testForInputChar ('\x1', '\t') ||
              testForInputChar ('\v') ||
              testForInputChar ('\f') ||
              testForInputChar ('\xE', '\xFF')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = galgas_scanner_1_comment ;
      }else if (testForInputChar ('\x1', ' ')) {
      }else if (testForInputChar ('\0')) { // End of source text ? 
        _token._mTokenCode = galgas_scanner_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      _token._mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
      throw ;
    }
  }
  return _token._mTokenCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            Styles definition                              *
//                                                                           *
//---------------------------------------------------------------------------*

sint32 galgas_scanner::getStylesCount (void) {
  return 12 ;
}

//---------------------------------------------------------------------------*

const char * galgas_scanner::getStyleName (const sint32 inIndex) {
  const char * kStylesArray [13] = {"Default style", "Keywords:", "Delimiters:", "Terminal Symbols:", "Non Terminal Symbols:", "Integer Constants:", "Floating Point Constants:", "Character Constants:", "String Constants:", "Type Names (@...):", "MDA Type Names (%...):", "Comments:", NULL} ;
  return (inIndex < 12) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

const char * galgas_scanner::getStyleIdentifier (const sint32 inIndex) {
  const char * kStylesArray [13] = {"", "keywordsStyle", "delimitersStyle", "terminalStyle", "nonTerminalStyle", "integerStyle", "float_csts", "characterStyle", "stringStyle", "typeNameStyle", "mdaTypeNameStyle", "commentStyle", NULL} ;
  return (inIndex < 12) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

uint8 galgas_scanner::
terminalStyleIndex (const sint32 inTerminal) {
  static const uint8 kTerminalSymbolStyles [130] = {0,
    0 /* galgas_scanner_1_identifier */,
    1 /* galgas_scanner_1_compile */,
    1 /* galgas_scanner_1_extract */,
    1 /* galgas_scanner_1_program */,
    1 /* galgas_scanner_1_enum */,
    1 /* galgas_scanner_1_syntax */,
    1 /* galgas_scanner_1_semantics */,
    1 /* galgas_scanner_1_extends */,
    1 /* galgas_scanner_1_reader */,
    1 /* galgas_scanner_1_extern */,
    1 /* galgas_scanner_1_routine */,
    1 /* galgas_scanner_1_foreach */,
    1 /* galgas_scanner_1_constructor */,
    1 /* galgas_scanner_1_match */,
    1 /* galgas_scanner_1_default */,
    1 /* galgas_scanner_1_here */,
    1 /* galgas_scanner_1_if */,
    1 /* galgas_scanner_1_else */,
    1 /* galgas_scanner_1_elsif */,
    1 /* galgas_scanner_1_then */,
    1 /* galgas_scanner_1_rewind */,
    1 /* galgas_scanner_1_when */,
    1 /* galgas_scanner_1_abstract */,
    1 /* galgas_scanner_1_class */,
    1 /* galgas_scanner_1_parse */,
    1 /* galgas_scanner_1_map */,
    1 /* galgas_scanner_1_warning */,
    1 /* galgas_scanner_1_modifier */,
    1 /* galgas_scanner_1_state */,
    1 /* galgas_scanner_1_drop */,
    1 /* galgas_scanner_1_override */,
    1 /* galgas_scanner_1_select */,
    1 /* galgas_scanner_1_while */,
    1 /* galgas_scanner_1_or */,
    1 /* galgas_scanner_1_block */,
    1 /* galgas_scanner_1_not */,
    1 /* galgas_scanner_1_loop */,
    1 /* galgas_scanner_1_false */,
    1 /* galgas_scanner_1_true */,
    1 /* galgas_scanner_1_end */,
    1 /* galgas_scanner_1_switch */,
    1 /* galgas_scanner_1_rule */,
    1 /* galgas_scanner_1_tag */,
    1 /* galgas_scanner_1_metamodel */,
    1 /* galgas_scanner_1_mod */,
    1 /* galgas_scanner_1_import */,
    1 /* galgas_scanner_1_lexique */,
    1 /* galgas_scanner_1_list */,
    1 /* galgas_scanner_1_message */,
    1 /* galgas_scanner_1_repeat */,
    1 /* galgas_scanner_1_error */,
    1 /* galgas_scanner_1_search */,
    1 /* galgas_scanner_1_log */,
    1 /* galgas_scanner_1_insert */,
    1 /* galgas_scanner_1_in */,
    1 /* galgas_scanner_1_send */,
    1 /* galgas_scanner_1_action */,
    1 /* galgas_scanner_1_grammar */,
    1 /* galgas_scanner_1_option */,
    1 /* galgas_scanner_1_root */,
    1 /* galgas_scanner_1_on */,
    1 /* galgas_scanner_1_unused */,
    1 /* galgas_scanner_1_label */,
    1 /* galgas_scanner_1_style */,
    1 /* galgas_scanner_1_gui */,
    1 /* galgas_scanner_1_do */,
    1 /* galgas_scanner_1_relation */,
    1 /* galgas_scanner_1_of */,
    1 /* galgas_scanner_1_self */,
    1 /* galgas_scanner_1_constraint */,
    1 /* galgas_scanner_1_context */,
    1 /* galgas_scanner_1_call */,
    1 /* galgas_scanner_1_mapindex */,
    1 /* galgas_scanner_1_method */,
    1 /* galgas_scanner_1_remove */,
    1 /* galgas_scanner_1_sortedlist */,
    6 /* galgas_scanner_1_literal_5Fdouble */,
    5 /* galgas_scanner_1_unsigned_5Fliteral_5Finteger */,
    5 /* galgas_scanner_1_signed_5Fliteral_5Finteger */,
    5 /* galgas_scanner_1_unsigned_5Fliteral_5Finteger64 */,
    5 /* galgas_scanner_1_signed_5Fliteral_5Finteger64 */,
    2 /* galgas_scanner_1__2E */,
    2 /* galgas_scanner_1__2E_3D */,
    2 /* galgas_scanner_1__2E_2E_2E */,
    9 /* galgas_scanner_1_type_5Fname */,
    10 /* galgas_scanner_1_mda_5Ftype_5Fname */,
    7 /* galgas_scanner_1_literal_5Fchar */,
    3 /* galgas_scanner_1_terminal */,
    2 /* galgas_scanner_1__2A */,
    2 /* galgas_scanner_1__7C */,
    2 /* galgas_scanner_1__2C */,
    2 /* galgas_scanner_1__2B */,
    2 /* galgas_scanner_1__2D_2D */,
    2 /* galgas_scanner_1__3A_3A */,
    2 /* galgas_scanner_1__3E */,
    2 /* galgas_scanner_1__3B */,
    2 /* galgas_scanner_1__3A */,
    2 /* galgas_scanner_1__2D */,
    2 /* galgas_scanner_1__28 */,
    2 /* galgas_scanner_1__29 */,
    2 /* galgas_scanner_1__2D_3E */,
    2 /* galgas_scanner_1__3F */,
    2 /* galgas_scanner_1__3D_3D */,
    2 /* galgas_scanner_1__3F_3F */,
    2 /* galgas_scanner_1__21 */,
    2 /* galgas_scanner_1__3A_3D */,
    2 /* galgas_scanner_1__2B_2B */,
    2 /* galgas_scanner_1__5B */,
    2 /* galgas_scanner_1__5D */,
    2 /* galgas_scanner_1__2B_3D */,
    2 /* galgas_scanner_1__3F_21 */,
    2 /* galgas_scanner_1__21_3F */,
    2 /* galgas_scanner_1__2F */,
    2 /* galgas_scanner_1__21_3D */,
    2 /* galgas_scanner_1__3E_3D */,
    2 /* galgas_scanner_1__26 */,
    2 /* galgas_scanner_1__7B */,
    2 /* galgas_scanner_1__7D */,
    2 /* galgas_scanner_1__2B_3E */,
    2 /* galgas_scanner_1__2D_3D */,
    2 /* galgas_scanner_1__5E */,
    2 /* galgas_scanner_1__3E_3E */,
    2 /* galgas_scanner_1__7E */,
    2 /* galgas_scanner_1__3C */,
    2 /* galgas_scanner_1__3C_3D */,
    2 /* galgas_scanner_1__3C_3C */,
    4 /* galgas_scanner_1_non_5Fterminal_5Fsymbol */,
    8 /* galgas_scanner_1_literal_5Fstring */,
    11 /* galgas_scanner_1_comment */
  } ;
  return kTerminalSymbolStyles [inTerminal] ;
}

//---------------------------------------------------------------------------*

void galgas_scanner::_enterToken (const cTokenFor_galgas_scanner & inToken) {
  cTokenFor_galgas_scanner * _p = NULL ;
  macroMyNew (_p, cTokenFor_galgas_scanner ()) ;
  _p->_mTokenCode = inToken._mTokenCode ;
  _p->_mCurrentLocation = _mCurrentLocation ;
  _p->identifierString = inToken.identifierString ;
  _p->uint32value = inToken.uint32value ;
  _p->sint32value = inToken.sint32value ;
  _p->uint64value = inToken.uint64value ;
  _p->sint64value = inToken.sint64value ;
  _p->charValue = inToken.charValue ;
  _p->tokenString = inToken.tokenString ;
  _p->floatValue = inToken.floatValue ;
  _enterTokenFromPointer (_p) ;
}

//---------------------------------------------------------------------------*

void galgas_scanner::
_assignFromAttribute_identifierString (GGS_lstring & outValue) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, _p->identifierString) ;
}

//---------------------------------------------------------------------------*

void galgas_scanner::
_assignFromAttribute_uint32value (GGS_luint & outValue) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  outValue = GGS_luint (* this, _p->uint32value) ;
}

//---------------------------------------------------------------------------*

void galgas_scanner::
_assignFromAttribute_sint32value (GGS_lsint & outValue) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  outValue = GGS_lsint (* this, _p->sint32value) ;
}

//---------------------------------------------------------------------------*

void galgas_scanner::
_assignFromAttribute_uint64value (GGS_luint64 & outValue) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  outValue = GGS_luint64 (* this, _p->uint64value) ;
}

//---------------------------------------------------------------------------*

void galgas_scanner::
_assignFromAttribute_sint64value (GGS_lsint64 & outValue) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  outValue = GGS_lsint64 (* this, _p->sint64value) ;
}

//---------------------------------------------------------------------------*

void galgas_scanner::
_assignFromAttribute_charValue (GGS_lchar & outValue) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  outValue = GGS_lchar (* this, _p->charValue) ;
}

//---------------------------------------------------------------------------*

void galgas_scanner::
_assignFromAttribute_tokenString (GGS_lstring & outValue) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, _p->tokenString) ;
}

//---------------------------------------------------------------------------*

void galgas_scanner::
_assignFromAttribute_floatValue (GGS_ldouble & outValue) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  outValue = GGS_ldouble (* this, _p->floatValue) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Decoder Tables                               *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 kDecoder_249 [2] = {
  -1, // All transitions have the same target
  galgas_scanner::galgas_scanner_1__3E // Default response
} ;

const sint16 kDecoder_248 [2] = {
  -1, // All transitions have the same target
  galgas_scanner::galgas_scanner_1__21 // Default response
} ;

const sint16 kDecoder_247 [2] = {
  -1, // All transitions have the same target
  galgas_scanner::galgas_scanner_1__2B // Default response
} ;

const sint16 kDecoder_246 [2] = {
  -1, // All transitions have the same target
  galgas_scanner::galgas_scanner_1__3F // Default response
} ;

static const sint16 kDecoder_245 [4] = {
  61, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1__3D_3D // Accept for character'=' code 61
} ;

static const sint16 kDecoder_244 [4] = {
  58, // First entry
  1, // Entry Count
  galgas_scanner::galgas_scanner_1__3A, // Default response: accept terminal
  galgas_scanner::galgas_scanner_1__3A_3A // Accept for character':' code 58
} ;

static const sint16 kDecoder_243 [4] = {
  45, // First entry
  1, // Entry Count
  galgas_scanner::galgas_scanner_1__2D, // Default response: accept terminal
  galgas_scanner::galgas_scanner_1__2D_2D // Accept for character'-' code 45
} ;

static const sint16 kDecoder_242 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_sortedlist // Accept for character't' code 116
} ;

static const sint16 kDecoder_241 [4] = {
  115, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -242, // GOTO state 241 (kDecoder_241) for character's' code 115
} ;

static const sint16 kDecoder_240 [4] = {
  105, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -241, // GOTO state 240 (kDecoder_240) for character'i' code 105
} ;

static const sint16 kDecoder_239 [4] = {
  108, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -240, // GOTO state 239 (kDecoder_239) for character'l' code 108
} ;

static const sint16 kDecoder_238 [4] = {
  100, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -239, // GOTO state 238 (kDecoder_238) for character'd' code 100
} ;

static const sint16 kDecoder_237 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -238, // GOTO state 237 (kDecoder_237) for character'e' code 101
} ;

static const sint16 kDecoder_236 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -237, // GOTO state 236 (kDecoder_236) for character't' code 116
} ;

static const sint16 kDecoder_235 [4] = {
  114, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -236, // GOTO state 235 (kDecoder_235) for character'r' code 114
} ;

static const sint16 kDecoder_234 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_remove // Accept for character'e' code 101
} ;

static const sint16 kDecoder_233 [4] = {
  118, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -234, // GOTO state 233 (kDecoder_233) for character'v' code 118
} ;

static const sint16 kDecoder_232 [4] = {
  111, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -233, // GOTO state 232 (kDecoder_232) for character'o' code 111
} ;

static const sint16 kDecoder_231 [4] = {
  100, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_method // Accept for character'd' code 100
} ;

static const sint16 kDecoder_230 [4] = {
  111, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -231, // GOTO state 230 (kDecoder_230) for character'o' code 111
} ;

const sint16 kDecoder_229 [2] = {
  -1, // All transitions have the same target
  galgas_scanner::galgas_scanner_1_map // Default response
} ;

static const sint16 kDecoder_228 [4] = {
  101, // First entry
  1, // Entry Count
  galgas_scanner::galgas_scanner_1_map, // Default response: accept terminal
  -229, // GOTO state 228 (kDecoder_228) for character'e' code 101
} ;

static const sint16 kDecoder_227 [4] = {
  100, // First entry
  1, // Entry Count
  galgas_scanner::galgas_scanner_1_map, // Default response: accept terminal
  -228, // GOTO state 227 (kDecoder_227) for character'd' code 100
} ;

static const sint16 kDecoder_226 [4] = {
  110, // First entry
  1, // Entry Count
  galgas_scanner::galgas_scanner_1_map, // Default response: accept terminal
  -227, // GOTO state 226 (kDecoder_226) for character'n' code 110
} ;

static const sint16 kDecoder_225 [4] = {
  105, // First entry
  1, // Entry Count
  galgas_scanner::galgas_scanner_1_map, // Default response: accept terminal
  -226, // GOTO state 225 (kDecoder_225) for character'i' code 105
} ;

static const sint16 kDecoder_224 [4] = {
  108, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_call // Accept for character'l' code 108
} ;

static const sint16 kDecoder_223 [4] = {
  108, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -224, // GOTO state 223 (kDecoder_223) for character'l' code 108
} ;

static const sint16 kDecoder_222 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_context // Accept for character't' code 116
} ;

static const sint16 kDecoder_221 [4] = {
  120, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -222, // GOTO state 221 (kDecoder_221) for character'x' code 120
} ;

static const sint16 kDecoder_220 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -221, // GOTO state 220 (kDecoder_220) for character'e' code 101
} ;

static const sint16 kDecoder_219 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_constraint // Accept for character't' code 116
} ;

static const sint16 kDecoder_218 [4] = {
  110, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -219, // GOTO state 218 (kDecoder_218) for character'n' code 110
} ;

static const sint16 kDecoder_217 [4] = {
  105, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -218, // GOTO state 217 (kDecoder_217) for character'i' code 105
} ;

static const sint16 kDecoder_216 [4] = {
  110, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_relation // Accept for character'n' code 110
} ;

static const sint16 kDecoder_215 [4] = {
  111, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -216, // GOTO state 215 (kDecoder_215) for character'o' code 111
} ;

static const sint16 kDecoder_214 [4] = {
  105, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -215, // GOTO state 214 (kDecoder_214) for character'i' code 105
} ;

static const sint16 kDecoder_213 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -214, // GOTO state 213 (kDecoder_213) for character't' code 116
} ;

static const sint16 kDecoder_212 [4] = {
  97, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -213, // GOTO state 212 (kDecoder_212) for character'a' code 97
} ;

static const sint16 kDecoder_211 [4] = {
  105, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_gui // Accept for character'i' code 105
} ;

static const sint16 kDecoder_210 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_style // Accept for character'e' code 101
} ;

static const sint16 kDecoder_209 [4] = {
  108, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -210, // GOTO state 209 (kDecoder_209) for character'l' code 108
} ;

static const sint16 kDecoder_208 [4] = {
  108, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_label // Accept for character'l' code 108
} ;

static const sint16 kDecoder_207 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -208, // GOTO state 207 (kDecoder_207) for character'e' code 101
} ;

static const sint16 kDecoder_206 [4] = {
  98, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -207, // GOTO state 206 (kDecoder_206) for character'b' code 98
} ;

static const sint16 kDecoder_205 [4] = {
  100, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_unused // Accept for character'd' code 100
} ;

static const sint16 kDecoder_204 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -205, // GOTO state 204 (kDecoder_204) for character'e' code 101
} ;

static const sint16 kDecoder_203 [4] = {
  115, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -204, // GOTO state 203 (kDecoder_203) for character's' code 115
} ;

static const sint16 kDecoder_202 [4] = {
  117, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -203, // GOTO state 202 (kDecoder_202) for character'u' code 117
} ;

static const sint16 kDecoder_201 [4] = {
  110, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -202, // GOTO state 201 (kDecoder_201) for character'n' code 110
} ;

static const sint16 kDecoder_200 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_root // Accept for character't' code 116
} ;

static const sint16 kDecoder_199 [4] = {
  110, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_option // Accept for character'n' code 110
} ;

static const sint16 kDecoder_198 [4] = {
  111, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -199, // GOTO state 198 (kDecoder_198) for character'o' code 111
} ;

static const sint16 kDecoder_197 [4] = {
  105, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -198, // GOTO state 197 (kDecoder_197) for character'i' code 105
} ;

static const sint16 kDecoder_196 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -197, // GOTO state 196 (kDecoder_196) for character't' code 116
} ;

static const sint16 kDecoder_195 [4] = {
  114, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_grammar // Accept for character'r' code 114
} ;

static const sint16 kDecoder_194 [4] = {
  97, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -195, // GOTO state 194 (kDecoder_194) for character'a' code 97
} ;

static const sint16 kDecoder_193 [4] = {
  109, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -194, // GOTO state 193 (kDecoder_193) for character'm' code 109
} ;

static const sint16 kDecoder_192 [4] = {
  109, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -193, // GOTO state 192 (kDecoder_192) for character'm' code 109
} ;

static const sint16 kDecoder_191 [4] = {
  97, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -192, // GOTO state 191 (kDecoder_191) for character'a' code 97
} ;

static const sint16 kDecoder_190 [7] = {
  114, // First entry
  4, // Entry Count
  -1, // Default response: lexical error
  -191, // GOTO state 190 (kDecoder_190), for character'r' code 114
  -1, // Lexical error for character's' code 115
  -1, // Lexical error for character't' code 116
  -211, // GOTO state 210 (kDecoder_210) for character'u' code 117
} ;

static const sint16 kDecoder_189 [4] = {
  110, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_action // Accept for character'n' code 110
} ;

static const sint16 kDecoder_188 [4] = {
  111, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -189, // GOTO state 188 (kDecoder_188) for character'o' code 111
} ;

static const sint16 kDecoder_187 [4] = {
  105, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -188, // GOTO state 187 (kDecoder_187) for character'i' code 105
} ;

static const sint16 kDecoder_186 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -187, // GOTO state 186 (kDecoder_186) for character't' code 116
} ;

static const sint16 kDecoder_185 [4] = {
  100, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_send // Accept for character'd' code 100
} ;

static const sint16 kDecoder_184 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_insert // Accept for character't' code 116
} ;

static const sint16 kDecoder_183 [4] = {
  114, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -184, // GOTO state 183 (kDecoder_183) for character'r' code 114
} ;

static const sint16 kDecoder_182 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -183, // GOTO state 182 (kDecoder_182) for character'e' code 101
} ;

static const sint16 kDecoder_181 [4] = {
  115, // First entry
  1, // Entry Count
  galgas_scanner::galgas_scanner_1_in, // Default response: accept terminal
  -182, // GOTO state 181 (kDecoder_181) for character's' code 115
} ;

static const sint16 kDecoder_180 [4] = {
  104, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_search // Accept for character'h' code 104
} ;

static const sint16 kDecoder_179 [4] = {
  99, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -180, // GOTO state 179 (kDecoder_179) for character'c' code 99
} ;

static const sint16 kDecoder_178 [4] = {
  114, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -179, // GOTO state 178 (kDecoder_178) for character'r' code 114
} ;

static const sint16 kDecoder_177 [4] = {
  114, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_error // Accept for character'r' code 114
} ;

static const sint16 kDecoder_176 [4] = {
  111, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -177, // GOTO state 176 (kDecoder_176) for character'o' code 111
} ;

static const sint16 kDecoder_175 [4] = {
  114, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -176, // GOTO state 175 (kDecoder_175) for character'r' code 114
} ;

static const sint16 kDecoder_174 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_repeat // Accept for character't' code 116
} ;

static const sint16 kDecoder_173 [4] = {
  97, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -174, // GOTO state 173 (kDecoder_173) for character'a' code 97
} ;

static const sint16 kDecoder_172 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -173, // GOTO state 172 (kDecoder_172) for character'e' code 101
} ;

static const sint16 kDecoder_171 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_message // Accept for character'e' code 101
} ;

static const sint16 kDecoder_170 [4] = {
  103, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -171, // GOTO state 170 (kDecoder_170) for character'g' code 103
} ;

static const sint16 kDecoder_169 [4] = {
  97, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -170, // GOTO state 169 (kDecoder_169) for character'a' code 97
} ;

static const sint16 kDecoder_168 [4] = {
  115, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -169, // GOTO state 168 (kDecoder_168) for character's' code 115
} ;

static const sint16 kDecoder_167 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_list // Accept for character't' code 116
} ;

static const sint16 kDecoder_166 [4] = {
  115, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -167, // GOTO state 166 (kDecoder_166) for character's' code 115
} ;

static const sint16 kDecoder_165 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_lexique // Accept for character'e' code 101
} ;

static const sint16 kDecoder_164 [4] = {
  117, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -165, // GOTO state 164 (kDecoder_164) for character'u' code 117
} ;

static const sint16 kDecoder_163 [4] = {
  113, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -164, // GOTO state 163 (kDecoder_163) for character'q' code 113
} ;

static const sint16 kDecoder_162 [4] = {
  105, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -163, // GOTO state 162 (kDecoder_162) for character'i' code 105
} ;

static const sint16 kDecoder_161 [4] = {
  120, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -162, // GOTO state 161 (kDecoder_161) for character'x' code 120
} ;

static const sint16 kDecoder_160 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_import // Accept for character't' code 116
} ;

static const sint16 kDecoder_159 [4] = {
  114, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -160, // GOTO state 159 (kDecoder_159) for character'r' code 114
} ;

static const sint16 kDecoder_158 [4] = {
  111, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -159, // GOTO state 158 (kDecoder_158) for character'o' code 111
} ;

static const sint16 kDecoder_157 [4] = {
  112, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -158, // GOTO state 157 (kDecoder_157) for character'p' code 112
} ;

static const sint16 kDecoder_156 [4] = {
  108, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_metamodel // Accept for character'l' code 108
} ;

static const sint16 kDecoder_155 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -156, // GOTO state 155 (kDecoder_155) for character'e' code 101
} ;

static const sint16 kDecoder_154 [4] = {
  100, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -155, // GOTO state 154 (kDecoder_154) for character'd' code 100
} ;

static const sint16 kDecoder_153 [4] = {
  111, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -154, // GOTO state 153 (kDecoder_153) for character'o' code 111
} ;

static const sint16 kDecoder_152 [4] = {
  109, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -153, // GOTO state 152 (kDecoder_152) for character'm' code 109
} ;

static const sint16 kDecoder_151 [11] = {
  97, // First entry
  8, // Entry Count
  -1, // Default response: lexical error
  -152, // GOTO state 151 (kDecoder_151), for character'a' code 97
  -1, // Lexical error for character'b' code 98
  -1, // Lexical error for character'c' code 99
  -1, // Lexical error for character'd' code 100
  -1, // Lexical error for character'e' code 101
  -1, // Lexical error for character'f' code 102
  -1, // Lexical error for character'g' code 103
  -230, // GOTO state 229 (kDecoder_229) for character'h' code 104
} ;

static const sint16 kDecoder_150 [5] = {
  115, // First entry
  2, // Entry Count
  -1, // Default response: lexical error
  -168, // GOTO state 167 (kDecoder_167), for character's' code 115
  -151, // GOTO state 150 (kDecoder_150) for character't' code 116
} ;

static const sint16 kDecoder_149 [4] = {
  103, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_tag // Accept for character'g' code 103
} ;

static const sint16 kDecoder_148 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_rule // Accept for character'e' code 101
} ;

static const sint16 kDecoder_147 [4] = {
  108, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -148, // GOTO state 147 (kDecoder_147) for character'l' code 108
} ;

static const sint16 kDecoder_146 [4] = {
  104, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_switch // Accept for character'h' code 104
} ;

static const sint16 kDecoder_145 [4] = {
  99, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -146, // GOTO state 145 (kDecoder_145) for character'c' code 99
} ;

static const sint16 kDecoder_144 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -145, // GOTO state 144 (kDecoder_144) for character't' code 116
} ;

static const sint16 kDecoder_143 [4] = {
  105, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -144, // GOTO state 143 (kDecoder_143) for character'i' code 105
} ;

static const sint16 kDecoder_142 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_true // Accept for character'e' code 101
} ;

static const sint16 kDecoder_141 [4] = {
  117, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -142, // GOTO state 141 (kDecoder_141) for character'u' code 117
} ;

static const sint16 kDecoder_140 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_false // Accept for character'e' code 101
} ;

static const sint16 kDecoder_139 [4] = {
  115, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -140, // GOTO state 139 (kDecoder_139) for character's' code 115
} ;

static const sint16 kDecoder_138 [4] = {
  108, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -139, // GOTO state 138 (kDecoder_138) for character'l' code 108
} ;

static const sint16 kDecoder_137 [4] = {
  112, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_loop // Accept for character'p' code 112
} ;

static const sint16 kDecoder_136 [12] = {
  103, // First entry
  9, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_log, // Accept for character'g' code 103
  -1, // Lexical error for character'h' code 104
  -1, // Lexical error for character'i' code 105
  -1, // Lexical error for character'j' code 106
  -1, // Lexical error for character'k' code 107
  -1, // Lexical error for character'l' code 108
  -1, // Lexical error for character'm' code 109
  -1, // Lexical error for character'n' code 110
  -137, // GOTO state 136 (kDecoder_136) for character'o' code 111
} ;

static const sint16 kDecoder_135 [18] = {
  97, // First entry
  15, // Entry Count
  -1, // Default response: lexical error
  -206, // GOTO state 205 (kDecoder_205), for character'a' code 97
  -1, // Lexical error for character'b' code 98
  -1, // Lexical error for character'c' code 99
  -1, // Lexical error for character'd' code 100
  -161, // GOTO state 160 (kDecoder_160), for character'e' code 101
  -1, // Lexical error for character'f' code 102
  -1, // Lexical error for character'g' code 103
  -1, // Lexical error for character'h' code 104
  -166, // GOTO state 165 (kDecoder_165), for character'i' code 105
  -1, // Lexical error for character'j' code 106
  -1, // Lexical error for character'k' code 107
  -1, // Lexical error for character'l' code 108
  -1, // Lexical error for character'm' code 109
  -1, // Lexical error for character'n' code 110
  -136, // GOTO state 135 (kDecoder_135) for character'o' code 111
} ;

static const sint16 kDecoder_134 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_not // Accept for character't' code 116
} ;

static const sint16 kDecoder_133 [4] = {
  111, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -134, // GOTO state 133 (kDecoder_133) for character'o' code 111
} ;

static const sint16 kDecoder_132 [4] = {
  107, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_block // Accept for character'k' code 107
} ;

static const sint16 kDecoder_131 [4] = {
  99, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -132, // GOTO state 131 (kDecoder_131) for character'c' code 99
} ;

static const sint16 kDecoder_130 [4] = {
  111, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -131, // GOTO state 130 (kDecoder_130) for character'o' code 111
} ;

static const sint16 kDecoder_129 [4] = {
  108, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -130, // GOTO state 129 (kDecoder_129) for character'l' code 108
} ;

static const sint16 kDecoder_128 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_while // Accept for character'e' code 101
} ;

static const sint16 kDecoder_127 [4] = {
  108, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -128, // GOTO state 127 (kDecoder_127) for character'l' code 108
} ;

static const sint16 kDecoder_126 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_select // Accept for character't' code 116
} ;

static const sint16 kDecoder_125 [4] = {
  99, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -126, // GOTO state 125 (kDecoder_125) for character'c' code 99
} ;

static const sint16 kDecoder_124 [5] = {
  101, // First entry
  2, // Entry Count
  -1, // Default response: lexical error
  -125, // GOTO state 124 (kDecoder_124), for character'e' code 101
  galgas_scanner::galgas_scanner_1_self // Accept for character'f' code 102
} ;

static const sint16 kDecoder_123 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_override // Accept for character'e' code 101
} ;

static const sint16 kDecoder_122 [4] = {
  100, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -123, // GOTO state 122 (kDecoder_122) for character'd' code 100
} ;

static const sint16 kDecoder_121 [4] = {
  105, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -122, // GOTO state 121 (kDecoder_121) for character'i' code 105
} ;

static const sint16 kDecoder_120 [4] = {
  114, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -121, // GOTO state 120 (kDecoder_120) for character'r' code 114
} ;

static const sint16 kDecoder_119 [4] = {
  114, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -120, // GOTO state 119 (kDecoder_119) for character'r' code 114
} ;

static const sint16 kDecoder_118 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -119, // GOTO state 118 (kDecoder_118) for character'e' code 101
} ;

static const sint16 kDecoder_117 [20] = {
  102, // First entry
  17, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_of, // Accept for character'f' code 102
  -1, // Lexical error for character'g' code 103
  -1, // Lexical error for character'h' code 104
  -1, // Lexical error for character'i' code 105
  -1, // Lexical error for character'j' code 106
  -1, // Lexical error for character'k' code 107
  -1, // Lexical error for character'l' code 108
  -1, // Lexical error for character'm' code 109
  galgas_scanner::galgas_scanner_1_on, // Accept for character'n' code 110
  -1, // Lexical error for character'o' code 111
  -196, // GOTO state 195 (kDecoder_195), for character'p' code 112
  -1, // Lexical error for character'q' code 113
  galgas_scanner::galgas_scanner_1_or, // Accept for character'r' code 114
  -1, // Lexical error for character's' code 115
  -1, // Lexical error for character't' code 116
  -1, // Lexical error for character'u' code 117
  -118, // GOTO state 117 (kDecoder_117) for character'v' code 118
} ;

static const sint16 kDecoder_116 [4] = {
  112, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_drop // Accept for character'p' code 112
} ;

static const sint16 kDecoder_115 [4] = {
  111, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -116, // GOTO state 115 (kDecoder_115) for character'o' code 111
} ;

static const sint16 kDecoder_114 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_state // Accept for character'e' code 101
} ;

static const sint16 kDecoder_113 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -114, // GOTO state 113 (kDecoder_113) for character't' code 116
} ;

static const sint16 kDecoder_112 [28] = {
  97, // First entry
  25, // Entry Count
  -1, // Default response: lexical error
  -113, // GOTO state 112 (kDecoder_112), for character'a' code 97
  -1, // Lexical error for character'b' code 98
  -1, // Lexical error for character'c' code 99
  -1, // Lexical error for character'd' code 100
  -1, // Lexical error for character'e' code 101
  -1, // Lexical error for character'f' code 102
  -1, // Lexical error for character'g' code 103
  -1, // Lexical error for character'h' code 104
  -1, // Lexical error for character'i' code 105
  -1, // Lexical error for character'j' code 106
  -1, // Lexical error for character'k' code 107
  -1, // Lexical error for character'l' code 108
  -1, // Lexical error for character'm' code 109
  -1, // Lexical error for character'n' code 110
  -1, // Lexical error for character'o' code 111
  -1, // Lexical error for character'p' code 112
  -1, // Lexical error for character'q' code 113
  -1, // Lexical error for character'r' code 114
  -1, // Lexical error for character's' code 115
  -1, // Lexical error for character't' code 116
  -1, // Lexical error for character'u' code 117
  -1, // Lexical error for character'v' code 118
  -1, // Lexical error for character'w' code 119
  -1, // Lexical error for character'x' code 120
  -209, // GOTO state 208 (kDecoder_208) for character'y' code 121
} ;

static const sint16 kDecoder_111 [4] = {
  114, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_modifier // Accept for character'r' code 114
} ;

static const sint16 kDecoder_110 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -111, // GOTO state 110 (kDecoder_110) for character'e' code 101
} ;

static const sint16 kDecoder_109 [4] = {
  105, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -110, // GOTO state 109 (kDecoder_109) for character'i' code 105
} ;

static const sint16 kDecoder_108 [4] = {
  102, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -109, // GOTO state 108 (kDecoder_108) for character'f' code 102
} ;

static const sint16 kDecoder_107 [4] = {
  105, // First entry
  1, // Entry Count
  galgas_scanner::galgas_scanner_1_mod, // Default response: accept terminal
  -108, // GOTO state 107 (kDecoder_107) for character'i' code 105
} ;

static const sint16 kDecoder_106 [4] = {
  100, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -107, // GOTO state 106 (kDecoder_106) for character'd' code 100
} ;

static const sint16 kDecoder_105 [4] = {
  103, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_warning // Accept for character'g' code 103
} ;

static const sint16 kDecoder_104 [4] = {
  110, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -105, // GOTO state 104 (kDecoder_104) for character'n' code 110
} ;

static const sint16 kDecoder_103 [4] = {
  105, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -104, // GOTO state 103 (kDecoder_103) for character'i' code 105
} ;

static const sint16 kDecoder_102 [4] = {
  110, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -103, // GOTO state 102 (kDecoder_102) for character'n' code 110
} ;

static const sint16 kDecoder_101 [4] = {
  114, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -102, // GOTO state 101 (kDecoder_101) for character'r' code 114
} ;

static const sint16 kDecoder_100 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_parse // Accept for character'e' code 101
} ;

static const sint16 kDecoder_99 [4] = {
  115, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -100, // GOTO state 99 (kDecoder_99) for character's' code 115
} ;

static const sint16 kDecoder_98 [4] = {
  114, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -99, // GOTO state 98 (kDecoder_98) for character'r' code 114
} ;

static const sint16 kDecoder_97 [4] = {
  115, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_class // Accept for character's' code 115
} ;

static const sint16 kDecoder_96 [4] = {
  115, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -97, // GOTO state 96 (kDecoder_96) for character's' code 115
} ;

static const sint16 kDecoder_95 [4] = {
  97, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -96, // GOTO state 95 (kDecoder_95) for character'a' code 97
} ;

static const sint16 kDecoder_94 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_abstract // Accept for character't' code 116
} ;

static const sint16 kDecoder_93 [4] = {
  99, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -94, // GOTO state 93 (kDecoder_93) for character'c' code 99
} ;

static const sint16 kDecoder_92 [4] = {
  97, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -93, // GOTO state 92 (kDecoder_92) for character'a' code 97
} ;

static const sint16 kDecoder_91 [4] = {
  114, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -92, // GOTO state 91 (kDecoder_91) for character'r' code 114
} ;

static const sint16 kDecoder_90 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -91, // GOTO state 90 (kDecoder_90) for character't' code 116
} ;

static const sint16 kDecoder_89 [4] = {
  115, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -90, // GOTO state 89 (kDecoder_89) for character's' code 115
} ;

static const sint16 kDecoder_88 [5] = {
  98, // First entry
  2, // Entry Count
  -1, // Default response: lexical error
  -89, // GOTO state 88 (kDecoder_88), for character'b' code 98
  -186, // GOTO state 185 (kDecoder_185) for character'c' code 99
} ;

static const sint16 kDecoder_87 [4] = {
  110, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_when // Accept for character'n' code 110
} ;

static const sint16 kDecoder_86 [8] = {
  101, // First entry
  5, // Entry Count
  -1, // Default response: lexical error
  -87, // GOTO state 86 (kDecoder_86), for character'e' code 101
  -1, // Lexical error for character'f' code 102
  -1, // Lexical error for character'g' code 103
  -1, // Lexical error for character'h' code 104
  -127, // GOTO state 126 (kDecoder_126) for character'i' code 105
} ;

static const sint16 kDecoder_85 [11] = {
  97, // First entry
  8, // Entry Count
  -1, // Default response: lexical error
  -101, // GOTO state 100 (kDecoder_100), for character'a' code 97
  -1, // Lexical error for character'b' code 98
  -1, // Lexical error for character'c' code 99
  -1, // Lexical error for character'd' code 100
  -1, // Lexical error for character'e' code 101
  -1, // Lexical error for character'f' code 102
  -1, // Lexical error for character'g' code 103
  -86, // GOTO state 85 (kDecoder_85) for character'h' code 104
} ;

static const sint16 kDecoder_84 [4] = {
  100, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_rewind // Accept for character'd' code 100
} ;

static const sint16 kDecoder_83 [4] = {
  110, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -84, // GOTO state 83 (kDecoder_83) for character'n' code 110
} ;

static const sint16 kDecoder_82 [4] = {
  105, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -83, // GOTO state 82 (kDecoder_82) for character'i' code 105
} ;

static const sint16 kDecoder_81 [4] = {
  110, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_then // Accept for character'n' code 110
} ;

static const sint16 kDecoder_80 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -81, // GOTO state 80 (kDecoder_80) for character'e' code 101
} ;

static const sint16 kDecoder_79 [21] = {
  97, // First entry
  18, // Entry Count
  -1, // Default response: lexical error
  -149, // GOTO state 148 (kDecoder_148), for character'a' code 97
  -1, // Lexical error for character'b' code 98
  -1, // Lexical error for character'c' code 99
  -1, // Lexical error for character'd' code 100
  -1, // Lexical error for character'e' code 101
  -1, // Lexical error for character'f' code 102
  -1, // Lexical error for character'g' code 103
  -80, // GOTO state 79 (kDecoder_79), for character'h' code 104
  -1, // Lexical error for character'i' code 105
  -1, // Lexical error for character'j' code 106
  -1, // Lexical error for character'k' code 107
  -1, // Lexical error for character'l' code 108
  -1, // Lexical error for character'm' code 109
  -1, // Lexical error for character'n' code 110
  -1, // Lexical error for character'o' code 111
  -1, // Lexical error for character'p' code 112
  -1, // Lexical error for character'q' code 113
  -141, // GOTO state 140 (kDecoder_140) for character'r' code 114
} ;

static const sint16 kDecoder_78 [4] = {
  102, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_elsif // Accept for character'f' code 102
} ;

static const sint16 kDecoder_77 [8] = {
  101, // First entry
  5, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_else, // Accept for character'e' code 101
  -1, // Lexical error for character'f' code 102
  -1, // Lexical error for character'g' code 103
  -1, // Lexical error for character'h' code 104
  -78, // GOTO state 77 (kDecoder_77) for character'i' code 105
} ;

static const sint16 kDecoder_76 [4] = {
  115, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -77, // GOTO state 76 (kDecoder_76) for character's' code 115
} ;

static const sint16 kDecoder_75 [12] = {
  102, // First entry
  9, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_if, // Accept for character'f' code 102
  -1, // Lexical error for character'g' code 103
  -1, // Lexical error for character'h' code 104
  -1, // Lexical error for character'i' code 105
  -1, // Lexical error for character'j' code 106
  -1, // Lexical error for character'k' code 107
  -1, // Lexical error for character'l' code 108
  -157, // GOTO state 156 (kDecoder_156), for character'm' code 109
  -181, // GOTO state 180 (kDecoder_180) for character'n' code 110
} ;

static const sint16 kDecoder_74 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_here // Accept for character'e' code 101
} ;

static const sint16 kDecoder_73 [4] = {
  114, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -74, // GOTO state 73 (kDecoder_73) for character'r' code 114
} ;

static const sint16 kDecoder_72 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -73, // GOTO state 72 (kDecoder_72) for character'e' code 101
} ;

static const sint16 kDecoder_71 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_default // Accept for character't' code 116
} ;

static const sint16 kDecoder_70 [4] = {
  108, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -71, // GOTO state 70 (kDecoder_70) for character'l' code 108
} ;

static const sint16 kDecoder_69 [4] = {
  117, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -70, // GOTO state 69 (kDecoder_69) for character'u' code 117
} ;

static const sint16 kDecoder_68 [4] = {
  97, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -69, // GOTO state 68 (kDecoder_68) for character'a' code 97
} ;

static const sint16 kDecoder_67 [4] = {
  102, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -68, // GOTO state 67 (kDecoder_67) for character'f' code 102
} ;

static const sint16 kDecoder_66 [17] = {
  101, // First entry
  14, // Entry Count
  -1, // Default response: lexical error
  -67, // GOTO state 66 (kDecoder_66), for character'e' code 101
  -1, // Lexical error for character'f' code 102
  -1, // Lexical error for character'g' code 103
  -1, // Lexical error for character'h' code 104
  -1, // Lexical error for character'i' code 105
  -1, // Lexical error for character'j' code 106
  -1, // Lexical error for character'k' code 107
  -1, // Lexical error for character'l' code 108
  -1, // Lexical error for character'm' code 109
  -1, // Lexical error for character'n' code 110
  galgas_scanner::galgas_scanner_1_do, // Accept for character'o' code 111
  -1, // Lexical error for character'p' code 112
  -1, // Lexical error for character'q' code 113
  -115, // GOTO state 114 (kDecoder_114) for character'r' code 114
} ;

static const sint16 kDecoder_65 [4] = {
  104, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_match // Accept for character'h' code 104
} ;

static const sint16 kDecoder_64 [4] = {
  99, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -65, // GOTO state 64 (kDecoder_64) for character'c' code 99
} ;

static const sint16 kDecoder_63 [8] = {
  112, // First entry
  5, // Entry Count
  -1, // Default response: lexical error
  -225, // GOTO state 224 (kDecoder_224), for character'p' code 112
  -1, // Lexical error for character'q' code 113
  -1, // Lexical error for character'r' code 114
  -1, // Lexical error for character's' code 115
  -64, // GOTO state 63 (kDecoder_63) for character't' code 116
} ;

static const sint16 kDecoder_62 [18] = {
  97, // First entry
  15, // Entry Count
  -1, // Default response: lexical error
  -63, // GOTO state 62 (kDecoder_62), for character'a' code 97
  -1, // Lexical error for character'b' code 98
  -1, // Lexical error for character'c' code 99
  -1, // Lexical error for character'd' code 100
  -150, // GOTO state 149 (kDecoder_149), for character'e' code 101
  -1, // Lexical error for character'f' code 102
  -1, // Lexical error for character'g' code 103
  -1, // Lexical error for character'h' code 104
  -1, // Lexical error for character'i' code 105
  -1, // Lexical error for character'j' code 106
  -1, // Lexical error for character'k' code 107
  -1, // Lexical error for character'l' code 108
  -1, // Lexical error for character'm' code 109
  -1, // Lexical error for character'n' code 110
  -106, // GOTO state 105 (kDecoder_105) for character'o' code 111
} ;

static const sint16 kDecoder_61 [4] = {
  114, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_constructor // Accept for character'r' code 114
} ;

static const sint16 kDecoder_60 [4] = {
  111, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -61, // GOTO state 60 (kDecoder_60) for character'o' code 111
} ;

static const sint16 kDecoder_59 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -60, // GOTO state 59 (kDecoder_59) for character't' code 116
} ;

static const sint16 kDecoder_58 [4] = {
  99, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -59, // GOTO state 58 (kDecoder_58) for character'c' code 99
} ;

static const sint16 kDecoder_57 [24] = {
  97, // First entry
  21, // Entry Count
  -1, // Default response: lexical error
  -217, // GOTO state 216 (kDecoder_216), for character'a' code 97
  -1, // Lexical error for character'b' code 98
  -1, // Lexical error for character'c' code 99
  -1, // Lexical error for character'd' code 100
  -1, // Lexical error for character'e' code 101
  -1, // Lexical error for character'f' code 102
  -1, // Lexical error for character'g' code 103
  -1, // Lexical error for character'h' code 104
  -1, // Lexical error for character'i' code 105
  -1, // Lexical error for character'j' code 106
  -1, // Lexical error for character'k' code 107
  -1, // Lexical error for character'l' code 108
  -1, // Lexical error for character'm' code 109
  -1, // Lexical error for character'n' code 110
  -1, // Lexical error for character'o' code 111
  -1, // Lexical error for character'p' code 112
  -1, // Lexical error for character'q' code 113
  -1, // Lexical error for character'r' code 114
  -1, // Lexical error for character's' code 115
  -1, // Lexical error for character't' code 116
  -58, // GOTO state 57 (kDecoder_57) for character'u' code 117
} ;

static const sint16 kDecoder_56 [4] = {
  114, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -57, // GOTO state 56 (kDecoder_56) for character'r' code 114
} ;

static const sint16 kDecoder_55 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -56, // GOTO state 55 (kDecoder_55) for character't' code 116
} ;

static const sint16 kDecoder_54 [5] = {
  115, // First entry
  2, // Entry Count
  -1, // Default response: lexical error
  -55, // GOTO state 54 (kDecoder_54), for character's' code 115
  -220, // GOTO state 219 (kDecoder_219) for character't' code 116
} ;

static const sint16 kDecoder_53 [4] = {
  104, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_foreach // Accept for character'h' code 104
} ;

static const sint16 kDecoder_52 [4] = {
  99, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -53, // GOTO state 52 (kDecoder_52) for character'c' code 99
} ;

static const sint16 kDecoder_51 [4] = {
  97, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -52, // GOTO state 51 (kDecoder_51) for character'a' code 97
} ;

static const sint16 kDecoder_50 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -51, // GOTO state 50 (kDecoder_50) for character'e' code 101
} ;

static const sint16 kDecoder_49 [4] = {
  114, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -50, // GOTO state 49 (kDecoder_49) for character'r' code 114
} ;

static const sint16 kDecoder_48 [18] = {
  97, // First entry
  15, // Entry Count
  -1, // Default response: lexical error
  -138, // GOTO state 137 (kDecoder_137), for character'a' code 97
  -1, // Lexical error for character'b' code 98
  -1, // Lexical error for character'c' code 99
  -1, // Lexical error for character'd' code 100
  -1, // Lexical error for character'e' code 101
  -1, // Lexical error for character'f' code 102
  -1, // Lexical error for character'g' code 103
  -1, // Lexical error for character'h' code 104
  -1, // Lexical error for character'i' code 105
  -1, // Lexical error for character'j' code 106
  -1, // Lexical error for character'k' code 107
  -1, // Lexical error for character'l' code 108
  -1, // Lexical error for character'm' code 109
  -1, // Lexical error for character'n' code 110
  -49, // GOTO state 48 (kDecoder_48) for character'o' code 111
} ;

static const sint16 kDecoder_47 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_routine // Accept for character'e' code 101
} ;

static const sint16 kDecoder_46 [4] = {
  110, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -47, // GOTO state 46 (kDecoder_46) for character'n' code 110
} ;

static const sint16 kDecoder_45 [4] = {
  105, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -46, // GOTO state 45 (kDecoder_45) for character'i' code 105
} ;

static const sint16 kDecoder_44 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -45, // GOTO state 44 (kDecoder_44) for character't' code 116
} ;

static const sint16 kDecoder_43 [10] = {
  111, // First entry
  7, // Entry Count
  -1, // Default response: lexical error
  -200, // GOTO state 199 (kDecoder_199), for character'o' code 111
  -1, // Lexical error for character'p' code 112
  -1, // Lexical error for character'q' code 113
  -1, // Lexical error for character'r' code 114
  -1, // Lexical error for character's' code 115
  -1, // Lexical error for character't' code 116
  -44, // GOTO state 43 (kDecoder_43) for character'u' code 117
} ;

static const sint16 kDecoder_42 [4] = {
  110, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_extern // Accept for character'n' code 110
} ;

static const sint16 kDecoder_41 [4] = {
  114, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_reader // Accept for character'r' code 114
} ;

static const sint16 kDecoder_40 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -41, // GOTO state 40 (kDecoder_40) for character'e' code 101
} ;

static const sint16 kDecoder_39 [4] = {
  100, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -40, // GOTO state 39 (kDecoder_39) for character'd' code 100
} ;

static const sint16 kDecoder_38 [26] = {
  97, // First entry
  23, // Entry Count
  -1, // Default response: lexical error
  -39, // GOTO state 38 (kDecoder_38), for character'a' code 97
  -1, // Lexical error for character'b' code 98
  -1, // Lexical error for character'c' code 99
  -1, // Lexical error for character'd' code 100
  -1, // Lexical error for character'e' code 101
  -1, // Lexical error for character'f' code 102
  -1, // Lexical error for character'g' code 103
  -1, // Lexical error for character'h' code 104
  -1, // Lexical error for character'i' code 105
  -1, // Lexical error for character'j' code 106
  -1, // Lexical error for character'k' code 107
  -212, // GOTO state 211 (kDecoder_211), for character'l' code 108
  -232, // GOTO state 231 (kDecoder_231), for character'm' code 109
  -1, // Lexical error for character'n' code 110
  -1, // Lexical error for character'o' code 111
  -172, // GOTO state 171 (kDecoder_171), for character'p' code 112
  -1, // Lexical error for character'q' code 113
  -1, // Lexical error for character'r' code 114
  -1, // Lexical error for character's' code 115
  -1, // Lexical error for character't' code 116
  -1, // Lexical error for character'u' code 117
  -1, // Lexical error for character'v' code 118
  -82, // GOTO state 81 (kDecoder_81) for character'w' code 119
} ;

static const sint16 kDecoder_37 [20] = {
  101, // First entry
  17, // Entry Count
  -1, // Default response: lexical error
  -38, // GOTO state 37 (kDecoder_37), for character'e' code 101
  -1, // Lexical error for character'f' code 102
  -1, // Lexical error for character'g' code 103
  -1, // Lexical error for character'h' code 104
  -1, // Lexical error for character'i' code 105
  -1, // Lexical error for character'j' code 106
  -1, // Lexical error for character'k' code 107
  -1, // Lexical error for character'l' code 108
  -1, // Lexical error for character'm' code 109
  -1, // Lexical error for character'n' code 110
  -43, // GOTO state 42 (kDecoder_42), for character'o' code 111
  -1, // Lexical error for character'p' code 112
  -1, // Lexical error for character'q' code 113
  -1, // Lexical error for character'r' code 114
  -1, // Lexical error for character's' code 115
  -1, // Lexical error for character't' code 116
  -147, // GOTO state 146 (kDecoder_146) for character'u' code 117
} ;

static const sint16 kDecoder_36 [4] = {
  115, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_extends // Accept for character's' code 115
} ;

static const sint16 kDecoder_35 [4] = {
  100, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -36, // GOTO state 35 (kDecoder_35) for character'd' code 100
} ;

static const sint16 kDecoder_34 [8] = {
  110, // First entry
  5, // Entry Count
  -1, // Default response: lexical error
  -35, // GOTO state 34 (kDecoder_34), for character'n' code 110
  -1, // Lexical error for character'o' code 111
  -1, // Lexical error for character'p' code 112
  -1, // Lexical error for character'q' code 113
  -42, // GOTO state 41 (kDecoder_41) for character'r' code 114
} ;

static const sint16 kDecoder_33 [4] = {
  115, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_semantics // Accept for character's' code 115
} ;

static const sint16 kDecoder_32 [4] = {
  99, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -33, // GOTO state 32 (kDecoder_32) for character'c' code 99
} ;

static const sint16 kDecoder_31 [4] = {
  105, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -32, // GOTO state 31 (kDecoder_31) for character'i' code 105
} ;

static const sint16 kDecoder_30 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -31, // GOTO state 30 (kDecoder_30) for character't' code 116
} ;

static const sint16 kDecoder_29 [4] = {
  110, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -30, // GOTO state 29 (kDecoder_29) for character'n' code 110
} ;

static const sint16 kDecoder_28 [4] = {
  97, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -29, // GOTO state 28 (kDecoder_28) for character'a' code 97
} ;

static const sint16 kDecoder_27 [17] = {
  97, // First entry
  14, // Entry Count
  -1, // Default response: lexical error
  -178, // GOTO state 177 (kDecoder_177), for character'a' code 97
  -1, // Lexical error for character'b' code 98
  -1, // Lexical error for character'c' code 99
  -1, // Lexical error for character'd' code 100
  -1, // Lexical error for character'e' code 101
  -1, // Lexical error for character'f' code 102
  -1, // Lexical error for character'g' code 103
  -1, // Lexical error for character'h' code 104
  -1, // Lexical error for character'i' code 105
  -1, // Lexical error for character'j' code 106
  -1, // Lexical error for character'k' code 107
  -124, // GOTO state 123 (kDecoder_123), for character'l' code 108
  -28, // GOTO state 27 (kDecoder_27), for character'm' code 109
  -185, // GOTO state 184 (kDecoder_184) for character'n' code 110
} ;

static const sint16 kDecoder_26 [4] = {
  120, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_syntax // Accept for character'x' code 120
} ;

static const sint16 kDecoder_25 [4] = {
  97, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -26, // GOTO state 25 (kDecoder_25) for character'a' code 97
} ;

static const sint16 kDecoder_24 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -25, // GOTO state 24 (kDecoder_24) for character't' code 116
} ;

static const sint16 kDecoder_23 [4] = {
  110, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -24, // GOTO state 23 (kDecoder_23) for character'n' code 110
} ;

static const sint16 kDecoder_22 [24] = {
  101, // First entry
  21, // Entry Count
  -1, // Default response: lexical error
  -27, // GOTO state 26 (kDecoder_26), for character'e' code 101
  -1, // Lexical error for character'f' code 102
  -1, // Lexical error for character'g' code 103
  -1, // Lexical error for character'h' code 104
  -1, // Lexical error for character'i' code 105
  -1, // Lexical error for character'j' code 106
  -1, // Lexical error for character'k' code 107
  -1, // Lexical error for character'l' code 108
  -1, // Lexical error for character'm' code 109
  -1, // Lexical error for character'n' code 110
  -235, // GOTO state 234 (kDecoder_234), for character'o' code 111
  -1, // Lexical error for character'p' code 112
  -1, // Lexical error for character'q' code 113
  -1, // Lexical error for character'r' code 114
  -1, // Lexical error for character's' code 115
  -112, // GOTO state 111 (kDecoder_111), for character't' code 116
  -1, // Lexical error for character'u' code 117
  -1, // Lexical error for character'v' code 118
  -143, // GOTO state 142 (kDecoder_142), for character'w' code 119
  -1, // Lexical error for character'x' code 120
  -23, // GOTO state 22 (kDecoder_22) for character'y' code 121
} ;

static const sint16 kDecoder_21 [4] = {
  109, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_enum // Accept for character'm' code 109
} ;

static const sint16 kDecoder_20 [21] = {
  100, // First entry
  18, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_end, // Accept for character'd' code 100
  -1, // Lexical error for character'e' code 101
  -1, // Lexical error for character'f' code 102
  -1, // Lexical error for character'g' code 103
  -1, // Lexical error for character'h' code 104
  -1, // Lexical error for character'i' code 105
  -1, // Lexical error for character'j' code 106
  -1, // Lexical error for character'k' code 107
  -1, // Lexical error for character'l' code 108
  -1, // Lexical error for character'm' code 109
  -1, // Lexical error for character'n' code 110
  -1, // Lexical error for character'o' code 111
  -1, // Lexical error for character'p' code 112
  -1, // Lexical error for character'q' code 113
  -1, // Lexical error for character'r' code 114
  -1, // Lexical error for character's' code 115
  -1, // Lexical error for character't' code 116
  -21, // GOTO state 20 (kDecoder_20) for character'u' code 117
} ;

static const sint16 kDecoder_19 [4] = {
  109, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_program // Accept for character'm' code 109
} ;

static const sint16 kDecoder_18 [4] = {
  97, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -19, // GOTO state 18 (kDecoder_18) for character'a' code 97
} ;

static const sint16 kDecoder_17 [4] = {
  114, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -18, // GOTO state 17 (kDecoder_17) for character'r' code 114
} ;

static const sint16 kDecoder_16 [4] = {
  103, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -17, // GOTO state 16 (kDecoder_16) for character'g' code 103
} ;

static const sint16 kDecoder_15 [4] = {
  111, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -16, // GOTO state 15 (kDecoder_15) for character'o' code 111
} ;

static const sint16 kDecoder_14 [21] = {
  97, // First entry
  18, // Entry Count
  -1, // Default response: lexical error
  -98, // GOTO state 97 (kDecoder_97), for character'a' code 97
  -1, // Lexical error for character'b' code 98
  -1, // Lexical error for character'c' code 99
  -1, // Lexical error for character'd' code 100
  -1, // Lexical error for character'e' code 101
  -1, // Lexical error for character'f' code 102
  -1, // Lexical error for character'g' code 103
  -1, // Lexical error for character'h' code 104
  -1, // Lexical error for character'i' code 105
  -1, // Lexical error for character'j' code 106
  -1, // Lexical error for character'k' code 107
  -1, // Lexical error for character'l' code 108
  -1, // Lexical error for character'm' code 109
  -1, // Lexical error for character'n' code 110
  -1, // Lexical error for character'o' code 111
  -1, // Lexical error for character'p' code 112
  -1, // Lexical error for character'q' code 113
  -15, // GOTO state 14 (kDecoder_14) for character'r' code 114
} ;

static const sint16 kDecoder_13 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_extract // Accept for character't' code 116
} ;

static const sint16 kDecoder_12 [4] = {
  99, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -13, // GOTO state 12 (kDecoder_12) for character'c' code 99
} ;

static const sint16 kDecoder_11 [4] = {
  97, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -12, // GOTO state 11 (kDecoder_11) for character'a' code 97
} ;

static const sint16 kDecoder_10 [17] = {
  101, // First entry
  14, // Entry Count
  -1, // Default response: lexical error
  -34, // GOTO state 33 (kDecoder_33), for character'e' code 101
  -1, // Lexical error for character'f' code 102
  -1, // Lexical error for character'g' code 103
  -1, // Lexical error for character'h' code 104
  -1, // Lexical error for character'i' code 105
  -1, // Lexical error for character'j' code 106
  -1, // Lexical error for character'k' code 107
  -1, // Lexical error for character'l' code 108
  -1, // Lexical error for character'm' code 109
  -1, // Lexical error for character'n' code 110
  -1, // Lexical error for character'o' code 111
  -1, // Lexical error for character'p' code 112
  -1, // Lexical error for character'q' code 113
  -11, // GOTO state 10 (kDecoder_10) for character'r' code 114
} ;

static const sint16 kDecoder_9 [4] = {
  116, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -10, // GOTO state 9 (kDecoder_9) for character't' code 116
} ;

static const sint16 kDecoder_8 [16] = {
  108, // First entry
  13, // Entry Count
  -1, // Default response: lexical error
  -76, // GOTO state 75 (kDecoder_75), for character'l' code 108
  -1, // Lexical error for character'm' code 109
  -20, // GOTO state 19 (kDecoder_19), for character'n' code 110
  -1, // Lexical error for character'o' code 111
  -1, // Lexical error for character'p' code 112
  -1, // Lexical error for character'q' code 113
  -175, // GOTO state 174 (kDecoder_174), for character'r' code 114
  -1, // Lexical error for character's' code 115
  -1, // Lexical error for character't' code 116
  -1, // Lexical error for character'u' code 117
  -1, // Lexical error for character'v' code 118
  -1, // Lexical error for character'w' code 119
  -9, // GOTO state 8 (kDecoder_8) for character'x' code 120
} ;

static const sint16 kDecoder_7 [4] = {
  101, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  galgas_scanner::galgas_scanner_1_compile // Accept for character'e' code 101
} ;

static const sint16 kDecoder_6 [4] = {
  108, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -7, // GOTO state 6 (kDecoder_6) for character'l' code 108
} ;

static const sint16 kDecoder_5 [4] = {
  105, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -6, // GOTO state 5 (kDecoder_5) for character'i' code 105
} ;

static const sint16 kDecoder_4 [4] = {
  112, // First entry
  1, // Entry Count
  -1, // Default response: lexical error
  -5, // GOTO state 4 (kDecoder_4) for character'p' code 112
} ;

static const sint16 kDecoder_3 [5] = {
  109, // First entry
  2, // Entry Count
  -1, // Default response: lexical error
  -4, // GOTO state 3 (kDecoder_3), for character'm' code 109
  -54, // GOTO state 53 (kDecoder_53) for character'n' code 110
} ;

static const sint16 kDecoder_2 [18] = {
  97, // First entry
  15, // Entry Count
  -1, // Default response: lexical error
  -223, // GOTO state 222 (kDecoder_222), for character'a' code 97
  -1, // Lexical error for character'b' code 98
  -1, // Lexical error for character'c' code 99
  -1, // Lexical error for character'd' code 100
  -1, // Lexical error for character'e' code 101
  -1, // Lexical error for character'f' code 102
  -1, // Lexical error for character'g' code 103
  -1, // Lexical error for character'h' code 104
  -1, // Lexical error for character'i' code 105
  -1, // Lexical error for character'j' code 106
  -1, // Lexical error for character'k' code 107
  -95, // GOTO state 94 (kDecoder_94), for character'l' code 108
  -1, // Lexical error for character'm' code 109
  -1, // Lexical error for character'n' code 110
  -3, // GOTO state 2 (kDecoder_2) for character'o' code 111
} ;

static const sint16 kDecoder_1 [97] = {
  33, // First entry
  94, // Entry Count
  -1, // Default response: lexical error
  -248, // GOTO state 247 (kDecoder_247), for character'!' code 33
  -1, // Lexical error for character'"' code 34
  -1, // Lexical error for character'#' code 35
  -1, // Lexical error for character'$' code 36
  -1, // Lexical error for character'%' code 37
  galgas_scanner::galgas_scanner_1__26, // Accept for character'&' code 38
  -1, // Lexical error for character''' code 39
  galgas_scanner::galgas_scanner_1__28, // Accept for character'(' code 40
  galgas_scanner::galgas_scanner_1__29, // Accept for character')' code 41
  galgas_scanner::galgas_scanner_1__2A, // Accept for character'*' code 42
  -247, // GOTO state 246 (kDecoder_246), for character'+' code 43
  galgas_scanner::galgas_scanner_1__2C, // Accept for character',' code 44
  -243, // GOTO state 242 (kDecoder_242), for character'-' code 45
  -1, // Lexical error for character'.' code 46
  galgas_scanner::galgas_scanner_1__2F, // Accept for character'/' code 47
  -1, // Lexical error for character'0' code 48
  -1, // Lexical error for character'1' code 49
  -1, // Lexical error for character'2' code 50
  -1, // Lexical error for character'3' code 51
  -1, // Lexical error for character'4' code 52
  -1, // Lexical error for character'5' code 53
  -1, // Lexical error for character'6' code 54
  -1, // Lexical error for character'7' code 55
  -1, // Lexical error for character'8' code 56
  -1, // Lexical error for character'9' code 57
  -244, // GOTO state 243 (kDecoder_243), for character':' code 58
  galgas_scanner::galgas_scanner_1__3B, // Accept for character';' code 59
  -1, // Lexical error for character'<' code 60
  -245, // GOTO state 244 (kDecoder_244), for character'=' code 61
  -249, // GOTO state 248 (kDecoder_248), for character'>' code 62
  -246, // GOTO state 245 (kDecoder_245), for character'?' code 63
  -1, // Lexical error for character'@' code 64
  -1, // Lexical error for character'A' code 65
  -1, // Lexical error for character'B' code 66
  -1, // Lexical error for character'C' code 67
  -1, // Lexical error for character'D' code 68
  -1, // Lexical error for character'E' code 69
  -1, // Lexical error for character'F' code 70
  -1, // Lexical error for character'G' code 71
  -1, // Lexical error for character'H' code 72
  -1, // Lexical error for character'I' code 73
  -1, // Lexical error for character'J' code 74
  -1, // Lexical error for character'K' code 75
  -1, // Lexical error for character'L' code 76
  -1, // Lexical error for character'M' code 77
  -1, // Lexical error for character'N' code 78
  -1, // Lexical error for character'O' code 79
  -1, // Lexical error for character'P' code 80
  -1, // Lexical error for character'Q' code 81
  -1, // Lexical error for character'R' code 82
  -1, // Lexical error for character'S' code 83
  -1, // Lexical error for character'T' code 84
  -1, // Lexical error for character'U' code 85
  -1, // Lexical error for character'V' code 86
  -1, // Lexical error for character'W' code 87
  -1, // Lexical error for character'X' code 88
  -1, // Lexical error for character'Y' code 89
  -1, // Lexical error for character'Z' code 90
  galgas_scanner::galgas_scanner_1__5B, // Accept for character'[' code 91
  -1, // Lexical error for character'\' code 92
  galgas_scanner::galgas_scanner_1__5D, // Accept for character']' code 93
  galgas_scanner::galgas_scanner_1__5E, // Accept for character'^' code 94
  -1, // Lexical error for character'_' code 95
  -1, // Lexical error for character'`' code 96
  -88, // GOTO state 87 (kDecoder_87), for character'a' code 97
  -129, // GOTO state 128 (kDecoder_128), for character'b' code 98
  -2, // GOTO state 1 (kDecoder_1), for character'c' code 99
  -66, // GOTO state 65 (kDecoder_65), for character'd' code 100
  -8, // GOTO state 7 (kDecoder_7), for character'e' code 101
  -48, // GOTO state 47 (kDecoder_47), for character'f' code 102
  -190, // GOTO state 189 (kDecoder_189), for character'g' code 103
  -72, // GOTO state 71 (kDecoder_71), for character'h' code 104
  -75, // GOTO state 74 (kDecoder_74), for character'i' code 105
  -1, // Lexical error for character'j' code 106
  -1, // Lexical error for character'k' code 107
  -135, // GOTO state 134 (kDecoder_134), for character'l' code 108
  -62, // GOTO state 61 (kDecoder_61), for character'm' code 109
  -133, // GOTO state 132 (kDecoder_132), for character'n' code 110
  -117, // GOTO state 116 (kDecoder_116), for character'o' code 111
  -14, // GOTO state 13 (kDecoder_13), for character'p' code 112
  -1, // Lexical error for character'q' code 113
  -37, // GOTO state 36 (kDecoder_36), for character'r' code 114
  -22, // GOTO state 21 (kDecoder_21), for character's' code 115
  -79, // GOTO state 78 (kDecoder_78), for character't' code 116
  -201, // GOTO state 200 (kDecoder_200), for character'u' code 117
  -1, // Lexical error for character'v' code 118
  -85, // GOTO state 84 (kDecoder_84), for character'w' code 119
  -1, // Lexical error for character'x' code 120
  -1, // Lexical error for character'y' code 121
  -1, // Lexical error for character'z' code 122
  galgas_scanner::galgas_scanner_1__7B, // Accept for character'{' code 123
  galgas_scanner::galgas_scanner_1__7C, // Accept for character'|' code 124
  galgas_scanner::galgas_scanner_1__7D, // Accept for character'}' code 125
  galgas_scanner::galgas_scanner_1__7E // Accept for character'~' code 126
} ;

//---------------------------------------------------------------------------*

/* static */ const sint16 * gDecoderEntries [249] = {
 kDecoder_1, kDecoder_2, kDecoder_3, kDecoder_4, kDecoder_5,
 kDecoder_6, kDecoder_7, kDecoder_8, kDecoder_9, kDecoder_10,
 kDecoder_11, kDecoder_12, kDecoder_13, kDecoder_14, kDecoder_15,
 kDecoder_16, kDecoder_17, kDecoder_18, kDecoder_19, kDecoder_20,
 kDecoder_21, kDecoder_22, kDecoder_23, kDecoder_24, kDecoder_25,
 kDecoder_26, kDecoder_27, kDecoder_28, kDecoder_29, kDecoder_30,
 kDecoder_31, kDecoder_32, kDecoder_33, kDecoder_34, kDecoder_35,
 kDecoder_36, kDecoder_37, kDecoder_38, kDecoder_39, kDecoder_40,
 kDecoder_41, kDecoder_42, kDecoder_43, kDecoder_44, kDecoder_45,
 kDecoder_46, kDecoder_47, kDecoder_48, kDecoder_49, kDecoder_50,
 kDecoder_51, kDecoder_52, kDecoder_53, kDecoder_54, kDecoder_55,
 kDecoder_56, kDecoder_57, kDecoder_58, kDecoder_59, kDecoder_60,
 kDecoder_61, kDecoder_62, kDecoder_63, kDecoder_64, kDecoder_65,
 kDecoder_66, kDecoder_67, kDecoder_68, kDecoder_69, kDecoder_70,
 kDecoder_71, kDecoder_72, kDecoder_73, kDecoder_74, kDecoder_75,
 kDecoder_76, kDecoder_77, kDecoder_78, kDecoder_79, kDecoder_80,
 kDecoder_81, kDecoder_82, kDecoder_83, kDecoder_84, kDecoder_85,
 kDecoder_86, kDecoder_87, kDecoder_88, kDecoder_89, kDecoder_90,
 kDecoder_91, kDecoder_92, kDecoder_93, kDecoder_94, kDecoder_95,
 kDecoder_96, kDecoder_97, kDecoder_98, kDecoder_99, kDecoder_100,
 kDecoder_101, kDecoder_102, kDecoder_103, kDecoder_104, kDecoder_105,
 kDecoder_106, kDecoder_107, kDecoder_108, kDecoder_109, kDecoder_110,
 kDecoder_111, kDecoder_112, kDecoder_113, kDecoder_114, kDecoder_115,
 kDecoder_116, kDecoder_117, kDecoder_118, kDecoder_119, kDecoder_120,
 kDecoder_121, kDecoder_122, kDecoder_123, kDecoder_124, kDecoder_125,
 kDecoder_126, kDecoder_127, kDecoder_128, kDecoder_129, kDecoder_130,
 kDecoder_131, kDecoder_132, kDecoder_133, kDecoder_134, kDecoder_135,
 kDecoder_136, kDecoder_137, kDecoder_138, kDecoder_139, kDecoder_140,
 kDecoder_141, kDecoder_142, kDecoder_143, kDecoder_144, kDecoder_145,
 kDecoder_146, kDecoder_147, kDecoder_148, kDecoder_149, kDecoder_150,
 kDecoder_151, kDecoder_152, kDecoder_153, kDecoder_154, kDecoder_155,
 kDecoder_156, kDecoder_157, kDecoder_158, kDecoder_159, kDecoder_160,
 kDecoder_161, kDecoder_162, kDecoder_163, kDecoder_164, kDecoder_165,
 kDecoder_166, kDecoder_167, kDecoder_168, kDecoder_169, kDecoder_170,
 kDecoder_171, kDecoder_172, kDecoder_173, kDecoder_174, kDecoder_175,
 kDecoder_176, kDecoder_177, kDecoder_178, kDecoder_179, kDecoder_180,
 kDecoder_181, kDecoder_182, kDecoder_183, kDecoder_184, kDecoder_185,
 kDecoder_186, kDecoder_187, kDecoder_188, kDecoder_189, kDecoder_190,
 kDecoder_191, kDecoder_192, kDecoder_193, kDecoder_194, kDecoder_195,
 kDecoder_196, kDecoder_197, kDecoder_198, kDecoder_199, kDecoder_200,
 kDecoder_201, kDecoder_202, kDecoder_203, kDecoder_204, kDecoder_205,
 kDecoder_206, kDecoder_207, kDecoder_208, kDecoder_209, kDecoder_210,
 kDecoder_211, kDecoder_212, kDecoder_213, kDecoder_214, kDecoder_215,
 kDecoder_216, kDecoder_217, kDecoder_218, kDecoder_219, kDecoder_220,
 kDecoder_221, kDecoder_222, kDecoder_223, kDecoder_224, kDecoder_225,
 kDecoder_226, kDecoder_227, kDecoder_228, kDecoder_229, kDecoder_230,
 kDecoder_231, kDecoder_232, kDecoder_233, kDecoder_234, kDecoder_235,
 kDecoder_236, kDecoder_237, kDecoder_238, kDecoder_239, kDecoder_240,
 kDecoder_241, kDecoder_242, kDecoder_243, kDecoder_244, kDecoder_245,
 kDecoder_246, kDecoder_247, kDecoder_248, kDecoder_249} ;

//---------------------------------------------------------------------------*

/* static */ const sint32 gDecoderSize = 249 ;

//---------------------------------------------------------------------------*

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*

