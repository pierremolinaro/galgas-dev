//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'galgas_scanner.cpp'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      july 19th, 2008, at 14h33'51"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <ctype.h>
#include <string.h>

#include "utilities/MF_MemoryControl.h"
#include "galgas_scanner.h"

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFileName ().cString (), lineNumber ()
  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE
#else
  #define LINE_AND_SOURCE_FILE
  #define COMMA_LINE_AND_SOURCE_FILE
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                               Constructors                                *
//                                                                           *
//---------------------------------------------------------------------------*

cTokenFor_galgas_scanner::cTokenFor_galgas_scanner (void) :
identifierString (),
uint32value (),
sint32value (),
uint64value (),
sint64value (),
charValue (),
tokenString (),
floatValue () {
}

//---------------------------------------------------------------------------*

galgas_scanner::
galgas_scanner (C_galgas_io * inParametersPtr,
                const C_String & inSourceFileName
                COMMA_LOCATION_ARGS) :
C_Lexique (inParametersPtr, inSourceFileName COMMA_THERE) {
}

//---------------------------------------------------------------------------*

galgas_scanner::
galgas_scanner (C_galgas_io * inParametersPtr,
                const C_String & inSourceString,
                const C_String & inStringForError
                COMMA_LOCATION_ARGS) :
C_Lexique (inParametersPtr, inSourceString, inStringForError COMMA_THERE) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Lexical error message list                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Message 0
static const char * gErrorMessage_0 = "decimal number too large" ;
//--- Message 1
static const char * gErrorMessage_1 = "invalid float number" ;
//--- Message 2
static const char * gErrorMessage_2 = "internal error" ;
//--- Message 3
static const char * gErrorMessage_3 = "in a type name, a letter should follow the '@' character" ;
//--- Message 4
static const char * gErrorMessage_4 = "incorrect literal character" ;
//--- Message 5
static const char * gErrorMessage_5 = "ASCII code > 255" ;
//--- Message 6
static const char * gErrorMessage_6 = "incorrect terminal start" ;
//--- Message 7
static const char * gErrorMessage_7 = "terminal does not end with '$'" ;
//--- Message 8
static const char * gErrorMessage_8 = "string does not end with '\"'" ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Syntax error messages                            *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Syntax error message for terminal '$identifier$' :
static const char * gSyntaxErrorMessage_identifier = "an identifier" ;

//--- Syntax error message for terminal '$abstract$' :
static const char * gSyntaxErrorMessage_abstract = "the 'abstract' keyword" ;

//--- Syntax error message for terminal '$after$' :
static const char * gSyntaxErrorMessage_after = "the 'after' keyword" ;

//--- Syntax error message for terminal '$before$' :
static const char * gSyntaxErrorMessage_before = "the 'before' keyword" ;

//--- Syntax error message for terminal '$between$' :
static const char * gSyntaxErrorMessage_between = "the 'between' keyword" ;

//--- Syntax error message for terminal '$block$' :
static const char * gSyntaxErrorMessage_block = "the 'block' keyword" ;

//--- Syntax error message for terminal '$cast$' :
static const char * gSyntaxErrorMessage_cast = "the 'cast' keyword" ;

//--- Syntax error message for terminal '$class$' :
static const char * gSyntaxErrorMessage_class = "the 'class' keyword" ;

//--- Syntax error message for terminal '$compile$' :
static const char * gSyntaxErrorMessage_compile = "the 'compile' keyword" ;

//--- Syntax error message for terminal '$const$' :
static const char * gSyntaxErrorMessage_const = "the 'const' keyword" ;

//--- Syntax error message for terminal '$constructor$' :
static const char * gSyntaxErrorMessage_constructor = "the 'constructor' keyword" ;

//--- Syntax error message for terminal '$default$' :
static const char * gSyntaxErrorMessage_default = "the 'default' keyword" ;

//--- Syntax error message for terminal '$description$' :
static const char * gSyntaxErrorMessage_description = "the 'description' keyword" ;

//--- Syntax error message for terminal '$do$' :
static const char * gSyntaxErrorMessage_do = "the 'do' keyword" ;

//--- Syntax error message for terminal '$domain$' :
static const char * gSyntaxErrorMessage_domain = "the 'domain' keyword" ;

//--- Syntax error message for terminal '$drop$' :
static const char * gSyntaxErrorMessage_drop = "the 'drop' keyword" ;

//--- Syntax error message for terminal '$else$' :
static const char * gSyntaxErrorMessage_else = "the 'else' keyword" ;

//--- Syntax error message for terminal '$elsif$' :
static const char * gSyntaxErrorMessage_elsif = "the 'elsif' keyword" ;

//--- Syntax error message for terminal '$end$' :
static const char * gSyntaxErrorMessage_end = "the 'end' keyword" ;

//--- Syntax error message for terminal '$entity$' :
static const char * gSyntaxErrorMessage_entity = "the 'entity' keyword" ;

//--- Syntax error message for terminal '$enum$' :
static const char * gSyntaxErrorMessage_enum = "the 'enum' keyword" ;

//--- Syntax error message for terminal '$error$' :
static const char * gSyntaxErrorMessage_error = "the 'error' keyword" ;

//--- Syntax error message for terminal '$extends$' :
static const char * gSyntaxErrorMessage_extends = "the 'extends' keyword" ;

//--- Syntax error message for terminal '$extern$' :
static const char * gSyntaxErrorMessage_extern = "the 'extern' keyword" ;

//--- Syntax error message for terminal '$extract$' :
static const char * gSyntaxErrorMessage_extract = "the 'extract' keyword" ;

//--- Syntax error message for terminal '$false$' :
static const char * gSyntaxErrorMessage_false = "the 'false' keyword" ;

//--- Syntax error message for terminal '$filewrapper$' :
static const char * gSyntaxErrorMessage_filewrapper = "the 'filewrapper' keyword" ;

//--- Syntax error message for terminal '$foreach$' :
static const char * gSyntaxErrorMessage_foreach = "the 'foreach' keyword" ;

//--- Syntax error message for terminal '$grammar$' :
static const char * gSyntaxErrorMessage_grammar = "the 'grammar' keyword" ;

//--- Syntax error message for terminal '$gui$' :
static const char * gSyntaxErrorMessage_gui = "the 'gui' keyword" ;

//--- Syntax error message for terminal '$here$' :
static const char * gSyntaxErrorMessage_here = "the 'here' keyword" ;

//--- Syntax error message for terminal '$if$' :
static const char * gSyntaxErrorMessage_if = "the 'if' keyword" ;

//--- Syntax error message for terminal '$import$' :
static const char * gSyntaxErrorMessage_import = "the 'import' keyword" ;

//--- Syntax error message for terminal '$import__$' :
static const char * gSyntaxErrorMessage_import_5F_5F = "the 'import__' keyword" ;

//--- Syntax error message for terminal '$in$' :
static const char * gSyntaxErrorMessage_in = "the 'in' keyword" ;

//--- Syntax error message for terminal '$insert$' :
static const char * gSyntaxErrorMessage_insert = "the 'insert' keyword" ;

//--- Syntax error message for terminal '$label$' :
static const char * gSyntaxErrorMessage_label = "the 'label' keyword" ;

//--- Syntax error message for terminal '$lexique$' :
static const char * gSyntaxErrorMessage_lexique = "the 'lexique' keyword" ;

//--- Syntax error message for terminal '$list$' :
static const char * gSyntaxErrorMessage_list = "the 'list' keyword" ;

//--- Syntax error message for terminal '$listmap$' :
static const char * gSyntaxErrorMessage_listmap = "the 'listmap' keyword" ;

//--- Syntax error message for terminal '$log$' :
static const char * gSyntaxErrorMessage_log = "the 'log' keyword" ;

//--- Syntax error message for terminal '$loop$' :
static const char * gSyntaxErrorMessage_loop = "the 'loop' keyword" ;

//--- Syntax error message for terminal '$map$' :
static const char * gSyntaxErrorMessage_map = "the 'map' keyword" ;

//--- Syntax error message for terminal '$mapindex$' :
static const char * gSyntaxErrorMessage_mapindex = "the 'mapindex' keyword" ;

//--- Syntax error message for terminal '$match$' :
static const char * gSyntaxErrorMessage_match = "the 'match' keyword" ;

//--- Syntax error message for terminal '$message$' :
static const char * gSyntaxErrorMessage_message = "the 'message' keyword" ;

//--- Syntax error message for terminal '$method$' :
static const char * gSyntaxErrorMessage_method = "the 'method' keyword" ;

//--- Syntax error message for terminal '$mod$' :
static const char * gSyntaxErrorMessage_mod = "the 'mod' keyword" ;

//--- Syntax error message for terminal '$modifier$' :
static const char * gSyntaxErrorMessage_modifier = "the 'modifier' keyword" ;

//--- Syntax error message for terminal '$nonterminal$' :
static const char * gSyntaxErrorMessage_nonterminal = "the 'nonterminal' keyword" ;

//--- Syntax error message for terminal '$not$' :
static const char * gSyntaxErrorMessage_not = "the 'not' keyword" ;

//--- Syntax error message for terminal '$on$' :
static const char * gSyntaxErrorMessage_on = "the 'on' keyword" ;

//--- Syntax error message for terminal '$once$' :
static const char * gSyntaxErrorMessage_once = "the 'once' keyword" ;

//--- Syntax error message for terminal '$operator$' :
static const char * gSyntaxErrorMessage_operator = "the 'operator' keyword" ;

//--- Syntax error message for terminal '$option$' :
static const char * gSyntaxErrorMessage_option = "the 'option' keyword" ;

//--- Syntax error message for terminal '$or$' :
static const char * gSyntaxErrorMessage_or = "the 'or' keyword" ;

//--- Syntax error message for terminal '$override$' :
static const char * gSyntaxErrorMessage_override = "the 'override' keyword" ;

//--- Syntax error message for terminal '$parse$' :
static const char * gSyntaxErrorMessage_parse = "the 'parse' keyword" ;

//--- Syntax error message for terminal '$program$' :
static const char * gSyntaxErrorMessage_program = "the 'program' keyword" ;

//--- Syntax error message for terminal '$reader$' :
static const char * gSyntaxErrorMessage_reader = "the 'reader' keyword" ;

//--- Syntax error message for terminal '$remove$' :
static const char * gSyntaxErrorMessage_remove = "the 'remove' keyword" ;

//--- Syntax error message for terminal '$replace$' :
static const char * gSyntaxErrorMessage_replace = "the 'replace' keyword" ;

//--- Syntax error message for terminal '$repeat$' :
static const char * gSyntaxErrorMessage_repeat = "the 'repeat' keyword" ;

//--- Syntax error message for terminal '$rewind$' :
static const char * gSyntaxErrorMessage_rewind = "the 'rewind' keyword" ;

//--- Syntax error message for terminal '$root$' :
static const char * gSyntaxErrorMessage_root = "the 'root' keyword" ;

//--- Syntax error message for terminal '$routine$' :
static const char * gSyntaxErrorMessage_routine = "the 'routine' keyword" ;

//--- Syntax error message for terminal '$rule$' :
static const char * gSyntaxErrorMessage_rule = "the 'rule' keyword" ;

//--- Syntax error message for terminal '$search$' :
static const char * gSyntaxErrorMessage_search = "the 'search' keyword" ;

//--- Syntax error message for terminal '$select$' :
static const char * gSyntaxErrorMessage_select = "the 'select' keyword" ;

//--- Syntax error message for terminal '$self$' :
static const char * gSyntaxErrorMessage_self = "the 'self' keyword" ;

//--- Syntax error message for terminal '$semantics$' :
static const char * gSyntaxErrorMessage_semantics = "the 'semantics' keyword" ;

//--- Syntax error message for terminal '$send$' :
static const char * gSyntaxErrorMessage_send = "the 'send' keyword" ;

//--- Syntax error message for terminal '$sortedlist$' :
static const char * gSyntaxErrorMessage_sortedlist = "the 'sortedlist' keyword" ;

//--- Syntax error message for terminal '$state$' :
static const char * gSyntaxErrorMessage_state = "the 'state' keyword" ;

//--- Syntax error message for terminal '$struct$' :
static const char * gSyntaxErrorMessage_struct = "the 'struct' keyword" ;

//--- Syntax error message for terminal '$style$' :
static const char * gSyntaxErrorMessage_style = "the 'style' keyword" ;

//--- Syntax error message for terminal '$switch$' :
static const char * gSyntaxErrorMessage_switch = "the 'switch' keyword" ;

//--- Syntax error message for terminal '$syntax$' :
static const char * gSyntaxErrorMessage_syntax = "the 'syntax' keyword" ;

//--- Syntax error message for terminal '$tag$' :
static const char * gSyntaxErrorMessage_tag = "the 'tag' keyword" ;

//--- Syntax error message for terminal '$template$' :
static const char * gSyntaxErrorMessage_template = "the 'template' keyword" ;

//--- Syntax error message for terminal '$then$' :
static const char * gSyntaxErrorMessage_then = "the 'then' keyword" ;

//--- Syntax error message for terminal '$true$' :
static const char * gSyntaxErrorMessage_true = "the 'true' keyword" ;

//--- Syntax error message for terminal '$unused$' :
static const char * gSyntaxErrorMessage_unused = "the 'unused' keyword" ;

//--- Syntax error message for terminal '$warning$' :
static const char * gSyntaxErrorMessage_warning = "the 'warning' keyword" ;

//--- Syntax error message for terminal '$when$' :
static const char * gSyntaxErrorMessage_when = "the 'when' keyword" ;

//--- Syntax error message for terminal '$while$' :
static const char * gSyntaxErrorMessage_while = "the 'while' keyword" ;

//--- Syntax error message for terminal '$xmlmapping$' :
static const char * gSyntaxErrorMessage_xmlmapping = "the 'xmlmapping' keyword" ;

//--- Syntax error message for terminal '$xmlparse$' :
static const char * gSyntaxErrorMessage_xmlparse = "the 'xmlparse' keyword" ;

//--- Syntax error message for terminal '$literal_double$' :
static const char * gSyntaxErrorMessage_literal_5Fdouble = "a float number" ;

//--- Syntax error message for terminal '$unsigned_literal_integer$' :
static const char * gSyntaxErrorMessage_unsigned_5Fliteral_5Finteger = "a 32-bit unsigned decimal number" ;

//--- Syntax error message for terminal '$signed_literal_integer$' :
static const char * gSyntaxErrorMessage_signed_5Fliteral_5Finteger = "a 32-bit signed decimal number" ;

//--- Syntax error message for terminal '$unsigned_literal_integer64$' :
static const char * gSyntaxErrorMessage_unsigned_5Fliteral_5Finteger64 = "a 64-bit unsigned decimal number" ;

//--- Syntax error message for terminal '$signed_literal_integer64$' :
static const char * gSyntaxErrorMessage_signed_5Fliteral_5Finteger64 = "a 64-bit signed decimal number" ;

//--- Syntax error message for terminal '$.$' :
static const char * gSyntaxErrorMessage__2E = "the '.' delimitor" ;

//--- Syntax error message for terminal '$.=$' :
static const char * gSyntaxErrorMessage__2E_3D = "the '.=' delimitor" ;

//--- Syntax error message for terminal '$...$' :
static const char * gSyntaxErrorMessage__2E_2E_2E = "the '...' delimitor" ;

//--- Syntax error message for terminal '$type_name$' :
static const char * gSyntaxErrorMessage_type_5Fname = "a type name (@...)" ;

//--- Syntax error message for terminal '$literal_char$' :
static const char * gSyntaxErrorMessage_literal_5Fchar = "a character constant" ;

//--- Syntax error message for terminal '$terminal$' :
static const char * gSyntaxErrorMessage_terminal = "a terminal symbol ($...$)" ;

//--- Syntax error message for terminal '$*$' :
static const char * gSyntaxErrorMessage__2A = "the '*' delimitor" ;

//--- Syntax error message for terminal '$|$' :
static const char * gSyntaxErrorMessage__7C = "the '|' delimitor" ;

//--- Syntax error message for terminal '$,$' :
static const char * gSyntaxErrorMessage__2C = "the ',' delimitor" ;

//--- Syntax error message for terminal '$+$' :
static const char * gSyntaxErrorMessage__2B = "the '+' delimitor" ;

//--- Syntax error message for terminal '$--$' :
static const char * gSyntaxErrorMessage__2D_2D = "the '--' delimitor" ;

//--- Syntax error message for terminal '$::$' :
static const char * gSyntaxErrorMessage__3A_3A = "the '::' delimitor" ;

//--- Syntax error message for terminal '$>$' :
static const char * gSyntaxErrorMessage__3E = "the '>' delimitor" ;

//--- Syntax error message for terminal '$;$' :
static const char * gSyntaxErrorMessage__3B = "the ';' delimitor" ;

//--- Syntax error message for terminal '$:$' :
static const char * gSyntaxErrorMessage__3A = "the ':' delimitor" ;

//--- Syntax error message for terminal '$-$' :
static const char * gSyntaxErrorMessage__2D = "the '-' delimitor" ;

//--- Syntax error message for terminal '$($' :
static const char * gSyntaxErrorMessage__28 = "the '(' delimitor" ;

//--- Syntax error message for terminal '$)$' :
static const char * gSyntaxErrorMessage__29 = "the ')' delimitor" ;

//--- Syntax error message for terminal '$->$' :
static const char * gSyntaxErrorMessage__2D_3E = "the '->' delimitor" ;

//--- Syntax error message for terminal '$?$' :
static const char * gSyntaxErrorMessage__3F = "the '\?' delimitor" ;

//--- Syntax error message for terminal '$==$' :
static const char * gSyntaxErrorMessage__3D_3D = "the '==' delimitor" ;

//--- Syntax error message for terminal '$??$' :
static const char * gSyntaxErrorMessage__3F_3F = "the '\?\?' delimitor" ;

//--- Syntax error message for terminal '$!$' :
static const char * gSyntaxErrorMessage__21 = "the '!' delimitor" ;

//--- Syntax error message for terminal '$:=$' :
static const char * gSyntaxErrorMessage__3A_3D = "the ':=' delimitor" ;

//--- Syntax error message for terminal '$++$' :
static const char * gSyntaxErrorMessage__2B_2B = "the '++' delimitor" ;

//--- Syntax error message for terminal '$[$' :
static const char * gSyntaxErrorMessage__5B = "the '[' delimitor" ;

//--- Syntax error message for terminal '$]$' :
static const char * gSyntaxErrorMessage__5D = "the ']' delimitor" ;

//--- Syntax error message for terminal '$+=$' :
static const char * gSyntaxErrorMessage__2B_3D = "the '+=' delimitor" ;

//--- Syntax error message for terminal '$?!$' :
static const char * gSyntaxErrorMessage__3F_21 = "the '\?!' delimitor" ;

//--- Syntax error message for terminal '$!?$' :
static const char * gSyntaxErrorMessage__21_3F = "the '!\?' delimitor" ;

//--- Syntax error message for terminal '$/$' :
static const char * gSyntaxErrorMessage__2F = "the '/' delimitor" ;

//--- Syntax error message for terminal '$!=$' :
static const char * gSyntaxErrorMessage__21_3D = "the '!=' delimitor" ;

//--- Syntax error message for terminal '$>=$' :
static const char * gSyntaxErrorMessage__3E_3D = "the '>=' delimitor" ;

//--- Syntax error message for terminal '$&$' :
static const char * gSyntaxErrorMessage__26 = "the '&' delimitor" ;

//--- Syntax error message for terminal '${$' :
static const char * gSyntaxErrorMessage__7B = "the '{' delimitor" ;

//--- Syntax error message for terminal '$}$' :
static const char * gSyntaxErrorMessage__7D = "the '}' delimitor" ;

//--- Syntax error message for terminal '$-=$' :
static const char * gSyntaxErrorMessage__2D_3D = "the '-=' delimitor" ;

//--- Syntax error message for terminal '$^$' :
static const char * gSyntaxErrorMessage__5E = "the '^' delimitor" ;

//--- Syntax error message for terminal '$>>$' :
static const char * gSyntaxErrorMessage__3E_3E = "the '>>' delimitor" ;

//--- Syntax error message for terminal '$~$' :
static const char * gSyntaxErrorMessage__7E = "the '~' delimitor" ;

//--- Syntax error message for terminal '$<-$' :
static const char * gSyntaxErrorMessage__3C_2D = "the '<-' delimitor" ;

//--- Syntax error message for terminal '$<$' :
static const char * gSyntaxErrorMessage__3C = "the '<' delimitor" ;

//--- Syntax error message for terminal '$<->$' :
static const char * gSyntaxErrorMessage__3C_2D_3E = "the '<->' delimitor" ;

//--- Syntax error message for terminal '$<=$' :
static const char * gSyntaxErrorMessage__3C_3D = "the '<=' delimitor" ;

//--- Syntax error message for terminal '$<<$' :
static const char * gSyntaxErrorMessage__3C_3C = "the '<<' delimitor" ;

//--- Syntax error message for terminal '$non_terminal_symbol$' :
static const char * gSyntaxErrorMessage_non_5Fterminal_5Fsymbol = "a non terminal symbol <...>" ;

//--- Syntax error message for terminal '$literal_string$' :
static const char * gSyntaxErrorMessage_literal_5Fstring = "a character string constant \"...\"" ;

//--- Syntax error message for terminal '$comment$' :
static const char * gSyntaxErrorMessage_comment = "a comment" ;

//---------------------------------------------------------------------------*
//                                                                           *
//                appendTerminalMessageToSyntaxErrorMessage                  *
//                                                                           *
//---------------------------------------------------------------------------*

void galgas_scanner::
appendTerminalMessageToSyntaxErrorMessage (const sint16 inTerminalIndex,
                                           C_String & outSyntaxErrorMessage) {
  static const char * syntaxErrorMessageArray [142] = {"end of source",
       gSyntaxErrorMessage_identifier,
       gSyntaxErrorMessage_abstract,
       gSyntaxErrorMessage_after,
       gSyntaxErrorMessage_before,
       gSyntaxErrorMessage_between,
       gSyntaxErrorMessage_block,
       gSyntaxErrorMessage_cast,
       gSyntaxErrorMessage_class,
       gSyntaxErrorMessage_compile,
       gSyntaxErrorMessage_const,
       gSyntaxErrorMessage_constructor,
       gSyntaxErrorMessage_default,
       gSyntaxErrorMessage_description,
       gSyntaxErrorMessage_do,
       gSyntaxErrorMessage_domain,
       gSyntaxErrorMessage_drop,
       gSyntaxErrorMessage_else,
       gSyntaxErrorMessage_elsif,
       gSyntaxErrorMessage_end,
       gSyntaxErrorMessage_entity,
       gSyntaxErrorMessage_enum,
       gSyntaxErrorMessage_error,
       gSyntaxErrorMessage_extends,
       gSyntaxErrorMessage_extern,
       gSyntaxErrorMessage_extract,
       gSyntaxErrorMessage_false,
       gSyntaxErrorMessage_filewrapper,
       gSyntaxErrorMessage_foreach,
       gSyntaxErrorMessage_grammar,
       gSyntaxErrorMessage_gui,
       gSyntaxErrorMessage_here,
       gSyntaxErrorMessage_if,
       gSyntaxErrorMessage_import,
       gSyntaxErrorMessage_import_5F_5F,
       gSyntaxErrorMessage_in,
       gSyntaxErrorMessage_insert,
       gSyntaxErrorMessage_label,
       gSyntaxErrorMessage_lexique,
       gSyntaxErrorMessage_list,
       gSyntaxErrorMessage_listmap,
       gSyntaxErrorMessage_log,
       gSyntaxErrorMessage_loop,
       gSyntaxErrorMessage_map,
       gSyntaxErrorMessage_mapindex,
       gSyntaxErrorMessage_match,
       gSyntaxErrorMessage_message,
       gSyntaxErrorMessage_method,
       gSyntaxErrorMessage_mod,
       gSyntaxErrorMessage_modifier,
       gSyntaxErrorMessage_nonterminal,
       gSyntaxErrorMessage_not,
       gSyntaxErrorMessage_on,
       gSyntaxErrorMessage_once,
       gSyntaxErrorMessage_operator,
       gSyntaxErrorMessage_option,
       gSyntaxErrorMessage_or,
       gSyntaxErrorMessage_override,
       gSyntaxErrorMessage_parse,
       gSyntaxErrorMessage_program,
       gSyntaxErrorMessage_reader,
       gSyntaxErrorMessage_remove,
       gSyntaxErrorMessage_replace,
       gSyntaxErrorMessage_repeat,
       gSyntaxErrorMessage_rewind,
       gSyntaxErrorMessage_root,
       gSyntaxErrorMessage_routine,
       gSyntaxErrorMessage_rule,
       gSyntaxErrorMessage_search,
       gSyntaxErrorMessage_select,
       gSyntaxErrorMessage_self,
       gSyntaxErrorMessage_semantics,
       gSyntaxErrorMessage_send,
       gSyntaxErrorMessage_sortedlist,
       gSyntaxErrorMessage_state,
       gSyntaxErrorMessage_struct,
       gSyntaxErrorMessage_style,
       gSyntaxErrorMessage_switch,
       gSyntaxErrorMessage_syntax,
       gSyntaxErrorMessage_tag,
       gSyntaxErrorMessage_template,
       gSyntaxErrorMessage_then,
       gSyntaxErrorMessage_true,
       gSyntaxErrorMessage_unused,
       gSyntaxErrorMessage_warning,
       gSyntaxErrorMessage_when,
       gSyntaxErrorMessage_while,
       gSyntaxErrorMessage_xmlmapping,
       gSyntaxErrorMessage_xmlparse,
       gSyntaxErrorMessage_literal_5Fdouble,
       gSyntaxErrorMessage_unsigned_5Fliteral_5Finteger,
       gSyntaxErrorMessage_signed_5Fliteral_5Finteger,
       gSyntaxErrorMessage_unsigned_5Fliteral_5Finteger64,
       gSyntaxErrorMessage_signed_5Fliteral_5Finteger64,
       gSyntaxErrorMessage__2E,
       gSyntaxErrorMessage__2E_3D,
       gSyntaxErrorMessage__2E_2E_2E,
       gSyntaxErrorMessage_type_5Fname,
       gSyntaxErrorMessage_literal_5Fchar,
       gSyntaxErrorMessage_terminal,
       gSyntaxErrorMessage__2A,
       gSyntaxErrorMessage__7C,
       gSyntaxErrorMessage__2C,
       gSyntaxErrorMessage__2B,
       gSyntaxErrorMessage__2D_2D,
       gSyntaxErrorMessage__3A_3A,
       gSyntaxErrorMessage__3E,
       gSyntaxErrorMessage__3B,
       gSyntaxErrorMessage__3A,
       gSyntaxErrorMessage__2D,
       gSyntaxErrorMessage__28,
       gSyntaxErrorMessage__29,
       gSyntaxErrorMessage__2D_3E,
       gSyntaxErrorMessage__3F,
       gSyntaxErrorMessage__3D_3D,
       gSyntaxErrorMessage__3F_3F,
       gSyntaxErrorMessage__21,
       gSyntaxErrorMessage__3A_3D,
       gSyntaxErrorMessage__2B_2B,
       gSyntaxErrorMessage__5B,
       gSyntaxErrorMessage__5D,
       gSyntaxErrorMessage__2B_3D,
       gSyntaxErrorMessage__3F_21,
       gSyntaxErrorMessage__21_3F,
       gSyntaxErrorMessage__2F,
       gSyntaxErrorMessage__21_3D,
       gSyntaxErrorMessage__3E_3D,
       gSyntaxErrorMessage__26,
       gSyntaxErrorMessage__7B,
       gSyntaxErrorMessage__7D,
       gSyntaxErrorMessage__2D_3D,
       gSyntaxErrorMessage__5E,
       gSyntaxErrorMessage__3E_3E,
       gSyntaxErrorMessage__7E,
       gSyntaxErrorMessage__3C_2D,
       gSyntaxErrorMessage__3C,
       gSyntaxErrorMessage__3C_2D_3E,
       gSyntaxErrorMessage__3C_3D,
       gSyntaxErrorMessage__3C_3C,
       gSyntaxErrorMessage_non_5Fterminal_5Fsymbol,
       gSyntaxErrorMessage_literal_5Fstring,
       gSyntaxErrorMessage_comment} ;
  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Key words table 'galgasKeyWordList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 galgas_scanner::galgas_scanner_table_size_galgasKeyWordList = 87 ;

const C_lexique_table_entry galgas_scanner::galgas_scanner_table_for_galgasKeyWordList [87] = {
  C_lexique_table_entry ("do", 2, galgas_scanner_1_do),
  C_lexique_table_entry ("if", 2, galgas_scanner_1_if),
  C_lexique_table_entry ("in", 2, galgas_scanner_1_in),
  C_lexique_table_entry ("on", 2, galgas_scanner_1_on),
  C_lexique_table_entry ("or", 2, galgas_scanner_1_or),
  C_lexique_table_entry ("end", 3, galgas_scanner_1_end),
  C_lexique_table_entry ("gui", 3, galgas_scanner_1_gui),
  C_lexique_table_entry ("log", 3, galgas_scanner_1_log),
  C_lexique_table_entry ("map", 3, galgas_scanner_1_map),
  C_lexique_table_entry ("mod", 3, galgas_scanner_1_mod),
  C_lexique_table_entry ("not", 3, galgas_scanner_1_not),
  C_lexique_table_entry ("tag", 3, galgas_scanner_1_tag),
  C_lexique_table_entry ("cast", 4, galgas_scanner_1_cast),
  C_lexique_table_entry ("drop", 4, galgas_scanner_1_drop),
  C_lexique_table_entry ("else", 4, galgas_scanner_1_else),
  C_lexique_table_entry ("enum", 4, galgas_scanner_1_enum),
  C_lexique_table_entry ("here", 4, galgas_scanner_1_here),
  C_lexique_table_entry ("list", 4, galgas_scanner_1_list),
  C_lexique_table_entry ("loop", 4, galgas_scanner_1_loop),
  C_lexique_table_entry ("once", 4, galgas_scanner_1_once),
  C_lexique_table_entry ("root", 4, galgas_scanner_1_root),
  C_lexique_table_entry ("rule", 4, galgas_scanner_1_rule),
  C_lexique_table_entry ("self", 4, galgas_scanner_1_self),
  C_lexique_table_entry ("send", 4, galgas_scanner_1_send),
  C_lexique_table_entry ("then", 4, galgas_scanner_1_then),
  C_lexique_table_entry ("true", 4, galgas_scanner_1_true),
  C_lexique_table_entry ("when", 4, galgas_scanner_1_when),
  C_lexique_table_entry ("after", 5, galgas_scanner_1_after),
  C_lexique_table_entry ("block", 5, galgas_scanner_1_block),
  C_lexique_table_entry ("class", 5, galgas_scanner_1_class),
  C_lexique_table_entry ("const", 5, galgas_scanner_1_const),
  C_lexique_table_entry ("elsif", 5, galgas_scanner_1_elsif),
  C_lexique_table_entry ("error", 5, galgas_scanner_1_error),
  C_lexique_table_entry ("false", 5, galgas_scanner_1_false),
  C_lexique_table_entry ("label", 5, galgas_scanner_1_label),
  C_lexique_table_entry ("match", 5, galgas_scanner_1_match),
  C_lexique_table_entry ("parse", 5, galgas_scanner_1_parse),
  C_lexique_table_entry ("state", 5, galgas_scanner_1_state),
  C_lexique_table_entry ("style", 5, galgas_scanner_1_style),
  C_lexique_table_entry ("while", 5, galgas_scanner_1_while),
  C_lexique_table_entry ("before", 6, galgas_scanner_1_before),
  C_lexique_table_entry ("domain", 6, galgas_scanner_1_domain),
  C_lexique_table_entry ("entity", 6, galgas_scanner_1_entity),
  C_lexique_table_entry ("extern", 6, galgas_scanner_1_extern),
  C_lexique_table_entry ("import", 6, galgas_scanner_1_import),
  C_lexique_table_entry ("insert", 6, galgas_scanner_1_insert),
  C_lexique_table_entry ("method", 6, galgas_scanner_1_method),
  C_lexique_table_entry ("option", 6, galgas_scanner_1_option),
  C_lexique_table_entry ("reader", 6, galgas_scanner_1_reader),
  C_lexique_table_entry ("remove", 6, galgas_scanner_1_remove),
  C_lexique_table_entry ("repeat", 6, galgas_scanner_1_repeat),
  C_lexique_table_entry ("rewind", 6, galgas_scanner_1_rewind),
  C_lexique_table_entry ("search", 6, galgas_scanner_1_search),
  C_lexique_table_entry ("select", 6, galgas_scanner_1_select),
  C_lexique_table_entry ("struct", 6, galgas_scanner_1_struct),
  C_lexique_table_entry ("switch", 6, galgas_scanner_1_switch),
  C_lexique_table_entry ("syntax", 6, galgas_scanner_1_syntax),
  C_lexique_table_entry ("unused", 6, galgas_scanner_1_unused),
  C_lexique_table_entry ("between", 7, galgas_scanner_1_between),
  C_lexique_table_entry ("compile", 7, galgas_scanner_1_compile),
  C_lexique_table_entry ("default", 7, galgas_scanner_1_default),
  C_lexique_table_entry ("extends", 7, galgas_scanner_1_extends),
  C_lexique_table_entry ("extract", 7, galgas_scanner_1_extract),
  C_lexique_table_entry ("foreach", 7, galgas_scanner_1_foreach),
  C_lexique_table_entry ("grammar", 7, galgas_scanner_1_grammar),
  C_lexique_table_entry ("lexique", 7, galgas_scanner_1_lexique),
  C_lexique_table_entry ("listmap", 7, galgas_scanner_1_listmap),
  C_lexique_table_entry ("message", 7, galgas_scanner_1_message),
  C_lexique_table_entry ("program", 7, galgas_scanner_1_program),
  C_lexique_table_entry ("replace", 7, galgas_scanner_1_replace),
  C_lexique_table_entry ("routine", 7, galgas_scanner_1_routine),
  C_lexique_table_entry ("warning", 7, galgas_scanner_1_warning),
  C_lexique_table_entry ("abstract", 8, galgas_scanner_1_abstract),
  C_lexique_table_entry ("import__", 8, galgas_scanner_1_import_5F_5F),
  C_lexique_table_entry ("mapindex", 8, galgas_scanner_1_mapindex),
  C_lexique_table_entry ("modifier", 8, galgas_scanner_1_modifier),
  C_lexique_table_entry ("operator", 8, galgas_scanner_1_operator),
  C_lexique_table_entry ("override", 8, galgas_scanner_1_override),
  C_lexique_table_entry ("template", 8, galgas_scanner_1_template),
  C_lexique_table_entry ("xmlparse", 8, galgas_scanner_1_xmlparse),
  C_lexique_table_entry ("semantics", 9, galgas_scanner_1_semantics),
  C_lexique_table_entry ("sortedlist", 10, galgas_scanner_1_sortedlist),
  C_lexique_table_entry ("xmlmapping", 10, galgas_scanner_1_xmlmapping),
  C_lexique_table_entry ("constructor", 11, galgas_scanner_1_constructor),
  C_lexique_table_entry ("description", 11, galgas_scanner_1_description),
  C_lexique_table_entry ("filewrapper", 11, galgas_scanner_1_filewrapper),
  C_lexique_table_entry ("nonterminal", 11, galgas_scanner_1_nonterminal)
} ;

sint16 galgas_scanner::search_into_galgasKeyWordList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, galgas_scanner_table_for_galgasKeyWordList, galgas_scanner_table_size_galgasKeyWordList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Key words table 'galgasDelimitorsList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 galgas_scanner::galgas_scanner_table_size_galgasDelimitorsList = 35 ;

const C_lexique_table_entry galgas_scanner::galgas_scanner_table_for_galgasDelimitorsList [35] = {
  C_lexique_table_entry ("!", 1, galgas_scanner_1__21),
  C_lexique_table_entry ("&", 1, galgas_scanner_1__26),
  C_lexique_table_entry ("(", 1, galgas_scanner_1__28),
  C_lexique_table_entry (")", 1, galgas_scanner_1__29),
  C_lexique_table_entry ("*", 1, galgas_scanner_1__2A),
  C_lexique_table_entry ("+", 1, galgas_scanner_1__2B),
  C_lexique_table_entry (",", 1, galgas_scanner_1__2C),
  C_lexique_table_entry ("-", 1, galgas_scanner_1__2D),
  C_lexique_table_entry ("/", 1, galgas_scanner_1__2F),
  C_lexique_table_entry (":", 1, galgas_scanner_1__3A),
  C_lexique_table_entry (";", 1, galgas_scanner_1__3B),
  C_lexique_table_entry (">", 1, galgas_scanner_1__3E),
  C_lexique_table_entry ("\?", 1, galgas_scanner_1__3F),
  C_lexique_table_entry ("[", 1, galgas_scanner_1__5B),
  C_lexique_table_entry ("]", 1, galgas_scanner_1__5D),
  C_lexique_table_entry ("^", 1, galgas_scanner_1__5E),
  C_lexique_table_entry ("{", 1, galgas_scanner_1__7B),
  C_lexique_table_entry ("|", 1, galgas_scanner_1__7C),
  C_lexique_table_entry ("}", 1, galgas_scanner_1__7D),
  C_lexique_table_entry ("~", 1, galgas_scanner_1__7E),
  C_lexique_table_entry ("!=", 2, galgas_scanner_1__21_3D),
  C_lexique_table_entry ("!\?", 2, galgas_scanner_1__21_3F),
  C_lexique_table_entry ("++", 2, galgas_scanner_1__2B_2B),
  C_lexique_table_entry ("+=", 2, galgas_scanner_1__2B_3D),
  C_lexique_table_entry ("--", 2, galgas_scanner_1__2D_2D),
  C_lexique_table_entry ("-=", 2, galgas_scanner_1__2D_3D),
  C_lexique_table_entry ("->", 2, galgas_scanner_1__2D_3E),
  C_lexique_table_entry ("::", 2, galgas_scanner_1__3A_3A),
  C_lexique_table_entry (":=", 2, galgas_scanner_1__3A_3D),
  C_lexique_table_entry ("<-", 2, galgas_scanner_1__3C_2D),
  C_lexique_table_entry ("==", 2, galgas_scanner_1__3D_3D),
  C_lexique_table_entry (">=", 2, galgas_scanner_1__3E_3D),
  C_lexique_table_entry (">>", 2, galgas_scanner_1__3E_3E),
  C_lexique_table_entry ("\?!", 2, galgas_scanner_1__3F_21),
  C_lexique_table_entry ("\?\?", 2, galgas_scanner_1__3F_3F)
} ;

sint16 galgas_scanner::search_into_galgasDelimitorsList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, galgas_scanner_table_for_galgasDelimitorsList, galgas_scanner_table_size_galgasDelimitorsList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          getCurrentTokenString                            *
//                                                                           *
//---------------------------------------------------------------------------*

C_String galgas_scanner::
getCurrentTokenString (const cToken * inTokenPtr) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) inTokenPtr ;
  C_String s ;
  if (_p == NULL) {
    s << "$$" ;
  }else{
    switch (_p->_mTokenCode) {
    case  galgas_scanner_1_:
      s << "$$" ;
      break ;
    case  galgas_scanner_1_identifier:
      s << '$'
        << "identifier"
        << '$' ;
    s << ' ' ;
    s.writeCstringConstant (_p->tokenString) ;
      break;
    case  galgas_scanner_1_abstract:
      s << '$'
        << "abstract"
        << '$' ;
      break;
    case  galgas_scanner_1_after:
      s << '$'
        << "after"
        << '$' ;
      break;
    case  galgas_scanner_1_before:
      s << '$'
        << "before"
        << '$' ;
      break;
    case  galgas_scanner_1_between:
      s << '$'
        << "between"
        << '$' ;
      break;
    case  galgas_scanner_1_block:
      s << '$'
        << "block"
        << '$' ;
      break;
    case  galgas_scanner_1_cast:
      s << '$'
        << "cast"
        << '$' ;
      break;
    case  galgas_scanner_1_class:
      s << '$'
        << "class"
        << '$' ;
      break;
    case  galgas_scanner_1_compile:
      s << '$'
        << "compile"
        << '$' ;
      break;
    case  galgas_scanner_1_const:
      s << '$'
        << "const"
        << '$' ;
      break;
    case  galgas_scanner_1_constructor:
      s << '$'
        << "constructor"
        << '$' ;
      break;
    case  galgas_scanner_1_default:
      s << '$'
        << "default"
        << '$' ;
      break;
    case  galgas_scanner_1_description:
      s << '$'
        << "description"
        << '$' ;
      break;
    case  galgas_scanner_1_do:
      s << '$'
        << "do"
        << '$' ;
      break;
    case  galgas_scanner_1_domain:
      s << '$'
        << "domain"
        << '$' ;
      break;
    case  galgas_scanner_1_drop:
      s << '$'
        << "drop"
        << '$' ;
      break;
    case  galgas_scanner_1_else:
      s << '$'
        << "else"
        << '$' ;
      break;
    case  galgas_scanner_1_elsif:
      s << '$'
        << "elsif"
        << '$' ;
      break;
    case  galgas_scanner_1_end:
      s << '$'
        << "end"
        << '$' ;
      break;
    case  galgas_scanner_1_entity:
      s << '$'
        << "entity"
        << '$' ;
      break;
    case  galgas_scanner_1_enum:
      s << '$'
        << "enum"
        << '$' ;
      break;
    case  galgas_scanner_1_error:
      s << '$'
        << "error"
        << '$' ;
      break;
    case  galgas_scanner_1_extends:
      s << '$'
        << "extends"
        << '$' ;
      break;
    case  galgas_scanner_1_extern:
      s << '$'
        << "extern"
        << '$' ;
      break;
    case  galgas_scanner_1_extract:
      s << '$'
        << "extract"
        << '$' ;
      break;
    case  galgas_scanner_1_false:
      s << '$'
        << "false"
        << '$' ;
      break;
    case  galgas_scanner_1_filewrapper:
      s << '$'
        << "filewrapper"
        << '$' ;
      break;
    case  galgas_scanner_1_foreach:
      s << '$'
        << "foreach"
        << '$' ;
      break;
    case  galgas_scanner_1_grammar:
      s << '$'
        << "grammar"
        << '$' ;
      break;
    case  galgas_scanner_1_gui:
      s << '$'
        << "gui"
        << '$' ;
      break;
    case  galgas_scanner_1_here:
      s << '$'
        << "here"
        << '$' ;
      break;
    case  galgas_scanner_1_if:
      s << '$'
        << "if"
        << '$' ;
      break;
    case  galgas_scanner_1_import:
      s << '$'
        << "import"
        << '$' ;
      break;
    case  galgas_scanner_1_import_5F_5F:
      s << '$'
        << "import__"
        << '$' ;
      break;
    case  galgas_scanner_1_in:
      s << '$'
        << "in"
        << '$' ;
      break;
    case  galgas_scanner_1_insert:
      s << '$'
        << "insert"
        << '$' ;
      break;
    case  galgas_scanner_1_label:
      s << '$'
        << "label"
        << '$' ;
      break;
    case  galgas_scanner_1_lexique:
      s << '$'
        << "lexique"
        << '$' ;
      break;
    case  galgas_scanner_1_list:
      s << '$'
        << "list"
        << '$' ;
      break;
    case  galgas_scanner_1_listmap:
      s << '$'
        << "listmap"
        << '$' ;
      break;
    case  galgas_scanner_1_log:
      s << '$'
        << "log"
        << '$' ;
      break;
    case  galgas_scanner_1_loop:
      s << '$'
        << "loop"
        << '$' ;
      break;
    case  galgas_scanner_1_map:
      s << '$'
        << "map"
        << '$' ;
      break;
    case  galgas_scanner_1_mapindex:
      s << '$'
        << "mapindex"
        << '$' ;
      break;
    case  galgas_scanner_1_match:
      s << '$'
        << "match"
        << '$' ;
      break;
    case  galgas_scanner_1_message:
      s << '$'
        << "message"
        << '$' ;
      break;
    case  galgas_scanner_1_method:
      s << '$'
        << "method"
        << '$' ;
      break;
    case  galgas_scanner_1_mod:
      s << '$'
        << "mod"
        << '$' ;
      break;
    case  galgas_scanner_1_modifier:
      s << '$'
        << "modifier"
        << '$' ;
      break;
    case  galgas_scanner_1_nonterminal:
      s << '$'
        << "nonterminal"
        << '$' ;
      break;
    case  galgas_scanner_1_not:
      s << '$'
        << "not"
        << '$' ;
      break;
    case  galgas_scanner_1_on:
      s << '$'
        << "on"
        << '$' ;
      break;
    case  galgas_scanner_1_once:
      s << '$'
        << "once"
        << '$' ;
      break;
    case  galgas_scanner_1_operator:
      s << '$'
        << "operator"
        << '$' ;
      break;
    case  galgas_scanner_1_option:
      s << '$'
        << "option"
        << '$' ;
      break;
    case  galgas_scanner_1_or:
      s << '$'
        << "or"
        << '$' ;
      break;
    case  galgas_scanner_1_override:
      s << '$'
        << "override"
        << '$' ;
      break;
    case  galgas_scanner_1_parse:
      s << '$'
        << "parse"
        << '$' ;
      break;
    case  galgas_scanner_1_program:
      s << '$'
        << "program"
        << '$' ;
      break;
    case  galgas_scanner_1_reader:
      s << '$'
        << "reader"
        << '$' ;
      break;
    case  galgas_scanner_1_remove:
      s << '$'
        << "remove"
        << '$' ;
      break;
    case  galgas_scanner_1_replace:
      s << '$'
        << "replace"
        << '$' ;
      break;
    case  galgas_scanner_1_repeat:
      s << '$'
        << "repeat"
        << '$' ;
      break;
    case  galgas_scanner_1_rewind:
      s << '$'
        << "rewind"
        << '$' ;
      break;
    case  galgas_scanner_1_root:
      s << '$'
        << "root"
        << '$' ;
      break;
    case  galgas_scanner_1_routine:
      s << '$'
        << "routine"
        << '$' ;
      break;
    case  galgas_scanner_1_rule:
      s << '$'
        << "rule"
        << '$' ;
      break;
    case  galgas_scanner_1_search:
      s << '$'
        << "search"
        << '$' ;
      break;
    case  galgas_scanner_1_select:
      s << '$'
        << "select"
        << '$' ;
      break;
    case  galgas_scanner_1_self:
      s << '$'
        << "self"
        << '$' ;
      break;
    case  galgas_scanner_1_semantics:
      s << '$'
        << "semantics"
        << '$' ;
      break;
    case  galgas_scanner_1_send:
      s << '$'
        << "send"
        << '$' ;
      break;
    case  galgas_scanner_1_sortedlist:
      s << '$'
        << "sortedlist"
        << '$' ;
      break;
    case  galgas_scanner_1_state:
      s << '$'
        << "state"
        << '$' ;
      break;
    case  galgas_scanner_1_struct:
      s << '$'
        << "struct"
        << '$' ;
      break;
    case  galgas_scanner_1_style:
      s << '$'
        << "style"
        << '$' ;
      break;
    case  galgas_scanner_1_switch:
      s << '$'
        << "switch"
        << '$' ;
      break;
    case  galgas_scanner_1_syntax:
      s << '$'
        << "syntax"
        << '$' ;
      break;
    case  galgas_scanner_1_tag:
      s << '$'
        << "tag"
        << '$' ;
      break;
    case  galgas_scanner_1_template:
      s << '$'
        << "template"
        << '$' ;
      break;
    case  galgas_scanner_1_then:
      s << '$'
        << "then"
        << '$' ;
      break;
    case  galgas_scanner_1_true:
      s << '$'
        << "true"
        << '$' ;
      break;
    case  galgas_scanner_1_unused:
      s << '$'
        << "unused"
        << '$' ;
      break;
    case  galgas_scanner_1_warning:
      s << '$'
        << "warning"
        << '$' ;
      break;
    case  galgas_scanner_1_when:
      s << '$'
        << "when"
        << '$' ;
      break;
    case  galgas_scanner_1_while:
      s << '$'
        << "while"
        << '$' ;
      break;
    case  galgas_scanner_1_xmlmapping:
      s << '$'
        << "xmlmapping"
        << '$' ;
      break;
    case  galgas_scanner_1_xmlparse:
      s << '$'
        << "xmlparse"
        << '$' ;
      break;
    case  galgas_scanner_1_literal_5Fdouble:
      s << '$'
        << "literal_double"
        << '$' ;
    s << ' ' << _p->floatValue ;
    s << ' ' ;
    s.writeCstringConstant (_p->tokenString) ;
      break;
    case  galgas_scanner_1_unsigned_5Fliteral_5Finteger:
      s << '$'
        << "unsigned_literal_integer"
        << '$' ;
    s << ' ' << _p->uint32value ;
      break;
    case  galgas_scanner_1_signed_5Fliteral_5Finteger:
      s << '$'
        << "signed_literal_integer"
        << '$' ;
    s << ' ' << _p->sint32value ;
      break;
    case  galgas_scanner_1_unsigned_5Fliteral_5Finteger64:
      s << '$'
        << "unsigned_literal_integer64"
        << '$' ;
    s << ' ' << _p->uint64value ;
      break;
    case  galgas_scanner_1_signed_5Fliteral_5Finteger64:
      s << '$'
        << "signed_literal_integer64"
        << '$' ;
    s << ' ' << _p->sint64value ;
      break;
    case  galgas_scanner_1__2E:
      s << '$'
        << "."
        << '$' ;
      break;
    case  galgas_scanner_1__2E_3D:
      s << '$'
        << ".="
        << '$' ;
      break;
    case  galgas_scanner_1__2E_2E_2E:
      s << '$'
        << "..."
        << '$' ;
      break;
    case  galgas_scanner_1_type_5Fname:
      s << '$'
        << "type_name"
        << '$' ;
    s << ' ' ;
    s.writeCstringConstant (_p->tokenString) ;
      break;
    case  galgas_scanner_1_literal_5Fchar:
      s << '$'
        << "literal_char"
        << '$' ;
    s << ' ' ;
    s.writeCcharConstant (_p->charValue) ;
      break;
    case  galgas_scanner_1_terminal:
      s << '$'
        << "terminal"
        << '$' ;
    s << ' ' ;
    s.writeCstringConstant (_p->tokenString) ;
      break;
    case  galgas_scanner_1__2A:
      s << '$'
        << "*"
        << '$' ;
      break;
    case  galgas_scanner_1__7C:
      s << '$'
        << "|"
        << '$' ;
      break;
    case  galgas_scanner_1__2C:
      s << '$'
        << ","
        << '$' ;
      break;
    case  galgas_scanner_1__2B:
      s << '$'
        << "+"
        << '$' ;
      break;
    case  galgas_scanner_1__2D_2D:
      s << '$'
        << "--"
        << '$' ;
      break;
    case  galgas_scanner_1__3A_3A:
      s << '$'
        << "::"
        << '$' ;
      break;
    case  galgas_scanner_1__3E:
      s << '$'
        << ">"
        << '$' ;
      break;
    case  galgas_scanner_1__3B:
      s << '$'
        << ";"
        << '$' ;
      break;
    case  galgas_scanner_1__3A:
      s << '$'
        << ":"
        << '$' ;
      break;
    case  galgas_scanner_1__2D:
      s << '$'
        << "-"
        << '$' ;
      break;
    case  galgas_scanner_1__28:
      s << '$'
        << "("
        << '$' ;
      break;
    case  galgas_scanner_1__29:
      s << '$'
        << ")"
        << '$' ;
      break;
    case  galgas_scanner_1__2D_3E:
      s << '$'
        << "->"
        << '$' ;
      break;
    case  galgas_scanner_1__3F:
      s << '$'
        << "\?"
        << '$' ;
      break;
    case  galgas_scanner_1__3D_3D:
      s << '$'
        << "=="
        << '$' ;
      break;
    case  galgas_scanner_1__3F_3F:
      s << '$'
        << "\?\?"
        << '$' ;
      break;
    case  galgas_scanner_1__21:
      s << '$'
        << "!"
        << '$' ;
      break;
    case  galgas_scanner_1__3A_3D:
      s << '$'
        << ":="
        << '$' ;
      break;
    case  galgas_scanner_1__2B_2B:
      s << '$'
        << "++"
        << '$' ;
      break;
    case  galgas_scanner_1__5B:
      s << '$'
        << "["
        << '$' ;
      break;
    case  galgas_scanner_1__5D:
      s << '$'
        << "]"
        << '$' ;
      break;
    case  galgas_scanner_1__2B_3D:
      s << '$'
        << "+="
        << '$' ;
      break;
    case  galgas_scanner_1__3F_21:
      s << '$'
        << "\?!"
        << '$' ;
      break;
    case  galgas_scanner_1__21_3F:
      s << '$'
        << "!\?"
        << '$' ;
      break;
    case  galgas_scanner_1__2F:
      s << '$'
        << "/"
        << '$' ;
      break;
    case  galgas_scanner_1__21_3D:
      s << '$'
        << "!="
        << '$' ;
      break;
    case  galgas_scanner_1__3E_3D:
      s << '$'
        << ">="
        << '$' ;
      break;
    case  galgas_scanner_1__26:
      s << '$'
        << "&"
        << '$' ;
      break;
    case  galgas_scanner_1__7B:
      s << '$'
        << "{"
        << '$' ;
      break;
    case  galgas_scanner_1__7D:
      s << '$'
        << "}"
        << '$' ;
      break;
    case  galgas_scanner_1__2D_3D:
      s << '$'
        << "-="
        << '$' ;
      break;
    case  galgas_scanner_1__5E:
      s << '$'
        << "^"
        << '$' ;
      break;
    case  galgas_scanner_1__3E_3E:
      s << '$'
        << ">>"
        << '$' ;
      break;
    case  galgas_scanner_1__7E:
      s << '$'
        << "~"
        << '$' ;
      break;
    case  galgas_scanner_1__3C_2D:
      s << '$'
        << "<-"
        << '$' ;
      break;
    case  galgas_scanner_1__3C:
      s << '$'
        << "<"
        << '$' ;
      break;
    case  galgas_scanner_1__3C_2D_3E:
      s << '$'
        << "<->"
        << '$' ;
      break;
    case  galgas_scanner_1__3C_3D:
      s << '$'
        << "<="
        << '$' ;
      break;
    case  galgas_scanner_1__3C_3C:
      s << '$'
        << "<<"
        << '$' ;
      break;
    case  galgas_scanner_1_non_5Fterminal_5Fsymbol:
      s << '$'
        << "non_terminal_symbol"
        << '$' ;
    s << ' ' ;
    s.writeCstringConstant (_p->tokenString) ;
      break;
    case  galgas_scanner_1_literal_5Fstring:
      s << '$'
        << "literal_string"
        << '$' ;
    s << ' ' ;
    s.writeCstringConstant (_p->tokenString) ;
      break;
    case  galgas_scanner_1_comment:
      s << '$'
        << "comment"
        << '$' ;
      break;
    default:
      break ;
    }
  }
  return s ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            parseLexicalToken                              *
//                                                                           *
//---------------------------------------------------------------------------*

bool galgas_scanner::
parseLexicalToken (void) {
  cTokenFor_galgas_scanner _token ;
  bool loop_ = true ;
  _token._mTokenCode = -1 ;
  while ((_token._mTokenCode < 0) && (mCurrentChar != '\0')) {
    _token.identifierString.clear () ;
    _token.uint32value = 0 ;
    _token.sint32value = 0 ;
    _token.uint64value = 0 ;
    _token.sint64value = 0 ;
    _token.charValue = '\0' ;
    _token.tokenString.clear () ;
    _token.floatValue = 0.0 ;
    _mTokenFirstLocation = _mCurrentLocation ;
    try{
      if (testForInputChar ('a', 'z') ||
          testForInputChar ('A', 'Z')) {
        do {
          scanner_action_enterCharacterIntoString (_token.identifierString, scanner_action_toLower (previousChar ())) ;
          scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          if (testForInputChar ('a', 'z') ||
              testForInputChar ('A', 'Z') ||
              testForInputChar ('_') ||
              testForInputChar ('0', '9')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = search_into_galgasKeyWordList (_token.identifierString) ;
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = galgas_scanner_1_identifier ;
        }
        _enterToken (_token) ;
      }else if (testForInputString ("0x", 2)) {
        do {
          if (testForInputChar ('0', '9')) {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          }else if (testForInputChar ('a', 'f')) {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          }else if (testForInputChar ('A', 'F')) {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          }else if (testForInputChar ('_')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputString ("LS", 2)) {
          scanner_action_convertHexStringIntoSInt64 (_token.tokenString, _token.sint64value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_signed_5Fliteral_5Finteger64 ;
          _enterToken (_token) ;
        }else if (testForInputChar ('S') ||
            testForInputChar ('s')) {
          scanner_action_convertHexStringIntoSInt (_token.tokenString, _token.sint32value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_signed_5Fliteral_5Finteger ;
          _enterToken (_token) ;
        }else if (testForInputChar ('L')) {
          scanner_action_convertHexStringIntoUInt64 (_token.tokenString, _token.uint64value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_unsigned_5Fliteral_5Finteger64 ;
          _enterToken (_token) ;
        }else{
          scanner_action_convertHexStringIntoUInt (_token.tokenString, _token.uint32value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_unsigned_5Fliteral_5Finteger ;
          _enterToken (_token) ;
        }
      }else if (testForInputChar ('0', '9')) {
        scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
        do {
          if (testForInputChar ('0', '9')) {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          }else if (testForInputChar ('_')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('S') ||
            testForInputChar ('s')) {
          scanner_action_convertDecimalStringIntoSInt (_token.tokenString, _token.sint32value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_signed_5Fliteral_5Finteger ;
          _enterToken (_token) ;
        }else if (testForInputString ("LS", 2)) {
          scanner_action_convertDecimalStringIntoSInt64 (_token.tokenString, _token.sint64value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_signed_5Fliteral_5Finteger64 ;
          _enterToken (_token) ;
        }else if (testForInputChar ('L')) {
          scanner_action_convertDecimalStringIntoUInt64 (_token.tokenString, _token.uint64value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_unsigned_5Fliteral_5Finteger64 ;
          _enterToken (_token) ;
        }else if (testForInputChar ('.')) {
          scanner_action_enterCharacterIntoString (_token.tokenString, '.') ;
          do {
            if (testForInputChar ('0', '9')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            }else if (testForInputChar ('_')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
          scanner_action_convertStringToDouble (_token.tokenString, _token.floatValue, gErrorMessage_1) ;
          _token._mTokenCode = galgas_scanner_1_literal_5Fdouble ;
          _enterToken (_token) ;
        }else{
          scanner_action_convertDecimalStringIntoUInt (_token.tokenString, _token.uint32value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_unsigned_5Fliteral_5Finteger ;
          _enterToken (_token) ;
        }
      }else if (testForInputChar ('.')) {
        if (testForInputChar ('0', '9')) {
          scanner_action_enterCharacterIntoString (_token.tokenString, '0') ;
          scanner_action_enterCharacterIntoString (_token.tokenString, '.') ;
          scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          do {
            if (testForInputChar ('0', '9')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            }else if (testForInputChar ('_')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
          scanner_action_convertStringToDouble (_token.tokenString, _token.floatValue, gErrorMessage_1) ;
          _token._mTokenCode = galgas_scanner_1_literal_5Fdouble ;
          _enterToken (_token) ;
        }else{
          if (testForInputString ("..", 2)) {
            _token._mTokenCode = galgas_scanner_1__2E_2E_2E ;
            _enterToken (_token) ;
          }else if (testForInputString ("=", 1)) {
            _token._mTokenCode = galgas_scanner_1__2E_3D ;
            _enterToken (_token) ;
          }else{
            _token._mTokenCode = galgas_scanner_1__2E ;
            _enterToken (_token) ;
          }
        }
      }else if (testForInputChar ('@')) {
        if (testForInputChar ('a', 'z') ||
            testForInputChar ('A', 'Z') ||
            testForInputChar ('_')) {
          do {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            if (testForInputChar ('a', 'z') ||
                testForInputChar ('A', 'Z') ||
                testForInputChar ('_') ||
                testForInputChar ('0', '9')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
        }else{
          lexicalError (gErrorMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        _token._mTokenCode = galgas_scanner_1_type_5Fname ;
        _enterToken (_token) ;
      }else if (testForInputChar ('\'')) {
        if (testForInputChar ('\\')) {
          if (testForInputChar ('f')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\f') ;
          }else if (testForInputChar ('n')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\n') ;
          }else if (testForInputChar ('r')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\r') ;
          }else if (testForInputChar ('t')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\t') ;
          }else if (testForInputChar ('v')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\v') ;
          }else if (testForInputChar ('\\')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\\') ;
          }else if (testForInputChar ('0')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\0') ;
          }else if (testForInputChar ('\'')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\'') ;
          }else if (testForInputChar ('x') ||
              testForInputChar ('X')) {
            if (testForInputChar ('0', '9') ||
                testForInputChar ('a', 'f') ||
                testForInputChar ('A', 'F')) {
              do {
                scanner_action_enterHexDigitIntoASCIIcharacter (_token.charValue, previousChar (), gErrorMessage_5, gErrorMessage_2) ;
                if (testForInputChar ('0', '9') ||
                    testForInputChar ('a', 'f') ||
                    testForInputChar ('A', 'F')) {
                }else{
                  loop_ = false ;
                }
              }while (loop_) ;
              loop_ = true ;
            }else{
              lexicalError (gErrorMessage_4 COMMA_LINE_AND_SOURCE_FILE) ;
            }
          }else{
            lexicalError (gErrorMessage_4 COMMA_LINE_AND_SOURCE_FILE) ;
          }
        }else if (testForInputChar (' ', '\xFF')) {
          scanner_action_enterCharacterIntoCharacter (_token.charValue, previousChar ()) ;
        }else{
          lexicalError (gErrorMessage_4 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        if (testForInputChar ('\'')) {
          _token._mTokenCode = galgas_scanner_1_literal_5Fchar ;
          _enterToken (_token) ;
        }else{
          lexicalError (gErrorMessage_4 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputChar ('$')) {
        if (testForInputChar ('!', '#') ||
            testForInputChar ('%', '~')) {
          do {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            if (testForInputChar ('!', '#') ||
                testForInputChar ('%', '~')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
        }else{
          lexicalError (gErrorMessage_6 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        if (testForInputChar ('$')) {
        }else{
          lexicalError (gErrorMessage_7 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        _token._mTokenCode = galgas_scanner_1_terminal ;
        _enterToken (_token) ;
      }else if (testForInputString ("--", 2)) {
        _token._mTokenCode = galgas_scanner_1__2D_2D ;
        _enterToken (_token) ;
      }else if (testForInputString ("::", 2)) {
        _token._mTokenCode = galgas_scanner_1__3A_3A ;
        _enterToken (_token) ;
      }else if (testForInputString ("->", 2)) {
        _token._mTokenCode = galgas_scanner_1__2D_3E ;
        _enterToken (_token) ;
      }else if (testForInputString ("==", 2)) {
        _token._mTokenCode = galgas_scanner_1__3D_3D ;
        _enterToken (_token) ;
      }else if (testForInputString ("\?\?", 2)) {
        _token._mTokenCode = galgas_scanner_1__3F_3F ;
        _enterToken (_token) ;
      }else if (testForInputString (":=", 2)) {
        _token._mTokenCode = galgas_scanner_1__3A_3D ;
        _enterToken (_token) ;
      }else if (testForInputString ("++", 2)) {
        _token._mTokenCode = galgas_scanner_1__2B_2B ;
        _enterToken (_token) ;
      }else if (testForInputString ("+=", 2)) {
        _token._mTokenCode = galgas_scanner_1__2B_3D ;
        _enterToken (_token) ;
      }else if (testForInputString ("\?!", 2)) {
        _token._mTokenCode = galgas_scanner_1__3F_21 ;
        _enterToken (_token) ;
      }else if (testForInputString ("!\?", 2)) {
        _token._mTokenCode = galgas_scanner_1__21_3F ;
        _enterToken (_token) ;
      }else if (testForInputString ("!=", 2)) {
        _token._mTokenCode = galgas_scanner_1__21_3D ;
        _enterToken (_token) ;
      }else if (testForInputString (">=", 2)) {
        _token._mTokenCode = galgas_scanner_1__3E_3D ;
        _enterToken (_token) ;
      }else if (testForInputString ("-=", 2)) {
        _token._mTokenCode = galgas_scanner_1__2D_3D ;
        _enterToken (_token) ;
      }else if (testForInputString (">>", 2)) {
        _token._mTokenCode = galgas_scanner_1__3E_3E ;
        _enterToken (_token) ;
      }else if (testForInputString ("<-", 2)) {
        _token._mTokenCode = galgas_scanner_1__3C_2D ;
        _enterToken (_token) ;
      }else if (testForInputString ("*", 1)) {
        _token._mTokenCode = galgas_scanner_1__2A ;
        _enterToken (_token) ;
      }else if (testForInputString ("|", 1)) {
        _token._mTokenCode = galgas_scanner_1__7C ;
        _enterToken (_token) ;
      }else if (testForInputString (",", 1)) {
        _token._mTokenCode = galgas_scanner_1__2C ;
        _enterToken (_token) ;
      }else if (testForInputString ("+", 1)) {
        _token._mTokenCode = galgas_scanner_1__2B ;
        _enterToken (_token) ;
      }else if (testForInputString (">", 1)) {
        _token._mTokenCode = galgas_scanner_1__3E ;
        _enterToken (_token) ;
      }else if (testForInputString (";", 1)) {
        _token._mTokenCode = galgas_scanner_1__3B ;
        _enterToken (_token) ;
      }else if (testForInputString (":", 1)) {
        _token._mTokenCode = galgas_scanner_1__3A ;
        _enterToken (_token) ;
      }else if (testForInputString ("-", 1)) {
        _token._mTokenCode = galgas_scanner_1__2D ;
        _enterToken (_token) ;
      }else if (testForInputString ("(", 1)) {
        _token._mTokenCode = galgas_scanner_1__28 ;
        _enterToken (_token) ;
      }else if (testForInputString (")", 1)) {
        _token._mTokenCode = galgas_scanner_1__29 ;
        _enterToken (_token) ;
      }else if (testForInputString ("\?", 1)) {
        _token._mTokenCode = galgas_scanner_1__3F ;
        _enterToken (_token) ;
      }else if (testForInputString ("!", 1)) {
        _token._mTokenCode = galgas_scanner_1__21 ;
        _enterToken (_token) ;
      }else if (testForInputString ("[", 1)) {
        _token._mTokenCode = galgas_scanner_1__5B ;
        _enterToken (_token) ;
      }else if (testForInputString ("]", 1)) {
        _token._mTokenCode = galgas_scanner_1__5D ;
        _enterToken (_token) ;
      }else if (testForInputString ("/", 1)) {
        _token._mTokenCode = galgas_scanner_1__2F ;
        _enterToken (_token) ;
      }else if (testForInputString ("&", 1)) {
        _token._mTokenCode = galgas_scanner_1__26 ;
        _enterToken (_token) ;
      }else if (testForInputString ("{", 1)) {
        _token._mTokenCode = galgas_scanner_1__7B ;
        _enterToken (_token) ;
      }else if (testForInputString ("}", 1)) {
        _token._mTokenCode = galgas_scanner_1__7D ;
        _enterToken (_token) ;
      }else if (testForInputString ("^", 1)) {
        _token._mTokenCode = galgas_scanner_1__5E ;
        _enterToken (_token) ;
      }else if (testForInputString ("~", 1)) {
        _token._mTokenCode = galgas_scanner_1__7E ;
        _enterToken (_token) ;
      }else if (testForInputChar ('<')) {
        const C_LocationInSource _locationForTag_onlyInfDelimiter = _mCurrentLocation ;
        if (testForInputChar ('=')) {
          _token._mTokenCode = galgas_scanner_1__3C_3D ;
          _enterToken (_token) ;
        }else if (testForInputString ("->", 2)) {
          _token._mTokenCode = galgas_scanner_1__3C_2D_3E ;
          _enterToken (_token) ;
        }else if (testForInputChar ('<')) {
          _token._mTokenCode = galgas_scanner_1__3C_3C ;
          _enterToken (_token) ;
        }else if (testForInputChar ('a', 'z') ||
            testForInputChar ('A', 'Z')) {
          do {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            if (testForInputChar ('a', 'z') ||
                testForInputChar ('A', 'Z') ||
                testForInputChar ('0', '9') ||
                testForInputChar ('_')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
          if (testForInputChar ('>')) {
            _token._mTokenCode = galgas_scanner_1_non_5Fterminal_5Fsymbol ;
            _enterToken (_token) ;
          }else{
            _mCurrentLocation = _locationForTag_onlyInfDelimiter ;
            _token._mTokenCode = galgas_scanner_1__3C ;
            _enterToken (_token) ;
          }
        }else{
          _token._mTokenCode = galgas_scanner_1__3C ;
          _enterToken (_token) ;
        }
      }else if (testForInputChar ('\"')) {
        do {
          if (testForInputChar ('\\')) {
            if (testForInputChar ('f')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\f') ;
            }else if (testForInputChar ('n')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\n') ;
            }else if (testForInputChar ('r')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\r') ;
            }else if (testForInputChar ('t')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\t') ;
            }else if (testForInputChar ('v')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\v') ;
            }else if (testForInputChar ('\\')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\\') ;
            }else if (testForInputChar ('0')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\0') ;
            }else if (testForInputChar ('\"')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\"') ;
            }else if (testForInputChar ('\'')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\'') ;
            }else if (testForInputChar ('0', '9')) {
              do {
                scanner_action_enterHexDigitIntoASCIIcharacter (_token.charValue, previousChar (), gErrorMessage_5, gErrorMessage_2) ;
                if (testForInputChar ('0', '9')) {
                }else{
                  loop_ = false ;
                }
              }while (loop_) ;
              loop_ = true ;
              scanner_action_enterCharacterIntoString (_token.tokenString, _token.charValue) ;
            }else{
              lexicalError (gErrorMessage_4 COMMA_LINE_AND_SOURCE_FILE) ;
            }
          }else if (testForInputChar (' ') ||
              testForInputChar ('!') ||
              testForInputChar ('#', '\xFF')) {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('\"')) {
          _token._mTokenCode = galgas_scanner_1_literal_5Fstring ;
          _enterToken (_token) ;
        }else{
          lexicalError (gErrorMessage_8 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputChar ('#')) {
        do {
          if (testForInputChar ('\x1', '\t') ||
              testForInputChar ('\v') ||
              testForInputChar ('\f') ||
              testForInputChar ('\xE', '\xFF')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
      }else if (testForInputChar ('\x1', ' ')) {
      }else if (testForInputChar ('\0')) { // End of source text ? 
        _token._mTokenCode = galgas_scanner_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      _token._mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
    }
  }
  if ((mCurrentChar == '\0') && (_token._mTemplateStringBeforeToken.length () > 0)) {
    _token._mTokenCode = 0 ;
    _enterToken (_token) ;
  }
  return _token._mTokenCode > 0 ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   parseLexicalTokenForLexicalColoring                     *
//                                                                           *
//---------------------------------------------------------------------------*

sint16 galgas_scanner::
parseLexicalTokenForLexicalColoring (void) {
  cTokenFor_galgas_scanner _token ;
  bool loop_ = true ;
  _token._mTokenCode = -1 ;
  while (_token._mTokenCode < 0) {
    _token.identifierString.clear () ;
    _token.uint32value = 0 ;
    _token.sint32value = 0 ;
    _token.uint64value = 0 ;
    _token.sint64value = 0 ;
    _token.charValue = '\0' ;
    _token.tokenString.clear () ;
    _token.floatValue = 0.0 ;
    _mTokenFirstLocation = _mCurrentLocation ;
    try{
      if (testForInputChar ('a', 'z') ||
          testForInputChar ('A', 'Z')) {
        do {
          scanner_action_enterCharacterIntoString (_token.identifierString, scanner_action_toLower (previousChar ())) ;
          scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          if (testForInputChar ('a', 'z') ||
              testForInputChar ('A', 'Z') ||
              testForInputChar ('_') ||
              testForInputChar ('0', '9')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = search_into_galgasKeyWordList (_token.identifierString) ;
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = galgas_scanner_1_identifier ;
        }
      }else if (testForInputString ("0x", 2)) {
        do {
          if (testForInputChar ('0', '9')) {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          }else if (testForInputChar ('a', 'f')) {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          }else if (testForInputChar ('A', 'F')) {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          }else if (testForInputChar ('_')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputString ("LS", 2)) {
          scanner_action_convertHexStringIntoSInt64 (_token.tokenString, _token.sint64value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_signed_5Fliteral_5Finteger64 ;
        }else if (testForInputChar ('S') ||
            testForInputChar ('s')) {
          scanner_action_convertHexStringIntoSInt (_token.tokenString, _token.sint32value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_signed_5Fliteral_5Finteger ;
        }else if (testForInputChar ('L')) {
          scanner_action_convertHexStringIntoUInt64 (_token.tokenString, _token.uint64value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_unsigned_5Fliteral_5Finteger64 ;
        }else{
          scanner_action_convertHexStringIntoUInt (_token.tokenString, _token.uint32value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_unsigned_5Fliteral_5Finteger ;
        }
      }else if (testForInputChar ('0', '9')) {
        scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
        do {
          if (testForInputChar ('0', '9')) {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          }else if (testForInputChar ('_')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('S') ||
            testForInputChar ('s')) {
          scanner_action_convertDecimalStringIntoSInt (_token.tokenString, _token.sint32value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_signed_5Fliteral_5Finteger ;
        }else if (testForInputString ("LS", 2)) {
          scanner_action_convertDecimalStringIntoSInt64 (_token.tokenString, _token.sint64value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_signed_5Fliteral_5Finteger64 ;
        }else if (testForInputChar ('L')) {
          scanner_action_convertDecimalStringIntoUInt64 (_token.tokenString, _token.uint64value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_unsigned_5Fliteral_5Finteger64 ;
        }else if (testForInputChar ('.')) {
          scanner_action_enterCharacterIntoString (_token.tokenString, '.') ;
          do {
            if (testForInputChar ('0', '9')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            }else if (testForInputChar ('_')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
          scanner_action_convertStringToDouble (_token.tokenString, _token.floatValue, gErrorMessage_1) ;
          _token._mTokenCode = galgas_scanner_1_literal_5Fdouble ;
        }else{
          scanner_action_convertDecimalStringIntoUInt (_token.tokenString, _token.uint32value, gErrorMessage_0, gErrorMessage_2) ;
          _token._mTokenCode = galgas_scanner_1_unsigned_5Fliteral_5Finteger ;
        }
      }else if (testForInputChar ('.')) {
        if (testForInputChar ('0', '9')) {
          scanner_action_enterCharacterIntoString (_token.tokenString, '0') ;
          scanner_action_enterCharacterIntoString (_token.tokenString, '.') ;
          scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          do {
            if (testForInputChar ('0', '9')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            }else if (testForInputChar ('_')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
          scanner_action_convertStringToDouble (_token.tokenString, _token.floatValue, gErrorMessage_1) ;
          _token._mTokenCode = galgas_scanner_1_literal_5Fdouble ;
        }else{
          if (testForInputString ("..", 2)) {
            _token._mTokenCode = galgas_scanner_1__2E_2E_2E ;
          }else if (testForInputString ("=", 1)) {
            _token._mTokenCode = galgas_scanner_1__2E_3D ;
          }else{
            _token._mTokenCode = galgas_scanner_1__2E ;
          }
        }
      }else if (testForInputChar ('@')) {
        if (testForInputChar ('a', 'z') ||
            testForInputChar ('A', 'Z') ||
            testForInputChar ('_')) {
          do {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            if (testForInputChar ('a', 'z') ||
                testForInputChar ('A', 'Z') ||
                testForInputChar ('_') ||
                testForInputChar ('0', '9')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
        }else{
          lexicalError (gErrorMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        _token._mTokenCode = galgas_scanner_1_type_5Fname ;
      }else if (testForInputChar ('\'')) {
        if (testForInputChar ('\\')) {
          if (testForInputChar ('f')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\f') ;
          }else if (testForInputChar ('n')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\n') ;
          }else if (testForInputChar ('r')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\r') ;
          }else if (testForInputChar ('t')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\t') ;
          }else if (testForInputChar ('v')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\v') ;
          }else if (testForInputChar ('\\')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\\') ;
          }else if (testForInputChar ('0')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\0') ;
          }else if (testForInputChar ('\'')) {
            scanner_action_enterCharacterIntoCharacter (_token.charValue, '\'') ;
          }else if (testForInputChar ('x') ||
              testForInputChar ('X')) {
            if (testForInputChar ('0', '9') ||
                testForInputChar ('a', 'f') ||
                testForInputChar ('A', 'F')) {
              do {
                scanner_action_enterHexDigitIntoASCIIcharacter (_token.charValue, previousChar (), gErrorMessage_5, gErrorMessage_2) ;
                if (testForInputChar ('0', '9') ||
                    testForInputChar ('a', 'f') ||
                    testForInputChar ('A', 'F')) {
                }else{
                  loop_ = false ;
                }
              }while (loop_) ;
              loop_ = true ;
            }else{
              lexicalError (gErrorMessage_4 COMMA_LINE_AND_SOURCE_FILE) ;
            }
          }else{
            lexicalError (gErrorMessage_4 COMMA_LINE_AND_SOURCE_FILE) ;
          }
        }else if (testForInputChar (' ', '\xFF')) {
          scanner_action_enterCharacterIntoCharacter (_token.charValue, previousChar ()) ;
        }else{
          lexicalError (gErrorMessage_4 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        if (testForInputChar ('\'')) {
          _token._mTokenCode = galgas_scanner_1_literal_5Fchar ;
        }else{
          lexicalError (gErrorMessage_4 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputChar ('$')) {
        if (testForInputChar ('!', '#') ||
            testForInputChar ('%', '~')) {
          do {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            if (testForInputChar ('!', '#') ||
                testForInputChar ('%', '~')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
        }else{
          lexicalError (gErrorMessage_6 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        if (testForInputChar ('$')) {
        }else{
          lexicalError (gErrorMessage_7 COMMA_LINE_AND_SOURCE_FILE) ;
        }
        _token._mTokenCode = galgas_scanner_1_terminal ;
      }else if (testForInputString ("--", 2)) {
        _token._mTokenCode = galgas_scanner_1__2D_2D ;
      }else if (testForInputString ("::", 2)) {
        _token._mTokenCode = galgas_scanner_1__3A_3A ;
      }else if (testForInputString ("->", 2)) {
        _token._mTokenCode = galgas_scanner_1__2D_3E ;
      }else if (testForInputString ("==", 2)) {
        _token._mTokenCode = galgas_scanner_1__3D_3D ;
      }else if (testForInputString ("\?\?", 2)) {
        _token._mTokenCode = galgas_scanner_1__3F_3F ;
      }else if (testForInputString (":=", 2)) {
        _token._mTokenCode = galgas_scanner_1__3A_3D ;
      }else if (testForInputString ("++", 2)) {
        _token._mTokenCode = galgas_scanner_1__2B_2B ;
      }else if (testForInputString ("+=", 2)) {
        _token._mTokenCode = galgas_scanner_1__2B_3D ;
      }else if (testForInputString ("\?!", 2)) {
        _token._mTokenCode = galgas_scanner_1__3F_21 ;
      }else if (testForInputString ("!\?", 2)) {
        _token._mTokenCode = galgas_scanner_1__21_3F ;
      }else if (testForInputString ("!=", 2)) {
        _token._mTokenCode = galgas_scanner_1__21_3D ;
      }else if (testForInputString (">=", 2)) {
        _token._mTokenCode = galgas_scanner_1__3E_3D ;
      }else if (testForInputString ("-=", 2)) {
        _token._mTokenCode = galgas_scanner_1__2D_3D ;
      }else if (testForInputString (">>", 2)) {
        _token._mTokenCode = galgas_scanner_1__3E_3E ;
      }else if (testForInputString ("<-", 2)) {
        _token._mTokenCode = galgas_scanner_1__3C_2D ;
      }else if (testForInputString ("*", 1)) {
        _token._mTokenCode = galgas_scanner_1__2A ;
      }else if (testForInputString ("|", 1)) {
        _token._mTokenCode = galgas_scanner_1__7C ;
      }else if (testForInputString (",", 1)) {
        _token._mTokenCode = galgas_scanner_1__2C ;
      }else if (testForInputString ("+", 1)) {
        _token._mTokenCode = galgas_scanner_1__2B ;
      }else if (testForInputString (">", 1)) {
        _token._mTokenCode = galgas_scanner_1__3E ;
      }else if (testForInputString (";", 1)) {
        _token._mTokenCode = galgas_scanner_1__3B ;
      }else if (testForInputString (":", 1)) {
        _token._mTokenCode = galgas_scanner_1__3A ;
      }else if (testForInputString ("-", 1)) {
        _token._mTokenCode = galgas_scanner_1__2D ;
      }else if (testForInputString ("(", 1)) {
        _token._mTokenCode = galgas_scanner_1__28 ;
      }else if (testForInputString (")", 1)) {
        _token._mTokenCode = galgas_scanner_1__29 ;
      }else if (testForInputString ("\?", 1)) {
        _token._mTokenCode = galgas_scanner_1__3F ;
      }else if (testForInputString ("!", 1)) {
        _token._mTokenCode = galgas_scanner_1__21 ;
      }else if (testForInputString ("[", 1)) {
        _token._mTokenCode = galgas_scanner_1__5B ;
      }else if (testForInputString ("]", 1)) {
        _token._mTokenCode = galgas_scanner_1__5D ;
      }else if (testForInputString ("/", 1)) {
        _token._mTokenCode = galgas_scanner_1__2F ;
      }else if (testForInputString ("&", 1)) {
        _token._mTokenCode = galgas_scanner_1__26 ;
      }else if (testForInputString ("{", 1)) {
        _token._mTokenCode = galgas_scanner_1__7B ;
      }else if (testForInputString ("}", 1)) {
        _token._mTokenCode = galgas_scanner_1__7D ;
      }else if (testForInputString ("^", 1)) {
        _token._mTokenCode = galgas_scanner_1__5E ;
      }else if (testForInputString ("~", 1)) {
        _token._mTokenCode = galgas_scanner_1__7E ;
      }else if (testForInputChar ('<')) {
        const C_LocationInSource _locationForTag_onlyInfDelimiter = _mCurrentLocation ;
        if (testForInputChar ('=')) {
          _token._mTokenCode = galgas_scanner_1__3C_3D ;
        }else if (testForInputString ("->", 2)) {
          _token._mTokenCode = galgas_scanner_1__3C_2D_3E ;
        }else if (testForInputChar ('<')) {
          _token._mTokenCode = galgas_scanner_1__3C_3C ;
        }else if (testForInputChar ('a', 'z') ||
            testForInputChar ('A', 'Z')) {
          do {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
            if (testForInputChar ('a', 'z') ||
                testForInputChar ('A', 'Z') ||
                testForInputChar ('0', '9') ||
                testForInputChar ('_')) {
            }else{
              loop_ = false ;
            }
          }while (loop_) ;
          loop_ = true ;
          if (testForInputChar ('>')) {
            _token._mTokenCode = galgas_scanner_1_non_5Fterminal_5Fsymbol ;
          }else{
            _mCurrentLocation = _locationForTag_onlyInfDelimiter ;
            _token._mTokenCode = galgas_scanner_1__3C ;
          }
        }else{
          _token._mTokenCode = galgas_scanner_1__3C ;
        }
      }else if (testForInputChar ('\"')) {
        do {
          if (testForInputChar ('\\')) {
            if (testForInputChar ('f')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\f') ;
            }else if (testForInputChar ('n')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\n') ;
            }else if (testForInputChar ('r')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\r') ;
            }else if (testForInputChar ('t')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\t') ;
            }else if (testForInputChar ('v')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\v') ;
            }else if (testForInputChar ('\\')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\\') ;
            }else if (testForInputChar ('0')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\0') ;
            }else if (testForInputChar ('\"')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\"') ;
            }else if (testForInputChar ('\'')) {
              scanner_action_enterCharacterIntoString (_token.tokenString, '\'') ;
            }else if (testForInputChar ('0', '9')) {
              do {
                scanner_action_enterHexDigitIntoASCIIcharacter (_token.charValue, previousChar (), gErrorMessage_5, gErrorMessage_2) ;
                if (testForInputChar ('0', '9')) {
                }else{
                  loop_ = false ;
                }
              }while (loop_) ;
              loop_ = true ;
              scanner_action_enterCharacterIntoString (_token.tokenString, _token.charValue) ;
            }else{
              lexicalError (gErrorMessage_4 COMMA_LINE_AND_SOURCE_FILE) ;
            }
          }else if (testForInputChar (' ') ||
              testForInputChar ('!') ||
              testForInputChar ('#', '\xFF')) {
            scanner_action_enterCharacterIntoString (_token.tokenString, previousChar ()) ;
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('\"')) {
          _token._mTokenCode = galgas_scanner_1_literal_5Fstring ;
        }else{
          lexicalError (gErrorMessage_8 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputChar ('#')) {
        do {
          if (testForInputChar ('\x1', '\t') ||
              testForInputChar ('\v') ||
              testForInputChar ('\f') ||
              testForInputChar ('\xE', '\xFF')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = galgas_scanner_1_comment ;
      }else if (testForInputChar ('\x1', ' ')) {
      }else if (testForInputChar ('\0')) { // End of source text ? 
        _token._mTokenCode = galgas_scanner_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      _token._mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
      throw ;
    }
  }
  return _token._mTokenCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            Styles definition                              *
//                                                                           *
//---------------------------------------------------------------------------*

sint32 galgas_scanner::getStylesCount (void) {
  return 11 ;
}

//---------------------------------------------------------------------------*

const char * galgas_scanner::getStyleName (const sint32 inIndex) {
  const char * kStylesArray [12] = {"Default style", "Keywords:", "Delimiters:", "Terminal Symbols:", "Non Terminal Symbols:", "Integer Constants:", "Floating Point Constants:", "Character Constants:", "String Constants:", "Type Names (@...):", "Comments:", NULL} ;
  return (inIndex < 11) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

const char * galgas_scanner::getStyleIdentifier (const sint32 inIndex) {
  const char * kStylesArray [12] = {"", "keywordsStyle", "delimitersStyle", "terminalStyle", "nonTerminalStyle", "integerStyle", "float_csts", "characterStyle", "stringStyle", "typeNameStyle", "commentStyle", NULL} ;
  return (inIndex < 11) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

uint8 galgas_scanner::
terminalStyleIndex (const sint32 inTerminal) {
  static const uint8 kTerminalSymbolStyles [142] = {0,
    0 /* galgas_scanner_1_identifier */,
    1 /* galgas_scanner_1_abstract */,
    1 /* galgas_scanner_1_after */,
    1 /* galgas_scanner_1_before */,
    1 /* galgas_scanner_1_between */,
    1 /* galgas_scanner_1_block */,
    1 /* galgas_scanner_1_cast */,
    1 /* galgas_scanner_1_class */,
    1 /* galgas_scanner_1_compile */,
    1 /* galgas_scanner_1_const */,
    1 /* galgas_scanner_1_constructor */,
    1 /* galgas_scanner_1_default */,
    1 /* galgas_scanner_1_description */,
    1 /* galgas_scanner_1_do */,
    1 /* galgas_scanner_1_domain */,
    1 /* galgas_scanner_1_drop */,
    1 /* galgas_scanner_1_else */,
    1 /* galgas_scanner_1_elsif */,
    1 /* galgas_scanner_1_end */,
    1 /* galgas_scanner_1_entity */,
    1 /* galgas_scanner_1_enum */,
    1 /* galgas_scanner_1_error */,
    1 /* galgas_scanner_1_extends */,
    1 /* galgas_scanner_1_extern */,
    1 /* galgas_scanner_1_extract */,
    1 /* galgas_scanner_1_false */,
    1 /* galgas_scanner_1_filewrapper */,
    1 /* galgas_scanner_1_foreach */,
    1 /* galgas_scanner_1_grammar */,
    1 /* galgas_scanner_1_gui */,
    1 /* galgas_scanner_1_here */,
    1 /* galgas_scanner_1_if */,
    1 /* galgas_scanner_1_import */,
    1 /* galgas_scanner_1_import_5F_5F */,
    1 /* galgas_scanner_1_in */,
    1 /* galgas_scanner_1_insert */,
    1 /* galgas_scanner_1_label */,
    1 /* galgas_scanner_1_lexique */,
    1 /* galgas_scanner_1_list */,
    1 /* galgas_scanner_1_listmap */,
    1 /* galgas_scanner_1_log */,
    1 /* galgas_scanner_1_loop */,
    1 /* galgas_scanner_1_map */,
    1 /* galgas_scanner_1_mapindex */,
    1 /* galgas_scanner_1_match */,
    1 /* galgas_scanner_1_message */,
    1 /* galgas_scanner_1_method */,
    1 /* galgas_scanner_1_mod */,
    1 /* galgas_scanner_1_modifier */,
    1 /* galgas_scanner_1_nonterminal */,
    1 /* galgas_scanner_1_not */,
    1 /* galgas_scanner_1_on */,
    1 /* galgas_scanner_1_once */,
    1 /* galgas_scanner_1_operator */,
    1 /* galgas_scanner_1_option */,
    1 /* galgas_scanner_1_or */,
    1 /* galgas_scanner_1_override */,
    1 /* galgas_scanner_1_parse */,
    1 /* galgas_scanner_1_program */,
    1 /* galgas_scanner_1_reader */,
    1 /* galgas_scanner_1_remove */,
    1 /* galgas_scanner_1_replace */,
    1 /* galgas_scanner_1_repeat */,
    1 /* galgas_scanner_1_rewind */,
    1 /* galgas_scanner_1_root */,
    1 /* galgas_scanner_1_routine */,
    1 /* galgas_scanner_1_rule */,
    1 /* galgas_scanner_1_search */,
    1 /* galgas_scanner_1_select */,
    1 /* galgas_scanner_1_self */,
    1 /* galgas_scanner_1_semantics */,
    1 /* galgas_scanner_1_send */,
    1 /* galgas_scanner_1_sortedlist */,
    1 /* galgas_scanner_1_state */,
    1 /* galgas_scanner_1_struct */,
    1 /* galgas_scanner_1_style */,
    1 /* galgas_scanner_1_switch */,
    1 /* galgas_scanner_1_syntax */,
    1 /* galgas_scanner_1_tag */,
    1 /* galgas_scanner_1_template */,
    1 /* galgas_scanner_1_then */,
    1 /* galgas_scanner_1_true */,
    1 /* galgas_scanner_1_unused */,
    1 /* galgas_scanner_1_warning */,
    1 /* galgas_scanner_1_when */,
    1 /* galgas_scanner_1_while */,
    1 /* galgas_scanner_1_xmlmapping */,
    1 /* galgas_scanner_1_xmlparse */,
    6 /* galgas_scanner_1_literal_5Fdouble */,
    5 /* galgas_scanner_1_unsigned_5Fliteral_5Finteger */,
    5 /* galgas_scanner_1_signed_5Fliteral_5Finteger */,
    5 /* galgas_scanner_1_unsigned_5Fliteral_5Finteger64 */,
    5 /* galgas_scanner_1_signed_5Fliteral_5Finteger64 */,
    2 /* galgas_scanner_1__2E */,
    2 /* galgas_scanner_1__2E_3D */,
    2 /* galgas_scanner_1__2E_2E_2E */,
    9 /* galgas_scanner_1_type_5Fname */,
    7 /* galgas_scanner_1_literal_5Fchar */,
    3 /* galgas_scanner_1_terminal */,
    2 /* galgas_scanner_1__2A */,
    2 /* galgas_scanner_1__7C */,
    2 /* galgas_scanner_1__2C */,
    2 /* galgas_scanner_1__2B */,
    2 /* galgas_scanner_1__2D_2D */,
    2 /* galgas_scanner_1__3A_3A */,
    2 /* galgas_scanner_1__3E */,
    2 /* galgas_scanner_1__3B */,
    2 /* galgas_scanner_1__3A */,
    2 /* galgas_scanner_1__2D */,
    2 /* galgas_scanner_1__28 */,
    2 /* galgas_scanner_1__29 */,
    2 /* galgas_scanner_1__2D_3E */,
    2 /* galgas_scanner_1__3F */,
    2 /* galgas_scanner_1__3D_3D */,
    2 /* galgas_scanner_1__3F_3F */,
    2 /* galgas_scanner_1__21 */,
    2 /* galgas_scanner_1__3A_3D */,
    2 /* galgas_scanner_1__2B_2B */,
    2 /* galgas_scanner_1__5B */,
    2 /* galgas_scanner_1__5D */,
    2 /* galgas_scanner_1__2B_3D */,
    2 /* galgas_scanner_1__3F_21 */,
    2 /* galgas_scanner_1__21_3F */,
    2 /* galgas_scanner_1__2F */,
    2 /* galgas_scanner_1__21_3D */,
    2 /* galgas_scanner_1__3E_3D */,
    2 /* galgas_scanner_1__26 */,
    2 /* galgas_scanner_1__7B */,
    2 /* galgas_scanner_1__7D */,
    2 /* galgas_scanner_1__2D_3D */,
    2 /* galgas_scanner_1__5E */,
    2 /* galgas_scanner_1__3E_3E */,
    2 /* galgas_scanner_1__7E */,
    2 /* galgas_scanner_1__3C_2D */,
    2 /* galgas_scanner_1__3C */,
    2 /* galgas_scanner_1__3C_2D_3E */,
    2 /* galgas_scanner_1__3C_3D */,
    2 /* galgas_scanner_1__3C_3C */,
    4 /* galgas_scanner_1_non_5Fterminal_5Fsymbol */,
    8 /* galgas_scanner_1_literal_5Fstring */,
    10 /* galgas_scanner_1_comment */
  } ;
  return kTerminalSymbolStyles [inTerminal] ;
}

//---------------------------------------------------------------------------*

void galgas_scanner::_enterToken (const cTokenFor_galgas_scanner & inToken) {
  cTokenFor_galgas_scanner * _p = NULL ;
  macroMyNew (_p, cTokenFor_galgas_scanner ()) ;
  _p->_mTokenCode = inToken._mTokenCode ;
  _p->_mFirstLocation = _mTokenFirstLocation ;
  _p->_mLastLocation  = _mTokenLastLocation ;
  _p->_mTemplateStringBeforeToken  = inToken._mTemplateStringBeforeToken ;
  _p->identifierString = inToken.identifierString ;
  _p->uint32value = inToken.uint32value ;
  _p->sint32value = inToken.sint32value ;
  _p->uint64value = inToken.uint64value ;
  _p->sint64value = inToken.sint64value ;
  _p->charValue = inToken.charValue ;
  _p->tokenString = inToken.tokenString ;
  _p->floatValue = inToken.floatValue ;
  _enterTokenFromPointer (_p) ;
}

//---------------------------------------------------------------------------*

void galgas_scanner::
_assignFromAttribute_identifierString (GGS_lstring & outValue) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, _p->identifierString) ;
}

//---------------------------------------------------------------------------*

C_String galgas_scanner::
_attributeValue_identifierString (void) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  return _p->identifierString ;
}

//---------------------------------------------------------------------------*

void galgas_scanner::
_assignFromAttribute_uint32value (GGS_luint & outValue) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  outValue = GGS_luint (* this, _p->uint32value) ;
}

//---------------------------------------------------------------------------*

uint32 galgas_scanner::
_attributeValue_uint32value (void) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  return _p->uint32value ;
}

//---------------------------------------------------------------------------*

void galgas_scanner::
_assignFromAttribute_sint32value (GGS_lsint & outValue) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  outValue = GGS_lsint (* this, _p->sint32value) ;
}

//---------------------------------------------------------------------------*

sint32 galgas_scanner::
_attributeValue_sint32value (void) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  return _p->sint32value ;
}

//---------------------------------------------------------------------------*

void galgas_scanner::
_assignFromAttribute_uint64value (GGS_luint64 & outValue) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  outValue = GGS_luint64 (* this, _p->uint64value) ;
}

//---------------------------------------------------------------------------*

uint64 galgas_scanner::
_attributeValue_uint64value (void) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  return _p->uint64value ;
}

//---------------------------------------------------------------------------*

void galgas_scanner::
_assignFromAttribute_sint64value (GGS_lsint64 & outValue) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  outValue = GGS_lsint64 (* this, _p->sint64value) ;
}

//---------------------------------------------------------------------------*

sint64 galgas_scanner::
_attributeValue_sint64value (void) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  return _p->sint64value ;
}

//---------------------------------------------------------------------------*

void galgas_scanner::
_assignFromAttribute_charValue (GGS_lchar & outValue) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  outValue = GGS_lchar (* this, _p->charValue) ;
}

//---------------------------------------------------------------------------*

char galgas_scanner::
_attributeValue_charValue (void) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  return _p->charValue ;
}

//---------------------------------------------------------------------------*

void galgas_scanner::
_assignFromAttribute_tokenString (GGS_lstring & outValue) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, _p->tokenString) ;
}

//---------------------------------------------------------------------------*

C_String galgas_scanner::
_attributeValue_tokenString (void) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  return _p->tokenString ;
}

//---------------------------------------------------------------------------*

void galgas_scanner::
_assignFromAttribute_floatValue (GGS_ldouble & outValue) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  outValue = GGS_ldouble (* this, _p->floatValue) ;
}

//---------------------------------------------------------------------------*

double galgas_scanner::
_attributeValue_floatValue (void) const {
  cTokenFor_galgas_scanner * _p = (cTokenFor_galgas_scanner *) mCurrentTokenPtr ;
  return _p->floatValue ;
}

//---------------------------------------------------------------------------*

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*

