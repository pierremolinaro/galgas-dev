//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'semanticAnalysis.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     november 14th, 2010, at 15h5'27"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "semanticAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "templateGrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "checkMethodSignatures"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkMethodSignatures (C_CompilerEx & inLexique,
                                const GGS_formalParameterListForGeneration   var_cas_inTestedSignature,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_formalParameterSignature   var_cas_inReferenceSignature,
                                const GGS_location   var_cas_inReferenceLocation
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkMethodSignatures at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_2809 = (var_cas_inTestedSignature.reader_length ()).operator_isNotEqual (var_cas_inReferenceSignature.reader_length ()) ;
  if (cond_2809.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("this method declares ")).operator_concat (var_cas_inTestedSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (43)))).operator_concat (GGS_string (" formal parameter(s), but overriden method declares "))).operator_concat (var_cas_inReferenceSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (44))) COMMA_SOURCE_FILE_AT_LINE (46)) ;
    var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden method is declared here") COMMA_SOURCE_FILE_AT_LINE (47)) ;
  }else if (cond_2809.isBuiltAndFalse ()) {
    {
      GGS_formalParameterSignature::cEnumerator enumerator_2842 (var_cas_inReferenceSignature, true) ;
      const GGS_formalParameterSignature::cElement * operand_2842 = NULL ;
      GGS_formalParameterListForGeneration::cEnumerator enumerator_2877 (var_cas_inTestedSignature, true) ;
      const GGS_formalParameterListForGeneration::cElement * operand_2877 = NULL ;
      while (((operand_2842 = enumerator_2842.nextObject ()))
          && ((operand_2877 = enumerator_2877.nextObject ()))) {
        macroValidPointer (operand_2842) ;
        macroValidPointer (operand_2877) ;
        const GGS_bool cond_3314 = (operand_2842->mFormalArgumentPassingMode).operator_isNotEqual (operand_2877->mFormalArgumentPassingMode) ;
        if (cond_3314.isBuiltAndTrue ()) {
          operand_2877->mFormalArgumentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("the '")).operator_concat (operand_2877->mFormalArgumentName)).operator_concat (GGS_string ("' formal parameter is declared as "))).operator_concat (operand_2877->mFormalArgumentPassingMode.reader_formalArgumentMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (51)))).operator_concat (GGS_string (", but overriden method declares it as "))).operator_concat (operand_2842->mFormalArgumentPassingMode.reader_formalArgumentMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (52))) COMMA_SOURCE_FILE_AT_LINE (53)) ;
          var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden method is declared here") COMMA_SOURCE_FILE_AT_LINE (54)) ;
        }
        const GGS_bool cond_3718 = (operand_2877->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (55))).operator_isNotEqual (operand_2842->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (55))) ;
        if (cond_3718.isBuiltAndTrue ()) {
          operand_2877->mFormalArgumentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the '")).operator_concat (operand_2877->mFormalArgumentName)).operator_concat (GGS_string ("' formal parameter has the '@"))).operator_concat (operand_2877->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (57)))).operator_concat (GGS_string ("' type, but overriden method declares with the '@"))).operator_concat (operand_2842->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (58)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (59)) ;
          var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden method is declared here") COMMA_SOURCE_FILE_AT_LINE (60)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkMethodSignatures\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "checkReaderSignatures"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkReaderSignatures (C_CompilerEx & inLexique,
                                const GGS_formalInputParameterListForGeneration   var_cas_inTestedSignature,
                                const GGS_unifiedTypeMapProxy   var_cas_inReturnType,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_unifiedTypeMapProxyList   var_cas_inReferenceSignature,
                                const GGS_unifiedTypeMapProxy   var_cas_inInheritedReturnType,
                                const GGS_location   var_cas_inReferenceLocation
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkReaderSignatures at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_4756 = (var_cas_inReturnType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (79))).operator_isNotEqual (var_cas_inInheritedReturnType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (79))) ;
  if (cond_4756.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the return type is '@")).operator_concat (var_cas_inReturnType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (81)))).operator_concat (GGS_string ("', but overriden reader names '@"))).operator_concat (var_cas_inInheritedReturnType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (82)))).operator_concat (GGS_string ("' as return type")) COMMA_SOURCE_FILE_AT_LINE (83)) ;
    var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden reader is declared here") COMMA_SOURCE_FILE_AT_LINE (84)) ;
  }
  const GGS_bool cond_5102 = (var_cas_inTestedSignature.reader_length ()).operator_isNotEqual (var_cas_inReferenceSignature.reader_length ()) ;
  if (cond_5102.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("this reader declares ")).operator_concat (var_cas_inTestedSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (86)))).operator_concat (GGS_string (" formal parameter(s), but overriden reader declares "))).operator_concat (var_cas_inReferenceSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (87))) COMMA_SOURCE_FILE_AT_LINE (89)) ;
    var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden reader is declared here") COMMA_SOURCE_FILE_AT_LINE (90)) ;
  }else if (cond_5102.isBuiltAndFalse ()) {
    {
      GGS_unifiedTypeMapProxyList::cEnumerator enumerator_5135 (var_cas_inReferenceSignature, true) ;
      const GGS_unifiedTypeMapProxyList::cElement * operand_5135 = NULL ;
      GGS_formalInputParameterListForGeneration::cEnumerator enumerator_5170 (var_cas_inTestedSignature, true) ;
      const GGS_formalInputParameterListForGeneration::cElement * operand_5170 = NULL ;
      while (((operand_5135 = enumerator_5135.nextObject ()))
          && ((operand_5170 = enumerator_5170.nextObject ()))) {
        macroValidPointer (operand_5135) ;
        macroValidPointer (operand_5170) ;
        const GGS_bool cond_5544 = (operand_5170->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (92))).operator_isNotEqual (operand_5135->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (92))) ;
        if (cond_5544.isBuiltAndTrue ()) {
          operand_5170->mFormalArgumentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the '")).operator_concat (operand_5170->mFormalArgumentName)).operator_concat (GGS_string ("' formal parameter has the '@"))).operator_concat (operand_5170->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (94)))).operator_concat (GGS_string ("' type, but overriden reader declares with the '@"))).operator_concat (operand_5135->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (95)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (96)) ;
          var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden reader is declared here") COMMA_SOURCE_FILE_AT_LINE (97)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkReaderSignatures\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@semanticDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticDeclarationAST__performSemanticAnalysis (C_CompilerEx &,
                                const cPtr_semanticDeclarationAST * operand_6039,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & /* var_cas_ioSemanticDeclarationListForGeneration */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6039 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticDeclarationAST.performSemanticAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis> gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis
findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis result = NULL ;
  if (NULL != inClassPtr) {
    if (inClassPtr->slotID () < gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.count ()) {
      result = gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis (inClassPtr->slotID () COMMA_HERE) ;
    }
    if (NULL == result) {
      AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
      if (superClassPtr != NULL) {
        result = findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (superClassPtr) ;
        gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@predefinedTypeAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__predefinedTypeAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_predefinedTypeAST * operand_6379,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6379 != NULL) {
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_primitiveTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, operand_6379->mPredefinedTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (123)) COMMA_SOURCE_FILE_AT_LINE (123)), operand_6379->mPredefinedTypeName, operand_6379->mKind COMMA_SOURCE_FILE_AT_LINE (122)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'e_attributeIndexMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

e_attributeIndexMap::e_attributeIndexMap (void) :
mAttributeTypeIndex () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class map '@attributeIndexMap'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_attributeIndexMap ("attributeIndexMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_attributeIndexMap::
elementOf_GGS_attributeIndexMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_attributeIndexMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_attributeIndexMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mAttributeTypeIndex.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_attributeIndexMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_attributeIndexMap * ptr = dynamic_cast <const elementOf_GGS_attributeIndexMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mAttributeTypeIndex.operator_isEqual (ptr->mInfo.mAttributeTypeIndex)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_attributeIndexMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_attributeIndexMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_attributeIndexMap * info = (e_attributeIndexMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_attributeIndexMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_attributeIndexMap * info = (e_attributeIndexMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::
constructor_emptyMap (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_attributeIndexMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_attributeIndexMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::modifier_insertFakeKey (C_CompilerEx & inCompiler,
                         const GGS_string & inKey,
                         const GGS_location & inHelperMessageErrorLocation,
                         const GGS_string & inHelperMessage
                         COMMA_LOCATION_ARGS) {
  e_attributeIndexMap info  ;
  internal_insertFakeKey (inCompiler,
                          (void *) & info,
                          inKey,
                          inHelperMessageErrorLocation,
                          inHelperMessage
                          COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_attributeIndexMap::
operator_isEqual (const GGS_attributeIndexMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_attributeIndexMap::
operator_isNotEqual (const GGS_attributeIndexMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
insertElement (C_CompilerEx & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_unifiedTypeMapProxy & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_attributeIndexMap info  ;
    info.mAttributeTypeIndex = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
searchElement (C_CompilerEx & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_unifiedTypeMapProxy   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inLexique, inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mAttributeTypeIndex ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_attributeIndexMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
method_searchKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_attributeIndexMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
modifier_insertKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::
constructor_mapWithMapToOverride (C_CompilerEx & /* inLexique */,
                                  const GGS_attributeIndexMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_attributeIndexMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::
reader_overriddenMap (C_CompilerEx & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_attributeIndexMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_attributeIndexMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @attributeIndexMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_attributeIndexMap::cEnumerator::_mAttributeTypeIndex (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mAttributeTypeIndex ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_attributeIndexMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_attributeIndexMap * p = NULL ;
    macroMyNew (p, GGS_attributeIndexMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_attributeIndexMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_attributeIndexMap * p = dynamic_cast <const GGS_attributeIndexMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_attributeIndexMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_attributeIndexMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_attributeIndexMap ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::constructor_mapWithKeyAndValue (C_CompilerEx & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_unifiedTypeMapProxy & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_attributeIndexMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@listDeclarationAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_listDeclarationAST * operand_7245,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7245 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (148)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_7546 (operand_7245->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_7546 = NULL ;
      while (((operand_7546 = enumerator_7546.nextObject ()))) {
        macroValidPointer (operand_7546) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_7546->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (150)) ;
        GGS_bool var_cas_hasGetter = GGS_bool (true) ;
        GGS_bool var_cas_hasSetter = GGS_bool (true) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_7546->mAttributeName, var_cas_hasSetter, var_cas_hasGetter) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_7546->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (159)) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_listTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_7245->mListTypeName COMMA_SOURCE_FILE_AT_LINE (162)), var_cas_typedAttributeList COMMA_SOURCE_FILE_AT_LINE (161)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@sortedListDeclarationAST.performSemanticAnalysis'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sortedListDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_sortedListDeclarationAST * operand_8217,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8217 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (179)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_8533 (operand_8217->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_8533 = NULL ;
      while (((operand_8533 = enumerator_8533.nextObject ()))) {
        macroValidPointer (operand_8533) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_8533->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (181)) ;
        GGS_bool var_cas_hasSetter = GGS_bool (true) ;
        GGS_bool var_cas_hasGetter = GGS_bool (true) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_8533->mAttributeName, var_cas_hasSetter, var_cas_hasGetter) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_8533->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (190)) ;
      }
    }
    GGS_stringset  var_cas_attributesUsedForSorting = GGS_stringset ::constructor_emptySet () ;
    GGS_sortDescriptorListForGeneration  var_cas_sortDescriptorList = GGS_sortDescriptorListForGeneration ::constructor_emptyList () ;
    {
      GGS_sortedListSortDescriptorListAST::cEnumerator enumerator_9021 (operand_8217->mSortDescriptorList, true) ;
      const GGS_sortedListSortDescriptorListAST::cElement * operand_9021 = NULL ;
      while (((operand_9021 = enumerator_9021.nextObject ()))) {
        macroValidPointer (operand_9021) ;
        GGS_unifiedTypeMapProxy  var_cas_type ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_9021->mSortedAttributeName, var_cas_type COMMA_SOURCE_FILE_AT_LINE (197)) ;
        }
        var_cas_sortDescriptorList.addAssign_operation (var_cas_type, operand_9021->mSortedAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (198)), operand_9021->mAscending) ;
        const GGS_bool cond_9379 = var_cas_attributesUsedForSorting.reader_hasKey (operand_9021->mSortedAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (199))) ;
        if (cond_9379.isBuiltAndTrue ()) {
          operand_9021->mSortedAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_9021->mSortedAttributeName)).operator_concat (GGS_string ("' is already used for sorting")) COMMA_SOURCE_FILE_AT_LINE (201)) ;
        }
        var_cas_attributesUsedForSorting.addAssign_operation (operand_9021->mSortedAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (202))) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_sortedListTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_8217->mSortedListTypeName COMMA_SOURCE_FILE_AT_LINE (206)), var_cas_typedAttributeList, var_cas_sortDescriptorList COMMA_SOURCE_FILE_AT_LINE (205)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@structDeclarationAST.performSemanticAnalysis'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__structDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_structDeclarationAST * operand_9869,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9869 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (223)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_10170 (operand_9869->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_10170 = NULL ;
      while (((operand_10170 = enumerator_10170.nextObject ()))) {
        macroValidPointer (operand_10170) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_10170->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (225)) ;
        {
          GGS_lstringlist::cEnumerator enumerator_10288 (operand_10170->mFeatureList, true) ;
          const GGS_lstringlist::cElement * operand_10288 = NULL ;
          while (((operand_10288 = enumerator_10288.nextObject ()))) {
            macroValidPointer (operand_10288) ;
            operand_10288->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a struct attribute accepts no feature") COMMA_SOURCE_FILE_AT_LINE (228)) ;
          }
        }
        GGS_bool var_cas_hasSetter = GGS_bool (false) ;
        GGS_bool var_cas_hasGetter = GGS_bool (false) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_10170->mAttributeName, var_cas_hasSetter, var_cas_hasGetter) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_10170->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (237)) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_structTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_9869->mStructTypeName COMMA_SOURCE_FILE_AT_LINE (240)), var_cas_typedAttributeList COMMA_SOURCE_FILE_AT_LINE (239)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'e_constantIndexMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

e_constantIndexMap::e_constantIndexMap (void) :
mIndex () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class map '@constantIndexMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_constantIndexMap ("constantIndexMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_constantIndexMap::
elementOf_GGS_constantIndexMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_constantIndexMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_constantIndexMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mIndex.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_constantIndexMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_constantIndexMap * ptr = dynamic_cast <const elementOf_GGS_constantIndexMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mIndex.operator_isEqual (ptr->mInfo.mIndex)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_constantIndexMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_constantIndexMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_constantIndexMap * info = (e_constantIndexMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_constantIndexMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_constantIndexMap * info = (e_constantIndexMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::
constructor_emptyMap (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_constantIndexMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_constantIndexMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::modifier_insertFakeKey (C_CompilerEx & inCompiler,
                         const GGS_string & inKey,
                         const GGS_location & inHelperMessageErrorLocation,
                         const GGS_string & inHelperMessage
                         COMMA_LOCATION_ARGS) {
  e_constantIndexMap info  ;
  internal_insertFakeKey (inCompiler,
                          (void *) & info,
                          inKey,
                          inHelperMessageErrorLocation,
                          inHelperMessage
                          COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_constantIndexMap::
operator_isEqual (const GGS_constantIndexMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_constantIndexMap::
operator_isNotEqual (const GGS_constantIndexMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
insertElement (C_CompilerEx & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_uint & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_constantIndexMap info  ;
    info.mIndex = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
searchElement (C_CompilerEx & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inLexique, inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mIndex ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_constantIndexMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
method_searchKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_constantIndexMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
modifier_insertKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::
constructor_mapWithMapToOverride (C_CompilerEx & /* inLexique */,
                                  const GGS_constantIndexMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_constantIndexMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::
reader_overriddenMap (C_CompilerEx & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_constantIndexMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_constantIndexMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @constantIndexMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_constantIndexMap::cEnumerator::_mIndex (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mIndex ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_constantIndexMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_constantIndexMap * p = NULL ;
    macroMyNew (p, GGS_constantIndexMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_constantIndexMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_constantIndexMap * p = dynamic_cast <const GGS_constantIndexMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_constantIndexMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_constantIndexMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_constantIndexMap ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::constructor_mapWithKeyAndValue (C_CompilerEx & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_uint & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_constantIndexMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@enumDeclarationAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__enumDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_enumDeclarationAST * operand_11218,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11218 != NULL) {
    GGS_stringlist  var_cas_constantList = GGS_stringlist ::constructor_emptyList () ;
    GGS_constantIndexMap  var_cas_constantMap = GGS_constantIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (264)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_11521 (operand_11218->mConstantList, true) ;
      const GGS_lstringlist::cElement * operand_11521 = NULL ;
      while (((operand_11521 = enumerator_11521.nextObject ()))) {
        macroValidPointer (operand_11521) ;
        var_cas_constantList.addAssign_operation (operand_11521->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (266))) ;
        var_cas_constantMap.modifier_insertKey (inLexique, operand_11521->mValue, var_cas_constantMap.reader_count () COMMA_SOURCE_FILE_AT_LINE (267)) ;
      }
    }
    const GGS_stringset  var_cas_constantSet = var_cas_constantMap.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (269)) ;
    GGS_enumMessageListForGeneration  var_cas_enumMessageList = GGS_enumMessageListForGeneration ::constructor_emptyList () ;
    GGS_stringset  var_cas_messageNameSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_enumMessageListAST::cEnumerator enumerator_11842 (operand_11218->mEnumMessageList, true) ;
      const GGS_enumMessageListAST::cElement * operand_11842 = NULL ;
      while (((operand_11842 = enumerator_11842.nextObject ()))) {
        macroValidPointer (operand_11842) ;
        const GGS_bool cond_12003 = var_cas_messageNameSet.reader_hasKey (operand_11842->mEnumMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (274))) ;
        if (cond_12003.isBuiltAndTrue ()) {
          operand_11842->mEnumMessageName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this message is already declared for this enum type") COMMA_SOURCE_FILE_AT_LINE (276)) ;
        }
        var_cas_messageNameSet.addAssign_operation (operand_11842->mEnumMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (277))) ;
        GGS_enumMessageAssociationSortedListForGeneration  var_cas_enumMessageAssociationSortedListForGeneration = GGS_enumMessageAssociationSortedListForGeneration ::constructor_emptySortedList () ;
        GGS_stringset  var_cas_usedConstantSet = GGS_stringset ::constructor_emptySet () ;
        {
          GGS_enumMessageAssociationListAST::cEnumerator enumerator_12293 (operand_11842->mMessageAssociationList, true) ;
          const GGS_enumMessageAssociationListAST::cElement * operand_12293 = NULL ;
          while (((operand_12293 = enumerator_12293.nextObject ()))) {
            macroValidPointer (operand_12293) ;
            GGS_uint  var_cas_constantIndex ;
            if (var_cas_constantMap.isBuilt ()) {
              var_cas_constantMap (HERE)->method_searchKey (inLexique, operand_12293->mConstantName, var_cas_constantIndex COMMA_SOURCE_FILE_AT_LINE (282)) ;
            }
            var_cas_usedConstantSet.addAssign_operation (operand_12293->mConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (283))) ;
            var_cas_enumMessageAssociationSortedListForGeneration.addAssign_operation (var_cas_constantIndex, operand_12293->mConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (286)), operand_12293->mMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (287))) ;
          }
        }
        const GGS_stringset  var_cas_missedConstantSet = var_cas_constantSet.substract_operation (inLexique, var_cas_usedConstantSet COMMA_SOURCE_FILE_AT_LINE (290)) ;
        {
          GGS_stringset::cEnumerator enumerator_12704 (var_cas_missedConstantSet, true) ;
          while (enumerator_12704.hasCurrentObject ()) {
            operand_11842->mEnumMessageName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (operand_11842->mEnumMessageName)).operator_concat (GGS_string ("' message definition does not name the '"))).operator_concat (enumerator_12704._key (HERE))).operator_concat (GGS_string ("' constant")) COMMA_SOURCE_FILE_AT_LINE (294)) ;
            enumerator_12704.next () ;
          }
        }
        var_cas_enumMessageList.addAssign_operation (operand_11842->mEnumMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (295)), var_cas_enumMessageAssociationSortedListForGeneration) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_enumTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_11218->mEnumTypeName COMMA_SOURCE_FILE_AT_LINE (299)), var_cas_constantList, var_cas_enumMessageList COMMA_SOURCE_FILE_AT_LINE (298)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@listmapDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listmapDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_listmapDeclarationAST * operand_13343,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13343 != NULL) {
    GGS_typeKindEnum var_cas_typeKindEnum ;
    GGS_typedAttributeList  var_cas_listTypeAttributeList ;
    GGS_bool automatic_var_13753_0 ;
    GGS_unifiedTypeMapProxy  automatic_var_13753_1 ;
    GGS_attributeMap  automatic_var_13753_2 ;
    GGS_typedAttributeList  automatic_var_13753_3 ;
    GGS_constructorMap  automatic_var_13753_4 ;
    GGS_readerMap  automatic_var_13753_5 ;
    GGS_modifierMap  automatic_var_13753_6 ;
    GGS_instanceMethodMap  automatic_var_13753_7 ;
    GGS_classMethodMap  automatic_var_13753_8 ;
    GGS_enumerationDescriptorList  automatic_var_13753_9 ;
    GGS_uint  automatic_var_13753_10 ;
    GGS_unifiedTypeMapProxyList  automatic_var_13753_11 ;
    GGS_stringset  automatic_var_13753_12 ;
    GGS_lstringlist  automatic_var_13753_13 ;
    GGS_mapSearchMethodListAST  automatic_var_13753_14 ;
    GGS_mapSearchMethodListAST  automatic_var_13753_15 ;
    GGS_withAccessorMap  automatic_var_13753_16 ;
    GGS_bool automatic_var_13753_17 ;
    if (var_cas_inSemanticContext.mTypeMap.isBuilt ()) {
      var_cas_inSemanticContext.mTypeMap (HERE)->method_searchKey (inLexique, operand_13343->mAssociatedListTypeName, automatic_var_13753_0, automatic_var_13753_1, var_cas_typeKindEnum, var_cas_listTypeAttributeList, automatic_var_13753_2, automatic_var_13753_3, automatic_var_13753_4, automatic_var_13753_5, automatic_var_13753_6, automatic_var_13753_7, automatic_var_13753_8, automatic_var_13753_9, automatic_var_13753_10, automatic_var_13753_11, automatic_var_13753_12, automatic_var_13753_13, automatic_var_13753_14, automatic_var_13753_15, automatic_var_13753_16, automatic_var_13753_17 COMMA_SOURCE_FILE_AT_LINE (317)) ;
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_listmapTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_13343->mListmapTypeName COMMA_SOURCE_FILE_AT_LINE (320)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_13343->mAssociatedListTypeName COMMA_SOURCE_FILE_AT_LINE (321)), var_cas_listTypeAttributeList COMMA_SOURCE_FILE_AT_LINE (319)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class map '@insertMethodMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_insertMethodMap ("insertMethodMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_insertMethodMap::
elementOf_GGS_insertMethodMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_insertMethodMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_insertMethodMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_insertMethodMap::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_insertMethodMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_insertMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_insertMethodMap * info = (e_insertMethodMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_insertMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_insertMethodMap * info = (e_insertMethodMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::
constructor_emptyMap (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_insertMethodMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_insertMethodMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::modifier_insertFakeKey (C_CompilerEx & inCompiler,
                         const GGS_string & inKey,
                         const GGS_location & inHelperMessageErrorLocation,
                         const GGS_string & inHelperMessage
                         COMMA_LOCATION_ARGS) {
  e_insertMethodMap info  ;
  internal_insertFakeKey (inCompiler,
                          (void *) & info,
                          inKey,
                          inHelperMessageErrorLocation,
                          inHelperMessage
                          COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_insertMethodMap::
operator_isEqual (const GGS_insertMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_insertMethodMap::
operator_isNotEqual (const GGS_insertMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
insertElement (C_CompilerEx & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_insertMethodMap info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
searchElement (C_CompilerEx & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inLexique, inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_insertMethodMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
modifier_insertKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::
constructor_mapWithMapToOverride (C_CompilerEx & /* inLexique */,
                                  const GGS_insertMethodMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_insertMethodMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::
reader_overriddenMap (C_CompilerEx & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_insertMethodMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_insertMethodMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @insertMethodMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_insertMethodMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_insertMethodMap * p = NULL ;
    macroMyNew (p, GGS_insertMethodMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_insertMethodMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_insertMethodMap * p = dynamic_cast <const GGS_insertMethodMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_insertMethodMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_insertMethodMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_insertMethodMap ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::constructor_mapWithKeyAndValue (C_CompilerEx & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_insertMethodMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class map '@searchMethodMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_searchMethodMap ("searchMethodMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_searchMethodMap::
elementOf_GGS_searchMethodMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_searchMethodMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_searchMethodMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_searchMethodMap::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_searchMethodMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_searchMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_searchMethodMap * info = (e_searchMethodMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_searchMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_searchMethodMap * info = (e_searchMethodMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::
constructor_emptyMap (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_searchMethodMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_searchMethodMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::modifier_insertFakeKey (C_CompilerEx & inCompiler,
                         const GGS_string & inKey,
                         const GGS_location & inHelperMessageErrorLocation,
                         const GGS_string & inHelperMessage
                         COMMA_LOCATION_ARGS) {
  e_searchMethodMap info  ;
  internal_insertFakeKey (inCompiler,
                          (void *) & info,
                          inKey,
                          inHelperMessageErrorLocation,
                          inHelperMessage
                          COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_searchMethodMap::
operator_isEqual (const GGS_searchMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_searchMethodMap::
operator_isNotEqual (const GGS_searchMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
insertElement (C_CompilerEx & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_searchMethodMap info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
searchElement (C_CompilerEx & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inLexique, inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_searchMethodMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
modifier_insertKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::
constructor_mapWithMapToOverride (C_CompilerEx & /* inLexique */,
                                  const GGS_searchMethodMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_searchMethodMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::
reader_overriddenMap (C_CompilerEx & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_searchMethodMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_searchMethodMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @searchMethodMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_searchMethodMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_searchMethodMap * p = NULL ;
    macroMyNew (p, GGS_searchMethodMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_searchMethodMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_searchMethodMap * p = dynamic_cast <const GGS_searchMethodMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_searchMethodMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_searchMethodMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_searchMethodMap ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::constructor_mapWithKeyAndValue (C_CompilerEx & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_searchMethodMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "check_K_escapeCharacters"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_check_K_escapeCharacters (C_CompilerEx & inLexique,
                                GGS_lstring   var_cas_inString
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_check_K_escapeCharacters at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_stringlist::cEnumerator enumerator_14786 (var_cas_inString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (348)).reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
    const GGS_stringlist::cElement * operand_14786 = NULL ;
    while (((operand_14786 = enumerator_14786.nextObject ()))) {
      macroValidPointer (operand_14786) ;
      GGS_stringlist  var_cas_explodedArray = operand_14786->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
      GGS_string automatic_var_14952_0 ;
      var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_14952_0 COMMA_SOURCE_FILE_AT_LINE (350)) ;
      {
        GGS_stringlist::cEnumerator enumerator_14980 (var_cas_explodedArray, true) ;
        const GGS_stringlist::cElement * operand_14980 = NULL ;
        while (((operand_14980 = enumerator_14980.nextObject ()))) {
          macroValidPointer (operand_14980) ;
          const GGS_bool cond_15225 = (operand_14980->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
          if (cond_15225.isBuiltAndTrue ()) {
            const GGS_char var_cas_c = operand_14980->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (353)) ;
            const GGS_bool cond_15210 = (var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K'))) ;
            if (cond_15210.isBuiltAndTrue ()) {
              var_cas_inString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K' and '%%' escape sequences are allowed in this error message") COMMA_SOURCE_FILE_AT_LINE (356)) ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_check_K_escapeCharacters\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@mapDeclarationAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_mapDeclarationAST * operand_15417,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15417 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (371)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_15736 (operand_15417->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_15736 = NULL ;
      while (((operand_15736 = enumerator_15736.nextObject ()))) {
        macroValidPointer (operand_15736) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_15736->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (373)) ;
        GGS_bool var_cas_hasSetter = GGS_bool (true) ;
        GGS_bool var_cas_hasGetter = GGS_bool (true) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_15736->mAttributeName, var_cas_hasSetter, var_cas_hasGetter) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_15736->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (382)) ;
      }
    }
    GGS_insertMethodMap  var_cas_insertMethodMap = GGS_insertMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (385)) ;
    {
      GGS_insertMethodListAST::cEnumerator enumerator_16158 (operand_15417->mInsertMethodList, true) ;
      const GGS_insertMethodListAST::cElement * operand_16158 = NULL ;
      while (((operand_16158 = enumerator_16158.nextObject ()))) {
        macroValidPointer (operand_16158) ;
        var_cas_insertMethodMap.modifier_insertKey (inLexique, operand_16158->mInsertMethodName COMMA_SOURCE_FILE_AT_LINE (387)) ;
        {
          GGS_stringlist::cEnumerator enumerator_16294 (operand_16158->mErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (389)).reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_16294 = NULL ;
          while (((operand_16294 = enumerator_16294.nextObject ()))) {
            macroValidPointer (operand_16294) ;
            GGS_stringlist  var_cas_explodedArray = operand_16294->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_16469_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_16469_0 COMMA_SOURCE_FILE_AT_LINE (391)) ;
            {
              GGS_stringlist::cEnumerator enumerator_16499 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_16499 = NULL ;
              while (((operand_16499 = enumerator_16499.nextObject ()))) {
                macroValidPointer (operand_16499) ;
                const GGS_bool cond_16787 = (operand_16499->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_16787.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_16499->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (394)) ;
                  const GGS_bool cond_16770 = ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K')))).operator_and ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('L')))) ;
                  if (cond_16770.isBuiltAndTrue ()) {
                    operand_16158->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K', '%L' and '%%' escape sequences are allowed in an insert error message") COMMA_SOURCE_FILE_AT_LINE (397)) ;
                  }
                }
              }
            }
          }
        }
        {
          GGS_stringlist::cEnumerator enumerator_16915 (operand_16158->mShadowErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (402)).reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_16915 = NULL ;
          while (((operand_16915 = enumerator_16915.nextObject ()))) {
            macroValidPointer (operand_16915) ;
            GGS_stringlist  var_cas_explodedArray = operand_16915->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_17096_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_17096_0 COMMA_SOURCE_FILE_AT_LINE (404)) ;
            {
              GGS_stringlist::cEnumerator enumerator_17126 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_17126 = NULL ;
              while (((operand_17126 = enumerator_17126.nextObject ()))) {
                macroValidPointer (operand_17126) ;
                const GGS_bool cond_17413 = (operand_17126->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_17413.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_17126->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (407)) ;
                  const GGS_bool cond_17396 = ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K')))).operator_and ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('L')))) ;
                  if (cond_17396.isBuiltAndTrue ()) {
                    operand_16158->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K', '%L' and '%%' escape sequences are allowed in a shadow error message") COMMA_SOURCE_FILE_AT_LINE (410)) ;
                  }
                }
              }
            }
          }
        }
      }
    }
    GGS_searchMethodMap  var_cas_searchMethodMap = GGS_searchMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (416)) ;
    {
      GGS_mapSearchMethodListAST::cEnumerator enumerator_17574 (operand_15417->mSearchMethodList, true) ;
      const GGS_mapSearchMethodListAST::cElement * operand_17574 = NULL ;
      while (((operand_17574 = enumerator_17574.nextObject ()))) {
        macroValidPointer (operand_17574) ;
        var_cas_searchMethodMap.modifier_insertKey (inLexique, operand_17574->mSearchMethodName COMMA_SOURCE_FILE_AT_LINE (418)) ;
        {
          GGS_stringlist::cEnumerator enumerator_17706 (operand_17574->mErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (420)).reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_17706 = NULL ;
          while (((operand_17706 = enumerator_17706.nextObject ()))) {
            macroValidPointer (operand_17706) ;
            GGS_stringlist  var_cas_explodedArray = operand_17706->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_17881_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_17881_0 COMMA_SOURCE_FILE_AT_LINE (422)) ;
            {
              GGS_stringlist::cEnumerator enumerator_17911 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_17911 = NULL ;
              while (((operand_17911 = enumerator_17911.nextObject ()))) {
                macroValidPointer (operand_17911) ;
                const GGS_bool cond_18177 = (operand_17911->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_18177.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_17911->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (425)) ;
                  const GGS_bool cond_18160 = (var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K'))) ;
                  if (cond_18160.isBuiltAndTrue ()) {
                    operand_17574->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K' and '%%' escape sequences are allowed in a search error message") COMMA_SOURCE_FILE_AT_LINE (428)) ;
                  }
                }
              }
            }
          }
        }
      }
    }
    {
      GGS_mapRemoveMethodListAST::cEnumerator enumerator_18290 (operand_15417->mRemoveMethodList, true) ;
      const GGS_mapRemoveMethodListAST::cElement * operand_18290 = NULL ;
      while (((operand_18290 = enumerator_18290.nextObject ()))) {
        macroValidPointer (operand_18290) ;
        var_cas_insertMethodMap.modifier_insertKey (inLexique, operand_18290->mMethodName COMMA_SOURCE_FILE_AT_LINE (435)) ;
        {
          GGS_stringlist::cEnumerator enumerator_18416 (operand_18290->mErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (437)).reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_18416 = NULL ;
          while (((operand_18416 = enumerator_18416.nextObject ()))) {
            macroValidPointer (operand_18416) ;
            GGS_stringlist  var_cas_explodedArray = operand_18416->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_18591_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_18591_0 COMMA_SOURCE_FILE_AT_LINE (439)) ;
            {
              GGS_stringlist::cEnumerator enumerator_18621 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_18621 = NULL ;
              while (((operand_18621 = enumerator_18621.nextObject ()))) {
                macroValidPointer (operand_18621) ;
                const GGS_bool cond_18887 = (operand_18621->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_18887.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_18621->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (442)) ;
                  const GGS_bool cond_18870 = (var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K'))) ;
                  if (cond_18870.isBuiltAndTrue ()) {
                    operand_18290->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K' and '%%' escape sequences are allowed in a remove error message") COMMA_SOURCE_FILE_AT_LINE (445)) ;
                  }
                }
              }
            }
          }
        }
      }
    }
    {
        GGS_uint var_cas_IDX (true, 0) ;
      GGS_insertOrReplaceDeclarationListAST::cEnumerator enumerator_19059 (operand_15417->mInsertOrReplaceDeclarationListAST, true) ;
      const GGS_insertOrReplaceDeclarationListAST::cElement * operand_19059 = NULL ;
      while (((operand_19059 = enumerator_19059.nextObject ()))) {
        macroValidPointer (operand_19059) ;
        const GGS_bool cond_19206 = (var_cas_IDX).operator_strictSup (GGS_uint (0U)) ;
        if (cond_19206.isBuiltAndTrue ()) {
          operand_19059->mInsertOrReplaceDeclarationLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("the 'insertOrReplace' modifier is already declared") COMMA_SOURCE_FILE_AT_LINE (453)) ;
        }
        var_cas_IDX.mValue ++ ;
      }
    }
    const GGS_bool var_cas_hasInsertOrReplaceModifier = (operand_15417->mInsertOrReplaceDeclarationListAST.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    const GGS_bool cond_19721 = (var_cas_hasInsertOrReplaceModifier).operator_and (var_cas_insertMethodMap.reader_hasKey (GGS_string ("insertOrReplace"))) ;
    if (cond_19721.isBuiltAndTrue ()) {
      GGS_location  var_cas_insertOrReplaceDeclarationLocation ;
      if (operand_15417->mInsertOrReplaceDeclarationListAST.isBuilt ()) {
        operand_15417->mInsertOrReplaceDeclarationListAST (HERE)->method_first (inLexique, var_cas_insertOrReplaceDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (459)) ;
      }
      var_cas_insertOrReplaceDeclarationLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the insertOrReplace' modifier cannot be declared : an insert modifier or a remove modifier has been declared with this name") COMMA_SOURCE_FILE_AT_LINE (461)) ;
    }
    GGS_withAccessorMap  var_cas_withAccessorMap = GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (463)) ;
    var_cas_withAccessorMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("hasKey"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (464)), var_cas_inPredefinedTypes.mStringType COMMA_SOURCE_FILE_AT_LINE (464)) ;
    {
      GGS_mapSearchMethodListAST::cEnumerator enumerator_19928 (operand_15417->mSearchMethodList, true) ;
      const GGS_mapSearchMethodListAST::cElement * operand_19928 = NULL ;
      while (((operand_19928 = enumerator_19928.nextObject ()))) {
        macroValidPointer (operand_19928) ;
        var_cas_withAccessorMap.modifier_insertKey (inLexique, operand_19928->mSearchMethodName, var_cas_inPredefinedTypes.mLStringType COMMA_SOURCE_FILE_AT_LINE (466)) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_mapTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_15417->mMapTypeName COMMA_SOURCE_FILE_AT_LINE (473)), operand_15417->mMapTypeName, var_cas_typedAttributeList, operand_15417->mInsertMethodList, operand_15417->mSearchMethodList, operand_15417->mRemoveMethodList, var_cas_hasInsertOrReplaceModifier, var_cas_withAccessorMap COMMA_SOURCE_FILE_AT_LINE (472)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@uniqueMapDeclarationAST.performSemanticAnalysis'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__uniqueMapDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_uniqueMapDeclarationAST * operand_20568,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20568 != NULL) {
    GGS_stringset  var_cas_initialStateSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_insertMethodListAST::cEnumerator enumerator_20836 (operand_20568->mInsertMethodList, true) ;
      const GGS_insertMethodListAST::cElement * operand_20836 = NULL ;
      while (((operand_20836 = enumerator_20836.nextObject ()))) {
        macroValidPointer (operand_20836) ;
        const GGS_bool cond_21132 = (operand_20568->mMapStateList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_21132.isBuiltAndTrue ()) {
          const GGS_bool cond_21050 = (operand_20836->mInitialStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (497))).operator_isEqual (GGS_string ("")) ;
          if (cond_21050.isBuiltAndTrue ()) {
            operand_20836->mInsertMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_20836->mInsertMethodName)).operator_concat (GGS_string ("' insert method should name an automaton state")) COMMA_SOURCE_FILE_AT_LINE (499)) ;
          }else if (cond_21050.isBuiltAndFalse ()) {
            var_cas_initialStateSet.addAssign_operation (operand_20836->mInitialStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (500))) ;
          }
        }else if (cond_21132.isBuiltAndFalse ()) {
          const GGS_bool cond_21294 = (operand_20836->mInitialStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (502))).operator_isNotEqual (GGS_string ("")) ;
          if (cond_21294.isBuiltAndTrue ()) {
            operand_20836->mInsertMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_20836->mInsertMethodName)).operator_concat (GGS_string ("' insert method should not name an automaton state")) COMMA_SOURCE_FILE_AT_LINE (504)) ;
          }
        }
      }
    }
    GGS_mapAutomatonActionMap  var_cas_mapAutomatonActionMap = GGS_mapAutomatonActionMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (507)) ;
    {
      GGS_mapSearchMethodListAST::cEnumerator enumerator_21439 (operand_20568->mSearchMethodList, true) ;
      const GGS_mapSearchMethodListAST::cElement * operand_21439 = NULL ;
      while (((operand_21439 = enumerator_21439.nextObject ()))) {
        macroValidPointer (operand_21439) ;
        const GGS_bool cond_21965 = (operand_20568->mMapStateList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_21965.isBuiltAndTrue ()) {
          const GGS_bool cond_21649 = (operand_21439->mActionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (510))).operator_isEqual (GGS_string ("")) ;
          if (cond_21649.isBuiltAndTrue ()) {
            operand_21439->mSearchMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_21439->mSearchMethodName)).operator_concat (GGS_string ("' search method should name an automaton action")) COMMA_SOURCE_FILE_AT_LINE (512)) ;
          }else if (cond_21649.isBuiltAndFalse ()) {
            const GGS_bool cond_21950 = (var_cas_mapAutomatonActionMap.reader_hasKey (operand_21439->mActionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (512)))).operator_not () ;
            if (cond_21950.isBuiltAndTrue ()) {
              var_cas_mapAutomatonActionMap.modifier_insertKey (inLexique, operand_21439->mActionName, var_cas_mapAutomatonActionMap.reader_count () COMMA_SOURCE_FILE_AT_LINE (514)) ;
            }
          }
        }else if (cond_21965.isBuiltAndFalse ()) {
          const GGS_bool cond_22122 = (operand_21439->mActionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (518))).operator_isNotEqual (GGS_string ("")) ;
          if (cond_22122.isBuiltAndTrue ()) {
            operand_21439->mSearchMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_21439->mSearchMethodName)).operator_concat (GGS_string ("' search method should not name an automaton action")) COMMA_SOURCE_FILE_AT_LINE (520)) ;
          }
        }
      }
    }
    GGS_mapAutomatonStateMap  var_cas_mapAutomatonStateMap = GGS_mapAutomatonStateMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (523)) ;
    {
      GGS_mapStateList::cEnumerator enumerator_22252 (operand_20568->mMapStateList, true) ;
      const GGS_mapStateList::cElement * operand_22252 = NULL ;
      while (((operand_22252 = enumerator_22252.nextObject ()))) {
        macroValidPointer (operand_22252) ;
        var_cas_mapAutomatonStateMap.modifier_insertKey (inLexique, operand_22252->mStateName, var_cas_mapAutomatonStateMap.reader_count () COMMA_SOURCE_FILE_AT_LINE (525)) ;
      }
    }
    {
      GGS_mapStateList::cEnumerator enumerator_22378 (operand_20568->mMapStateList, true) ;
      const GGS_mapStateList::cElement * operand_22378 = NULL ;
      while (((operand_22378 = enumerator_22378.nextObject ()))) {
        macroValidPointer (operand_22378) ;
        {
          GGS_mapStateTransitionList::cEnumerator enumerator_22409 (operand_22378->mTransitionList, true) ;
          const GGS_mapStateTransitionList::cElement * operand_22409 = NULL ;
          while (((operand_22409 = enumerator_22409.nextObject ()))) {
            macroValidPointer (operand_22409) ;
            GGS_uint  automatic_var_22472_0 ;
            if (var_cas_mapAutomatonStateMap.isBuilt ()) {
              var_cas_mapAutomatonStateMap (HERE)->method_searchKey (inLexique, operand_22409->mTargetStateName, automatic_var_22472_0 COMMA_SOURCE_FILE_AT_LINE (529)) ;
            }
          }
        }
      }
    }
    const GGS_stringset  var_cas_allActions = var_cas_mapAutomatonActionMap.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (533)) ;
    GGS_mapStateSortedList  var_cas_mapStateSortedList = GGS_mapStateSortedList ::constructor_emptySortedList () ;
    {
      GGS_mapStateList::cEnumerator enumerator_22705 (operand_20568->mMapStateList, true) ;
      const GGS_mapStateList::cElement * operand_22705 = NULL ;
      while (((operand_22705 = enumerator_22705.nextObject ()))) {
        macroValidPointer (operand_22705) ;
        GGS_stringset  var_cas_actionsForCurrentState = GGS_stringset ::constructor_emptySet () ;
        GGS_mapStateTransitionSortedList  var_cas_mapStateTransitionSortedList = GGS_mapStateTransitionSortedList ::constructor_emptySortedList () ;
        {
          GGS_mapStateTransitionList::cEnumerator enumerator_22870 (operand_22705->mTransitionList, true) ;
          const GGS_mapStateTransitionList::cElement * operand_22870 = NULL ;
          while (((operand_22870 = enumerator_22870.nextObject ()))) {
            macroValidPointer (operand_22870) ;
            GGS_uint  var_cas_actionIndex ;
            if (var_cas_mapAutomatonActionMap.isBuilt ()) {
              var_cas_mapAutomatonActionMap (HERE)->method_searchKey (inLexique, operand_22870->mActionName, var_cas_actionIndex COMMA_SOURCE_FILE_AT_LINE (540)) ;
            }
            const GGS_bool cond_23141 = var_cas_actionsForCurrentState.reader_hasKey (operand_22870->mActionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (541))) ;
            if (cond_23141.isBuiltAndTrue ()) {
              operand_22870->mActionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_22870->mActionName)).operator_concat (GGS_string ("' action is already used for this state")) COMMA_SOURCE_FILE_AT_LINE (543)) ;
            }
            var_cas_actionsForCurrentState.addAssign_operation (operand_22870->mActionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (544))) ;
            GGS_uint  var_cas_targetStateIndex ;
            if (var_cas_mapAutomatonStateMap.isBuilt ()) {
              var_cas_mapAutomatonStateMap (HERE)->method_searchKey (inLexique, operand_22870->mTargetStateName, var_cas_targetStateIndex COMMA_SOURCE_FILE_AT_LINE (546)) ;
            }
            var_cas_mapStateTransitionSortedList.addAssign_operation (var_cas_actionIndex, operand_22870->mActionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (549)), var_cas_targetStateIndex, operand_22870->mTargetStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (551)), operand_22870->mTransitionMessageKind, operand_22870->mTransitionMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (553))) ;
          }
        }
        GGS_uint  var_cas_stateIndex ;
        if (var_cas_mapAutomatonStateMap.isBuilt ()) {
          var_cas_mapAutomatonStateMap (HERE)->method_searchKey (inLexique, operand_22705->mStateName, var_cas_stateIndex COMMA_SOURCE_FILE_AT_LINE (557)) ;
        }
        var_cas_mapStateSortedList.addAssign_operation (var_cas_stateIndex, operand_22705->mStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (560)), operand_22705->mStateMessageKind, operand_22705->mStateMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (562)), var_cas_mapStateTransitionSortedList) ;
        GGS_stringset  var_cas_missingActions = var_cas_allActions.substract_operation (inLexique, var_cas_actionsForCurrentState COMMA_SOURCE_FILE_AT_LINE (565)) ;
        const GGS_bool cond_24165 = (var_cas_missingActions.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_24165.isBuiltAndTrue ()) {
          GGS_string var_cas_s = GGS_string ("") ;
          {
            GGS_stringset::cEnumerator enumerator_23972 (var_cas_missingActions, true) ;
            if (enumerator_23972 .hasCurrentObject ()) {
              bool _foreach_loop_23972 ;
              do{
                var_cas_s.appendCString ("'") ;
                var_cas_s.dotAssign_operation (enumerator_23972._key (HERE)) ;
                var_cas_s.appendCString ("'") ;
                enumerator_23972.next () ;
                _foreach_loop_23972 = (enumerator_23972 .hasCurrentObject ()) ;
                if (_foreach_loop_23972) {
                  var_cas_s.appendCString (", ") ;
                }
              }while (_foreach_loop_23972) ;
            }
          }
          operand_22705->mStateName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("the following actions are not named in a transition from this state: ")).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (573)) ;
        }
      }
    }
    GGS_stringset  var_cas_accessibleStates = var_cas_initialStateSet ;
    GGS_bool var_cas_progress = GGS_bool (true) ;
    GGS_uint _variant_24753 = operand_20568->mMapStateList.reader_length ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (578)) ;
    GGS_bool _condition_24753 (_variant_24753.isBuilt (), true) ;
    while (_condition_24753.isBuiltAndTrue ()) {
      _condition_24753 = var_cas_progress ;
      if (_condition_24753.isBuiltAndTrue ()) {
        if (_variant_24753.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (590)) ;
          _condition_24753 = GGS_bool (false) ;
        }else{
          _variant_24753.decrement_operation (inLexique COMMA_HERE) ;
          var_cas_progress = GGS_bool (false) ;
          {
            GGS_mapStateList::cEnumerator enumerator_24407 (operand_20568->mMapStateList, true) ;
            const GGS_mapStateList::cElement * operand_24407 = NULL ;
            while (((operand_24407 = enumerator_24407.nextObject ()))) {
              macroValidPointer (operand_24407) ;
              const GGS_bool cond_24724 = var_cas_accessibleStates.reader_hasKey (operand_24407->mStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (581))) ;
              if (cond_24724.isBuiltAndTrue ()) {
                {
                  GGS_mapStateTransitionList::cEnumerator enumerator_24503 (operand_24407->mTransitionList, true) ;
                  const GGS_mapStateTransitionList::cElement * operand_24503 = NULL ;
                  while (((operand_24503 = enumerator_24503.nextObject ()))) {
                    macroValidPointer (operand_24503) ;
                    const GGS_bool cond_24687 = (var_cas_accessibleStates.reader_hasKey (operand_24503->mTargetStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (583)))).operator_not () ;
                    if (cond_24687.isBuiltAndTrue ()) {
                      var_cas_accessibleStates.addAssign_operation (operand_24503->mTargetStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (584))) ;
                      var_cas_progress = GGS_bool (true) ;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    const GGS_stringset  var_cas_uselessStates = var_cas_mapAutomatonStateMap.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (591)).substract_operation (inLexique, var_cas_accessibleStates COMMA_SOURCE_FILE_AT_LINE (591)) ;
    const GGS_bool cond_25090 = (var_cas_uselessStates.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_25090.isBuiltAndTrue ()) {
      GGS_string var_cas_s = GGS_string ("") ;
      {
        GGS_stringset::cEnumerator enumerator_24932 (var_cas_uselessStates, true) ;
        if (enumerator_24932 .hasCurrentObject ()) {
          bool _foreach_loop_24932 ;
          do{
            var_cas_s.appendCString ("'") ;
            var_cas_s.dotAssign_operation (enumerator_24932._key (HERE)) ;
            var_cas_s.appendCString ("'") ;
            enumerator_24932.next () ;
            _foreach_loop_24932 = (enumerator_24932 .hasCurrentObject ()) ;
            if (_foreach_loop_24932) {
              var_cas_s.appendCString (", ") ;
            }
          }while (_foreach_loop_24932) ;
        }
      }
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, (GGS_string ("the following map automaton states are useless: ")).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (598)) ;
    }
    GGS_stringset  var_cas_neededAssociations = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_accessibilityGraph = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_mapAutomatonStateMap::cEnumerator enumerator_25302 (var_cas_mapAutomatonStateMap, true) ;
      const GGS_mapAutomatonStateMap::cElement * operand_25302 = NULL ;
      while (((operand_25302 = enumerator_25302.nextObject ()))) {
        macroValidPointer (operand_25302) ;
        GGS_stringset  var_cas_reachableStates = GGS_stringset ::constructor_emptySet () ;
        var_cas_reachableStates.addAssign_operation (operand_25302->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (606))) ;
        GGS_bool var_cas_progress = GGS_bool (true) ;
        GGS_uint _variant_25984 = var_cas_mapAutomatonStateMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (608)) ;
        GGS_bool _condition_25984 (_variant_25984.isBuilt (), true) ;
        while (_condition_25984.isBuiltAndTrue ()) {
          _condition_25984 = var_cas_progress ;
          if (_condition_25984.isBuiltAndTrue ()) {
            if (_variant_25984.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (621)) ;
              _condition_25984 = GGS_bool (false) ;
            }else{
              _variant_25984.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_progress = GGS_bool (false) ;
              {
                GGS_mapStateList::cEnumerator enumerator_25534 (operand_20568->mMapStateList, true) ;
                const GGS_mapStateList::cElement * operand_25534 = NULL ;
                while (((operand_25534 = enumerator_25534.nextObject ()))) {
                  macroValidPointer (operand_25534) ;
                  const GGS_bool cond_25951 = var_cas_reachableStates.reader_hasKey (operand_25534->mStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (611))) ;
                  if (cond_25951.isBuiltAndTrue ()) {
                    {
                      GGS_mapStateTransitionList::cEnumerator enumerator_25633 (operand_25534->mTransitionList, true) ;
                      const GGS_mapStateTransitionList::cElement * operand_25633 = NULL ;
                      while (((operand_25633 = enumerator_25633.nextObject ()))) {
                        macroValidPointer (operand_25633) ;
                        const GGS_bool cond_25910 = (var_cas_reachableStates.reader_hasKey (operand_25633->mTargetStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (613)))).operator_not () ;
                        if (cond_25910.isBuiltAndTrue ()) {
                          var_cas_reachableStates.addAssign_operation (operand_25633->mTargetStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (614))) ;
                          var_cas_accessibilityGraph.addAssign_operation (((operand_25302->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (615))).operator_concat (GGS_string (":"))).operator_concat (operand_25633->mTargetStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (615)))) ;
                          var_cas_progress = GGS_bool (true) ;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        {
          GGS_stringset::cEnumerator enumerator_26019 (var_cas_reachableStates, true) ;
          while (enumerator_26019.hasCurrentObject ()) {
            const GGS_bool cond_26126 = (operand_25302->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (623))).operator_isNotEqual (enumerator_26019._key (HERE)) ;
            if (cond_26126.isBuiltAndTrue ()) {
              var_cas_neededAssociations.addAssign_operation (((operand_25302->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (624))).operator_concat (GGS_string (":"))).operator_concat (enumerator_26019._key (HERE))) ;
            }
            enumerator_26019.next () ;
          }
        }
      }
    }
    GGS_mapOverrideList  var_cas_mapOverrideList = GGS_mapOverrideList ::constructor_emptyList () ;
    {
      GGS_mapOverrideBlockListAST::cEnumerator enumerator_26254 (operand_20568->mMapOverrideBlockListAST, true) ;
      const GGS_mapOverrideBlockListAST::cElement * operand_26254 = NULL ;
      while (((operand_26254 = enumerator_26254.nextObject ()))) {
        macroValidPointer (operand_26254) ;
        GGS_stringset  var_cas_handledAssociations = GGS_stringset ::constructor_emptySet () ;
        GGS_stringset  var_cas_neededCombinaisons = GGS_stringset ::constructor_emptySet () ;
        GGS_branchBehaviourSortedListForMapOverride  var_cas_branchBehaviourSortedListForMapOverride1 = GGS_branchBehaviourSortedListForMapOverride ::constructor_emptySortedList () ;
        {
          GGS_mapOverrideBlockDescriptorAST::cEnumerator enumerator_26502 (operand_26254->mMapOverrideBlockDescriptor1AST, true) ;
          const GGS_mapOverrideBlockDescriptorAST::cElement * operand_26502 = NULL ;
          while (((operand_26502 = enumerator_26502.nextObject ()))) {
            macroValidPointer (operand_26502) ;
            GGS_uint  var_cas_startStateNameIndex ;
            if (var_cas_mapAutomatonStateMap.isBuilt ()) {
              var_cas_mapAutomatonStateMap (HERE)->method_searchKey (inLexique, operand_26502->mLeftState, var_cas_startStateNameIndex COMMA_SOURCE_FILE_AT_LINE (636)) ;
            }
            GGS_uint  var_cas_currentStateNameIndex ;
            if (var_cas_mapAutomatonStateMap.isBuilt ()) {
              var_cas_mapAutomatonStateMap (HERE)->method_searchKey (inLexique, operand_26502->mRightState, var_cas_currentStateNameIndex COMMA_SOURCE_FILE_AT_LINE (638)) ;
            }
            const GGS_string var_cas_association = ((operand_26502->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (639))).operator_concat (GGS_string (":"))).operator_concat (operand_26502->mRightState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (639))) ;
            const GGS_bool cond_26963 = (var_cas_neededAssociations.reader_hasKey (var_cas_association)).operator_not () ;
            if (cond_26963.isBuiltAndTrue ()) {
              operand_26502->mRightState.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("the '")).operator_concat (var_cas_association)).operator_concat (GGS_string ("' association is useless")) COMMA_SOURCE_FILE_AT_LINE (641)) ;
            }
            const GGS_bool cond_27130 = var_cas_handledAssociations.reader_hasKey (var_cas_association) ;
            if (cond_27130.isBuiltAndTrue ()) {
              operand_26502->mRightState.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (var_cas_association)).operator_concat (GGS_string ("' association is already defined")) COMMA_SOURCE_FILE_AT_LINE (646)) ;
            }
            var_cas_handledAssociations.addAssign_operation (var_cas_association) ;
            GGS_uint  var_cas_finalStateNameIndex ;
            if (var_cas_mapAutomatonStateMap.isBuilt ()) {
              var_cas_mapAutomatonStateMap (HERE)->method_searchKey (inLexique, operand_26502->mResultingState, var_cas_finalStateNameIndex COMMA_SOURCE_FILE_AT_LINE (649)) ;
            }
            const GGS_bool cond_27794 = (operand_26502->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (650))).operator_isNotEqual (operand_26502->mResultingState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (650))) ;
            if (cond_27794.isBuiltAndTrue ()) {
              var_cas_neededCombinaisons.addAssign_operation (((operand_26502->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (651))).operator_concat (GGS_string (":"))).operator_concat (operand_26502->mResultingState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (651)))) ;
              var_cas_neededCombinaisons.addAssign_operation (((operand_26502->mResultingState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (652))).operator_concat (GGS_string (":"))).operator_concat (operand_26502->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (652)))) ;
              const GGS_bool cond_27779 = (var_cas_accessibilityGraph.reader_hasKey (((operand_26502->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (653))).operator_concat (GGS_string (":"))).operator_concat (operand_26502->mRightState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (653))))).operator_not () ;
              if (cond_27779.isBuiltAndTrue ()) {
                operand_26502->mResultingState.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (operand_26502->mResultingState)).operator_concat (GGS_string ("' state is not reachable from '"))).operator_concat (operand_26502->mLeftState)).operator_concat (GGS_string ("' state")) COMMA_SOURCE_FILE_AT_LINE (657)) ;
              }
            }
            ::routine_check_K_escapeCharacters (inLexique,  operand_26502->mTransitionMessage COMMA_SOURCE_FILE_AT_LINE (659)) ;
            var_cas_branchBehaviourSortedListForMapOverride1.addAssign_operation (var_cas_startStateNameIndex, operand_26502->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (662)), var_cas_currentStateNameIndex, operand_26502->mRightState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (664)), var_cas_finalStateNameIndex, operand_26502->mResultingState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (666)), operand_26502->mMessageKind, operand_26502->mTransitionMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (668))) ;
          }
        }
        GGS_stringset  var_cas_forgottenAssociations = var_cas_neededAssociations.substract_operation (inLexique, var_cas_handledAssociations COMMA_SOURCE_FILE_AT_LINE (671)) ;
        const GGS_bool cond_28519 = (var_cas_forgottenAssociations.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_28519.isBuiltAndTrue ()) {
          GGS_string var_cas_s = GGS_string ("") ;
          {
            GGS_stringset::cEnumerator enumerator_28358 (var_cas_forgottenAssociations, true) ;
            while (enumerator_28358.hasCurrentObject ()) {
              var_cas_s.appendCString ("\n"
                "  - ") ;
              var_cas_s.dotAssign_operation (enumerator_28358._key (HERE)) ;
              enumerator_28358.next () ;
            }
          }
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((var_cas_forgottenAssociations.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (677))).operator_concat (GGS_string (" associations should be defined:"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (678)) ;
        }
        GGS_stringset  var_cas_definedCombinaisons = GGS_stringset ::constructor_emptySet () ;
        GGS_branchBehaviourSortedListForMapOverride  var_cas_branchBehaviourSortedListForMapOverride2 = GGS_branchBehaviourSortedListForMapOverride ::constructor_emptySortedList () ;
        {
          GGS_mapOverrideBlockDescriptorAST::cEnumerator enumerator_28722 (operand_26254->mMapOverrideBlockDescriptor2AST, true) ;
          const GGS_mapOverrideBlockDescriptorAST::cElement * operand_28722 = NULL ;
          while (((operand_28722 = enumerator_28722.nextObject ()))) {
            macroValidPointer (operand_28722) ;
            GGS_uint  var_cas_leftStateIndex ;
            if (var_cas_mapAutomatonStateMap.isBuilt ()) {
              var_cas_mapAutomatonStateMap (HERE)->method_searchKey (inLexique, operand_28722->mLeftState, var_cas_leftStateIndex COMMA_SOURCE_FILE_AT_LINE (683)) ;
            }
            GGS_uint  var_cas_rightStateIndex ;
            if (var_cas_mapAutomatonStateMap.isBuilt ()) {
              var_cas_mapAutomatonStateMap (HERE)->method_searchKey (inLexique, operand_28722->mRightState, var_cas_rightStateIndex COMMA_SOURCE_FILE_AT_LINE (685)) ;
            }
            const GGS_string var_cas_combinaison = ((operand_28722->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (686))).operator_concat (GGS_string (":"))).operator_concat (operand_28722->mRightState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (686))) ;
            const GGS_bool cond_29186 = (var_cas_neededCombinaisons.reader_hasKey (var_cas_combinaison)).operator_not () ;
            if (cond_29186.isBuiltAndTrue ()) {
              operand_28722->mRightState.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (operand_28722->mLeftState)).operator_concat (GGS_string (":"))).operator_concat (operand_28722->mRightState)).operator_concat (GGS_string ("' combinaison is useless")) COMMA_SOURCE_FILE_AT_LINE (690)) ;
            }
            const GGS_bool cond_29372 = var_cas_definedCombinaisons.reader_hasKey (var_cas_combinaison) ;
            if (cond_29372.isBuiltAndTrue ()) {
              operand_28722->mRightState.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (operand_28722->mLeftState)).operator_concat (GGS_string (":"))).operator_concat (operand_28722->mRightState)).operator_concat (GGS_string ("' combinaison is already defined")) COMMA_SOURCE_FILE_AT_LINE (694)) ;
            }
            var_cas_definedCombinaisons.addAssign_operation (var_cas_combinaison) ;
            GGS_uint  var_cas_resultingStateNameIndex ;
            if (var_cas_mapAutomatonStateMap.isBuilt ()) {
              var_cas_mapAutomatonStateMap (HERE)->method_searchKey (inLexique, operand_28722->mResultingState, var_cas_resultingStateNameIndex COMMA_SOURCE_FILE_AT_LINE (697)) ;
            }
            const GGS_bool cond_29909 = (((operand_28722->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (698))).operator_isNotEqual (operand_28722->mResultingState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (698)))).operator_and ((operand_28722->mRightState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (699))).operator_isNotEqual (operand_28722->mResultingState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (699))))).operator_and ((var_cas_accessibilityGraph.reader_hasKey (((operand_28722->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (700))).operator_concat (GGS_string (":"))).operator_concat (operand_28722->mResultingState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (700))))).operator_not ()) ;
            if (cond_29909.isBuiltAndTrue ()) {
              operand_28722->mResultingState.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (operand_28722->mResultingState)).operator_concat (GGS_string ("' state cannot be reached from the '"))).operator_concat (operand_28722->mResultingState)).operator_concat (GGS_string ("' state")) COMMA_SOURCE_FILE_AT_LINE (703)) ;
            }
            ::routine_check_K_escapeCharacters (inLexique,  operand_28722->mTransitionMessage COMMA_SOURCE_FILE_AT_LINE (704)) ;
            const GGS_bool cond_30439 = (operand_28722->mMessageKind).operator_isEqual (GGS_mapAutomatonMessageKind::constructor_noMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (705))) ;
            if (cond_30439.isBuiltAndTrue ()) {
              var_cas_definedCombinaisons.addAssign_operation (((operand_28722->mRightState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (706))).operator_concat (GGS_string (":"))).operator_concat (operand_28722->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (706)))) ;
              var_cas_branchBehaviourSortedListForMapOverride2.addAssign_operation (var_cas_rightStateIndex, operand_28722->mRightState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (709)), var_cas_leftStateIndex, operand_28722->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (711)), var_cas_resultingStateNameIndex, operand_28722->mResultingState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (713)), operand_28722->mMessageKind, operand_28722->mTransitionMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (715))) ;
            }
            var_cas_branchBehaviourSortedListForMapOverride2.addAssign_operation (var_cas_leftStateIndex, operand_28722->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (720)), var_cas_rightStateIndex, operand_28722->mRightState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (722)), var_cas_resultingStateNameIndex, operand_28722->mResultingState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (724)), operand_28722->mMessageKind, operand_28722->mTransitionMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (726))) ;
          }
        }
        const GGS_bool cond_31221 = (var_cas_forgottenAssociations.reader_count ()).operator_isEqual (GGS_uint (0U)) ;
        if (cond_31221.isBuiltAndTrue ()) {
          GGS_stringset  var_cas_forgottenCombinaisons = var_cas_neededCombinaisons.substract_operation (inLexique, var_cas_definedCombinaisons COMMA_SOURCE_FILE_AT_LINE (730)) ;
          const GGS_bool cond_31208 = (var_cas_forgottenCombinaisons.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
          if (cond_31208.isBuiltAndTrue ()) {
            GGS_string var_cas_s = GGS_string ("") ;
            {
              GGS_stringset::cEnumerator enumerator_31043 (var_cas_forgottenCombinaisons, true) ;
              while (enumerator_31043.hasCurrentObject ()) {
                var_cas_s.appendCString ("\n"
                  "  - ") ;
                var_cas_s.dotAssign_operation (enumerator_31043._key (HERE)) ;
                enumerator_31043.next () ;
              }
            }
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((var_cas_forgottenCombinaisons.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (736))).operator_concat (GGS_string (" combinaisons are forgotten:"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (737)) ;
          }
        }
        var_cas_mapOverrideList.addAssign_operation (operand_26254->mOverrideBlockName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (740)), var_cas_branchBehaviourSortedListForMapOverride1, var_cas_branchBehaviourSortedListForMapOverride2) ;
      }
    }
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (747)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_31554 (operand_20568->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_31554 = NULL ;
      while (((operand_31554 = enumerator_31554.nextObject ()))) {
        macroValidPointer (operand_31554) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_31554->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (749)) ;
        GGS_bool var_cas_hasSetter = GGS_bool (true) ;
        GGS_bool var_cas_hasGetter = GGS_bool (true) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_31554->mAttributeName, var_cas_hasSetter, var_cas_hasGetter) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_31554->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (758)) ;
      }
    }
    GGS_insertMethodMap  var_cas_insertMethodMap = GGS_insertMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (761)) ;
    {
      GGS_insertMethodListAST::cEnumerator enumerator_31976 (operand_20568->mInsertMethodList, true) ;
      const GGS_insertMethodListAST::cElement * operand_31976 = NULL ;
      while (((operand_31976 = enumerator_31976.nextObject ()))) {
        macroValidPointer (operand_31976) ;
        var_cas_insertMethodMap.modifier_insertKey (inLexique, operand_31976->mInsertMethodName COMMA_SOURCE_FILE_AT_LINE (763)) ;
        {
          GGS_stringlist::cEnumerator enumerator_32112 (operand_31976->mErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (765)).reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_32112 = NULL ;
          while (((operand_32112 = enumerator_32112.nextObject ()))) {
            macroValidPointer (operand_32112) ;
            GGS_stringlist  var_cas_explodedArray = operand_32112->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_32287_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_32287_0 COMMA_SOURCE_FILE_AT_LINE (767)) ;
            {
              GGS_stringlist::cEnumerator enumerator_32317 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_32317 = NULL ;
              while (((operand_32317 = enumerator_32317.nextObject ()))) {
                macroValidPointer (operand_32317) ;
                const GGS_bool cond_32605 = (operand_32317->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_32605.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_32317->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (770)) ;
                  const GGS_bool cond_32588 = ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K')))).operator_and ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('L')))) ;
                  if (cond_32588.isBuiltAndTrue ()) {
                    operand_31976->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K', '%L' and '%%' escape sequences are allowed in an insert error message") COMMA_SOURCE_FILE_AT_LINE (773)) ;
                  }
                }
              }
            }
          }
        }
        {
          GGS_stringlist::cEnumerator enumerator_32733 (operand_31976->mShadowErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (778)).reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_32733 = NULL ;
          while (((operand_32733 = enumerator_32733.nextObject ()))) {
            macroValidPointer (operand_32733) ;
            GGS_stringlist  var_cas_explodedArray = operand_32733->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_32914_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_32914_0 COMMA_SOURCE_FILE_AT_LINE (780)) ;
            {
              GGS_stringlist::cEnumerator enumerator_32944 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_32944 = NULL ;
              while (((operand_32944 = enumerator_32944.nextObject ()))) {
                macroValidPointer (operand_32944) ;
                const GGS_bool cond_33231 = (operand_32944->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_33231.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_32944->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (783)) ;
                  const GGS_bool cond_33214 = ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K')))).operator_and ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('L')))) ;
                  if (cond_33214.isBuiltAndTrue ()) {
                    operand_31976->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K', '%L' and '%%' escape sequences are allowed in a shadow error message") COMMA_SOURCE_FILE_AT_LINE (786)) ;
                  }
                }
              }
            }
          }
        }
      }
    }
    GGS_searchMethodMap  var_cas_searchMethodMap = GGS_searchMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (792)) ;
    {
      GGS_mapSearchMethodListAST::cEnumerator enumerator_33392 (operand_20568->mSearchMethodList, true) ;
      const GGS_mapSearchMethodListAST::cElement * operand_33392 = NULL ;
      while (((operand_33392 = enumerator_33392.nextObject ()))) {
        macroValidPointer (operand_33392) ;
        const GGS_bool cond_33505 = (operand_20568->mMapStateList.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
        if (cond_33505.isBuiltAndTrue ()) {
          var_cas_searchMethodMap.modifier_insertKey (inLexique, operand_33392->mSearchMethodName COMMA_SOURCE_FILE_AT_LINE (795)) ;
        }else if (cond_33505.isBuiltAndFalse ()) {
          var_cas_searchMethodMap.modifier_insertKey (inLexique, operand_33392->mSearchMethodName COMMA_SOURCE_FILE_AT_LINE (797)) ;
        }
        {
          GGS_stringlist::cEnumerator enumerator_33649 (operand_33392->mErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (800)).reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_33649 = NULL ;
          while (((operand_33649 = enumerator_33649.nextObject ()))) {
            macroValidPointer (operand_33649) ;
            GGS_stringlist  var_cas_explodedArray = operand_33649->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_33824_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_33824_0 COMMA_SOURCE_FILE_AT_LINE (802)) ;
            {
              GGS_stringlist::cEnumerator enumerator_33854 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_33854 = NULL ;
              while (((operand_33854 = enumerator_33854.nextObject ()))) {
                macroValidPointer (operand_33854) ;
                const GGS_bool cond_34120 = (operand_33854->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_34120.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_33854->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (805)) ;
                  const GGS_bool cond_34103 = (var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K'))) ;
                  if (cond_34103.isBuiltAndTrue ()) {
                    operand_33392->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K' and '%%' escape sequences are allowed in a search error message") COMMA_SOURCE_FILE_AT_LINE (808)) ;
                  }
                }
              }
            }
          }
        }
      }
    }
    GGS_withAccessorMap  var_cas_withAccessorMap = GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (814)) ;
    var_cas_withAccessorMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("hasKey"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (815)), var_cas_inPredefinedTypes.mStringType COMMA_SOURCE_FILE_AT_LINE (815)) ;
    {
      GGS_mapSearchMethodListAST::cEnumerator enumerator_34381 (operand_20568->mSearchMethodList, true) ;
      const GGS_mapSearchMethodListAST::cElement * operand_34381 = NULL ;
      while (((operand_34381 = enumerator_34381.nextObject ()))) {
        macroValidPointer (operand_34381) ;
        var_cas_withAccessorMap.modifier_insertKey (inLexique, operand_34381->mSearchMethodName, var_cas_inPredefinedTypes.mLStringType COMMA_SOURCE_FILE_AT_LINE (817)) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_uniqueMapTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_20568->mMapTypeName COMMA_SOURCE_FILE_AT_LINE (824)), operand_20568->mMapTypeName, var_cas_typedAttributeList, operand_20568->mInsertMethodList, operand_20568->mSearchMethodList, var_cas_withAccessorMap, var_cas_mapAutomatonStateMap, var_cas_mapAutomatonActionMap, var_cas_mapStateSortedList, var_cas_mapOverrideList COMMA_SOURCE_FILE_AT_LINE (823)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@mapProxyDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapProxyDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_mapProxyDeclarationAST * operand_35069,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_35069 != NULL) {
    GGS_typedAttributeList  var_cas_listTypeAttributeList ;
    GGS_mapSearchMethodListAST  var_cas_searchMethodList ;
    GGS_bool automatic_var_35496_0 ;
    GGS_unifiedTypeMapProxy  automatic_var_35496_1 ;
    GGS_typeKindEnum automatic_var_35496_2 ;
    GGS_typedAttributeList  automatic_var_35496_3 ;
    GGS_attributeMap  automatic_var_35496_4 ;
    GGS_constructorMap  automatic_var_35496_5 ;
    GGS_readerMap  automatic_var_35496_6 ;
    GGS_modifierMap  automatic_var_35496_7 ;
    GGS_instanceMethodMap  automatic_var_35496_8 ;
    GGS_classMethodMap  automatic_var_35496_9 ;
    GGS_enumerationDescriptorList  automatic_var_35496_10 ;
    GGS_uint  automatic_var_35496_11 ;
    GGS_unifiedTypeMapProxyList  automatic_var_35496_12 ;
    GGS_stringset  automatic_var_35496_13 ;
    GGS_lstringlist  automatic_var_35496_14 ;
    GGS_mapSearchMethodListAST  automatic_var_35496_15 ;
    GGS_withAccessorMap  automatic_var_35496_16 ;
    GGS_bool automatic_var_35496_17 ;
    if (var_cas_inSemanticContext.mTypeMap.isBuilt ()) {
      var_cas_inSemanticContext.mTypeMap (HERE)->method_searchKey (inLexique, operand_35069->mAssociatedMapTypeName, automatic_var_35496_0, automatic_var_35496_1, automatic_var_35496_2, automatic_var_35496_3, automatic_var_35496_4, var_cas_listTypeAttributeList, automatic_var_35496_5, automatic_var_35496_6, automatic_var_35496_7, automatic_var_35496_8, automatic_var_35496_9, automatic_var_35496_10, automatic_var_35496_11, automatic_var_35496_12, automatic_var_35496_13, automatic_var_35496_14, var_cas_searchMethodList, automatic_var_35496_15, automatic_var_35496_16, automatic_var_35496_17 COMMA_SOURCE_FILE_AT_LINE (849)) ;
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_mapProxyTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_35069->mMapProxyTypeName COMMA_SOURCE_FILE_AT_LINE (852)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_35069->mAssociatedMapTypeName COMMA_SOURCE_FILE_AT_LINE (853)), var_cas_listTypeAttributeList, var_cas_searchMethodList COMMA_SOURCE_FILE_AT_LINE (851)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class map '@declaredMethodMap'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_declaredMethodMap ("declaredMethodMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_declaredMethodMap::
elementOf_GGS_declaredMethodMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_declaredMethodMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_declaredMethodMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_declaredMethodMap::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_declaredMethodMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_declaredMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_declaredMethodMap * info = (e_declaredMethodMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_declaredMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_declaredMethodMap * info = (e_declaredMethodMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::
constructor_emptyMap (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_declaredMethodMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_declaredMethodMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::modifier_insertFakeKey (C_CompilerEx & inCompiler,
                         const GGS_string & inKey,
                         const GGS_location & inHelperMessageErrorLocation,
                         const GGS_string & inHelperMessage
                         COMMA_LOCATION_ARGS) {
  e_declaredMethodMap info  ;
  internal_insertFakeKey (inCompiler,
                          (void *) & info,
                          inKey,
                          inHelperMessageErrorLocation,
                          inHelperMessage
                          COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_declaredMethodMap::
operator_isEqual (const GGS_declaredMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_declaredMethodMap::
operator_isNotEqual (const GGS_declaredMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
insertElement (C_CompilerEx & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_declaredMethodMap info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
searchElement (C_CompilerEx & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inLexique, inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_declaredMethodMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
modifier_insertKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::
constructor_mapWithMapToOverride (C_CompilerEx & /* inLexique */,
                                  const GGS_declaredMethodMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_declaredMethodMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::
reader_overriddenMap (C_CompilerEx & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_declaredMethodMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_declaredMethodMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @declaredMethodMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_declaredMethodMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_declaredMethodMap * p = NULL ;
    macroMyNew (p, GGS_declaredMethodMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_declaredMethodMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_declaredMethodMap * p = dynamic_cast <const GGS_declaredMethodMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_declaredMethodMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_declaredMethodMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_declaredMethodMap ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::constructor_mapWithKeyAndValue (C_CompilerEx & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_declaredMethodMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "buildLocalVariableMapAndSignature"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildLocalVariableMapAndSignature (C_CompilerEx & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_formalParameterListAST   var_cas_inRoutineSignatureAST,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_formalParameterListForGeneration  & var_cas_outRoutineSignature
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildLocalVariableMapAndSignature at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outRoutineSignature = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
  {
    GGS_formalParameterListAST::cEnumerator enumerator_36513 (var_cas_inRoutineSignatureAST, true) ;
    const GGS_formalParameterListAST::cElement * operand_36513 = NULL ;
    while (((operand_36513 = enumerator_36513.nextObject ()))) {
      macroValidPointer (operand_36513) ;
      const GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_36513->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (877)) ;
      GGS_string var_cas_formalArgumentCppName ;
      switch (operand_36513->mFormalArgumentPassingMode.enumValue ()) {
      case GGS_formalArgumentPassingModeAST::enum_argumentIn:
        {
        var_cas_formalArgumentCppName = (GGS_string ("inArgument_")).operator_concat (operand_36513->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (881)).reader_identifierRepresentation ()) ;
        const GGS_bool cond_36999 = operand_36513->mIsUnused ;
        if (cond_36999.isBuiltAndTrue ()) {
          var_cas_ioVariableMap.modifier_insertInputFormalArgumentDeclaredAsUnused (inLexique, operand_36513->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (883)) ;
        }else if (cond_36999.isBuiltAndFalse ()) {
          var_cas_ioVariableMap.modifier_insertInputFormalArgument (inLexique, operand_36513->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (885)) ;
        }
        }
        break ;
      case GGS_formalArgumentPassingModeAST::enum_argumentOut:
        {
        var_cas_formalArgumentCppName = (GGS_string ("outArgument_")).operator_concat (operand_36513->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (888)).reader_identifierRepresentation ()) ;
        var_cas_ioVariableMap.modifier_insertOutputFormalArgument (inLexique, operand_36513->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (889)) ;
        }
        break ;
      case GGS_formalArgumentPassingModeAST::enum_argumentInOut:
        {
        var_cas_formalArgumentCppName = (GGS_string ("ioArgument_")).operator_concat (operand_36513->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (891)).reader_identifierRepresentation ()) ;
        const GGS_bool cond_37710 = operand_36513->mIsUnused ;
        if (cond_37710.isBuiltAndTrue ()) {
          var_cas_ioVariableMap.modifier_insertInputOutputFormalArgumentDeclaredAsUnused (inLexique, operand_36513->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (893)) ;
        }else if (cond_37710.isBuiltAndFalse ()) {
          var_cas_ioVariableMap.modifier_insertInputOutputFormalArgument (inLexique, operand_36513->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (895)) ;
        }
        }
        break ;
      case GGS_formalArgumentPassingModeAST::enum_argumentConstantIn:
        {
        var_cas_formalArgumentCppName = (GGS_string ("constinArgument_")).operator_concat (operand_36513->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (898)).reader_identifierRepresentation ()) ;
        const GGS_bool cond_38184 = operand_36513->mIsUnused ;
        if (cond_38184.isBuiltAndTrue ()) {
          var_cas_ioVariableMap.modifier_insertConstantInputFormalArgumentDeclaredAsUnused (inLexique, operand_36513->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (900)) ;
        }else if (cond_38184.isBuiltAndFalse ()) {
          var_cas_ioVariableMap.modifier_insertConstantInputFormalArgument (inLexique, operand_36513->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (902)) ;
        }
        }
        break ;
      case GGS_formalArgumentPassingModeAST::kNotBuilt:
        break ;
      }
      var_cas_outRoutineSignature.addAssign_operation (operand_36513->mFormalArgumentPassingMode, var_cas_type, operand_36513->mFormalArgumentName, var_cas_formalArgumentCppName) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildLocalVariableMapAndSignature\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "analyzeRoutineBody"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeRoutineBody (C_CompilerEx & inLexique,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                const GGS_formalParameterListAST   var_cas_inRoutineSignatureAST,
                                const GGS_localConstantList   var_cas_inLocalConstantList,
                                const GGS_typedAttributeList   var_cas_inTypedAttributeList,
                                const GGS_string  var_cas_inAttributeVariableNamePrefix,
                                const GGS_semanticInstructionListAST   var_cas_inInstructionList,
                                const GGS_location   var_cas_inEndOfMethodLocation,
                                GGS_semanticInstructionListForGeneration  & var_cas_outSemanticInstructionListForGeneration,
                                GGS_formalParameterListForGeneration  & var_cas_outRoutineSignature
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeRoutineBody at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_variableMap  var_cas_variableMap = GGS_variableMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (922)) ;
  {
    GGS_localConstantList::cEnumerator enumerator_39139 (var_cas_inLocalConstantList, true) ;
    const GGS_localConstantList::cElement * operand_39139 = NULL ;
    while (((operand_39139 = enumerator_39139.nextObject ()))) {
      macroValidPointer (operand_39139) ;
      const GGS_bool cond_39271 = operand_39139->mNoWarningIfUnused ;
      if (cond_39271.isBuiltAndTrue ()) {
        var_cas_variableMap.modifier_insertUsedLocalConstant (inLexique, operand_39139->mName, operand_39139->mType, operand_39139->mCppName, function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (926)) COMMA_SOURCE_FILE_AT_LINE (926)) ;
      }else if (cond_39271.isBuiltAndFalse ()) {
        var_cas_variableMap.modifier_insertLocalConstant (inLexique, operand_39139->mName, operand_39139->mType, operand_39139->mCppName, function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (928)) COMMA_SOURCE_FILE_AT_LINE (928)) ;
      }
    }
  }
  {
    GGS_typedAttributeList::cEnumerator enumerator_39447 (var_cas_inTypedAttributeList, true) ;
    const GGS_typedAttributeList::cElement * operand_39447 = NULL ;
    while (((operand_39447 = enumerator_39447.nextObject ()))) {
      macroValidPointer (operand_39447) ;
      var_cas_variableMap.modifier_insertNonMutableAttribute (inLexique, operand_39447->mAttributeName, operand_39447->mAttributeTypeProxy, ((var_cas_inAttributeVariableNamePrefix).operator_concat (GGS_string ("mAttribute_"))).operator_concat (operand_39447->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (936)).reader_identifierRepresentation ()), function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (937)) COMMA_SOURCE_FILE_AT_LINE (933)) ;
    }
  }
  ::routine_buildLocalVariableMapAndSignature (inLexique,  var_cas_inAnalysisContext.mSemanticContext,  var_cas_inRoutineSignatureAST,  var_cas_variableMap,  var_cas_outRoutineSignature COMMA_SOURCE_FILE_AT_LINE (941)) ;
  var_cas_outSemanticInstructionListForGeneration = GGS_semanticInstructionListForGeneration ::constructor_emptyList () ;
  {
    GGS_semanticInstructionListAST::cEnumerator enumerator_40031 (var_cas_inInstructionList, true) ;
    const GGS_semanticInstructionListAST::cElement * operand_40031 = NULL ;
    while (((operand_40031 = enumerator_40031.nextObject ()))) {
      macroValidPointer (operand_40031) ;
      { typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction method = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (operand_40031->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_40031->mInstruction (HERE), var_cas_inAnalysisContext, var_cas_outSemanticInstructionListForGeneration, var_cas_variableMap COMMA_SOURCE_FILE_AT_LINE (950)) ;
        }
      }
    }
  }
  if (var_cas_variableMap.isBuilt ()) {
    var_cas_variableMap (HERE)->method_checkAutomatonStates (inLexique, var_cas_inEndOfMethodLocation COMMA_SOURCE_FILE_AT_LINE (957)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeRoutineBody\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@externFunctionDeclarationAST.performSemanticAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externFunctionDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_externFunctionDeclarationAST * operand_40428,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_40428 != NULL) {
    GGS_formalInputParameterListForGeneration  var_cas_formalArgumentList = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
    {
      GGS_formalInputParameterListAST::cEnumerator enumerator_40706 (operand_40428->mFormalArgumentList, true) ;
      const GGS_formalInputParameterListAST::cElement * operand_40706 = NULL ;
      while (((operand_40706 = enumerator_40706.nextObject ()))) {
        macroValidPointer (operand_40706) ;
        var_cas_formalArgumentList.addAssign_operation (GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_40706->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (970)), operand_40706->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (971)), operand_40706->mFormalArgumentName, operand_40706->mIsUnused) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_functionPrototypeDeclarationForGeneration ::constructor_new (inLexique, operand_40428->mFunctionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (977)), var_cas_formalArgumentList, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_40428->mResultTypeName COMMA_SOURCE_FILE_AT_LINE (979)) COMMA_SOURCE_FILE_AT_LINE (976)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@externRoutineDeclarationAST.performSemanticAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externRoutineDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_externRoutineDeclarationAST * operand_41336,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41336 != NULL) {
    GGS_formalParameterListForGeneration  var_cas_formalArgumentList = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    {
      GGS_formalParameterListAST::cEnumerator enumerator_41609 (operand_41336->mFormalArgumentList, true) ;
      const GGS_formalParameterListAST::cElement * operand_41609 = NULL ;
      while (((operand_41609 = enumerator_41609.nextObject ()))) {
        macroValidPointer (operand_41609) ;
        var_cas_formalArgumentList.addAssign_operation (operand_41609->mFormalArgumentPassingMode, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_41609->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (996)), operand_41609->mFormalArgumentName, operand_41609->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (998))) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_routinePrototypeDeclarationForGeneration ::constructor_new (inLexique, operand_41336->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1002)), var_cas_formalArgumentList COMMA_SOURCE_FILE_AT_LINE (1001)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@routineDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__routineDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_routineDeclarationAST * operand_42164,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_42164 != NULL) {
    GGS_formalParameterListForGeneration  var_cas_formalArgumentList = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (1022)), GGS_string ("")) ;
    ::routine_analyzeRoutineBody (inLexique,  var_cas_analysisContext,  operand_42164->mFormalArgumentList,  GGS_localConstantList ::constructor_emptyList (),  GGS_typedAttributeList ::constructor_emptyList (),  GGS_string (""),  operand_42164->mRoutineInstructionList,  operand_42164->mEndOfRoutineInstructionList,  var_cas_instructionList,  var_cas_formalArgumentList COMMA_SOURCE_FILE_AT_LINE (1025)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_routineImplementationForGeneration ::constructor_new (inLexique, operand_42164->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1038)), var_cas_formalArgumentList, var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (1037)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@classDeclarationAST.performSemanticAnalysis'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__classDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_classDeclarationAST * operand_43210,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43210 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_43210->mClassTypeName COMMA_SOURCE_FILE_AT_LINE (1054)) ;
    GGS_unifiedTypeMapProxy  var_cas_superClassProxy ;
    GGS_typedAttributeList  var_cas_allAttributeList ;
    GGS_instanceMethodMap  var_cas_inheritedInstanceMethodMap ;
    const GGS_bool cond_44576 = (operand_43210->mSuperClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1061))).operator_isEqual (GGS_string ("")) ;
    if (cond_44576.isBuiltAndTrue ()) {
      var_cas_superClassProxy = GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (1062)) ;
      var_cas_allAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
      var_cas_inheritedInstanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1064)) ;
      GGS_bool var_cas_generatedInSeparateFileFeature = GGS_bool (false) ;
      const GGS_bool cond_44564 = (operand_43210->mClassFeatureList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_44564.isBuiltAndTrue ()) {
        {
          GGS_lstringlist::cEnumerator enumerator_44161 (operand_43210->mClassFeatureList, true) ;
          const GGS_lstringlist::cElement * operand_44161 = NULL ;
          while (((operand_44161 = enumerator_44161.nextObject ()))) {
            macroValidPointer (operand_44161) ;
            const GGS_bool cond_44433 = (operand_44161->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1068))).operator_isEqual (GGS_string ("generatedInSeparateFile")) ;
            if (cond_44433.isBuiltAndTrue ()) {
              const GGS_bool cond_44364 = var_cas_generatedInSeparateFileFeature ;
              if (cond_44364.isBuiltAndTrue ()) {
                operand_44161->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'generatedInSeparateFile' is already named") COMMA_SOURCE_FILE_AT_LINE (1071)) ;
              }
              var_cas_generatedInSeparateFileFeature = GGS_bool (true) ;
            }else if (cond_44433.isBuiltAndFalse ()) {
              operand_44161->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'generatedInSeparateFile' feature is allowed here") COMMA_SOURCE_FILE_AT_LINE (1075)) ;
            }
          }
        }
      }
    }else if (cond_44576.isBuiltAndFalse ()) {
      var_cas_superClassProxy = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_43210->mSuperClassName COMMA_SOURCE_FILE_AT_LINE (1079)) ;
      var_cas_allAttributeList = var_cas_superClassProxy.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1080)) ;
      var_cas_inheritedInstanceMethodMap = var_cas_superClassProxy.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1081)) ;
      const GGS_bool cond_45001 = (operand_43210->mClassFeatureList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_45001.isBuiltAndTrue ()) {
        {
          GGS_lstringlist::cEnumerator enumerator_44895 (operand_43210->mClassFeatureList, true) ;
          const GGS_lstringlist::cElement * operand_44895 = NULL ;
          while (((operand_44895 = enumerator_44895.nextObject ()))) {
            macroValidPointer (operand_44895) ;
            operand_44895->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a class that has a super may not have any feature") COMMA_SOURCE_FILE_AT_LINE (1085)) ;
          }
        }
      }
    }
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1090)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_45169 (operand_43210->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_45169 = NULL ;
      while (((operand_45169 = enumerator_45169.nextObject ()))) {
        macroValidPointer (operand_45169) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_45169->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (1092)) ;
        GGS_bool var_cas_hasSetter = GGS_bool (false) ;
        GGS_bool var_cas_hasGetter = GGS_bool (true) ;
        {
          GGS_lstringlist::cEnumerator enumerator_45348 (operand_45169->mFeatureList, true) ;
          const GGS_lstringlist::cElement * operand_45348 = NULL ;
          while (((operand_45348 = enumerator_45348.nextObject ()))) {
            macroValidPointer (operand_45348) ;
            const GGS_bool cond_45543 = (operand_45348->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1096))).operator_isEqual (GGS_string ("setter")) ;
            if (cond_45543.isBuiltAndTrue ()) {
              const GGS_bool cond_45498 = var_cas_hasSetter ;
              if (cond_45498.isBuiltAndTrue ()) {
                operand_45348->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'setter' feature is already named") COMMA_SOURCE_FILE_AT_LINE (1099)) ;
              }
              var_cas_hasSetter = GGS_bool (true) ;
            }else if (cond_45543.isBuiltAndFalse ()) {
              const GGS_bool cond_45734 = (operand_45348->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1101))).operator_isEqual (GGS_string ("nogetter")) ;
              if (cond_45734.isBuiltAndTrue ()) {
                const GGS_bool cond_45689 = (var_cas_hasGetter).operator_not () ;
                if (cond_45689.isBuiltAndTrue ()) {
                  operand_45348->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'nogetter' feature is already named") COMMA_SOURCE_FILE_AT_LINE (1104)) ;
                }
                var_cas_hasGetter = GGS_bool (false) ;
              }else if (cond_45734.isBuiltAndFalse ()) {
                operand_45348->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'setter' or 'nogetter' are allowed here") COMMA_SOURCE_FILE_AT_LINE (1108)) ;
              }
            }
          }
        }
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_45169->mAttributeName, var_cas_hasSetter, var_cas_hasGetter) ;
        var_cas_allAttributeList.addAssign_operation (var_cas_t, operand_45169->mAttributeName, var_cas_hasSetter, var_cas_hasGetter) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_45169->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (1122)) ;
      }
    }
    GGS_declaredMethodMap  var_cas_classMethodMap = GGS_declaredMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1125)) ;
    {
      GGS_abstractMethodDefinitionListAST::cEnumerator enumerator_46234 (operand_43210->mAbstractMethodList, true) ;
      const GGS_abstractMethodDefinitionListAST::cElement * operand_46234 = NULL ;
      while (((operand_46234 = enumerator_46234.nextObject ()))) {
        macroValidPointer (operand_46234) ;
        var_cas_classMethodMap.modifier_insertKey (inLexique, operand_46234->mMethodName COMMA_SOURCE_FILE_AT_LINE (1127)) ;
      }
    }
    {
      GGS_methodDefinitionListAST::cEnumerator enumerator_46322 (operand_43210->mMethodList, true) ;
      const GGS_methodDefinitionListAST::cElement * operand_46322 = NULL ;
      while (((operand_46322 = enumerator_46322.nextObject ()))) {
        macroValidPointer (operand_46322) ;
        var_cas_classMethodMap.modifier_insertKey (inLexique, operand_46322->mMethodName COMMA_SOURCE_FILE_AT_LINE (1130)) ;
      }
    }
    GGS_abstractMethodDefinitionListForGeneration  var_cas_abstractMethodList = GGS_abstractMethodDefinitionListForGeneration ::constructor_emptyList () ;
    {
      GGS_abstractMethodDefinitionListAST::cEnumerator enumerator_46521 (operand_43210->mAbstractMethodList, true) ;
      const GGS_abstractMethodDefinitionListAST::cElement * operand_46521 = NULL ;
      while (((operand_46521 = enumerator_46521.nextObject ()))) {
        macroValidPointer (operand_46521) ;
        const GGS_bool cond_46707 = (operand_43210->mIsAbstract).operator_not () ;
        if (cond_46707.isBuiltAndTrue ()) {
          operand_46521->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a concrete class cannot declare an abstract method") COMMA_SOURCE_FILE_AT_LINE (1138)) ;
        }
        GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
        {
          GGS_formalParameterListAST::cEnumerator enumerator_46852 (operand_46521->mSignature, true) ;
          const GGS_formalParameterListAST::cElement * operand_46852 = NULL ;
          while (((operand_46852 = enumerator_46852.nextObject ()))) {
            macroValidPointer (operand_46852) ;
            var_cas_formalParameterListForGeneration.addAssign_operation (operand_46852->mFormalArgumentPassingMode, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_46852->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (1144)), operand_46852->mFormalArgumentName, operand_46852->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1146))) ;
          }
        }
        const GGS_bool cond_47591 = operand_46521->mIsOverriding ;
        if (cond_47591.isBuiltAndTrue ()) {
          GGS_formalParameterSignature  var_cas_inheritedSignature ;
          GGS_location  var_cas_inheritedDeclarationLocation ;
          GGS_bool automatic_var_47403_0 ;
          GGS_bool automatic_var_47403_1 ;
          GGS_methodQualifier automatic_var_47403_2 ;
          if (var_cas_inheritedInstanceMethodMap.isBuilt ()) {
            var_cas_inheritedInstanceMethodMap (HERE)->method_searchInheritedKey (inLexique, operand_46521->mMethodName, automatic_var_47403_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_47403_1, automatic_var_47403_2 COMMA_SOURCE_FILE_AT_LINE (1153)) ;
          }
          ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_46521->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1156)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (1154)) ;
        }else if (cond_47591.isBuiltAndFalse ()) {
          const GGS_bool cond_47774 = var_cas_inheritedInstanceMethodMap.reader_hasKey (operand_46521->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1160))) ;
          if (cond_47774.isBuiltAndTrue ()) {
            operand_46521->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this method cannot be declared as abstract, it is already declared in super class") COMMA_SOURCE_FILE_AT_LINE (1162)) ;
          }
        }
        var_cas_abstractMethodList.addAssign_operation (operand_46521->mIsOverriding, operand_46521->mMethodName, var_cas_formalParameterListForGeneration) ;
      }
    }
    GGS_methodDefinitionListForGeneration  var_cas_methodList = GGS_methodDefinitionListForGeneration ::constructor_emptyList () ;
    GGS_stringset  var_cas_definedMethodSet = GGS_stringset ::constructor_emptySet () ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("this")) ;
    {
      GGS_methodDefinitionListAST::cEnumerator enumerator_48152 (operand_43210->mMethodList, true) ;
      const GGS_methodDefinitionListAST::cElement * operand_48152 = NULL ;
      while (((operand_48152 = enumerator_48152.nextObject ()))) {
        macroValidPointer (operand_48152) ;
        GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
        GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
        ::routine_analyzeRoutineBody (inLexique,  var_cas_analysisContext,  operand_48152->mSignature,  GGS_localConstantList ::constructor_emptyList (),  var_cas_allAttributeList,  GGS_string (""),  operand_48152->mInstructionList,  operand_48152->mEndOfMethodLocation,  var_cas_semanticInstructionListForGeneration,  var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1178)) ;
        const GGS_bool cond_49291 = operand_48152->mIsOverriding ;
        if (cond_49291.isBuiltAndTrue ()) {
          GGS_formalParameterSignature  var_cas_inheritedSignature ;
          GGS_location  var_cas_inheritedDeclarationLocation ;
          GGS_bool var_cas_inheritedIsCategory ;
          GGS_bool automatic_var_48939_0 ;
          GGS_methodQualifier automatic_var_48939_1 ;
          if (var_cas_inheritedInstanceMethodMap.isBuilt ()) {
            var_cas_inheritedInstanceMethodMap (HERE)->method_searchInheritedKey (inLexique, operand_48152->mMethodName, var_cas_inheritedIsCategory, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_48939_0, automatic_var_48939_1 COMMA_SOURCE_FILE_AT_LINE (1194)) ;
          }
          ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_48152->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1197)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (1195)) ;
          const GGS_bool cond_49276 = var_cas_inheritedIsCategory ;
          if (cond_49276.isBuiltAndTrue ()) {
            operand_48152->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this method is declared in class, but overriden method is declared as multi-method") COMMA_SOURCE_FILE_AT_LINE (1203)) ;
          }
        }else if (cond_49291.isBuiltAndFalse ()) {
          const GGS_bool cond_49480 = var_cas_inheritedInstanceMethodMap.reader_hasKey (operand_48152->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1204))) ;
          if (cond_49480.isBuiltAndTrue ()) {
            operand_48152->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this method should be declared as overridding, as it is already declared in super class") COMMA_SOURCE_FILE_AT_LINE (1206)) ;
          }
        }
        var_cas_definedMethodSet.addAssign_operation (operand_48152->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1208))) ;
        var_cas_methodList.addAssign_operation (operand_48152->mIsOverriding, operand_48152->mMethodName, var_cas_formalParameterListForGeneration, var_cas_semanticInstructionListForGeneration) ;
      }
    }
    const GGS_bool cond_50225 = (operand_43210->mIsAbstract).operator_not () ;
    if (cond_50225.isBuiltAndTrue ()) {
      {
        GGS_instanceMethodMap::cEnumerator enumerator_49823 (var_cas_inheritedInstanceMethodMap, true) ;
        const GGS_instanceMethodMap::cElement * operand_49823 = NULL ;
        while (((operand_49823 = enumerator_49823.nextObject ()))) {
          macroValidPointer (operand_49823) ;
          const GGS_bool cond_50196 = ((operand_49823->mInfo.mQualifier).operator_isEqual (GGS_methodQualifier::constructor_isAbstract (inLexique COMMA_SOURCE_FILE_AT_LINE (1219)))).operator_or ((operand_49823->mInfo.mQualifier).operator_isEqual (GGS_methodQualifier::constructor_isOverridingAbstract (inLexique COMMA_SOURCE_FILE_AT_LINE (1219)))) ;
          if (cond_50196.isBuiltAndTrue ()) {
            const GGS_bool cond_50177 = (var_cas_definedMethodSet.reader_hasKey (operand_49823->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1220)))).operator_not () ;
            if (cond_50177.isBuiltAndTrue ()) {
              operand_49823->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (operand_43210->mClassTypeName)).operator_concat (GGS_string ("' class is declared concrete, but the '"))).operator_concat (operand_49823->mKey)).operator_concat (GGS_string ("' method declared in a super class is not implemented")) COMMA_SOURCE_FILE_AT_LINE (1222)) ;
            }
          }
        }
      }
    }
    GGS_string var_cas_sortString = var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1227)) ;
    GGS_unifiedTypeMapProxy  var_cas_t = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1228)) ;
    GGS_uint _variant_50539 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1229)) ;
    GGS_bool _condition_50539 (_variant_50539.isBuilt (), true) ;
    while (_condition_50539.isBuiltAndTrue ()) {
      _condition_50539 = (var_cas_t.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1230))).operator_not () ;
      if (_condition_50539.isBuiltAndTrue ()) {
        if (_variant_50539.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1233)) ;
          _condition_50539 = GGS_bool (false) ;
        }else{
          _variant_50539.decrement_operation (inLexique COMMA_HERE) ;
          var_cas_sortString = ((var_cas_t.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1231))).operator_concat (GGS_string ("."))).operator_concat (var_cas_sortString) ;
          var_cas_t = var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1232)) ;
        }
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_classTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_43210->mClassTypeName COMMA_SOURCE_FILE_AT_LINE (1236)), operand_43210->mIsAbstract, operand_43210->mClassTypeName, var_cas_superClassProxy, var_cas_allAttributeList, var_cas_typedAttributeList, var_cas_abstractMethodList, var_cas_methodList, var_cas_selfType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1244)), var_cas_selfType.reader_mGenerateHeaderInSeparateFile (inLexique COMMA_SOURCE_FILE_AT_LINE (1245)) COMMA_SOURCE_FILE_AT_LINE (1235)), var_cas_sortString) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "analyzeFunctionBody"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeFunctionBody (C_CompilerEx & inLexique,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                const GGS_formalInputParameterListAST   var_cas_inFunctionSignature,
                                const GGS_typedAttributeList   var_cas_inTypedAttributeList,
                                const GGS_string  var_cas_inAttributeVariableNamePrefix,
                                const GGS_semanticInstructionListAST   var_cas_inInstructionList,
                                const GGS_lstring   var_cas_inReturnVariableName,
                                const GGS_lstring   var_cas_inResultTypeName,
                                const GGS_location   var_cas_inEndOfFunctionLocation,
                                GGS_formalInputParameterListForGeneration  & var_cas_outSignatureForGeneration,
                                GGS_unifiedTypeMapProxy  & var_cas_outReturnedType,
                                GGS_string & var_cas_outResultVariableCppName,
                                GGS_semanticInstructionListForGeneration  & var_cas_outSemanticInstructionListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeFunctionBody at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_variableMap  var_cas_variableMap = GGS_variableMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1267)) ;
  {
    GGS_typedAttributeList::cEnumerator enumerator_51739 (var_cas_inTypedAttributeList, true) ;
    const GGS_typedAttributeList::cElement * operand_51739 = NULL ;
    while (((operand_51739 = enumerator_51739.nextObject ()))) {
      macroValidPointer (operand_51739) ;
      var_cas_variableMap.modifier_insertNonMutableAttribute (inLexique, operand_51739->mAttributeName, operand_51739->mAttributeTypeProxy, ((var_cas_inAttributeVariableNamePrefix).operator_concat (GGS_string ("mAttribute_"))).operator_concat (operand_51739->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1273)).reader_identifierRepresentation ()), function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (1274)) COMMA_SOURCE_FILE_AT_LINE (1270)) ;
    }
  }
  var_cas_outSignatureForGeneration = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
  {
    GGS_formalInputParameterListAST::cEnumerator enumerator_52131 (var_cas_inFunctionSignature, true) ;
    const GGS_formalInputParameterListAST::cElement * operand_52131 = NULL ;
    while (((operand_52131 = enumerator_52131.nextObject ()))) {
      macroValidPointer (operand_52131) ;
      const GGS_unifiedTypeMapProxy  var_cas_parameterType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, operand_52131->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (1280)) ;
      const GGS_bool cond_52833 = operand_52131->mIsConstant ;
      if (cond_52833.isBuiltAndTrue ()) {
        const GGS_string var_cas_cppName = (GGS_string ("constinArgument_")).operator_concat (operand_52131->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1282)).reader_identifierRepresentation ()) ;
        var_cas_outSignatureForGeneration.addAssign_operation (var_cas_parameterType, var_cas_cppName, operand_52131->mFormalArgumentName, operand_52131->mIsUnused) ;
        const GGS_bool cond_52695 = operand_52131->mIsUnused ;
        if (cond_52695.isBuiltAndTrue ()) {
          var_cas_variableMap.modifier_insertConstantInputFormalArgumentDeclaredAsUnused (inLexique, operand_52131->mFormalArgumentName, var_cas_parameterType, var_cas_cppName, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (1290)) ;
        }else if (cond_52695.isBuiltAndFalse ()) {
          var_cas_variableMap.modifier_insertConstantInputFormalArgument (inLexique, operand_52131->mFormalArgumentName, var_cas_parameterType, var_cas_cppName, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (1292)) ;
        }
      }else if (cond_52833.isBuiltAndFalse ()) {
        const GGS_string var_cas_cppName = (GGS_string ("inArgument_")).operator_concat (operand_52131->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1295)).reader_identifierRepresentation ()) ;
        var_cas_outSignatureForGeneration.addAssign_operation (var_cas_parameterType, var_cas_cppName, operand_52131->mFormalArgumentName, operand_52131->mIsUnused) ;
        const GGS_bool cond_53226 = operand_52131->mIsUnused ;
        if (cond_53226.isBuiltAndTrue ()) {
          var_cas_variableMap.modifier_insertInputFormalArgumentDeclaredAsUnused (inLexique, operand_52131->mFormalArgumentName, var_cas_parameterType, var_cas_cppName, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (1303)) ;
        }else if (cond_53226.isBuiltAndFalse ()) {
          var_cas_variableMap.modifier_insertInputFormalArgument (inLexique, operand_52131->mFormalArgumentName, var_cas_parameterType, var_cas_cppName, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (1305)) ;
        }
      }
    }
  }
  var_cas_outReturnedType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, var_cas_inResultTypeName COMMA_SOURCE_FILE_AT_LINE (1310)) ;
  var_cas_outResultVariableCppName = (GGS_string ("result_")).operator_concat (var_cas_inResultTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1311)).reader_identifierRepresentation ()) ;
  var_cas_variableMap.modifier_insertOutputFormalArgument (inLexique, var_cas_inReturnVariableName, var_cas_outReturnedType, var_cas_outResultVariableCppName, var_cas_outResultVariableCppName COMMA_SOURCE_FILE_AT_LINE (1312)) ;
  var_cas_outSemanticInstructionListForGeneration = GGS_semanticInstructionListForGeneration ::constructor_emptyList () ;
  {
    GGS_semanticInstructionListAST::cEnumerator enumerator_53915 (var_cas_inInstructionList, true) ;
    const GGS_semanticInstructionListAST::cElement * operand_53915 = NULL ;
    while (((operand_53915 = enumerator_53915.nextObject ()))) {
      macroValidPointer (operand_53915) ;
      { typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction method = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (operand_53915->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_53915->mInstruction (HERE), var_cas_inAnalysisContext, var_cas_outSemanticInstructionListForGeneration, var_cas_variableMap COMMA_SOURCE_FILE_AT_LINE (1316)) ;
        }
      }
    }
  }
  if (var_cas_variableMap.isBuilt ()) {
    var_cas_variableMap (HERE)->method_checkAutomatonStates (inLexique, var_cas_inEndOfFunctionLocation COMMA_SOURCE_FILE_AT_LINE (1323)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeFunctionBody\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@functionDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__functionDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_functionDeclarationAST * operand_54308,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_54308 != NULL) {
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    GGS_formalInputParameterListForGeneration  var_cas_formalInputParameterList ;
    GGS_unifiedTypeMapProxy  var_cas_returnType ;
    GGS_string var_cas_resultVariableCppName ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (1341)), GGS_string ("")) ;
    ::routine_analyzeFunctionBody (inLexique,  var_cas_analysisContext,  operand_54308->mFormalArgumentList,  GGS_typedAttributeList ::constructor_emptyList (),  GGS_string (""),  operand_54308->mFunctionInstructionList,  operand_54308->mResultVariableName,  operand_54308->mResultTypeName,  operand_54308->mEndOfFunctionInstructionList,  var_cas_formalInputParameterList,  var_cas_returnType,  var_cas_resultVariableCppName,  var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1344)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_functionImplementationForGeneration ::constructor_new (inLexique, operand_54308->mFunctionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1360)), var_cas_formalInputParameterList, var_cas_returnType, var_cas_resultVariableCppName, var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1359)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@onceFunctionDeclarationAST.performSemanticAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__onceFunctionDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_onceFunctionDeclarationAST * operand_55613,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_55613 != NULL) {
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    GGS_unifiedTypeMapProxy  var_cas_returnType ;
    GGS_string var_cas_resultVariableCppName ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (1384)), GGS_string ("")) ;
    GGS_formalInputParameterListForGeneration  automatic_var_56438_0 ;
    ::routine_analyzeFunctionBody (inLexique,  var_cas_analysisContext,  GGS_formalInputParameterListAST ::constructor_emptyList (),  GGS_typedAttributeList ::constructor_emptyList (),  GGS_string (""),  operand_55613->mFunctionInstructionList,  operand_55613->mResultVariableName,  operand_55613->mResultTypeName,  operand_55613->mEndOfFunctionInstructionList,  automatic_var_56438_0,  var_cas_returnType,  var_cas_resultVariableCppName,  var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1387)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_onceFunctionDeclarationForGeneration ::constructor_new (inLexique, operand_55613->mFunctionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1403)), var_cas_returnType, var_cas_resultVariableCppName, var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1402)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@filewrapperDeclarationAST.performSemanticAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__filewrapperDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_filewrapperDeclarationAST * operand_57130,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_57130 != NULL) {
    GGS_wrapperFileMap  var_cas_wrapperFileMap ;
    GGS_wrapperDirectoryMap  var_cas_wrapperDirectoryMap ;
    GGS_lstring  automatic_var_57547_0 ;
    GGS_lstringlist  automatic_var_57547_1 ;
    GGS_filewrapperTemplateMap  automatic_var_57547_2 ;
    if (var_cas_inSemanticContext.mFilewrapperMap.isBuilt ()) {
      var_cas_inSemanticContext.mFilewrapperMap (HERE)->method_searchKey (inLexique, operand_57130->mFilewrapperName, automatic_var_57547_0, automatic_var_57547_1, var_cas_wrapperFileMap, var_cas_wrapperDirectoryMap, automatic_var_57547_2 COMMA_SOURCE_FILE_AT_LINE (1426)) ;
    }
    GGS_string var_cas_absoluteSourcePath ;
    const GGS_bool cond_57731 = (operand_57130->mFilewrapperPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1436)).reader_firstCharacterOrNul ()).operator_isEqual (GGS_char (TO_UNICODE ('/'))) ;
    if (cond_57731.isBuiltAndTrue ()) {
      var_cas_absoluteSourcePath = operand_57130->mFilewrapperPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1437)) ;
    }else if (cond_57731.isBuiltAndFalse ()) {
      var_cas_absoluteSourcePath = ((var_cas_inSemanticContext.reader_mSourceFileAbsolutePath (inLexique COMMA_SOURCE_FILE_AT_LINE (1439)).reader_stringByDeletingLastPathComponent ()).operator_concat (GGS_string ("/"))).operator_concat (operand_57130->mFilewrapperPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1439))) ;
    }
    const GGS_bool cond_58032 = (var_cas_absoluteSourcePath.reader_directoryExists ()).operator_not () ;
    if (cond_58032.isBuiltAndTrue ()) {
      operand_57130->mFilewrapperPath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The '")).operator_concat (var_cas_absoluteSourcePath)).operator_concat (GGS_string ("' directory does not exist")) COMMA_SOURCE_FILE_AT_LINE (1443)) ;
    }else if (cond_58032.isBuiltAndFalse ()) {
      GGS_filewrapperTemplateListForGeneration  var_cas_filewrapperTemplateListForGeneration = GGS_filewrapperTemplateListForGeneration ::constructor_emptyList () ;
      {
        GGS_filewrapperTemplateListAST::cEnumerator enumerator_58200 (operand_57130->mFilewrapperTemplateList, true) ;
        const GGS_filewrapperTemplateListAST::cElement * operand_58200 = NULL ;
        while (((operand_58200 = enumerator_58200.nextObject ()))) {
          macroValidPointer (operand_58200) ;
          const GGS_bool cond_58437 = (operand_58200->mFilewrapperTemplatePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1447)).reader_firstCharacterOrNul ()).operator_isEqual (GGS_char (TO_UNICODE ('/'))) ;
          if (cond_58437.isBuiltAndTrue ()) {
            operand_58200->mFilewrapperTemplatePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the path should not begin with a '/'; it is relative to filewrapper path '")).operator_concat (var_cas_absoluteSourcePath)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1449)) ;
          }
          const GGS_string var_cas_absoluteTemplatePath = ((var_cas_absoluteSourcePath).operator_concat (GGS_string ("/"))).operator_concat (operand_58200->mFilewrapperTemplatePath) ;
          GGS_templateInstructionListAST  var_cas_resultingInstructionList ;
          const GGS_string _depExtension = GGS_string ("") ;
          const GGS_string _depPath = GGS_string ("") ;
          if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
            C_Grammar_templateGrammar::_performSourceFileParsing_ (inLexique,
                                          _depExtension.string (),
                                          _depPath.string (),
                                          NULL,
                                          GGS_lstring ::constructor_new (inLexique, var_cas_absoluteTemplatePath, operand_58200->mFilewrapperTemplatePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1453)) COMMA_SOURCE_FILE_AT_LINE (1453)),
                                          var_cas_resultingInstructionList
                                          COMMA_SOURCE_FILE_AT_LINE (1453)) ;
          }
          GGS_templateVariableMap  var_cas_templateVariableMap = GGS_templateVariableMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1455)) ;
          GGS_formalInputParameterListForGeneration  var_cas_filewrapperTemplateFormalInputParameters = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
          {
            GGS_formalTemplateInputParameterListAST::cEnumerator enumerator_59013 (operand_58200->mFilewrapperTemplateFormalInputParameters, true) ;
            const GGS_formalTemplateInputParameterListAST::cElement * operand_59013 = NULL ;
            while (((operand_59013 = enumerator_59013.nextObject ()))) {
              macroValidPointer (operand_59013) ;
              GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_59013->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (1458)) ;
              const GGS_string var_cas_cppVarName = (GGS_string ("in_")).operator_concat (operand_59013->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1459)).reader_identifierRepresentation ()) ;
              var_cas_templateVariableMap.modifier_insertKey (inLexique, operand_59013->mFormalArgumentName, var_cas_type, var_cas_cppVarName COMMA_SOURCE_FILE_AT_LINE (1460)) ;
              var_cas_filewrapperTemplateFormalInputParameters.addAssign_operation (var_cas_type, var_cas_cppVarName, operand_59013->mFormalArgumentName, GGS_bool (true)) ;
            }
          }
          GGS_templateInstructionListForGeneration  var_cas_templateInstructionListForGeneration = GGS_templateInstructionListForGeneration ::constructor_emptyList () ;
          const GGS_templateAnalysisContext var_cas_templateAnalysisContext = GGS_templateAnalysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_templateVariableMap) ;
          ::routine_templateInstructionListAnalysis (inLexique,  var_cas_templateAnalysisContext,  var_cas_resultingInstructionList,  var_cas_templateInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1470)) ;
          var_cas_filewrapperTemplateListForGeneration.addAssign_operation (operand_58200->mFilewrapperTemplateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1473)), var_cas_filewrapperTemplateFormalInputParameters, var_cas_templateInstructionListForGeneration) ;
        }
      }
      var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_filewrapperDeclarationForGeneration ::constructor_new (inLexique, operand_57130->mFilewrapperName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1480)), operand_57130->mFilewrapperPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1481)), var_cas_wrapperFileMap, var_cas_wrapperDirectoryMap, var_cas_filewrapperTemplateListForGeneration COMMA_SOURCE_FILE_AT_LINE (1479)), GGS_string ("")) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@abstractCategoryMethodAST.performSemanticAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__abstractCategoryMethodAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_abstractCategoryMethodAST * operand_60556,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_60556 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_60556->mTypeName COMMA_SOURCE_FILE_AT_LINE (1499)) ;
    const GGS_bool cond_61093 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1501))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1501))) ;
    if (cond_61093.isBuiltAndTrue ()) {
      operand_60556->mAbstractCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1502)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1503)) ;
    }else if (cond_61093.isBuiltAndFalse ()) {
      const GGS_bool cond_61265 = var_cas_selfType.reader_mIsConcrete (inLexique COMMA_SOURCE_FILE_AT_LINE (1503)) ;
      if (cond_61265.isBuiltAndTrue ()) {
        operand_60556->mAbstractCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare an abstract category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1504)))).operator_concat (GGS_string ("' is not an abstract class")) COMMA_SOURCE_FILE_AT_LINE (1505)) ;
      }
    }
    GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    {
      GGS_formalParameterListAST::cEnumerator enumerator_61436 (operand_60556->mAbstractCategoryMethodFormalParameterList, true) ;
      const GGS_formalParameterListAST::cElement * operand_61436 = NULL ;
      while (((operand_61436 = enumerator_61436.nextObject ()))) {
        macroValidPointer (operand_61436) ;
        var_cas_formalParameterListForGeneration.addAssign_operation (operand_61436->mFormalArgumentPassingMode, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_61436->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (1511)), operand_61436->mFormalArgumentName, operand_61436->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1513))) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_abstractCategoryMethodForGeneration ::constructor_new (inLexique, operand_60556->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1518)), operand_60556->mAbstractCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1519)), var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1517)), GGS_string ("~")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@categoryMethodAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__categoryMethodAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_categoryMethodAST * operand_62110,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_62110 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_62110->mTypeName COMMA_SOURCE_FILE_AT_LINE (1534)) ;
    const GGS_bool cond_62620 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1536))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1536))) ;
    if (cond_62620.isBuiltAndTrue ()) {
      operand_62110->mCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1537)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1538)) ;
    }
    GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("object")) ;
    ::routine_analyzeRoutineBody (inLexique,  var_cas_analysisContext,  operand_62110->mCategoryMethodFormalParameterList,  GGS_localConstantList ::constructor_emptyList (),  var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1552)),  GGS_string ("object->"),  operand_62110->mCategoryMethodInstructionList,  operand_62110->mEndOfMethodLocation,  var_cas_semanticInstructionListForGeneration,  var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1548)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_categoryMethodForGeneration ::constructor_new (inLexique, operand_62110->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1561)), operand_62110->mCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1562)), var_cas_formalParameterListForGeneration, var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1564)), var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1560)), GGS_string ("~")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@overridingCategoryMethodAST.performSemanticAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingCategoryMethodAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_overridingCategoryMethodAST * operand_63755,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_63755 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_63755->mTypeName COMMA_SOURCE_FILE_AT_LINE (1579)) ;
    const GGS_bool cond_64275 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1581))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1581))) ;
    if (cond_64275.isBuiltAndTrue ()) {
      operand_63755->mOverridingCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1582)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1583)) ;
    }
    GGS_string var_cas_baseTypeName = GGS_string ("") ;
    GGS_unifiedTypeMapProxy  var_cas_superType = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1586)) ;
    GGS_formalParameterSignature  var_cas_inheritedSignature = GGS_formalParameterSignature ::constructor_emptyList () ;
    GGS_location  var_cas_inheritedDeclarationLocation = GGS_location (inLexique) ;
    GGS_uint _variant_65069 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1589)) ;
    GGS_bool _condition_65069 (_variant_65069.isBuilt (), true) ;
    while (_condition_65069.isBuiltAndTrue ()) {
      _condition_65069 = ((var_cas_superType.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1590))).operator_not ()).operator_and ((var_cas_baseTypeName).operator_isEqual (GGS_string (""))) ;
      if (_condition_65069.isBuiltAndTrue ()) {
        if (_variant_65069.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1599)) ;
          _condition_65069 = GGS_bool (false) ;
        }else{
          _variant_65069.decrement_operation (inLexique COMMA_HERE) ;
          const GGS_bool cond_65016 = var_cas_superType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1591)).reader_hasKey (operand_63755->mOverridingCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1591))) ;
          if (cond_65016.isBuiltAndTrue ()) {
            GGS_methodQualifier var_cas_qualifier ;
            GGS_bool automatic_var_64890_0 ;
            GGS_bool automatic_var_64890_1 ;
            const GGS_instanceMethodMap  temp_64791 = var_cas_superType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1593)) ;
            if (temp_64791.isBuilt ()) {
              temp_64791 (HERE)->method_searchKey (inLexique, operand_63755->mOverridingCategoryMethodName, automatic_var_64890_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_64890_1, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (1593)) ;
            }
            const GGS_bool cond_65003 = (var_cas_qualifier).operator_infOrEqual (GGS_methodQualifier::constructor_isBasicFinal (inLexique COMMA_SOURCE_FILE_AT_LINE (1594))) ;
            if (cond_65003.isBuiltAndTrue ()) {
              var_cas_baseTypeName = var_cas_superType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1595)) ;
            }
          }
          var_cas_superType = var_cas_superType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1598)) ;
        }
      }
    }
    GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("object")) ;
    ::routine_analyzeRoutineBody (inLexique,  var_cas_analysisContext,  operand_63755->mOverridingCategoryMethodFormalParameterList,  GGS_localConstantList ::constructor_emptyList (),  var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1613)),  GGS_string ("object->"),  operand_63755->mOverridingCategoryMethodInstructionList,  operand_63755->mEndOfMethodLocation,  var_cas_semanticInstructionListForGeneration,  var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1609)) ;
    const GGS_bool cond_65971 = (var_cas_baseTypeName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_65971.isBuiltAndTrue ()) {
      ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_63755->mOverridingCategoryMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1624)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (1622)) ;
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_overridingCategoryMethodForGeneration ::constructor_new (inLexique, operand_63755->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1631)), var_cas_baseTypeName, operand_63755->mOverridingCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1633)), var_cas_formalParameterListForGeneration, var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1635)), var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1630)), GGS_string ("~")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@overridingAbstractCategoryMethodAST.performSemanticAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingAbstractCategoryMethodAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_overridingAbstractCategoryMethodAST * operand_66515,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & /* var_cas_ioSemanticDeclarationListForGeneration */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_66515 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_66515->mTypeName COMMA_SOURCE_FILE_AT_LINE (1650)) ;
    const GGS_bool cond_67056 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1652))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1652))) ;
    if (cond_67056.isBuiltAndTrue ()) {
      operand_66515->mOverridingCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1653)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1654)) ;
    }else if (cond_67056.isBuiltAndFalse ()) {
      const GGS_bool cond_67230 = var_cas_selfType.reader_mIsConcrete (inLexique COMMA_SOURCE_FILE_AT_LINE (1654)) ;
      if (cond_67230.isBuiltAndTrue ()) {
        operand_66515->mOverridingCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare an abstract category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1655)))).operator_concat (GGS_string ("' is not an abstract class")) COMMA_SOURCE_FILE_AT_LINE (1656)) ;
      }
    }
    GGS_string var_cas_baseTypeName = GGS_string ("") ;
    GGS_unifiedTypeMapProxy  var_cas_superType = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1659)) ;
    GGS_formalParameterSignature  var_cas_inheritedSignature = GGS_formalParameterSignature ::constructor_emptyList () ;
    GGS_location  var_cas_inheritedDeclarationLocation = GGS_location (inLexique) ;
    GGS_uint _variant_68024 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1662)) ;
    GGS_bool _condition_68024 (_variant_68024.isBuilt (), true) ;
    while (_condition_68024.isBuiltAndTrue ()) {
      _condition_68024 = ((var_cas_superType.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1663))).operator_not ()).operator_and ((var_cas_baseTypeName).operator_isEqual (GGS_string (""))) ;
      if (_condition_68024.isBuiltAndTrue ()) {
        if (_variant_68024.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1672)) ;
          _condition_68024 = GGS_bool (false) ;
        }else{
          _variant_68024.decrement_operation (inLexique COMMA_HERE) ;
          const GGS_bool cond_67971 = var_cas_superType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1664)).reader_hasKey (operand_66515->mOverridingCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1664))) ;
          if (cond_67971.isBuiltAndTrue ()) {
            GGS_methodQualifier var_cas_qualifier ;
            GGS_bool automatic_var_67845_0 ;
            GGS_bool automatic_var_67845_1 ;
            const GGS_instanceMethodMap  temp_67746 = var_cas_superType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1666)) ;
            if (temp_67746.isBuilt ()) {
              temp_67746 (HERE)->method_searchKey (inLexique, operand_66515->mOverridingCategoryMethodName, automatic_var_67845_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_67845_1, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (1666)) ;
            }
            const GGS_bool cond_67958 = (var_cas_qualifier).operator_infOrEqual (GGS_methodQualifier::constructor_isBasicFinal (inLexique COMMA_SOURCE_FILE_AT_LINE (1667))) ;
            if (cond_67958.isBuiltAndTrue ()) {
              var_cas_baseTypeName = var_cas_superType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1668)) ;
            }
          }
          var_cas_superType = var_cas_superType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1671)) ;
        }
      }
    }
    GGS_variableMap  var_cas_variableMap = GGS_variableMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1674)) ;
    GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration ;
    ::routine_buildLocalVariableMapAndSignature (inLexique,  var_cas_inSemanticContext,  operand_66515->mOverridingCategoryMethodFormalParameterList,  var_cas_variableMap,  var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1676)) ;
    const GGS_bool cond_68583 = (var_cas_baseTypeName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_68583.isBuiltAndTrue ()) {
      ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_66515->mOverridingCategoryMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1686)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (1684)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@abstractCategoryReaderAST.performSemanticAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__abstractCategoryReaderAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_abstractCategoryReaderAST * operand_68748,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_68748 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_68748->mTypeName COMMA_SOURCE_FILE_AT_LINE (1701)) ;
    const GGS_bool cond_69285 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1703))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1703))) ;
    if (cond_69285.isBuiltAndTrue ()) {
      operand_68748->mAbstractCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1704)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1705)) ;
    }else if (cond_69285.isBuiltAndFalse ()) {
      const GGS_bool cond_69457 = var_cas_selfType.reader_mIsConcrete (inLexique COMMA_SOURCE_FILE_AT_LINE (1705)) ;
      if (cond_69457.isBuiltAndTrue ()) {
        operand_68748->mAbstractCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare an abstract category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1706)))).operator_concat (GGS_string ("' is not an abstract class")) COMMA_SOURCE_FILE_AT_LINE (1707)) ;
      }
    }
    GGS_formalInputParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
    {
      GGS_formalInputParameterListAST::cEnumerator enumerator_69638 (operand_68748->mAbstractCategoryReaderFormalInputParameterList, true) ;
      const GGS_formalInputParameterListAST::cElement * operand_69638 = NULL ;
      while (((operand_69638 = enumerator_69638.nextObject ()))) {
        macroValidPointer (operand_69638) ;
        var_cas_formalParameterListForGeneration.addAssign_operation (GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_69638->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (1712)), operand_69638->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1713)), operand_69638->mFormalArgumentName, operand_69638->mIsUnused) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_abstractCategoryReaderForGeneration ::constructor_new (inLexique, operand_68748->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1720)), operand_68748->mAbstractCategoryReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1721)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_68748->mAbstractCategoryReaderReturnedTypeName COMMA_SOURCE_FILE_AT_LINE (1722)), var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1719)), GGS_string ("~")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@categoryReaderAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__categoryReaderAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_categoryReaderAST * operand_70404,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_70404 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_70404->mTypeName COMMA_SOURCE_FILE_AT_LINE (1739)) ;
    const GGS_bool cond_70915 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1741))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1741))) ;
    if (cond_70915.isBuiltAndTrue ()) {
      operand_70404->mCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1742)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1743)) ;
    }
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("object")) ;
    GGS_unifiedTypeMapProxy  var_cas_returnType ;
    GGS_string var_cas_returnVariableCppName ;
    GGS_formalInputParameterListForGeneration  var_cas_formalParameterListForGeneration ;
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    ::routine_analyzeFunctionBody (inLexique,  var_cas_analysisContext,  operand_70404->mCategoryReaderFormalInputParameterList,  var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1758)),  GGS_string ("object->"),  operand_70404->mCategoryReaderInstructionList,  operand_70404->mCategoryReaderReturnedVariableName,  operand_70404->mCategoryReaderReturnedTypeName,  operand_70404->mEndOfReaderLocation,  var_cas_formalParameterListForGeneration,  var_cas_returnType,  var_cas_returnVariableCppName,  var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1755)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_categoryReaderForGeneration ::constructor_new (inLexique, operand_70404->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1771)), operand_70404->mCategoryReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1772)), var_cas_returnType, var_cas_returnVariableCppName, var_cas_formalParameterListForGeneration, var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1776)), var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1770)), GGS_string ("~")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@overridingCategoryReaderAST.performSemanticAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingCategoryReaderAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_overridingCategoryReaderAST * operand_72247,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_72247 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_72247->mTypeName COMMA_SOURCE_FILE_AT_LINE (1791)) ;
    const GGS_bool cond_72767 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1793))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1793))) ;
    if (cond_72767.isBuiltAndTrue ()) {
      operand_72247->mOverridingCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1794)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1795)) ;
    }
    GGS_string var_cas_baseTypeName = GGS_string ("") ;
    GGS_unifiedTypeMapProxy  var_cas_superType = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1798)) ;
    GGS_unifiedTypeMapProxyList  var_cas_inheritedSignature = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
    GGS_unifiedTypeMapProxy  var_cas_inheritedReturnType = GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (1800)) ;
    GGS_location  var_cas_inheritedDeclarationLocation = GGS_location (inLexique) ;
    GGS_uint _variant_73680 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1802)) ;
    GGS_bool _condition_73680 (_variant_73680.isBuilt (), true) ;
    while (_condition_73680.isBuiltAndTrue ()) {
      _condition_73680 = ((var_cas_superType.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1803))).operator_not ()).operator_and ((var_cas_baseTypeName).operator_isEqual (GGS_string (""))) ;
      if (_condition_73680.isBuiltAndTrue ()) {
        if (_variant_73680.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1820)) ;
          _condition_73680 = GGS_bool (false) ;
        }else{
          _variant_73680.decrement_operation (inLexique COMMA_HERE) ;
          const GGS_bool cond_73627 = var_cas_superType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1804)).reader_hasKey (operand_72247->mOverridingCategoryReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1804))) ;
          if (cond_73627.isBuiltAndTrue ()) {
            GGS_methodQualifier var_cas_qualifier ;
            GGS_bool automatic_var_73501_0 ;
            GGS_bool automatic_var_73501_1 ;
            const GGS_readerMap  temp_73318 = var_cas_superType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1806)) ;
            if (temp_73318.isBuilt ()) {
              temp_73318 (HERE)->method_searchKey (inLexique, operand_72247->mOverridingCategoryReaderName, automatic_var_73501_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_73501_1, var_cas_inheritedReturnType, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (1806)) ;
            }
            const GGS_bool cond_73614 = (var_cas_qualifier).operator_infOrEqual (GGS_methodQualifier::constructor_isBasicFinal (inLexique COMMA_SOURCE_FILE_AT_LINE (1815))) ;
            if (cond_73614.isBuiltAndTrue ()) {
              var_cas_baseTypeName = var_cas_superType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1816)) ;
            }
          }
          var_cas_superType = var_cas_superType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1819)) ;
        }
      }
    }
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("object")) ;
    GGS_unifiedTypeMapProxy  var_cas_returnType ;
    GGS_string var_cas_returnVariableCppName ;
    GGS_formalInputParameterListForGeneration  var_cas_formalParameterListForGeneration ;
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    ::routine_analyzeFunctionBody (inLexique,  var_cas_analysisContext,  operand_72247->mOverridingCategoryReaderFormalInputParameterList,  var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1835)),  GGS_string ("object->"),  operand_72247->mOverridingCategoryReaderInstructionList,  operand_72247->mOverridingCategoryReaderReturnedVariableName,  operand_72247->mOverridingCategoryReaderReturnedTypeName,  operand_72247->mEndOfReaderLocation,  var_cas_formalParameterListForGeneration,  var_cas_returnType,  var_cas_returnVariableCppName,  var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1832)) ;
    const GGS_bool cond_74801 = (var_cas_baseTypeName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_74801.isBuiltAndTrue ()) {
      ::routine_checkReaderSignatures (inLexique,  var_cas_formalParameterListForGeneration,  var_cas_returnType,  operand_72247->mOverridingCategoryReaderName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1851)),  var_cas_inheritedSignature,  var_cas_inheritedReturnType,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (1848)) ;
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_overrideCategoryReaderForGeneration ::constructor_new (inLexique, operand_72247->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1859)), var_cas_baseTypeName, operand_72247->mOverridingCategoryReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1861)), var_cas_returnType, var_cas_returnVariableCppName, var_cas_formalParameterListForGeneration, var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1865)), var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1858)), GGS_string ("~")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@overridingAbstractCategoryReaderAST.performSemanticAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingAbstractCategoryReaderAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_overridingAbstractCategoryReaderAST * operand_75386,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & /* var_cas_ioSemanticDeclarationListForGeneration */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_75386 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_75386->mTypeName COMMA_SOURCE_FILE_AT_LINE (1880)) ;
    const GGS_unifiedTypeMapProxy  var_cas_returnType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_75386->mAbstractCategoryReaderReturnedTypeName COMMA_SOURCE_FILE_AT_LINE (1882)) ;
    const GGS_bool cond_76090 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1884))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1884))) ;
    if (cond_76090.isBuiltAndTrue ()) {
      operand_75386->mAbstractCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1885)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1886)) ;
    }else if (cond_76090.isBuiltAndFalse ()) {
      const GGS_bool cond_76262 = var_cas_selfType.reader_mIsConcrete (inLexique COMMA_SOURCE_FILE_AT_LINE (1886)) ;
      if (cond_76262.isBuiltAndTrue ()) {
        operand_75386->mAbstractCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare an abstract category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1887)))).operator_concat (GGS_string ("' is not an abstract class")) COMMA_SOURCE_FILE_AT_LINE (1888)) ;
      }
    }
    GGS_string var_cas_baseTypeName = GGS_string ("") ;
    GGS_unifiedTypeMapProxy  var_cas_superType = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1891)) ;
    GGS_unifiedTypeMapProxyList  var_cas_inheritedSignature = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
    GGS_unifiedTypeMapProxy  var_cas_inheritedReturnType = GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (1893)) ;
    GGS_location  var_cas_inheritedDeclarationLocation = GGS_location (inLexique) ;
    GGS_uint _variant_77164 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1895)) ;
    GGS_bool _condition_77164 (_variant_77164.isBuilt (), true) ;
    while (_condition_77164.isBuiltAndTrue ()) {
      _condition_77164 = ((var_cas_superType.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1896))).operator_not ()).operator_and ((var_cas_baseTypeName).operator_isEqual (GGS_string (""))) ;
      if (_condition_77164.isBuiltAndTrue ()) {
        if (_variant_77164.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1912)) ;
          _condition_77164 = GGS_bool (false) ;
        }else{
          _variant_77164.decrement_operation (inLexique COMMA_HERE) ;
          const GGS_bool cond_77111 = var_cas_superType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1897)).reader_hasKey (operand_75386->mAbstractCategoryReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1897))) ;
          if (cond_77111.isBuiltAndTrue ()) {
            GGS_methodQualifier var_cas_qualifier ;
            GGS_bool automatic_var_76985_0 ;
            GGS_bool automatic_var_76985_1 ;
            const GGS_readerMap  temp_76811 = var_cas_superType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1899)) ;
            if (temp_76811.isBuilt ()) {
              temp_76811 (HERE)->method_searchKey (inLexique, operand_75386->mAbstractCategoryReaderName, automatic_var_76985_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_76985_1, var_cas_inheritedReturnType, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (1899)) ;
            }
            const GGS_bool cond_77098 = (var_cas_qualifier).operator_infOrEqual (GGS_methodQualifier::constructor_isBasicFinal (inLexique COMMA_SOURCE_FILE_AT_LINE (1907))) ;
            if (cond_77098.isBuiltAndTrue ()) {
              var_cas_baseTypeName = var_cas_superType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1908)) ;
            }
          }
          var_cas_superType = var_cas_superType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1911)) ;
        }
      }
    }
    const GGS_bool cond_77855 = (var_cas_baseTypeName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_77855.isBuiltAndTrue ()) {
      GGS_formalInputParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
      {
        GGS_formalInputParameterListAST::cEnumerator enumerator_77371 (operand_75386->mAbstractCategoryReaderFormalInputParameterList, true) ;
        const GGS_formalInputParameterListAST::cElement * operand_77371 = NULL ;
        while (((operand_77371 = enumerator_77371.nextObject ()))) {
          macroValidPointer (operand_77371) ;
          var_cas_formalParameterListForGeneration.addAssign_operation (GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_77371->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (1918)), operand_77371->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1919)), operand_77371->mFormalArgumentName, operand_77371->mIsUnused) ;
        }
      }
      ::routine_checkReaderSignatures (inLexique,  var_cas_formalParameterListForGeneration,  var_cas_returnType,  operand_75386->mAbstractCategoryReaderName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1927)),  var_cas_inheritedSignature,  var_cas_inheritedReturnType,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (1924)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of function "buildPredefinedTypes"              *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_predefinedTypes function_buildPredefinedTypes (C_CompilerEx & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_buildPredefinedTypes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_predefinedTypes var_cas_outPredefinedTypes ;
  var_cas_outPredefinedTypes = GGS_predefinedTypes::constructor_new (GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("location"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1946)) COMMA_SOURCE_FILE_AT_LINE (1946)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("bool"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1947)) COMMA_SOURCE_FILE_AT_LINE (1947)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("char"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1948)) COMMA_SOURCE_FILE_AT_LINE (1948)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1949)) COMMA_SOURCE_FILE_AT_LINE (1949)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1950)) COMMA_SOURCE_FILE_AT_LINE (1950)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1951)) COMMA_SOURCE_FILE_AT_LINE (1951)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1952)) COMMA_SOURCE_FILE_AT_LINE (1952)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1953)) COMMA_SOURCE_FILE_AT_LINE (1953)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("double"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1954)) COMMA_SOURCE_FILE_AT_LINE (1954)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lbool"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1955)) COMMA_SOURCE_FILE_AT_LINE (1955)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lchar"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1956)) COMMA_SOURCE_FILE_AT_LINE (1956)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lstring"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1957)) COMMA_SOURCE_FILE_AT_LINE (1957)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("luint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1958)) COMMA_SOURCE_FILE_AT_LINE (1958)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lsint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1959)) COMMA_SOURCE_FILE_AT_LINE (1959)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("luint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1960)) COMMA_SOURCE_FILE_AT_LINE (1960)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lsint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1961)) COMMA_SOURCE_FILE_AT_LINE (1961)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("ldouble"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1962)) COMMA_SOURCE_FILE_AT_LINE (1962))) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_buildPredefinedTypes\n") ;
  #endif
  return var_cas_outPredefinedTypes ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_buildPredefinedTypes (C_CompilerEx & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_semanticContext arg_0 = GGS_semanticContext::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_predefinedTypes result = function_buildPredefinedTypes (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_buildPredefinedTypes [1] = {& kTypeDescriptor_GGS_semanticContext} ;

const C_galgas_function_descriptorEX
kFunction_descriptor_buildPredefinedTypes ("buildPredefinedTypes",
                              functionForGenericCall_buildPredefinedTypes,
                              & kTypeDescriptor_GGS_predefinedTypes,
                              1,
                              kArgumentTypeList_buildPredefinedTypes) ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "performSemanticAnalysis"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performSemanticAnalysis (C_CompilerEx & inLexique,
                                const GGS_semanticDeclarationListAST   var_cas_inDeclarationList,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_outDecoratedDeclarationListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_performSemanticAnalysis at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_predefinedTypes var_cas_predefinedTypes = function_buildPredefinedTypes (inLexique, var_cas_inSemanticContext COMMA_SOURCE_FILE_AT_LINE (1977)) ;
  var_cas_outDecoratedDeclarationListForGeneration = GGS_semanticDeclarationSortedListForGeneration ::constructor_emptySortedList () ;
  {
    GGS_semanticDeclarationListAST::cEnumerator enumerator_80949 (var_cas_inDeclarationList, true) ;
    const GGS_semanticDeclarationListAST::cElement * operand_80949 = NULL ;
    while (((operand_80949 = enumerator_80949.nextObject ()))) {
      macroValidPointer (operand_80949) ;
      { typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis method = findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (operand_80949->mSemanticDeclaration.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_80949->mSemanticDeclaration (HERE), var_cas_inSemanticContext, var_cas_predefinedTypes, var_cas_outDecoratedDeclarationListForGeneration COMMA_SOURCE_FILE_AT_LINE (1980)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_performSemanticAnalysis\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticAnalysis (void) {
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (category_method__semanticDeclarationAST__performSemanticAnalysis, gClassInfoFor__semanticDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__predefinedTypeAST__performSemanticAnalysis, gClassInfoFor__predefinedTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__listDeclarationAST__performSemanticAnalysis, gClassInfoFor__listDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__sortedListDeclarationAST__performSemanticAnalysis, gClassInfoFor__sortedListDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__structDeclarationAST__performSemanticAnalysis, gClassInfoFor__structDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__enumDeclarationAST__performSemanticAnalysis, gClassInfoFor__enumDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__listmapDeclarationAST__performSemanticAnalysis, gClassInfoFor__listmapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__mapDeclarationAST__performSemanticAnalysis, gClassInfoFor__mapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__uniqueMapDeclarationAST__performSemanticAnalysis, gClassInfoFor__uniqueMapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__mapProxyDeclarationAST__performSemanticAnalysis, gClassInfoFor__mapProxyDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__externFunctionDeclarationAST__performSemanticAnalysis, gClassInfoFor__externFunctionDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__externRoutineDeclarationAST__performSemanticAnalysis, gClassInfoFor__externRoutineDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__routineDeclarationAST__performSemanticAnalysis, gClassInfoFor__routineDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__classDeclarationAST__performSemanticAnalysis, gClassInfoFor__classDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__functionDeclarationAST__performSemanticAnalysis, gClassInfoFor__functionDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__onceFunctionDeclarationAST__performSemanticAnalysis, gClassInfoFor__onceFunctionDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__filewrapperDeclarationAST__performSemanticAnalysis, gClassInfoFor__filewrapperDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__abstractCategoryMethodAST__performSemanticAnalysis, gClassInfoFor__abstractCategoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__categoryMethodAST__performSemanticAnalysis, gClassInfoFor__categoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__overridingCategoryMethodAST__performSemanticAnalysis, gClassInfoFor__overridingCategoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__overridingAbstractCategoryMethodAST__performSemanticAnalysis, gClassInfoFor__overridingAbstractCategoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__abstractCategoryReaderAST__performSemanticAnalysis, gClassInfoFor__abstractCategoryReaderAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__categoryReaderAST__performSemanticAnalysis, gClassInfoFor__categoryReaderAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__overridingCategoryReaderAST__performSemanticAnalysis, gClassInfoFor__overridingCategoryReaderAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__overridingAbstractCategoryReaderAST__performSemanticAnalysis, gClassInfoFor__overridingAbstractCategoryReaderAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticAnalysis (void) {
  gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticAnalysis (prologueRoutineFor_semanticAnalysis, epilogueRoutineFor_semanticAnalysis) ;

//---------------------------------------------------------------------------*

