//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'semanticAnalysis.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      march 19th, 2010, at 12h11'29"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@semanticDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticDeclarationAST__performSemanticAnalysis (C_Compiler &,
                                const cPtr_semanticDeclarationAST * operand_2012,
                                GGS_semanticContext & /* var_cas_inSemanticContext */,
                                GGS_semanticDeclarationListForGeneration  & /* var_cas_ioSemanticDeclarationListForGeneration */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2012 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticDeclarationAST.performSemanticAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis> gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis
findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.count ()) {
    result = gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (superClassPtr) ;
      gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@predefinedTypeAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__predefinedTypeAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_predefinedTypeAST * operand_2300,
                                GGS_semanticContext & var_cas_inSemanticContext,
                                GGS_semanticDeclarationListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2300 != NULL) {
    GGS_unifiedTypeMapIndex  var_cas_idx ;
    GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, operand_2300->mPredefinedTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (43)), var_cas_inSemanticContext.mTypeMap, var_cas_idx COMMA_SOURCE_FILE_AT_LINE (43)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_primitiveTypeForGeneration ::constructor_new (inLexique, var_cas_idx COMMA_SOURCE_FILE_AT_LINE (44))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@listDeclarationAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_listDeclarationAST * operand_2821,
                                GGS_semanticContext & var_cas_inSemanticContext,
                                GGS_semanticDeclarationListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2821 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_3023 (operand_2821->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_3023 = NULL ;
      while (((operand_3023 = enumerator_3023.nextObject ()))) {
        macroValidPointer (operand_3023) ;
        GGS_unifiedTypeMapIndex  var_cas_idx ;
        GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, operand_3023->mAttributeTypeName, var_cas_inSemanticContext.mTypeMap, var_cas_idx COMMA_SOURCE_FILE_AT_LINE (59)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_idx, operand_3023->mAttributeName) ;
      }
    }
    GGS_unifiedTypeMapIndex  var_cas_idx ;
    GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, operand_2821->mListTypeName, var_cas_inSemanticContext.mTypeMap, var_cas_idx COMMA_SOURCE_FILE_AT_LINE (66)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_listTypeForGeneration ::constructor_new (inLexique, var_cas_idx, var_cas_typedAttributeList COMMA_SOURCE_FILE_AT_LINE (67))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@structDeclarationAST.performSemanticAnalysis'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__structDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_structDeclarationAST * operand_3631,
                                GGS_semanticContext & var_cas_inSemanticContext,
                                GGS_semanticDeclarationListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3631 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_3833 (operand_3631->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_3833 = NULL ;
      while (((operand_3833 = enumerator_3833.nextObject ()))) {
        macroValidPointer (operand_3833) ;
        GGS_unifiedTypeMapIndex  var_cas_idx ;
        GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, operand_3833->mAttributeTypeName, var_cas_inSemanticContext.mTypeMap, var_cas_idx COMMA_SOURCE_FILE_AT_LINE (83)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_idx, operand_3833->mAttributeName) ;
      }
    }
    GGS_unifiedTypeMapIndex  var_cas_idx ;
    GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, operand_3631->mStructTypeName, var_cas_inSemanticContext.mTypeMap, var_cas_idx COMMA_SOURCE_FILE_AT_LINE (90)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_structTypeForGeneration ::constructor_new (inLexique, var_cas_idx, var_cas_typedAttributeList COMMA_SOURCE_FILE_AT_LINE (91))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@genericTypeTypeAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__genericTypeTypeAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_genericTypeTypeAST * operand_4441,
                                GGS_semanticContext & var_cas_inSemanticContext,
                                GGS_semanticDeclarationListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4441 != NULL) {
    GGS_unifiedTypeMapIndex  var_cas_idx ;
    GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, operand_4441->mTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (104)), var_cas_inSemanticContext.mTypeMap, var_cas_idx COMMA_SOURCE_FILE_AT_LINE (104)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_genericTypeForGeneration ::constructor_new (inLexique, var_cas_idx COMMA_SOURCE_FILE_AT_LINE (105))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@classDeclarationAST.performSemanticAnalysis'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__classDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_classDeclarationAST * operand_4949,
                                GGS_semanticContext & var_cas_inSemanticContext,
                                GGS_semanticDeclarationListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4949 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_5151 (operand_4949->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_5151 = NULL ;
      while (((operand_5151 = enumerator_5151.nextObject ()))) {
        macroValidPointer (operand_5151) ;
        GGS_unifiedTypeMapIndex  var_cas_idx ;
        GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, operand_5151->mAttributeTypeName, var_cas_inSemanticContext.mTypeMap, var_cas_idx COMMA_SOURCE_FILE_AT_LINE (119)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_idx, operand_5151->mAttributeName) ;
      }
    }
    GGS_unifiedTypeMapIndex  var_cas_superClassIndex ;
    const GGS_bool cond_5580 = (operand_4949->mSuperClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (126))).operator_isEqual (GGS_string ("")) ;
    if (cond_5580.isBuiltAndTrue ()) {
      GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("class"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (127)), var_cas_inSemanticContext.mTypeMap, var_cas_superClassIndex COMMA_SOURCE_FILE_AT_LINE (127)) ;
    }else if (cond_5580.isBuiltAndFalse ()) {
      GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, operand_4949->mSuperClassName, var_cas_inSemanticContext.mTypeMap, var_cas_superClassIndex COMMA_SOURCE_FILE_AT_LINE (129)) ;
    }
    GGS_unifiedTypeMapIndex  var_cas_idx ;
    GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, operand_4949->mClassTypeName, var_cas_inSemanticContext.mTypeMap, var_cas_idx COMMA_SOURCE_FILE_AT_LINE (132)) ;
    GGS_abstractMethodDefinitionListForGeneration  var_cas_abstractMethodList = GGS_abstractMethodDefinitionListForGeneration ::constructor_emptyList () ;
    {
      GGS_abstractMethodDefinitionListAST::cEnumerator enumerator_5955 (operand_4949->mAbstractMethodList, true) ;
      const GGS_abstractMethodDefinitionListAST::cElement * operand_5955 = NULL ;
      while (((operand_5955 = enumerator_5955.nextObject ()))) {
        macroValidPointer (operand_5955) ;
        const GGS_bool cond_6075 = (operand_4949->mIsAbstract).operator_not () ;
        if (cond_6075.isBuiltAndTrue ()) {
          operand_5955->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a concrete class cannot declare an abstract method") COMMA_SOURCE_FILE_AT_LINE (138)) ;
        }
      }
    }
    GGS_overridenMethodDefinitionListForGeneration  var_cas_overridenMethodList = GGS_overridenMethodDefinitionListForGeneration ::constructor_emptyList () ;
    {
      GGS_overridenMethodDefinitionListAST::cEnumerator enumerator_6230 (operand_4949->mOverridenMethodList, true) ;
      const GGS_overridenMethodDefinitionListAST::cElement * operand_6230 = NULL ;
      while (((operand_6230 = enumerator_6230.nextObject ()))) {
        macroValidPointer (operand_6230) ;
      }
    }
    GGS_methodDefinitionListForGeneration  var_cas_methodList = GGS_methodDefinitionListForGeneration ::constructor_emptyList () ;
    {
      GGS_methodDefinitionListAST::cEnumerator enumerator_6352 (operand_4949->mMethodList, true) ;
      const GGS_methodDefinitionListAST::cElement * operand_6352 = NULL ;
      while (((operand_6352 = enumerator_6352.nextObject ()))) {
        macroValidPointer (operand_6352) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_classDeclarationForGeneration ::constructor_new (inLexique, var_cas_idx, operand_4949->mIsAbstract, operand_4949->mClassTypeName, var_cas_superClassIndex, var_cas_typedAttributeList, var_cas_abstractMethodList, var_cas_overridenMethodList, var_cas_methodList COMMA_SOURCE_FILE_AT_LINE (151))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "performSemanticAnalysis"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performSemanticAnalysis (C_Compiler & inLexique,
                                const GGS_semanticDeclarationListAST   var_cas_inDeclarationList,
                                GGS_semanticContext & var_cas_inSemanticContext,
                                GGS_semanticDeclarationListForGeneration  & var_cas_outDecoratedDeclarationListForGeneration COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_performSemanticAnalysis at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outDecoratedDeclarationListForGeneration = GGS_semanticDeclarationListForGeneration ::constructor_emptyList () ;
  {
    GGS_semanticDeclarationListAST::cEnumerator enumerator_7359 (var_cas_inDeclarationList, true) ;
    const GGS_semanticDeclarationListAST::cElement * operand_7359 = NULL ;
    while (((operand_7359 = enumerator_7359.nextObject ()))) {
      macroValidPointer (operand_7359) ;
      const GGS_semanticDeclarationAST  temp_7412 = operand_7359->mSemanticDeclaration ;
      if (temp_7412.isBuilt ()) {
        typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis method = findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (temp_7412.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_7412 (HERE), var_cas_inSemanticContext, var_cas_outDecoratedDeclarationListForGeneration COMMA_SOURCE_FILE_AT_LINE (177)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_performSemanticAnalysis\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticAnalysis (void) {
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (category_method__semanticDeclarationAST__performSemanticAnalysis, gClassInfoFor__semanticDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__predefinedTypeAST__performSemanticAnalysis, gClassInfoFor__predefinedTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__listDeclarationAST__performSemanticAnalysis, gClassInfoFor__listDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__structDeclarationAST__performSemanticAnalysis, gClassInfoFor__structDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__genericTypeTypeAST__performSemanticAnalysis, gClassInfoFor__genericTypeTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__classDeclarationAST__performSemanticAnalysis, gClassInfoFor__classDeclarationAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticAnalysis (void) {
  gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticAnalysis (prologueRoutineFor_semanticAnalysis, epilogueRoutineFor_semanticAnalysis) ;

//---------------------------------------------------------------------------*

