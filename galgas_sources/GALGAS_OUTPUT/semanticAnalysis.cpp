//-----------------------------------------------------------------------------*
//                                                                             *
//                        File 'semanticAnalysis.cpp'                          *
//                         Generated by version 2.7.0                          *
//                       august 6th, 2014, at 19h45'40"                        *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//-----------------------------------------------------------------------------*

#include "optionLL1grammar.h"
#include "templateGrammar.h"
#include "semanticAnalysis.h"


//-----------------------------------------------------------------------------*
//                                                                             *
//                       Routine 'checkMethodSignatures'                       *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_checkMethodSignatures (const GALGAS_formalParameterListForGeneration constinArgument_inTestedSignature,
                                    const GALGAS_location constinArgument_inErrorLocation,
                                    const GALGAS_formalParameterSignature constinArgument_inReferenceSignature,
                                    const GALGAS_location constinArgument_inReferenceLocation,
                                    C_Compiler * inCompiler
                                    COMMA_UNUSED_LOCATION_ARGS) {
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, constinArgument_inTestedSignature.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 37)).objectCompare (constinArgument_inReferenceSignature.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 37)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (constinArgument_inErrorLocation, GALGAS_string ("this method declares ").operator_concat (constinArgument_inTestedSignature.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 38)).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 38))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 38)).operator_concat (GALGAS_string (" formal parameter(s), but overriden method declares ")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 38)).operator_concat (constinArgument_inReferenceSignature.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 39)).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 39))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 39))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 38)) ;
    inCompiler->emitSemanticError (constinArgument_inReferenceLocation, GALGAS_string ("overriden method is declared here")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 41)) ;
  }else if (kBoolFalse == test_0) {
    cEnumerator_formalParameterSignature enumerator_2533 (constinArgument_inReferenceSignature, kEnumeration_up) ;
    cEnumerator_formalParameterListForGeneration enumerator_2559 (constinArgument_inTestedSignature, kEnumeration_up) ;
    while (enumerator_2533.hasCurrentObject () && enumerator_2559.hasCurrentObject ()) {
      const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, enumerator_2533.current_mFormalArgumentPassingMode (HERE).objectCompare (enumerator_2559.current_mFormalArgumentPassingMode (HERE))).boolEnum () ;
      if (kBoolTrue == test_1) {
        GALGAS_location location_2 (enumerator_2559.current_mFormalArgumentName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_2, GALGAS_string ("the '").operator_concat (enumerator_2559.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 45))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 45)).operator_concat (GALGAS_string ("' formal parameter is declared as ")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 45)).operator_concat (categoryReader_formalArgumentMessage (enumerator_2559.current_mFormalArgumentPassingMode (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 46))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 45)).operator_concat (GALGAS_string (", but overriden method declares it as ")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 46)).operator_concat (categoryReader_formalArgumentMessage (enumerator_2533.current_mFormalArgumentPassingMode (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 47))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 46))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 45)) ;
        inCompiler->emitSemanticError (constinArgument_inReferenceLocation, GALGAS_string ("overriden method is declared here")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 48)) ;
      }
      const enumGalgasBool test_3 = GALGAS_bool (kIsNotEqual, enumerator_2559.current_mFormalSelector (HERE).mAttribute_string.objectCompare (enumerator_2533.current_mFormalSelector (HERE).mAttribute_string)).boolEnum () ;
      if (kBoolTrue == test_3) {
        GALGAS_string temp_4 ;
        const enumGalgasBool test_5 = GALGAS_bool (kIsNotEqual, enumerator_2533.current_mFormalSelector (HERE).mAttribute_string.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
        if (kBoolTrue == test_5) {
          temp_4 = GALGAS_string (":") ;
        }else if (kBoolFalse == test_5) {
          temp_4 = GALGAS_string::makeEmptyString () ;
        }
        GALGAS_location location_6 (enumerator_2559.current_mFormalSelector (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_6, GALGAS_string ("the selector should be '").operator_concat (categoryReader_string (enumerator_2533.current_mFormalArgumentPassingMode (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 51))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 51)).operator_concat (enumerator_2533.current_mFormalSelector (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 51))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 51)).operator_concat (temp_4.add_operation (GALGAS_string ("'"), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 51))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 51))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 51)) ;
      }
      const enumGalgasBool test_7 = GALGAS_bool (kIsNotEqual, enumerator_2559.current_mFormalArgumentType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 53)).objectCompare (enumerator_2533.current_mFormalArgumentType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 53)))).boolEnum () ;
      if (kBoolTrue == test_7) {
        GALGAS_location location_8 (enumerator_2559.current_mFormalArgumentName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_8, GALGAS_string ("the '").operator_concat (enumerator_2559.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 54))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 54)).operator_concat (GALGAS_string ("' formal parameter has the '@")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 54)).operator_concat (enumerator_2559.current_mFormalArgumentType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 55))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 54)).operator_concat (GALGAS_string ("' type, but overriden method declares with the '@")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 55)).operator_concat (enumerator_2533.current_mFormalArgumentType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 56))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 55)).operator_concat (GALGAS_string ("' type")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 56))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 54)) ;
        inCompiler->emitSemanticError (constinArgument_inReferenceLocation, GALGAS_string ("overriden method is declared here")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 57)) ;
      }
      enumerator_2533.gotoNextObject () ;
      enumerator_2559.gotoNextObject () ;
    }
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                       Routine 'checkReaderSignatures'                       *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_checkReaderSignatures (const GALGAS_formalInputParameterListForGeneration constinArgument_inTestedSignature,
                                    const GALGAS_unifiedTypeMapProxy constinArgument_inReturnType,
                                    const GALGAS_location constinArgument_inErrorLocation,
                                    const GALGAS_functionSignature constinArgument_inReferenceSignature,
                                    const GALGAS_unifiedTypeMapProxy constinArgument_inInheritedReturnType,
                                    const GALGAS_location constinArgument_inReferenceLocation,
                                    C_Compiler * inCompiler
                                    COMMA_UNUSED_LOCATION_ARGS) {
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, constinArgument_inReturnType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 77)).objectCompare (constinArgument_inInheritedReturnType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 77)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (constinArgument_inErrorLocation, GALGAS_string ("the return type is '@").operator_concat (constinArgument_inReturnType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 79))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 78)).operator_concat (GALGAS_string ("', but overriden getter names '@")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 79)).operator_concat (constinArgument_inInheritedReturnType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 80))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 79)).operator_concat (GALGAS_string ("' as return type")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 80))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 78)) ;
    inCompiler->emitSemanticError (constinArgument_inReferenceLocation, GALGAS_string ("overriden getter is declared here")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 81)) ;
  }
  const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, constinArgument_inTestedSignature.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 83)).objectCompare (constinArgument_inReferenceSignature.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 83)))).boolEnum () ;
  if (kBoolTrue == test_1) {
    inCompiler->emitSemanticError (constinArgument_inErrorLocation, GALGAS_string ("this getter declares ").operator_concat (constinArgument_inTestedSignature.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 84)).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 84))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 84)).operator_concat (GALGAS_string (" formal parameter(s), but overriden getter declares ")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 84)).operator_concat (constinArgument_inReferenceSignature.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 85)).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 85))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 85))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 84)) ;
    inCompiler->emitSemanticError (constinArgument_inReferenceLocation, GALGAS_string ("overriden getter is declared here")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 87)) ;
  }else if (kBoolFalse == test_1) {
    cEnumerator_functionSignature enumerator_5086 (constinArgument_inReferenceSignature, kEnumeration_up) ;
    cEnumerator_formalInputParameterListForGeneration enumerator_5112 (constinArgument_inTestedSignature, kEnumeration_up) ;
    while (enumerator_5086.hasCurrentObject () && enumerator_5112.hasCurrentObject ()) {
      const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, enumerator_5112.current_mFormalSelector (HERE).mAttribute_string.objectCompare (enumerator_5086.current_mFormalSelector (HERE).mAttribute_string)).boolEnum () ;
      if (kBoolTrue == test_2) {
        GALGAS_string temp_3 ;
        const enumGalgasBool test_4 = GALGAS_bool (kIsNotEqual, enumerator_5086.current_mFormalSelector (HERE).mAttribute_string.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
        if (kBoolTrue == test_4) {
          temp_3 = GALGAS_string (":") ;
        }else if (kBoolFalse == test_4) {
          temp_3 = GALGAS_string::makeEmptyString () ;
        }
        GALGAS_location location_5 (enumerator_5112.current_mFormalSelector (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_5, GALGAS_string ("the selector should be '\?").operator_concat (enumerator_5086.current_mFormalSelector (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 91))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 91)).operator_concat (temp_3.add_operation (GALGAS_string ("'"), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 91))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 91))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 91)) ;
      }
      const enumGalgasBool test_6 = GALGAS_bool (kIsNotEqual, enumerator_5112.current_mFormalArgumentType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 93)).objectCompare (enumerator_5086.current_mFormalArgumentType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 93)))).boolEnum () ;
      if (kBoolTrue == test_6) {
        GALGAS_location location_7 (enumerator_5112.current_mFormalArgumentName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_7, GALGAS_string ("the '").operator_concat (enumerator_5112.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 94))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 94)).operator_concat (GALGAS_string ("' formal parameter has the '@")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 94)).operator_concat (enumerator_5112.current_mFormalArgumentType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 95))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 94)).operator_concat (GALGAS_string ("' type, but overriden getter declares with the '@")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 95)).operator_concat (enumerator_5086.current_mFormalArgumentType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 96))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 95)).operator_concat (GALGAS_string ("' type")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 96))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 94)) ;
        inCompiler->emitSemanticError (constinArgument_inReferenceLocation, GALGAS_string ("overriden getter is declared here")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 97)) ;
      }
      enumerator_5086.gotoNextObject () ;
      enumerator_5112.gotoNextObject () ;
    }
  }
}


//-----------------------------------------------------------------------------*

cMapElement_attributeIndexMap::cMapElement_attributeIndexMap (const GALGAS_lstring & inKey,
                                                              const GALGAS_unifiedTypeMapProxy & in_mAttributeTypeIndex
                                                              COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mAttributeTypeIndex (in_mAttributeTypeIndex) {
}

//-----------------------------------------------------------------------------*

bool cMapElement_attributeIndexMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mAttributeTypeIndex.isValid () ;
}

//-----------------------------------------------------------------------------*

cMapElement * cMapElement_attributeIndexMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_attributeIndexMap (mAttribute_lkey, mAttribute_mAttributeTypeIndex COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cMapElement_attributeIndexMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAttributeTypeIndex" ":" ;
  mAttribute_mAttributeTypeIndex.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cMapElement_attributeIndexMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_attributeIndexMap * operand = (cMapElement_attributeIndexMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mAttributeTypeIndex.objectCompare (operand->mAttribute_mAttributeTypeIndex) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap::GALGAS_attributeIndexMap (void) :
AC_GALGAS_map () {
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap::GALGAS_attributeIndexMap (const GALGAS_attributeIndexMap & inSource) :
AC_GALGAS_map (inSource) {
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap & GALGAS_attributeIndexMap::operator = (const GALGAS_attributeIndexMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap GALGAS_attributeIndexMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_attributeIndexMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap GALGAS_attributeIndexMap::constructor_mapWithMapToOverride (const GALGAS_attributeIndexMap & inMapToOverride
                                                                                     COMMA_LOCATION_ARGS) {
  GALGAS_attributeIndexMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap GALGAS_attributeIndexMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  GALGAS_attributeIndexMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeIndexMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                    const GALGAS_unifiedTypeMapProxy & inArgument0,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  cMapElement_attributeIndexMap * p = NULL ;
  macroMyNew (p, cMapElement_attributeIndexMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@attributeIndexMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeIndexMap::modifier_insertKey (GALGAS_lstring inKey,
                                                   GALGAS_unifiedTypeMapProxy inArgument0,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  cMapElement_attributeIndexMap * p = NULL ;
  macroMyNew (p, cMapElement_attributeIndexMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' attribute is already declared" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

const char * kSearchErrorMessage_attributeIndexMap_searchKey = "the '%K' attribute is not declared" ;

//-----------------------------------------------------------------------------*

void GALGAS_attributeIndexMap::method_searchKey (GALGAS_lstring inKey,
                                                 GALGAS_unifiedTypeMapProxy & outArgument0,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  const cMapElement_attributeIndexMap * p = (const cMapElement_attributeIndexMap *) performSearch (inKey,
                                                                                                     inCompiler,
                                                                                                     kSearchErrorMessage_attributeIndexMap_searchKey
                                                                                                     COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_attributeIndexMap) ;
    outArgument0 = p->mAttribute_mAttributeTypeIndex ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_attributeIndexMap::reader_mAttributeTypeIndexForKey (const GALGAS_string & inKey,
                                                                                       C_Compiler * inCompiler
                                                                                       COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_attributeIndexMap * p = (const cMapElement_attributeIndexMap *) attributes ;
  GALGAS_unifiedTypeMapProxy result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_attributeIndexMap) ;
    result = p->mAttribute_mAttributeTypeIndex ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeIndexMap::modifier_setMAttributeTypeIndexForKey (GALGAS_unifiedTypeMapProxy inAttributeValue,
                                                                      GALGAS_string inKey,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_attributeIndexMap * p = (cMapElement_attributeIndexMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_attributeIndexMap) ;
    p->mAttribute_mAttributeTypeIndex = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

cMapElement_attributeIndexMap * GALGAS_attributeIndexMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                             const GALGAS_string & inKey
                                                                                             COMMA_LOCATION_ARGS) {
  cMapElement_attributeIndexMap * result = (cMapElement_attributeIndexMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_attributeIndexMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cEnumerator_attributeIndexMap::cEnumerator_attributeIndexMap (const GALGAS_attributeIndexMap & inEnumeratedObject,
                                                              const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap_2D_element cEnumerator_attributeIndexMap::current (LOCATION_ARGS) const {
  const cMapElement_attributeIndexMap * p = (const cMapElement_attributeIndexMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_attributeIndexMap) ;
  return GALGAS_attributeIndexMap_2D_element (p->mAttribute_lkey, p->mAttribute_mAttributeTypeIndex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_attributeIndexMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy cEnumerator_attributeIndexMap::current_mAttributeTypeIndex (LOCATION_ARGS) const {
  const cMapElement_attributeIndexMap * p = (const cMapElement_attributeIndexMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_attributeIndexMap) ;
  return p->mAttribute_mAttributeTypeIndex ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                           @attributeIndexMap type                           *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_attributeIndexMap ("attributeIndexMap",
                                          NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_attributeIndexMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_attributeIndexMap ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_attributeIndexMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_attributeIndexMap (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap GALGAS_attributeIndexMap::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_attributeIndexMap result ;
  const GALGAS_attributeIndexMap * p = (const GALGAS_attributeIndexMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_attributeIndexMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("attributeIndexMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                   Once function 'forbiddenKeysForStruct'                    *
//                                                                             *
//-----------------------------------------------------------------------------*

static GALGAS_stringset onceFunction_forbiddenKeysForStruct (C_Compiler * /* inCompiler */
                                                             COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_stringset result_outResult ; // Returned variable
  result_outResult = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 240)) ;
  result_outResult.addAssign_operation (GALGAS_string ("description")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 241)) ;
  result_outResult.addAssign_operation (GALGAS_string ("object")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 242)) ;
//---
  return result_outResult ;
}



//-----------------------------------------------------------------------------*
//  Function implementation                                                    *
//-----------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_forbiddenKeysForStruct = false ;
static GALGAS_stringset gOnceFunctionResult_forbiddenKeysForStruct ;

//-----------------------------------------------------------------------------*

GALGAS_stringset function_forbiddenKeysForStruct (class C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_forbiddenKeysForStruct) {
    gOnceFunctionResult_forbiddenKeysForStruct = onceFunction_forbiddenKeysForStruct (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_forbiddenKeysForStruct = true ;
  }
  return gOnceFunctionResult_forbiddenKeysForStruct ;
}

//-----------------------------------------------------------------------------*

static void releaseOnceFunctionResult_forbiddenKeysForStruct (void) {
  gOnceFunctionResult_forbiddenKeysForStruct.drop () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_forbiddenKeysForStruct (NULL,
                                                                    releaseOnceFunctionResult_forbiddenKeysForStruct) ;

//-----------------------------------------------------------------------------*
//  Function introspection                                                     *
//-----------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_forbiddenKeysForStruct [1] = {
  NULL
} ;

//-----------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_forbiddenKeysForStruct (C_Compiler * inCompiler,
                                                                       const cObjectArray & /* inEffectiveParameterArray */,
                                                                       const GALGAS_location & /* inErrorLocation */
                                                                       COMMA_LOCATION_ARGS) {
  return function_forbiddenKeysForStruct (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//-----------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_forbiddenKeysForStruct ("forbiddenKeysForStruct",
                                                                        functionWithGenericHeader_forbiddenKeysForStruct,
                                                                        & kTypeDescriptor_GALGAS_stringset,
                                                                        0,
                                                                        functionArgs_forbiddenKeysForStruct) ;

//-----------------------------------------------------------------------------*

cMapElement_constantIndexMap::cMapElement_constantIndexMap (const GALGAS_lstring & inKey,
                                                            const GALGAS_uint & in_mIndex
                                                            COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mIndex (in_mIndex) {
}

//-----------------------------------------------------------------------------*

bool cMapElement_constantIndexMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mIndex.isValid () ;
}

//-----------------------------------------------------------------------------*

cMapElement * cMapElement_constantIndexMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_constantIndexMap (mAttribute_lkey, mAttribute_mIndex COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cMapElement_constantIndexMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mIndex" ":" ;
  mAttribute_mIndex.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cMapElement_constantIndexMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_constantIndexMap * operand = (cMapElement_constantIndexMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mIndex.objectCompare (operand->mAttribute_mIndex) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap::GALGAS_constantIndexMap (void) :
AC_GALGAS_map () {
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap::GALGAS_constantIndexMap (const GALGAS_constantIndexMap & inSource) :
AC_GALGAS_map (inSource) {
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap & GALGAS_constantIndexMap::operator = (const GALGAS_constantIndexMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap GALGAS_constantIndexMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_constantIndexMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap GALGAS_constantIndexMap::constructor_mapWithMapToOverride (const GALGAS_constantIndexMap & inMapToOverride
                                                                                   COMMA_LOCATION_ARGS) {
  GALGAS_constantIndexMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap GALGAS_constantIndexMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  GALGAS_constantIndexMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_constantIndexMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                   const GALGAS_uint & inArgument0,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  cMapElement_constantIndexMap * p = NULL ;
  macroMyNew (p, cMapElement_constantIndexMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@constantIndexMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_constantIndexMap::modifier_insertKey (GALGAS_lstring inKey,
                                                  GALGAS_uint inArgument0,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  cMapElement_constantIndexMap * p = NULL ;
  macroMyNew (p, cMapElement_constantIndexMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' constant is already declared" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

const char * kSearchErrorMessage_constantIndexMap_searchKey = "the '%K' constant is not declared" ;

//-----------------------------------------------------------------------------*

void GALGAS_constantIndexMap::method_searchKey (GALGAS_lstring inKey,
                                                GALGAS_uint & outArgument0,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) const {
  const cMapElement_constantIndexMap * p = (const cMapElement_constantIndexMap *) performSearch (inKey,
                                                                                                   inCompiler,
                                                                                                   kSearchErrorMessage_constantIndexMap_searchKey
                                                                                                   COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_constantIndexMap) ;
    outArgument0 = p->mAttribute_mIndex ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_constantIndexMap::reader_mIndexForKey (const GALGAS_string & inKey,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_constantIndexMap * p = (const cMapElement_constantIndexMap *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_constantIndexMap) ;
    result = p->mAttribute_mIndex ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_constantIndexMap::modifier_setMIndexForKey (GALGAS_uint inAttributeValue,
                                                        GALGAS_string inKey,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_constantIndexMap * p = (cMapElement_constantIndexMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_constantIndexMap) ;
    p->mAttribute_mIndex = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

cMapElement_constantIndexMap * GALGAS_constantIndexMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                           const GALGAS_string & inKey
                                                                                           COMMA_LOCATION_ARGS) {
  cMapElement_constantIndexMap * result = (cMapElement_constantIndexMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_constantIndexMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cEnumerator_constantIndexMap::cEnumerator_constantIndexMap (const GALGAS_constantIndexMap & inEnumeratedObject,
                                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap_2D_element cEnumerator_constantIndexMap::current (LOCATION_ARGS) const {
  const cMapElement_constantIndexMap * p = (const cMapElement_constantIndexMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_constantIndexMap) ;
  return GALGAS_constantIndexMap_2D_element (p->mAttribute_lkey, p->mAttribute_mIndex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_constantIndexMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint cEnumerator_constantIndexMap::current_mIndex (LOCATION_ARGS) const {
  const cMapElement_constantIndexMap * p = (const cMapElement_constantIndexMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_constantIndexMap) ;
  return p->mAttribute_mIndex ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                           @constantIndexMap type                            *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_constantIndexMap ("constantIndexMap",
                                         NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_constantIndexMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_constantIndexMap ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_constantIndexMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_constantIndexMap (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap GALGAS_constantIndexMap::extractObject (const GALGAS_object & inObject,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_constantIndexMap result ;
  const GALGAS_constantIndexMap * p = (const GALGAS_constantIndexMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_constantIndexMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("constantIndexMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_insertMethodMap::cMapElement_insertMethodMap (const GALGAS_lstring & inKey
                                                          COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE) {
}

//-----------------------------------------------------------------------------*

bool cMapElement_insertMethodMap::isValid (void) const {
  return mAttribute_lkey.isValid () ;
}

//-----------------------------------------------------------------------------*

cMapElement * cMapElement_insertMethodMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_insertMethodMap (mAttribute_lkey COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cMapElement_insertMethodMap::description (C_String & /* ioString */, const int32_t /* inIndentation */) const {
}

//-----------------------------------------------------------------------------*

typeComparisonResult cMapElement_insertMethodMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_insertMethodMap * operand = (cMapElement_insertMethodMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap::GALGAS_insertMethodMap (void) :
AC_GALGAS_map () {
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap::GALGAS_insertMethodMap (const GALGAS_insertMethodMap & inSource) :
AC_GALGAS_map (inSource) {
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap & GALGAS_insertMethodMap::operator = (const GALGAS_insertMethodMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap GALGAS_insertMethodMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_insertMethodMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap GALGAS_insertMethodMap::constructor_mapWithMapToOverride (const GALGAS_insertMethodMap & inMapToOverride
                                                                                 COMMA_LOCATION_ARGS) {
  GALGAS_insertMethodMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap GALGAS_insertMethodMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) const {
  GALGAS_insertMethodMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_insertMethodMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  cMapElement_insertMethodMap * p = NULL ;
  macroMyNew (p, cMapElement_insertMethodMap (inKey COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@insertMethodMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_insertMethodMap::modifier_insertKey (GALGAS_lstring inKey,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  cMapElement_insertMethodMap * p = NULL ;
  macroMyNew (p, cMapElement_insertMethodMap (inKey COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' insert modifier is already declared" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

cMapElement_insertMethodMap * GALGAS_insertMethodMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                         const GALGAS_string & inKey
                                                                                         COMMA_LOCATION_ARGS) {
  cMapElement_insertMethodMap * result = (cMapElement_insertMethodMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_insertMethodMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cEnumerator_insertMethodMap::cEnumerator_insertMethodMap (const GALGAS_insertMethodMap & inEnumeratedObject,
                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap_2D_element cEnumerator_insertMethodMap::current (LOCATION_ARGS) const {
  const cMapElement_insertMethodMap * p = (const cMapElement_insertMethodMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_insertMethodMap) ;
  return GALGAS_insertMethodMap_2D_element (p->mAttribute_lkey) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_insertMethodMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                            @insertMethodMap type                            *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_insertMethodMap ("insertMethodMap",
                                        NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_insertMethodMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_insertMethodMap ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_insertMethodMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_insertMethodMap (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap GALGAS_insertMethodMap::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_insertMethodMap result ;
  const GALGAS_insertMethodMap * p = (const GALGAS_insertMethodMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_insertMethodMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("insertMethodMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_searchMethodMap::cMapElement_searchMethodMap (const GALGAS_lstring & inKey
                                                          COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE) {
}

//-----------------------------------------------------------------------------*

bool cMapElement_searchMethodMap::isValid (void) const {
  return mAttribute_lkey.isValid () ;
}

//-----------------------------------------------------------------------------*

cMapElement * cMapElement_searchMethodMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_searchMethodMap (mAttribute_lkey COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cMapElement_searchMethodMap::description (C_String & /* ioString */, const int32_t /* inIndentation */) const {
}

//-----------------------------------------------------------------------------*

typeComparisonResult cMapElement_searchMethodMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_searchMethodMap * operand = (cMapElement_searchMethodMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap::GALGAS_searchMethodMap (void) :
AC_GALGAS_map () {
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap::GALGAS_searchMethodMap (const GALGAS_searchMethodMap & inSource) :
AC_GALGAS_map (inSource) {
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap & GALGAS_searchMethodMap::operator = (const GALGAS_searchMethodMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap GALGAS_searchMethodMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_searchMethodMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap GALGAS_searchMethodMap::constructor_mapWithMapToOverride (const GALGAS_searchMethodMap & inMapToOverride
                                                                                 COMMA_LOCATION_ARGS) {
  GALGAS_searchMethodMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap GALGAS_searchMethodMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) const {
  GALGAS_searchMethodMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_searchMethodMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  cMapElement_searchMethodMap * p = NULL ;
  macroMyNew (p, cMapElement_searchMethodMap (inKey COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@searchMethodMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_searchMethodMap::modifier_insertKey (GALGAS_lstring inKey,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  cMapElement_searchMethodMap * p = NULL ;
  macroMyNew (p, cMapElement_searchMethodMap (inKey COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' search method is already declared" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

cMapElement_searchMethodMap * GALGAS_searchMethodMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                         const GALGAS_string & inKey
                                                                                         COMMA_LOCATION_ARGS) {
  cMapElement_searchMethodMap * result = (cMapElement_searchMethodMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_searchMethodMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cEnumerator_searchMethodMap::cEnumerator_searchMethodMap (const GALGAS_searchMethodMap & inEnumeratedObject,
                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap_2D_element cEnumerator_searchMethodMap::current (LOCATION_ARGS) const {
  const cMapElement_searchMethodMap * p = (const cMapElement_searchMethodMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_searchMethodMap) ;
  return GALGAS_searchMethodMap_2D_element (p->mAttribute_lkey) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_searchMethodMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                            @searchMethodMap type                            *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_searchMethodMap ("searchMethodMap",
                                        NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_searchMethodMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_searchMethodMap ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_searchMethodMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_searchMethodMap (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap GALGAS_searchMethodMap::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_searchMethodMap result ;
  const GALGAS_searchMethodMap * p = (const GALGAS_searchMethodMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_searchMethodMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("searchMethodMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                     Routine 'check_K_escapeCharacters'                      *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_check_5F_K_5F_escapeCharacters (GALGAS_lstring inArgument_inString,
                                             C_Compiler * inCompiler
                                             COMMA_UNUSED_LOCATION_ARGS) {
  cEnumerator_stringlist enumerator_18971 (inArgument_inString.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 459)).reader_componentsSeparatedByString (GALGAS_string ("%%") COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 459)), kEnumeration_up) ;
  while (enumerator_18971.hasCurrentObject ()) {
    GALGAS_stringlist var_explodedArray = enumerator_18971.current_mValue (HERE).reader_componentsSeparatedByString (GALGAS_string ("%") COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 460)) ;
    {
    GALGAS_string joker_19083_0 ; // Joker input parameter
    var_explodedArray.modifier_popFirst (joker_19083_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 461)) ;
    }
    cEnumerator_stringlist enumerator_19113 (var_explodedArray, kEnumeration_up) ;
    while (enumerator_19113.hasCurrentObject ()) {
      const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, enumerator_19113.current_mValue (HERE).reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 463)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
      if (kBoolTrue == test_0) {
        GALGAS_char var_c = enumerator_19113.current_mValue (HERE).reader_characterAtIndex (GALGAS_uint ((uint32_t) 0U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 464)) ;
        const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, var_c.objectCompare (GALGAS_char (TO_UNICODE (75)))).boolEnum () ;
        if (kBoolTrue == test_1) {
          GALGAS_location location_2 (inArgument_inString.reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_2, GALGAS_string ("only '%K' and '%%' escape sequences are allowed in this error message")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 466)) ;
        }
      }
      enumerator_19113.gotoNextObject () ;
    }
    enumerator_18971.gotoNextObject () ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                    Routine 'check_K_L_escapeCharacters'                     *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_check_5F_K_5F_L_5F_escapeCharacters (GALGAS_lstring inArgument_inString,
                                                  C_Compiler * inCompiler
                                                  COMMA_UNUSED_LOCATION_ARGS) {
  cEnumerator_stringlist enumerator_19660 (inArgument_inString.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 479)).reader_componentsSeparatedByString (GALGAS_string ("%%") COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 479)), kEnumeration_up) ;
  while (enumerator_19660.hasCurrentObject ()) {
    GALGAS_stringlist var_explodedArray = enumerator_19660.current_mValue (HERE).reader_componentsSeparatedByString (GALGAS_string ("%") COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 480)) ;
    {
    GALGAS_string joker_19772_0 ; // Joker input parameter
    var_explodedArray.modifier_popFirst (joker_19772_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 481)) ;
    }
    cEnumerator_stringlist enumerator_19802 (var_explodedArray, kEnumeration_up) ;
    while (enumerator_19802.hasCurrentObject ()) {
      const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, enumerator_19802.current_mValue (HERE).reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 483)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
      if (kBoolTrue == test_0) {
        GALGAS_char var_c = enumerator_19802.current_mValue (HERE).reader_characterAtIndex (GALGAS_uint ((uint32_t) 0U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 484)) ;
        const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, var_c.objectCompare (GALGAS_char (TO_UNICODE (75)))).operator_and (GALGAS_bool (kIsNotEqual, var_c.objectCompare (GALGAS_char (TO_UNICODE (76)))) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 485)).boolEnum () ;
        if (kBoolTrue == test_1) {
          GALGAS_location location_2 (inArgument_inString.reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_2, GALGAS_string ("only '%K', '%L' and '%%' escape sequences are allowed in this error message")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 486)) ;
        }
      }
      enumerator_19802.gotoNextObject () ;
    }
    enumerator_19660.gotoNextObject () ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                     Once function 'forbiddenKeysForMap'                     *
//                                                                             *
//-----------------------------------------------------------------------------*

static GALGAS_stringset onceFunction_forbiddenKeysForMap (C_Compiler * /* inCompiler */
                                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_stringset result_outResult ; // Returned variable
  result_outResult = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 496)) ;
  result_outResult.addAssign_operation (GALGAS_string ("lkey")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 497)) ;
  result_outResult.addAssign_operation (GALGAS_string ("description")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 498)) ;
  result_outResult.addAssign_operation (GALGAS_string ("object")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 499)) ;
//---
  return result_outResult ;
}



//-----------------------------------------------------------------------------*
//  Function implementation                                                    *
//-----------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_forbiddenKeysForMap = false ;
static GALGAS_stringset gOnceFunctionResult_forbiddenKeysForMap ;

//-----------------------------------------------------------------------------*

GALGAS_stringset function_forbiddenKeysForMap (class C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_forbiddenKeysForMap) {
    gOnceFunctionResult_forbiddenKeysForMap = onceFunction_forbiddenKeysForMap (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_forbiddenKeysForMap = true ;
  }
  return gOnceFunctionResult_forbiddenKeysForMap ;
}

//-----------------------------------------------------------------------------*

static void releaseOnceFunctionResult_forbiddenKeysForMap (void) {
  gOnceFunctionResult_forbiddenKeysForMap.drop () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_forbiddenKeysForMap (NULL,
                                                                 releaseOnceFunctionResult_forbiddenKeysForMap) ;

//-----------------------------------------------------------------------------*
//  Function introspection                                                     *
//-----------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_forbiddenKeysForMap [1] = {
  NULL
} ;

//-----------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_forbiddenKeysForMap (C_Compiler * inCompiler,
                                                                    const cObjectArray & /* inEffectiveParameterArray */,
                                                                    const GALGAS_location & /* inErrorLocation */
                                                                    COMMA_LOCATION_ARGS) {
  return function_forbiddenKeysForMap (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//-----------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_forbiddenKeysForMap ("forbiddenKeysForMap",
                                                                     functionWithGenericHeader_forbiddenKeysForMap,
                                                                     & kTypeDescriptor_GALGAS_stringset,
                                                                     0,
                                                                     functionArgs_forbiddenKeysForMap) ;

//-----------------------------------------------------------------------------*

cMapElement_declaredMethodMap::cMapElement_declaredMethodMap (const GALGAS_lstring & inKey
                                                              COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE) {
}

//-----------------------------------------------------------------------------*

bool cMapElement_declaredMethodMap::isValid (void) const {
  return mAttribute_lkey.isValid () ;
}

//-----------------------------------------------------------------------------*

cMapElement * cMapElement_declaredMethodMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_declaredMethodMap (mAttribute_lkey COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cMapElement_declaredMethodMap::description (C_String & /* ioString */, const int32_t /* inIndentation */) const {
}

//-----------------------------------------------------------------------------*

typeComparisonResult cMapElement_declaredMethodMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_declaredMethodMap * operand = (cMapElement_declaredMethodMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap::GALGAS_declaredMethodMap (void) :
AC_GALGAS_map () {
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap::GALGAS_declaredMethodMap (const GALGAS_declaredMethodMap & inSource) :
AC_GALGAS_map (inSource) {
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap & GALGAS_declaredMethodMap::operator = (const GALGAS_declaredMethodMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap GALGAS_declaredMethodMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_declaredMethodMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap GALGAS_declaredMethodMap::constructor_mapWithMapToOverride (const GALGAS_declaredMethodMap & inMapToOverride
                                                                                     COMMA_LOCATION_ARGS) {
  GALGAS_declaredMethodMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap GALGAS_declaredMethodMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  GALGAS_declaredMethodMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_declaredMethodMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) {
  cMapElement_declaredMethodMap * p = NULL ;
  macroMyNew (p, cMapElement_declaredMethodMap (inKey COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@declaredMethodMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_declaredMethodMap::modifier_insertKey (GALGAS_lstring inKey,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  cMapElement_declaredMethodMap * p = NULL ;
  macroMyNew (p, cMapElement_declaredMethodMap (inKey COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' method is already declared in %L for this class" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

cMapElement_declaredMethodMap * GALGAS_declaredMethodMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                             const GALGAS_string & inKey
                                                                                             COMMA_LOCATION_ARGS) {
  cMapElement_declaredMethodMap * result = (cMapElement_declaredMethodMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_declaredMethodMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cEnumerator_declaredMethodMap::cEnumerator_declaredMethodMap (const GALGAS_declaredMethodMap & inEnumeratedObject,
                                                              const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap_2D_element cEnumerator_declaredMethodMap::current (LOCATION_ARGS) const {
  const cMapElement_declaredMethodMap * p = (const cMapElement_declaredMethodMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_declaredMethodMap) ;
  return GALGAS_declaredMethodMap_2D_element (p->mAttribute_lkey) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_declaredMethodMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                           @declaredMethodMap type                           *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_declaredMethodMap ("declaredMethodMap",
                                          NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_declaredMethodMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_declaredMethodMap ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_declaredMethodMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_declaredMethodMap (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap GALGAS_declaredMethodMap::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_declaredMethodMap result ;
  const GALGAS_declaredMethodMap * p = (const GALGAS_declaredMethodMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_declaredMethodMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("declaredMethodMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                 Routine 'buildLocalVariableMapAndSignature'                 *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_buildLocalVariableMapAndSignature (const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                const GALGAS_formalParameterListAST constinArgument_inRoutineSignatureAST,
                                                GALGAS_variableMap & ioArgument_ioVariableMap,
                                                GALGAS_formalParameterListForGeneration & outArgument_outRoutineSignature,
                                                C_Compiler * inCompiler
                                                COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outRoutineSignature.drop () ; // Release 'out' argument
  outArgument_outRoutineSignature = GALGAS_formalParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 987)) ;
  cEnumerator_formalParameterListAST enumerator_40004 (constinArgument_inRoutineSignatureAST, kEnumeration_up) ;
  while (enumerator_40004.hasCurrentObject ()) {
    GALGAS_unifiedTypeMapProxy var_type = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_40004.current_mFormalArgumentTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 989)) ;
    GALGAS_string var_formalArgumentCppName ;
    if (enumerator_40004.current_mFormalArgumentPassingMode (HERE).isValid ()) {
      switch (enumerator_40004.current_mFormalArgumentPassingMode (HERE).enumValue ()) {
      case GALGAS_formalArgumentPassingModeAST::kNotBuilt:
        break ;
      case GALGAS_formalArgumentPassingModeAST::kEnum_argumentIn: {
        var_formalArgumentCppName = GALGAS_string ("inArgument_").operator_concat (enumerator_40004.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 993)).reader_identifierRepresentation (SOURCE_FILE ("semanticAnalysis.gSemantics", 993))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 993)) ;
        const enumGalgasBool test_0 = enumerator_40004.current_mIsUnused (HERE).boolEnum () ;
        if (kBoolTrue == test_0) {
          {
          ioArgument_ioVariableMap.modifier_insertInputFormalArgumentDeclaredAsUnused (enumerator_40004.current_mFormalArgumentName (HERE), var_type, var_formalArgumentCppName, var_formalArgumentCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 995)) ;
          }
        }else if (kBoolFalse == test_0) {
          {
          ioArgument_ioVariableMap.modifier_insertInputFormalArgument (enumerator_40004.current_mFormalArgumentName (HERE), var_type, var_formalArgumentCppName, var_formalArgumentCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 997)) ;
          }
        }
        } break ;
      case GALGAS_formalArgumentPassingModeAST::kEnum_argumentOut: {
        var_formalArgumentCppName = GALGAS_string ("outArgument_").operator_concat (enumerator_40004.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1000)).reader_identifierRepresentation (SOURCE_FILE ("semanticAnalysis.gSemantics", 1000))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1000)) ;
        {
        ioArgument_ioVariableMap.modifier_insertOutputFormalArgument (enumerator_40004.current_mFormalArgumentName (HERE), var_type, var_formalArgumentCppName, var_formalArgumentCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1001)) ;
        }
        } break ;
      case GALGAS_formalArgumentPassingModeAST::kEnum_argumentInOut: {
        var_formalArgumentCppName = GALGAS_string ("ioArgument_").operator_concat (enumerator_40004.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1003)).reader_identifierRepresentation (SOURCE_FILE ("semanticAnalysis.gSemantics", 1003))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1003)) ;
        const enumGalgasBool test_1 = enumerator_40004.current_mIsUnused (HERE).boolEnum () ;
        if (kBoolTrue == test_1) {
          {
          ioArgument_ioVariableMap.modifier_insertInputOutputFormalArgumentDeclaredAsUnused (enumerator_40004.current_mFormalArgumentName (HERE), var_type, var_formalArgumentCppName, var_formalArgumentCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1005)) ;
          }
        }else if (kBoolFalse == test_1) {
          {
          ioArgument_ioVariableMap.modifier_insertInputOutputFormalArgument (enumerator_40004.current_mFormalArgumentName (HERE), var_type, var_formalArgumentCppName, var_formalArgumentCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1007)) ;
          }
        }
        } break ;
      case GALGAS_formalArgumentPassingModeAST::kEnum_argumentConstantIn: {
        var_formalArgumentCppName = GALGAS_string ("constinArgument_").operator_concat (enumerator_40004.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1010)).reader_identifierRepresentation (SOURCE_FILE ("semanticAnalysis.gSemantics", 1010))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1010)) ;
        const enumGalgasBool test_2 = enumerator_40004.current_mIsUnused (HERE).boolEnum () ;
        if (kBoolTrue == test_2) {
          {
          ioArgument_ioVariableMap.modifier_insertConstantInputFormalArgumentDeclaredAsUnused (enumerator_40004.current_mFormalArgumentName (HERE), var_type, var_formalArgumentCppName, var_formalArgumentCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1012)) ;
          }
        }else if (kBoolFalse == test_2) {
          {
          ioArgument_ioVariableMap.modifier_insertConstantInputFormalArgument (enumerator_40004.current_mFormalArgumentName (HERE), var_type, var_formalArgumentCppName, var_formalArgumentCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1014)) ;
          }
        }
        } break ;
      }
    }
    outArgument_outRoutineSignature.addAssign_operation (enumerator_40004.current_mFormalSelector (HERE), enumerator_40004.current_mFormalArgumentPassingMode (HERE), var_type, enumerator_40004.current_mFormalArgumentName (HERE), var_formalArgumentCppName  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1017)) ;
    enumerator_40004.gotoNextObject () ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                        Routine 'analyzeRoutineBody'                         *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_analyzeRoutineBody (const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                 const GALGAS_formalParameterListAST constinArgument_inRoutineSignatureAST,
                                 const GALGAS_localConstantList constinArgument_inLocalConstantList,
                                 const GALGAS_typedAttributeList constinArgument_inNonMutableTypedAttributeList,
                                 const GALGAS_typedAttributeList constinArgument_inMutableTypedAttributeList,
                                 const GALGAS_string constinArgument_inAttributeVariableNamePrefix,
                                 const GALGAS_semanticInstructionListAST constinArgument_inInstructionList,
                                 const GALGAS_location constinArgument_inEndOfMethodLocation,
                                 GALGAS_semanticInstructionListForGeneration & outArgument_outSemanticInstructionListForGeneration,
                                 GALGAS_formalParameterListForGeneration & outArgument_outRoutineSignature,
                                 C_Compiler * inCompiler
                                 COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outSemanticInstructionListForGeneration.drop () ; // Release 'out' argument
  outArgument_outRoutineSignature.drop () ; // Release 'out' argument
  GALGAS_variableMap var_variableMap = GALGAS_variableMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 1035)) ;
  cEnumerator_localConstantList enumerator_42712 (constinArgument_inLocalConstantList, kEnumeration_up) ;
  while (enumerator_42712.hasCurrentObject ()) {
    const enumGalgasBool test_0 = enumerator_42712.current_mNoWarningIfUnused (HERE).boolEnum () ;
    if (kBoolTrue == test_0) {
      {
      var_variableMap.modifier_insertUsedLocalConstant (enumerator_42712.current_mName (HERE), enumerator_42712.current_mType (HERE), enumerator_42712.current_mCppName (HERE), constinArgument_inAnalysisContext.mAttribute_mSelfObjectCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1039)) ;
      }
    }else if (kBoolFalse == test_0) {
      {
      var_variableMap.modifier_insertLocalConstant (enumerator_42712.current_mName (HERE), enumerator_42712.current_mType (HERE), enumerator_42712.current_mCppName (HERE), constinArgument_inAnalysisContext.mAttribute_mSelfObjectCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1041)) ;
      }
    }
    enumerator_42712.gotoNextObject () ;
  }
  cEnumerator_typedAttributeList enumerator_43086 (constinArgument_inNonMutableTypedAttributeList, kEnumeration_up) ;
  while (enumerator_43086.hasCurrentObject ()) {
    {
    var_variableMap.modifier_insertNonMutableAttribute (enumerator_43086.current_mAttributeName (HERE), enumerator_43086.current_mAttributeTypeProxy (HERE), constinArgument_inAttributeVariableNamePrefix.operator_concat (GALGAS_string ("mAttribute_")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1049)).operator_concat (enumerator_43086.current_mAttributeName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1049)).reader_identifierRepresentation (SOURCE_FILE ("semanticAnalysis.gSemantics", 1049))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1049)), constinArgument_inAnalysisContext.mAttribute_mSelfObjectCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1046)) ;
    }
    enumerator_43086.gotoNextObject () ;
  }
  cEnumerator_typedAttributeList enumerator_43434 (constinArgument_inMutableTypedAttributeList, kEnumeration_up) ;
  while (enumerator_43434.hasCurrentObject ()) {
    {
    var_variableMap.modifier_insertMutableAttribute (enumerator_43434.current_mAttributeName (HERE), enumerator_43434.current_mAttributeTypeProxy (HERE), constinArgument_inAttributeVariableNamePrefix.operator_concat (GALGAS_string ("mAttribute_")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1058)).operator_concat (enumerator_43434.current_mAttributeName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1058)).reader_identifierRepresentation (SOURCE_FILE ("semanticAnalysis.gSemantics", 1058))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1058)), constinArgument_inAnalysisContext.mAttribute_mSelfObjectCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1055)) ;
    }
    enumerator_43434.gotoNextObject () ;
  }
  {
  routine_buildLocalVariableMapAndSignature (constinArgument_inAnalysisContext.mAttribute_mSemanticContext, constinArgument_inRoutineSignatureAST, var_variableMap, outArgument_outRoutineSignature, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1063)) ;
  }
  outArgument_outSemanticInstructionListForGeneration = GALGAS_semanticInstructionListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1070)) ;
  cEnumerator_semanticInstructionListAST enumerator_44037 (constinArgument_inInstructionList, kEnumeration_up) ;
  while (enumerator_44037.hasCurrentObject ()) {
    callCategoryMethod_analyzeSemanticInstruction ((const cPtr_semanticInstructionAST *) enumerator_44037.current_mInstruction (HERE).ptr (), constinArgument_inAnalysisContext, outArgument_outSemanticInstructionListForGeneration, var_variableMap, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1072)) ;
    enumerator_44037.gotoNextObject () ;
  }
  var_variableMap.method_checkAutomatonStates (constinArgument_inEndOfMethodLocation, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1079)) ;
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                        Routine 'analyzeFunctionBody'                        *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_analyzeFunctionBody (const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                  const GALGAS_formalInputParameterListAST constinArgument_inFunctionSignature,
                                  const GALGAS_typedAttributeList constinArgument_inTypedAttributeList,
                                  const GALGAS_string constinArgument_inAttributeVariableNamePrefix,
                                  const GALGAS_semanticInstructionListAST constinArgument_inInstructionList,
                                  const GALGAS_lstring constinArgument_inReturnVariableName,
                                  const GALGAS_lstring constinArgument_inResultTypeName,
                                  const GALGAS_location constinArgument_inEndOfFunctionLocation,
                                  GALGAS_formalInputParameterListForGeneration & outArgument_outSignatureForGeneration,
                                  GALGAS_unifiedTypeMapProxy & outArgument_outReturnedType,
                                  GALGAS_string & outArgument_outResultVariableCppName,
                                  GALGAS_semanticInstructionListForGeneration & outArgument_outSemanticInstructionListForGeneration,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outSignatureForGeneration.drop () ; // Release 'out' argument
  outArgument_outReturnedType.drop () ; // Release 'out' argument
  outArgument_outResultVariableCppName.drop () ; // Release 'out' argument
  outArgument_outSemanticInstructionListForGeneration.drop () ; // Release 'out' argument
  GALGAS_variableMap var_variableMap = GALGAS_variableMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 1299)) ;
  cEnumerator_typedAttributeList enumerator_51872 (constinArgument_inTypedAttributeList, kEnumeration_up) ;
  while (enumerator_51872.hasCurrentObject ()) {
    {
    var_variableMap.modifier_insertNonMutableAttribute (enumerator_51872.current_mAttributeName (HERE), enumerator_51872.current_mAttributeTypeProxy (HERE), constinArgument_inAttributeVariableNamePrefix.operator_concat (GALGAS_string ("mAttribute_")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1305)).operator_concat (enumerator_51872.current_mAttributeName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1305)).reader_identifierRepresentation (SOURCE_FILE ("semanticAnalysis.gSemantics", 1305))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1305)), constinArgument_inAnalysisContext.mAttribute_mSelfObjectCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1302)) ;
    }
    enumerator_51872.gotoNextObject () ;
  }
  outArgument_outSignatureForGeneration = GALGAS_formalInputParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1310)) ;
  cEnumerator_formalInputParameterListAST enumerator_52286 (constinArgument_inFunctionSignature, kEnumeration_up) ;
  while (enumerator_52286.hasCurrentObject ()) {
    GALGAS_unifiedTypeMapProxy var_parameterType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mTypeMap, enumerator_52286.current_mFormalArgumentTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1312)) ;
    const enumGalgasBool test_0 = enumerator_52286.current_mIsConstant (HERE).boolEnum () ;
    if (kBoolTrue == test_0) {
      GALGAS_string var_cppName = GALGAS_string ("constinArgument_").operator_concat (enumerator_52286.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1314)).reader_identifierRepresentation (SOURCE_FILE ("semanticAnalysis.gSemantics", 1314))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1314)) ;
      outArgument_outSignatureForGeneration.addAssign_operation (enumerator_52286.current_mFormalSelector (HERE), var_parameterType, var_cppName, enumerator_52286.current_mFormalArgumentName (HERE), enumerator_52286.current_mIsConstant (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1315)) ;
      const enumGalgasBool test_1 = enumerator_52286.current_mIsUnused (HERE).boolEnum () ;
      if (kBoolTrue == test_1) {
        {
        var_variableMap.modifier_insertConstantInputFormalArgumentDeclaredAsUnused (enumerator_52286.current_mFormalArgumentName (HERE), var_parameterType, var_cppName, var_cppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1323)) ;
        }
      }else if (kBoolFalse == test_1) {
        {
        var_variableMap.modifier_insertConstantInputFormalArgument (enumerator_52286.current_mFormalArgumentName (HERE), var_parameterType, var_cppName, var_cppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1325)) ;
        }
      }
    }else if (kBoolFalse == test_0) {
      GALGAS_string var_cppName = GALGAS_string ("inArgument_").operator_concat (enumerator_52286.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1328)).reader_identifierRepresentation (SOURCE_FILE ("semanticAnalysis.gSemantics", 1328))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1328)) ;
      outArgument_outSignatureForGeneration.addAssign_operation (enumerator_52286.current_mFormalSelector (HERE), var_parameterType, var_cppName, enumerator_52286.current_mFormalArgumentName (HERE), enumerator_52286.current_mIsConstant (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1329)) ;
      const enumGalgasBool test_2 = enumerator_52286.current_mIsUnused (HERE).boolEnum () ;
      if (kBoolTrue == test_2) {
        {
        var_variableMap.modifier_insertInputFormalArgumentDeclaredAsUnused (enumerator_52286.current_mFormalArgumentName (HERE), var_parameterType, var_cppName, var_cppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1337)) ;
        }
      }else if (kBoolFalse == test_2) {
        {
        var_variableMap.modifier_insertInputFormalArgument (enumerator_52286.current_mFormalArgumentName (HERE), var_parameterType, var_cppName, var_cppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1339)) ;
        }
      }
    }
    enumerator_52286.gotoNextObject () ;
  }
  outArgument_outReturnedType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mTypeMap, constinArgument_inResultTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1344)) ;
  outArgument_outResultVariableCppName = GALGAS_string ("result_").operator_concat (constinArgument_inReturnVariableName.mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("semanticAnalysis.gSemantics", 1345))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1345)) ;
  {
  var_variableMap.modifier_insertOutputFormalArgument (constinArgument_inReturnVariableName, outArgument_outReturnedType, outArgument_outResultVariableCppName, outArgument_outResultVariableCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1346)) ;
  }
  outArgument_outSemanticInstructionListForGeneration = GALGAS_semanticInstructionListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1348)) ;
  cEnumerator_semanticInstructionListAST enumerator_54122 (constinArgument_inInstructionList, kEnumeration_up) ;
  while (enumerator_54122.hasCurrentObject ()) {
    callCategoryMethod_analyzeSemanticInstruction ((const cPtr_semanticInstructionAST *) enumerator_54122.current_mInstruction (HERE).ptr (), constinArgument_inAnalysisContext, outArgument_outSemanticInstructionListForGeneration, var_variableMap, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1350)) ;
    enumerator_54122.gotoNextObject () ;
  }
  var_variableMap.method_checkAutomatonStates (constinArgument_inEndOfFunctionLocation, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1357)) ;
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                       Function 'buildPredefinedTypes'                       *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_predefinedTypes function_buildPredefinedTypes (const GALGAS_semanticContext & constinArgument_inSemanticContext,
                                                      C_Compiler * inCompiler
                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_predefinedTypes result_outPredefinedTypes ; // Returned variable
  result_outPredefinedTypes = GALGAS_predefinedTypes::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("location"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2301)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2301)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("bool"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2302)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2302)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("char"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2303)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2303)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("string"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2304)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2304)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("uint"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2305)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2305)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("sint"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2306)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2306)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("uint64"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2307)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2307)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("sint64"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2308)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2308)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("double"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2309)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2309)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("lbool"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2310)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2310)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("lchar"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2311)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2311)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("lstring"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2312)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2312)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("luint"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2313)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2313)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("lsint"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2314)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2314)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("luint64"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2315)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2315)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("lsint64"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2316)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2316)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("ldouble"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2317)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2317))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2300)) ;
//---
  return result_outPredefinedTypes ;
}


//-----------------------------------------------------------------------------*
//  Function introspection                                                     *
//-----------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_buildPredefinedTypes [2] = {
  & kTypeDescriptor_GALGAS_semanticContext,
  NULL
} ;

//-----------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_buildPredefinedTypes (C_Compiler * inCompiler,
                                                                     const cObjectArray & inEffectiveParameterArray,
                                                                     const GALGAS_location & /* §§ inErrorLocation */
                                                                     COMMA_LOCATION_ARGS) {
  const GALGAS_semanticContext operand0 = GALGAS_semanticContext::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                                 inCompiler
                                                                                 COMMA_THERE) ;
  return function_buildPredefinedTypes (operand0,
                                        inCompiler
                                        COMMA_THERE).reader_object (THERE) ;
}

//-----------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_buildPredefinedTypes ("buildPredefinedTypes",
                                                                      functionWithGenericHeader_buildPredefinedTypes,
                                                                      & kTypeDescriptor_GALGAS_predefinedTypes,
                                                                      1,
                                                                      functionArgs_buildPredefinedTypes) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//                      Routine 'performSemanticAnalysis'                      *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_performSemanticAnalysis (const GALGAS_semanticDeclarationListAST constinArgument_inDeclarationList,
                                      const GALGAS_semanticContext constinArgument_inSemanticContext,
                                      GALGAS_semanticDeclarationSortedListForGeneration & outArgument_outDecoratedDeclarationListForGeneration,
                                      C_Compiler * inCompiler
                                      COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outDecoratedDeclarationListForGeneration.drop () ; // Release 'out' argument
  cEnumerator_lstringlist enumerator_93679 (constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_unsolvedProxyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 2333)), kEnumeration_up) ;
  while (enumerator_93679.hasCurrentObject ()) {
    GALGAS_location location_0 (enumerator_93679.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_0, GALGAS_string ("the '").operator_concat (enumerator_93679.current_mValue (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2334))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2334)).operator_concat (GALGAS_string ("' type is undefined")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2334))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2334)) ;
    enumerator_93679.gotoNextObject () ;
  }
  GALGAS_semanticDeclarationListAST var_semanticDeclarationList = constinArgument_inDeclarationList ;
  cEnumerator_semanticDeclarationListAST enumerator_93933 (constinArgument_inDeclarationList, kEnumeration_up) ;
  while (enumerator_93933.hasCurrentObject ()) {
    callCategoryMethod_addAssociatedElement ((const cPtr_semanticDeclarationAST *) enumerator_93933.current_mSemanticDeclaration (HERE).ptr (), var_semanticDeclarationList, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2339)) ;
    enumerator_93933.gotoNextObject () ;
  }
  outArgument_outDecoratedDeclarationListForGeneration = GALGAS_semanticDeclarationSortedListForGeneration::constructor_emptySortedList (SOURCE_FILE ("semanticAnalysis.gSemantics", 2342)) ;
  const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("semanticAnalysis.gSemantics", 2343)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_1) {
    GALGAS_predefinedTypes var_predefinedTypes = function_buildPredefinedTypes (constinArgument_inSemanticContext, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2344)) ;
    cEnumerator_semanticDeclarationListAST enumerator_94303 (var_semanticDeclarationList, kEnumeration_up) ;
    while (enumerator_94303.hasCurrentObject ()) {
      callCategoryMethod_semanticAnalysis ((const cPtr_semanticDeclarationAST *) enumerator_94303.current_mSemanticDeclaration (HERE).ptr (), constinArgument_inSemanticContext, var_predefinedTypes, outArgument_outDecoratedDeclarationListForGeneration, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2346)) ;
      enumerator_94303.gotoNextObject () ;
    }
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//     Abstract category method '@semanticDeclarationAST semanticAnalysis'     *
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_semanticDeclarationAST_semanticAnalysis> gCategoryMethodTable_semanticDeclarationAST_semanticAnalysis ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_semanticAnalysis (const int32_t inClassIndex,
                                           categoryMethodSignature_semanticDeclarationAST_semanticAnalysis inMethod) {
  gCategoryMethodTable_semanticDeclarationAST_semanticAnalysis.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_semanticDeclarationAST_semanticAnalysis (void) {
  gCategoryMethodTable_semanticDeclarationAST_semanticAnalysis.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_semanticDeclarationAST_semanticAnalysis (NULL,
                                                                    freeCategoryMethod_semanticDeclarationAST_semanticAnalysis) ;

//-----------------------------------------------------------------------------*

void callCategoryMethod_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                          const GALGAS_semanticContext constin_inSemanticContext,
                                          const GALGAS_predefinedTypes constin_inPredefinedTypes,
                                          GALGAS_semanticDeclarationSortedListForGeneration & io_ioSemanticDeclarationListForGeneration,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, cPtr_semanticDeclarationAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const int32_t classIndex = info->mSlotID ;
    categoryMethodSignature_semanticDeclarationAST_semanticAnalysis f = NULL ;
    if (classIndex < gCategoryMethodTable_semanticDeclarationAST_semanticAnalysis.count ()) {
      f = gCategoryMethodTable_semanticDeclarationAST_semanticAnalysis (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_semanticDeclarationAST_semanticAnalysis.count ()) {
           f = gCategoryMethodTable_semanticDeclarationAST_semanticAnalysis (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_semanticDeclarationAST_semanticAnalysis.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, constin_inSemanticContext, constin_inPredefinedTypes, io_ioSemanticDeclarationListForGeneration, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
//      Overriding category method '@predefinedTypeAST semanticAnalysis'       *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_predefinedTypeAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                               const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                               const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                               GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                               C_Compiler * inCompiler
                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_predefinedTypeAST * object = (const cPtr_predefinedTypeAST *) inObject ;
  macroValidSharedObject (object, cPtr_predefinedTypeAST) ;
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("Predefined type ").operator_concat (object->mAttribute_mPredefinedTypeName  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 123)), GALGAS_primitiveTypeForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (object->mAttribute_mPredefinedTypeName, inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 125)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 125)), object->mAttribute_mPredefinedTypeName, object->mAttribute_mKind  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 124)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 122)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_predefinedTypeAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_predefinedTypeAST.mSlotID,
                                        categoryMethod_predefinedTypeAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_predefinedTypeAST_semanticAnalysis (defineCategoryMethod_predefinedTypeAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//      Overriding category method '@listDeclarationAST semanticAnalysis'      *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_listDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                C_Compiler * inCompiler
                                                                COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_listDeclarationAST * object = (const cPtr_listDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_listDeclarationAST) ;
  GALGAS_typedAttributeList var_typedAttributeList = GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 149)) ;
  GALGAS_attributeIndexMap var_attributeMap = GALGAS_attributeIndexMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 150)) ;
  cEnumerator_attributeInCollectionListAST enumerator_7785 (object->mAttribute_mAttributeList, kEnumeration_up) ;
  while (enumerator_7785.hasCurrentObject ()) {
    GALGAS_unifiedTypeMapProxy var_t = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_7785.current_mAttributeTypeName (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 152)) ;
    GALGAS_bool var_hasGetter = GALGAS_bool (true) ;
    GALGAS_bool var_hasSetter = GALGAS_bool (false) ;
    cEnumerator_lstringlist enumerator_7966 (enumerator_7785.current_mFeatureList (HERE), kEnumeration_up) ;
    while (enumerator_7966.hasCurrentObject ()) {
      const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, enumerator_7966.current_mValue (HERE).mAttribute_string.objectCompare (GALGAS_string ("nogetter"))).boolEnum () ;
      if (kBoolTrue == test_0) {
        const enumGalgasBool test_1 = var_hasGetter.operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 157)).boolEnum () ;
        if (kBoolTrue == test_1) {
          GALGAS_location location_2 (enumerator_7966.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_2, GALGAS_string ("duplicate feature")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 158)) ;
        }
        var_hasGetter = GALGAS_bool (false) ;
      }else if (kBoolFalse == test_0) {
        const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, enumerator_7966.current_mValue (HERE).mAttribute_string.objectCompare (GALGAS_string ("setter"))).boolEnum () ;
        if (kBoolTrue == test_3) {
          const enumGalgasBool test_4 = var_hasSetter.boolEnum () ;
          if (kBoolTrue == test_4) {
            GALGAS_location location_5 (enumerator_7966.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_5, GALGAS_string ("duplicate feature")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 163)) ;
          }
          var_hasSetter = GALGAS_bool (true) ;
        }else if (kBoolFalse == test_3) {
          GALGAS_location location_6 (enumerator_7966.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_6, GALGAS_string ("unknown feature; the features available here are: 'nogetter', 'setter'")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 167)) ;
        }
      }
      enumerator_7966.gotoNextObject () ;
    }
    var_typedAttributeList.addAssign_operation (var_t, enumerator_7785.current_mAttributeName (HERE), var_hasSetter, var_hasGetter  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 170)) ;
    {
    var_attributeMap.modifier_insertKey (enumerator_7785.current_mAttributeName (HERE), var_t, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 176)) ;
    }
    enumerator_7785.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("list type ").operator_concat (object->mAttribute_mListTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 180))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 180)), GALGAS_listTypeForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mListTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 182)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (object->mAttribute_mListTypeName.mAttribute_string.operator_concat (function_elementTypeNameSuffix (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 183))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 183)), object->mAttribute_mListTypeName.mAttribute_location  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 183)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 183)), var_typedAttributeList  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 181)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 179)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_listDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_listDeclarationAST.mSlotID,
                                        categoryMethod_listDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_listDeclarationAST_semanticAnalysis (defineCategoryMethod_listDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//   Overriding category method '@sortedListDeclarationAST semanticAnalysis'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_sortedListDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                      const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                      const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                      GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_sortedListDeclarationAST * object = (const cPtr_sortedListDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_sortedListDeclarationAST) ;
  GALGAS_typedAttributeList var_typedAttributeList = GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 198)) ;
  GALGAS_attributeIndexMap var_attributeMap = GALGAS_attributeIndexMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 199)) ;
  cEnumerator_attributeInCollectionListAST enumerator_9468 (object->mAttribute_mAttributeList, kEnumeration_up) ;
  while (enumerator_9468.hasCurrentObject ()) {
    GALGAS_unifiedTypeMapProxy var_t = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_9468.current_mAttributeTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 201)) ;
    GALGAS_bool var_hasSetter = GALGAS_bool (true) ;
    GALGAS_bool var_hasGetter = GALGAS_bool (true) ;
    var_typedAttributeList.addAssign_operation (var_t, enumerator_9468.current_mAttributeName (HERE), var_hasSetter, var_hasGetter  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 204)) ;
    {
    var_attributeMap.modifier_insertKey (enumerator_9468.current_mAttributeName (HERE), var_t, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 210)) ;
    }
    enumerator_9468.gotoNextObject () ;
  }
  GALGAS_stringset var_attributesUsedForSorting = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 213)) ;
  GALGAS_sortDescriptorListForGeneration var_sortDescriptorList = GALGAS_sortDescriptorListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 214)) ;
  cEnumerator_sortedListSortDescriptorListAST enumerator_9965 (object->mAttribute_mSortDescriptorList, kEnumeration_up) ;
  while (enumerator_9965.hasCurrentObject ()) {
    GALGAS_unifiedTypeMapProxy var_type ;
    var_attributeMap.method_searchKey (enumerator_9965.current_mSortedAttributeName (HERE), var_type, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 216)) ;
    var_sortDescriptorList.addAssign_operation (var_type, enumerator_9965.current_mSortedAttributeName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 217)), enumerator_9965.current_mAscending (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 217)) ;
    const enumGalgasBool test_0 = var_attributesUsedForSorting.reader_hasKey (enumerator_9965.current_mSortedAttributeName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 218)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 218)).boolEnum () ;
    if (kBoolTrue == test_0) {
      GALGAS_location location_1 (enumerator_9965.current_mSortedAttributeName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_1, GALGAS_string ("the '").operator_concat (enumerator_9965.current_mSortedAttributeName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 219))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 219)).operator_concat (GALGAS_string ("' is already used for sorting")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 219))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 219)) ;
    }
    var_attributesUsedForSorting.addAssign_operation (enumerator_9965.current_mSortedAttributeName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 221))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 221)) ;
    enumerator_9965.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("sorted list ").operator_concat (object->mAttribute_mSortedListTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 225))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 225)), GALGAS_sortedListTypeForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mSortedListTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 227)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (object->mAttribute_mSortedListTypeName.mAttribute_string.operator_concat (function_elementTypeNameSuffix (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 228))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 228)), object->mAttribute_mSortedListTypeName.mAttribute_location  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 228)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 228)), var_typedAttributeList, var_sortDescriptorList  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 226)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 224)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_sortedListDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_sortedListDeclarationAST.mSlotID,
                                        categoryMethod_sortedListDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_sortedListDeclarationAST_semanticAnalysis (defineCategoryMethod_sortedListDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//     Overriding category method '@structDeclarationAST semanticAnalysis'     *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_structDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                  const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                  const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                  GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_structDeclarationAST * object = (const cPtr_structDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_structDeclarationAST) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, object->mAttribute_mAttributeList.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 252)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mStructTypeName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("a structure cannot be empty: it must have at least one field")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 253)) ;
  }
  GALGAS_typedAttributeList var_typedAttributeList = GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 255)) ;
  GALGAS_attributeIndexMap var_attributeMap = GALGAS_attributeIndexMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 256)) ;
  cEnumerator_attributeInCollectionListAST enumerator_11711 (object->mAttribute_mAttributeList, kEnumeration_up) ;
  while (enumerator_11711.hasCurrentObject ()) {
    GALGAS_unifiedTypeMapProxy var_t = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_11711.current_mAttributeTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 258)) ;
    cEnumerator_lstringlist enumerator_11838 (enumerator_11711.current_mFeatureList (HERE), kEnumeration_up) ;
    while (enumerator_11838.hasCurrentObject ()) {
      GALGAS_location location_2 (enumerator_11838.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_2, GALGAS_string ("a struct attribute does not accept any feature")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 260)) ;
      enumerator_11838.gotoNextObject () ;
    }
    GALGAS_bool var_hasSetter = GALGAS_bool (false) ;
    GALGAS_bool var_hasGetter = GALGAS_bool (false) ;
    var_typedAttributeList.addAssign_operation (var_t, enumerator_11711.current_mAttributeName (HERE), var_hasSetter, var_hasGetter  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 264)) ;
    const enumGalgasBool test_3 = function_forbiddenKeysForStruct (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 270)).reader_hasKey (enumerator_11711.current_mAttributeName (HERE).mAttribute_string COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 270)).boolEnum () ;
    if (kBoolTrue == test_3) {
      GALGAS_string var_m = GALGAS_string ("an attribute cannot be named:") ;
      cEnumerator_stringset enumerator_12268 (function_forbiddenKeysForStruct (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 272)), kEnumeration_up) ;
      while (enumerator_12268.hasCurrentObject ()) {
        var_m.dotAssign_operation (GALGAS_string (" ").operator_concat (enumerator_12268.current (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 273))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 273)) ;
        enumerator_12268.gotoNextObject () ;
      }
      var_m.dotAssign_operation (GALGAS_string ("; theses names are reserved")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 275)) ;
      GALGAS_location location_4 (enumerator_11711.current_mAttributeName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_4, var_m  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 276)) ;
    }
    {
    var_attributeMap.modifier_insertKey (enumerator_11711.current_mAttributeName (HERE), var_t, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 278)) ;
    }
    enumerator_11711.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("struct ").operator_concat (object->mAttribute_mStructTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 281))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 281)), GALGAS_structTypeForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mStructTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 283)), var_typedAttributeList  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 282)), GALGAS_string ("~")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 280)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_structDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_structDeclarationAST.mSlotID,
                                        categoryMethod_structDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_structDeclarationAST_semanticAnalysis (defineCategoryMethod_structDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//     Overriding category method '@graphDeclarationAST semanticAnalysis'      *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_graphDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                 const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                 const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                 GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_graphDeclarationAST * object = (const cPtr_graphDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_graphDeclarationAST) ;
  GALGAS_unifiedTypeMapProxy var_graphTypeProxy = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mGraphTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 297)) ;
  GALGAS_unifiedTypeMapProxy var_associatedListTypeProxy = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mAssociatedListTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 298)) ;
  GALGAS_unifiedTypeMapProxy var_associatedListElementTypeProxy = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (object->mAttribute_mAssociatedListTypeName.mAttribute_string.operator_concat (function_elementTypeNameSuffix (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 301))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 301)), object->mAttribute_mAssociatedListTypeName.mAttribute_location  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 301)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 299)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_associatedListTypeProxy.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 303)).objectCompare (GALGAS_typeKindEnum::constructor_listType (SOURCE_FILE ("semanticAnalysis.gSemantics", 303)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mAssociatedListTypeName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("the '@").operator_concat (object->mAttribute_mAssociatedListTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 304))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 304)).operator_concat (GALGAS_string ("' type should be a list")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 304))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 304)) ;
  }
  GALGAS_stringset var_reservedModifierNames = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 307)) ;
  var_reservedModifierNames.addAssign_operation (GALGAS_string ("noteNode")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 308)) ;
  var_reservedModifierNames.addAssign_operation (GALGAS_string ("addArc")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 309)) ;
  cEnumerator_graphInsertModifierList enumerator_13862 (object->mAttribute_mInsertModifierList, kEnumeration_up) ;
  while (enumerator_13862.hasCurrentObject ()) {
    const enumGalgasBool test_2 = var_reservedModifierNames.reader_hasKey (enumerator_13862.current_mInsertModifierName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 311)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 311)).boolEnum () ;
    if (kBoolTrue == test_2) {
      GALGAS_location location_3 (enumerator_13862.current_mInsertModifierName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_3, GALGAS_string ("the '").operator_concat (enumerator_13862.current_mInsertModifierName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 312))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 312)).operator_concat (GALGAS_string ("' modifier name is reserved for a graph type")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 312))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 312)) ;
    }
    {
    routine_check_5F_K_5F_L_5F_escapeCharacters (enumerator_13862.current_mInsertErrorMessage (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 314)) ;
    }
    enumerator_13862.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("graph ").operator_concat (object->mAttribute_mGraphTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 318))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 318)), GALGAS_graphDeclarationForGeneration::constructor_new (var_graphTypeProxy, var_associatedListTypeProxy, var_associatedListElementTypeProxy, object->mAttribute_mInsertModifierList  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 319)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 317)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_graphDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_graphDeclarationAST.mSlotID,
                                        categoryMethod_graphDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_graphDeclarationAST_semanticAnalysis (defineCategoryMethod_graphDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//   Overriding category method '@externTypeDeclarationAST semanticAnalysis'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_externTypeDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                      const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                      const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                      GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_externTypeDeclarationAST * object = (const cPtr_externTypeDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_externTypeDeclarationAST) ;
  GALGAS_unifiedTypeMapProxy var_externTypeProxy = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mExternTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 336)) ;
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("extern type ").operator_concat (object->mAttribute_mExternTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 339))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 339)), GALGAS_externTypeDeclarationForGeneration::constructor_new (var_externTypeProxy, object->mAttribute_mExternTypeName.mAttribute_string, object->mAttribute_mCppPreDeclarationCode, object->mAttribute_mCppClassCode  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 340)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 338)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_externTypeDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_externTypeDeclarationAST.mSlotID,
                                        categoryMethod_externTypeDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_externTypeDeclarationAST_semanticAnalysis (defineCategoryMethod_externTypeDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//      Overriding category method '@enumDeclarationAST semanticAnalysis'      *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_enumDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                C_Compiler * inCompiler
                                                                COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_enumDeclarationAST * object = (const cPtr_enumDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_enumDeclarationAST) ;
  GALGAS_stringlist var_constantList = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 366)) ;
  GALGAS_constantIndexMap var_constantMap = GALGAS_constantIndexMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 367)) ;
  cEnumerator_lstringlist enumerator_15801 (object->mAttribute_mConstantList, kEnumeration_up) ;
  while (enumerator_15801.hasCurrentObject ()) {
    var_constantList.addAssign_operation (enumerator_15801.current_mValue (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 369))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 369)) ;
    {
    var_constantMap.modifier_insertKey (enumerator_15801.current_mValue (HERE), var_constantMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 370)), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 370)) ;
    }
    enumerator_15801.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("enum ").operator_concat (object->mAttribute_mEnumTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 374))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 374)), GALGAS_enumTypeForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mEnumTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 376)), var_constantList  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 375)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 373)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_enumDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_enumDeclarationAST.mSlotID,
                                        categoryMethod_enumDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_enumDeclarationAST_semanticAnalysis (defineCategoryMethod_enumDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//     Overriding category method '@arrayDeclarationAST semanticAnalysis'      *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_arrayDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                 const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                 const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                 GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_arrayDeclarationAST * object = (const cPtr_arrayDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_arrayDeclarationAST) ;
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("array ").operator_concat (object->mAttribute_mArrayTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 392))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 392)), GALGAS_arrayTypeForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mArrayTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 394)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mElementTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 395)), object->mAttribute_mDimension.reader_uint (SOURCE_FILE ("semanticAnalysis.gSemantics", 396))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 393)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 391)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_arrayDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_arrayDeclarationAST.mSlotID,
                                        categoryMethod_arrayDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_arrayDeclarationAST_semanticAnalysis (defineCategoryMethod_arrayDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//    Overriding category method '@listmapDeclarationAST semanticAnalysis'     *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_listmapDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                   const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                   const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                   GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_listmapDeclarationAST * object = (const cPtr_listmapDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_listmapDeclarationAST) ;
  GALGAS_typeKindEnum var_typeKindEnum ;
  GALGAS_typedAttributeList var_listTypeAttributeList ;
  GALGAS_bool joker_17337_3 ; // Joker input parameter
  GALGAS_bool joker_17337_2 ; // Joker input parameter
  GALGAS_unifiedTypeMapProxy joker_17337_1 ; // Joker input parameter
  GALGAS_bool joker_17378_0 ; // Joker input parameter
  GALGAS_attributeMap joker_17433_20 ; // Joker input parameter
  GALGAS_typedAttributeList joker_17433_19 ; // Joker input parameter
  GALGAS_constructorMap joker_17433_18 ; // Joker input parameter
  GALGAS_readerMap joker_17433_17 ; // Joker input parameter
  GALGAS_modifierMap joker_17433_16 ; // Joker input parameter
  GALGAS_instanceMethodMap joker_17433_15 ; // Joker input parameter
  GALGAS_classMethodMap joker_17433_14 ; // Joker input parameter
  GALGAS_enumerationDescriptorList joker_17433_13 ; // Joker input parameter
  GALGAS_stringlist joker_17433_12 ; // Joker input parameter
  GALGAS_uint joker_17433_11 ; // Joker input parameter
  GALGAS_functionSignature joker_17433_10 ; // Joker input parameter
  GALGAS_stringset joker_17433_9 ; // Joker input parameter
  GALGAS_lstringlist joker_17433_8 ; // Joker input parameter
  GALGAS_mapSearchMethodListAST joker_17433_7 ; // Joker input parameter
  GALGAS_mapSearchMethodListAST joker_17433_6 ; // Joker input parameter
  GALGAS_bool joker_17433_5 ; // Joker input parameter
  GALGAS_unifiedTypeMapProxy joker_17433_4 ; // Joker input parameter
  GALGAS_string joker_17433_3 ; // Joker input parameter
  GALGAS_string joker_17433_2 ; // Joker input parameter
  GALGAS_headerKind joker_17433_1 ; // Joker input parameter
  constinArgument_inSemanticContext.mAttribute_mTypeMap.method_searchKey (object->mAttribute_mAssociatedListTypeName, joker_17337_3, joker_17337_2, joker_17337_1, var_typeKindEnum, joker_17378_0, var_listTypeAttributeList, joker_17433_20, joker_17433_19, joker_17433_18, joker_17433_17, joker_17433_16, joker_17433_15, joker_17433_14, joker_17433_13, joker_17433_12, joker_17433_11, joker_17433_10, joker_17433_9, joker_17433_8, joker_17433_7, joker_17433_6, joker_17433_5, joker_17433_4, joker_17433_3, joker_17433_2, joker_17433_1, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 412)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_typeKindEnum.objectCompare (GALGAS_typeKindEnum::constructor_listType (SOURCE_FILE ("semanticAnalysis.gSemantics", 421)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mAssociatedListTypeName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("associated type should be a list type")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 422)) ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("list map ").operator_concat (object->mAttribute_mListmapTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 426))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 426)), GALGAS_listmapTypeForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mListmapTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 428)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mAssociatedListTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 429)), var_listTypeAttributeList, GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (object->mAttribute_mListmapTypeName.mAttribute_string.operator_concat (function_elementTypeNameSuffix (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 431))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 431)), object->mAttribute_mListmapTypeName.mAttribute_location  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 431)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 431))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 427)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 425)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_listmapDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_listmapDeclarationAST.mSlotID,
                                        categoryMethod_listmapDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_listmapDeclarationAST_semanticAnalysis (defineCategoryMethod_listmapDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//      Overriding category method '@mapDeclarationAST semanticAnalysis'       *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_mapDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                               const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                               const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                               GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                               C_Compiler * inCompiler
                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_mapDeclarationAST * object = (const cPtr_mapDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_mapDeclarationAST) ;
  GALGAS_typedAttributeList var_typedAttributeList = GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 510)) ;
  GALGAS_attributeIndexMap var_attributeMap = GALGAS_attributeIndexMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 511)) ;
  cEnumerator_attributeInCollectionListAST enumerator_20844 (object->mAttribute_mAttributeList, kEnumeration_up) ;
  while (enumerator_20844.hasCurrentObject ()) {
    GALGAS_unifiedTypeMapProxy var_t = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_20844.current_mAttributeTypeName (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 513)) ;
    GALGAS_bool var_hasSetter = GALGAS_bool (true) ;
    GALGAS_bool var_hasGetter = GALGAS_bool (true) ;
    var_typedAttributeList.addAssign_operation (var_t, enumerator_20844.current_mAttributeName (HERE), var_hasSetter, var_hasGetter  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 516)) ;
    const enumGalgasBool test_0 = function_forbiddenKeysForMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 522)).reader_hasKey (enumerator_20844.current_mAttributeName (HERE).mAttribute_string COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 522)).boolEnum () ;
    if (kBoolTrue == test_0) {
      GALGAS_string var_m = GALGAS_string ("an attribute cannot be named:") ;
      cEnumerator_stringset enumerator_21254 (function_forbiddenKeysForMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 524)), kEnumeration_up) ;
      while (enumerator_21254.hasCurrentObject ()) {
        var_m.dotAssign_operation (GALGAS_string (" ").operator_concat (enumerator_21254.current (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 525))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 525)) ;
        enumerator_21254.gotoNextObject () ;
      }
      var_m.dotAssign_operation (GALGAS_string ("; theses names are reserved")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 527)) ;
      GALGAS_location location_1 (enumerator_20844.current_mAttributeName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_1, var_m  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 528)) ;
    }
    {
    var_attributeMap.modifier_insertKey (enumerator_20844.current_mAttributeName (HERE), var_t, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 530)) ;
    }
    enumerator_20844.gotoNextObject () ;
  }
  GALGAS_insertMethodMap var_insertMethodMap = GALGAS_insertMethodMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 533)) ;
  cEnumerator_insertMethodListAST enumerator_21555 (object->mAttribute_mInsertMethodList, kEnumeration_up) ;
  while (enumerator_21555.hasCurrentObject ()) {
    {
    var_insertMethodMap.modifier_insertKey (enumerator_21555.current_mInsertMethodName (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 535)) ;
    }
    {
    routine_check_5F_K_5F_L_5F_escapeCharacters (enumerator_21555.current_mErrorMessage (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 536)) ;
    }
    {
    routine_check_5F_K_5F_L_5F_escapeCharacters (enumerator_21555.current_mShadowErrorMessage (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 537)) ;
    }
    enumerator_21555.gotoNextObject () ;
  }
  GALGAS_searchMethodMap var_searchMethodMap = GALGAS_searchMethodMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 540)) ;
  cEnumerator_mapSearchMethodListAST enumerator_21833 (object->mAttribute_mSearchMethodList, kEnumeration_up) ;
  while (enumerator_21833.hasCurrentObject ()) {
    {
    var_searchMethodMap.modifier_insertKey (enumerator_21833.current_mSearchMethodName (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 542)) ;
    }
    {
    routine_check_5F_K_5F_escapeCharacters (enumerator_21833.current_mErrorMessage (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 543)) ;
    }
    enumerator_21833.gotoNextObject () ;
  }
  cEnumerator_mapRemoveMethodListAST enumerator_22007 (object->mAttribute_mRemoveMethodList, kEnumeration_up) ;
  while (enumerator_22007.hasCurrentObject ()) {
    {
    var_insertMethodMap.modifier_insertKey (enumerator_22007.current_mMethodName (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 547)) ;
    }
    {
    routine_check_5F_K_5F_escapeCharacters (enumerator_22007.current_mErrorMessage (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 548)) ;
    }
    enumerator_22007.gotoNextObject () ;
  }
  cEnumerator_insertOrReplaceDeclarationListAST enumerator_22234 (object->mAttribute_mInsertOrReplaceDeclarationListAST, kEnumeration_up) ;
  GALGAS_uint index_22199 ((uint32_t) 0) ;
  while (enumerator_22234.hasCurrentObject ()) {
    const enumGalgasBool test_2 = GALGAS_bool (kIsStrictSup, index_22199.objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_2) {
      inCompiler->emitSemanticWarning (enumerator_22234.current_mInsertOrReplaceDeclarationLocation (HERE), GALGAS_string ("the 'insertOrReplace' modifier is already declared")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 553)) ;
    }
    enumerator_22234.gotoNextObject () ;
    index_22199.increment_operation (inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 551)) ;
  }
  GALGAS_bool var_hasInsertOrReplaceModifier = GALGAS_bool (kIsStrictSup, object->mAttribute_mInsertOrReplaceDeclarationListAST.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 556)).objectCompare (GALGAS_uint ((uint32_t) 0U))) ;
  const enumGalgasBool test_3 = var_hasInsertOrReplaceModifier.operator_and (var_insertMethodMap.reader_hasKey (GALGAS_string ("insertOrReplace") COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 557)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 557)).boolEnum () ;
  if (kBoolTrue == test_3) {
    GALGAS_location var_insertOrReplaceDeclarationLocation ;
    object->mAttribute_mInsertOrReplaceDeclarationListAST.method_first (var_insertOrReplaceDeclarationLocation, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 559)) ;
    inCompiler->emitSemanticError (var_insertOrReplaceDeclarationLocation, GALGAS_string ("the insertOrReplace' modifier cannot be declared : an insert modifier or a remove modifier has been declared with this name")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 560)) ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("map ").operator_concat (object->mAttribute_mMapTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 573))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 573)), GALGAS_mapTypeForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mMapTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 575)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (object->mAttribute_mMapTypeName.mAttribute_string.operator_concat (function_elementTypeNameSuffix (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 576))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 576)), object->mAttribute_mMapTypeName.mAttribute_location  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 576)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 576)), object->mAttribute_mMapTypeName, var_typedAttributeList, object->mAttribute_mInsertMethodList, object->mAttribute_mSearchMethodList, object->mAttribute_mRemoveMethodList, var_hasInsertOrReplaceModifier  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 574)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 572)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_mapDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_mapDeclarationAST.mSlotID,
                                        categoryMethod_mapDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_mapDeclarationAST_semanticAnalysis (defineCategoryMethod_mapDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//   Overriding category method '@uniqueMapDeclarationAST semanticAnalysis'    *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_uniqueMapDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                     const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                     const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                     GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                     C_Compiler * inCompiler
                                                                     COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_uniqueMapDeclarationAST * object = (const cPtr_uniqueMapDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_uniqueMapDeclarationAST) ;
  GALGAS_stringset var_initialStateSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 597)) ;
  cEnumerator_insertMethodListAST enumerator_24229 (object->mAttribute_mInsertMethodList, kEnumeration_up) ;
  while (enumerator_24229.hasCurrentObject ()) {
    const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, object->mAttribute_mMapStateList.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 599)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_0) {
      const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, enumerator_24229.current_mInitialStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 600)).objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
      if (kBoolTrue == test_1) {
        GALGAS_location location_2 (enumerator_24229.current_mInsertMethodName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_2, GALGAS_string ("the '").operator_concat (enumerator_24229.current_mInsertMethodName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 601))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 601)).operator_concat (GALGAS_string ("' insert method should name an automaton state")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 601))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 601)) ;
      }else if (kBoolFalse == test_1) {
        var_initialStateSet.addAssign_operation (enumerator_24229.current_mInitialStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 603))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 603)) ;
      }
    }else if (kBoolFalse == test_0) {
      const enumGalgasBool test_3 = GALGAS_bool (kIsNotEqual, enumerator_24229.current_mInitialStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 605)).objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
      if (kBoolTrue == test_3) {
        GALGAS_location location_4 (enumerator_24229.current_mInsertMethodName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_4, GALGAS_string ("the '").operator_concat (enumerator_24229.current_mInsertMethodName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 606))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 606)).operator_concat (GALGAS_string ("' insert method should not name an automaton state")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 606))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 606)) ;
      }
    }
    enumerator_24229.gotoNextObject () ;
  }
  GALGAS_mapAutomatonActionMap var_mapAutomatonActionMap = GALGAS_mapAutomatonActionMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 610)) ;
  cEnumerator_mapSearchMethodListAST enumerator_24832 (object->mAttribute_mSearchMethodList, kEnumeration_up) ;
  while (enumerator_24832.hasCurrentObject ()) {
    const enumGalgasBool test_5 = GALGAS_bool (kIsStrictSup, object->mAttribute_mMapStateList.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 612)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_5) {
      const enumGalgasBool test_6 = GALGAS_bool (kIsEqual, enumerator_24832.current_mActionName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 613)).objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
      if (kBoolTrue == test_6) {
        GALGAS_location location_7 (enumerator_24832.current_mSearchMethodName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_7, GALGAS_string ("the '").operator_concat (enumerator_24832.current_mSearchMethodName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 614))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 614)).operator_concat (GALGAS_string ("' search method should name an automaton action")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 614))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 614)) ;
      }else if (kBoolFalse == test_6) {
        const enumGalgasBool test_8 = var_mapAutomatonActionMap.reader_hasKey (enumerator_24832.current_mActionName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 615)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 615)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 615)).boolEnum () ;
        if (kBoolTrue == test_8) {
          {
          var_mapAutomatonActionMap.modifier_insertKey (enumerator_24832.current_mActionName (HERE), var_mapAutomatonActionMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 617)), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 617)) ;
          }
        }
      }
    }else if (kBoolFalse == test_5) {
      const enumGalgasBool test_9 = GALGAS_bool (kIsNotEqual, enumerator_24832.current_mActionName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 621)).objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
      if (kBoolTrue == test_9) {
        GALGAS_location location_10 (enumerator_24832.current_mSearchMethodName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_10, GALGAS_string ("the '").operator_concat (enumerator_24832.current_mSearchMethodName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 622))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 622)).operator_concat (GALGAS_string ("' search method should not name an automaton action")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 622))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 622)) ;
      }
    }
    enumerator_24832.gotoNextObject () ;
  }
  GALGAS_mapAutomatonStateMap var_mapAutomatonStateMap = GALGAS_mapAutomatonStateMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 626)) ;
  cEnumerator_mapStateList enumerator_25645 (object->mAttribute_mMapStateList, kEnumeration_up) ;
  while (enumerator_25645.hasCurrentObject ()) {
    {
    var_mapAutomatonStateMap.modifier_insertKey (enumerator_25645.current_mStateName (HERE), var_mapAutomatonStateMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 628)), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 628)) ;
    }
    enumerator_25645.gotoNextObject () ;
  }
  cEnumerator_mapStateList enumerator_25771 (object->mAttribute_mMapStateList, kEnumeration_up) ;
  while (enumerator_25771.hasCurrentObject ()) {
    cEnumerator_mapStateTransitionList enumerator_25802 (enumerator_25771.current_mTransitionList (HERE), kEnumeration_up) ;
    while (enumerator_25802.hasCurrentObject ()) {
      GALGAS_uint joker_25863_0 ; // Joker input parameter
      var_mapAutomatonStateMap.method_searchKey (enumerator_25802.current_mTargetStateName (HERE), joker_25863_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 632)) ;
      enumerator_25802.gotoNextObject () ;
    }
    enumerator_25771.gotoNextObject () ;
  }
  GALGAS_stringset var_allActions = var_mapAutomatonActionMap.reader_keySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 636)) ;
  GALGAS_mapStateSortedList var_mapStateSortedList = GALGAS_mapStateSortedList::constructor_emptySortedList (SOURCE_FILE ("semanticAnalysis.gSemantics", 637)) ;
  cEnumerator_mapStateList enumerator_26097 (object->mAttribute_mMapStateList, kEnumeration_up) ;
  while (enumerator_26097.hasCurrentObject ()) {
    GALGAS_stringset var_actionsForCurrentState = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 639)) ;
    GALGAS_mapStateTransitionSortedList var_mapStateTransitionSortedList = GALGAS_mapStateTransitionSortedList::constructor_emptySortedList (SOURCE_FILE ("semanticAnalysis.gSemantics", 640)) ;
    cEnumerator_mapStateTransitionList enumerator_26262 (enumerator_26097.current_mTransitionList (HERE), kEnumeration_up) ;
    while (enumerator_26262.hasCurrentObject ()) {
      GALGAS_uint var_actionIndex ;
      var_mapAutomatonActionMap.method_searchKey (enumerator_26262.current_mActionName (HERE), var_actionIndex, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 643)) ;
      const enumGalgasBool test_11 = var_actionsForCurrentState.reader_hasKey (enumerator_26262.current_mActionName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 644)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 644)).boolEnum () ;
      if (kBoolTrue == test_11) {
        GALGAS_location location_12 (enumerator_26262.current_mActionName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_12, GALGAS_string ("the '").operator_concat (enumerator_26262.current_mActionName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 645))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 645)).operator_concat (GALGAS_string ("' action is already used for this state")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 645))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 645)) ;
      }
      var_actionsForCurrentState.addAssign_operation (enumerator_26262.current_mActionName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 647))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 647)) ;
      GALGAS_uint var_targetStateIndex ;
      var_mapAutomatonStateMap.method_searchKey (enumerator_26262.current_mTargetStateName (HERE), var_targetStateIndex, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 649)) ;
      var_mapStateTransitionSortedList.addAssign_operation (var_actionIndex, enumerator_26262.current_mActionName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 652)), var_targetStateIndex, enumerator_26262.current_mTargetStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 654)), enumerator_26262.current_mTransitionMessageKind (HERE), enumerator_26262.current_mTransitionMessage (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 656))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 650)) ;
      enumerator_26262.gotoNextObject () ;
    }
    GALGAS_uint var_stateIndex ;
    var_mapAutomatonStateMap.method_searchKey (enumerator_26097.current_mStateName (HERE), var_stateIndex, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 660)) ;
    var_mapStateSortedList.addAssign_operation (var_stateIndex, enumerator_26097.current_mStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 663)), enumerator_26097.current_mStateMessageKind (HERE), enumerator_26097.current_mStateMessage (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 665)), var_mapStateTransitionSortedList  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 661)) ;
    GALGAS_stringset var_missingActions = var_allActions.substract_operation (var_actionsForCurrentState, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 668)) ;
    const enumGalgasBool test_13 = GALGAS_bool (kIsStrictSup, var_missingActions.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 669)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_13) {
      GALGAS_string var_s = GALGAS_string::makeEmptyString () ;
      cEnumerator_stringset enumerator_27364 (var_missingActions, kEnumeration_up) ;
      while (enumerator_27364.hasCurrentObject ()) {
        var_s.dotAssign_operation (GALGAS_string ("'").operator_concat (enumerator_27364.current_key (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 672)).operator_concat (GALGAS_string ("'")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 672))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 672)) ;
        if (enumerator_27364.hasNextObject ()) {
          var_s.dotAssign_operation (GALGAS_string (", ")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 673)) ;
        }
        enumerator_27364.gotoNextObject () ;
      }
      GALGAS_location location_14 (enumerator_26097.current_mStateName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_14, GALGAS_string ("the following actions are not named in a transition from this state: ").operator_concat (var_s  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 675))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 675)) ;
    }
    enumerator_26097.gotoNextObject () ;
  }
  GALGAS_stringset var_accessibleStates = var_initialStateSet ;
  GALGAS_bool var_progress = GALGAS_bool (true) ;
  if (object->mAttribute_mMapStateList.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 681)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 681)).isValid ()) {
    uint32_t variant_27702 = object->mAttribute_mMapStateList.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 681)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 681)).uintValue () ;
    bool loop_27702 = true ;
    while (loop_27702) {
      loop_27702 = var_progress.isValid () ;
      if (loop_27702) {
        loop_27702 = var_progress.boolValue () ;
      }
      if (loop_27702 && (0 == variant_27702)) {
        loop_27702 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticAnalysis.gSemantics", 681)) ;
      }
      if (loop_27702) {
        variant_27702 -- ;
        var_progress = GALGAS_bool (false) ;
        cEnumerator_mapStateList enumerator_27799 (object->mAttribute_mMapStateList, kEnumeration_up) ;
        while (enumerator_27799.hasCurrentObject ()) {
          const enumGalgasBool test_15 = var_accessibleStates.reader_hasKey (enumerator_27799.current_mStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 684)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 684)).boolEnum () ;
          if (kBoolTrue == test_15) {
            cEnumerator_mapStateTransitionList enumerator_27895 (enumerator_27799.current_mTransitionList (HERE), kEnumeration_up) ;
            while (enumerator_27895.hasCurrentObject ()) {
              const enumGalgasBool test_16 = var_accessibleStates.reader_hasKey (enumerator_27895.current_mTargetStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 686)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 686)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 686)).boolEnum () ;
              if (kBoolTrue == test_16) {
                var_accessibleStates.addAssign_operation (enumerator_27895.current_mTargetStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 687))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 687)) ;
                var_progress = GALGAS_bool (true) ;
              }
              enumerator_27895.gotoNextObject () ;
            }
          }
          enumerator_27799.gotoNextObject () ;
        }
      }
    }
  }
  GALGAS_stringset var_uselessStates = var_mapAutomatonStateMap.reader_keySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 694)).substract_operation (var_accessibleStates, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 694)) ;
  const enumGalgasBool test_17 = GALGAS_bool (kIsStrictSup, var_uselessStates.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 695)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_17) {
    GALGAS_string var_s = GALGAS_string::makeEmptyString () ;
    cEnumerator_stringset enumerator_28323 (var_uselessStates, kEnumeration_up) ;
    while (enumerator_28323.hasCurrentObject ()) {
      var_s.dotAssign_operation (GALGAS_string ("'").operator_concat (enumerator_28323.current_key (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 698)).operator_concat (GALGAS_string ("'")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 698))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 698)) ;
      if (enumerator_28323.hasNextObject ()) {
        var_s.dotAssign_operation (GALGAS_string (", ")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 699)) ;
      }
      enumerator_28323.gotoNextObject () ;
    }
    inCompiler->emitSemanticWarning (inCompiler->here (), GALGAS_string ("the following map automaton states are useless: ").operator_concat (var_s  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 701))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 701)) ;
  }
  GALGAS_stringset var_neededAssociations = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 705)) ;
  GALGAS_stringset var_accessibilityGraph = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 706)) ;
  cEnumerator_mapAutomatonStateMap enumerator_28693 (var_mapAutomatonStateMap, kEnumeration_up) ;
  while (enumerator_28693.hasCurrentObject ()) {
    GALGAS_stringset var_reachableStates = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 708)) ;
    var_reachableStates.addAssign_operation (enumerator_28693.current_lkey (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 709))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 709)) ;
    GALGAS_bool var_progress = GALGAS_bool (true) ;
    if (var_mapAutomatonStateMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 711)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 711)).isValid ()) {
      uint32_t variant_28818 = var_mapAutomatonStateMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 711)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 711)).uintValue () ;
      bool loop_28818 = true ;
      while (loop_28818) {
        loop_28818 = var_progress.isValid () ;
        if (loop_28818) {
          loop_28818 = var_progress.boolValue () ;
        }
        if (loop_28818 && (0 == variant_28818)) {
          loop_28818 = false ;
          inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticAnalysis.gSemantics", 711)) ;
        }
        if (loop_28818) {
          variant_28818 -- ;
          var_progress = GALGAS_bool (false) ;
          cEnumerator_mapStateList enumerator_28925 (object->mAttribute_mMapStateList, kEnumeration_up) ;
          while (enumerator_28925.hasCurrentObject ()) {
            const enumGalgasBool test_18 = var_reachableStates.reader_hasKey (enumerator_28925.current_mStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 714)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 714)).boolEnum () ;
            if (kBoolTrue == test_18) {
              cEnumerator_mapStateTransitionList enumerator_29024 (enumerator_28925.current_mTransitionList (HERE), kEnumeration_up) ;
              while (enumerator_29024.hasCurrentObject ()) {
                const enumGalgasBool test_19 = var_reachableStates.reader_hasKey (enumerator_29024.current_mTargetStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 716)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 716)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 716)).boolEnum () ;
                if (kBoolTrue == test_19) {
                  var_reachableStates.addAssign_operation (enumerator_29024.current_mTargetStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 717))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 717)) ;
                  var_accessibilityGraph.addAssign_operation (enumerator_28693.current_lkey (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 718)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 718)).operator_concat (enumerator_29024.current_mTargetStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 718))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 718))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 718)) ;
                  var_progress = GALGAS_bool (true) ;
                }
                enumerator_29024.gotoNextObject () ;
              }
            }
            enumerator_28925.gotoNextObject () ;
          }
        }
      }
    }
    cEnumerator_stringset enumerator_29410 (var_reachableStates, kEnumeration_up) ;
    while (enumerator_29410.hasCurrentObject ()) {
      const enumGalgasBool test_20 = GALGAS_bool (kIsNotEqual, enumerator_28693.current_lkey (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 726)).objectCompare (enumerator_29410.current_key (HERE))).boolEnum () ;
      if (kBoolTrue == test_20) {
        var_neededAssociations.addAssign_operation (enumerator_28693.current_lkey (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 727)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 727)).operator_concat (enumerator_29410.current_key (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 727))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 727)) ;
      }
      enumerator_29410.gotoNextObject () ;
    }
    enumerator_28693.gotoNextObject () ;
  }
  GALGAS_mapOverrideList var_mapOverrideList = GALGAS_mapOverrideList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 732)) ;
  cEnumerator_mapOverrideBlockListAST enumerator_29645 (object->mAttribute_mMapOverrideBlockListAST, kEnumeration_up) ;
  while (enumerator_29645.hasCurrentObject ()) {
    GALGAS_stringset var_handledAssociations = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 734)) ;
    GALGAS_stringset var_neededCombinaisons = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 735)) ;
    GALGAS_branchBehaviourSortedListForMapOverride var_branchBehaviourSortedListForMapOverride_31_ = GALGAS_branchBehaviourSortedListForMapOverride::constructor_emptySortedList (SOURCE_FILE ("semanticAnalysis.gSemantics", 736)) ;
    cEnumerator_mapOverrideBlockDescriptorAST enumerator_29893 (enumerator_29645.current_mMapOverrideBlockDescriptor_31_AST (HERE), kEnumeration_up) ;
    while (enumerator_29893.hasCurrentObject ()) {
      GALGAS_uint var_startStateNameIndex ;
      var_mapAutomatonStateMap.method_searchKey (enumerator_29893.current_mLeftState (HERE), var_startStateNameIndex, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 739)) ;
      GALGAS_uint var_currentStateNameIndex ;
      var_mapAutomatonStateMap.method_searchKey (enumerator_29893.current_mRightState (HERE), var_currentStateNameIndex, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 741)) ;
      GALGAS_string var_association = enumerator_29893.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 742)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 742)).operator_concat (enumerator_29893.current_mRightState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 742))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 742)) ;
      const enumGalgasBool test_21 = var_neededAssociations.reader_hasKey (var_association COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 743)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 743)).boolEnum () ;
      if (kBoolTrue == test_21) {
        GALGAS_location location_22 (enumerator_29893.current_mRightState (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticWarning (location_22, GALGAS_string ("the '").operator_concat (var_association  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 744)).operator_concat (GALGAS_string ("' association is useless")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 744))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 744)) ;
      }
      const enumGalgasBool test_23 = var_handledAssociations.reader_hasKey (var_association COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 746)).boolEnum () ;
      if (kBoolTrue == test_23) {
        GALGAS_location location_24 (enumerator_29893.current_mRightState (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_24, GALGAS_string ("the '").operator_concat (var_association  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 748)).operator_concat (GALGAS_string ("' association is already defined")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 748))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 747)) ;
      }
      var_handledAssociations.addAssign_operation (var_association  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 750)) ;
      GALGAS_uint var_finalStateNameIndex ;
      var_mapAutomatonStateMap.method_searchKey (enumerator_29893.current_mResultingState (HERE), var_finalStateNameIndex, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 752)) ;
      const enumGalgasBool test_25 = GALGAS_bool (kIsNotEqual, enumerator_29893.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 753)).objectCompare (enumerator_29893.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 753)))).boolEnum () ;
      if (kBoolTrue == test_25) {
        var_neededCombinaisons.addAssign_operation (enumerator_29893.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 754)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 754)).operator_concat (enumerator_29893.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 754))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 754))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 754)) ;
        var_neededCombinaisons.addAssign_operation (enumerator_29893.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 755)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 755)).operator_concat (enumerator_29893.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 755))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 755))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 755)) ;
        const enumGalgasBool test_26 = var_accessibilityGraph.reader_hasKey (enumerator_29893.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 756)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 756)).operator_concat (enumerator_29893.current_mRightState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 756))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 756)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 756)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 756)).boolEnum () ;
        if (kBoolTrue == test_26) {
          GALGAS_location location_27 (enumerator_29893.current_mResultingState (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_27, GALGAS_string ("the '").operator_concat (enumerator_29893.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 758))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 758)).operator_concat (GALGAS_string ("' state is not reachable from '")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 758)).operator_concat (enumerator_29893.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 758))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 758)).operator_concat (GALGAS_string ("' state")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 758))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 757)) ;
        }
      }
      {
      routine_check_5F_K_5F_escapeCharacters (enumerator_29893.current_mTransitionMessage (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 762)) ;
      }
      var_branchBehaviourSortedListForMapOverride_31_.addAssign_operation (var_startStateNameIndex, enumerator_29893.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 765)), var_currentStateNameIndex, enumerator_29893.current_mRightState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 767)), var_finalStateNameIndex, enumerator_29893.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 769)), enumerator_29893.current_mMessageKind (HERE), enumerator_29893.current_mTransitionMessage (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 771))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 763)) ;
      enumerator_29893.gotoNextObject () ;
    }
    GALGAS_stringset var_forgottenAssociations = var_neededAssociations.substract_operation (var_handledAssociations, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 774)) ;
    const enumGalgasBool test_28 = GALGAS_bool (kIsStrictSup, var_forgottenAssociations.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 775)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_28) {
      GALGAS_string var_s = GALGAS_string::makeEmptyString () ;
      cEnumerator_stringset enumerator_31749 (var_forgottenAssociations, kEnumeration_up) ;
      while (enumerator_31749.hasCurrentObject ()) {
        var_s.dotAssign_operation (GALGAS_string ("\n"
          "  - ").operator_concat (enumerator_31749.current_key (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 778))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 778)) ;
        enumerator_31749.gotoNextObject () ;
      }
      inCompiler->emitSemanticError (inCompiler->here (), var_forgottenAssociations.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 780)).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 780)).operator_concat (GALGAS_string (" associations should be defined:")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 780)).operator_concat (var_s  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 780))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 780)) ;
    }
    GALGAS_stringset var_definedCombinaisons = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 782)) ;
    GALGAS_branchBehaviourSortedListForMapOverride var_branchBehaviourSortedListForMapOverride_32_ = GALGAS_branchBehaviourSortedListForMapOverride::constructor_emptySortedList (SOURCE_FILE ("semanticAnalysis.gSemantics", 783)) ;
    cEnumerator_mapOverrideBlockDescriptorAST enumerator_32113 (enumerator_29645.current_mMapOverrideBlockDescriptor_32_AST (HERE), kEnumeration_up) ;
    while (enumerator_32113.hasCurrentObject ()) {
      GALGAS_uint var_leftStateIndex ;
      var_mapAutomatonStateMap.method_searchKey (enumerator_32113.current_mLeftState (HERE), var_leftStateIndex, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 786)) ;
      GALGAS_uint var_rightStateIndex ;
      var_mapAutomatonStateMap.method_searchKey (enumerator_32113.current_mRightState (HERE), var_rightStateIndex, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 788)) ;
      GALGAS_string var_combinaison = enumerator_32113.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 789)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 789)).operator_concat (enumerator_32113.current_mRightState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 789))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 789)) ;
      const enumGalgasBool test_29 = var_neededCombinaisons.reader_hasKey (var_combinaison COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 790)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 790)).boolEnum () ;
      if (kBoolTrue == test_29) {
        GALGAS_location location_30 (enumerator_32113.current_mRightState (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_30, GALGAS_string ("the '").operator_concat (enumerator_32113.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 792))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 792)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 792)).operator_concat (enumerator_32113.current_mRightState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 792))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 792)).operator_concat (GALGAS_string ("' combinaison is useless")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 792))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 791)) ;
      }
      const enumGalgasBool test_31 = var_definedCombinaisons.reader_hasKey (var_combinaison COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 794)).boolEnum () ;
      if (kBoolTrue == test_31) {
        GALGAS_location location_32 (enumerator_32113.current_mRightState (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_32, GALGAS_string ("the '").operator_concat (enumerator_32113.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 796))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 796)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 796)).operator_concat (enumerator_32113.current_mRightState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 796))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 796)).operator_concat (GALGAS_string ("' combinaison is already defined")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 796))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 795)) ;
      }
      var_definedCombinaisons.addAssign_operation (var_combinaison  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 798)) ;
      GALGAS_uint var_resultingStateNameIndex ;
      var_mapAutomatonStateMap.method_searchKey (enumerator_32113.current_mResultingState (HERE), var_resultingStateNameIndex, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 800)) ;
      const enumGalgasBool test_33 = GALGAS_bool (kIsNotEqual, enumerator_32113.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 801)).objectCompare (enumerator_32113.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 801)))).operator_and (GALGAS_bool (kIsNotEqual, enumerator_32113.current_mRightState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 802)).objectCompare (enumerator_32113.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 802)))) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 801)).operator_and (var_accessibilityGraph.reader_hasKey (enumerator_32113.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 803)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 803)).operator_concat (enumerator_32113.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 803))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 803)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 803)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 803)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 802)).boolEnum () ;
      if (kBoolTrue == test_33) {
        GALGAS_location location_34 (enumerator_32113.current_mResultingState (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_34, GALGAS_string ("the '").operator_concat (enumerator_32113.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 805))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 805)).operator_concat (GALGAS_string ("' state cannot be reached from the '")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 805)).operator_concat (enumerator_32113.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 805))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 805)).operator_concat (GALGAS_string ("' state")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 805))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 804)) ;
      }
      {
      routine_check_5F_K_5F_escapeCharacters (enumerator_32113.current_mTransitionMessage (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 807)) ;
      }
      const enumGalgasBool test_35 = GALGAS_bool (kIsEqual, enumerator_32113.current_mMessageKind (HERE).objectCompare (GALGAS_mapAutomatonMessageKind::constructor_noMessage (SOURCE_FILE ("semanticAnalysis.gSemantics", 808)))).boolEnum () ;
      if (kBoolTrue == test_35) {
        var_definedCombinaisons.addAssign_operation (enumerator_32113.current_mRightState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 809)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 809)).operator_concat (enumerator_32113.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 809))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 809))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 809)) ;
        var_branchBehaviourSortedListForMapOverride_32_.addAssign_operation (var_rightStateIndex, enumerator_32113.current_mRightState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 812)), var_leftStateIndex, enumerator_32113.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 814)), var_resultingStateNameIndex, enumerator_32113.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 816)), enumerator_32113.current_mMessageKind (HERE), enumerator_32113.current_mTransitionMessage (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 818))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 810)) ;
      }
      var_branchBehaviourSortedListForMapOverride_32_.addAssign_operation (var_leftStateIndex, enumerator_32113.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 823)), var_rightStateIndex, enumerator_32113.current_mRightState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 825)), var_resultingStateNameIndex, enumerator_32113.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 827)), enumerator_32113.current_mMessageKind (HERE), enumerator_32113.current_mTransitionMessage (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 829))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 821)) ;
      enumerator_32113.gotoNextObject () ;
    }
    const enumGalgasBool test_36 = GALGAS_bool (kIsEqual, var_forgottenAssociations.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 832)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_36) {
      GALGAS_stringset var_forgottenCombinaisons = var_neededCombinaisons.substract_operation (var_definedCombinaisons, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 833)) ;
      const enumGalgasBool test_37 = GALGAS_bool (kIsStrictSup, var_forgottenCombinaisons.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 834)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
      if (kBoolTrue == test_37) {
        GALGAS_string var_s = GALGAS_string::makeEmptyString () ;
        cEnumerator_stringset enumerator_34434 (var_forgottenCombinaisons, kEnumeration_up) ;
        while (enumerator_34434.hasCurrentObject ()) {
          var_s.dotAssign_operation (GALGAS_string ("\n"
            "  - ").operator_concat (enumerator_34434.current_key (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 837))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 837)) ;
          enumerator_34434.gotoNextObject () ;
        }
        inCompiler->emitSemanticError (inCompiler->here (), var_forgottenCombinaisons.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 839)).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 839)).operator_concat (GALGAS_string (" combinaisons are forgotten:")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 839)).operator_concat (var_s  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 839))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 839)) ;
      }
    }
    var_mapOverrideList.addAssign_operation (enumerator_29645.current_mOverrideBlockName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 843)), var_branchBehaviourSortedListForMapOverride_31_, var_branchBehaviourSortedListForMapOverride_32_  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 842)) ;
    enumerator_29645.gotoNextObject () ;
  }
  GALGAS_typedAttributeList var_typedAttributeList = GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 849)) ;
  GALGAS_attributeIndexMap var_attributeMap = GALGAS_attributeIndexMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 850)) ;
  cEnumerator_attributeInCollectionListAST enumerator_34945 (object->mAttribute_mAttributeList, kEnumeration_up) ;
  while (enumerator_34945.hasCurrentObject ()) {
    GALGAS_unifiedTypeMapProxy var_t = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_34945.current_mAttributeTypeName (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 852)) ;
    GALGAS_bool var_hasSetter = GALGAS_bool (true) ;
    GALGAS_bool var_hasGetter = GALGAS_bool (true) ;
    var_typedAttributeList.addAssign_operation (var_t, enumerator_34945.current_mAttributeName (HERE), var_hasSetter, var_hasGetter  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 855)) ;
    {
    var_attributeMap.modifier_insertKey (enumerator_34945.current_mAttributeName (HERE), var_t, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 861)) ;
    }
    enumerator_34945.gotoNextObject () ;
  }
  GALGAS_insertMethodMap var_insertMethodMap = GALGAS_insertMethodMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 864)) ;
  cEnumerator_insertMethodListAST enumerator_35367 (object->mAttribute_mInsertMethodList, kEnumeration_up) ;
  while (enumerator_35367.hasCurrentObject ()) {
    {
    var_insertMethodMap.modifier_insertKey (enumerator_35367.current_mInsertMethodName (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 866)) ;
    }
    cEnumerator_stringlist enumerator_35560 (enumerator_35367.current_mErrorMessage (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 868)).reader_componentsSeparatedByString (GALGAS_string ("%%") COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 868)), kEnumeration_up) ;
    while (enumerator_35560.hasCurrentObject ()) {
      GALGAS_stringlist var_explodedArray = enumerator_35560.current_mValue (HERE).reader_componentsSeparatedByString (GALGAS_string ("%") COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 869)) ;
      {
      GALGAS_string joker_35676_0 ; // Joker input parameter
      var_explodedArray.modifier_popFirst (joker_35676_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 870)) ;
      }
      cEnumerator_stringlist enumerator_35708 (var_explodedArray, kEnumeration_up) ;
      while (enumerator_35708.hasCurrentObject ()) {
        const enumGalgasBool test_38 = GALGAS_bool (kIsStrictSup, enumerator_35708.current_mValue (HERE).reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 872)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
        if (kBoolTrue == test_38) {
          GALGAS_char var_c = enumerator_35708.current_mValue (HERE).reader_characterAtIndex (GALGAS_uint ((uint32_t) 0U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 873)) ;
          const enumGalgasBool test_39 = GALGAS_bool (kIsNotEqual, var_c.objectCompare (GALGAS_char (TO_UNICODE (75)))).operator_and (GALGAS_bool (kIsNotEqual, var_c.objectCompare (GALGAS_char (TO_UNICODE (76)))) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 874)).boolEnum () ;
          if (kBoolTrue == test_39) {
            GALGAS_location location_40 (enumerator_35367.current_mErrorMessage (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_40, GALGAS_string ("only '%K', '%L' and '%%' escape sequences are allowed in an insert error message")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 875)) ;
          }
        }
        enumerator_35708.gotoNextObject () ;
      }
      enumerator_35560.gotoNextObject () ;
    }
    cEnumerator_stringlist enumerator_36187 (enumerator_35367.current_mShadowErrorMessage (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 881)).reader_componentsSeparatedByString (GALGAS_string ("%%") COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 881)), kEnumeration_up) ;
    while (enumerator_36187.hasCurrentObject ()) {
      GALGAS_stringlist var_explodedArray = enumerator_36187.current_mValue (HERE).reader_componentsSeparatedByString (GALGAS_string ("%") COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 882)) ;
      {
      GALGAS_string joker_36303_0 ; // Joker input parameter
      var_explodedArray.modifier_popFirst (joker_36303_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 883)) ;
      }
      cEnumerator_stringlist enumerator_36335 (var_explodedArray, kEnumeration_up) ;
      while (enumerator_36335.hasCurrentObject ()) {
        const enumGalgasBool test_41 = GALGAS_bool (kIsStrictSup, enumerator_36335.current_mValue (HERE).reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 885)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
        if (kBoolTrue == test_41) {
          GALGAS_char var_c = enumerator_36335.current_mValue (HERE).reader_characterAtIndex (GALGAS_uint ((uint32_t) 0U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 886)) ;
          const enumGalgasBool test_42 = GALGAS_bool (kIsNotEqual, var_c.objectCompare (GALGAS_char (TO_UNICODE (75)))).operator_and (GALGAS_bool (kIsNotEqual, var_c.objectCompare (GALGAS_char (TO_UNICODE (76)))) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 887)).boolEnum () ;
          if (kBoolTrue == test_42) {
            GALGAS_location location_43 (enumerator_35367.current_mErrorMessage (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_43, GALGAS_string ("only '%K', '%L' and '%%' escape sequences are allowed in a shadow error message")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 888)) ;
          }
        }
        enumerator_36335.gotoNextObject () ;
      }
      enumerator_36187.gotoNextObject () ;
    }
    enumerator_35367.gotoNextObject () ;
  }
  GALGAS_searchMethodMap var_searchMethodMap = GALGAS_searchMethodMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 895)) ;
  cEnumerator_mapSearchMethodListAST enumerator_36783 (object->mAttribute_mSearchMethodList, kEnumeration_up) ;
  while (enumerator_36783.hasCurrentObject ()) {
    const enumGalgasBool test_44 = GALGAS_bool (kIsEqual, object->mAttribute_mMapStateList.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 897)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_44) {
      {
      var_searchMethodMap.modifier_insertKey (enumerator_36783.current_mSearchMethodName (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 898)) ;
      }
    }else if (kBoolFalse == test_44) {
      {
      var_searchMethodMap.modifier_insertKey (enumerator_36783.current_mSearchMethodName (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 900)) ;
      }
    }
    cEnumerator_stringlist enumerator_37097 (enumerator_36783.current_mErrorMessage (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 903)).reader_componentsSeparatedByString (GALGAS_string ("%%") COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 903)), kEnumeration_up) ;
    while (enumerator_37097.hasCurrentObject ()) {
      GALGAS_stringlist var_explodedArray = enumerator_37097.current_mValue (HERE).reader_componentsSeparatedByString (GALGAS_string ("%") COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 904)) ;
      {
      GALGAS_string joker_37213_0 ; // Joker input parameter
      var_explodedArray.modifier_popFirst (joker_37213_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 905)) ;
      }
      cEnumerator_stringlist enumerator_37245 (var_explodedArray, kEnumeration_up) ;
      while (enumerator_37245.hasCurrentObject ()) {
        const enumGalgasBool test_45 = GALGAS_bool (kIsStrictSup, enumerator_37245.current_mValue (HERE).reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 907)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
        if (kBoolTrue == test_45) {
          GALGAS_char var_c = enumerator_37245.current_mValue (HERE).reader_characterAtIndex (GALGAS_uint ((uint32_t) 0U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 908)) ;
          const enumGalgasBool test_46 = GALGAS_bool (kIsNotEqual, var_c.objectCompare (GALGAS_char (TO_UNICODE (75)))).boolEnum () ;
          if (kBoolTrue == test_46) {
            GALGAS_location location_47 (enumerator_36783.current_mErrorMessage (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_47, GALGAS_string ("only '%K' and '%%' escape sequences are allowed in a search error message")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 910)) ;
          }
        }
        enumerator_37245.gotoNextObject () ;
      }
      enumerator_37097.gotoNextObject () ;
    }
    enumerator_36783.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("unique map ").operator_concat (object->mAttribute_mMapTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 927))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 927)), GALGAS_uniqueMapTypeForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mMapTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 929)), object->mAttribute_mMapTypeName, var_typedAttributeList, object->mAttribute_mInsertMethodList, object->mAttribute_mSearchMethodList, var_mapAutomatonStateMap, var_mapAutomatonActionMap, var_mapStateSortedList, var_mapOverrideList  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 928)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 926)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_uniqueMapDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_uniqueMapDeclarationAST.mSlotID,
                                        categoryMethod_uniqueMapDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_uniqueMapDeclarationAST_semanticAnalysis (defineCategoryMethod_uniqueMapDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//    Overriding category method '@mapProxyDeclarationAST semanticAnalysis'    *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_mapProxyDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                    const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                    const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                    GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_mapProxyDeclarationAST * object = (const cPtr_mapProxyDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_mapProxyDeclarationAST) ;
  GALGAS_typedAttributeList var_listTypeAttributeList ;
  GALGAS_mapSearchMethodListAST var_searchMethodList ;
  GALGAS_bool joker_38815_7 ; // Joker input parameter
  GALGAS_bool joker_38815_6 ; // Joker input parameter
  GALGAS_unifiedTypeMapProxy joker_38815_5 ; // Joker input parameter
  GALGAS_typeKindEnum joker_38815_4 ; // Joker input parameter
  GALGAS_bool joker_38815_3 ; // Joker input parameter
  GALGAS_typedAttributeList joker_38815_2 ; // Joker input parameter
  GALGAS_attributeMap joker_38815_1 ; // Joker input parameter
  GALGAS_constructorMap joker_38871_11 ; // Joker input parameter
  GALGAS_readerMap joker_38871_10 ; // Joker input parameter
  GALGAS_modifierMap joker_38871_9 ; // Joker input parameter
  GALGAS_instanceMethodMap joker_38871_8 ; // Joker input parameter
  GALGAS_classMethodMap joker_38871_7 ; // Joker input parameter
  GALGAS_enumerationDescriptorList joker_38871_6 ; // Joker input parameter
  GALGAS_stringlist joker_38871_5 ; // Joker input parameter
  GALGAS_uint joker_38871_4 ; // Joker input parameter
  GALGAS_functionSignature joker_38871_3 ; // Joker input parameter
  GALGAS_stringset joker_38871_2 ; // Joker input parameter
  GALGAS_lstringlist joker_38871_1 ; // Joker input parameter
  GALGAS_mapSearchMethodListAST joker_38927_6 ; // Joker input parameter
  GALGAS_bool joker_38927_5 ; // Joker input parameter
  GALGAS_unifiedTypeMapProxy joker_38927_4 ; // Joker input parameter
  GALGAS_string joker_38927_3 ; // Joker input parameter
  GALGAS_string joker_38927_2 ; // Joker input parameter
  GALGAS_headerKind joker_38927_1 ; // Joker input parameter
  constinArgument_inSemanticContext.mAttribute_mTypeMap.method_searchKey (object->mAttribute_mAssociatedMapTypeName, joker_38815_7, joker_38815_6, joker_38815_5, joker_38815_4, joker_38815_3, joker_38815_2, joker_38815_1, var_listTypeAttributeList, joker_38871_11, joker_38871_10, joker_38871_9, joker_38871_8, joker_38871_7, joker_38871_6, joker_38871_5, joker_38871_4, joker_38871_3, joker_38871_2, joker_38871_1, var_searchMethodList, joker_38927_6, joker_38927_5, joker_38927_4, joker_38927_3, joker_38927_2, joker_38927_1, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 952)) ;
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("map proxy ").operator_concat (object->mAttribute_mMapProxyTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 962))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 962)), GALGAS_mapProxyTypeForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mMapProxyTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 964)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mAssociatedMapTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 965)), var_listTypeAttributeList, var_searchMethodList  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 963)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 961)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_mapProxyDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_mapProxyDeclarationAST.mSlotID,
                                        categoryMethod_mapProxyDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_mapProxyDeclarationAST_semanticAnalysis (defineCategoryMethod_mapProxyDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
// Overriding category method '@externFunctionDeclarationAST semanticAnalysis' *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_externFunctionDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                          const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                          const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                          GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_externFunctionDeclarationAST * object = (const cPtr_externFunctionDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_externFunctionDeclarationAST) ;
  GALGAS_formalInputParameterListForGeneration var_formalArgumentList = GALGAS_formalInputParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1089)) ;
  cEnumerator_formalInputParameterListAST enumerator_44705 (object->mAttribute_mFormalArgumentList, kEnumeration_up) ;
  while (enumerator_44705.hasCurrentObject ()) {
    var_formalArgumentList.addAssign_operation (enumerator_44705.current_mFormalSelector (HERE), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_44705.current_mFormalArgumentTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1093)), enumerator_44705.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1094)), enumerator_44705.current_mFormalArgumentName (HERE), enumerator_44705.current_mIsConstant (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1091)) ;
    enumerator_44705.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("extern func ").operator_concat (object->mAttribute_mFunctionName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1100))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1100)), GALGAS_functionPrototypeDeclarationForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("func-").operator_concat (object->mAttribute_mFunctionName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1103))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1103)), object->mAttribute_mFunctionName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1104)), var_formalArgumentList, GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mResultTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1106))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1101)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1099)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_externFunctionDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_externFunctionDeclarationAST.mSlotID,
                                        categoryMethod_externFunctionDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_externFunctionDeclarationAST_semanticAnalysis (defineCategoryMethod_externFunctionDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
// Overriding category method '@externRoutineDeclarationAST semanticAnalysis'  *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_externRoutineDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                         const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                         const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                         GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_externRoutineDeclarationAST * object = (const cPtr_externRoutineDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_externRoutineDeclarationAST) ;
  GALGAS_formalParameterListForGeneration var_formalArgumentList = GALGAS_formalParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1119)) ;
  cEnumerator_formalParameterListAST enumerator_45746 (object->mAttribute_mFormalArgumentList, kEnumeration_up) ;
  while (enumerator_45746.hasCurrentObject ()) {
    var_formalArgumentList.addAssign_operation (enumerator_45746.current_mFormalSelector (HERE), enumerator_45746.current_mFormalArgumentPassingMode (HERE), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_45746.current_mFormalArgumentTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1124)), enumerator_45746.current_mFormalArgumentName (HERE), enumerator_45746.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1126))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1121)) ;
    enumerator_45746.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("extern proc ").operator_concat (object->mAttribute_mRoutineName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1130))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1130)), GALGAS_routinePrototypeDeclarationForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("proc-").operator_concat (object->mAttribute_mRoutineName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1133))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1133)), object->mAttribute_mRoutineName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1134)), var_formalArgumentList  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1131)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1129)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_externRoutineDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_externRoutineDeclarationAST.mSlotID,
                                        categoryMethod_externRoutineDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_externRoutineDeclarationAST_semanticAnalysis (defineCategoryMethod_externRoutineDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//    Overriding category method '@routineDeclarationAST semanticAnalysis'     *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_routineDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                   const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                   const GALGAS_predefinedTypes constinArgument_inPredefinedTypes,
                                                                   GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_routineDeclarationAST * object = (const cPtr_routineDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_routineDeclarationAST) ;
  GALGAS_formalParameterListForGeneration var_formalArgumentList = GALGAS_formalParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1149)) ;
  GALGAS_semanticInstructionListForGeneration var_instructionList ;
  GALGAS_analysisContext var_analysisContext = GALGAS_analysisContext::constructor_new (constinArgument_inSemanticContext, constinArgument_inPredefinedTypes, GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 1154)), GALGAS_string::makeEmptyString (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 1156))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1151)) ;
  {
  routine_analyzeRoutineBody (var_analysisContext, object->mAttribute_mFormalArgumentList, GALGAS_localConstantList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1161)), GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1162)), GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1163)), GALGAS_string::makeEmptyString (), object->mAttribute_mRoutineInstructionList, object->mAttribute_mEndOfRoutineInstructionList, var_instructionList, var_formalArgumentList, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1158)) ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("proc ").operator_concat (object->mAttribute_mRoutineName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1172))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1172)), GALGAS_routineImplementationForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("proc-").operator_concat (object->mAttribute_mRoutineName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1175))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1175)), object->mAttribute_mRoutineName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1176)), var_formalArgumentList, var_instructionList  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1173)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1171)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_routineDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_routineDeclarationAST.mSlotID,
                                        categoryMethod_routineDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_routineDeclarationAST_semanticAnalysis (defineCategoryMethod_routineDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//     Overriding category method '@classDeclarationAST semanticAnalysis'      *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_classDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                 const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                 const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                 GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_classDeclarationAST * object = (const cPtr_classDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_classDeclarationAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mClassTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1192)) ;
  GALGAS_unifiedTypeMapProxy var_superClassProxy ;
  GALGAS_typedAttributeList var_allAttributeList ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, object->mAttribute_mSuperClassName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1198)).objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_0) {
    var_superClassProxy = GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 1199)) ;
    var_allAttributeList = GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1200)) ;
    GALGAS_bool var_generatedInSeparateFileFeature = GALGAS_bool (false) ;
    const enumGalgasBool test_1 = GALGAS_bool (kIsStrictSup, object->mAttribute_mClassFeatureList.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 1202)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_1) {
      cEnumerator_lstringlist enumerator_48498 (object->mAttribute_mClassFeatureList, kEnumeration_up) ;
      while (enumerator_48498.hasCurrentObject ()) {
        const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, enumerator_48498.current_mValue (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1204)).objectCompare (GALGAS_string ("generatedInSeparateFile"))).boolEnum () ;
        if (kBoolTrue == test_2) {
          const enumGalgasBool test_3 = var_generatedInSeparateFileFeature.boolEnum () ;
          if (kBoolTrue == test_3) {
            GALGAS_location location_4 (enumerator_48498.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_4, GALGAS_string ("the 'generatedInSeparateFile' is already named")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1206)) ;
          }
          var_generatedInSeparateFileFeature = GALGAS_bool (true) ;
        }else if (kBoolFalse == test_2) {
          GALGAS_location location_5 (enumerator_48498.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_5, GALGAS_string ("only the 'generatedInSeparateFile' feature is allowed here")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1210)) ;
        }
        enumerator_48498.gotoNextObject () ;
      }
    }
  }else if (kBoolFalse == test_0) {
    var_superClassProxy = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mSuperClassName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1215)) ;
    var_allAttributeList = var_superClassProxy.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1216)) ;
    const enumGalgasBool test_6 = GALGAS_bool (kIsStrictSup, object->mAttribute_mClassFeatureList.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 1217)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_6) {
      cEnumerator_lstringlist enumerator_49159 (object->mAttribute_mClassFeatureList, kEnumeration_up) ;
      while (enumerator_49159.hasCurrentObject ()) {
        GALGAS_location location_7 (enumerator_49159.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_7, GALGAS_string ("a class that has a super class does not accept any feature")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1219)) ;
        enumerator_49159.gotoNextObject () ;
      }
    }
  }
  GALGAS_typedAttributeList var_typedAttributeList = GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1224)) ;
  GALGAS_attributeIndexMap var_attributeMap = GALGAS_attributeIndexMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 1225)) ;
  cEnumerator_attributeInCollectionListAST enumerator_49442 (object->mAttribute_mAttributeList, kEnumeration_up) ;
  while (enumerator_49442.hasCurrentObject ()) {
    GALGAS_unifiedTypeMapProxy var_t = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_49442.current_mAttributeTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1227)) ;
    GALGAS_bool var_hasSetter = GALGAS_bool (false) ;
    GALGAS_bool var_hasGetter = GALGAS_bool (true) ;
    cEnumerator_lstringlist enumerator_49630 (enumerator_49442.current_mFeatureList (HERE), kEnumeration_up) ;
    while (enumerator_49630.hasCurrentObject ()) {
      const enumGalgasBool test_8 = GALGAS_bool (kIsEqual, enumerator_49630.current_mValue (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1231)).objectCompare (GALGAS_string ("setter"))).boolEnum () ;
      if (kBoolTrue == test_8) {
        const enumGalgasBool test_9 = var_hasSetter.boolEnum () ;
        if (kBoolTrue == test_9) {
          GALGAS_location location_10 (enumerator_49630.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_10, GALGAS_string ("the 'setter' feature is already named")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1233)) ;
        }
        var_hasSetter = GALGAS_bool (true) ;
      }else if (kBoolFalse == test_8) {
        const enumGalgasBool test_11 = GALGAS_bool (kIsEqual, enumerator_49630.current_mValue (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1236)).objectCompare (GALGAS_string ("nogetter"))).boolEnum () ;
        if (kBoolTrue == test_11) {
          const enumGalgasBool test_12 = var_hasGetter.operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1237)).boolEnum () ;
          if (kBoolTrue == test_12) {
            GALGAS_location location_13 (enumerator_49630.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_13, GALGAS_string ("the 'nogetter' feature is already named")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1238)) ;
          }
          var_hasGetter = GALGAS_bool (false) ;
        }else if (kBoolFalse == test_11) {
          GALGAS_location location_14 (enumerator_49630.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_14, GALGAS_string ("only the 'setter' or 'nogetter' are allowed here")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1242)) ;
        }
      }
      enumerator_49630.gotoNextObject () ;
    }
    var_typedAttributeList.addAssign_operation (var_t, enumerator_49442.current_mAttributeName (HERE), var_hasSetter, var_hasGetter  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1245)) ;
    var_allAttributeList.addAssign_operation (var_t, enumerator_49442.current_mAttributeName (HERE), var_hasSetter, var_hasGetter  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1251)) ;
    {
    var_attributeMap.modifier_insertKey (enumerator_49442.current_mAttributeName (HERE), var_t, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1257)) ;
    }
    enumerator_49442.gotoNextObject () ;
  }
  GALGAS_string var_sortString = var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1260)) ;
  GALGAS_unifiedTypeMapProxy var_t = var_selfType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1261)) ;
  if (constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 1262)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1262)).isValid ()) {
    uint32_t variant_50547 = constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 1262)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1262)).uintValue () ;
    bool loop_50547 = true ;
    while (loop_50547) {
      loop_50547 = var_t.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 1263)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1263)).isValid () ;
      if (loop_50547) {
        loop_50547 = var_t.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 1263)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1263)).boolValue () ;
      }
      if (loop_50547 && (0 == variant_50547)) {
        loop_50547 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticAnalysis.gSemantics", 1262)) ;
      }
      if (loop_50547) {
        variant_50547 -- ;
        var_sortString = var_t.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1264)).operator_concat (GALGAS_string (".")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1264)).operator_concat (var_sortString  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1264)) ;
        var_t = var_t.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1265)) ;
      }
    }
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("class ").operator_concat (object->mAttribute_mClassTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1269))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1269)), GALGAS_classTypeForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mClassTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1271)), object->mAttribute_mIsAbstract, object->mAttribute_mClassTypeName, var_superClassProxy, var_allAttributeList, var_typedAttributeList, var_selfType.reader_mGenerateHeaderInSeparateFile (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1277))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1270)), var_sortString  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1268)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_classDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_classDeclarationAST.mSlotID,
                                        categoryMethod_classDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_classDeclarationAST_semanticAnalysis (defineCategoryMethod_classDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//    Overriding category method '@functionDeclarationAST semanticAnalysis'    *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_functionDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                    const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                    const GALGAS_predefinedTypes constinArgument_inPredefinedTypes,
                                                                    GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_functionDeclarationAST * object = (const cPtr_functionDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_functionDeclarationAST) ;
  GALGAS_semanticInstructionListForGeneration var_semanticInstructionListForGeneration ;
  GALGAS_formalInputParameterListForGeneration var_formalInputParameterList ;
  GALGAS_unifiedTypeMapProxy var_returnType ;
  GALGAS_string var_resultVariableCppName ;
  GALGAS_analysisContext var_analysisContext = GALGAS_analysisContext::constructor_new (constinArgument_inSemanticContext, constinArgument_inPredefinedTypes, GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 1375)), GALGAS_string::makeEmptyString (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 1377))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1372)) ;
  {
  routine_analyzeFunctionBody (var_analysisContext, object->mAttribute_mFormalArgumentList, GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1382)), GALGAS_string::makeEmptyString (), object->mAttribute_mFunctionInstructionList, object->mAttribute_mResultVariableName, object->mAttribute_mResultTypeName, object->mAttribute_mEndOfFunctionInstructionList, var_formalInputParameterList, var_returnType, var_resultVariableCppName, var_semanticInstructionListForGeneration, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1379)) ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("function ").operator_concat (object->mAttribute_mFunctionName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1395))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1395)), GALGAS_functionImplementationForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("func-").operator_concat (object->mAttribute_mFunctionName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1398))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1398)), object->mAttribute_mFunctionName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1399)), var_formalInputParameterList, var_returnType, var_resultVariableCppName, var_semanticInstructionListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1396)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1394)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_functionDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_functionDeclarationAST.mSlotID,
                                        categoryMethod_functionDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_functionDeclarationAST_semanticAnalysis (defineCategoryMethod_functionDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//  Overriding category method '@onceFunctionDeclarationAST semanticAnalysis'  *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_onceFunctionDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                        const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                        const GALGAS_predefinedTypes constinArgument_inPredefinedTypes,
                                                                        GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_onceFunctionDeclarationAST * object = (const cPtr_onceFunctionDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_onceFunctionDeclarationAST) ;
  GALGAS_semanticInstructionListForGeneration var_semanticInstructionListForGeneration ;
  GALGAS_unifiedTypeMapProxy var_returnType ;
  GALGAS_string var_resultVariableCppName ;
  GALGAS_analysisContext var_analysisContext = GALGAS_analysisContext::constructor_new (constinArgument_inSemanticContext, constinArgument_inPredefinedTypes, GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 1423)), GALGAS_string::makeEmptyString (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 1425))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1420)) ;
  {
  GALGAS_formalInputParameterListForGeneration joker_56734_0 ; // Joker input parameter
  routine_analyzeFunctionBody (var_analysisContext, GALGAS_formalInputParameterListAST::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1429)), GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1430)), GALGAS_string::makeEmptyString (), object->mAttribute_mFunctionInstructionList, object->mAttribute_mResultVariableName, object->mAttribute_mResultTypeName, object->mAttribute_mEndOfFunctionInstructionList, joker_56734_0, var_returnType, var_resultVariableCppName, var_semanticInstructionListForGeneration, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1427)) ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("once function ").operator_concat (object->mAttribute_mFunctionName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1443))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1443)), GALGAS_onceFunctionDeclarationForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("func-").operator_concat (object->mAttribute_mFunctionName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1446))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1446)), object->mAttribute_mFunctionName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1447)), var_returnType, var_resultVariableCppName, var_semanticInstructionListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1444)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1442)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_onceFunctionDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_onceFunctionDeclarationAST.mSlotID,
                                        categoryMethod_onceFunctionDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_onceFunctionDeclarationAST_semanticAnalysis (defineCategoryMethod_onceFunctionDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//  Overriding category method '@filewrapperDeclarationAST semanticAnalysis'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_filewrapperDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                       const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                       const GALGAS_predefinedTypes constinArgument_inPredefinedTypes,
                                                                       GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_filewrapperDeclarationAST * object = (const cPtr_filewrapperDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_filewrapperDeclarationAST) ;
  GALGAS_wrapperFileMap var_wrapperFileMap ;
  GALGAS_wrapperDirectoryMap var_wrapperDirectoryMap ;
  GALGAS_lstring joker_57906_0 ; // Joker input parameter
  GALGAS_lstringlist joker_57913_0 ; // Joker input parameter
  GALGAS_filewrapperTemplateMap joker_58004_2 ; // Joker input parameter
  GALGAS_bool joker_58004_1 ; // Joker input parameter
  constinArgument_inSemanticContext.mAttribute_mFilewrapperMap.method_searchKey (object->mAttribute_mFilewrapperName, joker_57906_0, joker_57913_0, var_wrapperFileMap, var_wrapperDirectoryMap, joker_58004_2, joker_58004_1, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1468)) ;
  GALGAS_string var_absoluteSourcePath ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, object->mAttribute_mFilewrapperPath.mAttribute_string.reader_firstCharacterOrNul (SOURCE_FILE ("semanticAnalysis.gSemantics", 1478)).objectCompare (GALGAS_char (TO_UNICODE (47)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    var_absoluteSourcePath = object->mAttribute_mFilewrapperPath.mAttribute_string ;
  }else if (kBoolFalse == test_0) {
    var_absoluteSourcePath = object->mAttribute_mSourceFileAbsolutePath.reader_stringByDeletingLastPathComponent (SOURCE_FILE ("semanticAnalysis.gSemantics", 1481)).operator_concat (GALGAS_string ("/")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1481)).operator_concat (object->mAttribute_mFilewrapperPath.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1481))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1481)) ;
  }
  const enumGalgasBool test_1 = var_absoluteSourcePath.reader_directoryExists (SOURCE_FILE ("semanticAnalysis.gSemantics", 1483)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1483)).boolEnum () ;
  if (kBoolTrue == test_1) {
    GALGAS_location location_2 (object->mAttribute_mFilewrapperPath.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_2, GALGAS_string ("The '").operator_concat (var_absoluteSourcePath  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1484)).operator_concat (GALGAS_string ("' directory does not exist")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1484))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1484)) ;
  }else if (kBoolFalse == test_1) {
    GALGAS_filewrapperTemplateListForGeneration var_filewrapperTemplateListForGeneration = GALGAS_filewrapperTemplateListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1487)) ;
    cEnumerator_filewrapperTemplateListAST enumerator_58641 (object->mAttribute_mFilewrapperTemplateList, kEnumeration_up) ;
    while (enumerator_58641.hasCurrentObject ()) {
      const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, enumerator_58641.current_mFilewrapperTemplatePath (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1489)).reader_firstCharacterOrNul (SOURCE_FILE ("semanticAnalysis.gSemantics", 1489)).objectCompare (GALGAS_char (TO_UNICODE (47)))).boolEnum () ;
      if (kBoolTrue == test_3) {
        GALGAS_location location_4 (enumerator_58641.current_mFilewrapperTemplatePath (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_4, GALGAS_string ("the path should not begin with a '/'; it is relative to filewrapper path '").operator_concat (var_absoluteSourcePath  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1490)).operator_concat (GALGAS_string ("'")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1490))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1490)) ;
      }
      GALGAS_string var_absoluteTemplatePath = var_absoluteSourcePath.operator_concat (GALGAS_string ("/")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1492)).operator_concat (enumerator_58641.current_mFilewrapperTemplatePath (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1492))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1492)) ;
      GALGAS_templateInstructionListAST var_resultingInstructionList ;
      var_resultingInstructionList.drop () ;
      cGrammar_templateGrammar::_performSourceFileParsing_ (inCompiler, GALGAS_lstring::constructor_new (var_absoluteTemplatePath, enumerator_58641.current_mFilewrapperTemplatePath (HERE).reader_location (SOURCE_FILE ("semanticAnalysis.gSemantics", 1495))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1495)), var_resultingInstructionList  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1495)) ;
      GALGAS_templateVariableMap var_templateVariableMap = GALGAS_templateVariableMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 1497)) ;
      GALGAS_formalInputParameterListForGeneration var_filewrapperTemplateFormalInputParameters = GALGAS_formalInputParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1498)) ;
      cEnumerator_formalTemplateInputParameterListAST enumerator_59454 (enumerator_58641.current_mFilewrapperTemplateFormalInputParameters (HERE), kEnumeration_up) ;
      while (enumerator_59454.hasCurrentObject ()) {
        GALGAS_unifiedTypeMapProxy var_type = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_59454.current_mFormalArgumentTypeName (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1500)) ;
        GALGAS_string var_cppVarName = GALGAS_string ("in_").operator_concat (enumerator_59454.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1501)).reader_identifierRepresentation (SOURCE_FILE ("semanticAnalysis.gSemantics", 1501))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1501)) ;
        {
        var_templateVariableMap.modifier_insertKey (enumerator_59454.current_mFormalArgumentName (HERE), var_type, var_cppVarName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1502)) ;
        }
        var_filewrapperTemplateFormalInputParameters.addAssign_operation (enumerator_59454.current_mFormalTemplateSelector (HERE), var_type, var_cppVarName, enumerator_59454.current_mFormalArgumentName (HERE), GALGAS_bool (true)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1503)) ;
        enumerator_59454.gotoNextObject () ;
      }
      GALGAS_templateInstructionListForGeneration var_templateInstructionListForGeneration = GALGAS_templateInstructionListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1506)) ;
      GALGAS_templateAnalysisContext var_templateAnalysisContext = GALGAS_templateAnalysisContext::constructor_new (constinArgument_inSemanticContext, constinArgument_inPredefinedTypes, var_templateVariableMap  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1507)) ;
      {
      routine_templateInstructionListAnalysis (var_templateAnalysisContext, var_resultingInstructionList, var_templateInstructionListForGeneration, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1512)) ;
      }
      var_filewrapperTemplateListForGeneration.addAssign_operation (enumerator_58641.current_mFilewrapperTemplateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1515)), var_filewrapperTemplateFormalInputParameters, var_templateInstructionListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1514)) ;
      enumerator_58641.gotoNextObject () ;
    }
    ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("filewrapper ").operator_concat (object->mAttribute_mFilewrapperName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1522))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1522)), GALGAS_filewrapperDeclarationForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("filewrapper-").operator_concat (object->mAttribute_mFilewrapperName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1525))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1525)), object->mAttribute_mFilewrapperName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1526)), object->mAttribute_mFilewrapperPath.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1527)), var_wrapperFileMap, var_wrapperDirectoryMap, var_filewrapperTemplateListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1523)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1521)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_filewrapperDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_filewrapperDeclarationAST.mSlotID,
                                        categoryMethod_filewrapperDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_filewrapperDeclarationAST_semanticAnalysis (defineCategoryMethod_filewrapperDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//  Overriding category method '@abstractCategoryMethodAST semanticAnalysis'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_abstractCategoryMethodAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                       const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                       const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                       GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_abstractCategoryMethodAST * object = (const cPtr_abstractCategoryMethodAST *) inObject ;
  macroValidSharedObject (object, cPtr_abstractCategoryMethodAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1545)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1547)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1547)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mAbstractCategoryMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("cannot declare a category method: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1548))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1548)).operator_concat (GALGAS_string ("' is not a class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1548))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1548)) ;
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_2 = var_selfType.reader_mIsConcrete (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1549)).boolEnum () ;
    if (kBoolTrue == test_2) {
      GALGAS_location location_3 (object->mAttribute_mAbstractCategoryMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_3, GALGAS_string ("cannot declare an abstract category method: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1550))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1550)).operator_concat (GALGAS_string ("' is not an abstract class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1550))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1550)) ;
    }
  }
  GALGAS_formalParameterListForGeneration var_formalParameterListForGeneration = GALGAS_formalParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1553)) ;
  cEnumerator_formalParameterListAST enumerator_62043 (object->mAttribute_mAbstractCategoryMethodFormalParameterList, kEnumeration_up) ;
  while (enumerator_62043.hasCurrentObject ()) {
    var_formalParameterListForGeneration.addAssign_operation (enumerator_62043.current_mFormalSelector (HERE), enumerator_62043.current_mFormalArgumentPassingMode (HERE), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_62043.current_mFormalArgumentTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1558)), enumerator_62043.current_mFormalArgumentName (HERE), enumerator_62043.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1560))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1555)) ;
    enumerator_62043.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("abstract extension method ").operator_concat (object->mAttribute_mAbstractCategoryMethodName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1565))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1565)), GALGAS_abstractCategoryMethodForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("method-").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1568))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1568)).operator_concat (GALGAS_string ("-")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1568)).operator_concat (object->mAttribute_mAbstractCategoryMethodName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1568))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1568)), var_selfType, object->mAttribute_mAbstractCategoryMethodName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1570)), var_formalParameterListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1566)), GALGAS_string ("~")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1564)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_abstractCategoryMethodAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_abstractCategoryMethodAST.mSlotID,
                                        categoryMethod_abstractCategoryMethodAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_abstractCategoryMethodAST_semanticAnalysis (defineCategoryMethod_abstractCategoryMethodAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//      Overriding category method '@categoryMethodAST semanticAnalysis'       *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_categoryMethodAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                               const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                               const GALGAS_predefinedTypes constinArgument_inPredefinedTypes,
                                                               GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                               C_Compiler * inCompiler
                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_categoryMethodAST * object = (const cPtr_categoryMethodAST *) inObject ;
  macroValidSharedObject (object, cPtr_categoryMethodAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1585)) ;
  GALGAS_string var_selfObjectName ;
  GALGAS_string var_selfObjectAccessor ;
  GALGAS_bool var_implementedAsFunction ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1590)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1590)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    var_selfObjectName = GALGAS_string ("object") ;
    var_selfObjectAccessor = GALGAS_string ("object->") ;
    var_implementedAsFunction = GALGAS_bool (false) ;
  }else if (kBoolFalse == test_0) {
    var_selfObjectName = GALGAS_string ("inObject") ;
    var_selfObjectAccessor = GALGAS_string ("inObject.") ;
    var_implementedAsFunction = GALGAS_bool (true) ;
  }
  GALGAS_formalParameterListForGeneration var_formalParameterListForGeneration = GALGAS_formalParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1600)) ;
  GALGAS_semanticInstructionListForGeneration var_semanticInstructionListForGeneration ;
  GALGAS_analysisContext var_analysisContext = GALGAS_analysisContext::constructor_new (constinArgument_inSemanticContext, constinArgument_inPredefinedTypes, var_selfType, var_selfObjectName, GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 1607))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1602)) ;
  {
  GALGAS_typedAttributeList temp_1 ;
  const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1613)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1613)))).operator_or (GALGAS_bool (kIsEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1613)).objectCompare (GALGAS_typeKindEnum::constructor_structType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1613)))) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1613)).boolEnum () ;
  if (kBoolTrue == test_2) {
    temp_1 = var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1614)) ;
  }else if (kBoolFalse == test_2) {
    temp_1 = GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1615)) ;
  }
  routine_analyzeRoutineBody (var_analysisContext, object->mAttribute_mCategoryMethodFormalParameterList, GALGAS_localConstantList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1612)), temp_1, GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1617)), var_selfObjectAccessor, object->mAttribute_mCategoryMethodInstructionList, object->mAttribute_mEndOfMethodLocation, var_semanticInstructionListForGeneration, var_formalParameterListForGeneration, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1609)) ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("extension method ").operator_concat (object->mAttribute_mCategoryMethodName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1626))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1626)), GALGAS_categoryMethodForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("method-").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1629))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1629)).operator_concat (GALGAS_string ("-")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1629)).operator_concat (object->mAttribute_mCategoryMethodName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1629))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1629)), var_selfType, object->mAttribute_mCategoryMethodName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1631)), var_implementedAsFunction, var_formalParameterListForGeneration, var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1634)), var_semanticInstructionListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1627)), GALGAS_string ("~")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1625)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_categoryMethodAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_categoryMethodAST.mSlotID,
                                        categoryMethod_categoryMethodAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_categoryMethodAST_semanticAnalysis (defineCategoryMethod_categoryMethodAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
// Overriding category method '@overridingCategoryMethodAST semanticAnalysis'  *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_overridingCategoryMethodAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                         const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                         const GALGAS_predefinedTypes constinArgument_inPredefinedTypes,
                                                                         GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_overridingCategoryMethodAST * object = (const cPtr_overridingCategoryMethodAST *) inObject ;
  macroValidSharedObject (object, cPtr_overridingCategoryMethodAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1649)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1651)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1651)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mOverridingCategoryMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("cannot declare a category method: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1652))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1652)).operator_concat (GALGAS_string ("' is not a class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1652))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1652)) ;
  }
  GALGAS_string var_baseTypeName = GALGAS_string::makeEmptyString () ;
  GALGAS_unifiedTypeMapProxy var_superType = var_selfType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1656)) ;
  GALGAS_formalParameterSignature var_inheritedSignature = GALGAS_formalParameterSignature::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1657)) ;
  GALGAS_location var_inheritedDeclarationLocation = inCompiler->here () ;
  if (constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 1659)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1659)).isValid ()) {
    uint32_t variant_65970 = constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 1659)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1659)).uintValue () ;
    bool loop_65970 = true ;
    while (loop_65970) {
      loop_65970 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 1660)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1660)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1660)).isValid () ;
      if (loop_65970) {
        loop_65970 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 1660)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1660)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1660)).boolValue () ;
      }
      if (loop_65970 && (0 == variant_65970)) {
        loop_65970 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticAnalysis.gSemantics", 1659)) ;
      }
      if (loop_65970) {
        variant_65970 -- ;
        const enumGalgasBool test_2 = var_superType.reader_mInstanceMethodMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1661)).reader_hasKey (object->mAttribute_mOverridingCategoryMethodName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1661)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1661)).boolEnum () ;
        if (kBoolTrue == test_2) {
          GALGAS_methodQualifier var_qualifier ;
          GALGAS_methodKind joker_66279_0 ; // Joker input parameter
          GALGAS_bool joker_66332_0 ; // Joker input parameter
          GALGAS_string joker_66346_0 ; // Joker input parameter
          var_superType.reader_mInstanceMethodMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1663)).method_searchKey (object->mAttribute_mOverridingCategoryMethodName, joker_66279_0, var_inheritedSignature, var_inheritedDeclarationLocation, joker_66332_0, var_qualifier, joker_66346_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1663)) ;
          const enumGalgasBool test_3 = GALGAS_bool (kIsInfOrEqual, var_qualifier.objectCompare (GALGAS_methodQualifier::constructor_isBasicFinal (SOURCE_FILE ("semanticAnalysis.gSemantics", 1664)))).boolEnum () ;
          if (kBoolTrue == test_3) {
            var_baseTypeName = var_superType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1665)) ;
          }
        }
        var_superType = var_superType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1668)) ;
      }
    }
  }
  const enumGalgasBool test_4 = GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_4) {
    GALGAS_location location_5 (object->mAttribute_mOverridingCategoryMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_5, GALGAS_string ("this method is not declared by a super class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1671)) ;
  }
  GALGAS_formalParameterListForGeneration var_formalParameterListForGeneration = GALGAS_formalParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1674)) ;
  GALGAS_semanticInstructionListForGeneration var_semanticInstructionListForGeneration ;
  GALGAS_analysisContext var_analysisContext = GALGAS_analysisContext::constructor_new (constinArgument_inSemanticContext, constinArgument_inPredefinedTypes, var_selfType, GALGAS_string ("object"), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 1681))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1676)) ;
  {
  GALGAS_typedAttributeList temp_6 ;
  const enumGalgasBool test_7 = GALGAS_bool (kIsEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1687)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1687)))).operator_or (GALGAS_bool (kIsEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1687)).objectCompare (GALGAS_typeKindEnum::constructor_structType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1687)))) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1687)).boolEnum () ;
  if (kBoolTrue == test_7) {
    temp_6 = var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1688)) ;
  }else if (kBoolFalse == test_7) {
    temp_6 = GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1689)) ;
  }
  routine_analyzeRoutineBody (var_analysisContext, object->mAttribute_mOverridingCategoryMethodFormalParameterList, GALGAS_localConstantList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1686)), temp_6, GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1691)), GALGAS_string ("object->"), object->mAttribute_mOverridingCategoryMethodInstructionList, object->mAttribute_mEndOfMethodLocation, var_semanticInstructionListForGeneration, var_formalParameterListForGeneration, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1683)) ;
  }
  const enumGalgasBool test_8 = GALGAS_bool (kIsNotEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_8) {
    {
    routine_checkMethodSignatures (var_formalParameterListForGeneration, object->mAttribute_mOverridingCategoryMethodName.reader_location (SOURCE_FILE ("semanticAnalysis.gSemantics", 1702)), var_inheritedSignature, var_inheritedDeclarationLocation, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1700)) ;
    }
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("override extension method ").operator_concat (object->mAttribute_mOverridingCategoryMethodName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1709))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1709)), GALGAS_overridingCategoryMethodForGeneration::constructor_new (GALGAS_bool (false), GALGAS_string ("method-").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1712))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1712)).operator_concat (GALGAS_string ("-")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1712)).operator_concat (object->mAttribute_mOverridingCategoryMethodName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1712))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1712)), var_selfType, var_baseTypeName, object->mAttribute_mOverridingCategoryMethodName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1715)), var_formalParameterListForGeneration, var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1717)), var_semanticInstructionListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1710)), GALGAS_string ("~")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1708)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_overridingCategoryMethodAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_overridingCategoryMethodAST.mSlotID,
                                        categoryMethod_overridingCategoryMethodAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_overridingCategoryMethodAST_semanticAnalysis (defineCategoryMethod_overridingCategoryMethodAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@overridingAbstractCategoryMethodAST semanticAnalysis'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_overridingAbstractCategoryMethodAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                                 const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                                 const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                                 GALGAS_semanticDeclarationSortedListForGeneration & /* ioArgument_ioSemanticDeclarationListForGeneration */,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_overridingAbstractCategoryMethodAST * object = (const cPtr_overridingAbstractCategoryMethodAST *) inObject ;
  macroValidSharedObject (object, cPtr_overridingAbstractCategoryMethodAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1732)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1734)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1734)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mOverridingCategoryMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("cannot declare a category method: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1735))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1735)).operator_concat (GALGAS_string ("' is not a class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1735))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1735)) ;
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_2 = var_selfType.reader_mIsConcrete (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1736)).boolEnum () ;
    if (kBoolTrue == test_2) {
      GALGAS_location location_3 (object->mAttribute_mOverridingCategoryMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_3, GALGAS_string ("cannot declare an abstract category method: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1737))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1737)).operator_concat (GALGAS_string ("' is not an abstract class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1737))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1737)) ;
    }
  }
  GALGAS_string var_baseTypeName = GALGAS_string::makeEmptyString () ;
  GALGAS_unifiedTypeMapProxy var_superType = var_selfType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1741)) ;
  GALGAS_formalParameterSignature var_inheritedSignature = GALGAS_formalParameterSignature::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1742)) ;
  GALGAS_location var_inheritedDeclarationLocation = inCompiler->here () ;
  if (constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 1744)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1744)).isValid ()) {
    uint32_t variant_69501 = constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 1744)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1744)).uintValue () ;
    bool loop_69501 = true ;
    while (loop_69501) {
      loop_69501 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 1745)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1745)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1745)).isValid () ;
      if (loop_69501) {
        loop_69501 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 1745)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1745)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1745)).boolValue () ;
      }
      if (loop_69501 && (0 == variant_69501)) {
        loop_69501 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticAnalysis.gSemantics", 1744)) ;
      }
      if (loop_69501) {
        variant_69501 -- ;
        const enumGalgasBool test_4 = var_superType.reader_mInstanceMethodMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1746)).reader_hasKey (object->mAttribute_mOverridingCategoryMethodName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1746)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1746)).boolEnum () ;
        if (kBoolTrue == test_4) {
          GALGAS_methodQualifier var_qualifier ;
          GALGAS_methodKind joker_69810_0 ; // Joker input parameter
          GALGAS_bool joker_69863_0 ; // Joker input parameter
          GALGAS_string joker_69877_0 ; // Joker input parameter
          var_superType.reader_mInstanceMethodMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1748)).method_searchKey (object->mAttribute_mOverridingCategoryMethodName, joker_69810_0, var_inheritedSignature, var_inheritedDeclarationLocation, joker_69863_0, var_qualifier, joker_69877_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1748)) ;
          const enumGalgasBool test_5 = GALGAS_bool (kIsInfOrEqual, var_qualifier.objectCompare (GALGAS_methodQualifier::constructor_isBasicFinal (SOURCE_FILE ("semanticAnalysis.gSemantics", 1749)))).boolEnum () ;
          if (kBoolTrue == test_5) {
            var_baseTypeName = var_superType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1750)) ;
          }
        }
        var_superType = var_superType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1753)) ;
      }
    }
  }
  const enumGalgasBool test_6 = GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_6) {
    GALGAS_location location_7 (object->mAttribute_mOverridingCategoryMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_7, GALGAS_string ("this getter is not declared by a super class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1756)) ;
  }
  GALGAS_variableMap var_variableMap = GALGAS_variableMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 1759)) ;
  GALGAS_formalParameterListForGeneration var_formalParameterListForGeneration ;
  {
  routine_buildLocalVariableMapAndSignature (constinArgument_inSemanticContext, object->mAttribute_mOverridingCategoryMethodFormalParameterList, var_variableMap, var_formalParameterListForGeneration, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1761)) ;
  }
  const enumGalgasBool test_8 = GALGAS_bool (kIsNotEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_8) {
    {
    routine_checkMethodSignatures (var_formalParameterListForGeneration, object->mAttribute_mOverridingCategoryMethodName.reader_location (SOURCE_FILE ("semanticAnalysis.gSemantics", 1771)), var_inheritedSignature, var_inheritedDeclarationLocation, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1769)) ;
    }
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_overridingAbstractCategoryMethodAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_overridingAbstractCategoryMethodAST.mSlotID,
                                        categoryMethod_overridingAbstractCategoryMethodAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_overridingAbstractCategoryMethodAST_semanticAnalysis (defineCategoryMethod_overridingAbstractCategoryMethodAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
// Overriding category method '@abstractCategoryModifierAST semanticAnalysis'  *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_abstractCategoryModifierAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                         const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                         const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                         GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_abstractCategoryModifierAST * object = (const cPtr_abstractCategoryModifierAST *) inObject ;
  macroValidSharedObject (object, cPtr_abstractCategoryModifierAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1786)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1788)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1788)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mAbstractCategoryModifierName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("cannot declare a category modifier: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1789))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1789)).operator_concat (GALGAS_string ("' is not a class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1789))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1789)) ;
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_2 = var_selfType.reader_mIsConcrete (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1790)).boolEnum () ;
    if (kBoolTrue == test_2) {
      GALGAS_location location_3 (object->mAttribute_mAbstractCategoryModifierName.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_3, GALGAS_string ("cannot declare an abstract category modifier: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1791))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1791)).operator_concat (GALGAS_string ("' is not an abstract class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1791))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1791)) ;
    }
  }
  GALGAS_formalParameterListForGeneration var_formalParameterListForGeneration = GALGAS_formalParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1794)) ;
  cEnumerator_formalParameterListAST enumerator_71798 (object->mAttribute_mAbstractCategoryModifierFormalParameterList, kEnumeration_up) ;
  while (enumerator_71798.hasCurrentObject ()) {
    var_formalParameterListForGeneration.addAssign_operation (enumerator_71798.current_mFormalSelector (HERE), enumerator_71798.current_mFormalArgumentPassingMode (HERE), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_71798.current_mFormalArgumentTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1799)), enumerator_71798.current_mFormalArgumentName (HERE), enumerator_71798.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1801))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1796)) ;
    enumerator_71798.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string (" abstract extension setter ").operator_concat (object->mAttribute_mAbstractCategoryModifierName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1806))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1806)), GALGAS_abstractCategoryModifierForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("setter-").operator_concat (object->mAttribute_mTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1809))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1809)).operator_concat (GALGAS_string ("-")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1809)).operator_concat (object->mAttribute_mAbstractCategoryModifierName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1809))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1809)), var_selfType, object->mAttribute_mAbstractCategoryModifierName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1811)), var_formalParameterListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1807)), GALGAS_string ("~")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1805)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_abstractCategoryModifierAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_abstractCategoryModifierAST.mSlotID,
                                        categoryMethod_abstractCategoryModifierAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_abstractCategoryModifierAST_semanticAnalysis (defineCategoryMethod_abstractCategoryModifierAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//     Overriding category method '@categoryModifierAST semanticAnalysis'      *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_categoryModifierAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                 const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                 const GALGAS_predefinedTypes constinArgument_inPredefinedTypes,
                                                                 GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_categoryModifierAST * object = (const cPtr_categoryModifierAST *) inObject ;
  macroValidSharedObject (object, cPtr_categoryModifierAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1826)) ;
  GALGAS_string var_selfObjectName ;
  GALGAS_string var_selfObjectAccessor ;
  GALGAS_bool var_implementedAsFunction ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1831)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1831)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    var_selfObjectName = GALGAS_string ("object") ;
    var_selfObjectAccessor = GALGAS_string ("object->") ;
    var_implementedAsFunction = GALGAS_bool (false) ;
  }else if (kBoolFalse == test_0) {
    var_selfObjectName = GALGAS_string ("ioObject") ;
    var_selfObjectAccessor = GALGAS_string ("ioObject.") ;
    var_implementedAsFunction = GALGAS_bool (true) ;
  }
  GALGAS_formalParameterListForGeneration var_formalParameterListForGeneration = GALGAS_formalParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1841)) ;
  GALGAS_semanticInstructionListForGeneration var_semanticInstructionListForGeneration ;
  GALGAS_analysisContext var_analysisContext = GALGAS_analysisContext::constructor_new (constinArgument_inSemanticContext, constinArgument_inPredefinedTypes, var_selfType, var_selfObjectName, var_selfType  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1843)) ;
  {
  routine_analyzeRoutineBody (var_analysisContext, object->mAttribute_mCategoryModifierFormalParameterList, GALGAS_localConstantList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1853)), GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1854)), var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1855)), var_selfObjectAccessor, object->mAttribute_mCategoryModifierInstructionList, object->mAttribute_mEndOfModifierLocation, var_semanticInstructionListForGeneration, var_formalParameterListForGeneration, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1850)) ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("extension setter ").operator_concat (object->mAttribute_mCategoryModifierName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1864))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1864)), GALGAS_categoryModifierForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("setter-").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1867))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1867)).operator_concat (GALGAS_string ("-")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1867)).operator_concat (object->mAttribute_mCategoryModifierName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1867))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1867)), var_selfType, object->mAttribute_mCategoryModifierName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1869)), var_implementedAsFunction, var_formalParameterListForGeneration, var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1872)), var_semanticInstructionListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1865)), GALGAS_string ("~")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1863)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_categoryModifierAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_categoryModifierAST.mSlotID,
                                        categoryMethod_categoryModifierAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_categoryModifierAST_semanticAnalysis (defineCategoryMethod_categoryModifierAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@overridingCategoryModifierAST semanticAnalysis' *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_overridingCategoryModifierAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                           const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                           const GALGAS_predefinedTypes constinArgument_inPredefinedTypes,
                                                                           GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_overridingCategoryModifierAST * object = (const cPtr_overridingCategoryModifierAST *) inObject ;
  macroValidSharedObject (object, cPtr_overridingCategoryModifierAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1887)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1889)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1889)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mOverridingCategoryModifierName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("cannot declare a category modifier: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1890))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1890)).operator_concat (GALGAS_string ("' is not a class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1890))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1890)) ;
  }
  GALGAS_string var_baseTypeName = GALGAS_string::makeEmptyString () ;
  GALGAS_unifiedTypeMapProxy var_superType = var_selfType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1894)) ;
  GALGAS_formalParameterSignature var_inheritedSignature = GALGAS_formalParameterSignature::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1895)) ;
  GALGAS_location var_inheritedDeclarationLocation = inCompiler->here () ;
  if (constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 1897)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1897)).isValid ()) {
    uint32_t variant_75549 = constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 1897)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1897)).uintValue () ;
    bool loop_75549 = true ;
    while (loop_75549) {
      loop_75549 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 1898)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1898)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1898)).isValid () ;
      if (loop_75549) {
        loop_75549 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 1898)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1898)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1898)).boolValue () ;
      }
      if (loop_75549 && (0 == variant_75549)) {
        loop_75549 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticAnalysis.gSemantics", 1897)) ;
      }
      if (loop_75549) {
        variant_75549 -- ;
        const enumGalgasBool test_2 = var_superType.reader_mModifierMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1899)).reader_hasKey (object->mAttribute_mOverridingCategoryModifierName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1899)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1899)).boolEnum () ;
        if (kBoolTrue == test_2) {
          GALGAS_methodQualifier var_qualifier ;
          GALGAS_methodKind joker_75850_0 ; // Joker input parameter
          GALGAS_bool joker_75873_0 ; // Joker input parameter
          GALGAS_string joker_75887_0 ; // Joker input parameter
          var_superType.reader_mModifierMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1901)).method_searchKey (object->mAttribute_mOverridingCategoryModifierName, joker_75850_0, var_inheritedSignature, joker_75873_0, var_qualifier, joker_75887_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1901)) ;
          const enumGalgasBool test_3 = GALGAS_bool (kIsInfOrEqual, var_qualifier.objectCompare (GALGAS_methodQualifier::constructor_isBasicFinal (SOURCE_FILE ("semanticAnalysis.gSemantics", 1902)))).boolEnum () ;
          if (kBoolTrue == test_3) {
            var_baseTypeName = var_superType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1903)) ;
          }
        }
        var_superType = var_superType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1906)) ;
      }
    }
  }
  const enumGalgasBool test_4 = GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_4) {
    GALGAS_location location_5 (object->mAttribute_mOverridingCategoryModifierName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_5, GALGAS_string ("this modifier is not declared by a super class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1909)) ;
  }
  GALGAS_formalParameterListForGeneration var_formalParameterListForGeneration = GALGAS_formalParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1912)) ;
  GALGAS_semanticInstructionListForGeneration var_semanticInstructionListForGeneration ;
  GALGAS_analysisContext var_analysisContext = GALGAS_analysisContext::constructor_new (constinArgument_inSemanticContext, constinArgument_inPredefinedTypes, var_selfType, GALGAS_string ("object"), var_selfType  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1914)) ;
  {
  routine_analyzeRoutineBody (var_analysisContext, object->mAttribute_mOverridingCategoryModifierFormalParameterList, GALGAS_localConstantList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1924)), GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1925)), var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1926)), GALGAS_string ("object->"), object->mAttribute_mOverridingCategoryModifierInstructionList, object->mAttribute_mEndOfModifierLocation, var_semanticInstructionListForGeneration, var_formalParameterListForGeneration, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1921)) ;
  }
  const enumGalgasBool test_6 = GALGAS_bool (kIsNotEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_6) {
    {
    routine_checkMethodSignatures (var_formalParameterListForGeneration, object->mAttribute_mOverridingCategoryModifierName.reader_location (SOURCE_FILE ("semanticAnalysis.gSemantics", 1937)), var_inheritedSignature, var_inheritedDeclarationLocation, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1935)) ;
    }
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string (" overriding extension setter ").operator_concat (object->mAttribute_mOverridingCategoryModifierName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1944))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1944)), GALGAS_overridingCategoryModifierForGeneration::constructor_new (GALGAS_bool (false), GALGAS_string ("setter-").operator_concat (object->mAttribute_mTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1947))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1947)).operator_concat (GALGAS_string ("-")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1947)).operator_concat (object->mAttribute_mOverridingCategoryModifierName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1947))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1947)), var_selfType, var_baseTypeName, object->mAttribute_mOverridingCategoryModifierName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1950)), var_formalParameterListForGeneration, var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1952)), var_semanticInstructionListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1945)), GALGAS_string ("~")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1943)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_overridingCategoryModifierAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_overridingCategoryModifierAST.mSlotID,
                                        categoryMethod_overridingCategoryModifierAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_overridingCategoryModifierAST_semanticAnalysis (defineCategoryMethod_overridingCategoryModifierAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@overridingAbstractCategoryModifierAST semanticAnalysis'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_overridingAbstractCategoryModifierAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                                   const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                                   const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                                   GALGAS_semanticDeclarationSortedListForGeneration & /* ioArgument_ioSemanticDeclarationListForGeneration */,
                                                                                   C_Compiler * inCompiler
                                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_overridingAbstractCategoryModifierAST * object = (const cPtr_overridingAbstractCategoryModifierAST *) inObject ;
  macroValidSharedObject (object, cPtr_overridingAbstractCategoryModifierAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1967)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1969)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1969)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mOverridingCategoryModifierName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("cannot declare a category modifier: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1970))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1970)).operator_concat (GALGAS_string ("' is not a class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1970))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1970)) ;
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_2 = var_selfType.reader_mIsConcrete (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1971)).boolEnum () ;
    if (kBoolTrue == test_2) {
      GALGAS_location location_3 (object->mAttribute_mOverridingCategoryModifierName.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_3, GALGAS_string ("cannot declare an abstract category modifier: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1972))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1972)).operator_concat (GALGAS_string ("' is not an abstract class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1972))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1972)) ;
    }
  }
  GALGAS_string var_baseTypeName = GALGAS_string::makeEmptyString () ;
  GALGAS_unifiedTypeMapProxy var_superType = var_selfType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1976)) ;
  GALGAS_formalParameterSignature var_inheritedSignature = GALGAS_formalParameterSignature::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1977)) ;
  GALGAS_location var_inheritedDeclarationLocation = inCompiler->here () ;
  if (constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 1979)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1979)).isValid ()) {
    uint32_t variant_78868 = constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 1979)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1979)).uintValue () ;
    bool loop_78868 = true ;
    while (loop_78868) {
      loop_78868 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 1980)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1980)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1980)).isValid () ;
      if (loop_78868) {
        loop_78868 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 1980)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1980)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1980)).boolValue () ;
      }
      if (loop_78868 && (0 == variant_78868)) {
        loop_78868 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticAnalysis.gSemantics", 1979)) ;
      }
      if (loop_78868) {
        variant_78868 -- ;
        const enumGalgasBool test_4 = var_superType.reader_mModifierMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1981)).reader_hasKey (object->mAttribute_mOverridingCategoryModifierName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1981)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1981)).boolEnum () ;
        if (kBoolTrue == test_4) {
          GALGAS_methodQualifier var_qualifier ;
          GALGAS_methodKind joker_79169_0 ; // Joker input parameter
          GALGAS_bool joker_79192_0 ; // Joker input parameter
          GALGAS_string joker_79206_0 ; // Joker input parameter
          var_superType.reader_mModifierMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1983)).method_searchKey (object->mAttribute_mOverridingCategoryModifierName, joker_79169_0, var_inheritedSignature, joker_79192_0, var_qualifier, joker_79206_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1983)) ;
          const enumGalgasBool test_5 = GALGAS_bool (kIsInfOrEqual, var_qualifier.objectCompare (GALGAS_methodQualifier::constructor_isBasicFinal (SOURCE_FILE ("semanticAnalysis.gSemantics", 1984)))).boolEnum () ;
          if (kBoolTrue == test_5) {
            var_baseTypeName = var_superType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1985)) ;
          }
        }
        var_superType = var_superType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1988)) ;
      }
    }
  }
  const enumGalgasBool test_6 = GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_6) {
    GALGAS_location location_7 (object->mAttribute_mOverridingCategoryModifierName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_7, GALGAS_string ("this modifier is not declared by a super class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1991)) ;
  }
  GALGAS_variableMap var_variableMap = GALGAS_variableMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 1994)) ;
  GALGAS_formalParameterListForGeneration var_formalParameterListForGeneration ;
  {
  routine_buildLocalVariableMapAndSignature (constinArgument_inSemanticContext, object->mAttribute_mOverridingCategoryModifierFormalParameterList, var_variableMap, var_formalParameterListForGeneration, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1996)) ;
  }
  const enumGalgasBool test_8 = GALGAS_bool (kIsNotEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_8) {
    {
    routine_checkMethodSignatures (var_formalParameterListForGeneration, object->mAttribute_mOverridingCategoryModifierName.reader_location (SOURCE_FILE ("semanticAnalysis.gSemantics", 2006)), var_inheritedSignature, var_inheritedDeclarationLocation, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2004)) ;
    }
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_overridingAbstractCategoryModifierAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_overridingAbstractCategoryModifierAST.mSlotID,
                                        categoryMethod_overridingAbstractCategoryModifierAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_overridingAbstractCategoryModifierAST_semanticAnalysis (defineCategoryMethod_overridingAbstractCategoryModifierAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//  Overriding category method '@abstractCategoryReaderAST semanticAnalysis'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_abstractCategoryReaderAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                       const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                       const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                       GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_abstractCategoryReaderAST * object = (const cPtr_abstractCategoryReaderAST *) inObject ;
  macroValidSharedObject (object, cPtr_abstractCategoryReaderAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2021)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2023)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 2023)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mAbstractCategoryReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("cannot declare a category reader: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2024))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2024)).operator_concat (GALGAS_string ("' is not a class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2024))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2024)) ;
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_2 = var_selfType.reader_mIsConcrete (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2025)).boolEnum () ;
    if (kBoolTrue == test_2) {
      GALGAS_location location_3 (object->mAttribute_mAbstractCategoryReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_3, GALGAS_string ("cannot declare an abstract category reader: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2026))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2026)).operator_concat (GALGAS_string ("' is not an abstract class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2026))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2026)) ;
    }
  }
  GALGAS_formalInputParameterListForGeneration var_formalParameterListForGeneration = GALGAS_formalInputParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 2029)) ;
  cEnumerator_formalInputParameterListAST enumerator_81131 (object->mAttribute_mAbstractCategoryReaderFormalInputParameterList, kEnumeration_up) ;
  while (enumerator_81131.hasCurrentObject ()) {
    var_formalParameterListForGeneration.addAssign_operation (enumerator_81131.current_mFormalSelector (HERE), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_81131.current_mFormalArgumentTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2033)), enumerator_81131.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2034)), enumerator_81131.current_mFormalArgumentName (HERE), enumerator_81131.current_mIsConstant (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2031)) ;
    enumerator_81131.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("abstract extension getter ").operator_concat (object->mAttribute_mAbstractCategoryReaderName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2041))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2041)), GALGAS_abstractCategoryReaderForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("getter-").operator_concat (object->mAttribute_mTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2044))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2044)).operator_concat (GALGAS_string ("-")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2044)).operator_concat (object->mAttribute_mAbstractCategoryReaderName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2044))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2044)), var_selfType, object->mAttribute_mAbstractCategoryReaderName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2046)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mAbstractCategoryReaderReturnedTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2047)), var_formalParameterListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2042)), GALGAS_string ("~")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2040)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_abstractCategoryReaderAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_abstractCategoryReaderAST.mSlotID,
                                        categoryMethod_abstractCategoryReaderAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_abstractCategoryReaderAST_semanticAnalysis (defineCategoryMethod_abstractCategoryReaderAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//      Overriding category method '@categoryReaderAST semanticAnalysis'       *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_categoryReaderAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                               const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                               const GALGAS_predefinedTypes constinArgument_inPredefinedTypes,
                                                               GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                               C_Compiler * inCompiler
                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_categoryReaderAST * object = (const cPtr_categoryReaderAST *) inObject ;
  macroValidSharedObject (object, cPtr_categoryReaderAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2064)) ;
  GALGAS_string var_selfObjectName ;
  GALGAS_string var_selfObjectAccessor ;
  GALGAS_bool var_implementedAsFunction ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2069)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 2069)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    var_selfObjectName = GALGAS_string ("object") ;
    var_selfObjectAccessor = GALGAS_string ("object->") ;
    var_implementedAsFunction = GALGAS_bool (false) ;
  }else if (kBoolFalse == test_0) {
    var_selfObjectName = GALGAS_string ("inObject") ;
    var_selfObjectAccessor = GALGAS_string ("inObject.") ;
    var_implementedAsFunction = GALGAS_bool (true) ;
  }
  GALGAS_analysisContext var_analysisContext = GALGAS_analysisContext::constructor_new (constinArgument_inSemanticContext, constinArgument_inPredefinedTypes, var_selfType, var_selfObjectName, GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 2084))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2079)) ;
  GALGAS_unifiedTypeMapProxy var_returnType ;
  GALGAS_string var_returnVariableCppName ;
  GALGAS_formalInputParameterListForGeneration var_formalParameterListForGeneration ;
  GALGAS_semanticInstructionListForGeneration var_semanticInstructionListForGeneration ;
  {
  GALGAS_typedAttributeList temp_1 ;
  const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2093)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 2093)))).operator_or (GALGAS_bool (kIsEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2093)).objectCompare (GALGAS_typeKindEnum::constructor_structType (SOURCE_FILE ("semanticAnalysis.gSemantics", 2093)))) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2093)).boolEnum () ;
  if (kBoolTrue == test_2) {
    temp_1 = var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2094)) ;
  }else if (kBoolFalse == test_2) {
    temp_1 = GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 2095)) ;
  }
  routine_analyzeFunctionBody (var_analysisContext, object->mAttribute_mCategoryReaderFormalInputParameterList, temp_1, var_selfObjectAccessor, object->mAttribute_mCategoryReaderInstructionList, object->mAttribute_mCategoryReaderReturnedVariableName, object->mAttribute_mCategoryReaderReturnedTypeName, object->mAttribute_mEndOfReaderLocation, var_formalParameterListForGeneration, var_returnType, var_returnVariableCppName, var_semanticInstructionListForGeneration, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2090)) ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("extension getter ").operator_concat (object->mAttribute_mCategoryReaderName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2109))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2109)), GALGAS_categoryReaderForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("getter-").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2112))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2112)).operator_concat (GALGAS_string ("-")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2112)).operator_concat (object->mAttribute_mCategoryReaderName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2112))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2112)), var_selfType, object->mAttribute_mCategoryReaderName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2114)), var_implementedAsFunction, var_returnType, var_returnVariableCppName, var_formalParameterListForGeneration, var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2119)), var_semanticInstructionListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2110)), GALGAS_string ("~")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2108)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_categoryReaderAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_categoryReaderAST.mSlotID,
                                        categoryMethod_categoryReaderAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_categoryReaderAST_semanticAnalysis (defineCategoryMethod_categoryReaderAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
// Overriding category method '@overridingCategoryReaderAST semanticAnalysis'  *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_overridingCategoryReaderAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                         const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                         const GALGAS_predefinedTypes constinArgument_inPredefinedTypes,
                                                                         GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_overridingCategoryReaderAST * object = (const cPtr_overridingCategoryReaderAST *) inObject ;
  macroValidSharedObject (object, cPtr_overridingCategoryReaderAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2134)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2136)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 2136)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mOverridingCategoryReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("cannot declare a category reader: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2137))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2137)).operator_concat (GALGAS_string ("' is not a class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2137))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2137)) ;
  }
  GALGAS_string var_baseTypeName = GALGAS_string::makeEmptyString () ;
  GALGAS_unifiedTypeMapProxy var_superType = var_selfType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2141)) ;
  GALGAS_functionSignature var_inheritedSignature = GALGAS_functionSignature::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 2142)) ;
  GALGAS_unifiedTypeMapProxy var_inheritedReturnType = GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 2143)) ;
  GALGAS_location var_inheritedDeclarationLocation = inCompiler->here () ;
  if (constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 2145)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2145)).isValid ()) {
    uint32_t variant_85353 = constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 2145)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2145)).uintValue () ;
    bool loop_85353 = true ;
    while (loop_85353) {
      loop_85353 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 2146)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 2146)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2146)).isValid () ;
      if (loop_85353) {
        loop_85353 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 2146)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 2146)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2146)).boolValue () ;
      }
      if (loop_85353 && (0 == variant_85353)) {
        loop_85353 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticAnalysis.gSemantics", 2145)) ;
      }
      if (loop_85353) {
        variant_85353 -- ;
        const enumGalgasBool test_2 = var_superType.reader_mReaderMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2147)).reader_hasKey (object->mAttribute_mOverridingCategoryReaderName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2147)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2147)).boolEnum () ;
        if (kBoolTrue == test_2) {
          GALGAS_methodQualifier var_qualifier ;
          GALGAS_methodKind joker_85627_0 ; // Joker input parameter
          GALGAS_bool joker_85704_0 ; // Joker input parameter
          GALGAS_string joker_85781_0 ; // Joker input parameter
          var_superType.reader_mReaderMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2148)).method_searchKey (object->mAttribute_mOverridingCategoryReaderName, joker_85627_0, var_inheritedSignature, var_inheritedDeclarationLocation, joker_85704_0, var_inheritedReturnType, var_qualifier, joker_85781_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2148)) ;
          const enumGalgasBool test_3 = GALGAS_bool (kIsInfOrEqual, var_qualifier.objectCompare (GALGAS_methodQualifier::constructor_isBasicFinal (SOURCE_FILE ("semanticAnalysis.gSemantics", 2158)))).boolEnum () ;
          if (kBoolTrue == test_3) {
            var_baseTypeName = var_superType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2159)) ;
          }
        }
        var_superType = var_superType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2162)) ;
      }
    }
  }
  const enumGalgasBool test_4 = GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_4) {
    GALGAS_location location_5 (object->mAttribute_mOverridingCategoryReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_5, GALGAS_string ("this getter is not declared by a super class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2165)) ;
  }
  GALGAS_analysisContext var_analysisContext = GALGAS_analysisContext::constructor_new (constinArgument_inSemanticContext, constinArgument_inPredefinedTypes, var_selfType, GALGAS_string ("object"), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 2173))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2168)) ;
  GALGAS_formalInputParameterListForGeneration var_formalParameterListForGeneration ;
  GALGAS_unifiedTypeMapProxy var_returnType ;
  GALGAS_string var_returnVariableCppName ;
  GALGAS_semanticInstructionListForGeneration var_semanticInstructionListForGeneration ;
  {
  GALGAS_typedAttributeList temp_6 ;
  const enumGalgasBool test_7 = GALGAS_bool (kIsEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2178)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 2178)))).operator_or (GALGAS_bool (kIsEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2178)).objectCompare (GALGAS_typeKindEnum::constructor_structType (SOURCE_FILE ("semanticAnalysis.gSemantics", 2178)))) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2178)).boolEnum () ;
  if (kBoolTrue == test_7) {
    temp_6 = var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2179)) ;
  }else if (kBoolFalse == test_7) {
    temp_6 = GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 2180)) ;
  }
  routine_analyzeFunctionBody (var_analysisContext, object->mAttribute_mOverridingCategoryReaderFormalInputParameterList, temp_6, GALGAS_string ("object->"), object->mAttribute_mOverridingCategoryReaderInstructionList, object->mAttribute_mOverridingCategoryReaderReturnedVariableName, object->mAttribute_mOverridingCategoryReaderReturnedTypeName, object->mAttribute_mEndOfReaderLocation, var_formalParameterListForGeneration, var_returnType, var_returnVariableCppName, var_semanticInstructionListForGeneration, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2175)) ;
  }
  const enumGalgasBool test_8 = GALGAS_bool (kIsNotEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_8) {
    {
    routine_checkReaderSignatures (var_formalParameterListForGeneration, var_returnType, object->mAttribute_mOverridingCategoryReaderName.reader_location (SOURCE_FILE ("semanticAnalysis.gSemantics", 2197)), var_inheritedSignature, var_inheritedReturnType, var_inheritedDeclarationLocation, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2194)) ;
    }
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_string ("override extension getter ").operator_concat (object->mAttribute_mOverridingCategoryReaderName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2205))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2205)), GALGAS_overrideCategoryReaderForGeneration::constructor_new (GALGAS_bool (false), GALGAS_string ("getter-").operator_concat (object->mAttribute_mTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2208))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2208)).operator_concat (GALGAS_string ("-")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2208)).operator_concat (object->mAttribute_mOverridingCategoryReaderName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2208))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2208)), var_selfType, var_baseTypeName, object->mAttribute_mOverridingCategoryReaderName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2211)), var_returnType, var_returnVariableCppName, var_formalParameterListForGeneration, var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2215)), var_semanticInstructionListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2206)), GALGAS_string ("~")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2204)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_overridingCategoryReaderAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_overridingCategoryReaderAST.mSlotID,
                                        categoryMethod_overridingCategoryReaderAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_overridingCategoryReaderAST_semanticAnalysis (defineCategoryMethod_overridingCategoryReaderAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@overridingAbstractCategoryReaderAST semanticAnalysis'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_overridingAbstractCategoryReaderAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                                 const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                                 const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                                 GALGAS_semanticDeclarationSortedListForGeneration & /* ioArgument_ioSemanticDeclarationListForGeneration */,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_overridingAbstractCategoryReaderAST * object = (const cPtr_overridingAbstractCategoryReaderAST *) inObject ;
  macroValidSharedObject (object, cPtr_overridingAbstractCategoryReaderAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2230)) ;
  GALGAS_unifiedTypeMapProxy var_returnType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mAbstractCategoryReaderReturnedTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2232)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2234)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 2234)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mAbstractCategoryReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("cannot declare a category reader: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2235))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2235)).operator_concat (GALGAS_string ("' is not a class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2235))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2235)) ;
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_2 = var_selfType.reader_mIsConcrete (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2236)).boolEnum () ;
    if (kBoolTrue == test_2) {
      GALGAS_location location_3 (object->mAttribute_mAbstractCategoryReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_3, GALGAS_string ("cannot declare an abstract category reader: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2237))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2237)).operator_concat (GALGAS_string ("' is not an abstract class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2237))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2237)) ;
    }
  }
  GALGAS_string var_baseTypeName = GALGAS_string::makeEmptyString () ;
  GALGAS_unifiedTypeMapProxy var_superType = var_selfType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2241)) ;
  GALGAS_functionSignature var_inheritedSignature = GALGAS_functionSignature::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 2242)) ;
  GALGAS_unifiedTypeMapProxy var_inheritedReturnType = GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 2243)) ;
  GALGAS_location var_inheritedDeclarationLocation = inCompiler->here () ;
  if (constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 2245)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2245)).isValid ()) {
    uint32_t variant_89250 = constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 2245)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2245)).uintValue () ;
    bool loop_89250 = true ;
    while (loop_89250) {
      loop_89250 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 2246)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 2246)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2246)).isValid () ;
      if (loop_89250) {
        loop_89250 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 2246)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 2246)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2246)).boolValue () ;
      }
      if (loop_89250 && (0 == variant_89250)) {
        loop_89250 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticAnalysis.gSemantics", 2245)) ;
      }
      if (loop_89250) {
        variant_89250 -- ;
        const enumGalgasBool test_4 = var_superType.reader_mReaderMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2247)).reader_hasKey (object->mAttribute_mAbstractCategoryReaderName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2247)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2247)).boolEnum () ;
        if (kBoolTrue == test_4) {
          GALGAS_methodQualifier var_qualifier ;
          GALGAS_methodKind joker_89555_0 ; // Joker input parameter
          GALGAS_bool joker_89632_0 ; // Joker input parameter
          GALGAS_string joker_89691_0 ; // Joker input parameter
          var_superType.reader_mReaderMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2249)).method_searchKey (object->mAttribute_mAbstractCategoryReaderName, joker_89555_0, var_inheritedSignature, var_inheritedDeclarationLocation, joker_89632_0, var_inheritedReturnType, var_qualifier, joker_89691_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2249)) ;
          const enumGalgasBool test_5 = GALGAS_bool (kIsInfOrEqual, var_qualifier.objectCompare (GALGAS_methodQualifier::constructor_isBasicFinal (SOURCE_FILE ("semanticAnalysis.gSemantics", 2259)))).boolEnum () ;
          if (kBoolTrue == test_5) {
            var_baseTypeName = var_superType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2260)) ;
          }
        }
        var_superType = var_superType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2263)) ;
      }
    }
  }
  const enumGalgasBool test_6 = GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_6) {
    GALGAS_location location_7 (object->mAttribute_mAbstractCategoryReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_7, GALGAS_string ("this getter is not declared by a super class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2266)) ;
  }
  const enumGalgasBool test_8 = GALGAS_bool (kIsNotEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_8) {
    GALGAS_formalInputParameterListForGeneration var_formalParameterListForGeneration = GALGAS_formalInputParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 2270)) ;
    cEnumerator_formalInputParameterListAST enumerator_90213 (object->mAttribute_mAbstractCategoryReaderFormalInputParameterList, kEnumeration_up) ;
    while (enumerator_90213.hasCurrentObject ()) {
      var_formalParameterListForGeneration.addAssign_operation (enumerator_90213.current_mFormalSelector (HERE), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_90213.current_mFormalArgumentTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2274)), enumerator_90213.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2275)), enumerator_90213.current_mFormalArgumentName (HERE), enumerator_90213.current_mIsConstant (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2272)) ;
      enumerator_90213.gotoNextObject () ;
    }
    {
    routine_checkReaderSignatures (var_formalParameterListForGeneration, var_returnType, object->mAttribute_mAbstractCategoryReaderName.reader_location (SOURCE_FILE ("semanticAnalysis.gSemantics", 2283)), var_inheritedSignature, var_inheritedReturnType, var_inheritedDeclarationLocation, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2280)) ;
    }
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_overridingAbstractCategoryReaderAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_overridingAbstractCategoryReaderAST.mSlotID,
                                        categoryMethod_overridingAbstractCategoryReaderAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_overridingAbstractCategoryReaderAST_semanticAnalysis (defineCategoryMethod_overridingAbstractCategoryReaderAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap_2D_element::GALGAS_attributeIndexMap_2D_element (void) :
mAttribute_lkey (),
mAttribute_mAttributeTypeIndex () {
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap_2D_element::~ GALGAS_attributeIndexMap_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap_2D_element::GALGAS_attributeIndexMap_2D_element (const GALGAS_lstring & inOperand0,
                                                                          const GALGAS_unifiedTypeMapProxy & inOperand1) :
mAttribute_lkey (inOperand0),
mAttribute_mAttributeTypeIndex (inOperand1) {
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap_2D_element GALGAS_attributeIndexMap_2D_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_attributeIndexMap_2D_element (GALGAS_lstring::constructor_default (HERE),
                                              GALGAS_unifiedTypeMapProxy::constructor_null (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap_2D_element GALGAS_attributeIndexMap_2D_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                          const GALGAS_unifiedTypeMapProxy & inOperand1 
                                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_attributeIndexMap_2D_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_attributeIndexMap_2D_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_attributeIndexMap_2D_element::objectCompare (const GALGAS_attributeIndexMap_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mAttributeTypeIndex.objectCompare (inOperand.mAttribute_mAttributeTypeIndex) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_attributeIndexMap_2D_element::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mAttributeTypeIndex.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeIndexMap_2D_element::drop (void) {
  mAttribute_lkey.drop () ;
  mAttribute_mAttributeTypeIndex.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeIndexMap_2D_element::description (C_String & ioString,
                                                       const int32_t inIndentation) const {
  ioString << "<struct @attributeIndexMap-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mAttributeTypeIndex.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_attributeIndexMap_2D_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_attributeIndexMap_2D_element::reader_mAttributeTypeIndex (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAttributeTypeIndex ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                       @attributeIndexMap-element type                       *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_attributeIndexMap_2D_element ("attributeIndexMap-element",
                                                     NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_attributeIndexMap_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_attributeIndexMap_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_attributeIndexMap_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_attributeIndexMap_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap_2D_element GALGAS_attributeIndexMap_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_attributeIndexMap_2D_element result ;
  const GALGAS_attributeIndexMap_2D_element * p = (const GALGAS_attributeIndexMap_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_attributeIndexMap_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("attributeIndexMap-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap_2D_element::GALGAS_constantIndexMap_2D_element (void) :
mAttribute_lkey (),
mAttribute_mIndex () {
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap_2D_element::~ GALGAS_constantIndexMap_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap_2D_element::GALGAS_constantIndexMap_2D_element (const GALGAS_lstring & inOperand0,
                                                                        const GALGAS_uint & inOperand1) :
mAttribute_lkey (inOperand0),
mAttribute_mIndex (inOperand1) {
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap_2D_element GALGAS_constantIndexMap_2D_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_constantIndexMap_2D_element (GALGAS_lstring::constructor_default (HERE),
                                             GALGAS_uint::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap_2D_element GALGAS_constantIndexMap_2D_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                        const GALGAS_uint & inOperand1 
                                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_constantIndexMap_2D_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_constantIndexMap_2D_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_constantIndexMap_2D_element::objectCompare (const GALGAS_constantIndexMap_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mIndex.objectCompare (inOperand.mAttribute_mIndex) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_constantIndexMap_2D_element::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mIndex.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_constantIndexMap_2D_element::drop (void) {
  mAttribute_lkey.drop () ;
  mAttribute_mIndex.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_constantIndexMap_2D_element::description (C_String & ioString,
                                                      const int32_t inIndentation) const {
  ioString << "<struct @constantIndexMap-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mIndex.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_constantIndexMap_2D_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_constantIndexMap_2D_element::reader_mIndex (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mIndex ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                       @constantIndexMap-element type                        *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_constantIndexMap_2D_element ("constantIndexMap-element",
                                                    NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_constantIndexMap_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_constantIndexMap_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_constantIndexMap_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_constantIndexMap_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap_2D_element GALGAS_constantIndexMap_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_constantIndexMap_2D_element result ;
  const GALGAS_constantIndexMap_2D_element * p = (const GALGAS_constantIndexMap_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_constantIndexMap_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("constantIndexMap-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap_2D_element::GALGAS_insertMethodMap_2D_element (void) :
mAttribute_lkey () {
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap_2D_element::~ GALGAS_insertMethodMap_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap_2D_element::GALGAS_insertMethodMap_2D_element (const GALGAS_lstring & inOperand0) :
mAttribute_lkey (inOperand0) {
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap_2D_element GALGAS_insertMethodMap_2D_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_insertMethodMap_2D_element (GALGAS_lstring::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap_2D_element GALGAS_insertMethodMap_2D_element::constructor_new (const GALGAS_lstring & inOperand0 
                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_insertMethodMap_2D_element result ;
  if (inOperand0.isValid ()) {
    result = GALGAS_insertMethodMap_2D_element (inOperand0) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_insertMethodMap_2D_element::objectCompare (const GALGAS_insertMethodMap_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_insertMethodMap_2D_element::isValid (void) const {
  return mAttribute_lkey.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_insertMethodMap_2D_element::drop (void) {
  mAttribute_lkey.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_insertMethodMap_2D_element::description (C_String & ioString,
                                                     const int32_t inIndentation) const {
  ioString << "<struct @insertMethodMap-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_insertMethodMap_2D_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                        @insertMethodMap-element type                        *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_insertMethodMap_2D_element ("insertMethodMap-element",
                                                   NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_insertMethodMap_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_insertMethodMap_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_insertMethodMap_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_insertMethodMap_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap_2D_element GALGAS_insertMethodMap_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_insertMethodMap_2D_element result ;
  const GALGAS_insertMethodMap_2D_element * p = (const GALGAS_insertMethodMap_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_insertMethodMap_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("insertMethodMap-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap_2D_element::GALGAS_searchMethodMap_2D_element (void) :
mAttribute_lkey () {
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap_2D_element::~ GALGAS_searchMethodMap_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap_2D_element::GALGAS_searchMethodMap_2D_element (const GALGAS_lstring & inOperand0) :
mAttribute_lkey (inOperand0) {
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap_2D_element GALGAS_searchMethodMap_2D_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_searchMethodMap_2D_element (GALGAS_lstring::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap_2D_element GALGAS_searchMethodMap_2D_element::constructor_new (const GALGAS_lstring & inOperand0 
                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_searchMethodMap_2D_element result ;
  if (inOperand0.isValid ()) {
    result = GALGAS_searchMethodMap_2D_element (inOperand0) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_searchMethodMap_2D_element::objectCompare (const GALGAS_searchMethodMap_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_searchMethodMap_2D_element::isValid (void) const {
  return mAttribute_lkey.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_searchMethodMap_2D_element::drop (void) {
  mAttribute_lkey.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_searchMethodMap_2D_element::description (C_String & ioString,
                                                     const int32_t inIndentation) const {
  ioString << "<struct @searchMethodMap-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_searchMethodMap_2D_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                        @searchMethodMap-element type                        *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_searchMethodMap_2D_element ("searchMethodMap-element",
                                                   NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_searchMethodMap_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_searchMethodMap_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_searchMethodMap_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_searchMethodMap_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap_2D_element GALGAS_searchMethodMap_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_searchMethodMap_2D_element result ;
  const GALGAS_searchMethodMap_2D_element * p = (const GALGAS_searchMethodMap_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_searchMethodMap_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("searchMethodMap-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap_2D_element::GALGAS_declaredMethodMap_2D_element (void) :
mAttribute_lkey () {
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap_2D_element::~ GALGAS_declaredMethodMap_2D_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap_2D_element::GALGAS_declaredMethodMap_2D_element (const GALGAS_lstring & inOperand0) :
mAttribute_lkey (inOperand0) {
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap_2D_element GALGAS_declaredMethodMap_2D_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_declaredMethodMap_2D_element (GALGAS_lstring::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap_2D_element GALGAS_declaredMethodMap_2D_element::constructor_new (const GALGAS_lstring & inOperand0 
                                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_declaredMethodMap_2D_element result ;
  if (inOperand0.isValid ()) {
    result = GALGAS_declaredMethodMap_2D_element (inOperand0) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_declaredMethodMap_2D_element::objectCompare (const GALGAS_declaredMethodMap_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_declaredMethodMap_2D_element::isValid (void) const {
  return mAttribute_lkey.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_declaredMethodMap_2D_element::drop (void) {
  mAttribute_lkey.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_declaredMethodMap_2D_element::description (C_String & ioString,
                                                       const int32_t inIndentation) const {
  ioString << "<struct @declaredMethodMap-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_declaredMethodMap_2D_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                       @declaredMethodMap-element type                       *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_declaredMethodMap_2D_element ("declaredMethodMap-element",
                                                     NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_declaredMethodMap_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_declaredMethodMap_2D_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_declaredMethodMap_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_declaredMethodMap_2D_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap_2D_element GALGAS_declaredMethodMap_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_declaredMethodMap_2D_element result ;
  const GALGAS_declaredMethodMap_2D_element * p = (const GALGAS_declaredMethodMap_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_declaredMethodMap_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("declaredMethodMap-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


