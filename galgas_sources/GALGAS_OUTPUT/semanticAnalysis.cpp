//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'semanticAnalysis.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      march 25th, 2010, at 18h10'30"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "checkMethodSignatures"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkMethodSignatures (C_Compiler & inLexique,
                                const GGS_formalParameterListForGeneration   var_cas_inTestedSignature,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_formalParameterSignature   var_cas_inReferenceSignature,
                                const GGS_location   var_cas_inReferenceLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkMethodSignatures at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_2501 = (var_cas_inTestedSignature.reader_length ()).operator_isNotEqual (var_cas_inReferenceSignature.reader_length ()) ;
  if (cond_2501.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("this method declares ")).operator_concat (var_cas_inTestedSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (37)))).operator_concat (GGS_string (" formal parameter(s), but overriden method declares "))).operator_concat (var_cas_inReferenceSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (38))) COMMA_SOURCE_FILE_AT_LINE (40)) ;
    var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden method is declared here") COMMA_SOURCE_FILE_AT_LINE (41)) ;
  }else if (cond_2501.isBuiltAndFalse ()) {
    {
      GGS_formalParameterSignature::cEnumerator enumerator_2534 (var_cas_inReferenceSignature, true) ;
      const GGS_formalParameterSignature::cElement * operand_2534 = NULL ;
      GGS_formalParameterListForGeneration::cEnumerator enumerator_2569 (var_cas_inTestedSignature, true) ;
      const GGS_formalParameterListForGeneration::cElement * operand_2569 = NULL ;
      while (((operand_2534 = enumerator_2534.nextObject ()))
          && ((operand_2569 = enumerator_2569.nextObject ()))) {
        macroValidPointer (operand_2534) ;
        macroValidPointer (operand_2569) ;
        const GGS_bool cond_3012 = (operand_2534->mFormalParameterPassingMode).operator_isNotEqual (operand_2569->mFormalParameterPassingMode) ;
        if (cond_3012.isBuiltAndTrue ()) {
          operand_2569->mFormalParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("the '")).operator_concat (operand_2569->mFormalParameterName)).operator_concat (GGS_string ("' formal parameter is declared as "))).operator_concat (operand_2569->mFormalParameterPassingMode.reader_formalArgumentMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (45)))).operator_concat (GGS_string (", but overriden method declares it as "))).operator_concat (operand_2534->mFormalParameterPassingMode.reader_formalArgumentMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (46))) COMMA_SOURCE_FILE_AT_LINE (47)) ;
          var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden method is declared here") COMMA_SOURCE_FILE_AT_LINE (48)) ;
        }
        const GGS_bool cond_3428 = (operand_2569->mFormalParameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (49)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (49))).operator_isNotEqual (operand_2534->mParameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (49)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (49))) ;
        if (cond_3428.isBuiltAndTrue ()) {
          operand_2569->mFormalParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the '")).operator_concat (operand_2569->mFormalParameterName)).operator_concat (GGS_string ("' formal parameter has the '@"))).operator_concat (operand_2569->mFormalParameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (51)))).operator_concat (GGS_string ("' type, but overriden method declares with the '@"))).operator_concat (operand_2534->mParameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (52)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (53)) ;
          var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden method is declared here") COMMA_SOURCE_FILE_AT_LINE (54)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkMethodSignatures\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@semanticDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticDeclarationAST__performSemanticAnalysis (C_Compiler &,
                                const cPtr_semanticDeclarationAST * operand_3923,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticDeclarationListForGeneration  & /* var_cas_ioSemanticDeclarationListForGeneration */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3923 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticDeclarationAST.performSemanticAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis> gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis
findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.count ()) {
    result = gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (superClassPtr) ;
      gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@predefinedTypeAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__predefinedTypeAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_predefinedTypeAST * operand_4211,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                GGS_semanticDeclarationListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4211 != NULL) {
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_primitiveTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, operand_4211->mPredefinedTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (78)) COMMA_SOURCE_FILE_AT_LINE (78)) COMMA_SOURCE_FILE_AT_LINE (77))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@listDeclarationAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_listDeclarationAST * operand_4681,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                GGS_semanticDeclarationListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4681 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_4883 (operand_4681->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_4883 = NULL ;
      while (((operand_4883 = enumerator_4883.nextObject ()))) {
        macroValidPointer (operand_4883) ;
        var_cas_typedAttributeList.addAssign_operation (GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_4883->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (92)), operand_4883->mAttributeName) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_listTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_4681->mListTypeName COMMA_SOURCE_FILE_AT_LINE (97)), var_cas_typedAttributeList COMMA_SOURCE_FILE_AT_LINE (96))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@structDeclarationAST.performSemanticAnalysis'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__structDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_structDeclarationAST * operand_5386,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                GGS_semanticDeclarationListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5386 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_5588 (operand_5386->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_5588 = NULL ;
      while (((operand_5588 = enumerator_5588.nextObject ()))) {
        macroValidPointer (operand_5588) ;
        var_cas_typedAttributeList.addAssign_operation (GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_5588->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (112)), operand_5588->mAttributeName) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_structTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_5386->mStructTypeName COMMA_SOURCE_FILE_AT_LINE (117)), var_cas_typedAttributeList COMMA_SOURCE_FILE_AT_LINE (116))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@genericTypeTypeAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__genericTypeTypeAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_genericTypeTypeAST * operand_6092,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                GGS_semanticDeclarationListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6092 != NULL) {
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_genericTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, operand_6092->mTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (129)) COMMA_SOURCE_FILE_AT_LINE (129)) COMMA_SOURCE_FILE_AT_LINE (128))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@classDeclarationAST.performSemanticAnalysis'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__classDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_classDeclarationAST * operand_6550,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                GGS_semanticDeclarationListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6550 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_6777 (operand_6550->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_6777 = NULL ;
      while (((operand_6777 = enumerator_6777.nextObject ()))) {
        macroValidPointer (operand_6777) ;
        var_cas_typedAttributeList.addAssign_operation (GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_6777->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (143)), operand_6777->mAttributeName) ;
      }
    }
    GGS_instanceMethodMap  var_cas_inheritedInstanceMethodMap ;
    const GGS_bool cond_7138 = (operand_6550->mSuperClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (149))).operator_isEqual (GGS_string ("")) ;
    if (cond_7138.isBuiltAndTrue ()) {
      var_cas_inheritedInstanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (150)) ;
    }else if (cond_7138.isBuiltAndFalse ()) {
      GGS_bool automatic_var_7235_0 ;
      GGS_unifiedTypeMapIndex  automatic_var_7235_1 ;
      GGS_typeKindEnum automatic_var_7235_2 ;
      GGS_typedAttributeList  automatic_var_7235_3 ;
      GGS_typedAttributeList  automatic_var_7235_4 ;
      GGS_constructorMap  automatic_var_7235_5 ;
      GGS_readerMap  automatic_var_7235_6 ;
      GGS_modifierMap  automatic_var_7235_7 ;
      GGS_classMethodMap  automatic_var_7235_8 ;
      GGS_enumerationDescriptorList  automatic_var_7235_9 ;
      GGS_uint  automatic_var_7235_10 ;
      GGS_unifiedTypeMapIndexList  automatic_var_7235_11 ;
      GGS_unifiedTypeMapIndexList  automatic_var_7235_12 ;
      GGS_nativeAttributeList  automatic_var_7235_13 ;
      const GGS_unifiedTypeMap  temp_7181 = var_cas_inSemanticContext.mTypeMap ;
      if (temp_7181.isBuilt ()) {
        temp_7181 (HERE)->method_searchKey (inLexique, operand_6550->mSuperClassName, automatic_var_7235_0, automatic_var_7235_1, automatic_var_7235_2, automatic_var_7235_3, automatic_var_7235_4, automatic_var_7235_5, automatic_var_7235_6, automatic_var_7235_7, var_cas_inheritedInstanceMethodMap, automatic_var_7235_8, automatic_var_7235_9, automatic_var_7235_10, automatic_var_7235_11, automatic_var_7235_12, automatic_var_7235_13 COMMA_SOURCE_FILE_AT_LINE (152)) ;
      }
    }
    GGS_unifiedTypeMapIndex  var_cas_superClassIndex ;
    const GGS_bool cond_7474 = (operand_6550->mSuperClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (156))).operator_isEqual (GGS_string ("")) ;
    if (cond_7474.isBuiltAndTrue ()) {
      var_cas_superClassIndex = GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("class"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (157)) COMMA_SOURCE_FILE_AT_LINE (157)) ;
    }else if (cond_7474.isBuiltAndFalse ()) {
      var_cas_superClassIndex = GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_6550->mSuperClassName COMMA_SOURCE_FILE_AT_LINE (159)) ;
    }
    GGS_abstractMethodDefinitionListForGeneration  var_cas_abstractMethodList = GGS_abstractMethodDefinitionListForGeneration ::constructor_emptyList () ;
    {
      GGS_abstractMethodDefinitionListAST::cEnumerator enumerator_7722 (operand_6550->mAbstractMethodList, true) ;
      const GGS_abstractMethodDefinitionListAST::cElement * operand_7722 = NULL ;
      while (((operand_7722 = enumerator_7722.nextObject ()))) {
        macroValidPointer (operand_7722) ;
        const GGS_bool cond_7908 = (operand_6550->mIsAbstract).operator_not () ;
        if (cond_7908.isBuiltAndTrue ()) {
          operand_7722->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a concrete class cannot declare an abstract method") COMMA_SOURCE_FILE_AT_LINE (167)) ;
        }
        GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
        {
          GGS_formalParameterListAST::cEnumerator enumerator_8053 (operand_7722->mSignature, true) ;
          const GGS_formalParameterListAST::cElement * operand_8053 = NULL ;
          while (((operand_8053 = enumerator_8053.nextObject ()))) {
            macroValidPointer (operand_8053) ;
            var_cas_formalParameterListForGeneration.addAssign_operation (operand_8053->mFormalParameterPassingMode, GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_8053->mFormalParameterTypeName COMMA_SOURCE_FILE_AT_LINE (173)), operand_8053->mFormalParameterName, operand_8053->mIsUnused) ;
          }
        }
        const GGS_bool cond_8772 = operand_7722->mIsOverriding ;
        if (cond_8772.isBuiltAndTrue ()) {
          GGS_formalParameterSignature  var_cas_inheritedSignature ;
          GGS_location  var_cas_inheritedDeclarationLocation ;
          GGS_bool automatic_var_8584_0 ;
          const GGS_instanceMethodMap  temp_8517 = var_cas_inheritedInstanceMethodMap ;
          if (temp_8517.isBuilt ()) {
            temp_8517 (HERE)->method_searchInheritedKey (inLexique, operand_7722->mMethodName, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_8584_0 COMMA_SOURCE_FILE_AT_LINE (182)) ;
          }
          ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_7722->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (185)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (183)) ;
        }else if (cond_8772.isBuiltAndFalse ()) {
          const GGS_bool cond_8955 = var_cas_inheritedInstanceMethodMap.reader_hasKey (operand_7722->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (189))) ;
          if (cond_8955.isBuiltAndTrue ()) {
            operand_7722->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this method cannot be declared as abstract, it is already declared in super class") COMMA_SOURCE_FILE_AT_LINE (191)) ;
          }
        }
        var_cas_abstractMethodList.addAssign_operation (operand_7722->mIsOverriding, operand_7722->mMethodName, var_cas_formalParameterListForGeneration) ;
      }
    }
    GGS_methodDefinitionListForGeneration  var_cas_methodList = GGS_methodDefinitionListForGeneration ::constructor_emptyList () ;
    {
      GGS_methodDefinitionListAST::cEnumerator enumerator_9171 (operand_6550->mMethodList, true) ;
      const GGS_methodDefinitionListAST::cElement * operand_9171 = NULL ;
      while (((operand_9171 = enumerator_9171.nextObject ()))) {
        macroValidPointer (operand_9171) ;
        GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
        {
          GGS_formalParameterListAST::cEnumerator enumerator_9314 (operand_9171->mSignature, true) ;
          const GGS_formalParameterListAST::cElement * operand_9314 = NULL ;
          while (((operand_9314 = enumerator_9314.nextObject ()))) {
            macroValidPointer (operand_9314) ;
            var_cas_formalParameterListForGeneration.addAssign_operation (operand_9314->mFormalParameterPassingMode, GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_9314->mFormalParameterTypeName COMMA_SOURCE_FILE_AT_LINE (202)), operand_9314->mFormalParameterName, operand_9314->mIsUnused) ;
          }
        }
        const GGS_bool cond_10033 = operand_9171->mIsOverriding ;
        if (cond_10033.isBuiltAndTrue ()) {
          GGS_formalParameterSignature  var_cas_inheritedSignature ;
          GGS_location  var_cas_inheritedDeclarationLocation ;
          GGS_bool automatic_var_9845_0 ;
          const GGS_instanceMethodMap  temp_9778 = var_cas_inheritedInstanceMethodMap ;
          if (temp_9778.isBuilt ()) {
            temp_9778 (HERE)->method_searchInheritedKey (inLexique, operand_9171->mMethodName, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_9845_0 COMMA_SOURCE_FILE_AT_LINE (211)) ;
          }
          ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_9171->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (214)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (212)) ;
        }else if (cond_10033.isBuiltAndFalse ()) {
          const GGS_bool cond_10216 = var_cas_inheritedInstanceMethodMap.reader_hasKey (operand_9171->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (218))) ;
          if (cond_10216.isBuiltAndTrue ()) {
            operand_9171->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this method cannot be declared as abstract, it is already declared in super class") COMMA_SOURCE_FILE_AT_LINE (220)) ;
          }
        }
        var_cas_methodList.addAssign_operation (operand_9171->mIsOverriding, operand_9171->mMethodName, var_cas_formalParameterListForGeneration, GGS_semanticInstructionListForGeneration ::constructor_emptyList ()) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_classDeclarationForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_6550->mClassTypeName COMMA_SOURCE_FILE_AT_LINE (230)), operand_6550->mIsAbstract, operand_6550->mClassTypeName, var_cas_superClassIndex, var_cas_typedAttributeList, var_cas_abstractMethodList, var_cas_methodList COMMA_SOURCE_FILE_AT_LINE (229))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "performSemanticAnalysis"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performSemanticAnalysis (C_Compiler & inLexique,
                                const GGS_semanticDeclarationListAST   var_cas_inDeclarationList,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                GGS_semanticDeclarationListForGeneration  & var_cas_outDecoratedDeclarationListForGeneration COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_performSemanticAnalysis at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outDecoratedDeclarationListForGeneration = GGS_semanticDeclarationListForGeneration ::constructor_emptyList () ;
  {
    GGS_semanticDeclarationListAST::cEnumerator enumerator_11437 (var_cas_inDeclarationList, true) ;
    const GGS_semanticDeclarationListAST::cElement * operand_11437 = NULL ;
    while (((operand_11437 = enumerator_11437.nextObject ()))) {
      macroValidPointer (operand_11437) ;
      const GGS_semanticDeclarationAST  temp_11490 = operand_11437->mSemanticDeclaration ;
      if (temp_11490.isBuilt ()) {
        typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis method = findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (temp_11490.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_11490 (HERE), var_cas_inSemanticContext, var_cas_outDecoratedDeclarationListForGeneration COMMA_SOURCE_FILE_AT_LINE (254)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_performSemanticAnalysis\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticAnalysis (void) {
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (category_method__semanticDeclarationAST__performSemanticAnalysis, gClassInfoFor__semanticDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__predefinedTypeAST__performSemanticAnalysis, gClassInfoFor__predefinedTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__listDeclarationAST__performSemanticAnalysis, gClassInfoFor__listDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__structDeclarationAST__performSemanticAnalysis, gClassInfoFor__structDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__genericTypeTypeAST__performSemanticAnalysis, gClassInfoFor__genericTypeTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__classDeclarationAST__performSemanticAnalysis, gClassInfoFor__classDeclarationAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticAnalysis (void) {
  gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticAnalysis (prologueRoutineFor_semanticAnalysis, epilogueRoutineFor_semanticAnalysis) ;

//---------------------------------------------------------------------------*

