//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'semanticAnalysis.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 26th, 2010, at 14h54'59"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "templateGrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "checkMethodSignatures"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkMethodSignatures (C_Compiler & inLexique,
                                const GGS_formalParameterListForGeneration   var_cas_inTestedSignature,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_formalParameterSignature   var_cas_inReferenceSignature,
                                const GGS_location   var_cas_inReferenceLocation
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkMethodSignatures at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_2809 = (var_cas_inTestedSignature.reader_length ()).operator_isNotEqual (var_cas_inReferenceSignature.reader_length ()) ;
  if (cond_2809.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("this method declares ")).operator_concat (var_cas_inTestedSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (43)))).operator_concat (GGS_string (" formal parameter(s), but overriden method declares "))).operator_concat (var_cas_inReferenceSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (44))) COMMA_SOURCE_FILE_AT_LINE (46)) ;
    var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden method is declared here") COMMA_SOURCE_FILE_AT_LINE (47)) ;
  }else if (cond_2809.isBuiltAndFalse ()) {
    {
      GGS_formalParameterSignature::cEnumerator enumerator_2842 (var_cas_inReferenceSignature, true) ;
      const GGS_formalParameterSignature::cElement * operand_2842 = NULL ;
      GGS_formalParameterListForGeneration::cEnumerator enumerator_2877 (var_cas_inTestedSignature, true) ;
      const GGS_formalParameterListForGeneration::cElement * operand_2877 = NULL ;
      while (((operand_2842 = enumerator_2842.nextObject ()))
          && ((operand_2877 = enumerator_2877.nextObject ()))) {
        macroValidPointer (operand_2842) ;
        macroValidPointer (operand_2877) ;
        const GGS_bool cond_3314 = (operand_2842->mFormalArgumentPassingMode).operator_isNotEqual (operand_2877->mFormalArgumentPassingMode) ;
        if (cond_3314.isBuiltAndTrue ()) {
          operand_2877->mFormalArgumentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("the '")).operator_concat (operand_2877->mFormalArgumentName)).operator_concat (GGS_string ("' formal parameter is declared as "))).operator_concat (operand_2877->mFormalArgumentPassingMode.reader_formalArgumentMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (51)))).operator_concat (GGS_string (", but overriden method declares it as "))).operator_concat (operand_2842->mFormalArgumentPassingMode.reader_formalArgumentMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (52))) COMMA_SOURCE_FILE_AT_LINE (53)) ;
          var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden method is declared here") COMMA_SOURCE_FILE_AT_LINE (54)) ;
        }
        const GGS_bool cond_3718 = (operand_2877->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (55))).operator_isNotEqual (operand_2842->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (55))) ;
        if (cond_3718.isBuiltAndTrue ()) {
          operand_2877->mFormalArgumentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the '")).operator_concat (operand_2877->mFormalArgumentName)).operator_concat (GGS_string ("' formal parameter has the '@"))).operator_concat (operand_2877->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (57)))).operator_concat (GGS_string ("' type, but overriden method declares with the '@"))).operator_concat (operand_2842->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (58)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (59)) ;
          var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden method is declared here") COMMA_SOURCE_FILE_AT_LINE (60)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkMethodSignatures\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@semanticDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticDeclarationAST__performSemanticAnalysis (C_Compiler &,
                                const cPtr_semanticDeclarationAST * operand_4213,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & /* var_cas_ioSemanticDeclarationListForGeneration */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4213 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticDeclarationAST.performSemanticAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis> gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis
findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.count ()) {
    result = gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (superClassPtr) ;
      gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@predefinedTypeAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__predefinedTypeAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_predefinedTypeAST * operand_4553,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4553 != NULL) {
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_primitiveTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, operand_4553->mPredefinedTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (86)) COMMA_SOURCE_FILE_AT_LINE (86)), operand_4553->mPredefinedTypeName, operand_4553->mKind COMMA_SOURCE_FILE_AT_LINE (85)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'e_attributeIndexMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

e_attributeIndexMap::e_attributeIndexMap (void) :
mAttributeTypeIndex () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class map '@attributeIndexMap'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_attributeIndexMap ("attributeIndexMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_attributeIndexMap::
elementOf_GGS_attributeIndexMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_attributeIndexMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_attributeIndexMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mAttributeTypeIndex.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_attributeIndexMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_attributeIndexMap * ptr = dynamic_cast <const elementOf_GGS_attributeIndexMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mAttributeTypeIndex.operator_isEqual (ptr->mInfo.mAttributeTypeIndex)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_attributeIndexMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_attributeIndexMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_attributeIndexMap * info = (e_attributeIndexMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_attributeIndexMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_attributeIndexMap * info = (e_attributeIndexMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_attributeIndexMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_attributeIndexMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_attributeIndexMap::
operator_isEqual (const GGS_attributeIndexMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_attributeIndexMap::
operator_isNotEqual (const GGS_attributeIndexMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_unifiedTypeMapProxy & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_attributeIndexMap info  ;
    info.mAttributeTypeIndex = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_unifiedTypeMapProxy   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mAttributeTypeIndex ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_attributeIndexMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_attributeIndexMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_attributeIndexMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_attributeIndexMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_attributeIndexMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_attributeIndexMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @attributeIndexMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_attributeIndexMap::cEnumerator::_mAttributeTypeIndex (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mAttributeTypeIndex ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_attributeIndexMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_attributeIndexMap * p = NULL ;
    macroMyNew (p, GGS_attributeIndexMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_attributeIndexMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_attributeIndexMap * p = dynamic_cast <const GGS_attributeIndexMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_attributeIndexMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_attributeIndexMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_attributeIndexMap ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_unifiedTypeMapProxy & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_attributeIndexMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@listDeclarationAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_listDeclarationAST * operand_5419,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5419 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (111)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_5720 (operand_5419->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_5720 = NULL ;
      while (((operand_5720 = enumerator_5720.nextObject ()))) {
        macroValidPointer (operand_5720) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_5720->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (113)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_5720->mAttributeName) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_5720->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (118)) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_listTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_5419->mListTypeName COMMA_SOURCE_FILE_AT_LINE (121)), var_cas_typedAttributeList COMMA_SOURCE_FILE_AT_LINE (120)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@sortedListDeclarationAST.performSemanticAnalysis'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sortedListDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_sortedListDeclarationAST * operand_6297,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6297 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (138)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_6613 (operand_6297->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_6613 = NULL ;
      while (((operand_6613 = enumerator_6613.nextObject ()))) {
        macroValidPointer (operand_6613) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_6613->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (140)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_6613->mAttributeName) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_6613->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (145)) ;
      }
    }
    GGS_stringset  var_cas_attributesUsedForSorting = GGS_stringset ::constructor_emptySet () ;
    GGS_sortDescriptorListForGeneration  var_cas_sortDescriptorList = GGS_sortDescriptorListForGeneration ::constructor_emptyList () ;
    {
      GGS_sortedListSortDescriptorListAST::cEnumerator enumerator_7007 (operand_6297->mSortDescriptorList, true) ;
      const GGS_sortedListSortDescriptorListAST::cElement * operand_7007 = NULL ;
      while (((operand_7007 = enumerator_7007.nextObject ()))) {
        macroValidPointer (operand_7007) ;
        GGS_unifiedTypeMapProxy  var_cas_type ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_7007->mSortedAttributeName, var_cas_type COMMA_SOURCE_FILE_AT_LINE (152)) ;
        }
        var_cas_sortDescriptorList.addAssign_operation (var_cas_type, operand_7007->mSortedAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (153)), operand_7007->mAscending) ;
        const GGS_bool cond_7365 = var_cas_attributesUsedForSorting.reader_hasKey (operand_7007->mSortedAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (154))) ;
        if (cond_7365.isBuiltAndTrue ()) {
          operand_7007->mSortedAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_7007->mSortedAttributeName)).operator_concat (GGS_string ("' is already used for sorting")) COMMA_SOURCE_FILE_AT_LINE (156)) ;
        }
        var_cas_attributesUsedForSorting.addAssign_operation (operand_7007->mSortedAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (157))) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_sortedListTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_6297->mSortedListTypeName COMMA_SOURCE_FILE_AT_LINE (161)), var_cas_typedAttributeList, var_cas_sortDescriptorList COMMA_SOURCE_FILE_AT_LINE (160)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@structDeclarationAST.performSemanticAnalysis'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__structDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_structDeclarationAST * operand_7855,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7855 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (178)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_8156 (operand_7855->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_8156 = NULL ;
      while (((operand_8156 = enumerator_8156.nextObject ()))) {
        macroValidPointer (operand_8156) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_8156->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (180)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_8156->mAttributeName) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_8156->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (185)) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_structTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_7855->mStructTypeName COMMA_SOURCE_FILE_AT_LINE (188)), var_cas_typedAttributeList COMMA_SOURCE_FILE_AT_LINE (187)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'e_constantIndexMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

e_constantIndexMap::e_constantIndexMap (void) :
mIndex () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class map '@constantIndexMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_constantIndexMap ("constantIndexMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_constantIndexMap::
elementOf_GGS_constantIndexMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_constantIndexMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_constantIndexMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mIndex.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_constantIndexMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_constantIndexMap * ptr = dynamic_cast <const elementOf_GGS_constantIndexMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mIndex.operator_isEqual (ptr->mInfo.mIndex)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_constantIndexMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_constantIndexMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_constantIndexMap * info = (e_constantIndexMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_constantIndexMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_constantIndexMap * info = (e_constantIndexMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_constantIndexMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_constantIndexMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_constantIndexMap::
operator_isEqual (const GGS_constantIndexMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_constantIndexMap::
operator_isNotEqual (const GGS_constantIndexMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_uint & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_constantIndexMap info  ;
    info.mIndex = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mIndex ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_constantIndexMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_constantIndexMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_constantIndexMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_constantIndexMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_constantIndexMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_constantIndexMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @constantIndexMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_constantIndexMap::cEnumerator::_mIndex (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mIndex ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_constantIndexMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_constantIndexMap * p = NULL ;
    macroMyNew (p, GGS_constantIndexMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_constantIndexMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_constantIndexMap * p = dynamic_cast <const GGS_constantIndexMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_constantIndexMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_constantIndexMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_constantIndexMap ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_uint & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_constantIndexMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@enumDeclarationAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__enumDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_enumDeclarationAST * operand_8999,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8999 != NULL) {
    GGS_stringlist  var_cas_constantList = GGS_stringlist ::constructor_emptyList () ;
    GGS_constantIndexMap  var_cas_constantMap = GGS_constantIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (212)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_9302 (operand_8999->mConstantList, true) ;
      const GGS_lstringlist::cElement * operand_9302 = NULL ;
      while (((operand_9302 = enumerator_9302.nextObject ()))) {
        macroValidPointer (operand_9302) ;
        var_cas_constantList.addAssign_operation (operand_9302->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (214))) ;
        var_cas_constantMap.modifier_insertKey (inLexique, operand_9302->mValue, var_cas_constantMap.reader_count () COMMA_SOURCE_FILE_AT_LINE (215)) ;
      }
    }
    const GGS_stringset  var_cas_constantSet = var_cas_constantMap.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (217)) ;
    GGS_enumMessageListForGeneration  var_cas_enumMessageList = GGS_enumMessageListForGeneration ::constructor_emptyList () ;
    GGS_stringset  var_cas_messageNameSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_enumMessageListAST::cEnumerator enumerator_9623 (operand_8999->mEnumMessageList, true) ;
      const GGS_enumMessageListAST::cElement * operand_9623 = NULL ;
      while (((operand_9623 = enumerator_9623.nextObject ()))) {
        macroValidPointer (operand_9623) ;
        const GGS_bool cond_9784 = var_cas_messageNameSet.reader_hasKey (operand_9623->mEnumMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (222))) ;
        if (cond_9784.isBuiltAndTrue ()) {
          operand_9623->mEnumMessageName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this message is already declared for this enum type") COMMA_SOURCE_FILE_AT_LINE (224)) ;
        }
        var_cas_messageNameSet.addAssign_operation (operand_9623->mEnumMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (225))) ;
        GGS_enumMessageAssociationSortedListForGeneration  var_cas_enumMessageAssociationSortedListForGeneration = GGS_enumMessageAssociationSortedListForGeneration ::constructor_emptySortedList () ;
        GGS_stringset  var_cas_usedConstantSet = GGS_stringset ::constructor_emptySet () ;
        {
          GGS_enumMessageAssociationListAST::cEnumerator enumerator_10074 (operand_9623->mMessageAssociationList, true) ;
          const GGS_enumMessageAssociationListAST::cElement * operand_10074 = NULL ;
          while (((operand_10074 = enumerator_10074.nextObject ()))) {
            macroValidPointer (operand_10074) ;
            GGS_uint  var_cas_constantIndex ;
            if (var_cas_constantMap.isBuilt ()) {
              var_cas_constantMap (HERE)->method_searchKey (inLexique, operand_10074->mConstantName, var_cas_constantIndex COMMA_SOURCE_FILE_AT_LINE (230)) ;
            }
            var_cas_usedConstantSet.addAssign_operation (operand_10074->mConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (231))) ;
            var_cas_enumMessageAssociationSortedListForGeneration.addAssign_operation (var_cas_constantIndex, operand_10074->mConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (234)), operand_10074->mMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (235))) ;
          }
        }
        const GGS_stringset  var_cas_missedConstantSet = var_cas_constantSet.substract_operation (inLexique, var_cas_usedConstantSet COMMA_SOURCE_FILE_AT_LINE (238)) ;
        {
          GGS_stringset::cEnumerator enumerator_10485 (var_cas_missedConstantSet, true) ;
          while (enumerator_10485.hasCurrentObject ()) {
            operand_9623->mEnumMessageName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (operand_9623->mEnumMessageName)).operator_concat (GGS_string ("' message definition does not name the '"))).operator_concat (enumerator_10485._key (HERE))).operator_concat (GGS_string ("' constant")) COMMA_SOURCE_FILE_AT_LINE (242)) ;
            enumerator_10485.next () ;
          }
        }
        var_cas_enumMessageList.addAssign_operation (operand_9623->mEnumMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (243)), var_cas_enumMessageAssociationSortedListForGeneration) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_enumTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_8999->mEnumTypeName COMMA_SOURCE_FILE_AT_LINE (247)), var_cas_constantList, var_cas_enumMessageList COMMA_SOURCE_FILE_AT_LINE (246)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@listmapDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listmapDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_listmapDeclarationAST * operand_11124,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11124 != NULL) {
    GGS_typeKindEnum var_cas_typeKindEnum ;
    GGS_typedAttributeList  var_cas_listTypeAttributeList ;
    GGS_bool automatic_var_11534_0 ;
    GGS_unifiedTypeMapProxy  automatic_var_11534_1 ;
    GGS_attributeMap  automatic_var_11534_2 ;
    GGS_typedAttributeList  automatic_var_11534_3 ;
    GGS_constructorMap  automatic_var_11534_4 ;
    GGS_readerMap  automatic_var_11534_5 ;
    GGS_modifierMap  automatic_var_11534_6 ;
    GGS_instanceMethodMap  automatic_var_11534_7 ;
    GGS_classMethodMap  automatic_var_11534_8 ;
    GGS_enumerationDescriptorList  automatic_var_11534_9 ;
    GGS_uint  automatic_var_11534_10 ;
    GGS_unifiedTypeMapProxyList  automatic_var_11534_11 ;
    GGS_nativeAttributeList  automatic_var_11534_12 ;
    GGS_stringset  automatic_var_11534_13 ;
    GGS_lstringlist  automatic_var_11534_14 ;
    GGS_typedAttributeList  automatic_var_11534_15 ;
    GGS_mapSearchMethodListAST  automatic_var_11534_16 ;
    GGS_mapSearchMethodListAST  automatic_var_11534_17 ;
    GGS_withAccessorMap  automatic_var_11534_18 ;
    if (var_cas_inSemanticContext.mTypeMap.isBuilt ()) {
      var_cas_inSemanticContext.mTypeMap (HERE)->method_searchKey (inLexique, operand_11124->mAssociatedListTypeName, automatic_var_11534_0, automatic_var_11534_1, var_cas_typeKindEnum, var_cas_listTypeAttributeList, automatic_var_11534_2, automatic_var_11534_3, automatic_var_11534_4, automatic_var_11534_5, automatic_var_11534_6, automatic_var_11534_7, automatic_var_11534_8, automatic_var_11534_9, automatic_var_11534_10, automatic_var_11534_11, automatic_var_11534_12, automatic_var_11534_13, automatic_var_11534_14, automatic_var_11534_15, automatic_var_11534_16, automatic_var_11534_17, automatic_var_11534_18 COMMA_SOURCE_FILE_AT_LINE (265)) ;
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_listmapTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_11124->mListmapTypeName COMMA_SOURCE_FILE_AT_LINE (268)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_11124->mAssociatedListTypeName COMMA_SOURCE_FILE_AT_LINE (269)), var_cas_listTypeAttributeList COMMA_SOURCE_FILE_AT_LINE (267)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class map '@insertMethodMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_insertMethodMap ("insertMethodMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_insertMethodMap::
elementOf_GGS_insertMethodMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_insertMethodMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_insertMethodMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_insertMethodMap::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_insertMethodMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_insertMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_insertMethodMap * info = (e_insertMethodMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_insertMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_insertMethodMap * info = (e_insertMethodMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_insertMethodMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_insertMethodMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_insertMethodMap::
operator_isEqual (const GGS_insertMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_insertMethodMap::
operator_isNotEqual (const GGS_insertMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_insertMethodMap info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_insertMethodMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_insertMethodMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_insertMethodMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_insertMethodMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_insertMethodMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @insertMethodMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_insertMethodMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_insertMethodMap * p = NULL ;
    macroMyNew (p, GGS_insertMethodMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_insertMethodMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_insertMethodMap * p = dynamic_cast <const GGS_insertMethodMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_insertMethodMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_insertMethodMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_insertMethodMap ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_insertMethodMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class map '@searchMethodMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_searchMethodMap ("searchMethodMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_searchMethodMap::
elementOf_GGS_searchMethodMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_searchMethodMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_searchMethodMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_searchMethodMap::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_searchMethodMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_searchMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_searchMethodMap * info = (e_searchMethodMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_searchMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_searchMethodMap * info = (e_searchMethodMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_searchMethodMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_searchMethodMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_searchMethodMap::
operator_isEqual (const GGS_searchMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_searchMethodMap::
operator_isNotEqual (const GGS_searchMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_searchMethodMap info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_searchMethodMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_searchMethodMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_searchMethodMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_searchMethodMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_searchMethodMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @searchMethodMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_searchMethodMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_searchMethodMap * p = NULL ;
    macroMyNew (p, GGS_searchMethodMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_searchMethodMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_searchMethodMap * p = dynamic_cast <const GGS_searchMethodMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_searchMethodMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_searchMethodMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_searchMethodMap ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_searchMethodMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@mapDeclarationAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_mapDeclarationAST * operand_12359,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12359 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (297)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_12678 (operand_12359->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_12678 = NULL ;
      while (((operand_12678 = enumerator_12678.nextObject ()))) {
        macroValidPointer (operand_12678) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_12678->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (299)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_12678->mAttributeName) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_12678->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (304)) ;
      }
    }
    GGS_insertMethodMap  var_cas_insertMethodMap = GGS_insertMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (307)) ;
    {
      GGS_insertMethodListAST::cEnumerator enumerator_13006 (operand_12359->mInsertMethodList, true) ;
      const GGS_insertMethodListAST::cElement * operand_13006 = NULL ;
      while (((operand_13006 = enumerator_13006.nextObject ()))) {
        macroValidPointer (operand_13006) ;
        var_cas_insertMethodMap.modifier_insertKey (inLexique, operand_13006->mMethodName COMMA_SOURCE_FILE_AT_LINE (309)) ;
        {
          GGS_stringlist::cEnumerator enumerator_13136 (operand_13006->mErrorMessage.ggs_string ().reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_13136 = NULL ;
          while (((operand_13136 = enumerator_13136.nextObject ()))) {
            macroValidPointer (operand_13136) ;
            GGS_stringlist  var_cas_explodedArray = operand_13136->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_13302_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_13302_0 COMMA_SOURCE_FILE_AT_LINE (313)) ;
            {
              GGS_stringlist::cEnumerator enumerator_13332 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_13332 = NULL ;
              while (((operand_13332 = enumerator_13332.nextObject ()))) {
                macroValidPointer (operand_13332) ;
                const GGS_bool cond_13620 = (operand_13332->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_13620.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_13332->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (316)) ;
                  const GGS_bool cond_13603 = ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K')))).operator_and ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('L')))) ;
                  if (cond_13603.isBuiltAndTrue ()) {
                    operand_13006->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K', '%L' and '%%' escape sequences are allowed in an insert error message") COMMA_SOURCE_FILE_AT_LINE (319)) ;
                  }
                }
              }
            }
          }
        }
        {
          GGS_stringlist::cEnumerator enumerator_13748 (operand_13006->mShadowErrorMessage.ggs_string ().reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_13748 = NULL ;
          while (((operand_13748 = enumerator_13748.nextObject ()))) {
            macroValidPointer (operand_13748) ;
            GGS_stringlist  var_cas_explodedArray = operand_13748->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_13920_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_13920_0 COMMA_SOURCE_FILE_AT_LINE (326)) ;
            {
              GGS_stringlist::cEnumerator enumerator_13950 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_13950 = NULL ;
              while (((operand_13950 = enumerator_13950.nextObject ()))) {
                macroValidPointer (operand_13950) ;
                const GGS_bool cond_14237 = (operand_13950->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_14237.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_13950->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (329)) ;
                  const GGS_bool cond_14220 = ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K')))).operator_and ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('L')))) ;
                  if (cond_14220.isBuiltAndTrue ()) {
                    operand_13006->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K', '%L' and '%%' escape sequences are allowed in a shadow error message") COMMA_SOURCE_FILE_AT_LINE (332)) ;
                  }
                }
              }
            }
          }
        }
      }
    }
    GGS_searchMethodMap  var_cas_searchMethodMap = GGS_searchMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (338)) ;
    {
      GGS_mapSearchMethodListAST::cEnumerator enumerator_14398 (operand_12359->mSearchMethodList, true) ;
      const GGS_mapSearchMethodListAST::cElement * operand_14398 = NULL ;
      while (((operand_14398 = enumerator_14398.nextObject ()))) {
        macroValidPointer (operand_14398) ;
        var_cas_searchMethodMap.modifier_insertKey (inLexique, operand_14398->mMethodName COMMA_SOURCE_FILE_AT_LINE (340)) ;
        {
          GGS_stringlist::cEnumerator enumerator_14524 (operand_14398->mErrorMessage.ggs_string ().reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_14524 = NULL ;
          while (((operand_14524 = enumerator_14524.nextObject ()))) {
            macroValidPointer (operand_14524) ;
            GGS_stringlist  var_cas_explodedArray = operand_14524->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_14690_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_14690_0 COMMA_SOURCE_FILE_AT_LINE (344)) ;
            {
              GGS_stringlist::cEnumerator enumerator_14720 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_14720 = NULL ;
              while (((operand_14720 = enumerator_14720.nextObject ()))) {
                macroValidPointer (operand_14720) ;
                const GGS_bool cond_14986 = (operand_14720->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_14986.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_14720->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (347)) ;
                  const GGS_bool cond_14969 = (var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K'))) ;
                  if (cond_14969.isBuiltAndTrue ()) {
                    operand_14398->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K' and '%%' escape sequences are allowed in a search error message") COMMA_SOURCE_FILE_AT_LINE (350)) ;
                  }
                }
              }
            }
          }
        }
      }
    }
    {
      GGS_mapRemoveMethodListAST::cEnumerator enumerator_15099 (operand_12359->mRemoveMethodList, true) ;
      const GGS_mapRemoveMethodListAST::cElement * operand_15099 = NULL ;
      while (((operand_15099 = enumerator_15099.nextObject ()))) {
        macroValidPointer (operand_15099) ;
        var_cas_insertMethodMap.modifier_insertKey (inLexique, operand_15099->mMethodName COMMA_SOURCE_FILE_AT_LINE (357)) ;
        {
          GGS_stringlist::cEnumerator enumerator_15225 (operand_15099->mErrorMessage.ggs_string ().reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_15225 = NULL ;
          while (((operand_15225 = enumerator_15225.nextObject ()))) {
            macroValidPointer (operand_15225) ;
            GGS_stringlist  var_cas_explodedArray = operand_15225->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_15391_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_15391_0 COMMA_SOURCE_FILE_AT_LINE (361)) ;
            {
              GGS_stringlist::cEnumerator enumerator_15421 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_15421 = NULL ;
              while (((operand_15421 = enumerator_15421.nextObject ()))) {
                macroValidPointer (operand_15421) ;
                const GGS_bool cond_15687 = (operand_15421->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_15687.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_15421->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (364)) ;
                  const GGS_bool cond_15670 = (var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K'))) ;
                  if (cond_15670.isBuiltAndTrue ()) {
                    operand_15099->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K' and '%%' escape sequences are allowed in a remove error message") COMMA_SOURCE_FILE_AT_LINE (367)) ;
                  }
                }
              }
            }
          }
        }
      }
    }
    {
        GGS_uint var_cas_IDX (true, 0) ;
      GGS_insertOrReplaceDeclarationListAST::cEnumerator enumerator_15859 (operand_12359->mInsertOrReplaceDeclarationListAST, true) ;
      const GGS_insertOrReplaceDeclarationListAST::cElement * operand_15859 = NULL ;
      while (((operand_15859 = enumerator_15859.nextObject ()))) {
        macroValidPointer (operand_15859) ;
        const GGS_bool cond_16006 = (var_cas_IDX).operator_strictSup (GGS_uint (0U)) ;
        if (cond_16006.isBuiltAndTrue ()) {
          operand_15859->mInsertOrReplaceDeclarationLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("the 'insertOrReplace' modifier is already declared") COMMA_SOURCE_FILE_AT_LINE (375)) ;
        }
        var_cas_IDX.mValue ++ ;
      }
    }
    const GGS_bool var_cas_hasInsertOrReplaceModifier = (operand_12359->mInsertOrReplaceDeclarationListAST.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    const GGS_bool cond_16521 = (var_cas_hasInsertOrReplaceModifier).operator_and (var_cas_insertMethodMap.reader_hasKey (GGS_string ("insertOrReplace"))) ;
    if (cond_16521.isBuiltAndTrue ()) {
      GGS_location  var_cas_insertOrReplaceDeclarationLocation ;
      if (operand_12359->mInsertOrReplaceDeclarationListAST.isBuilt ()) {
        operand_12359->mInsertOrReplaceDeclarationListAST (HERE)->method_first (inLexique, var_cas_insertOrReplaceDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (381)) ;
      }
      var_cas_insertOrReplaceDeclarationLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the insertOrReplace' modifier cannot be declared : an insert modifier or a remove modifier has been declared with this name") COMMA_SOURCE_FILE_AT_LINE (383)) ;
    }
    GGS_withAccessorMap  var_cas_withAccessorMap = GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (385)) ;
    var_cas_withAccessorMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("hasKey"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (386)), var_cas_inPredefinedTypes.mStringType COMMA_SOURCE_FILE_AT_LINE (386)) ;
    {
      GGS_mapSearchMethodListAST::cEnumerator enumerator_16728 (operand_12359->mSearchMethodList, true) ;
      const GGS_mapSearchMethodListAST::cElement * operand_16728 = NULL ;
      while (((operand_16728 = enumerator_16728.nextObject ()))) {
        macroValidPointer (operand_16728) ;
        var_cas_withAccessorMap.modifier_insertKey (inLexique, operand_16728->mMethodName, var_cas_inPredefinedTypes.mLStringType COMMA_SOURCE_FILE_AT_LINE (388)) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_mapTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_12359->mMapTypeName COMMA_SOURCE_FILE_AT_LINE (395)), operand_12359->mMapTypeName, var_cas_typedAttributeList, operand_12359->mInsertMethodList, operand_12359->mSearchMethodList, operand_12359->mRemoveMethodList, var_cas_hasInsertOrReplaceModifier, var_cas_withAccessorMap COMMA_SOURCE_FILE_AT_LINE (394)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@mapProxyDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapProxyDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_mapProxyDeclarationAST * operand_17361,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17361 != NULL) {
    GGS_typedAttributeList  var_cas_listTypeAttributeList ;
    GGS_mapSearchMethodListAST  var_cas_searchMethodList ;
    GGS_bool automatic_var_17788_0 ;
    GGS_unifiedTypeMapProxy  automatic_var_17788_1 ;
    GGS_typeKindEnum automatic_var_17788_2 ;
    GGS_typedAttributeList  automatic_var_17788_3 ;
    GGS_attributeMap  automatic_var_17788_4 ;
    GGS_constructorMap  automatic_var_17788_5 ;
    GGS_readerMap  automatic_var_17788_6 ;
    GGS_modifierMap  automatic_var_17788_7 ;
    GGS_instanceMethodMap  automatic_var_17788_8 ;
    GGS_classMethodMap  automatic_var_17788_9 ;
    GGS_enumerationDescriptorList  automatic_var_17788_10 ;
    GGS_uint  automatic_var_17788_11 ;
    GGS_unifiedTypeMapProxyList  automatic_var_17788_12 ;
    GGS_nativeAttributeList  automatic_var_17788_13 ;
    GGS_stringset  automatic_var_17788_14 ;
    GGS_lstringlist  automatic_var_17788_15 ;
    GGS_typedAttributeList  automatic_var_17788_16 ;
    GGS_mapSearchMethodListAST  automatic_var_17788_17 ;
    GGS_withAccessorMap  automatic_var_17788_18 ;
    if (var_cas_inSemanticContext.mTypeMap.isBuilt ()) {
      var_cas_inSemanticContext.mTypeMap (HERE)->method_searchKey (inLexique, operand_17361->mAssociatedMapTypeName, automatic_var_17788_0, automatic_var_17788_1, automatic_var_17788_2, automatic_var_17788_3, automatic_var_17788_4, var_cas_listTypeAttributeList, automatic_var_17788_5, automatic_var_17788_6, automatic_var_17788_7, automatic_var_17788_8, automatic_var_17788_9, automatic_var_17788_10, automatic_var_17788_11, automatic_var_17788_12, automatic_var_17788_13, automatic_var_17788_14, automatic_var_17788_15, automatic_var_17788_16, var_cas_searchMethodList, automatic_var_17788_17, automatic_var_17788_18 COMMA_SOURCE_FILE_AT_LINE (418)) ;
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_mapProxyTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_17361->mMapProxyTypeName COMMA_SOURCE_FILE_AT_LINE (421)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_17361->mAssociatedMapTypeName COMMA_SOURCE_FILE_AT_LINE (422)), var_cas_listTypeAttributeList, var_cas_searchMethodList COMMA_SOURCE_FILE_AT_LINE (420)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class map '@declaredMethodMap'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_declaredMethodMap ("declaredMethodMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_declaredMethodMap::
elementOf_GGS_declaredMethodMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_declaredMethodMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_declaredMethodMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_declaredMethodMap::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_declaredMethodMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_declaredMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_declaredMethodMap * info = (e_declaredMethodMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_declaredMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_declaredMethodMap * info = (e_declaredMethodMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_declaredMethodMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_declaredMethodMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_declaredMethodMap::
operator_isEqual (const GGS_declaredMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_declaredMethodMap::
operator_isNotEqual (const GGS_declaredMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_declaredMethodMap info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_declaredMethodMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_declaredMethodMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_declaredMethodMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_declaredMethodMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_declaredMethodMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @declaredMethodMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_declaredMethodMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_declaredMethodMap * p = NULL ;
    macroMyNew (p, GGS_declaredMethodMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_declaredMethodMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_declaredMethodMap * p = dynamic_cast <const GGS_declaredMethodMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_declaredMethodMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_declaredMethodMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_declaredMethodMap ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_declaredMethodMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "buildLocalVariableMapAndSignature"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildLocalVariableMapAndSignature (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_formalParameterListAST   var_cas_inRoutineSignatureAST,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_formalParameterListForGeneration  & var_cas_outRoutineSignature
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildLocalVariableMapAndSignature at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outRoutineSignature = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
  {
    GGS_formalParameterListAST::cEnumerator enumerator_18805 (var_cas_inRoutineSignatureAST, true) ;
    const GGS_formalParameterListAST::cElement * operand_18805 = NULL ;
    while (((operand_18805 = enumerator_18805.nextObject ()))) {
      macroValidPointer (operand_18805) ;
      const GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_18805->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (446)) ;
      GGS_string var_cas_formalArgumentCppName ;
      switch (operand_18805->mFormalArgumentPassingMode.enumValue ()) {
      case GGS_formalArgumentPassingModeAST::enum_argumentIn:
        {
        var_cas_formalArgumentCppName = (GGS_string ("inArgument_")).operator_concat (operand_18805->mFormalArgumentName.ggs_string ().reader_identifierRepresentation ()) ;
        const GGS_bool cond_19282 = operand_18805->mIsUnused ;
        if (cond_19282.isBuiltAndTrue ()) {
          var_cas_ioVariableMap.modifier_insertInputFormalArgumentDeclaredAsUnused (inLexique, operand_18805->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (452)) ;
        }else if (cond_19282.isBuiltAndFalse ()) {
          var_cas_ioVariableMap.modifier_insertInputFormalArgument (inLexique, operand_18805->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (454)) ;
        }
        }
        break ;
      case GGS_formalArgumentPassingModeAST::enum_argumentOut:
        {
        var_cas_formalArgumentCppName = (GGS_string ("outArgument_")).operator_concat (operand_18805->mFormalArgumentName.ggs_string ().reader_identifierRepresentation ()) ;
        var_cas_ioVariableMap.modifier_insertOutputFormalArgument (inLexique, operand_18805->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (458)) ;
        }
        break ;
      case GGS_formalArgumentPassingModeAST::enum_argumentInOut:
        {
        var_cas_formalArgumentCppName = (GGS_string ("ioArgument_")).operator_concat (operand_18805->mFormalArgumentName.ggs_string ().reader_identifierRepresentation ()) ;
        const GGS_bool cond_19975 = operand_18805->mIsUnused ;
        if (cond_19975.isBuiltAndTrue ()) {
          var_cas_ioVariableMap.modifier_insertInputOutputFormalArgumentDeclaredAsUnused (inLexique, operand_18805->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (462)) ;
        }else if (cond_19975.isBuiltAndFalse ()) {
          var_cas_ioVariableMap.modifier_insertInputOutputFormalArgument (inLexique, operand_18805->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (464)) ;
        }
        }
        break ;
      case GGS_formalArgumentPassingModeAST::enum_argumentConstantIn:
        {
        var_cas_formalArgumentCppName = (GGS_string ("constinArgument_")).operator_concat (operand_18805->mFormalArgumentName.ggs_string ().reader_identifierRepresentation ()) ;
        const GGS_bool cond_20440 = operand_18805->mIsUnused ;
        if (cond_20440.isBuiltAndTrue ()) {
          var_cas_ioVariableMap.modifier_insertConstantInputFormalArgumentDeclaredAsUnused (inLexique, operand_18805->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (469)) ;
        }else if (cond_20440.isBuiltAndFalse ()) {
          var_cas_ioVariableMap.modifier_insertConstantInputFormalArgument (inLexique, operand_18805->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (471)) ;
        }
        }
        break ;
      case GGS_formalArgumentPassingModeAST::kNotBuilt:
        break ;
      }
      var_cas_outRoutineSignature.addAssign_operation (operand_18805->mFormalArgumentPassingMode, var_cas_type, operand_18805->mFormalArgumentName, var_cas_formalArgumentCppName) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildLocalVariableMapAndSignature\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "analyzeRoutineBody"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeRoutineBody (C_Compiler & inLexique,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                const GGS_formalParameterListAST   var_cas_inRoutineSignatureAST,
                                const GGS_localConstantList   var_cas_inLocalConstantList,
                                const GGS_typedAttributeList   var_cas_inTypedAttributeList,
                                const GGS_string  var_cas_inAttributeVariableNamePrefix,
                                const GGS_semanticInstructionListAST   var_cas_inInstructionList,
                                const GGS_location   var_cas_inEndOfMethodLocation,
                                GGS_semanticInstructionListForGeneration  & var_cas_outSemanticInstructionListForGeneration,
                                GGS_formalParameterListForGeneration  & var_cas_outRoutineSignature
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeRoutineBody at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_variableMap  var_cas_variableMap = GGS_variableMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (491)) ;
  {
    GGS_localConstantList::cEnumerator enumerator_21395 (var_cas_inLocalConstantList, true) ;
    const GGS_localConstantList::cElement * operand_21395 = NULL ;
    while (((operand_21395 = enumerator_21395.nextObject ()))) {
      macroValidPointer (operand_21395) ;
      const GGS_bool cond_21527 = operand_21395->mNoWarningIfUnused ;
      if (cond_21527.isBuiltAndTrue ()) {
        var_cas_variableMap.modifier_insertUsedLocalConstant (inLexique, operand_21395->mName, operand_21395->mType, operand_21395->mCppName, function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (495)) COMMA_SOURCE_FILE_AT_LINE (495)) ;
      }else if (cond_21527.isBuiltAndFalse ()) {
        var_cas_variableMap.modifier_insertLocalConstant (inLexique, operand_21395->mName, operand_21395->mType, operand_21395->mCppName, function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (497)) COMMA_SOURCE_FILE_AT_LINE (497)) ;
      }
    }
  }
  {
    GGS_typedAttributeList::cEnumerator enumerator_21703 (var_cas_inTypedAttributeList, true) ;
    const GGS_typedAttributeList::cElement * operand_21703 = NULL ;
    while (((operand_21703 = enumerator_21703.nextObject ()))) {
      macroValidPointer (operand_21703) ;
      var_cas_variableMap.modifier_insertNonMutableAttribute (inLexique, operand_21703->mAttributeName, operand_21703->mAttributeTypeIndex, ((var_cas_inAttributeVariableNamePrefix).operator_concat (GGS_string ("mAttribute_"))).operator_concat (operand_21703->mAttributeName.ggs_string ().reader_identifierRepresentation ()), function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (506)) COMMA_SOURCE_FILE_AT_LINE (502)) ;
    }
  }
  ::routine_buildLocalVariableMapAndSignature (inLexique,  var_cas_inAnalysisContext.mSemanticContext,  var_cas_inRoutineSignatureAST,  var_cas_variableMap,  var_cas_outRoutineSignature COMMA_SOURCE_FILE_AT_LINE (510)) ;
  var_cas_outSemanticInstructionListForGeneration = GGS_semanticInstructionListForGeneration ::constructor_emptyList () ;
  {
    GGS_semanticInstructionListAST::cEnumerator enumerator_22278 (var_cas_inInstructionList, true) ;
    const GGS_semanticInstructionListAST::cElement * operand_22278 = NULL ;
    while (((operand_22278 = enumerator_22278.nextObject ()))) {
      macroValidPointer (operand_22278) ;
      { typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction method = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (operand_22278->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_22278->mInstruction (HERE), var_cas_inAnalysisContext, var_cas_outSemanticInstructionListForGeneration, var_cas_variableMap COMMA_SOURCE_FILE_AT_LINE (519)) ;
        }
      }
    }
  }
  if (var_cas_variableMap.isBuilt ()) {
    var_cas_variableMap (HERE)->method_checkAutomatonStates (inLexique, var_cas_inEndOfMethodLocation COMMA_SOURCE_FILE_AT_LINE (526)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeRoutineBody\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@externFunctionDeclarationAST.performSemanticAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externFunctionDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_externFunctionDeclarationAST * operand_22675,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22675 != NULL) {
    GGS_formalInputParameterListForGeneration  var_cas_formalArgumentList = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
    {
      GGS_formalInputParameterListAST::cEnumerator enumerator_22953 (operand_22675->mFormalArgumentList, true) ;
      const GGS_formalInputParameterListAST::cElement * operand_22953 = NULL ;
      while (((operand_22953 = enumerator_22953.nextObject ()))) {
        macroValidPointer (operand_22953) ;
        var_cas_formalArgumentList.addAssign_operation (GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_22953->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (539)), operand_22953->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (540)), operand_22953->mIsUnused) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_functionPrototypeDeclarationForGeneration ::constructor_new (inLexique, operand_22675->mFunctionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (545)), var_cas_formalArgumentList, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_22675->mResultTypeName COMMA_SOURCE_FILE_AT_LINE (547)) COMMA_SOURCE_FILE_AT_LINE (544)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@externRoutineDeclarationAST.performSemanticAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externRoutineDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_externRoutineDeclarationAST * operand_23556,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23556 != NULL) {
    GGS_formalParameterListForGeneration  var_cas_formalArgumentList = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    {
      GGS_formalParameterListAST::cEnumerator enumerator_23829 (operand_23556->mFormalArgumentList, true) ;
      const GGS_formalParameterListAST::cElement * operand_23829 = NULL ;
      while (((operand_23829 = enumerator_23829.nextObject ()))) {
        macroValidPointer (operand_23829) ;
        var_cas_formalArgumentList.addAssign_operation (operand_23829->mFormalArgumentPassingMode, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_23829->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (564)), operand_23829->mFormalArgumentName, operand_23829->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (566))) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_routinePrototypeDeclarationForGeneration ::constructor_new (inLexique, operand_23556->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (570)), var_cas_formalArgumentList COMMA_SOURCE_FILE_AT_LINE (569)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@routineDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__routineDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_routineDeclarationAST * operand_24384,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24384 != NULL) {
    GGS_formalParameterListForGeneration  var_cas_formalArgumentList = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (590)), GGS_string ("")) ;
    ::routine_analyzeRoutineBody (inLexique,  var_cas_analysisContext,  operand_24384->mFormalArgumentList,  GGS_localConstantList ::constructor_emptyList (),  GGS_typedAttributeList ::constructor_emptyList (),  GGS_string (""),  operand_24384->mRoutineInstructionList,  operand_24384->mEndOfRoutineInstructionList,  var_cas_instructionList,  var_cas_formalArgumentList COMMA_SOURCE_FILE_AT_LINE (593)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_routineImplementationForGeneration ::constructor_new (inLexique, operand_24384->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (606)), var_cas_formalArgumentList, var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (605)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@classDeclarationAST.performSemanticAnalysis'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__classDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_classDeclarationAST * operand_25430,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25430 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_25430->mClassTypeName COMMA_SOURCE_FILE_AT_LINE (622)) ;
    GGS_unifiedTypeMapProxy  var_cas_superClassProxy ;
    GGS_typedAttributeList  var_cas_allAttributeList ;
    GGS_instanceMethodMap  var_cas_inheritedInstanceMethodMap ;
    const GGS_bool cond_26112 = (operand_25430->mSuperClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (627))).operator_isEqual (GGS_string ("")) ;
    if (cond_26112.isBuiltAndTrue ()) {
      var_cas_superClassProxy = GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (628)) ;
      var_cas_allAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
      var_cas_inheritedInstanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (630)) ;
    }else if (cond_26112.isBuiltAndFalse ()) {
      var_cas_superClassProxy = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_25430->mSuperClassName COMMA_SOURCE_FILE_AT_LINE (632)) ;
      var_cas_allAttributeList = var_cas_superClassProxy.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (633)) ;
      var_cas_inheritedInstanceMethodMap = var_cas_superClassProxy.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (634)) ;
    }
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (638)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_26519 (operand_25430->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_26519 = NULL ;
      while (((operand_26519 = enumerator_26519.nextObject ()))) {
        macroValidPointer (operand_26519) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_26519->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (640)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_26519->mAttributeName) ;
        var_cas_allAttributeList.addAssign_operation (var_cas_t, operand_26519->mAttributeName) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_26519->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (649)) ;
      }
    }
    GGS_declaredMethodMap  var_cas_classMethodMap = GGS_declaredMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (652)) ;
    {
      GGS_abstractMethodDefinitionListAST::cEnumerator enumerator_26935 (operand_25430->mAbstractMethodList, true) ;
      const GGS_abstractMethodDefinitionListAST::cElement * operand_26935 = NULL ;
      while (((operand_26935 = enumerator_26935.nextObject ()))) {
        macroValidPointer (operand_26935) ;
        var_cas_classMethodMap.modifier_insertKey (inLexique, operand_26935->mMethodName COMMA_SOURCE_FILE_AT_LINE (654)) ;
      }
    }
    {
      GGS_methodDefinitionListAST::cEnumerator enumerator_27023 (operand_25430->mMethodList, true) ;
      const GGS_methodDefinitionListAST::cElement * operand_27023 = NULL ;
      while (((operand_27023 = enumerator_27023.nextObject ()))) {
        macroValidPointer (operand_27023) ;
        var_cas_classMethodMap.modifier_insertKey (inLexique, operand_27023->mMethodName COMMA_SOURCE_FILE_AT_LINE (657)) ;
      }
    }
    GGS_abstractMethodDefinitionListForGeneration  var_cas_abstractMethodList = GGS_abstractMethodDefinitionListForGeneration ::constructor_emptyList () ;
    {
      GGS_abstractMethodDefinitionListAST::cEnumerator enumerator_27222 (operand_25430->mAbstractMethodList, true) ;
      const GGS_abstractMethodDefinitionListAST::cElement * operand_27222 = NULL ;
      while (((operand_27222 = enumerator_27222.nextObject ()))) {
        macroValidPointer (operand_27222) ;
        const GGS_bool cond_27408 = (operand_25430->mIsAbstract).operator_not () ;
        if (cond_27408.isBuiltAndTrue ()) {
          operand_27222->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a concrete class cannot declare an abstract method") COMMA_SOURCE_FILE_AT_LINE (665)) ;
        }
        GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
        {
          GGS_formalParameterListAST::cEnumerator enumerator_27553 (operand_27222->mSignature, true) ;
          const GGS_formalParameterListAST::cElement * operand_27553 = NULL ;
          while (((operand_27553 = enumerator_27553.nextObject ()))) {
            macroValidPointer (operand_27553) ;
            var_cas_formalParameterListForGeneration.addAssign_operation (operand_27553->mFormalArgumentPassingMode, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_27553->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (671)), operand_27553->mFormalArgumentName, operand_27553->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (673))) ;
          }
        }
        const GGS_bool cond_28292 = operand_27222->mIsOverriding ;
        if (cond_28292.isBuiltAndTrue ()) {
          GGS_formalParameterSignature  var_cas_inheritedSignature ;
          GGS_location  var_cas_inheritedDeclarationLocation ;
          GGS_bool automatic_var_28104_0 ;
          GGS_bool automatic_var_28104_1 ;
          GGS_methodQualifier automatic_var_28104_2 ;
          if (var_cas_inheritedInstanceMethodMap.isBuilt ()) {
            var_cas_inheritedInstanceMethodMap (HERE)->method_searchInheritedKey (inLexique, operand_27222->mMethodName, automatic_var_28104_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_28104_1, automatic_var_28104_2 COMMA_SOURCE_FILE_AT_LINE (680)) ;
          }
          ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_27222->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (683)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (681)) ;
        }else if (cond_28292.isBuiltAndFalse ()) {
          const GGS_bool cond_28475 = var_cas_inheritedInstanceMethodMap.reader_hasKey (operand_27222->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (687))) ;
          if (cond_28475.isBuiltAndTrue ()) {
            operand_27222->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this method cannot be declared as abstract, it is already declared in super class") COMMA_SOURCE_FILE_AT_LINE (689)) ;
          }
        }
        var_cas_abstractMethodList.addAssign_operation (operand_27222->mIsOverriding, operand_27222->mMethodName, var_cas_formalParameterListForGeneration) ;
      }
    }
    GGS_methodDefinitionListForGeneration  var_cas_methodList = GGS_methodDefinitionListForGeneration ::constructor_emptyList () ;
    GGS_stringset  var_cas_definedMethodSet = GGS_stringset ::constructor_emptySet () ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("this")) ;
    {
      GGS_methodDefinitionListAST::cEnumerator enumerator_28853 (operand_25430->mMethodList, true) ;
      const GGS_methodDefinitionListAST::cElement * operand_28853 = NULL ;
      while (((operand_28853 = enumerator_28853.nextObject ()))) {
        macroValidPointer (operand_28853) ;
        GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
        GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
        ::routine_analyzeRoutineBody (inLexique,  var_cas_analysisContext,  operand_28853->mSignature,  GGS_localConstantList ::constructor_emptyList (),  var_cas_allAttributeList,  GGS_string (""),  operand_28853->mInstructionList,  operand_28853->mEndOfMethodLocation,  var_cas_semanticInstructionListForGeneration,  var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (705)) ;
        const GGS_bool cond_29992 = operand_28853->mIsOverriding ;
        if (cond_29992.isBuiltAndTrue ()) {
          GGS_formalParameterSignature  var_cas_inheritedSignature ;
          GGS_location  var_cas_inheritedDeclarationLocation ;
          GGS_bool var_cas_inheritedIsCategory ;
          GGS_bool automatic_var_29640_0 ;
          GGS_methodQualifier automatic_var_29640_1 ;
          if (var_cas_inheritedInstanceMethodMap.isBuilt ()) {
            var_cas_inheritedInstanceMethodMap (HERE)->method_searchInheritedKey (inLexique, operand_28853->mMethodName, var_cas_inheritedIsCategory, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_29640_0, automatic_var_29640_1 COMMA_SOURCE_FILE_AT_LINE (721)) ;
          }
          ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_28853->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (724)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (722)) ;
          const GGS_bool cond_29977 = var_cas_inheritedIsCategory ;
          if (cond_29977.isBuiltAndTrue ()) {
            operand_28853->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this method is declared in class, but overriden method is declared as multi-method") COMMA_SOURCE_FILE_AT_LINE (730)) ;
          }
        }else if (cond_29992.isBuiltAndFalse ()) {
          const GGS_bool cond_30181 = var_cas_inheritedInstanceMethodMap.reader_hasKey (operand_28853->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (731))) ;
          if (cond_30181.isBuiltAndTrue ()) {
            operand_28853->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this method should be declared as overridding, as it is already declared in super class") COMMA_SOURCE_FILE_AT_LINE (733)) ;
          }
        }
        var_cas_definedMethodSet.addAssign_operation (operand_28853->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (735))) ;
        var_cas_methodList.addAssign_operation (operand_28853->mIsOverriding, operand_28853->mMethodName, var_cas_formalParameterListForGeneration, var_cas_semanticInstructionListForGeneration) ;
      }
    }
    const GGS_bool cond_30926 = (operand_25430->mIsAbstract).operator_not () ;
    if (cond_30926.isBuiltAndTrue ()) {
      {
        GGS_instanceMethodMap::cEnumerator enumerator_30524 (var_cas_inheritedInstanceMethodMap, true) ;
        const GGS_instanceMethodMap::cElement * operand_30524 = NULL ;
        while (((operand_30524 = enumerator_30524.nextObject ()))) {
          macroValidPointer (operand_30524) ;
          const GGS_bool cond_30897 = ((operand_30524->mInfo.mQualifier).operator_isEqual (GGS_methodQualifier::constructor_isAbstract (inLexique COMMA_SOURCE_FILE_AT_LINE (746)))).operator_or ((operand_30524->mInfo.mQualifier).operator_isEqual (GGS_methodQualifier::constructor_isOverridingAbstract (inLexique COMMA_SOURCE_FILE_AT_LINE (746)))) ;
          if (cond_30897.isBuiltAndTrue ()) {
            const GGS_bool cond_30878 = (var_cas_definedMethodSet.reader_hasKey (operand_30524->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (747)))).operator_not () ;
            if (cond_30878.isBuiltAndTrue ()) {
              operand_30524->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (operand_25430->mClassTypeName)).operator_concat (GGS_string ("' class is declared concrete, but the '"))).operator_concat (operand_30524->mKey)).operator_concat (GGS_string ("' method declared in a super class is not implemented")) COMMA_SOURCE_FILE_AT_LINE (749)) ;
            }
          }
        }
      }
    }
    GGS_string var_cas_sortString = var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (754)) ;
    GGS_unifiedTypeMapProxy  var_cas_t = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (755)) ;
    GGS_uint _variant_31240 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (756)) ;
    GGS_bool _condition_31240 (_variant_31240.isBuilt (), true) ;
    while (_condition_31240.isBuiltAndTrue ()) {
      _condition_31240 = (var_cas_t.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (757))).operator_not () ;
      if (_condition_31240.isBuiltAndTrue ()) {
        if (_variant_31240.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (760)) ;
          _condition_31240 = GGS_bool (false) ;
        }else{
          _variant_31240.decrement_operation (inLexique COMMA_HERE) ;
          var_cas_sortString = ((var_cas_t.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (758))).operator_concat (GGS_string ("."))).operator_concat (var_cas_sortString) ;
          var_cas_t = var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (759)) ;
        }
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_classTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_25430->mClassTypeName COMMA_SOURCE_FILE_AT_LINE (763)), operand_25430->mIsAbstract, operand_25430->mClassTypeName, var_cas_superClassProxy, var_cas_allAttributeList, var_cas_typedAttributeList, var_cas_abstractMethodList, var_cas_methodList, var_cas_selfType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (771)) COMMA_SOURCE_FILE_AT_LINE (762)), var_cas_sortString) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "analyzeFunctionBody"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeFunctionBody (C_Compiler & inLexique,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                const GGS_formalInputParameterListAST   var_cas_inFunctionSignature,
                                const GGS_semanticInstructionListAST   var_cas_inInstructionList,
                                const GGS_lstring   var_cas_inReturnVariableName,
                                const GGS_lstring   var_cas_inResultTypeName,
                                const GGS_location   var_cas_inEndOfFunctionLocation,
                                GGS_formalInputParameterListForGeneration  & var_cas_outSignatureForGeneration,
                                GGS_unifiedTypeMapProxy  & var_cas_outReturnedType,
                                GGS_string & var_cas_outResultVariableCppName,
                                GGS_semanticInstructionListForGeneration  & var_cas_outSemanticInstructionListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeFunctionBody at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_variableMap  var_cas_variableMap = GGS_variableMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (791)) ;
  var_cas_outSignatureForGeneration = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
  {
    GGS_formalInputParameterListAST::cEnumerator enumerator_32388 (var_cas_inFunctionSignature, true) ;
    const GGS_formalInputParameterListAST::cElement * operand_32388 = NULL ;
    while (((operand_32388 = enumerator_32388.nextObject ()))) {
      macroValidPointer (operand_32388) ;
      const GGS_unifiedTypeMapProxy  var_cas_parameterType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, operand_32388->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (795)) ;
      const GGS_bool cond_33052 = operand_32388->mIsConstant ;
      if (cond_33052.isBuiltAndTrue ()) {
        const GGS_string var_cas_cppName = (GGS_string ("constinArgument_")).operator_concat (operand_32388->mFormalArgumentName.ggs_string ().reader_identifierRepresentation ()) ;
        var_cas_outSignatureForGeneration.addAssign_operation (var_cas_parameterType, var_cas_cppName, operand_32388->mIsUnused) ;
        const GGS_bool cond_32914 = operand_32388->mIsUnused ;
        if (cond_32914.isBuiltAndTrue ()) {
          var_cas_variableMap.modifier_insertConstantInputFormalArgumentDeclaredAsUnused (inLexique, operand_32388->mFormalArgumentName, var_cas_parameterType, var_cas_cppName, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (804)) ;
        }else if (cond_32914.isBuiltAndFalse ()) {
          var_cas_variableMap.modifier_insertConstantInputFormalArgument (inLexique, operand_32388->mFormalArgumentName, var_cas_parameterType, var_cas_cppName, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (806)) ;
        }
      }else if (cond_33052.isBuiltAndFalse ()) {
        const GGS_string var_cas_cppName = (GGS_string ("inArgument_")).operator_concat (operand_32388->mFormalArgumentName.ggs_string ().reader_identifierRepresentation ()) ;
        var_cas_outSignatureForGeneration.addAssign_operation (var_cas_parameterType, var_cas_cppName, operand_32388->mIsUnused) ;
        const GGS_bool cond_33407 = operand_32388->mIsUnused ;
        if (cond_33407.isBuiltAndTrue ()) {
          var_cas_variableMap.modifier_insertInputFormalArgumentDeclaredAsUnused (inLexique, operand_32388->mFormalArgumentName, var_cas_parameterType, var_cas_cppName, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (816)) ;
        }else if (cond_33407.isBuiltAndFalse ()) {
          var_cas_variableMap.modifier_insertInputFormalArgument (inLexique, operand_32388->mFormalArgumentName, var_cas_parameterType, var_cas_cppName, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (818)) ;
        }
      }
    }
  }
  var_cas_outReturnedType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, var_cas_inResultTypeName COMMA_SOURCE_FILE_AT_LINE (823)) ;
  var_cas_outResultVariableCppName = (GGS_string ("result_")).operator_concat (var_cas_inResultTypeName.ggs_string ().reader_identifierRepresentation ()) ;
  var_cas_variableMap.modifier_insertOutputFormalArgument (inLexique, var_cas_inReturnVariableName, var_cas_outReturnedType, var_cas_outResultVariableCppName, var_cas_outResultVariableCppName COMMA_SOURCE_FILE_AT_LINE (825)) ;
  var_cas_outSemanticInstructionListForGeneration = GGS_semanticInstructionListForGeneration ::constructor_emptyList () ;
  {
    GGS_semanticInstructionListAST::cEnumerator enumerator_34087 (var_cas_inInstructionList, true) ;
    const GGS_semanticInstructionListAST::cElement * operand_34087 = NULL ;
    while (((operand_34087 = enumerator_34087.nextObject ()))) {
      macroValidPointer (operand_34087) ;
      { typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction method = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (operand_34087->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_34087->mInstruction (HERE), var_cas_inAnalysisContext, var_cas_outSemanticInstructionListForGeneration, var_cas_variableMap COMMA_SOURCE_FILE_AT_LINE (829)) ;
        }
      }
    }
  }
  if (var_cas_variableMap.isBuilt ()) {
    var_cas_variableMap (HERE)->method_checkAutomatonStates (inLexique, var_cas_inEndOfFunctionLocation COMMA_SOURCE_FILE_AT_LINE (836)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeFunctionBody\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@functionDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__functionDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_functionDeclarationAST * operand_34480,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_34480 != NULL) {
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    GGS_formalInputParameterListForGeneration  var_cas_formalInputParameterList ;
    GGS_unifiedTypeMapProxy  var_cas_returnType ;
    GGS_string var_cas_resultVariableCppName ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (854)), GGS_string ("")) ;
    ::routine_analyzeFunctionBody (inLexique,  var_cas_analysisContext,  operand_34480->mFormalArgumentList,  operand_34480->mFunctionInstructionList,  operand_34480->mResultVariableName,  operand_34480->mResultTypeName,  operand_34480->mEndOfFunctionInstructionList,  var_cas_formalInputParameterList,  var_cas_returnType,  var_cas_resultVariableCppName,  var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (857)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_functionImplementationForGeneration ::constructor_new (inLexique, operand_34480->mFunctionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (871)), var_cas_formalInputParameterList, var_cas_returnType, var_cas_resultVariableCppName, var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (870)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@onceFunctionDeclarationAST.performSemanticAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__onceFunctionDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_onceFunctionDeclarationAST * operand_35740,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_35740 != NULL) {
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    GGS_unifiedTypeMapProxy  var_cas_returnType ;
    GGS_string var_cas_resultVariableCppName ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (895)), GGS_string ("")) ;
    GGS_formalInputParameterListForGeneration  automatic_var_36520_0 ;
    ::routine_analyzeFunctionBody (inLexique,  var_cas_analysisContext,  GGS_formalInputParameterListAST ::constructor_emptyList (),  operand_35740->mFunctionInstructionList,  operand_35740->mResultVariableName,  operand_35740->mResultTypeName,  operand_35740->mEndOfFunctionInstructionList,  automatic_var_36520_0,  var_cas_returnType,  var_cas_resultVariableCppName,  var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (898)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_onceFunctionDeclarationForGeneration ::constructor_new (inLexique, operand_35740->mFunctionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (912)), var_cas_returnType, var_cas_resultVariableCppName, var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (911)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@filewrapperDeclarationAST.performSemanticAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__filewrapperDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_filewrapperDeclarationAST * operand_37212,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_37212 != NULL) {
    GGS_wrapperFileMap  var_cas_wrapperFileMap ;
    GGS_wrapperDirectoryMap  var_cas_wrapperDirectoryMap ;
    GGS_lstring  automatic_var_37629_0 ;
    GGS_lstringlist  automatic_var_37629_1 ;
    GGS_filewrapperTemplateMap  automatic_var_37629_2 ;
    if (var_cas_inSemanticContext.mFilewrapperMap.isBuilt ()) {
      var_cas_inSemanticContext.mFilewrapperMap (HERE)->method_searchKey (inLexique, operand_37212->mFilewrapperName, automatic_var_37629_0, automatic_var_37629_1, var_cas_wrapperFileMap, var_cas_wrapperDirectoryMap, automatic_var_37629_2 COMMA_SOURCE_FILE_AT_LINE (935)) ;
    }
    GGS_string var_cas_absoluteSourcePath ;
    const GGS_bool cond_37804 = (operand_37212->mFilewrapperPath.ggs_string ().reader_firstCharacterOrNul ()).operator_isEqual (GGS_char (TO_UNICODE ('/'))) ;
    if (cond_37804.isBuiltAndTrue ()) {
      var_cas_absoluteSourcePath = operand_37212->mFilewrapperPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (946)) ;
    }else if (cond_37804.isBuiltAndFalse ()) {
      var_cas_absoluteSourcePath = ((var_cas_inSemanticContext.reader_mSourceFileAbsolutePath (inLexique COMMA_SOURCE_FILE_AT_LINE (948)).reader_stringByDeletingLastPathComponent ()).operator_concat (GGS_string ("/"))).operator_concat (operand_37212->mFilewrapperPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (948))) ;
    }
    const GGS_bool cond_38105 = (var_cas_absoluteSourcePath.reader_directoryExists ()).operator_not () ;
    if (cond_38105.isBuiltAndTrue ()) {
      operand_37212->mFilewrapperPath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The '")).operator_concat (var_cas_absoluteSourcePath)).operator_concat (GGS_string ("' directory does not exist")) COMMA_SOURCE_FILE_AT_LINE (952)) ;
    }else if (cond_38105.isBuiltAndFalse ()) {
      GGS_filewrapperTemplateListForGeneration  var_cas_filewrapperTemplateListForGeneration = GGS_filewrapperTemplateListForGeneration ::constructor_emptyList () ;
      {
        GGS_filewrapperTemplateListAST::cEnumerator enumerator_38273 (operand_37212->mFilewrapperTemplateList, true) ;
        const GGS_filewrapperTemplateListAST::cElement * operand_38273 = NULL ;
        while (((operand_38273 = enumerator_38273.nextObject ()))) {
          macroValidPointer (operand_38273) ;
          const GGS_bool cond_38501 = (operand_38273->mFilewrapperTemplatePath.ggs_string ().reader_firstCharacterOrNul ()).operator_isEqual (GGS_char (TO_UNICODE ('/'))) ;
          if (cond_38501.isBuiltAndTrue ()) {
            operand_38273->mFilewrapperTemplatePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the path should not begin with a '/'; it is relative to filewrapper path '")).operator_concat (var_cas_absoluteSourcePath)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (958)) ;
          }
          const GGS_string var_cas_absoluteTemplatePath = ((var_cas_absoluteSourcePath).operator_concat (GGS_string ("/"))).operator_concat (operand_38273->mFilewrapperTemplatePath) ;
          GGS_templateInstructionListAST  var_cas_resultingInstructionList ;
          const GGS_string _depExtension = GGS_string ("") ;
          const GGS_string _depPath = GGS_string ("") ;
          if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
            C_Grammar_templateGrammar::_performSourceFileParsing_ (inLexique,
                                          _depExtension.string (),
                                          _depPath.string (),
                                          NULL,
                                          GGS_lstring ::constructor_new (inLexique, var_cas_absoluteTemplatePath, operand_38273->mFilewrapperTemplatePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (962)) COMMA_SOURCE_FILE_AT_LINE (962)),
                                          var_cas_resultingInstructionList
                                          COMMA_SOURCE_FILE_AT_LINE (962)) ;
          }
          GGS_templateVariableMap  var_cas_templateVariableMap = GGS_templateVariableMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (964)) ;
          GGS_formalInputParameterListForGeneration  var_cas_filewrapperTemplateFormalInputParameters = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
          {
            GGS_formalTemplateInputParameterListAST::cEnumerator enumerator_39077 (operand_38273->mFilewrapperTemplateFormalInputParameters, true) ;
            const GGS_formalTemplateInputParameterListAST::cElement * operand_39077 = NULL ;
            while (((operand_39077 = enumerator_39077.nextObject ()))) {
              macroValidPointer (operand_39077) ;
              GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_39077->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (967)) ;
              const GGS_string var_cas_cppVarName = (GGS_string ("in_")).operator_concat (operand_39077->mFormalArgumentName.ggs_string ().reader_identifierRepresentation ()) ;
              var_cas_templateVariableMap.modifier_insertKey (inLexique, operand_39077->mFormalArgumentName, var_cas_type, var_cas_cppVarName COMMA_SOURCE_FILE_AT_LINE (969)) ;
              var_cas_filewrapperTemplateFormalInputParameters.addAssign_operation (var_cas_type, var_cas_cppVarName, GGS_bool (true)) ;
            }
          }
          GGS_templateInstructionListForGeneration  var_cas_templateInstructionListForGeneration = GGS_templateInstructionListForGeneration ::constructor_emptyList () ;
          const GGS_templateAnalysisContext var_cas_templateAnalysisContext = GGS_templateAnalysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_templateVariableMap) ;
          ::routine_templateInstructionListAnalysis (inLexique,  var_cas_templateAnalysisContext,  var_cas_resultingInstructionList,  var_cas_templateInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (979)) ;
          var_cas_filewrapperTemplateListForGeneration.addAssign_operation (operand_38273->mFilewrapperTemplateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (982)), var_cas_filewrapperTemplateFormalInputParameters, var_cas_templateInstructionListForGeneration) ;
        }
      }
      var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_filewrapperDeclarationForGeneration ::constructor_new (inLexique, operand_37212->mFilewrapperName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (989)), operand_37212->mFilewrapperPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (990)), var_cas_wrapperFileMap, var_cas_wrapperDirectoryMap, var_cas_filewrapperTemplateListForGeneration COMMA_SOURCE_FILE_AT_LINE (988)), GGS_string ("")) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@abstractCategoryMethodAST.performSemanticAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__abstractCategoryMethodAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_abstractCategoryMethodAST * operand_40590,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_40590 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_40590->mTypeName COMMA_SOURCE_FILE_AT_LINE (1008)) ;
    const GGS_bool cond_41127 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1010))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1010))) ;
    if (cond_41127.isBuiltAndTrue ()) {
      operand_40590->mAbstractCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1011)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1012)) ;
    }else if (cond_41127.isBuiltAndFalse ()) {
      const GGS_bool cond_41299 = var_cas_selfType.reader_mIsConcrete (inLexique COMMA_SOURCE_FILE_AT_LINE (1012)) ;
      if (cond_41299.isBuiltAndTrue ()) {
        operand_40590->mAbstractCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare an abstract category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1013)))).operator_concat (GGS_string ("' is not an abstract class")) COMMA_SOURCE_FILE_AT_LINE (1014)) ;
      }
    }
    GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    {
      GGS_formalParameterListAST::cEnumerator enumerator_41470 (operand_40590->mAbstractCategoryMethodFormalParameterList, true) ;
      const GGS_formalParameterListAST::cElement * operand_41470 = NULL ;
      while (((operand_41470 = enumerator_41470.nextObject ()))) {
        macroValidPointer (operand_41470) ;
        var_cas_formalParameterListForGeneration.addAssign_operation (operand_41470->mFormalArgumentPassingMode, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_41470->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (1020)), operand_41470->mFormalArgumentName, operand_41470->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1022))) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_abstractCategoryMethodForGeneration ::constructor_new (inLexique, operand_40590->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1027)), operand_40590->mAbstractCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1028)), var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1026)), var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1031))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@categoryMethodAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__categoryMethodAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_categoryMethodAST * operand_42100,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_42100 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_42100->mTypeName COMMA_SOURCE_FILE_AT_LINE (1043)) ;
    const GGS_bool cond_42610 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1045))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1045))) ;
    if (cond_42610.isBuiltAndTrue ()) {
      operand_42100->mCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1046)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1047)) ;
    }
    GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("object")) ;
    ::routine_analyzeRoutineBody (inLexique,  var_cas_analysisContext,  operand_42100->mCategoryMethodFormalParameterList,  GGS_localConstantList ::constructor_emptyList (),  var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1061)),  GGS_string ("object->"),  operand_42100->mCategoryMethodInstructionList,  operand_42100->mEndOfMethodLocation,  var_cas_semanticInstructionListForGeneration,  var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1057)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_categoryMethodForGeneration ::constructor_new (inLexique, operand_42100->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1070)), operand_42100->mCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1071)), var_cas_formalParameterListForGeneration, var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1073)), var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1069)), var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1076))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@overridingCategoryMethodAST.performSemanticAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingCategoryMethodAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_overridingCategoryMethodAST * operand_43701,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43701 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_43701->mTypeName COMMA_SOURCE_FILE_AT_LINE (1088)) ;
    const GGS_bool cond_44221 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1090))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1090))) ;
    if (cond_44221.isBuiltAndTrue ()) {
      operand_43701->mOverridingCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1091)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1092)) ;
    }
    GGS_string var_cas_baseTypeName = GGS_string ("") ;
    GGS_unifiedTypeMapProxy  var_cas_superType = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1095)) ;
    GGS_formalParameterSignature  var_cas_inheritedSignature = GGS_formalParameterSignature ::constructor_emptyList () ;
    GGS_location  var_cas_inheritedDeclarationLocation = GGS_location (inLexique) ;
    GGS_uint _variant_45015 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1098)) ;
    GGS_bool _condition_45015 (_variant_45015.isBuilt (), true) ;
    while (_condition_45015.isBuiltAndTrue ()) {
      _condition_45015 = ((var_cas_superType.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1099))).operator_not ()).operator_and ((var_cas_baseTypeName).operator_isEqual (GGS_string (""))) ;
      if (_condition_45015.isBuiltAndTrue ()) {
        if (_variant_45015.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1108)) ;
          _condition_45015 = GGS_bool (false) ;
        }else{
          _variant_45015.decrement_operation (inLexique COMMA_HERE) ;
          const GGS_bool cond_44962 = var_cas_superType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1100)).reader_hasKey (operand_43701->mOverridingCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1100))) ;
          if (cond_44962.isBuiltAndTrue ()) {
            GGS_methodQualifier var_cas_qualifier ;
            GGS_bool automatic_var_44836_0 ;
            GGS_bool automatic_var_44836_1 ;
            const GGS_instanceMethodMap  temp_44737 = var_cas_superType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1102)) ;
            if (temp_44737.isBuilt ()) {
              temp_44737 (HERE)->method_searchKey (inLexique, operand_43701->mOverridingCategoryMethodName, automatic_var_44836_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_44836_1, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (1102)) ;
            }
            const GGS_bool cond_44949 = (var_cas_qualifier).operator_infOrEqual (GGS_methodQualifier::constructor_isBasicFinal (inLexique COMMA_SOURCE_FILE_AT_LINE (1103))) ;
            if (cond_44949.isBuiltAndTrue ()) {
              var_cas_baseTypeName = var_cas_superType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1104)) ;
            }
          }
          var_cas_superType = var_cas_superType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1107)) ;
        }
      }
    }
    GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("object")) ;
    ::routine_analyzeRoutineBody (inLexique,  var_cas_analysisContext,  operand_43701->mOverridingCategoryMethodFormalParameterList,  GGS_localConstantList ::constructor_emptyList (),  var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1122)),  GGS_string ("object->"),  operand_43701->mOverridingCategoryMethodInstructionList,  operand_43701->mEndOfMethodLocation,  var_cas_semanticInstructionListForGeneration,  var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1118)) ;
    const GGS_bool cond_45917 = (var_cas_baseTypeName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_45917.isBuiltAndTrue ()) {
      ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_43701->mOverridingCategoryMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1133)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (1131)) ;
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_overridingCategoryMethodForGeneration ::constructor_new (inLexique, operand_43701->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1140)), var_cas_baseTypeName, operand_43701->mOverridingCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1142)), var_cas_formalParameterListForGeneration, var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1144)), var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1139)), GGS_string ("{override}")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@overridingAbstractCategoryMethodAST.performSemanticAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingAbstractCategoryMethodAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_overridingAbstractCategoryMethodAST * operand_46415,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & /* var_cas_ioSemanticDeclarationListForGeneration */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_46415 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_46415->mTypeName COMMA_SOURCE_FILE_AT_LINE (1159)) ;
    const GGS_bool cond_46956 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1161))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1161))) ;
    if (cond_46956.isBuiltAndTrue ()) {
      operand_46415->mOverridingCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1162)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1163)) ;
    }else if (cond_46956.isBuiltAndFalse ()) {
      const GGS_bool cond_47130 = var_cas_selfType.reader_mIsConcrete (inLexique COMMA_SOURCE_FILE_AT_LINE (1163)) ;
      if (cond_47130.isBuiltAndTrue ()) {
        operand_46415->mOverridingCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare an abstract category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1164)))).operator_concat (GGS_string ("' is not an abstract class")) COMMA_SOURCE_FILE_AT_LINE (1165)) ;
      }
    }
    GGS_string var_cas_baseTypeName = GGS_string ("") ;
    GGS_unifiedTypeMapProxy  var_cas_superType = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1168)) ;
    GGS_formalParameterSignature  var_cas_inheritedSignature = GGS_formalParameterSignature ::constructor_emptyList () ;
    GGS_location  var_cas_inheritedDeclarationLocation = GGS_location (inLexique) ;
    GGS_uint _variant_47924 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1171)) ;
    GGS_bool _condition_47924 (_variant_47924.isBuilt (), true) ;
    while (_condition_47924.isBuiltAndTrue ()) {
      _condition_47924 = ((var_cas_superType.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1172))).operator_not ()).operator_and ((var_cas_baseTypeName).operator_isEqual (GGS_string (""))) ;
      if (_condition_47924.isBuiltAndTrue ()) {
        if (_variant_47924.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1181)) ;
          _condition_47924 = GGS_bool (false) ;
        }else{
          _variant_47924.decrement_operation (inLexique COMMA_HERE) ;
          const GGS_bool cond_47871 = var_cas_superType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1173)).reader_hasKey (operand_46415->mOverridingCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1173))) ;
          if (cond_47871.isBuiltAndTrue ()) {
            GGS_methodQualifier var_cas_qualifier ;
            GGS_bool automatic_var_47745_0 ;
            GGS_bool automatic_var_47745_1 ;
            const GGS_instanceMethodMap  temp_47646 = var_cas_superType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1175)) ;
            if (temp_47646.isBuilt ()) {
              temp_47646 (HERE)->method_searchKey (inLexique, operand_46415->mOverridingCategoryMethodName, automatic_var_47745_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_47745_1, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (1175)) ;
            }
            const GGS_bool cond_47858 = (var_cas_qualifier).operator_infOrEqual (GGS_methodQualifier::constructor_isBasicFinal (inLexique COMMA_SOURCE_FILE_AT_LINE (1176))) ;
            if (cond_47858.isBuiltAndTrue ()) {
              var_cas_baseTypeName = var_cas_superType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1177)) ;
            }
          }
          var_cas_superType = var_cas_superType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1180)) ;
        }
      }
    }
    GGS_variableMap  var_cas_variableMap = GGS_variableMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1183)) ;
    GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration ;
    ::routine_buildLocalVariableMapAndSignature (inLexique,  var_cas_inSemanticContext,  operand_46415->mOverridingCategoryMethodFormalParameterList,  var_cas_variableMap,  var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1185)) ;
    const GGS_bool cond_48483 = (var_cas_baseTypeName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_48483.isBuiltAndTrue ()) {
      ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_46415->mOverridingCategoryMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1195)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (1193)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of function "buildPredefinedTypes"              *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_predefinedTypes function_buildPredefinedTypes (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_buildPredefinedTypes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_predefinedTypes var_cas_outPredefinedTypes ;
  var_cas_outPredefinedTypes = GGS_predefinedTypes::constructor_new (GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("location"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1246)) COMMA_SOURCE_FILE_AT_LINE (1246)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("bool"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1247)) COMMA_SOURCE_FILE_AT_LINE (1247)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("char"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1248)) COMMA_SOURCE_FILE_AT_LINE (1248)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1249)) COMMA_SOURCE_FILE_AT_LINE (1249)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1250)) COMMA_SOURCE_FILE_AT_LINE (1250)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1251)) COMMA_SOURCE_FILE_AT_LINE (1251)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1252)) COMMA_SOURCE_FILE_AT_LINE (1252)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1253)) COMMA_SOURCE_FILE_AT_LINE (1253)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("double"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1254)) COMMA_SOURCE_FILE_AT_LINE (1254)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lbool"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1255)) COMMA_SOURCE_FILE_AT_LINE (1255)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lchar"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1256)) COMMA_SOURCE_FILE_AT_LINE (1256)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lstring"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1257)) COMMA_SOURCE_FILE_AT_LINE (1257)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("luint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1258)) COMMA_SOURCE_FILE_AT_LINE (1258)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lsint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1259)) COMMA_SOURCE_FILE_AT_LINE (1259)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("luint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1260)) COMMA_SOURCE_FILE_AT_LINE (1260)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lsint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1261)) COMMA_SOURCE_FILE_AT_LINE (1261)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("ldouble"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1262)) COMMA_SOURCE_FILE_AT_LINE (1262))) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_buildPredefinedTypes\n") ;
  #endif
  return var_cas_outPredefinedTypes ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_buildPredefinedTypes (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_semanticContext arg_0 = GGS_semanticContext::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_predefinedTypes result = function_buildPredefinedTypes (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_buildPredefinedTypes [1] = {& kTypeDescriptor_GGS_semanticContext} ;

const C_galgas_function_descriptorEX
kFunction_descriptor_buildPredefinedTypes ("buildPredefinedTypes",
                              functionForGenericCall_buildPredefinedTypes,
                              & kTypeDescriptor_GGS_predefinedTypes,
                              1,
                              kArgumentTypeList_buildPredefinedTypes) ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "performSemanticAnalysis"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performSemanticAnalysis (C_Compiler & inLexique,
                                const GGS_semanticDeclarationListAST   var_cas_inDeclarationList,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_outDecoratedDeclarationListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_performSemanticAnalysis at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_predefinedTypes var_cas_predefinedTypes = function_buildPredefinedTypes (inLexique, var_cas_inSemanticContext COMMA_SOURCE_FILE_AT_LINE (1277)) ;
  var_cas_outDecoratedDeclarationListForGeneration = GGS_semanticDeclarationSortedListForGeneration ::constructor_emptySortedList () ;
  {
    GGS_semanticDeclarationListAST::cEnumerator enumerator_53023 (var_cas_inDeclarationList, true) ;
    const GGS_semanticDeclarationListAST::cElement * operand_53023 = NULL ;
    while (((operand_53023 = enumerator_53023.nextObject ()))) {
      macroValidPointer (operand_53023) ;
      { typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis method = findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (operand_53023->mSemanticDeclaration.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_53023->mSemanticDeclaration (HERE), var_cas_inSemanticContext, var_cas_predefinedTypes, var_cas_outDecoratedDeclarationListForGeneration COMMA_SOURCE_FILE_AT_LINE (1280)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_performSemanticAnalysis\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticAnalysis (void) {
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (category_method__semanticDeclarationAST__performSemanticAnalysis, gClassInfoFor__semanticDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__predefinedTypeAST__performSemanticAnalysis, gClassInfoFor__predefinedTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__listDeclarationAST__performSemanticAnalysis, gClassInfoFor__listDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__sortedListDeclarationAST__performSemanticAnalysis, gClassInfoFor__sortedListDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__structDeclarationAST__performSemanticAnalysis, gClassInfoFor__structDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__enumDeclarationAST__performSemanticAnalysis, gClassInfoFor__enumDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__listmapDeclarationAST__performSemanticAnalysis, gClassInfoFor__listmapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__mapDeclarationAST__performSemanticAnalysis, gClassInfoFor__mapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__mapProxyDeclarationAST__performSemanticAnalysis, gClassInfoFor__mapProxyDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__externFunctionDeclarationAST__performSemanticAnalysis, gClassInfoFor__externFunctionDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__externRoutineDeclarationAST__performSemanticAnalysis, gClassInfoFor__externRoutineDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__routineDeclarationAST__performSemanticAnalysis, gClassInfoFor__routineDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__classDeclarationAST__performSemanticAnalysis, gClassInfoFor__classDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__functionDeclarationAST__performSemanticAnalysis, gClassInfoFor__functionDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__onceFunctionDeclarationAST__performSemanticAnalysis, gClassInfoFor__onceFunctionDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__filewrapperDeclarationAST__performSemanticAnalysis, gClassInfoFor__filewrapperDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__abstractCategoryMethodAST__performSemanticAnalysis, gClassInfoFor__abstractCategoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__categoryMethodAST__performSemanticAnalysis, gClassInfoFor__categoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__overridingCategoryMethodAST__performSemanticAnalysis, gClassInfoFor__overridingCategoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__overridingAbstractCategoryMethodAST__performSemanticAnalysis, gClassInfoFor__overridingAbstractCategoryMethodAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticAnalysis (void) {
  gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticAnalysis (prologueRoutineFor_semanticAnalysis, epilogueRoutineFor_semanticAnalysis) ;

//---------------------------------------------------------------------------*

