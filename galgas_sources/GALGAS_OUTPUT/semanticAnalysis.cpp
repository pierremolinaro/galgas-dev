//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'semanticAnalysis.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 27th, 2010, at 11h43'3"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "templateGrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "checkMethodSignatures"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkMethodSignatures (C_Compiler & inLexique,
                                const GGS_formalParameterListForGeneration   var_cas_inTestedSignature,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_formalParameterSignature   var_cas_inReferenceSignature,
                                const GGS_location   var_cas_inReferenceLocation
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkMethodSignatures at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_2809 = (var_cas_inTestedSignature.reader_length ()).operator_isNotEqual (var_cas_inReferenceSignature.reader_length ()) ;
  if (cond_2809.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("this method declares ")).operator_concat (var_cas_inTestedSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (43)))).operator_concat (GGS_string (" formal parameter(s), but overriden method declares "))).operator_concat (var_cas_inReferenceSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (44))) COMMA_SOURCE_FILE_AT_LINE (46)) ;
    var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden method is declared here") COMMA_SOURCE_FILE_AT_LINE (47)) ;
  }else if (cond_2809.isBuiltAndFalse ()) {
    {
      GGS_formalParameterSignature::cEnumerator enumerator_2842 (var_cas_inReferenceSignature, true) ;
      const GGS_formalParameterSignature::cElement * operand_2842 = NULL ;
      GGS_formalParameterListForGeneration::cEnumerator enumerator_2877 (var_cas_inTestedSignature, true) ;
      const GGS_formalParameterListForGeneration::cElement * operand_2877 = NULL ;
      while (((operand_2842 = enumerator_2842.nextObject ()))
          && ((operand_2877 = enumerator_2877.nextObject ()))) {
        macroValidPointer (operand_2842) ;
        macroValidPointer (operand_2877) ;
        const GGS_bool cond_3314 = (operand_2842->mFormalArgumentPassingMode).operator_isNotEqual (operand_2877->mFormalArgumentPassingMode) ;
        if (cond_3314.isBuiltAndTrue ()) {
          operand_2877->mFormalArgumentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("the '")).operator_concat (operand_2877->mFormalArgumentName)).operator_concat (GGS_string ("' formal parameter is declared as "))).operator_concat (operand_2877->mFormalArgumentPassingMode.reader_formalArgumentMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (51)))).operator_concat (GGS_string (", but overriden method declares it as "))).operator_concat (operand_2842->mFormalArgumentPassingMode.reader_formalArgumentMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (52))) COMMA_SOURCE_FILE_AT_LINE (53)) ;
          var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden method is declared here") COMMA_SOURCE_FILE_AT_LINE (54)) ;
        }
        const GGS_bool cond_3718 = (operand_2877->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (55))).operator_isNotEqual (operand_2842->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (55))) ;
        if (cond_3718.isBuiltAndTrue ()) {
          operand_2877->mFormalArgumentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the '")).operator_concat (operand_2877->mFormalArgumentName)).operator_concat (GGS_string ("' formal parameter has the '@"))).operator_concat (operand_2877->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (57)))).operator_concat (GGS_string ("' type, but overriden method declares with the '@"))).operator_concat (operand_2842->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (58)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (59)) ;
          var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden method is declared here") COMMA_SOURCE_FILE_AT_LINE (60)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkMethodSignatures\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "checkReaderSignatures"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkReaderSignatures (C_Compiler & inLexique,
                                const GGS_formalInputParameterListForGeneration   var_cas_inTestedSignature,
                                const GGS_unifiedTypeMapProxy   var_cas_inReturnType,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_unifiedTypeMapProxyList   var_cas_inReferenceSignature,
                                const GGS_unifiedTypeMapProxy   var_cas_inInheritedReturnType,
                                const GGS_location   var_cas_inReferenceLocation
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkReaderSignatures at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_4756 = (var_cas_inReturnType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (79))).operator_isNotEqual (var_cas_inInheritedReturnType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (79))) ;
  if (cond_4756.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the return type is '@")).operator_concat (var_cas_inReturnType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (81)))).operator_concat (GGS_string ("', but overriden reader names '@"))).operator_concat (var_cas_inInheritedReturnType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (82)))).operator_concat (GGS_string ("' as return type")) COMMA_SOURCE_FILE_AT_LINE (83)) ;
    var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden reader is declared here") COMMA_SOURCE_FILE_AT_LINE (84)) ;
  }
  const GGS_bool cond_5102 = (var_cas_inTestedSignature.reader_length ()).operator_isNotEqual (var_cas_inReferenceSignature.reader_length ()) ;
  if (cond_5102.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("this reader declares ")).operator_concat (var_cas_inTestedSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (86)))).operator_concat (GGS_string (" formal parameter(s), but overriden reader declares "))).operator_concat (var_cas_inReferenceSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (87))) COMMA_SOURCE_FILE_AT_LINE (89)) ;
    var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden reader is declared here") COMMA_SOURCE_FILE_AT_LINE (90)) ;
  }else if (cond_5102.isBuiltAndFalse ()) {
    {
      GGS_unifiedTypeMapProxyList::cEnumerator enumerator_5135 (var_cas_inReferenceSignature, true) ;
      const GGS_unifiedTypeMapProxyList::cElement * operand_5135 = NULL ;
      GGS_formalInputParameterListForGeneration::cEnumerator enumerator_5170 (var_cas_inTestedSignature, true) ;
      const GGS_formalInputParameterListForGeneration::cElement * operand_5170 = NULL ;
      while (((operand_5135 = enumerator_5135.nextObject ()))
          && ((operand_5170 = enumerator_5170.nextObject ()))) {
        macroValidPointer (operand_5135) ;
        macroValidPointer (operand_5170) ;
        const GGS_bool cond_5544 = (operand_5170->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (92))).operator_isNotEqual (operand_5135->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (92))) ;
        if (cond_5544.isBuiltAndTrue ()) {
          operand_5170->mFormalArgumentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the '")).operator_concat (operand_5170->mFormalArgumentName)).operator_concat (GGS_string ("' formal parameter has the '@"))).operator_concat (operand_5170->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (94)))).operator_concat (GGS_string ("' type, but overriden reader declares with the '@"))).operator_concat (operand_5135->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (95)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (96)) ;
          var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden reader is declared here") COMMA_SOURCE_FILE_AT_LINE (97)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkReaderSignatures\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@semanticDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticDeclarationAST__performSemanticAnalysis (C_Compiler &,
                                const cPtr_semanticDeclarationAST * operand_6039,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & /* var_cas_ioSemanticDeclarationListForGeneration */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6039 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticDeclarationAST.performSemanticAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis> gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis
findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.count ()) {
    result = gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (superClassPtr) ;
      gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@predefinedTypeAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__predefinedTypeAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_predefinedTypeAST * operand_6379,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6379 != NULL) {
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_primitiveTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, operand_6379->mPredefinedTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (123)) COMMA_SOURCE_FILE_AT_LINE (123)), operand_6379->mPredefinedTypeName, operand_6379->mKind COMMA_SOURCE_FILE_AT_LINE (122)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'e_attributeIndexMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

e_attributeIndexMap::e_attributeIndexMap (void) :
mAttributeTypeIndex () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class map '@attributeIndexMap'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_attributeIndexMap ("attributeIndexMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_attributeIndexMap::
elementOf_GGS_attributeIndexMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_attributeIndexMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_attributeIndexMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mAttributeTypeIndex.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_attributeIndexMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_attributeIndexMap * ptr = dynamic_cast <const elementOf_GGS_attributeIndexMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mAttributeTypeIndex.operator_isEqual (ptr->mInfo.mAttributeTypeIndex)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_attributeIndexMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_attributeIndexMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_attributeIndexMap * info = (e_attributeIndexMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_attributeIndexMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_attributeIndexMap * info = (e_attributeIndexMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_attributeIndexMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_attributeIndexMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_attributeIndexMap::
operator_isEqual (const GGS_attributeIndexMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_attributeIndexMap::
operator_isNotEqual (const GGS_attributeIndexMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_unifiedTypeMapProxy & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_attributeIndexMap info  ;
    info.mAttributeTypeIndex = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_unifiedTypeMapProxy   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mAttributeTypeIndex ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_attributeIndexMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_attributeIndexMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_attributeIndexMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_attributeIndexMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_attributeIndexMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_attributeIndexMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @attributeIndexMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_attributeIndexMap::cEnumerator::_mAttributeTypeIndex (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mAttributeTypeIndex ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_attributeIndexMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_attributeIndexMap * p = NULL ;
    macroMyNew (p, GGS_attributeIndexMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_attributeIndexMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_attributeIndexMap * p = dynamic_cast <const GGS_attributeIndexMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_attributeIndexMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_attributeIndexMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_attributeIndexMap ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_unifiedTypeMapProxy & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_attributeIndexMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@listDeclarationAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_listDeclarationAST * operand_7245,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7245 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (148)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_7546 (operand_7245->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_7546 = NULL ;
      while (((operand_7546 = enumerator_7546.nextObject ()))) {
        macroValidPointer (operand_7546) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_7546->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (150)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_7546->mAttributeName) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_7546->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (155)) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_listTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_7245->mListTypeName COMMA_SOURCE_FILE_AT_LINE (158)), var_cas_typedAttributeList COMMA_SOURCE_FILE_AT_LINE (157)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@sortedListDeclarationAST.performSemanticAnalysis'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sortedListDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_sortedListDeclarationAST * operand_8123,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8123 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (175)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_8439 (operand_8123->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_8439 = NULL ;
      while (((operand_8439 = enumerator_8439.nextObject ()))) {
        macroValidPointer (operand_8439) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_8439->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (177)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_8439->mAttributeName) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_8439->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (182)) ;
      }
    }
    GGS_stringset  var_cas_attributesUsedForSorting = GGS_stringset ::constructor_emptySet () ;
    GGS_sortDescriptorListForGeneration  var_cas_sortDescriptorList = GGS_sortDescriptorListForGeneration ::constructor_emptyList () ;
    {
      GGS_sortedListSortDescriptorListAST::cEnumerator enumerator_8833 (operand_8123->mSortDescriptorList, true) ;
      const GGS_sortedListSortDescriptorListAST::cElement * operand_8833 = NULL ;
      while (((operand_8833 = enumerator_8833.nextObject ()))) {
        macroValidPointer (operand_8833) ;
        GGS_unifiedTypeMapProxy  var_cas_type ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_8833->mSortedAttributeName, var_cas_type COMMA_SOURCE_FILE_AT_LINE (189)) ;
        }
        var_cas_sortDescriptorList.addAssign_operation (var_cas_type, operand_8833->mSortedAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (190)), operand_8833->mAscending) ;
        const GGS_bool cond_9191 = var_cas_attributesUsedForSorting.reader_hasKey (operand_8833->mSortedAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (191))) ;
        if (cond_9191.isBuiltAndTrue ()) {
          operand_8833->mSortedAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_8833->mSortedAttributeName)).operator_concat (GGS_string ("' is already used for sorting")) COMMA_SOURCE_FILE_AT_LINE (193)) ;
        }
        var_cas_attributesUsedForSorting.addAssign_operation (operand_8833->mSortedAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (194))) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_sortedListTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_8123->mSortedListTypeName COMMA_SOURCE_FILE_AT_LINE (198)), var_cas_typedAttributeList, var_cas_sortDescriptorList COMMA_SOURCE_FILE_AT_LINE (197)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@structDeclarationAST.performSemanticAnalysis'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__structDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_structDeclarationAST * operand_9681,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9681 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (215)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_9982 (operand_9681->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_9982 = NULL ;
      while (((operand_9982 = enumerator_9982.nextObject ()))) {
        macroValidPointer (operand_9982) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_9982->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (217)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_9982->mAttributeName) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_9982->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (222)) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_structTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_9681->mStructTypeName COMMA_SOURCE_FILE_AT_LINE (225)), var_cas_typedAttributeList COMMA_SOURCE_FILE_AT_LINE (224)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'e_constantIndexMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

e_constantIndexMap::e_constantIndexMap (void) :
mIndex () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class map '@constantIndexMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_constantIndexMap ("constantIndexMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_constantIndexMap::
elementOf_GGS_constantIndexMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_constantIndexMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_constantIndexMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mIndex.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_constantIndexMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_constantIndexMap * ptr = dynamic_cast <const elementOf_GGS_constantIndexMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mIndex.operator_isEqual (ptr->mInfo.mIndex)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_constantIndexMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_constantIndexMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_constantIndexMap * info = (e_constantIndexMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_constantIndexMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_constantIndexMap * info = (e_constantIndexMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_constantIndexMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_constantIndexMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_constantIndexMap::
operator_isEqual (const GGS_constantIndexMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_constantIndexMap::
operator_isNotEqual (const GGS_constantIndexMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_uint & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_constantIndexMap info  ;
    info.mIndex = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mIndex ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_constantIndexMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_constantIndexMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_constantIndexMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_constantIndexMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_constantIndexMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_constantIndexMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @constantIndexMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_constantIndexMap::cEnumerator::_mIndex (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mIndex ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_constantIndexMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_constantIndexMap * p = NULL ;
    macroMyNew (p, GGS_constantIndexMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_constantIndexMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_constantIndexMap * p = dynamic_cast <const GGS_constantIndexMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_constantIndexMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_constantIndexMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_constantIndexMap ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_uint & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_constantIndexMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@enumDeclarationAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__enumDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_enumDeclarationAST * operand_10825,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10825 != NULL) {
    GGS_stringlist  var_cas_constantList = GGS_stringlist ::constructor_emptyList () ;
    GGS_constantIndexMap  var_cas_constantMap = GGS_constantIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (249)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_11128 (operand_10825->mConstantList, true) ;
      const GGS_lstringlist::cElement * operand_11128 = NULL ;
      while (((operand_11128 = enumerator_11128.nextObject ()))) {
        macroValidPointer (operand_11128) ;
        var_cas_constantList.addAssign_operation (operand_11128->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (251))) ;
        var_cas_constantMap.modifier_insertKey (inLexique, operand_11128->mValue, var_cas_constantMap.reader_count () COMMA_SOURCE_FILE_AT_LINE (252)) ;
      }
    }
    const GGS_stringset  var_cas_constantSet = var_cas_constantMap.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (254)) ;
    GGS_enumMessageListForGeneration  var_cas_enumMessageList = GGS_enumMessageListForGeneration ::constructor_emptyList () ;
    GGS_stringset  var_cas_messageNameSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_enumMessageListAST::cEnumerator enumerator_11449 (operand_10825->mEnumMessageList, true) ;
      const GGS_enumMessageListAST::cElement * operand_11449 = NULL ;
      while (((operand_11449 = enumerator_11449.nextObject ()))) {
        macroValidPointer (operand_11449) ;
        const GGS_bool cond_11610 = var_cas_messageNameSet.reader_hasKey (operand_11449->mEnumMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (259))) ;
        if (cond_11610.isBuiltAndTrue ()) {
          operand_11449->mEnumMessageName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this message is already declared for this enum type") COMMA_SOURCE_FILE_AT_LINE (261)) ;
        }
        var_cas_messageNameSet.addAssign_operation (operand_11449->mEnumMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (262))) ;
        GGS_enumMessageAssociationSortedListForGeneration  var_cas_enumMessageAssociationSortedListForGeneration = GGS_enumMessageAssociationSortedListForGeneration ::constructor_emptySortedList () ;
        GGS_stringset  var_cas_usedConstantSet = GGS_stringset ::constructor_emptySet () ;
        {
          GGS_enumMessageAssociationListAST::cEnumerator enumerator_11900 (operand_11449->mMessageAssociationList, true) ;
          const GGS_enumMessageAssociationListAST::cElement * operand_11900 = NULL ;
          while (((operand_11900 = enumerator_11900.nextObject ()))) {
            macroValidPointer (operand_11900) ;
            GGS_uint  var_cas_constantIndex ;
            if (var_cas_constantMap.isBuilt ()) {
              var_cas_constantMap (HERE)->method_searchKey (inLexique, operand_11900->mConstantName, var_cas_constantIndex COMMA_SOURCE_FILE_AT_LINE (267)) ;
            }
            var_cas_usedConstantSet.addAssign_operation (operand_11900->mConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (268))) ;
            var_cas_enumMessageAssociationSortedListForGeneration.addAssign_operation (var_cas_constantIndex, operand_11900->mConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (271)), operand_11900->mMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (272))) ;
          }
        }
        const GGS_stringset  var_cas_missedConstantSet = var_cas_constantSet.substract_operation (inLexique, var_cas_usedConstantSet COMMA_SOURCE_FILE_AT_LINE (275)) ;
        {
          GGS_stringset::cEnumerator enumerator_12311 (var_cas_missedConstantSet, true) ;
          while (enumerator_12311.hasCurrentObject ()) {
            operand_11449->mEnumMessageName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (operand_11449->mEnumMessageName)).operator_concat (GGS_string ("' message definition does not name the '"))).operator_concat (enumerator_12311._key (HERE))).operator_concat (GGS_string ("' constant")) COMMA_SOURCE_FILE_AT_LINE (279)) ;
            enumerator_12311.next () ;
          }
        }
        var_cas_enumMessageList.addAssign_operation (operand_11449->mEnumMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (280)), var_cas_enumMessageAssociationSortedListForGeneration) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_enumTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_10825->mEnumTypeName COMMA_SOURCE_FILE_AT_LINE (284)), var_cas_constantList, var_cas_enumMessageList COMMA_SOURCE_FILE_AT_LINE (283)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@listmapDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listmapDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_listmapDeclarationAST * operand_12950,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12950 != NULL) {
    GGS_typeKindEnum var_cas_typeKindEnum ;
    GGS_typedAttributeList  var_cas_listTypeAttributeList ;
    GGS_bool automatic_var_13360_0 ;
    GGS_unifiedTypeMapProxy  automatic_var_13360_1 ;
    GGS_attributeMap  automatic_var_13360_2 ;
    GGS_typedAttributeList  automatic_var_13360_3 ;
    GGS_constructorMap  automatic_var_13360_4 ;
    GGS_readerMap  automatic_var_13360_5 ;
    GGS_modifierMap  automatic_var_13360_6 ;
    GGS_instanceMethodMap  automatic_var_13360_7 ;
    GGS_classMethodMap  automatic_var_13360_8 ;
    GGS_enumerationDescriptorList  automatic_var_13360_9 ;
    GGS_uint  automatic_var_13360_10 ;
    GGS_unifiedTypeMapProxyList  automatic_var_13360_11 ;
    GGS_nativeAttributeList  automatic_var_13360_12 ;
    GGS_stringset  automatic_var_13360_13 ;
    GGS_lstringlist  automatic_var_13360_14 ;
    GGS_typedAttributeList  automatic_var_13360_15 ;
    GGS_mapSearchMethodListAST  automatic_var_13360_16 ;
    GGS_mapSearchMethodListAST  automatic_var_13360_17 ;
    GGS_withAccessorMap  automatic_var_13360_18 ;
    if (var_cas_inSemanticContext.mTypeMap.isBuilt ()) {
      var_cas_inSemanticContext.mTypeMap (HERE)->method_searchKey (inLexique, operand_12950->mAssociatedListTypeName, automatic_var_13360_0, automatic_var_13360_1, var_cas_typeKindEnum, var_cas_listTypeAttributeList, automatic_var_13360_2, automatic_var_13360_3, automatic_var_13360_4, automatic_var_13360_5, automatic_var_13360_6, automatic_var_13360_7, automatic_var_13360_8, automatic_var_13360_9, automatic_var_13360_10, automatic_var_13360_11, automatic_var_13360_12, automatic_var_13360_13, automatic_var_13360_14, automatic_var_13360_15, automatic_var_13360_16, automatic_var_13360_17, automatic_var_13360_18 COMMA_SOURCE_FILE_AT_LINE (302)) ;
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_listmapTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_12950->mListmapTypeName COMMA_SOURCE_FILE_AT_LINE (305)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_12950->mAssociatedListTypeName COMMA_SOURCE_FILE_AT_LINE (306)), var_cas_listTypeAttributeList COMMA_SOURCE_FILE_AT_LINE (304)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class map '@insertMethodMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_insertMethodMap ("insertMethodMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_insertMethodMap::
elementOf_GGS_insertMethodMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_insertMethodMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_insertMethodMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_insertMethodMap::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_insertMethodMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_insertMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_insertMethodMap * info = (e_insertMethodMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_insertMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_insertMethodMap * info = (e_insertMethodMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_insertMethodMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_insertMethodMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_insertMethodMap::
operator_isEqual (const GGS_insertMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_insertMethodMap::
operator_isNotEqual (const GGS_insertMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_insertMethodMap info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_insertMethodMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_insertMethodMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_insertMethodMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_insertMethodMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_insertMethodMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @insertMethodMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_insertMethodMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_insertMethodMap * p = NULL ;
    macroMyNew (p, GGS_insertMethodMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_insertMethodMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_insertMethodMap * p = dynamic_cast <const GGS_insertMethodMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_insertMethodMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_insertMethodMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_insertMethodMap ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_insertMethodMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class map '@searchMethodMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_searchMethodMap ("searchMethodMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_searchMethodMap::
elementOf_GGS_searchMethodMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_searchMethodMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_searchMethodMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_searchMethodMap::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_searchMethodMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_searchMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_searchMethodMap * info = (e_searchMethodMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_searchMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_searchMethodMap * info = (e_searchMethodMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_searchMethodMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_searchMethodMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_searchMethodMap::
operator_isEqual (const GGS_searchMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_searchMethodMap::
operator_isNotEqual (const GGS_searchMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_searchMethodMap info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_searchMethodMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_searchMethodMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_searchMethodMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_searchMethodMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_searchMethodMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @searchMethodMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_searchMethodMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_searchMethodMap * p = NULL ;
    macroMyNew (p, GGS_searchMethodMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_searchMethodMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_searchMethodMap * p = dynamic_cast <const GGS_searchMethodMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_searchMethodMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_searchMethodMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_searchMethodMap ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_searchMethodMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@mapDeclarationAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_mapDeclarationAST * operand_14185,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14185 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (334)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_14504 (operand_14185->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_14504 = NULL ;
      while (((operand_14504 = enumerator_14504.nextObject ()))) {
        macroValidPointer (operand_14504) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_14504->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (336)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_14504->mAttributeName) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_14504->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (341)) ;
      }
    }
    GGS_insertMethodMap  var_cas_insertMethodMap = GGS_insertMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (344)) ;
    {
      GGS_insertMethodListAST::cEnumerator enumerator_14832 (operand_14185->mInsertMethodList, true) ;
      const GGS_insertMethodListAST::cElement * operand_14832 = NULL ;
      while (((operand_14832 = enumerator_14832.nextObject ()))) {
        macroValidPointer (operand_14832) ;
        var_cas_insertMethodMap.modifier_insertKey (inLexique, operand_14832->mMethodName COMMA_SOURCE_FILE_AT_LINE (346)) ;
        {
          GGS_stringlist::cEnumerator enumerator_14962 (operand_14832->mErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (348)).reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_14962 = NULL ;
          while (((operand_14962 = enumerator_14962.nextObject ()))) {
            macroValidPointer (operand_14962) ;
            GGS_stringlist  var_cas_explodedArray = operand_14962->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_15137_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_15137_0 COMMA_SOURCE_FILE_AT_LINE (350)) ;
            {
              GGS_stringlist::cEnumerator enumerator_15167 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_15167 = NULL ;
              while (((operand_15167 = enumerator_15167.nextObject ()))) {
                macroValidPointer (operand_15167) ;
                const GGS_bool cond_15455 = (operand_15167->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_15455.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_15167->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (353)) ;
                  const GGS_bool cond_15438 = ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K')))).operator_and ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('L')))) ;
                  if (cond_15438.isBuiltAndTrue ()) {
                    operand_14832->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K', '%L' and '%%' escape sequences are allowed in an insert error message") COMMA_SOURCE_FILE_AT_LINE (356)) ;
                  }
                }
              }
            }
          }
        }
        {
          GGS_stringlist::cEnumerator enumerator_15583 (operand_14832->mShadowErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (361)).reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_15583 = NULL ;
          while (((operand_15583 = enumerator_15583.nextObject ()))) {
            macroValidPointer (operand_15583) ;
            GGS_stringlist  var_cas_explodedArray = operand_15583->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_15764_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_15764_0 COMMA_SOURCE_FILE_AT_LINE (363)) ;
            {
              GGS_stringlist::cEnumerator enumerator_15794 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_15794 = NULL ;
              while (((operand_15794 = enumerator_15794.nextObject ()))) {
                macroValidPointer (operand_15794) ;
                const GGS_bool cond_16081 = (operand_15794->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_16081.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_15794->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (366)) ;
                  const GGS_bool cond_16064 = ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K')))).operator_and ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('L')))) ;
                  if (cond_16064.isBuiltAndTrue ()) {
                    operand_14832->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K', '%L' and '%%' escape sequences are allowed in a shadow error message") COMMA_SOURCE_FILE_AT_LINE (369)) ;
                  }
                }
              }
            }
          }
        }
      }
    }
    GGS_searchMethodMap  var_cas_searchMethodMap = GGS_searchMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (375)) ;
    {
      GGS_mapSearchMethodListAST::cEnumerator enumerator_16242 (operand_14185->mSearchMethodList, true) ;
      const GGS_mapSearchMethodListAST::cElement * operand_16242 = NULL ;
      while (((operand_16242 = enumerator_16242.nextObject ()))) {
        macroValidPointer (operand_16242) ;
        var_cas_searchMethodMap.modifier_insertKey (inLexique, operand_16242->mMethodName COMMA_SOURCE_FILE_AT_LINE (377)) ;
        {
          GGS_stringlist::cEnumerator enumerator_16368 (operand_16242->mErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (379)).reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_16368 = NULL ;
          while (((operand_16368 = enumerator_16368.nextObject ()))) {
            macroValidPointer (operand_16368) ;
            GGS_stringlist  var_cas_explodedArray = operand_16368->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_16543_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_16543_0 COMMA_SOURCE_FILE_AT_LINE (381)) ;
            {
              GGS_stringlist::cEnumerator enumerator_16573 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_16573 = NULL ;
              while (((operand_16573 = enumerator_16573.nextObject ()))) {
                macroValidPointer (operand_16573) ;
                const GGS_bool cond_16839 = (operand_16573->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_16839.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_16573->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (384)) ;
                  const GGS_bool cond_16822 = (var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K'))) ;
                  if (cond_16822.isBuiltAndTrue ()) {
                    operand_16242->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K' and '%%' escape sequences are allowed in a search error message") COMMA_SOURCE_FILE_AT_LINE (387)) ;
                  }
                }
              }
            }
          }
        }
      }
    }
    {
      GGS_mapRemoveMethodListAST::cEnumerator enumerator_16952 (operand_14185->mRemoveMethodList, true) ;
      const GGS_mapRemoveMethodListAST::cElement * operand_16952 = NULL ;
      while (((operand_16952 = enumerator_16952.nextObject ()))) {
        macroValidPointer (operand_16952) ;
        var_cas_insertMethodMap.modifier_insertKey (inLexique, operand_16952->mMethodName COMMA_SOURCE_FILE_AT_LINE (394)) ;
        {
          GGS_stringlist::cEnumerator enumerator_17078 (operand_16952->mErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (396)).reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_17078 = NULL ;
          while (((operand_17078 = enumerator_17078.nextObject ()))) {
            macroValidPointer (operand_17078) ;
            GGS_stringlist  var_cas_explodedArray = operand_17078->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_17253_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_17253_0 COMMA_SOURCE_FILE_AT_LINE (398)) ;
            {
              GGS_stringlist::cEnumerator enumerator_17283 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_17283 = NULL ;
              while (((operand_17283 = enumerator_17283.nextObject ()))) {
                macroValidPointer (operand_17283) ;
                const GGS_bool cond_17549 = (operand_17283->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_17549.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_17283->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (401)) ;
                  const GGS_bool cond_17532 = (var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K'))) ;
                  if (cond_17532.isBuiltAndTrue ()) {
                    operand_16952->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K' and '%%' escape sequences are allowed in a remove error message") COMMA_SOURCE_FILE_AT_LINE (404)) ;
                  }
                }
              }
            }
          }
        }
      }
    }
    {
        GGS_uint var_cas_IDX (true, 0) ;
      GGS_insertOrReplaceDeclarationListAST::cEnumerator enumerator_17721 (operand_14185->mInsertOrReplaceDeclarationListAST, true) ;
      const GGS_insertOrReplaceDeclarationListAST::cElement * operand_17721 = NULL ;
      while (((operand_17721 = enumerator_17721.nextObject ()))) {
        macroValidPointer (operand_17721) ;
        const GGS_bool cond_17868 = (var_cas_IDX).operator_strictSup (GGS_uint (0U)) ;
        if (cond_17868.isBuiltAndTrue ()) {
          operand_17721->mInsertOrReplaceDeclarationLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("the 'insertOrReplace' modifier is already declared") COMMA_SOURCE_FILE_AT_LINE (412)) ;
        }
        var_cas_IDX.mValue ++ ;
      }
    }
    const GGS_bool var_cas_hasInsertOrReplaceModifier = (operand_14185->mInsertOrReplaceDeclarationListAST.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    const GGS_bool cond_18383 = (var_cas_hasInsertOrReplaceModifier).operator_and (var_cas_insertMethodMap.reader_hasKey (GGS_string ("insertOrReplace"))) ;
    if (cond_18383.isBuiltAndTrue ()) {
      GGS_location  var_cas_insertOrReplaceDeclarationLocation ;
      if (operand_14185->mInsertOrReplaceDeclarationListAST.isBuilt ()) {
        operand_14185->mInsertOrReplaceDeclarationListAST (HERE)->method_first (inLexique, var_cas_insertOrReplaceDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (418)) ;
      }
      var_cas_insertOrReplaceDeclarationLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the insertOrReplace' modifier cannot be declared : an insert modifier or a remove modifier has been declared with this name") COMMA_SOURCE_FILE_AT_LINE (420)) ;
    }
    GGS_withAccessorMap  var_cas_withAccessorMap = GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (422)) ;
    var_cas_withAccessorMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("hasKey"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (423)), var_cas_inPredefinedTypes.mStringType COMMA_SOURCE_FILE_AT_LINE (423)) ;
    {
      GGS_mapSearchMethodListAST::cEnumerator enumerator_18590 (operand_14185->mSearchMethodList, true) ;
      const GGS_mapSearchMethodListAST::cElement * operand_18590 = NULL ;
      while (((operand_18590 = enumerator_18590.nextObject ()))) {
        macroValidPointer (operand_18590) ;
        var_cas_withAccessorMap.modifier_insertKey (inLexique, operand_18590->mMethodName, var_cas_inPredefinedTypes.mLStringType COMMA_SOURCE_FILE_AT_LINE (425)) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_mapTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_14185->mMapTypeName COMMA_SOURCE_FILE_AT_LINE (432)), operand_14185->mMapTypeName, var_cas_typedAttributeList, operand_14185->mInsertMethodList, operand_14185->mSearchMethodList, operand_14185->mRemoveMethodList, var_cas_hasInsertOrReplaceModifier, var_cas_withAccessorMap COMMA_SOURCE_FILE_AT_LINE (431)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@mapProxyDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapProxyDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_mapProxyDeclarationAST * operand_19223,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19223 != NULL) {
    GGS_typedAttributeList  var_cas_listTypeAttributeList ;
    GGS_mapSearchMethodListAST  var_cas_searchMethodList ;
    GGS_bool automatic_var_19650_0 ;
    GGS_unifiedTypeMapProxy  automatic_var_19650_1 ;
    GGS_typeKindEnum automatic_var_19650_2 ;
    GGS_typedAttributeList  automatic_var_19650_3 ;
    GGS_attributeMap  automatic_var_19650_4 ;
    GGS_constructorMap  automatic_var_19650_5 ;
    GGS_readerMap  automatic_var_19650_6 ;
    GGS_modifierMap  automatic_var_19650_7 ;
    GGS_instanceMethodMap  automatic_var_19650_8 ;
    GGS_classMethodMap  automatic_var_19650_9 ;
    GGS_enumerationDescriptorList  automatic_var_19650_10 ;
    GGS_uint  automatic_var_19650_11 ;
    GGS_unifiedTypeMapProxyList  automatic_var_19650_12 ;
    GGS_nativeAttributeList  automatic_var_19650_13 ;
    GGS_stringset  automatic_var_19650_14 ;
    GGS_lstringlist  automatic_var_19650_15 ;
    GGS_typedAttributeList  automatic_var_19650_16 ;
    GGS_mapSearchMethodListAST  automatic_var_19650_17 ;
    GGS_withAccessorMap  automatic_var_19650_18 ;
    if (var_cas_inSemanticContext.mTypeMap.isBuilt ()) {
      var_cas_inSemanticContext.mTypeMap (HERE)->method_searchKey (inLexique, operand_19223->mAssociatedMapTypeName, automatic_var_19650_0, automatic_var_19650_1, automatic_var_19650_2, automatic_var_19650_3, automatic_var_19650_4, var_cas_listTypeAttributeList, automatic_var_19650_5, automatic_var_19650_6, automatic_var_19650_7, automatic_var_19650_8, automatic_var_19650_9, automatic_var_19650_10, automatic_var_19650_11, automatic_var_19650_12, automatic_var_19650_13, automatic_var_19650_14, automatic_var_19650_15, automatic_var_19650_16, var_cas_searchMethodList, automatic_var_19650_17, automatic_var_19650_18 COMMA_SOURCE_FILE_AT_LINE (455)) ;
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_mapProxyTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_19223->mMapProxyTypeName COMMA_SOURCE_FILE_AT_LINE (458)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_19223->mAssociatedMapTypeName COMMA_SOURCE_FILE_AT_LINE (459)), var_cas_listTypeAttributeList, var_cas_searchMethodList COMMA_SOURCE_FILE_AT_LINE (457)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class map '@declaredMethodMap'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_declaredMethodMap ("declaredMethodMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_declaredMethodMap::
elementOf_GGS_declaredMethodMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_declaredMethodMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_declaredMethodMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_declaredMethodMap::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_declaredMethodMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_declaredMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_declaredMethodMap * info = (e_declaredMethodMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_declaredMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_declaredMethodMap * info = (e_declaredMethodMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_declaredMethodMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_declaredMethodMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_declaredMethodMap::
operator_isEqual (const GGS_declaredMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_declaredMethodMap::
operator_isNotEqual (const GGS_declaredMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_declaredMethodMap info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_declaredMethodMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_declaredMethodMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_declaredMethodMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_declaredMethodMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_declaredMethodMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @declaredMethodMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_declaredMethodMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_declaredMethodMap * p = NULL ;
    macroMyNew (p, GGS_declaredMethodMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_declaredMethodMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_declaredMethodMap * p = dynamic_cast <const GGS_declaredMethodMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_declaredMethodMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_declaredMethodMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_declaredMethodMap ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_declaredMethodMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "buildLocalVariableMapAndSignature"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildLocalVariableMapAndSignature (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_formalParameterListAST   var_cas_inRoutineSignatureAST,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_formalParameterListForGeneration  & var_cas_outRoutineSignature
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildLocalVariableMapAndSignature at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outRoutineSignature = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
  {
    GGS_formalParameterListAST::cEnumerator enumerator_20667 (var_cas_inRoutineSignatureAST, true) ;
    const GGS_formalParameterListAST::cElement * operand_20667 = NULL ;
    while (((operand_20667 = enumerator_20667.nextObject ()))) {
      macroValidPointer (operand_20667) ;
      const GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_20667->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (483)) ;
      GGS_string var_cas_formalArgumentCppName ;
      switch (operand_20667->mFormalArgumentPassingMode.enumValue ()) {
      case GGS_formalArgumentPassingModeAST::enum_argumentIn:
        {
        var_cas_formalArgumentCppName = (GGS_string ("inArgument_")).operator_concat (operand_20667->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (487)).reader_identifierRepresentation ()) ;
        const GGS_bool cond_21153 = operand_20667->mIsUnused ;
        if (cond_21153.isBuiltAndTrue ()) {
          var_cas_ioVariableMap.modifier_insertInputFormalArgumentDeclaredAsUnused (inLexique, operand_20667->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (489)) ;
        }else if (cond_21153.isBuiltAndFalse ()) {
          var_cas_ioVariableMap.modifier_insertInputFormalArgument (inLexique, operand_20667->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (491)) ;
        }
        }
        break ;
      case GGS_formalArgumentPassingModeAST::enum_argumentOut:
        {
        var_cas_formalArgumentCppName = (GGS_string ("outArgument_")).operator_concat (operand_20667->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (494)).reader_identifierRepresentation ()) ;
        var_cas_ioVariableMap.modifier_insertOutputFormalArgument (inLexique, operand_20667->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (495)) ;
        }
        break ;
      case GGS_formalArgumentPassingModeAST::enum_argumentInOut:
        {
        var_cas_formalArgumentCppName = (GGS_string ("ioArgument_")).operator_concat (operand_20667->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (497)).reader_identifierRepresentation ()) ;
        const GGS_bool cond_21864 = operand_20667->mIsUnused ;
        if (cond_21864.isBuiltAndTrue ()) {
          var_cas_ioVariableMap.modifier_insertInputOutputFormalArgumentDeclaredAsUnused (inLexique, operand_20667->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (499)) ;
        }else if (cond_21864.isBuiltAndFalse ()) {
          var_cas_ioVariableMap.modifier_insertInputOutputFormalArgument (inLexique, operand_20667->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (501)) ;
        }
        }
        break ;
      case GGS_formalArgumentPassingModeAST::enum_argumentConstantIn:
        {
        var_cas_formalArgumentCppName = (GGS_string ("constinArgument_")).operator_concat (operand_20667->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (504)).reader_identifierRepresentation ()) ;
        const GGS_bool cond_22338 = operand_20667->mIsUnused ;
        if (cond_22338.isBuiltAndTrue ()) {
          var_cas_ioVariableMap.modifier_insertConstantInputFormalArgumentDeclaredAsUnused (inLexique, operand_20667->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (506)) ;
        }else if (cond_22338.isBuiltAndFalse ()) {
          var_cas_ioVariableMap.modifier_insertConstantInputFormalArgument (inLexique, operand_20667->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (508)) ;
        }
        }
        break ;
      case GGS_formalArgumentPassingModeAST::kNotBuilt:
        break ;
      }
      var_cas_outRoutineSignature.addAssign_operation (operand_20667->mFormalArgumentPassingMode, var_cas_type, operand_20667->mFormalArgumentName, var_cas_formalArgumentCppName) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildLocalVariableMapAndSignature\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "analyzeRoutineBody"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeRoutineBody (C_Compiler & inLexique,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                const GGS_formalParameterListAST   var_cas_inRoutineSignatureAST,
                                const GGS_localConstantList   var_cas_inLocalConstantList,
                                const GGS_typedAttributeList   var_cas_inTypedAttributeList,
                                const GGS_string  var_cas_inAttributeVariableNamePrefix,
                                const GGS_semanticInstructionListAST   var_cas_inInstructionList,
                                const GGS_location   var_cas_inEndOfMethodLocation,
                                GGS_semanticInstructionListForGeneration  & var_cas_outSemanticInstructionListForGeneration,
                                GGS_formalParameterListForGeneration  & var_cas_outRoutineSignature
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeRoutineBody at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_variableMap  var_cas_variableMap = GGS_variableMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (528)) ;
  {
    GGS_localConstantList::cEnumerator enumerator_23293 (var_cas_inLocalConstantList, true) ;
    const GGS_localConstantList::cElement * operand_23293 = NULL ;
    while (((operand_23293 = enumerator_23293.nextObject ()))) {
      macroValidPointer (operand_23293) ;
      const GGS_bool cond_23425 = operand_23293->mNoWarningIfUnused ;
      if (cond_23425.isBuiltAndTrue ()) {
        var_cas_variableMap.modifier_insertUsedLocalConstant (inLexique, operand_23293->mName, operand_23293->mType, operand_23293->mCppName, function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (532)) COMMA_SOURCE_FILE_AT_LINE (532)) ;
      }else if (cond_23425.isBuiltAndFalse ()) {
        var_cas_variableMap.modifier_insertLocalConstant (inLexique, operand_23293->mName, operand_23293->mType, operand_23293->mCppName, function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (534)) COMMA_SOURCE_FILE_AT_LINE (534)) ;
      }
    }
  }
  {
    GGS_typedAttributeList::cEnumerator enumerator_23601 (var_cas_inTypedAttributeList, true) ;
    const GGS_typedAttributeList::cElement * operand_23601 = NULL ;
    while (((operand_23601 = enumerator_23601.nextObject ()))) {
      macroValidPointer (operand_23601) ;
      var_cas_variableMap.modifier_insertNonMutableAttribute (inLexique, operand_23601->mAttributeName, operand_23601->mAttributeTypeProxy, ((var_cas_inAttributeVariableNamePrefix).operator_concat (GGS_string ("mAttribute_"))).operator_concat (operand_23601->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (542)).reader_identifierRepresentation ()), function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (543)) COMMA_SOURCE_FILE_AT_LINE (539)) ;
    }
  }
  ::routine_buildLocalVariableMapAndSignature (inLexique,  var_cas_inAnalysisContext.mSemanticContext,  var_cas_inRoutineSignatureAST,  var_cas_variableMap,  var_cas_outRoutineSignature COMMA_SOURCE_FILE_AT_LINE (547)) ;
  var_cas_outSemanticInstructionListForGeneration = GGS_semanticInstructionListForGeneration ::constructor_emptyList () ;
  {
    GGS_semanticInstructionListAST::cEnumerator enumerator_24185 (var_cas_inInstructionList, true) ;
    const GGS_semanticInstructionListAST::cElement * operand_24185 = NULL ;
    while (((operand_24185 = enumerator_24185.nextObject ()))) {
      macroValidPointer (operand_24185) ;
      { typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction method = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (operand_24185->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_24185->mInstruction (HERE), var_cas_inAnalysisContext, var_cas_outSemanticInstructionListForGeneration, var_cas_variableMap COMMA_SOURCE_FILE_AT_LINE (556)) ;
        }
      }
    }
  }
  if (var_cas_variableMap.isBuilt ()) {
    var_cas_variableMap (HERE)->method_checkAutomatonStates (inLexique, var_cas_inEndOfMethodLocation COMMA_SOURCE_FILE_AT_LINE (563)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeRoutineBody\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@externFunctionDeclarationAST.performSemanticAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externFunctionDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_externFunctionDeclarationAST * operand_24582,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24582 != NULL) {
    GGS_formalInputParameterListForGeneration  var_cas_formalArgumentList = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
    {
      GGS_formalInputParameterListAST::cEnumerator enumerator_24860 (operand_24582->mFormalArgumentList, true) ;
      const GGS_formalInputParameterListAST::cElement * operand_24860 = NULL ;
      while (((operand_24860 = enumerator_24860.nextObject ()))) {
        macroValidPointer (operand_24860) ;
        var_cas_formalArgumentList.addAssign_operation (GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_24860->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (576)), operand_24860->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (577)), operand_24860->mFormalArgumentName, operand_24860->mIsUnused) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_functionPrototypeDeclarationForGeneration ::constructor_new (inLexique, operand_24582->mFunctionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (583)), var_cas_formalArgumentList, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_24582->mResultTypeName COMMA_SOURCE_FILE_AT_LINE (585)) COMMA_SOURCE_FILE_AT_LINE (582)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@externRoutineDeclarationAST.performSemanticAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externRoutineDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_externRoutineDeclarationAST * operand_25490,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25490 != NULL) {
    GGS_formalParameterListForGeneration  var_cas_formalArgumentList = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    {
      GGS_formalParameterListAST::cEnumerator enumerator_25763 (operand_25490->mFormalArgumentList, true) ;
      const GGS_formalParameterListAST::cElement * operand_25763 = NULL ;
      while (((operand_25763 = enumerator_25763.nextObject ()))) {
        macroValidPointer (operand_25763) ;
        var_cas_formalArgumentList.addAssign_operation (operand_25763->mFormalArgumentPassingMode, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_25763->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (602)), operand_25763->mFormalArgumentName, operand_25763->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (604))) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_routinePrototypeDeclarationForGeneration ::constructor_new (inLexique, operand_25490->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (608)), var_cas_formalArgumentList COMMA_SOURCE_FILE_AT_LINE (607)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@routineDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__routineDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_routineDeclarationAST * operand_26318,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26318 != NULL) {
    GGS_formalParameterListForGeneration  var_cas_formalArgumentList = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (628)), GGS_string ("")) ;
    ::routine_analyzeRoutineBody (inLexique,  var_cas_analysisContext,  operand_26318->mFormalArgumentList,  GGS_localConstantList ::constructor_emptyList (),  GGS_typedAttributeList ::constructor_emptyList (),  GGS_string (""),  operand_26318->mRoutineInstructionList,  operand_26318->mEndOfRoutineInstructionList,  var_cas_instructionList,  var_cas_formalArgumentList COMMA_SOURCE_FILE_AT_LINE (631)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_routineImplementationForGeneration ::constructor_new (inLexique, operand_26318->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (644)), var_cas_formalArgumentList, var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (643)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@classDeclarationAST.performSemanticAnalysis'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__classDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_classDeclarationAST * operand_27364,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27364 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_27364->mClassTypeName COMMA_SOURCE_FILE_AT_LINE (660)) ;
    GGS_unifiedTypeMapProxy  var_cas_superClassProxy ;
    GGS_typedAttributeList  var_cas_allAttributeList ;
    GGS_instanceMethodMap  var_cas_inheritedInstanceMethodMap ;
    const GGS_bool cond_28046 = (operand_27364->mSuperClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (665))).operator_isEqual (GGS_string ("")) ;
    if (cond_28046.isBuiltAndTrue ()) {
      var_cas_superClassProxy = GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (666)) ;
      var_cas_allAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
      var_cas_inheritedInstanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (668)) ;
    }else if (cond_28046.isBuiltAndFalse ()) {
      var_cas_superClassProxy = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_27364->mSuperClassName COMMA_SOURCE_FILE_AT_LINE (670)) ;
      var_cas_allAttributeList = var_cas_superClassProxy.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (671)) ;
      var_cas_inheritedInstanceMethodMap = var_cas_superClassProxy.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (672)) ;
    }
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (676)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_28453 (operand_27364->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_28453 = NULL ;
      while (((operand_28453 = enumerator_28453.nextObject ()))) {
        macroValidPointer (operand_28453) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_28453->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (678)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_28453->mAttributeName) ;
        var_cas_allAttributeList.addAssign_operation (var_cas_t, operand_28453->mAttributeName) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_28453->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (687)) ;
      }
    }
    GGS_declaredMethodMap  var_cas_classMethodMap = GGS_declaredMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (690)) ;
    {
      GGS_abstractMethodDefinitionListAST::cEnumerator enumerator_28869 (operand_27364->mAbstractMethodList, true) ;
      const GGS_abstractMethodDefinitionListAST::cElement * operand_28869 = NULL ;
      while (((operand_28869 = enumerator_28869.nextObject ()))) {
        macroValidPointer (operand_28869) ;
        var_cas_classMethodMap.modifier_insertKey (inLexique, operand_28869->mMethodName COMMA_SOURCE_FILE_AT_LINE (692)) ;
      }
    }
    {
      GGS_methodDefinitionListAST::cEnumerator enumerator_28957 (operand_27364->mMethodList, true) ;
      const GGS_methodDefinitionListAST::cElement * operand_28957 = NULL ;
      while (((operand_28957 = enumerator_28957.nextObject ()))) {
        macroValidPointer (operand_28957) ;
        var_cas_classMethodMap.modifier_insertKey (inLexique, operand_28957->mMethodName COMMA_SOURCE_FILE_AT_LINE (695)) ;
      }
    }
    GGS_abstractMethodDefinitionListForGeneration  var_cas_abstractMethodList = GGS_abstractMethodDefinitionListForGeneration ::constructor_emptyList () ;
    {
      GGS_abstractMethodDefinitionListAST::cEnumerator enumerator_29156 (operand_27364->mAbstractMethodList, true) ;
      const GGS_abstractMethodDefinitionListAST::cElement * operand_29156 = NULL ;
      while (((operand_29156 = enumerator_29156.nextObject ()))) {
        macroValidPointer (operand_29156) ;
        const GGS_bool cond_29342 = (operand_27364->mIsAbstract).operator_not () ;
        if (cond_29342.isBuiltAndTrue ()) {
          operand_29156->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a concrete class cannot declare an abstract method") COMMA_SOURCE_FILE_AT_LINE (703)) ;
        }
        GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
        {
          GGS_formalParameterListAST::cEnumerator enumerator_29487 (operand_29156->mSignature, true) ;
          const GGS_formalParameterListAST::cElement * operand_29487 = NULL ;
          while (((operand_29487 = enumerator_29487.nextObject ()))) {
            macroValidPointer (operand_29487) ;
            var_cas_formalParameterListForGeneration.addAssign_operation (operand_29487->mFormalArgumentPassingMode, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_29487->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (709)), operand_29487->mFormalArgumentName, operand_29487->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (711))) ;
          }
        }
        const GGS_bool cond_30226 = operand_29156->mIsOverriding ;
        if (cond_30226.isBuiltAndTrue ()) {
          GGS_formalParameterSignature  var_cas_inheritedSignature ;
          GGS_location  var_cas_inheritedDeclarationLocation ;
          GGS_bool automatic_var_30038_0 ;
          GGS_bool automatic_var_30038_1 ;
          GGS_methodQualifier automatic_var_30038_2 ;
          if (var_cas_inheritedInstanceMethodMap.isBuilt ()) {
            var_cas_inheritedInstanceMethodMap (HERE)->method_searchInheritedKey (inLexique, operand_29156->mMethodName, automatic_var_30038_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_30038_1, automatic_var_30038_2 COMMA_SOURCE_FILE_AT_LINE (718)) ;
          }
          ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_29156->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (721)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (719)) ;
        }else if (cond_30226.isBuiltAndFalse ()) {
          const GGS_bool cond_30409 = var_cas_inheritedInstanceMethodMap.reader_hasKey (operand_29156->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (725))) ;
          if (cond_30409.isBuiltAndTrue ()) {
            operand_29156->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this method cannot be declared as abstract, it is already declared in super class") COMMA_SOURCE_FILE_AT_LINE (727)) ;
          }
        }
        var_cas_abstractMethodList.addAssign_operation (operand_29156->mIsOverriding, operand_29156->mMethodName, var_cas_formalParameterListForGeneration) ;
      }
    }
    GGS_methodDefinitionListForGeneration  var_cas_methodList = GGS_methodDefinitionListForGeneration ::constructor_emptyList () ;
    GGS_stringset  var_cas_definedMethodSet = GGS_stringset ::constructor_emptySet () ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("this")) ;
    {
      GGS_methodDefinitionListAST::cEnumerator enumerator_30787 (operand_27364->mMethodList, true) ;
      const GGS_methodDefinitionListAST::cElement * operand_30787 = NULL ;
      while (((operand_30787 = enumerator_30787.nextObject ()))) {
        macroValidPointer (operand_30787) ;
        GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
        GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
        ::routine_analyzeRoutineBody (inLexique,  var_cas_analysisContext,  operand_30787->mSignature,  GGS_localConstantList ::constructor_emptyList (),  var_cas_allAttributeList,  GGS_string (""),  operand_30787->mInstructionList,  operand_30787->mEndOfMethodLocation,  var_cas_semanticInstructionListForGeneration,  var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (743)) ;
        const GGS_bool cond_31926 = operand_30787->mIsOverriding ;
        if (cond_31926.isBuiltAndTrue ()) {
          GGS_formalParameterSignature  var_cas_inheritedSignature ;
          GGS_location  var_cas_inheritedDeclarationLocation ;
          GGS_bool var_cas_inheritedIsCategory ;
          GGS_bool automatic_var_31574_0 ;
          GGS_methodQualifier automatic_var_31574_1 ;
          if (var_cas_inheritedInstanceMethodMap.isBuilt ()) {
            var_cas_inheritedInstanceMethodMap (HERE)->method_searchInheritedKey (inLexique, operand_30787->mMethodName, var_cas_inheritedIsCategory, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_31574_0, automatic_var_31574_1 COMMA_SOURCE_FILE_AT_LINE (759)) ;
          }
          ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_30787->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (762)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (760)) ;
          const GGS_bool cond_31911 = var_cas_inheritedIsCategory ;
          if (cond_31911.isBuiltAndTrue ()) {
            operand_30787->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this method is declared in class, but overriden method is declared as multi-method") COMMA_SOURCE_FILE_AT_LINE (768)) ;
          }
        }else if (cond_31926.isBuiltAndFalse ()) {
          const GGS_bool cond_32115 = var_cas_inheritedInstanceMethodMap.reader_hasKey (operand_30787->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (769))) ;
          if (cond_32115.isBuiltAndTrue ()) {
            operand_30787->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this method should be declared as overridding, as it is already declared in super class") COMMA_SOURCE_FILE_AT_LINE (771)) ;
          }
        }
        var_cas_definedMethodSet.addAssign_operation (operand_30787->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (773))) ;
        var_cas_methodList.addAssign_operation (operand_30787->mIsOverriding, operand_30787->mMethodName, var_cas_formalParameterListForGeneration, var_cas_semanticInstructionListForGeneration) ;
      }
    }
    const GGS_bool cond_32860 = (operand_27364->mIsAbstract).operator_not () ;
    if (cond_32860.isBuiltAndTrue ()) {
      {
        GGS_instanceMethodMap::cEnumerator enumerator_32458 (var_cas_inheritedInstanceMethodMap, true) ;
        const GGS_instanceMethodMap::cElement * operand_32458 = NULL ;
        while (((operand_32458 = enumerator_32458.nextObject ()))) {
          macroValidPointer (operand_32458) ;
          const GGS_bool cond_32831 = ((operand_32458->mInfo.mQualifier).operator_isEqual (GGS_methodQualifier::constructor_isAbstract (inLexique COMMA_SOURCE_FILE_AT_LINE (784)))).operator_or ((operand_32458->mInfo.mQualifier).operator_isEqual (GGS_methodQualifier::constructor_isOverridingAbstract (inLexique COMMA_SOURCE_FILE_AT_LINE (784)))) ;
          if (cond_32831.isBuiltAndTrue ()) {
            const GGS_bool cond_32812 = (var_cas_definedMethodSet.reader_hasKey (operand_32458->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (785)))).operator_not () ;
            if (cond_32812.isBuiltAndTrue ()) {
              operand_32458->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (operand_27364->mClassTypeName)).operator_concat (GGS_string ("' class is declared concrete, but the '"))).operator_concat (operand_32458->mKey)).operator_concat (GGS_string ("' method declared in a super class is not implemented")) COMMA_SOURCE_FILE_AT_LINE (787)) ;
            }
          }
        }
      }
    }
    GGS_string var_cas_sortString = var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (792)) ;
    GGS_unifiedTypeMapProxy  var_cas_t = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (793)) ;
    GGS_uint _variant_33174 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (794)) ;
    GGS_bool _condition_33174 (_variant_33174.isBuilt (), true) ;
    while (_condition_33174.isBuiltAndTrue ()) {
      _condition_33174 = (var_cas_t.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (795))).operator_not () ;
      if (_condition_33174.isBuiltAndTrue ()) {
        if (_variant_33174.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (798)) ;
          _condition_33174 = GGS_bool (false) ;
        }else{
          _variant_33174.decrement_operation (inLexique COMMA_HERE) ;
          var_cas_sortString = ((var_cas_t.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (796))).operator_concat (GGS_string ("."))).operator_concat (var_cas_sortString) ;
          var_cas_t = var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (797)) ;
        }
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_classTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_27364->mClassTypeName COMMA_SOURCE_FILE_AT_LINE (801)), operand_27364->mIsAbstract, operand_27364->mClassTypeName, var_cas_superClassProxy, var_cas_allAttributeList, var_cas_typedAttributeList, var_cas_abstractMethodList, var_cas_methodList, var_cas_selfType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (809)) COMMA_SOURCE_FILE_AT_LINE (800)), var_cas_sortString) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "analyzeFunctionBody"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeFunctionBody (C_Compiler & inLexique,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                const GGS_formalInputParameterListAST   var_cas_inFunctionSignature,
                                const GGS_typedAttributeList   var_cas_inTypedAttributeList,
                                const GGS_string  var_cas_inAttributeVariableNamePrefix,
                                const GGS_semanticInstructionListAST   var_cas_inInstructionList,
                                const GGS_lstring   var_cas_inReturnVariableName,
                                const GGS_lstring   var_cas_inResultTypeName,
                                const GGS_location   var_cas_inEndOfFunctionLocation,
                                GGS_formalInputParameterListForGeneration  & var_cas_outSignatureForGeneration,
                                GGS_unifiedTypeMapProxy  & var_cas_outReturnedType,
                                GGS_string & var_cas_outResultVariableCppName,
                                GGS_semanticInstructionListForGeneration  & var_cas_outSemanticInstructionListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeFunctionBody at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_variableMap  var_cas_variableMap = GGS_variableMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (831)) ;
  {
    GGS_typedAttributeList::cEnumerator enumerator_34328 (var_cas_inTypedAttributeList, true) ;
    const GGS_typedAttributeList::cElement * operand_34328 = NULL ;
    while (((operand_34328 = enumerator_34328.nextObject ()))) {
      macroValidPointer (operand_34328) ;
      var_cas_variableMap.modifier_insertNonMutableAttribute (inLexique, operand_34328->mAttributeName, operand_34328->mAttributeTypeProxy, ((var_cas_inAttributeVariableNamePrefix).operator_concat (GGS_string ("mAttribute_"))).operator_concat (operand_34328->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (837)).reader_identifierRepresentation ()), function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (838)) COMMA_SOURCE_FILE_AT_LINE (834)) ;
    }
  }
  var_cas_outSignatureForGeneration = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
  {
    GGS_formalInputParameterListAST::cEnumerator enumerator_34720 (var_cas_inFunctionSignature, true) ;
    const GGS_formalInputParameterListAST::cElement * operand_34720 = NULL ;
    while (((operand_34720 = enumerator_34720.nextObject ()))) {
      macroValidPointer (operand_34720) ;
      const GGS_unifiedTypeMapProxy  var_cas_parameterType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, operand_34720->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (844)) ;
      const GGS_bool cond_35422 = operand_34720->mIsConstant ;
      if (cond_35422.isBuiltAndTrue ()) {
        const GGS_string var_cas_cppName = (GGS_string ("constinArgument_")).operator_concat (operand_34720->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (846)).reader_identifierRepresentation ()) ;
        var_cas_outSignatureForGeneration.addAssign_operation (var_cas_parameterType, var_cas_cppName, operand_34720->mFormalArgumentName, operand_34720->mIsUnused) ;
        const GGS_bool cond_35284 = operand_34720->mIsUnused ;
        if (cond_35284.isBuiltAndTrue ()) {
          var_cas_variableMap.modifier_insertConstantInputFormalArgumentDeclaredAsUnused (inLexique, operand_34720->mFormalArgumentName, var_cas_parameterType, var_cas_cppName, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (854)) ;
        }else if (cond_35284.isBuiltAndFalse ()) {
          var_cas_variableMap.modifier_insertConstantInputFormalArgument (inLexique, operand_34720->mFormalArgumentName, var_cas_parameterType, var_cas_cppName, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (856)) ;
        }
      }else if (cond_35422.isBuiltAndFalse ()) {
        const GGS_string var_cas_cppName = (GGS_string ("inArgument_")).operator_concat (operand_34720->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (859)).reader_identifierRepresentation ()) ;
        var_cas_outSignatureForGeneration.addAssign_operation (var_cas_parameterType, var_cas_cppName, operand_34720->mFormalArgumentName, operand_34720->mIsUnused) ;
        const GGS_bool cond_35815 = operand_34720->mIsUnused ;
        if (cond_35815.isBuiltAndTrue ()) {
          var_cas_variableMap.modifier_insertInputFormalArgumentDeclaredAsUnused (inLexique, operand_34720->mFormalArgumentName, var_cas_parameterType, var_cas_cppName, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (867)) ;
        }else if (cond_35815.isBuiltAndFalse ()) {
          var_cas_variableMap.modifier_insertInputFormalArgument (inLexique, operand_34720->mFormalArgumentName, var_cas_parameterType, var_cas_cppName, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (869)) ;
        }
      }
    }
  }
  var_cas_outReturnedType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, var_cas_inResultTypeName COMMA_SOURCE_FILE_AT_LINE (874)) ;
  var_cas_outResultVariableCppName = (GGS_string ("result_")).operator_concat (var_cas_inResultTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (875)).reader_identifierRepresentation ()) ;
  var_cas_variableMap.modifier_insertOutputFormalArgument (inLexique, var_cas_inReturnVariableName, var_cas_outReturnedType, var_cas_outResultVariableCppName, var_cas_outResultVariableCppName COMMA_SOURCE_FILE_AT_LINE (876)) ;
  var_cas_outSemanticInstructionListForGeneration = GGS_semanticInstructionListForGeneration ::constructor_emptyList () ;
  {
    GGS_semanticInstructionListAST::cEnumerator enumerator_36504 (var_cas_inInstructionList, true) ;
    const GGS_semanticInstructionListAST::cElement * operand_36504 = NULL ;
    while (((operand_36504 = enumerator_36504.nextObject ()))) {
      macroValidPointer (operand_36504) ;
      { typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction method = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (operand_36504->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_36504->mInstruction (HERE), var_cas_inAnalysisContext, var_cas_outSemanticInstructionListForGeneration, var_cas_variableMap COMMA_SOURCE_FILE_AT_LINE (880)) ;
        }
      }
    }
  }
  if (var_cas_variableMap.isBuilt ()) {
    var_cas_variableMap (HERE)->method_checkAutomatonStates (inLexique, var_cas_inEndOfFunctionLocation COMMA_SOURCE_FILE_AT_LINE (887)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeFunctionBody\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@functionDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__functionDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_functionDeclarationAST * operand_36897,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_36897 != NULL) {
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    GGS_formalInputParameterListForGeneration  var_cas_formalInputParameterList ;
    GGS_unifiedTypeMapProxy  var_cas_returnType ;
    GGS_string var_cas_resultVariableCppName ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (905)), GGS_string ("")) ;
    ::routine_analyzeFunctionBody (inLexique,  var_cas_analysisContext,  operand_36897->mFormalArgumentList,  GGS_typedAttributeList ::constructor_emptyList (),  GGS_string (""),  operand_36897->mFunctionInstructionList,  operand_36897->mResultVariableName,  operand_36897->mResultTypeName,  operand_36897->mEndOfFunctionInstructionList,  var_cas_formalInputParameterList,  var_cas_returnType,  var_cas_resultVariableCppName,  var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (908)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_functionImplementationForGeneration ::constructor_new (inLexique, operand_36897->mFunctionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (924)), var_cas_formalInputParameterList, var_cas_returnType, var_cas_resultVariableCppName, var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (923)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@onceFunctionDeclarationAST.performSemanticAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__onceFunctionDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_onceFunctionDeclarationAST * operand_38202,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_38202 != NULL) {
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    GGS_unifiedTypeMapProxy  var_cas_returnType ;
    GGS_string var_cas_resultVariableCppName ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (948)), GGS_string ("")) ;
    GGS_formalInputParameterListForGeneration  automatic_var_39027_0 ;
    ::routine_analyzeFunctionBody (inLexique,  var_cas_analysisContext,  GGS_formalInputParameterListAST ::constructor_emptyList (),  GGS_typedAttributeList ::constructor_emptyList (),  GGS_string (""),  operand_38202->mFunctionInstructionList,  operand_38202->mResultVariableName,  operand_38202->mResultTypeName,  operand_38202->mEndOfFunctionInstructionList,  automatic_var_39027_0,  var_cas_returnType,  var_cas_resultVariableCppName,  var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (951)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_onceFunctionDeclarationForGeneration ::constructor_new (inLexique, operand_38202->mFunctionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (967)), var_cas_returnType, var_cas_resultVariableCppName, var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (966)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@filewrapperDeclarationAST.performSemanticAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__filewrapperDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_filewrapperDeclarationAST * operand_39719,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_39719 != NULL) {
    GGS_wrapperFileMap  var_cas_wrapperFileMap ;
    GGS_wrapperDirectoryMap  var_cas_wrapperDirectoryMap ;
    GGS_lstring  automatic_var_40136_0 ;
    GGS_lstringlist  automatic_var_40136_1 ;
    GGS_filewrapperTemplateMap  automatic_var_40136_2 ;
    if (var_cas_inSemanticContext.mFilewrapperMap.isBuilt ()) {
      var_cas_inSemanticContext.mFilewrapperMap (HERE)->method_searchKey (inLexique, operand_39719->mFilewrapperName, automatic_var_40136_0, automatic_var_40136_1, var_cas_wrapperFileMap, var_cas_wrapperDirectoryMap, automatic_var_40136_2 COMMA_SOURCE_FILE_AT_LINE (990)) ;
    }
    GGS_string var_cas_absoluteSourcePath ;
    const GGS_bool cond_40320 = (operand_39719->mFilewrapperPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1000)).reader_firstCharacterOrNul ()).operator_isEqual (GGS_char (TO_UNICODE ('/'))) ;
    if (cond_40320.isBuiltAndTrue ()) {
      var_cas_absoluteSourcePath = operand_39719->mFilewrapperPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1001)) ;
    }else if (cond_40320.isBuiltAndFalse ()) {
      var_cas_absoluteSourcePath = ((var_cas_inSemanticContext.reader_mSourceFileAbsolutePath (inLexique COMMA_SOURCE_FILE_AT_LINE (1003)).reader_stringByDeletingLastPathComponent ()).operator_concat (GGS_string ("/"))).operator_concat (operand_39719->mFilewrapperPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1003))) ;
    }
    const GGS_bool cond_40621 = (var_cas_absoluteSourcePath.reader_directoryExists ()).operator_not () ;
    if (cond_40621.isBuiltAndTrue ()) {
      operand_39719->mFilewrapperPath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The '")).operator_concat (var_cas_absoluteSourcePath)).operator_concat (GGS_string ("' directory does not exist")) COMMA_SOURCE_FILE_AT_LINE (1007)) ;
    }else if (cond_40621.isBuiltAndFalse ()) {
      GGS_filewrapperTemplateListForGeneration  var_cas_filewrapperTemplateListForGeneration = GGS_filewrapperTemplateListForGeneration ::constructor_emptyList () ;
      {
        GGS_filewrapperTemplateListAST::cEnumerator enumerator_40789 (operand_39719->mFilewrapperTemplateList, true) ;
        const GGS_filewrapperTemplateListAST::cElement * operand_40789 = NULL ;
        while (((operand_40789 = enumerator_40789.nextObject ()))) {
          macroValidPointer (operand_40789) ;
          const GGS_bool cond_41026 = (operand_40789->mFilewrapperTemplatePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1011)).reader_firstCharacterOrNul ()).operator_isEqual (GGS_char (TO_UNICODE ('/'))) ;
          if (cond_41026.isBuiltAndTrue ()) {
            operand_40789->mFilewrapperTemplatePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the path should not begin with a '/'; it is relative to filewrapper path '")).operator_concat (var_cas_absoluteSourcePath)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1013)) ;
          }
          const GGS_string var_cas_absoluteTemplatePath = ((var_cas_absoluteSourcePath).operator_concat (GGS_string ("/"))).operator_concat (operand_40789->mFilewrapperTemplatePath) ;
          GGS_templateInstructionListAST  var_cas_resultingInstructionList ;
          const GGS_string _depExtension = GGS_string ("") ;
          const GGS_string _depPath = GGS_string ("") ;
          if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
            C_Grammar_templateGrammar::_performSourceFileParsing_ (inLexique,
                                          _depExtension.string (),
                                          _depPath.string (),
                                          NULL,
                                          GGS_lstring ::constructor_new (inLexique, var_cas_absoluteTemplatePath, operand_40789->mFilewrapperTemplatePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1017)) COMMA_SOURCE_FILE_AT_LINE (1017)),
                                          var_cas_resultingInstructionList
                                          COMMA_SOURCE_FILE_AT_LINE (1017)) ;
          }
          GGS_templateVariableMap  var_cas_templateVariableMap = GGS_templateVariableMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1019)) ;
          GGS_formalInputParameterListForGeneration  var_cas_filewrapperTemplateFormalInputParameters = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
          {
            GGS_formalTemplateInputParameterListAST::cEnumerator enumerator_41602 (operand_40789->mFilewrapperTemplateFormalInputParameters, true) ;
            const GGS_formalTemplateInputParameterListAST::cElement * operand_41602 = NULL ;
            while (((operand_41602 = enumerator_41602.nextObject ()))) {
              macroValidPointer (operand_41602) ;
              GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_41602->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (1022)) ;
              const GGS_string var_cas_cppVarName = (GGS_string ("in_")).operator_concat (operand_41602->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1023)).reader_identifierRepresentation ()) ;
              var_cas_templateVariableMap.modifier_insertKey (inLexique, operand_41602->mFormalArgumentName, var_cas_type, var_cas_cppVarName COMMA_SOURCE_FILE_AT_LINE (1024)) ;
              var_cas_filewrapperTemplateFormalInputParameters.addAssign_operation (var_cas_type, var_cas_cppVarName, operand_41602->mFormalArgumentName, GGS_bool (true)) ;
            }
          }
          GGS_templateInstructionListForGeneration  var_cas_templateInstructionListForGeneration = GGS_templateInstructionListForGeneration ::constructor_emptyList () ;
          const GGS_templateAnalysisContext var_cas_templateAnalysisContext = GGS_templateAnalysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_templateVariableMap) ;
          ::routine_templateInstructionListAnalysis (inLexique,  var_cas_templateAnalysisContext,  var_cas_resultingInstructionList,  var_cas_templateInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1034)) ;
          var_cas_filewrapperTemplateListForGeneration.addAssign_operation (operand_40789->mFilewrapperTemplateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1037)), var_cas_filewrapperTemplateFormalInputParameters, var_cas_templateInstructionListForGeneration) ;
        }
      }
      var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_filewrapperDeclarationForGeneration ::constructor_new (inLexique, operand_39719->mFilewrapperName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1044)), operand_39719->mFilewrapperPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1045)), var_cas_wrapperFileMap, var_cas_wrapperDirectoryMap, var_cas_filewrapperTemplateListForGeneration COMMA_SOURCE_FILE_AT_LINE (1043)), GGS_string ("")) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@abstractCategoryMethodAST.performSemanticAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__abstractCategoryMethodAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_abstractCategoryMethodAST * operand_43145,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43145 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_43145->mTypeName COMMA_SOURCE_FILE_AT_LINE (1063)) ;
    const GGS_bool cond_43682 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1065))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1065))) ;
    if (cond_43682.isBuiltAndTrue ()) {
      operand_43145->mAbstractCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1066)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1067)) ;
    }else if (cond_43682.isBuiltAndFalse ()) {
      const GGS_bool cond_43854 = var_cas_selfType.reader_mIsConcrete (inLexique COMMA_SOURCE_FILE_AT_LINE (1067)) ;
      if (cond_43854.isBuiltAndTrue ()) {
        operand_43145->mAbstractCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare an abstract category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1068)))).operator_concat (GGS_string ("' is not an abstract class")) COMMA_SOURCE_FILE_AT_LINE (1069)) ;
      }
    }
    GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    {
      GGS_formalParameterListAST::cEnumerator enumerator_44025 (operand_43145->mAbstractCategoryMethodFormalParameterList, true) ;
      const GGS_formalParameterListAST::cElement * operand_44025 = NULL ;
      while (((operand_44025 = enumerator_44025.nextObject ()))) {
        macroValidPointer (operand_44025) ;
        var_cas_formalParameterListForGeneration.addAssign_operation (operand_44025->mFormalArgumentPassingMode, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_44025->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (1075)), operand_44025->mFormalArgumentName, operand_44025->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1077))) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_abstractCategoryMethodForGeneration ::constructor_new (inLexique, operand_43145->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1082)), operand_43145->mAbstractCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1083)), var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1081)), var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1086))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@categoryMethodAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__categoryMethodAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_categoryMethodAST * operand_44655,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_44655 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_44655->mTypeName COMMA_SOURCE_FILE_AT_LINE (1098)) ;
    const GGS_bool cond_45165 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1100))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1100))) ;
    if (cond_45165.isBuiltAndTrue ()) {
      operand_44655->mCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1101)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1102)) ;
    }
    GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("object")) ;
    ::routine_analyzeRoutineBody (inLexique,  var_cas_analysisContext,  operand_44655->mCategoryMethodFormalParameterList,  GGS_localConstantList ::constructor_emptyList (),  var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1116)),  GGS_string ("object->"),  operand_44655->mCategoryMethodInstructionList,  operand_44655->mEndOfMethodLocation,  var_cas_semanticInstructionListForGeneration,  var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1112)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_categoryMethodForGeneration ::constructor_new (inLexique, operand_44655->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1125)), operand_44655->mCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1126)), var_cas_formalParameterListForGeneration, var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1128)), var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1124)), var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1131))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@overridingCategoryMethodAST.performSemanticAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingCategoryMethodAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_overridingCategoryMethodAST * operand_46256,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_46256 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_46256->mTypeName COMMA_SOURCE_FILE_AT_LINE (1143)) ;
    const GGS_bool cond_46776 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1145))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1145))) ;
    if (cond_46776.isBuiltAndTrue ()) {
      operand_46256->mOverridingCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1146)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1147)) ;
    }
    GGS_string var_cas_baseTypeName = GGS_string ("") ;
    GGS_unifiedTypeMapProxy  var_cas_superType = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1150)) ;
    GGS_formalParameterSignature  var_cas_inheritedSignature = GGS_formalParameterSignature ::constructor_emptyList () ;
    GGS_location  var_cas_inheritedDeclarationLocation = GGS_location (inLexique) ;
    GGS_uint _variant_47570 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1153)) ;
    GGS_bool _condition_47570 (_variant_47570.isBuilt (), true) ;
    while (_condition_47570.isBuiltAndTrue ()) {
      _condition_47570 = ((var_cas_superType.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1154))).operator_not ()).operator_and ((var_cas_baseTypeName).operator_isEqual (GGS_string (""))) ;
      if (_condition_47570.isBuiltAndTrue ()) {
        if (_variant_47570.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1163)) ;
          _condition_47570 = GGS_bool (false) ;
        }else{
          _variant_47570.decrement_operation (inLexique COMMA_HERE) ;
          const GGS_bool cond_47517 = var_cas_superType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1155)).reader_hasKey (operand_46256->mOverridingCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1155))) ;
          if (cond_47517.isBuiltAndTrue ()) {
            GGS_methodQualifier var_cas_qualifier ;
            GGS_bool automatic_var_47391_0 ;
            GGS_bool automatic_var_47391_1 ;
            const GGS_instanceMethodMap  temp_47292 = var_cas_superType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1157)) ;
            if (temp_47292.isBuilt ()) {
              temp_47292 (HERE)->method_searchKey (inLexique, operand_46256->mOverridingCategoryMethodName, automatic_var_47391_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_47391_1, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (1157)) ;
            }
            const GGS_bool cond_47504 = (var_cas_qualifier).operator_infOrEqual (GGS_methodQualifier::constructor_isBasicFinal (inLexique COMMA_SOURCE_FILE_AT_LINE (1158))) ;
            if (cond_47504.isBuiltAndTrue ()) {
              var_cas_baseTypeName = var_cas_superType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1159)) ;
            }
          }
          var_cas_superType = var_cas_superType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1162)) ;
        }
      }
    }
    GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("object")) ;
    ::routine_analyzeRoutineBody (inLexique,  var_cas_analysisContext,  operand_46256->mOverridingCategoryMethodFormalParameterList,  GGS_localConstantList ::constructor_emptyList (),  var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1177)),  GGS_string ("object->"),  operand_46256->mOverridingCategoryMethodInstructionList,  operand_46256->mEndOfMethodLocation,  var_cas_semanticInstructionListForGeneration,  var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1173)) ;
    const GGS_bool cond_48472 = (var_cas_baseTypeName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_48472.isBuiltAndTrue ()) {
      ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_46256->mOverridingCategoryMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1188)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (1186)) ;
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_overridingCategoryMethodForGeneration ::constructor_new (inLexique, operand_46256->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1195)), var_cas_baseTypeName, operand_46256->mOverridingCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1197)), var_cas_formalParameterListForGeneration, var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1199)), var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1194)), GGS_string ("{override}")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@overridingAbstractCategoryMethodAST.performSemanticAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingAbstractCategoryMethodAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_overridingAbstractCategoryMethodAST * operand_48970,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & /* var_cas_ioSemanticDeclarationListForGeneration */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_48970 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_48970->mTypeName COMMA_SOURCE_FILE_AT_LINE (1214)) ;
    const GGS_bool cond_49511 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1216))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1216))) ;
    if (cond_49511.isBuiltAndTrue ()) {
      operand_48970->mOverridingCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1217)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1218)) ;
    }else if (cond_49511.isBuiltAndFalse ()) {
      const GGS_bool cond_49685 = var_cas_selfType.reader_mIsConcrete (inLexique COMMA_SOURCE_FILE_AT_LINE (1218)) ;
      if (cond_49685.isBuiltAndTrue ()) {
        operand_48970->mOverridingCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare an abstract category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1219)))).operator_concat (GGS_string ("' is not an abstract class")) COMMA_SOURCE_FILE_AT_LINE (1220)) ;
      }
    }
    GGS_string var_cas_baseTypeName = GGS_string ("") ;
    GGS_unifiedTypeMapProxy  var_cas_superType = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1223)) ;
    GGS_formalParameterSignature  var_cas_inheritedSignature = GGS_formalParameterSignature ::constructor_emptyList () ;
    GGS_location  var_cas_inheritedDeclarationLocation = GGS_location (inLexique) ;
    GGS_uint _variant_50479 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1226)) ;
    GGS_bool _condition_50479 (_variant_50479.isBuilt (), true) ;
    while (_condition_50479.isBuiltAndTrue ()) {
      _condition_50479 = ((var_cas_superType.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1227))).operator_not ()).operator_and ((var_cas_baseTypeName).operator_isEqual (GGS_string (""))) ;
      if (_condition_50479.isBuiltAndTrue ()) {
        if (_variant_50479.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1236)) ;
          _condition_50479 = GGS_bool (false) ;
        }else{
          _variant_50479.decrement_operation (inLexique COMMA_HERE) ;
          const GGS_bool cond_50426 = var_cas_superType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1228)).reader_hasKey (operand_48970->mOverridingCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1228))) ;
          if (cond_50426.isBuiltAndTrue ()) {
            GGS_methodQualifier var_cas_qualifier ;
            GGS_bool automatic_var_50300_0 ;
            GGS_bool automatic_var_50300_1 ;
            const GGS_instanceMethodMap  temp_50201 = var_cas_superType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1230)) ;
            if (temp_50201.isBuilt ()) {
              temp_50201 (HERE)->method_searchKey (inLexique, operand_48970->mOverridingCategoryMethodName, automatic_var_50300_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_50300_1, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (1230)) ;
            }
            const GGS_bool cond_50413 = (var_cas_qualifier).operator_infOrEqual (GGS_methodQualifier::constructor_isBasicFinal (inLexique COMMA_SOURCE_FILE_AT_LINE (1231))) ;
            if (cond_50413.isBuiltAndTrue ()) {
              var_cas_baseTypeName = var_cas_superType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1232)) ;
            }
          }
          var_cas_superType = var_cas_superType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1235)) ;
        }
      }
    }
    GGS_variableMap  var_cas_variableMap = GGS_variableMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1238)) ;
    GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration ;
    ::routine_buildLocalVariableMapAndSignature (inLexique,  var_cas_inSemanticContext,  operand_48970->mOverridingCategoryMethodFormalParameterList,  var_cas_variableMap,  var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1240)) ;
    const GGS_bool cond_51038 = (var_cas_baseTypeName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_51038.isBuiltAndTrue ()) {
      ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_48970->mOverridingCategoryMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1250)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (1248)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@abstractCategoryReaderAST.performSemanticAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__abstractCategoryReaderAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_abstractCategoryReaderAST * operand_51203,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_51203 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_51203->mTypeName COMMA_SOURCE_FILE_AT_LINE (1265)) ;
    const GGS_bool cond_51740 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1267))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1267))) ;
    if (cond_51740.isBuiltAndTrue ()) {
      operand_51203->mAbstractCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1268)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1269)) ;
    }else if (cond_51740.isBuiltAndFalse ()) {
      const GGS_bool cond_51912 = var_cas_selfType.reader_mIsConcrete (inLexique COMMA_SOURCE_FILE_AT_LINE (1269)) ;
      if (cond_51912.isBuiltAndTrue ()) {
        operand_51203->mAbstractCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare an abstract category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1270)))).operator_concat (GGS_string ("' is not an abstract class")) COMMA_SOURCE_FILE_AT_LINE (1271)) ;
      }
    }
    GGS_formalInputParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
    {
      GGS_formalInputParameterListAST::cEnumerator enumerator_52093 (operand_51203->mAbstractCategoryReaderFormalInputParameterList, true) ;
      const GGS_formalInputParameterListAST::cElement * operand_52093 = NULL ;
      while (((operand_52093 = enumerator_52093.nextObject ()))) {
        macroValidPointer (operand_52093) ;
        var_cas_formalParameterListForGeneration.addAssign_operation (GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_52093->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (1276)), operand_52093->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1277)), operand_52093->mFormalArgumentName, operand_52093->mIsUnused) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_abstractCategoryReaderForGeneration ::constructor_new (inLexique, operand_51203->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1284)), operand_51203->mAbstractCategoryReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1285)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_51203->mAbstractCategoryReaderReturnedTypeName COMMA_SOURCE_FILE_AT_LINE (1286)), var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1283)), var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1289))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@categoryReaderAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__categoryReaderAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_categoryReaderAST * operand_52815,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_52815 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_52815->mTypeName COMMA_SOURCE_FILE_AT_LINE (1303)) ;
    const GGS_bool cond_53326 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1305))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1305))) ;
    if (cond_53326.isBuiltAndTrue ()) {
      operand_52815->mCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1306)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1307)) ;
    }
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("object")) ;
    GGS_unifiedTypeMapProxy  var_cas_returnType ;
    GGS_string var_cas_returnVariableCppName ;
    GGS_formalInputParameterListForGeneration  var_cas_formalParameterListForGeneration ;
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    ::routine_analyzeFunctionBody (inLexique,  var_cas_analysisContext,  operand_52815->mCategoryReaderFormalInputParameterList,  var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1322)),  GGS_string ("object->"),  operand_52815->mCategoryReaderInstructionList,  operand_52815->mCategoryReaderReturnedVariableName,  operand_52815->mCategoryReaderReturnedTypeName,  operand_52815->mEndOfReaderLocation,  var_cas_formalParameterListForGeneration,  var_cas_returnType,  var_cas_returnVariableCppName,  var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1319)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_categoryReaderForGeneration ::constructor_new (inLexique, operand_52815->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1335)), operand_52815->mCategoryReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1336)), var_cas_returnType, var_cas_returnVariableCppName, var_cas_formalParameterListForGeneration, var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1340)), var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1334)), var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1343))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@overridingCategoryReaderAST.performSemanticAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingCategoryReaderAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_overridingCategoryReaderAST * operand_54614,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_54614 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_54614->mTypeName COMMA_SOURCE_FILE_AT_LINE (1355)) ;
    const GGS_bool cond_55134 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1357))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1357))) ;
    if (cond_55134.isBuiltAndTrue ()) {
      operand_54614->mOverridingCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1358)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1359)) ;
    }
    GGS_string var_cas_baseTypeName = GGS_string ("") ;
    GGS_unifiedTypeMapProxy  var_cas_superType = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1362)) ;
    GGS_unifiedTypeMapProxyList  var_cas_inheritedSignature = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
    GGS_unifiedTypeMapProxy  var_cas_inheritedReturnType = GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (1364)) ;
    GGS_location  var_cas_inheritedDeclarationLocation = GGS_location (inLexique) ;
    GGS_uint _variant_55984 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1366)) ;
    GGS_bool _condition_55984 (_variant_55984.isBuilt (), true) ;
    while (_condition_55984.isBuiltAndTrue ()) {
      _condition_55984 = ((var_cas_superType.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1367))).operator_not ()).operator_and ((var_cas_baseTypeName).operator_isEqual (GGS_string (""))) ;
      if (_condition_55984.isBuiltAndTrue ()) {
        if (_variant_55984.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1376)) ;
          _condition_55984 = GGS_bool (false) ;
        }else{
          _variant_55984.decrement_operation (inLexique COMMA_HERE) ;
          const GGS_bool cond_55931 = var_cas_superType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1368)).reader_hasKey (operand_54614->mOverridingCategoryReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1368))) ;
          if (cond_55931.isBuiltAndTrue ()) {
            GGS_methodQualifier var_cas_qualifier ;
            GGS_bool automatic_var_55805_0 ;
            GGS_bool automatic_var_55805_1 ;
            const GGS_readerMap  temp_55685 = var_cas_superType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1370)) ;
            if (temp_55685.isBuilt ()) {
              temp_55685 (HERE)->method_searchKey (inLexique, operand_54614->mOverridingCategoryReaderName, automatic_var_55805_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_55805_1, var_cas_inheritedReturnType, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (1370)) ;
            }
            const GGS_bool cond_55918 = (var_cas_qualifier).operator_infOrEqual (GGS_methodQualifier::constructor_isBasicFinal (inLexique COMMA_SOURCE_FILE_AT_LINE (1371))) ;
            if (cond_55918.isBuiltAndTrue ()) {
              var_cas_baseTypeName = var_cas_superType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1372)) ;
            }
          }
          var_cas_superType = var_cas_superType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1375)) ;
        }
      }
    }
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("object")) ;
    GGS_unifiedTypeMapProxy  var_cas_returnType ;
    GGS_string var_cas_returnVariableCppName ;
    GGS_formalInputParameterListForGeneration  var_cas_formalParameterListForGeneration ;
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    ::routine_analyzeFunctionBody (inLexique,  var_cas_analysisContext,  operand_54614->mOverridingCategoryReaderFormalInputParameterList,  var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1391)),  GGS_string ("object->"),  operand_54614->mOverridingCategoryReaderInstructionList,  operand_54614->mOverridingCategoryReaderReturnedVariableName,  operand_54614->mOverridingCategoryReaderReturnedTypeName,  operand_54614->mEndOfReaderLocation,  var_cas_formalParameterListForGeneration,  var_cas_returnType,  var_cas_returnVariableCppName,  var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1388)) ;
    const GGS_bool cond_57105 = (var_cas_baseTypeName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_57105.isBuiltAndTrue ()) {
      ::routine_checkReaderSignatures (inLexique,  var_cas_formalParameterListForGeneration,  var_cas_returnType,  operand_54614->mOverridingCategoryReaderName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1407)),  var_cas_inheritedSignature,  var_cas_inheritedReturnType,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (1404)) ;
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_overrideCategoryReaderForGeneration ::constructor_new (inLexique, operand_54614->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1415)), var_cas_baseTypeName, operand_54614->mOverridingCategoryReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1417)), var_cas_returnType, var_cas_returnVariableCppName, var_cas_formalParameterListForGeneration, var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1421)), var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1414)), GGS_string ("{override}")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@overridingAbstractCategoryReaderAST.performSemanticAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingAbstractCategoryReaderAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_overridingAbstractCategoryReaderAST * operand_57644,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & /* var_cas_ioSemanticDeclarationListForGeneration */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_57644 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_57644->mTypeName COMMA_SOURCE_FILE_AT_LINE (1436)) ;
    const GGS_unifiedTypeMapProxy  var_cas_returnType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_57644->mAbstractCategoryReaderReturnedTypeName COMMA_SOURCE_FILE_AT_LINE (1438)) ;
    const GGS_bool cond_58348 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1440))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1440))) ;
    if (cond_58348.isBuiltAndTrue ()) {
      operand_57644->mAbstractCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1441)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1442)) ;
    }else if (cond_58348.isBuiltAndFalse ()) {
      const GGS_bool cond_58520 = var_cas_selfType.reader_mIsConcrete (inLexique COMMA_SOURCE_FILE_AT_LINE (1442)) ;
      if (cond_58520.isBuiltAndTrue ()) {
        operand_57644->mAbstractCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare an abstract category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1443)))).operator_concat (GGS_string ("' is not an abstract class")) COMMA_SOURCE_FILE_AT_LINE (1444)) ;
      }
    }
    GGS_string var_cas_baseTypeName = GGS_string ("") ;
    GGS_unifiedTypeMapProxy  var_cas_superType = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1447)) ;
    GGS_unifiedTypeMapProxyList  var_cas_inheritedSignature = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
    GGS_unifiedTypeMapProxy  var_cas_inheritedReturnType = GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (1449)) ;
    GGS_location  var_cas_inheritedDeclarationLocation = GGS_location (inLexique) ;
    GGS_uint _variant_59366 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1451)) ;
    GGS_bool _condition_59366 (_variant_59366.isBuilt (), true) ;
    while (_condition_59366.isBuiltAndTrue ()) {
      _condition_59366 = ((var_cas_superType.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1452))).operator_not ()).operator_and ((var_cas_baseTypeName).operator_isEqual (GGS_string (""))) ;
      if (_condition_59366.isBuiltAndTrue ()) {
        if (_variant_59366.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1461)) ;
          _condition_59366 = GGS_bool (false) ;
        }else{
          _variant_59366.decrement_operation (inLexique COMMA_HERE) ;
          const GGS_bool cond_59313 = var_cas_superType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1453)).reader_hasKey (operand_57644->mAbstractCategoryReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1453))) ;
          if (cond_59313.isBuiltAndTrue ()) {
            GGS_methodQualifier var_cas_qualifier ;
            GGS_bool automatic_var_59187_0 ;
            GGS_bool automatic_var_59187_1 ;
            const GGS_readerMap  temp_59069 = var_cas_superType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1455)) ;
            if (temp_59069.isBuilt ()) {
              temp_59069 (HERE)->method_searchKey (inLexique, operand_57644->mAbstractCategoryReaderName, automatic_var_59187_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_59187_1, var_cas_inheritedReturnType, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (1455)) ;
            }
            const GGS_bool cond_59300 = (var_cas_qualifier).operator_infOrEqual (GGS_methodQualifier::constructor_isBasicFinal (inLexique COMMA_SOURCE_FILE_AT_LINE (1456))) ;
            if (cond_59300.isBuiltAndTrue ()) {
              var_cas_baseTypeName = var_cas_superType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1457)) ;
            }
          }
          var_cas_superType = var_cas_superType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1460)) ;
        }
      }
    }
    const GGS_bool cond_60057 = (var_cas_baseTypeName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_60057.isBuiltAndTrue ()) {
      GGS_formalInputParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
      {
        GGS_formalInputParameterListAST::cEnumerator enumerator_59573 (operand_57644->mAbstractCategoryReaderFormalInputParameterList, true) ;
        const GGS_formalInputParameterListAST::cElement * operand_59573 = NULL ;
        while (((operand_59573 = enumerator_59573.nextObject ()))) {
          macroValidPointer (operand_59573) ;
          var_cas_formalParameterListForGeneration.addAssign_operation (GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_59573->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (1467)), operand_59573->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1468)), operand_59573->mFormalArgumentName, operand_59573->mIsUnused) ;
        }
      }
      ::routine_checkReaderSignatures (inLexique,  var_cas_formalParameterListForGeneration,  var_cas_returnType,  operand_57644->mAbstractCategoryReaderName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1476)),  var_cas_inheritedSignature,  var_cas_inheritedReturnType,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (1473)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of function "buildPredefinedTypes"              *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_predefinedTypes function_buildPredefinedTypes (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_buildPredefinedTypes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_predefinedTypes var_cas_outPredefinedTypes ;
  var_cas_outPredefinedTypes = GGS_predefinedTypes::constructor_new (GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("location"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1495)) COMMA_SOURCE_FILE_AT_LINE (1495)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("bool"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1496)) COMMA_SOURCE_FILE_AT_LINE (1496)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("char"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1497)) COMMA_SOURCE_FILE_AT_LINE (1497)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1498)) COMMA_SOURCE_FILE_AT_LINE (1498)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1499)) COMMA_SOURCE_FILE_AT_LINE (1499)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1500)) COMMA_SOURCE_FILE_AT_LINE (1500)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1501)) COMMA_SOURCE_FILE_AT_LINE (1501)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1502)) COMMA_SOURCE_FILE_AT_LINE (1502)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("double"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1503)) COMMA_SOURCE_FILE_AT_LINE (1503)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lbool"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1504)) COMMA_SOURCE_FILE_AT_LINE (1504)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lchar"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1505)) COMMA_SOURCE_FILE_AT_LINE (1505)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lstring"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1506)) COMMA_SOURCE_FILE_AT_LINE (1506)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("luint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1507)) COMMA_SOURCE_FILE_AT_LINE (1507)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lsint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1508)) COMMA_SOURCE_FILE_AT_LINE (1508)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("luint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1509)) COMMA_SOURCE_FILE_AT_LINE (1509)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lsint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1510)) COMMA_SOURCE_FILE_AT_LINE (1510)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("ldouble"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1511)) COMMA_SOURCE_FILE_AT_LINE (1511))) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_buildPredefinedTypes\n") ;
  #endif
  return var_cas_outPredefinedTypes ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_buildPredefinedTypes (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_semanticContext arg_0 = GGS_semanticContext::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_predefinedTypes result = function_buildPredefinedTypes (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_buildPredefinedTypes [1] = {& kTypeDescriptor_GGS_semanticContext} ;

const C_galgas_function_descriptorEX
kFunction_descriptor_buildPredefinedTypes ("buildPredefinedTypes",
                              functionForGenericCall_buildPredefinedTypes,
                              & kTypeDescriptor_GGS_predefinedTypes,
                              1,
                              kArgumentTypeList_buildPredefinedTypes) ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "performSemanticAnalysis"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performSemanticAnalysis (C_Compiler & inLexique,
                                const GGS_semanticDeclarationListAST   var_cas_inDeclarationList,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_outDecoratedDeclarationListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_performSemanticAnalysis at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_predefinedTypes var_cas_predefinedTypes = function_buildPredefinedTypes (inLexique, var_cas_inSemanticContext COMMA_SOURCE_FILE_AT_LINE (1526)) ;
  var_cas_outDecoratedDeclarationListForGeneration = GGS_semanticDeclarationSortedListForGeneration ::constructor_emptySortedList () ;
  {
    GGS_semanticDeclarationListAST::cEnumerator enumerator_63151 (var_cas_inDeclarationList, true) ;
    const GGS_semanticDeclarationListAST::cElement * operand_63151 = NULL ;
    while (((operand_63151 = enumerator_63151.nextObject ()))) {
      macroValidPointer (operand_63151) ;
      { typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis method = findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (operand_63151->mSemanticDeclaration.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_63151->mSemanticDeclaration (HERE), var_cas_inSemanticContext, var_cas_predefinedTypes, var_cas_outDecoratedDeclarationListForGeneration COMMA_SOURCE_FILE_AT_LINE (1529)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_performSemanticAnalysis\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticAnalysis (void) {
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (category_method__semanticDeclarationAST__performSemanticAnalysis, gClassInfoFor__semanticDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__predefinedTypeAST__performSemanticAnalysis, gClassInfoFor__predefinedTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__listDeclarationAST__performSemanticAnalysis, gClassInfoFor__listDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__sortedListDeclarationAST__performSemanticAnalysis, gClassInfoFor__sortedListDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__structDeclarationAST__performSemanticAnalysis, gClassInfoFor__structDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__enumDeclarationAST__performSemanticAnalysis, gClassInfoFor__enumDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__listmapDeclarationAST__performSemanticAnalysis, gClassInfoFor__listmapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__mapDeclarationAST__performSemanticAnalysis, gClassInfoFor__mapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__mapProxyDeclarationAST__performSemanticAnalysis, gClassInfoFor__mapProxyDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__externFunctionDeclarationAST__performSemanticAnalysis, gClassInfoFor__externFunctionDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__externRoutineDeclarationAST__performSemanticAnalysis, gClassInfoFor__externRoutineDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__routineDeclarationAST__performSemanticAnalysis, gClassInfoFor__routineDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__classDeclarationAST__performSemanticAnalysis, gClassInfoFor__classDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__functionDeclarationAST__performSemanticAnalysis, gClassInfoFor__functionDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__onceFunctionDeclarationAST__performSemanticAnalysis, gClassInfoFor__onceFunctionDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__filewrapperDeclarationAST__performSemanticAnalysis, gClassInfoFor__filewrapperDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__abstractCategoryMethodAST__performSemanticAnalysis, gClassInfoFor__abstractCategoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__categoryMethodAST__performSemanticAnalysis, gClassInfoFor__categoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__overridingCategoryMethodAST__performSemanticAnalysis, gClassInfoFor__overridingCategoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__overridingAbstractCategoryMethodAST__performSemanticAnalysis, gClassInfoFor__overridingAbstractCategoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__abstractCategoryReaderAST__performSemanticAnalysis, gClassInfoFor__abstractCategoryReaderAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__categoryReaderAST__performSemanticAnalysis, gClassInfoFor__categoryReaderAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__overridingCategoryReaderAST__performSemanticAnalysis, gClassInfoFor__overridingCategoryReaderAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__overridingAbstractCategoryReaderAST__performSemanticAnalysis, gClassInfoFor__overridingAbstractCategoryReaderAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticAnalysis (void) {
  gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticAnalysis (prologueRoutineFor_semanticAnalysis, epilogueRoutineFor_semanticAnalysis) ;

//---------------------------------------------------------------------------*

