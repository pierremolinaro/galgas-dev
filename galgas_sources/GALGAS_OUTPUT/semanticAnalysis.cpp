//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'semanticAnalysis.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     november 11th, 2010, at 18h3'50"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "semanticAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "templateGrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "checkMethodSignatures"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkMethodSignatures (C_CompilerEx & inLexique,
                                const GGS_formalParameterListForGeneration   var_cas_inTestedSignature,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_formalParameterSignature   var_cas_inReferenceSignature,
                                const GGS_location   var_cas_inReferenceLocation
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkMethodSignatures at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_2809 = (var_cas_inTestedSignature.reader_length ()).operator_isNotEqual (var_cas_inReferenceSignature.reader_length ()) ;
  if (cond_2809.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("this method declares ")).operator_concat (var_cas_inTestedSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (43)))).operator_concat (GGS_string (" formal parameter(s), but overriden method declares "))).operator_concat (var_cas_inReferenceSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (44))) COMMA_SOURCE_FILE_AT_LINE (46)) ;
    var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden method is declared here") COMMA_SOURCE_FILE_AT_LINE (47)) ;
  }else if (cond_2809.isBuiltAndFalse ()) {
    {
      GGS_formalParameterSignature::cEnumerator enumerator_2842 (var_cas_inReferenceSignature, true) ;
      const GGS_formalParameterSignature::cElement * operand_2842 = NULL ;
      GGS_formalParameterListForGeneration::cEnumerator enumerator_2877 (var_cas_inTestedSignature, true) ;
      const GGS_formalParameterListForGeneration::cElement * operand_2877 = NULL ;
      while (((operand_2842 = enumerator_2842.nextObject ()))
          && ((operand_2877 = enumerator_2877.nextObject ()))) {
        macroValidPointer (operand_2842) ;
        macroValidPointer (operand_2877) ;
        const GGS_bool cond_3314 = (operand_2842->mFormalArgumentPassingMode).operator_isNotEqual (operand_2877->mFormalArgumentPassingMode) ;
        if (cond_3314.isBuiltAndTrue ()) {
          operand_2877->mFormalArgumentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("the '")).operator_concat (operand_2877->mFormalArgumentName)).operator_concat (GGS_string ("' formal parameter is declared as "))).operator_concat (operand_2877->mFormalArgumentPassingMode.reader_formalArgumentMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (51)))).operator_concat (GGS_string (", but overriden method declares it as "))).operator_concat (operand_2842->mFormalArgumentPassingMode.reader_formalArgumentMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (52))) COMMA_SOURCE_FILE_AT_LINE (53)) ;
          var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden method is declared here") COMMA_SOURCE_FILE_AT_LINE (54)) ;
        }
        const GGS_bool cond_3718 = (operand_2877->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (55))).operator_isNotEqual (operand_2842->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (55))) ;
        if (cond_3718.isBuiltAndTrue ()) {
          operand_2877->mFormalArgumentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the '")).operator_concat (operand_2877->mFormalArgumentName)).operator_concat (GGS_string ("' formal parameter has the '@"))).operator_concat (operand_2877->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (57)))).operator_concat (GGS_string ("' type, but overriden method declares with the '@"))).operator_concat (operand_2842->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (58)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (59)) ;
          var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden method is declared here") COMMA_SOURCE_FILE_AT_LINE (60)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkMethodSignatures\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "checkReaderSignatures"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkReaderSignatures (C_CompilerEx & inLexique,
                                const GGS_formalInputParameterListForGeneration   var_cas_inTestedSignature,
                                const GGS_unifiedTypeMapProxy   var_cas_inReturnType,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_unifiedTypeMapProxyList   var_cas_inReferenceSignature,
                                const GGS_unifiedTypeMapProxy   var_cas_inInheritedReturnType,
                                const GGS_location   var_cas_inReferenceLocation
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkReaderSignatures at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_4756 = (var_cas_inReturnType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (79))).operator_isNotEqual (var_cas_inInheritedReturnType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (79))) ;
  if (cond_4756.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the return type is '@")).operator_concat (var_cas_inReturnType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (81)))).operator_concat (GGS_string ("', but overriden reader names '@"))).operator_concat (var_cas_inInheritedReturnType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (82)))).operator_concat (GGS_string ("' as return type")) COMMA_SOURCE_FILE_AT_LINE (83)) ;
    var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden reader is declared here") COMMA_SOURCE_FILE_AT_LINE (84)) ;
  }
  const GGS_bool cond_5102 = (var_cas_inTestedSignature.reader_length ()).operator_isNotEqual (var_cas_inReferenceSignature.reader_length ()) ;
  if (cond_5102.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("this reader declares ")).operator_concat (var_cas_inTestedSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (86)))).operator_concat (GGS_string (" formal parameter(s), but overriden reader declares "))).operator_concat (var_cas_inReferenceSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (87))) COMMA_SOURCE_FILE_AT_LINE (89)) ;
    var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden reader is declared here") COMMA_SOURCE_FILE_AT_LINE (90)) ;
  }else if (cond_5102.isBuiltAndFalse ()) {
    {
      GGS_unifiedTypeMapProxyList::cEnumerator enumerator_5135 (var_cas_inReferenceSignature, true) ;
      const GGS_unifiedTypeMapProxyList::cElement * operand_5135 = NULL ;
      GGS_formalInputParameterListForGeneration::cEnumerator enumerator_5170 (var_cas_inTestedSignature, true) ;
      const GGS_formalInputParameterListForGeneration::cElement * operand_5170 = NULL ;
      while (((operand_5135 = enumerator_5135.nextObject ()))
          && ((operand_5170 = enumerator_5170.nextObject ()))) {
        macroValidPointer (operand_5135) ;
        macroValidPointer (operand_5170) ;
        const GGS_bool cond_5544 = (operand_5170->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (92))).operator_isNotEqual (operand_5135->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (92))) ;
        if (cond_5544.isBuiltAndTrue ()) {
          operand_5170->mFormalArgumentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the '")).operator_concat (operand_5170->mFormalArgumentName)).operator_concat (GGS_string ("' formal parameter has the '@"))).operator_concat (operand_5170->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (94)))).operator_concat (GGS_string ("' type, but overriden reader declares with the '@"))).operator_concat (operand_5135->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (95)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (96)) ;
          var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden reader is declared here") COMMA_SOURCE_FILE_AT_LINE (97)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkReaderSignatures\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@semanticDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticDeclarationAST__performSemanticAnalysis (C_CompilerEx &,
                                const cPtr_semanticDeclarationAST * operand_6039,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & /* var_cas_ioSemanticDeclarationListForGeneration */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6039 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticDeclarationAST.performSemanticAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis> gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis
findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis result = NULL ;
  if (NULL != inClassPtr) {
    if (inClassPtr->slotID () < gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.count ()) {
      result = gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis (inClassPtr->slotID () COMMA_HERE) ;
    }
    if (NULL == result) {
      AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
      if (superClassPtr != NULL) {
        result = findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (superClassPtr) ;
        gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@predefinedTypeAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__predefinedTypeAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_predefinedTypeAST * operand_6379,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6379 != NULL) {
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_primitiveTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, operand_6379->mPredefinedTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (123)) COMMA_SOURCE_FILE_AT_LINE (123)), operand_6379->mPredefinedTypeName, operand_6379->mKind COMMA_SOURCE_FILE_AT_LINE (122)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'e_attributeIndexMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

e_attributeIndexMap::e_attributeIndexMap (void) :
mAttributeTypeIndex () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class map '@attributeIndexMap'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_attributeIndexMap ("attributeIndexMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_attributeIndexMap::
elementOf_GGS_attributeIndexMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_attributeIndexMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_attributeIndexMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mAttributeTypeIndex.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_attributeIndexMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_attributeIndexMap * ptr = dynamic_cast <const elementOf_GGS_attributeIndexMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mAttributeTypeIndex.operator_isEqual (ptr->mInfo.mAttributeTypeIndex)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_attributeIndexMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_attributeIndexMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_attributeIndexMap * info = (e_attributeIndexMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_attributeIndexMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_attributeIndexMap * info = (e_attributeIndexMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::
constructor_emptyMap (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_attributeIndexMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_attributeIndexMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::modifier_insertFakeKey (C_CompilerEx & inCompiler,
                         const GGS_string & inKey,
                         const GGS_location & inHelperMessageErrorLocation,
                         const GGS_string & inHelperMessage
                         COMMA_LOCATION_ARGS) {
  e_attributeIndexMap info  ;
  internal_insertFakeKey (inCompiler,
                          (void *) & info,
                          inKey,
                          inHelperMessageErrorLocation,
                          inHelperMessage
                          COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_attributeIndexMap::
operator_isEqual (const GGS_attributeIndexMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_attributeIndexMap::
operator_isNotEqual (const GGS_attributeIndexMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
insertElement (C_CompilerEx & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_unifiedTypeMapProxy & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_attributeIndexMap info  ;
    info.mAttributeTypeIndex = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
searchElement (C_CompilerEx & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_unifiedTypeMapProxy   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inLexique, inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mAttributeTypeIndex ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_attributeIndexMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
method_searchKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_attributeIndexMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
modifier_insertKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::
constructor_mapWithMapToOverride (C_CompilerEx & /* inLexique */,
                                  const GGS_attributeIndexMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_attributeIndexMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::
reader_overriddenMap (C_CompilerEx & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_attributeIndexMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_attributeIndexMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @attributeIndexMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_attributeIndexMap::cEnumerator::_mAttributeTypeIndex (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mAttributeTypeIndex ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_attributeIndexMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_attributeIndexMap * p = NULL ;
    macroMyNew (p, GGS_attributeIndexMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_attributeIndexMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_attributeIndexMap * p = dynamic_cast <const GGS_attributeIndexMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_attributeIndexMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_attributeIndexMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_attributeIndexMap ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::constructor_mapWithKeyAndValue (C_CompilerEx & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_unifiedTypeMapProxy & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_attributeIndexMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@listDeclarationAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_listDeclarationAST * operand_7245,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7245 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (148)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_7546 (operand_7245->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_7546 = NULL ;
      while (((operand_7546 = enumerator_7546.nextObject ()))) {
        macroValidPointer (operand_7546) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_7546->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (150)) ;
        GGS_bool var_cas_hasGetter = GGS_bool (true) ;
        GGS_bool var_cas_hasSetter = GGS_bool (true) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_7546->mAttributeName, var_cas_hasSetter, var_cas_hasGetter) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_7546->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (159)) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_listTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_7245->mListTypeName COMMA_SOURCE_FILE_AT_LINE (162)), var_cas_typedAttributeList COMMA_SOURCE_FILE_AT_LINE (161)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@sortedListDeclarationAST.performSemanticAnalysis'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sortedListDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_sortedListDeclarationAST * operand_8217,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8217 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (179)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_8533 (operand_8217->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_8533 = NULL ;
      while (((operand_8533 = enumerator_8533.nextObject ()))) {
        macroValidPointer (operand_8533) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_8533->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (181)) ;
        GGS_bool var_cas_hasSetter = GGS_bool (true) ;
        GGS_bool var_cas_hasGetter = GGS_bool (true) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_8533->mAttributeName, var_cas_hasSetter, var_cas_hasGetter) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_8533->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (190)) ;
      }
    }
    GGS_stringset  var_cas_attributesUsedForSorting = GGS_stringset ::constructor_emptySet () ;
    GGS_sortDescriptorListForGeneration  var_cas_sortDescriptorList = GGS_sortDescriptorListForGeneration ::constructor_emptyList () ;
    {
      GGS_sortedListSortDescriptorListAST::cEnumerator enumerator_9021 (operand_8217->mSortDescriptorList, true) ;
      const GGS_sortedListSortDescriptorListAST::cElement * operand_9021 = NULL ;
      while (((operand_9021 = enumerator_9021.nextObject ()))) {
        macroValidPointer (operand_9021) ;
        GGS_unifiedTypeMapProxy  var_cas_type ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_9021->mSortedAttributeName, var_cas_type COMMA_SOURCE_FILE_AT_LINE (197)) ;
        }
        var_cas_sortDescriptorList.addAssign_operation (var_cas_type, operand_9021->mSortedAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (198)), operand_9021->mAscending) ;
        const GGS_bool cond_9379 = var_cas_attributesUsedForSorting.reader_hasKey (operand_9021->mSortedAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (199))) ;
        if (cond_9379.isBuiltAndTrue ()) {
          operand_9021->mSortedAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_9021->mSortedAttributeName)).operator_concat (GGS_string ("' is already used for sorting")) COMMA_SOURCE_FILE_AT_LINE (201)) ;
        }
        var_cas_attributesUsedForSorting.addAssign_operation (operand_9021->mSortedAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (202))) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_sortedListTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_8217->mSortedListTypeName COMMA_SOURCE_FILE_AT_LINE (206)), var_cas_typedAttributeList, var_cas_sortDescriptorList COMMA_SOURCE_FILE_AT_LINE (205)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@structDeclarationAST.performSemanticAnalysis'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__structDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_structDeclarationAST * operand_9869,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9869 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (223)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_10170 (operand_9869->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_10170 = NULL ;
      while (((operand_10170 = enumerator_10170.nextObject ()))) {
        macroValidPointer (operand_10170) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_10170->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (225)) ;
        {
          GGS_lstringlist::cEnumerator enumerator_10288 (operand_10170->mFeatureList, true) ;
          const GGS_lstringlist::cElement * operand_10288 = NULL ;
          while (((operand_10288 = enumerator_10288.nextObject ()))) {
            macroValidPointer (operand_10288) ;
            operand_10288->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a struct attribute accepts no feature") COMMA_SOURCE_FILE_AT_LINE (228)) ;
          }
        }
        GGS_bool var_cas_hasSetter = GGS_bool (false) ;
        GGS_bool var_cas_hasGetter = GGS_bool (false) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_10170->mAttributeName, var_cas_hasSetter, var_cas_hasGetter) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_10170->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (237)) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_structTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_9869->mStructTypeName COMMA_SOURCE_FILE_AT_LINE (240)), var_cas_typedAttributeList COMMA_SOURCE_FILE_AT_LINE (239)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'e_constantIndexMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

e_constantIndexMap::e_constantIndexMap (void) :
mIndex () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class map '@constantIndexMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_constantIndexMap ("constantIndexMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_constantIndexMap::
elementOf_GGS_constantIndexMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_constantIndexMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_constantIndexMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mIndex.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_constantIndexMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_constantIndexMap * ptr = dynamic_cast <const elementOf_GGS_constantIndexMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mIndex.operator_isEqual (ptr->mInfo.mIndex)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_constantIndexMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_constantIndexMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_constantIndexMap * info = (e_constantIndexMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_constantIndexMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_constantIndexMap * info = (e_constantIndexMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::
constructor_emptyMap (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_constantIndexMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_constantIndexMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::modifier_insertFakeKey (C_CompilerEx & inCompiler,
                         const GGS_string & inKey,
                         const GGS_location & inHelperMessageErrorLocation,
                         const GGS_string & inHelperMessage
                         COMMA_LOCATION_ARGS) {
  e_constantIndexMap info  ;
  internal_insertFakeKey (inCompiler,
                          (void *) & info,
                          inKey,
                          inHelperMessageErrorLocation,
                          inHelperMessage
                          COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_constantIndexMap::
operator_isEqual (const GGS_constantIndexMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_constantIndexMap::
operator_isNotEqual (const GGS_constantIndexMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
insertElement (C_CompilerEx & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_uint & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_constantIndexMap info  ;
    info.mIndex = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
searchElement (C_CompilerEx & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inLexique, inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mIndex ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_constantIndexMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
method_searchKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_constantIndexMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
modifier_insertKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::
constructor_mapWithMapToOverride (C_CompilerEx & /* inLexique */,
                                  const GGS_constantIndexMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_constantIndexMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::
reader_overriddenMap (C_CompilerEx & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_constantIndexMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_constantIndexMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @constantIndexMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_constantIndexMap::cEnumerator::_mIndex (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mIndex ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_constantIndexMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_constantIndexMap * p = NULL ;
    macroMyNew (p, GGS_constantIndexMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_constantIndexMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_constantIndexMap * p = dynamic_cast <const GGS_constantIndexMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_constantIndexMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_constantIndexMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_constantIndexMap ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::constructor_mapWithKeyAndValue (C_CompilerEx & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_uint & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_constantIndexMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@enumDeclarationAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__enumDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_enumDeclarationAST * operand_11218,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11218 != NULL) {
    GGS_stringlist  var_cas_constantList = GGS_stringlist ::constructor_emptyList () ;
    GGS_constantIndexMap  var_cas_constantMap = GGS_constantIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (264)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_11521 (operand_11218->mConstantList, true) ;
      const GGS_lstringlist::cElement * operand_11521 = NULL ;
      while (((operand_11521 = enumerator_11521.nextObject ()))) {
        macroValidPointer (operand_11521) ;
        var_cas_constantList.addAssign_operation (operand_11521->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (266))) ;
        var_cas_constantMap.modifier_insertKey (inLexique, operand_11521->mValue, var_cas_constantMap.reader_count () COMMA_SOURCE_FILE_AT_LINE (267)) ;
      }
    }
    const GGS_stringset  var_cas_constantSet = var_cas_constantMap.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (269)) ;
    GGS_enumMessageListForGeneration  var_cas_enumMessageList = GGS_enumMessageListForGeneration ::constructor_emptyList () ;
    GGS_stringset  var_cas_messageNameSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_enumMessageListAST::cEnumerator enumerator_11842 (operand_11218->mEnumMessageList, true) ;
      const GGS_enumMessageListAST::cElement * operand_11842 = NULL ;
      while (((operand_11842 = enumerator_11842.nextObject ()))) {
        macroValidPointer (operand_11842) ;
        const GGS_bool cond_12003 = var_cas_messageNameSet.reader_hasKey (operand_11842->mEnumMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (274))) ;
        if (cond_12003.isBuiltAndTrue ()) {
          operand_11842->mEnumMessageName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this message is already declared for this enum type") COMMA_SOURCE_FILE_AT_LINE (276)) ;
        }
        var_cas_messageNameSet.addAssign_operation (operand_11842->mEnumMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (277))) ;
        GGS_enumMessageAssociationSortedListForGeneration  var_cas_enumMessageAssociationSortedListForGeneration = GGS_enumMessageAssociationSortedListForGeneration ::constructor_emptySortedList () ;
        GGS_stringset  var_cas_usedConstantSet = GGS_stringset ::constructor_emptySet () ;
        {
          GGS_enumMessageAssociationListAST::cEnumerator enumerator_12293 (operand_11842->mMessageAssociationList, true) ;
          const GGS_enumMessageAssociationListAST::cElement * operand_12293 = NULL ;
          while (((operand_12293 = enumerator_12293.nextObject ()))) {
            macroValidPointer (operand_12293) ;
            GGS_uint  var_cas_constantIndex ;
            if (var_cas_constantMap.isBuilt ()) {
              var_cas_constantMap (HERE)->method_searchKey (inLexique, operand_12293->mConstantName, var_cas_constantIndex COMMA_SOURCE_FILE_AT_LINE (282)) ;
            }
            var_cas_usedConstantSet.addAssign_operation (operand_12293->mConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (283))) ;
            var_cas_enumMessageAssociationSortedListForGeneration.addAssign_operation (var_cas_constantIndex, operand_12293->mConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (286)), operand_12293->mMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (287))) ;
          }
        }
        const GGS_stringset  var_cas_missedConstantSet = var_cas_constantSet.substract_operation (inLexique, var_cas_usedConstantSet COMMA_SOURCE_FILE_AT_LINE (290)) ;
        {
          GGS_stringset::cEnumerator enumerator_12704 (var_cas_missedConstantSet, true) ;
          while (enumerator_12704.hasCurrentObject ()) {
            operand_11842->mEnumMessageName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (operand_11842->mEnumMessageName)).operator_concat (GGS_string ("' message definition does not name the '"))).operator_concat (enumerator_12704._key (HERE))).operator_concat (GGS_string ("' constant")) COMMA_SOURCE_FILE_AT_LINE (294)) ;
            enumerator_12704.next () ;
          }
        }
        var_cas_enumMessageList.addAssign_operation (operand_11842->mEnumMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (295)), var_cas_enumMessageAssociationSortedListForGeneration) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_enumTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_11218->mEnumTypeName COMMA_SOURCE_FILE_AT_LINE (299)), var_cas_constantList, var_cas_enumMessageList COMMA_SOURCE_FILE_AT_LINE (298)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@listmapDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listmapDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_listmapDeclarationAST * operand_13343,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13343 != NULL) {
    GGS_typeKindEnum var_cas_typeKindEnum ;
    GGS_typedAttributeList  var_cas_listTypeAttributeList ;
    GGS_bool automatic_var_13753_0 ;
    GGS_unifiedTypeMapProxy  automatic_var_13753_1 ;
    GGS_attributeMap  automatic_var_13753_2 ;
    GGS_typedAttributeList  automatic_var_13753_3 ;
    GGS_constructorMap  automatic_var_13753_4 ;
    GGS_readerMap  automatic_var_13753_5 ;
    GGS_modifierMap  automatic_var_13753_6 ;
    GGS_instanceMethodMap  automatic_var_13753_7 ;
    GGS_classMethodMap  automatic_var_13753_8 ;
    GGS_enumerationDescriptorList  automatic_var_13753_9 ;
    GGS_uint  automatic_var_13753_10 ;
    GGS_unifiedTypeMapProxyList  automatic_var_13753_11 ;
    GGS_nativeAttributeList  automatic_var_13753_12 ;
    GGS_stringset  automatic_var_13753_13 ;
    GGS_lstringlist  automatic_var_13753_14 ;
    GGS_typedAttributeList  automatic_var_13753_15 ;
    GGS_mapSearchMethodListAST  automatic_var_13753_16 ;
    GGS_mapSearchMethodListAST  automatic_var_13753_17 ;
    GGS_withAccessorMap  automatic_var_13753_18 ;
    GGS_bool automatic_var_13753_19 ;
    if (var_cas_inSemanticContext.mTypeMap.isBuilt ()) {
      var_cas_inSemanticContext.mTypeMap (HERE)->method_searchKey (inLexique, operand_13343->mAssociatedListTypeName, automatic_var_13753_0, automatic_var_13753_1, var_cas_typeKindEnum, var_cas_listTypeAttributeList, automatic_var_13753_2, automatic_var_13753_3, automatic_var_13753_4, automatic_var_13753_5, automatic_var_13753_6, automatic_var_13753_7, automatic_var_13753_8, automatic_var_13753_9, automatic_var_13753_10, automatic_var_13753_11, automatic_var_13753_12, automatic_var_13753_13, automatic_var_13753_14, automatic_var_13753_15, automatic_var_13753_16, automatic_var_13753_17, automatic_var_13753_18, automatic_var_13753_19 COMMA_SOURCE_FILE_AT_LINE (317)) ;
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_listmapTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_13343->mListmapTypeName COMMA_SOURCE_FILE_AT_LINE (320)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_13343->mAssociatedListTypeName COMMA_SOURCE_FILE_AT_LINE (321)), var_cas_listTypeAttributeList COMMA_SOURCE_FILE_AT_LINE (319)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class map '@insertMethodMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_insertMethodMap ("insertMethodMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_insertMethodMap::
elementOf_GGS_insertMethodMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_insertMethodMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_insertMethodMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_insertMethodMap::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_insertMethodMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_insertMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_insertMethodMap * info = (e_insertMethodMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_insertMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_insertMethodMap * info = (e_insertMethodMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::
constructor_emptyMap (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_insertMethodMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_insertMethodMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::modifier_insertFakeKey (C_CompilerEx & inCompiler,
                         const GGS_string & inKey,
                         const GGS_location & inHelperMessageErrorLocation,
                         const GGS_string & inHelperMessage
                         COMMA_LOCATION_ARGS) {
  e_insertMethodMap info  ;
  internal_insertFakeKey (inCompiler,
                          (void *) & info,
                          inKey,
                          inHelperMessageErrorLocation,
                          inHelperMessage
                          COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_insertMethodMap::
operator_isEqual (const GGS_insertMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_insertMethodMap::
operator_isNotEqual (const GGS_insertMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
insertElement (C_CompilerEx & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_insertMethodMap info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
searchElement (C_CompilerEx & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inLexique, inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_insertMethodMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
modifier_insertKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::
constructor_mapWithMapToOverride (C_CompilerEx & /* inLexique */,
                                  const GGS_insertMethodMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_insertMethodMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::
reader_overriddenMap (C_CompilerEx & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_insertMethodMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_insertMethodMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @insertMethodMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_insertMethodMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_insertMethodMap * p = NULL ;
    macroMyNew (p, GGS_insertMethodMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_insertMethodMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_insertMethodMap * p = dynamic_cast <const GGS_insertMethodMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_insertMethodMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_insertMethodMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_insertMethodMap ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::constructor_mapWithKeyAndValue (C_CompilerEx & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_insertMethodMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class map '@searchMethodMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_searchMethodMap ("searchMethodMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_searchMethodMap::
elementOf_GGS_searchMethodMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_searchMethodMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_searchMethodMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_searchMethodMap::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_searchMethodMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_searchMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_searchMethodMap * info = (e_searchMethodMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_searchMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_searchMethodMap * info = (e_searchMethodMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::
constructor_emptyMap (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_searchMethodMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_searchMethodMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::modifier_insertFakeKey (C_CompilerEx & inCompiler,
                         const GGS_string & inKey,
                         const GGS_location & inHelperMessageErrorLocation,
                         const GGS_string & inHelperMessage
                         COMMA_LOCATION_ARGS) {
  e_searchMethodMap info  ;
  internal_insertFakeKey (inCompiler,
                          (void *) & info,
                          inKey,
                          inHelperMessageErrorLocation,
                          inHelperMessage
                          COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_searchMethodMap::
operator_isEqual (const GGS_searchMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_searchMethodMap::
operator_isNotEqual (const GGS_searchMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
insertElement (C_CompilerEx & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_searchMethodMap info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
searchElement (C_CompilerEx & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inLexique, inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_searchMethodMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
modifier_insertKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::
constructor_mapWithMapToOverride (C_CompilerEx & /* inLexique */,
                                  const GGS_searchMethodMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_searchMethodMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::
reader_overriddenMap (C_CompilerEx & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_searchMethodMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_searchMethodMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @searchMethodMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_searchMethodMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_searchMethodMap * p = NULL ;
    macroMyNew (p, GGS_searchMethodMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_searchMethodMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_searchMethodMap * p = dynamic_cast <const GGS_searchMethodMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_searchMethodMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_searchMethodMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_searchMethodMap ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::constructor_mapWithKeyAndValue (C_CompilerEx & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_searchMethodMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "check_K_escapeCharacters"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_check_K_escapeCharacters (C_CompilerEx & inLexique,
                                GGS_lstring   var_cas_inString
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_check_K_escapeCharacters at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_stringlist::cEnumerator enumerator_14786 (var_cas_inString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (348)).reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
    const GGS_stringlist::cElement * operand_14786 = NULL ;
    while (((operand_14786 = enumerator_14786.nextObject ()))) {
      macroValidPointer (operand_14786) ;
      GGS_stringlist  var_cas_explodedArray = operand_14786->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
      GGS_string automatic_var_14952_0 ;
      var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_14952_0 COMMA_SOURCE_FILE_AT_LINE (350)) ;
      {
        GGS_stringlist::cEnumerator enumerator_14980 (var_cas_explodedArray, true) ;
        const GGS_stringlist::cElement * operand_14980 = NULL ;
        while (((operand_14980 = enumerator_14980.nextObject ()))) {
          macroValidPointer (operand_14980) ;
          const GGS_bool cond_15225 = (operand_14980->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
          if (cond_15225.isBuiltAndTrue ()) {
            const GGS_char var_cas_c = operand_14980->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (353)) ;
            const GGS_bool cond_15210 = (var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K'))) ;
            if (cond_15210.isBuiltAndTrue ()) {
              var_cas_inString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K' and '%%' escape sequences are allowed in this error message") COMMA_SOURCE_FILE_AT_LINE (356)) ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_check_K_escapeCharacters\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@mapDeclarationAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_mapDeclarationAST * operand_15417,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15417 != NULL) {
    GGS_stringset  var_cas_initialStateSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_insertMethodListAST::cEnumerator enumerator_15685 (operand_15417->mInsertMethodList, true) ;
      const GGS_insertMethodListAST::cElement * operand_15685 = NULL ;
      while (((operand_15685 = enumerator_15685.nextObject ()))) {
        macroValidPointer (operand_15685) ;
        const GGS_bool cond_15981 = (operand_15417->mMapStateList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_15981.isBuiltAndTrue ()) {
          const GGS_bool cond_15899 = (operand_15685->mInitialStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (373))).operator_isEqual (GGS_string ("")) ;
          if (cond_15899.isBuiltAndTrue ()) {
            operand_15685->mInsertMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_15685->mInsertMethodName)).operator_concat (GGS_string ("' insert method should name an automaton state")) COMMA_SOURCE_FILE_AT_LINE (375)) ;
          }else if (cond_15899.isBuiltAndFalse ()) {
            var_cas_initialStateSet.addAssign_operation (operand_15685->mInitialStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (376))) ;
          }
        }else if (cond_15981.isBuiltAndFalse ()) {
          const GGS_bool cond_16143 = (operand_15685->mInitialStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (378))).operator_isNotEqual (GGS_string ("")) ;
          if (cond_16143.isBuiltAndTrue ()) {
            operand_15685->mInsertMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_15685->mInsertMethodName)).operator_concat (GGS_string ("' insert method should not name an automaton state")) COMMA_SOURCE_FILE_AT_LINE (380)) ;
          }
        }
      }
    }
    GGS_mapAutomatonActionMap  var_cas_mapAutomatonActionMap = GGS_mapAutomatonActionMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (383)) ;
    {
      GGS_mapSearchMethodListAST::cEnumerator enumerator_16288 (operand_15417->mSearchMethodList, true) ;
      const GGS_mapSearchMethodListAST::cElement * operand_16288 = NULL ;
      while (((operand_16288 = enumerator_16288.nextObject ()))) {
        macroValidPointer (operand_16288) ;
        const GGS_bool cond_16814 = (operand_15417->mMapStateList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_16814.isBuiltAndTrue ()) {
          const GGS_bool cond_16498 = (operand_16288->mActionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (386))).operator_isEqual (GGS_string ("")) ;
          if (cond_16498.isBuiltAndTrue ()) {
            operand_16288->mSearchMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_16288->mSearchMethodName)).operator_concat (GGS_string ("' search method should name an automaton action")) COMMA_SOURCE_FILE_AT_LINE (388)) ;
          }else if (cond_16498.isBuiltAndFalse ()) {
            const GGS_bool cond_16799 = (var_cas_mapAutomatonActionMap.reader_hasKey (operand_16288->mActionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (388)))).operator_not () ;
            if (cond_16799.isBuiltAndTrue ()) {
              var_cas_mapAutomatonActionMap.modifier_insertKey (inLexique, operand_16288->mActionName, var_cas_mapAutomatonActionMap.reader_count () COMMA_SOURCE_FILE_AT_LINE (390)) ;
            }
          }
        }else if (cond_16814.isBuiltAndFalse ()) {
          const GGS_bool cond_16971 = (operand_16288->mActionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (394))).operator_isNotEqual (GGS_string ("")) ;
          if (cond_16971.isBuiltAndTrue ()) {
            operand_16288->mSearchMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_16288->mSearchMethodName)).operator_concat (GGS_string ("' search method should not name an automaton action")) COMMA_SOURCE_FILE_AT_LINE (396)) ;
          }
        }
      }
    }
    GGS_mapAutomatonStateMap  var_cas_mapAutomatonStateMap = GGS_mapAutomatonStateMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (399)) ;
    {
      GGS_mapStateList::cEnumerator enumerator_17101 (operand_15417->mMapStateList, true) ;
      const GGS_mapStateList::cElement * operand_17101 = NULL ;
      while (((operand_17101 = enumerator_17101.nextObject ()))) {
        macroValidPointer (operand_17101) ;
        var_cas_mapAutomatonStateMap.modifier_insertKey (inLexique, operand_17101->mStateName, var_cas_mapAutomatonStateMap.reader_count () COMMA_SOURCE_FILE_AT_LINE (401)) ;
      }
    }
    {
      GGS_mapStateList::cEnumerator enumerator_17227 (operand_15417->mMapStateList, true) ;
      const GGS_mapStateList::cElement * operand_17227 = NULL ;
      while (((operand_17227 = enumerator_17227.nextObject ()))) {
        macroValidPointer (operand_17227) ;
        {
          GGS_mapStateTransitionList::cEnumerator enumerator_17258 (operand_17227->mTransitionList, true) ;
          const GGS_mapStateTransitionList::cElement * operand_17258 = NULL ;
          while (((operand_17258 = enumerator_17258.nextObject ()))) {
            macroValidPointer (operand_17258) ;
            GGS_uint  automatic_var_17321_0 ;
            if (var_cas_mapAutomatonStateMap.isBuilt ()) {
              var_cas_mapAutomatonStateMap (HERE)->method_searchKey (inLexique, operand_17258->mTargetStateName, automatic_var_17321_0 COMMA_SOURCE_FILE_AT_LINE (405)) ;
            }
          }
        }
      }
    }
    const GGS_stringset  var_cas_allActions = var_cas_mapAutomatonActionMap.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (409)) ;
    GGS_mapStateSortedList  var_cas_mapStateSortedList = GGS_mapStateSortedList ::constructor_emptySortedList () ;
    {
      GGS_mapStateList::cEnumerator enumerator_17554 (operand_15417->mMapStateList, true) ;
      const GGS_mapStateList::cElement * operand_17554 = NULL ;
      while (((operand_17554 = enumerator_17554.nextObject ()))) {
        macroValidPointer (operand_17554) ;
        GGS_stringset  var_cas_actionsForCurrentState = GGS_stringset ::constructor_emptySet () ;
        GGS_mapStateTransitionSortedList  var_cas_mapStateTransitionSortedList = GGS_mapStateTransitionSortedList ::constructor_emptySortedList () ;
        {
          GGS_mapStateTransitionList::cEnumerator enumerator_17719 (operand_17554->mTransitionList, true) ;
          const GGS_mapStateTransitionList::cElement * operand_17719 = NULL ;
          while (((operand_17719 = enumerator_17719.nextObject ()))) {
            macroValidPointer (operand_17719) ;
            GGS_uint  var_cas_actionIndex ;
            if (var_cas_mapAutomatonActionMap.isBuilt ()) {
              var_cas_mapAutomatonActionMap (HERE)->method_searchKey (inLexique, operand_17719->mActionName, var_cas_actionIndex COMMA_SOURCE_FILE_AT_LINE (416)) ;
            }
            const GGS_bool cond_17990 = var_cas_actionsForCurrentState.reader_hasKey (operand_17719->mActionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (417))) ;
            if (cond_17990.isBuiltAndTrue ()) {
              operand_17719->mActionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_17719->mActionName)).operator_concat (GGS_string ("' action is already used for this state")) COMMA_SOURCE_FILE_AT_LINE (419)) ;
            }
            var_cas_actionsForCurrentState.addAssign_operation (operand_17719->mActionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (420))) ;
            GGS_uint  var_cas_targetStateIndex ;
            if (var_cas_mapAutomatonStateMap.isBuilt ()) {
              var_cas_mapAutomatonStateMap (HERE)->method_searchKey (inLexique, operand_17719->mTargetStateName, var_cas_targetStateIndex COMMA_SOURCE_FILE_AT_LINE (422)) ;
            }
            var_cas_mapStateTransitionSortedList.addAssign_operation (var_cas_actionIndex, operand_17719->mActionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (425)), var_cas_targetStateIndex, operand_17719->mTargetStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (427)), operand_17719->mTransitionMessageKind, operand_17719->mTransitionMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (429))) ;
          }
        }
        GGS_uint  var_cas_stateIndex ;
        if (var_cas_mapAutomatonStateMap.isBuilt ()) {
          var_cas_mapAutomatonStateMap (HERE)->method_searchKey (inLexique, operand_17554->mStateName, var_cas_stateIndex COMMA_SOURCE_FILE_AT_LINE (433)) ;
        }
        var_cas_mapStateSortedList.addAssign_operation (var_cas_stateIndex, operand_17554->mStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (436)), operand_17554->mStateMessageKind, operand_17554->mStateMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (438)), var_cas_mapStateTransitionSortedList) ;
        GGS_stringset  var_cas_missingActions = var_cas_allActions.substract_operation (inLexique, var_cas_actionsForCurrentState COMMA_SOURCE_FILE_AT_LINE (441)) ;
        const GGS_bool cond_19014 = (var_cas_missingActions.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_19014.isBuiltAndTrue ()) {
          GGS_string var_cas_s = GGS_string ("") ;
          {
            GGS_stringset::cEnumerator enumerator_18821 (var_cas_missingActions, true) ;
            if (enumerator_18821 .hasCurrentObject ()) {
              bool _foreach_loop_18821 ;
              do{
                var_cas_s.appendCString ("'") ;
                var_cas_s.dotAssign_operation (enumerator_18821._key (HERE)) ;
                var_cas_s.appendCString ("'") ;
                enumerator_18821.next () ;
                _foreach_loop_18821 = (enumerator_18821 .hasCurrentObject ()) ;
                if (_foreach_loop_18821) {
                  var_cas_s.appendCString (", ") ;
                }
              }while (_foreach_loop_18821) ;
            }
          }
          operand_17554->mStateName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("the following actions are not named in a transition from this state: ")).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (449)) ;
        }
      }
    }
    GGS_stringset  var_cas_accessibleStates = var_cas_initialStateSet ;
    GGS_bool var_cas_progress = GGS_bool (true) ;
    GGS_uint _variant_19602 = operand_15417->mMapStateList.reader_length ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (454)) ;
    GGS_bool _condition_19602 (_variant_19602.isBuilt (), true) ;
    while (_condition_19602.isBuiltAndTrue ()) {
      _condition_19602 = var_cas_progress ;
      if (_condition_19602.isBuiltAndTrue ()) {
        if (_variant_19602.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (466)) ;
          _condition_19602 = GGS_bool (false) ;
        }else{
          _variant_19602.decrement_operation (inLexique COMMA_HERE) ;
          var_cas_progress = GGS_bool (false) ;
          {
            GGS_mapStateList::cEnumerator enumerator_19256 (operand_15417->mMapStateList, true) ;
            const GGS_mapStateList::cElement * operand_19256 = NULL ;
            while (((operand_19256 = enumerator_19256.nextObject ()))) {
              macroValidPointer (operand_19256) ;
              const GGS_bool cond_19573 = var_cas_accessibleStates.reader_hasKey (operand_19256->mStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (457))) ;
              if (cond_19573.isBuiltAndTrue ()) {
                {
                  GGS_mapStateTransitionList::cEnumerator enumerator_19352 (operand_19256->mTransitionList, true) ;
                  const GGS_mapStateTransitionList::cElement * operand_19352 = NULL ;
                  while (((operand_19352 = enumerator_19352.nextObject ()))) {
                    macroValidPointer (operand_19352) ;
                    const GGS_bool cond_19536 = (var_cas_accessibleStates.reader_hasKey (operand_19352->mTargetStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (459)))).operator_not () ;
                    if (cond_19536.isBuiltAndTrue ()) {
                      var_cas_accessibleStates.addAssign_operation (operand_19352->mTargetStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (460))) ;
                      var_cas_progress = GGS_bool (true) ;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    const GGS_stringset  var_cas_uselessStates = var_cas_mapAutomatonStateMap.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (467)).substract_operation (inLexique, var_cas_accessibleStates COMMA_SOURCE_FILE_AT_LINE (467)) ;
    const GGS_bool cond_19939 = (var_cas_uselessStates.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_19939.isBuiltAndTrue ()) {
      GGS_string var_cas_s = GGS_string ("") ;
      {
        GGS_stringset::cEnumerator enumerator_19781 (var_cas_uselessStates, true) ;
        if (enumerator_19781 .hasCurrentObject ()) {
          bool _foreach_loop_19781 ;
          do{
            var_cas_s.appendCString ("'") ;
            var_cas_s.dotAssign_operation (enumerator_19781._key (HERE)) ;
            var_cas_s.appendCString ("'") ;
            enumerator_19781.next () ;
            _foreach_loop_19781 = (enumerator_19781 .hasCurrentObject ()) ;
            if (_foreach_loop_19781) {
              var_cas_s.appendCString (", ") ;
            }
          }while (_foreach_loop_19781) ;
        }
      }
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, (GGS_string ("the following map automaton states are useless: ")).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (474)) ;
    }
    GGS_stringset  var_cas_neededAssociations = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_accessibilityGraph = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_mapAutomatonStateMap::cEnumerator enumerator_20151 (var_cas_mapAutomatonStateMap, true) ;
      const GGS_mapAutomatonStateMap::cElement * operand_20151 = NULL ;
      while (((operand_20151 = enumerator_20151.nextObject ()))) {
        macroValidPointer (operand_20151) ;
        GGS_stringset  var_cas_reachableStates = GGS_stringset ::constructor_emptySet () ;
        var_cas_reachableStates.addAssign_operation (operand_20151->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (482))) ;
        GGS_bool var_cas_progress = GGS_bool (true) ;
        GGS_uint _variant_20833 = var_cas_mapAutomatonStateMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (484)) ;
        GGS_bool _condition_20833 (_variant_20833.isBuilt (), true) ;
        while (_condition_20833.isBuiltAndTrue ()) {
          _condition_20833 = var_cas_progress ;
          if (_condition_20833.isBuiltAndTrue ()) {
            if (_variant_20833.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (497)) ;
              _condition_20833 = GGS_bool (false) ;
            }else{
              _variant_20833.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_progress = GGS_bool (false) ;
              {
                GGS_mapStateList::cEnumerator enumerator_20383 (operand_15417->mMapStateList, true) ;
                const GGS_mapStateList::cElement * operand_20383 = NULL ;
                while (((operand_20383 = enumerator_20383.nextObject ()))) {
                  macroValidPointer (operand_20383) ;
                  const GGS_bool cond_20800 = var_cas_reachableStates.reader_hasKey (operand_20383->mStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (487))) ;
                  if (cond_20800.isBuiltAndTrue ()) {
                    {
                      GGS_mapStateTransitionList::cEnumerator enumerator_20482 (operand_20383->mTransitionList, true) ;
                      const GGS_mapStateTransitionList::cElement * operand_20482 = NULL ;
                      while (((operand_20482 = enumerator_20482.nextObject ()))) {
                        macroValidPointer (operand_20482) ;
                        const GGS_bool cond_20759 = (var_cas_reachableStates.reader_hasKey (operand_20482->mTargetStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (489)))).operator_not () ;
                        if (cond_20759.isBuiltAndTrue ()) {
                          var_cas_reachableStates.addAssign_operation (operand_20482->mTargetStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (490))) ;
                          var_cas_accessibilityGraph.addAssign_operation (((operand_20151->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (491))).operator_concat (GGS_string (":"))).operator_concat (operand_20482->mTargetStateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (491)))) ;
                          var_cas_progress = GGS_bool (true) ;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        {
          GGS_stringset::cEnumerator enumerator_20868 (var_cas_reachableStates, true) ;
          while (enumerator_20868.hasCurrentObject ()) {
            const GGS_bool cond_20975 = (operand_20151->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (499))).operator_isNotEqual (enumerator_20868._key (HERE)) ;
            if (cond_20975.isBuiltAndTrue ()) {
              var_cas_neededAssociations.addAssign_operation (((operand_20151->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (500))).operator_concat (GGS_string (":"))).operator_concat (enumerator_20868._key (HERE))) ;
            }
            enumerator_20868.next () ;
          }
        }
      }
    }
    GGS_mapOverrideList  var_cas_mapOverrideList = GGS_mapOverrideList ::constructor_emptyList () ;
    {
      GGS_mapOverrideBlockListAST::cEnumerator enumerator_21103 (operand_15417->mMapOverrideBlockListAST, true) ;
      const GGS_mapOverrideBlockListAST::cElement * operand_21103 = NULL ;
      while (((operand_21103 = enumerator_21103.nextObject ()))) {
        macroValidPointer (operand_21103) ;
        GGS_stringset  var_cas_handledAssociations = GGS_stringset ::constructor_emptySet () ;
        GGS_stringset  var_cas_neededCombinaisons = GGS_stringset ::constructor_emptySet () ;
        GGS_branchBehaviourSortedListForMapOverride  var_cas_branchBehaviourSortedListForMapOverride1 = GGS_branchBehaviourSortedListForMapOverride ::constructor_emptySortedList () ;
        {
          GGS_mapOverrideBlockDescriptorAST::cEnumerator enumerator_21351 (operand_21103->mMapOverrideBlockDescriptor1AST, true) ;
          const GGS_mapOverrideBlockDescriptorAST::cElement * operand_21351 = NULL ;
          while (((operand_21351 = enumerator_21351.nextObject ()))) {
            macroValidPointer (operand_21351) ;
            GGS_uint  var_cas_startStateNameIndex ;
            if (var_cas_mapAutomatonStateMap.isBuilt ()) {
              var_cas_mapAutomatonStateMap (HERE)->method_searchKey (inLexique, operand_21351->mLeftState, var_cas_startStateNameIndex COMMA_SOURCE_FILE_AT_LINE (512)) ;
            }
            GGS_uint  var_cas_currentStateNameIndex ;
            if (var_cas_mapAutomatonStateMap.isBuilt ()) {
              var_cas_mapAutomatonStateMap (HERE)->method_searchKey (inLexique, operand_21351->mRightState, var_cas_currentStateNameIndex COMMA_SOURCE_FILE_AT_LINE (514)) ;
            }
            const GGS_string var_cas_association = ((operand_21351->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (515))).operator_concat (GGS_string (":"))).operator_concat (operand_21351->mRightState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (515))) ;
            const GGS_bool cond_21812 = (var_cas_neededAssociations.reader_hasKey (var_cas_association)).operator_not () ;
            if (cond_21812.isBuiltAndTrue ()) {
              operand_21351->mRightState.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("the '")).operator_concat (var_cas_association)).operator_concat (GGS_string ("' association is useless")) COMMA_SOURCE_FILE_AT_LINE (517)) ;
            }
            const GGS_bool cond_21979 = var_cas_handledAssociations.reader_hasKey (var_cas_association) ;
            if (cond_21979.isBuiltAndTrue ()) {
              operand_21351->mRightState.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (var_cas_association)).operator_concat (GGS_string ("' association is already defined")) COMMA_SOURCE_FILE_AT_LINE (522)) ;
            }
            var_cas_handledAssociations.addAssign_operation (var_cas_association) ;
            GGS_uint  var_cas_finalStateNameIndex ;
            if (var_cas_mapAutomatonStateMap.isBuilt ()) {
              var_cas_mapAutomatonStateMap (HERE)->method_searchKey (inLexique, operand_21351->mResultingState, var_cas_finalStateNameIndex COMMA_SOURCE_FILE_AT_LINE (525)) ;
            }
            const GGS_bool cond_22643 = (operand_21351->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (526))).operator_isNotEqual (operand_21351->mResultingState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (526))) ;
            if (cond_22643.isBuiltAndTrue ()) {
              var_cas_neededCombinaisons.addAssign_operation (((operand_21351->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (527))).operator_concat (GGS_string (":"))).operator_concat (operand_21351->mResultingState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (527)))) ;
              var_cas_neededCombinaisons.addAssign_operation (((operand_21351->mResultingState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (528))).operator_concat (GGS_string (":"))).operator_concat (operand_21351->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (528)))) ;
              const GGS_bool cond_22628 = (var_cas_accessibilityGraph.reader_hasKey (((operand_21351->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (529))).operator_concat (GGS_string (":"))).operator_concat (operand_21351->mRightState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (529))))).operator_not () ;
              if (cond_22628.isBuiltAndTrue ()) {
                operand_21351->mResultingState.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (operand_21351->mResultingState)).operator_concat (GGS_string ("' state is not reachable from '"))).operator_concat (operand_21351->mLeftState)).operator_concat (GGS_string ("' state")) COMMA_SOURCE_FILE_AT_LINE (533)) ;
              }
            }
            ::routine_check_K_escapeCharacters (inLexique,  operand_21351->mTransitionMessage COMMA_SOURCE_FILE_AT_LINE (535)) ;
            var_cas_branchBehaviourSortedListForMapOverride1.addAssign_operation (var_cas_startStateNameIndex, operand_21351->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (538)), var_cas_currentStateNameIndex, operand_21351->mRightState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (540)), var_cas_finalStateNameIndex, operand_21351->mResultingState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (542)), operand_21351->mMessageKind, operand_21351->mTransitionMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (544))) ;
          }
        }
        GGS_stringset  var_cas_forgottenAssociations = var_cas_neededAssociations.substract_operation (inLexique, var_cas_handledAssociations COMMA_SOURCE_FILE_AT_LINE (547)) ;
        const GGS_bool cond_23368 = (var_cas_forgottenAssociations.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_23368.isBuiltAndTrue ()) {
          GGS_string var_cas_s = GGS_string ("") ;
          {
            GGS_stringset::cEnumerator enumerator_23207 (var_cas_forgottenAssociations, true) ;
            while (enumerator_23207.hasCurrentObject ()) {
              var_cas_s.appendCString ("\n"
                "  - ") ;
              var_cas_s.dotAssign_operation (enumerator_23207._key (HERE)) ;
              enumerator_23207.next () ;
            }
          }
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((var_cas_forgottenAssociations.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (553))).operator_concat (GGS_string (" associations should be defined:"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (554)) ;
        }
        GGS_stringset  var_cas_definedCombinaisons = GGS_stringset ::constructor_emptySet () ;
        GGS_branchBehaviourSortedListForMapOverride  var_cas_branchBehaviourSortedListForMapOverride2 = GGS_branchBehaviourSortedListForMapOverride ::constructor_emptySortedList () ;
        {
          GGS_mapOverrideBlockDescriptorAST::cEnumerator enumerator_23571 (operand_21103->mMapOverrideBlockDescriptor2AST, true) ;
          const GGS_mapOverrideBlockDescriptorAST::cElement * operand_23571 = NULL ;
          while (((operand_23571 = enumerator_23571.nextObject ()))) {
            macroValidPointer (operand_23571) ;
            GGS_uint  var_cas_leftStateIndex ;
            if (var_cas_mapAutomatonStateMap.isBuilt ()) {
              var_cas_mapAutomatonStateMap (HERE)->method_searchKey (inLexique, operand_23571->mLeftState, var_cas_leftStateIndex COMMA_SOURCE_FILE_AT_LINE (559)) ;
            }
            GGS_uint  var_cas_rightStateIndex ;
            if (var_cas_mapAutomatonStateMap.isBuilt ()) {
              var_cas_mapAutomatonStateMap (HERE)->method_searchKey (inLexique, operand_23571->mRightState, var_cas_rightStateIndex COMMA_SOURCE_FILE_AT_LINE (561)) ;
            }
            const GGS_string var_cas_combinaison = ((operand_23571->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (562))).operator_concat (GGS_string (":"))).operator_concat (operand_23571->mRightState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (562))) ;
            const GGS_bool cond_24035 = (var_cas_neededCombinaisons.reader_hasKey (var_cas_combinaison)).operator_not () ;
            if (cond_24035.isBuiltAndTrue ()) {
              operand_23571->mRightState.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (operand_23571->mLeftState)).operator_concat (GGS_string (":"))).operator_concat (operand_23571->mRightState)).operator_concat (GGS_string ("' combinaison is useless")) COMMA_SOURCE_FILE_AT_LINE (566)) ;
            }
            const GGS_bool cond_24221 = var_cas_definedCombinaisons.reader_hasKey (var_cas_combinaison) ;
            if (cond_24221.isBuiltAndTrue ()) {
              operand_23571->mRightState.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (operand_23571->mLeftState)).operator_concat (GGS_string (":"))).operator_concat (operand_23571->mRightState)).operator_concat (GGS_string ("' combinaison is already defined")) COMMA_SOURCE_FILE_AT_LINE (570)) ;
            }
            var_cas_definedCombinaisons.addAssign_operation (var_cas_combinaison) ;
            const GGS_bool cond_24430 = (operand_23571->mMessageKind).operator_isEqual (GGS_mapAutomatonMessageKind::constructor_noMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (572))) ;
            if (cond_24430.isBuiltAndTrue ()) {
              var_cas_definedCombinaisons.addAssign_operation (((operand_23571->mRightState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (573))).operator_concat (GGS_string (":"))).operator_concat (operand_23571->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (573)))) ;
            }
            GGS_uint  var_cas_resultingStateNameIndex ;
            if (var_cas_mapAutomatonStateMap.isBuilt ()) {
              var_cas_mapAutomatonStateMap (HERE)->method_searchKey (inLexique, operand_23571->mResultingState, var_cas_resultingStateNameIndex COMMA_SOURCE_FILE_AT_LINE (576)) ;
            }
            const GGS_bool cond_24923 = (((operand_23571->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (577))).operator_isNotEqual (operand_23571->mResultingState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (577)))).operator_and ((operand_23571->mRightState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (578))).operator_isNotEqual (operand_23571->mResultingState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (578))))).operator_and ((var_cas_accessibilityGraph.reader_hasKey (((operand_23571->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (579))).operator_concat (GGS_string (":"))).operator_concat (operand_23571->mResultingState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (579))))).operator_not ()) ;
            if (cond_24923.isBuiltAndTrue ()) {
              operand_23571->mResultingState.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (operand_23571->mResultingState)).operator_concat (GGS_string ("' state cannot be reached from the '"))).operator_concat (operand_23571->mResultingState)).operator_concat (GGS_string ("' state")) COMMA_SOURCE_FILE_AT_LINE (582)) ;
            }
            ::routine_check_K_escapeCharacters (inLexique,  operand_23571->mTransitionMessage COMMA_SOURCE_FILE_AT_LINE (583)) ;
            var_cas_branchBehaviourSortedListForMapOverride2.addAssign_operation (var_cas_leftStateIndex, operand_23571->mLeftState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (586)), var_cas_rightStateIndex, operand_23571->mRightState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (588)), var_cas_resultingStateNameIndex, operand_23571->mResultingState.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (590)), operand_23571->mMessageKind, operand_23571->mTransitionMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (592))) ;
          }
        }
        const GGS_bool cond_25758 = (var_cas_forgottenAssociations.reader_count ()).operator_isEqual (GGS_uint (0U)) ;
        if (cond_25758.isBuiltAndTrue ()) {
          GGS_stringset  var_cas_forgottenCombinaisons = var_cas_neededCombinaisons.substract_operation (inLexique, var_cas_definedCombinaisons COMMA_SOURCE_FILE_AT_LINE (596)) ;
          const GGS_bool cond_25745 = (var_cas_forgottenCombinaisons.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
          if (cond_25745.isBuiltAndTrue ()) {
            GGS_string var_cas_s = GGS_string ("") ;
            {
              GGS_stringset::cEnumerator enumerator_25580 (var_cas_forgottenCombinaisons, true) ;
              while (enumerator_25580.hasCurrentObject ()) {
                var_cas_s.appendCString ("\n"
                  "  - ") ;
                var_cas_s.dotAssign_operation (enumerator_25580._key (HERE)) ;
                enumerator_25580.next () ;
              }
            }
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((var_cas_forgottenCombinaisons.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (602))).operator_concat (GGS_string (" combinaisons are forgotten:"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (603)) ;
          }
        }
        var_cas_mapOverrideList.addAssign_operation (operand_21103->mOverrideBlockName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (606)), var_cas_branchBehaviourSortedListForMapOverride1, var_cas_branchBehaviourSortedListForMapOverride2) ;
      }
    }
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (613)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_26091 (operand_15417->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_26091 = NULL ;
      while (((operand_26091 = enumerator_26091.nextObject ()))) {
        macroValidPointer (operand_26091) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_26091->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (615)) ;
        GGS_bool var_cas_hasSetter = GGS_bool (true) ;
        GGS_bool var_cas_hasGetter = GGS_bool (true) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_26091->mAttributeName, var_cas_hasSetter, var_cas_hasGetter) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_26091->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (624)) ;
      }
    }
    GGS_insertMethodMap  var_cas_insertMethodMap = GGS_insertMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (627)) ;
    {
      GGS_insertMethodListAST::cEnumerator enumerator_26513 (operand_15417->mInsertMethodList, true) ;
      const GGS_insertMethodListAST::cElement * operand_26513 = NULL ;
      while (((operand_26513 = enumerator_26513.nextObject ()))) {
        macroValidPointer (operand_26513) ;
        var_cas_insertMethodMap.modifier_insertKey (inLexique, operand_26513->mInsertMethodName COMMA_SOURCE_FILE_AT_LINE (629)) ;
        {
          GGS_stringlist::cEnumerator enumerator_26649 (operand_26513->mErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (631)).reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_26649 = NULL ;
          while (((operand_26649 = enumerator_26649.nextObject ()))) {
            macroValidPointer (operand_26649) ;
            GGS_stringlist  var_cas_explodedArray = operand_26649->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_26824_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_26824_0 COMMA_SOURCE_FILE_AT_LINE (633)) ;
            {
              GGS_stringlist::cEnumerator enumerator_26854 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_26854 = NULL ;
              while (((operand_26854 = enumerator_26854.nextObject ()))) {
                macroValidPointer (operand_26854) ;
                const GGS_bool cond_27142 = (operand_26854->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_27142.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_26854->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (636)) ;
                  const GGS_bool cond_27125 = ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K')))).operator_and ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('L')))) ;
                  if (cond_27125.isBuiltAndTrue ()) {
                    operand_26513->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K', '%L' and '%%' escape sequences are allowed in an insert error message") COMMA_SOURCE_FILE_AT_LINE (639)) ;
                  }
                }
              }
            }
          }
        }
        {
          GGS_stringlist::cEnumerator enumerator_27270 (operand_26513->mShadowErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (644)).reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_27270 = NULL ;
          while (((operand_27270 = enumerator_27270.nextObject ()))) {
            macroValidPointer (operand_27270) ;
            GGS_stringlist  var_cas_explodedArray = operand_27270->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_27451_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_27451_0 COMMA_SOURCE_FILE_AT_LINE (646)) ;
            {
              GGS_stringlist::cEnumerator enumerator_27481 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_27481 = NULL ;
              while (((operand_27481 = enumerator_27481.nextObject ()))) {
                macroValidPointer (operand_27481) ;
                const GGS_bool cond_27768 = (operand_27481->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_27768.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_27481->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (649)) ;
                  const GGS_bool cond_27751 = ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K')))).operator_and ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('L')))) ;
                  if (cond_27751.isBuiltAndTrue ()) {
                    operand_26513->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K', '%L' and '%%' escape sequences are allowed in a shadow error message") COMMA_SOURCE_FILE_AT_LINE (652)) ;
                  }
                }
              }
            }
          }
        }
      }
    }
    GGS_searchMethodMap  var_cas_searchMethodMap = GGS_searchMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (658)) ;
    {
      GGS_mapSearchMethodListAST::cEnumerator enumerator_27929 (operand_15417->mSearchMethodList, true) ;
      const GGS_mapSearchMethodListAST::cElement * operand_27929 = NULL ;
      while (((operand_27929 = enumerator_27929.nextObject ()))) {
        macroValidPointer (operand_27929) ;
        const GGS_bool cond_28042 = (operand_15417->mMapStateList.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
        if (cond_28042.isBuiltAndTrue ()) {
          var_cas_searchMethodMap.modifier_insertKey (inLexique, operand_27929->mSearchMethodName COMMA_SOURCE_FILE_AT_LINE (661)) ;
        }else if (cond_28042.isBuiltAndFalse ()) {
          var_cas_searchMethodMap.modifier_insertKey (inLexique, operand_27929->mSearchMethodName COMMA_SOURCE_FILE_AT_LINE (663)) ;
        }
        {
          GGS_stringlist::cEnumerator enumerator_28186 (operand_27929->mErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (666)).reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_28186 = NULL ;
          while (((operand_28186 = enumerator_28186.nextObject ()))) {
            macroValidPointer (operand_28186) ;
            GGS_stringlist  var_cas_explodedArray = operand_28186->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_28361_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_28361_0 COMMA_SOURCE_FILE_AT_LINE (668)) ;
            {
              GGS_stringlist::cEnumerator enumerator_28391 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_28391 = NULL ;
              while (((operand_28391 = enumerator_28391.nextObject ()))) {
                macroValidPointer (operand_28391) ;
                const GGS_bool cond_28657 = (operand_28391->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_28657.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_28391->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (671)) ;
                  const GGS_bool cond_28640 = (var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K'))) ;
                  if (cond_28640.isBuiltAndTrue ()) {
                    operand_27929->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K' and '%%' escape sequences are allowed in a search error message") COMMA_SOURCE_FILE_AT_LINE (674)) ;
                  }
                }
              }
            }
          }
        }
      }
    }
    {
      GGS_mapRemoveMethodListAST::cEnumerator enumerator_28770 (operand_15417->mRemoveMethodList, true) ;
      const GGS_mapRemoveMethodListAST::cElement * operand_28770 = NULL ;
      while (((operand_28770 = enumerator_28770.nextObject ()))) {
        macroValidPointer (operand_28770) ;
        var_cas_insertMethodMap.modifier_insertKey (inLexique, operand_28770->mMethodName COMMA_SOURCE_FILE_AT_LINE (681)) ;
        {
          GGS_stringlist::cEnumerator enumerator_28896 (operand_28770->mErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (683)).reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_28896 = NULL ;
          while (((operand_28896 = enumerator_28896.nextObject ()))) {
            macroValidPointer (operand_28896) ;
            GGS_stringlist  var_cas_explodedArray = operand_28896->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_29071_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_29071_0 COMMA_SOURCE_FILE_AT_LINE (685)) ;
            {
              GGS_stringlist::cEnumerator enumerator_29101 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_29101 = NULL ;
              while (((operand_29101 = enumerator_29101.nextObject ()))) {
                macroValidPointer (operand_29101) ;
                const GGS_bool cond_29367 = (operand_29101->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_29367.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_29101->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (688)) ;
                  const GGS_bool cond_29350 = (var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K'))) ;
                  if (cond_29350.isBuiltAndTrue ()) {
                    operand_28770->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K' and '%%' escape sequences are allowed in a remove error message") COMMA_SOURCE_FILE_AT_LINE (691)) ;
                  }
                }
              }
            }
          }
        }
      }
    }
    {
        GGS_uint var_cas_IDX (true, 0) ;
      GGS_insertOrReplaceDeclarationListAST::cEnumerator enumerator_29539 (operand_15417->mInsertOrReplaceDeclarationListAST, true) ;
      const GGS_insertOrReplaceDeclarationListAST::cElement * operand_29539 = NULL ;
      while (((operand_29539 = enumerator_29539.nextObject ()))) {
        macroValidPointer (operand_29539) ;
        const GGS_bool cond_29686 = (var_cas_IDX).operator_strictSup (GGS_uint (0U)) ;
        if (cond_29686.isBuiltAndTrue ()) {
          operand_29539->mInsertOrReplaceDeclarationLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("the 'insertOrReplace' modifier is already declared") COMMA_SOURCE_FILE_AT_LINE (699)) ;
        }
        var_cas_IDX.mValue ++ ;
      }
    }
    const GGS_bool var_cas_hasInsertOrReplaceModifier = (operand_15417->mInsertOrReplaceDeclarationListAST.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    const GGS_bool cond_30201 = (var_cas_hasInsertOrReplaceModifier).operator_and (var_cas_insertMethodMap.reader_hasKey (GGS_string ("insertOrReplace"))) ;
    if (cond_30201.isBuiltAndTrue ()) {
      GGS_location  var_cas_insertOrReplaceDeclarationLocation ;
      if (operand_15417->mInsertOrReplaceDeclarationListAST.isBuilt ()) {
        operand_15417->mInsertOrReplaceDeclarationListAST (HERE)->method_first (inLexique, var_cas_insertOrReplaceDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (705)) ;
      }
      var_cas_insertOrReplaceDeclarationLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the insertOrReplace' modifier cannot be declared : an insert modifier or a remove modifier has been declared with this name") COMMA_SOURCE_FILE_AT_LINE (707)) ;
    }
    GGS_withAccessorMap  var_cas_withAccessorMap = GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (709)) ;
    var_cas_withAccessorMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("hasKey"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (710)), var_cas_inPredefinedTypes.mStringType COMMA_SOURCE_FILE_AT_LINE (710)) ;
    {
      GGS_mapSearchMethodListAST::cEnumerator enumerator_30408 (operand_15417->mSearchMethodList, true) ;
      const GGS_mapSearchMethodListAST::cElement * operand_30408 = NULL ;
      while (((operand_30408 = enumerator_30408.nextObject ()))) {
        macroValidPointer (operand_30408) ;
        var_cas_withAccessorMap.modifier_insertKey (inLexique, operand_30408->mSearchMethodName, var_cas_inPredefinedTypes.mLStringType COMMA_SOURCE_FILE_AT_LINE (712)) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_mapTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_15417->mMapTypeName COMMA_SOURCE_FILE_AT_LINE (719)), operand_15417->mMapTypeName, var_cas_typedAttributeList, operand_15417->mInsertMethodList, operand_15417->mSearchMethodList, operand_15417->mRemoveMethodList, var_cas_hasInsertOrReplaceModifier, var_cas_withAccessorMap, var_cas_mapAutomatonStateMap, var_cas_mapAutomatonActionMap, var_cas_mapStateSortedList, var_cas_mapOverrideList COMMA_SOURCE_FILE_AT_LINE (718)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@mapProxyDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapProxyDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_mapProxyDeclarationAST * operand_31145,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_31145 != NULL) {
    GGS_typedAttributeList  var_cas_listTypeAttributeList ;
    GGS_mapSearchMethodListAST  var_cas_searchMethodList ;
    GGS_bool automatic_var_31572_0 ;
    GGS_unifiedTypeMapProxy  automatic_var_31572_1 ;
    GGS_typeKindEnum automatic_var_31572_2 ;
    GGS_typedAttributeList  automatic_var_31572_3 ;
    GGS_attributeMap  automatic_var_31572_4 ;
    GGS_constructorMap  automatic_var_31572_5 ;
    GGS_readerMap  automatic_var_31572_6 ;
    GGS_modifierMap  automatic_var_31572_7 ;
    GGS_instanceMethodMap  automatic_var_31572_8 ;
    GGS_classMethodMap  automatic_var_31572_9 ;
    GGS_enumerationDescriptorList  automatic_var_31572_10 ;
    GGS_uint  automatic_var_31572_11 ;
    GGS_unifiedTypeMapProxyList  automatic_var_31572_12 ;
    GGS_nativeAttributeList  automatic_var_31572_13 ;
    GGS_stringset  automatic_var_31572_14 ;
    GGS_lstringlist  automatic_var_31572_15 ;
    GGS_typedAttributeList  automatic_var_31572_16 ;
    GGS_mapSearchMethodListAST  automatic_var_31572_17 ;
    GGS_withAccessorMap  automatic_var_31572_18 ;
    GGS_bool automatic_var_31572_19 ;
    if (var_cas_inSemanticContext.mTypeMap.isBuilt ()) {
      var_cas_inSemanticContext.mTypeMap (HERE)->method_searchKey (inLexique, operand_31145->mAssociatedMapTypeName, automatic_var_31572_0, automatic_var_31572_1, automatic_var_31572_2, automatic_var_31572_3, automatic_var_31572_4, var_cas_listTypeAttributeList, automatic_var_31572_5, automatic_var_31572_6, automatic_var_31572_7, automatic_var_31572_8, automatic_var_31572_9, automatic_var_31572_10, automatic_var_31572_11, automatic_var_31572_12, automatic_var_31572_13, automatic_var_31572_14, automatic_var_31572_15, automatic_var_31572_16, var_cas_searchMethodList, automatic_var_31572_17, automatic_var_31572_18, automatic_var_31572_19 COMMA_SOURCE_FILE_AT_LINE (746)) ;
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_mapProxyTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_31145->mMapProxyTypeName COMMA_SOURCE_FILE_AT_LINE (749)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_31145->mAssociatedMapTypeName COMMA_SOURCE_FILE_AT_LINE (750)), var_cas_listTypeAttributeList, var_cas_searchMethodList COMMA_SOURCE_FILE_AT_LINE (748)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class map '@declaredMethodMap'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_declaredMethodMap ("declaredMethodMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_declaredMethodMap::
elementOf_GGS_declaredMethodMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_declaredMethodMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_declaredMethodMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_declaredMethodMap::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_declaredMethodMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_declaredMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_declaredMethodMap * info = (e_declaredMethodMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_declaredMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_declaredMethodMap * info = (e_declaredMethodMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::
constructor_emptyMap (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_declaredMethodMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_declaredMethodMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::modifier_insertFakeKey (C_CompilerEx & inCompiler,
                         const GGS_string & inKey,
                         const GGS_location & inHelperMessageErrorLocation,
                         const GGS_string & inHelperMessage
                         COMMA_LOCATION_ARGS) {
  e_declaredMethodMap info  ;
  internal_insertFakeKey (inCompiler,
                          (void *) & info,
                          inKey,
                          inHelperMessageErrorLocation,
                          inHelperMessage
                          COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_declaredMethodMap::
operator_isEqual (const GGS_declaredMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_declaredMethodMap::
operator_isNotEqual (const GGS_declaredMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
insertElement (C_CompilerEx & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_declaredMethodMap info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
searchElement (C_CompilerEx & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inLexique, inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_declaredMethodMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
modifier_insertKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::
constructor_mapWithMapToOverride (C_CompilerEx & /* inLexique */,
                                  const GGS_declaredMethodMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_declaredMethodMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::
reader_overriddenMap (C_CompilerEx & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_declaredMethodMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_declaredMethodMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @declaredMethodMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_declaredMethodMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_declaredMethodMap * p = NULL ;
    macroMyNew (p, GGS_declaredMethodMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_declaredMethodMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_declaredMethodMap * p = dynamic_cast <const GGS_declaredMethodMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_declaredMethodMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_declaredMethodMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_declaredMethodMap ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::constructor_mapWithKeyAndValue (C_CompilerEx & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_declaredMethodMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "buildLocalVariableMapAndSignature"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildLocalVariableMapAndSignature (C_CompilerEx & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_formalParameterListAST   var_cas_inRoutineSignatureAST,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_formalParameterListForGeneration  & var_cas_outRoutineSignature
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildLocalVariableMapAndSignature at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outRoutineSignature = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
  {
    GGS_formalParameterListAST::cEnumerator enumerator_32589 (var_cas_inRoutineSignatureAST, true) ;
    const GGS_formalParameterListAST::cElement * operand_32589 = NULL ;
    while (((operand_32589 = enumerator_32589.nextObject ()))) {
      macroValidPointer (operand_32589) ;
      const GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_32589->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (774)) ;
      GGS_string var_cas_formalArgumentCppName ;
      switch (operand_32589->mFormalArgumentPassingMode.enumValue ()) {
      case GGS_formalArgumentPassingModeAST::enum_argumentIn:
        {
        var_cas_formalArgumentCppName = (GGS_string ("inArgument_")).operator_concat (operand_32589->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (778)).reader_identifierRepresentation ()) ;
        const GGS_bool cond_33075 = operand_32589->mIsUnused ;
        if (cond_33075.isBuiltAndTrue ()) {
          var_cas_ioVariableMap.modifier_insertInputFormalArgumentDeclaredAsUnused (inLexique, operand_32589->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (780)) ;
        }else if (cond_33075.isBuiltAndFalse ()) {
          var_cas_ioVariableMap.modifier_insertInputFormalArgument (inLexique, operand_32589->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (782)) ;
        }
        }
        break ;
      case GGS_formalArgumentPassingModeAST::enum_argumentOut:
        {
        var_cas_formalArgumentCppName = (GGS_string ("outArgument_")).operator_concat (operand_32589->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (785)).reader_identifierRepresentation ()) ;
        var_cas_ioVariableMap.modifier_insertOutputFormalArgument (inLexique, operand_32589->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (786)) ;
        }
        break ;
      case GGS_formalArgumentPassingModeAST::enum_argumentInOut:
        {
        var_cas_formalArgumentCppName = (GGS_string ("ioArgument_")).operator_concat (operand_32589->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (788)).reader_identifierRepresentation ()) ;
        const GGS_bool cond_33786 = operand_32589->mIsUnused ;
        if (cond_33786.isBuiltAndTrue ()) {
          var_cas_ioVariableMap.modifier_insertInputOutputFormalArgumentDeclaredAsUnused (inLexique, operand_32589->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (790)) ;
        }else if (cond_33786.isBuiltAndFalse ()) {
          var_cas_ioVariableMap.modifier_insertInputOutputFormalArgument (inLexique, operand_32589->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (792)) ;
        }
        }
        break ;
      case GGS_formalArgumentPassingModeAST::enum_argumentConstantIn:
        {
        var_cas_formalArgumentCppName = (GGS_string ("constinArgument_")).operator_concat (operand_32589->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (795)).reader_identifierRepresentation ()) ;
        const GGS_bool cond_34260 = operand_32589->mIsUnused ;
        if (cond_34260.isBuiltAndTrue ()) {
          var_cas_ioVariableMap.modifier_insertConstantInputFormalArgumentDeclaredAsUnused (inLexique, operand_32589->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (797)) ;
        }else if (cond_34260.isBuiltAndFalse ()) {
          var_cas_ioVariableMap.modifier_insertConstantInputFormalArgument (inLexique, operand_32589->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (799)) ;
        }
        }
        break ;
      case GGS_formalArgumentPassingModeAST::kNotBuilt:
        break ;
      }
      var_cas_outRoutineSignature.addAssign_operation (operand_32589->mFormalArgumentPassingMode, var_cas_type, operand_32589->mFormalArgumentName, var_cas_formalArgumentCppName) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildLocalVariableMapAndSignature\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "analyzeRoutineBody"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeRoutineBody (C_CompilerEx & inLexique,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                const GGS_formalParameterListAST   var_cas_inRoutineSignatureAST,
                                const GGS_localConstantList   var_cas_inLocalConstantList,
                                const GGS_typedAttributeList   var_cas_inTypedAttributeList,
                                const GGS_string  var_cas_inAttributeVariableNamePrefix,
                                const GGS_semanticInstructionListAST   var_cas_inInstructionList,
                                const GGS_location   var_cas_inEndOfMethodLocation,
                                GGS_semanticInstructionListForGeneration  & var_cas_outSemanticInstructionListForGeneration,
                                GGS_formalParameterListForGeneration  & var_cas_outRoutineSignature
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeRoutineBody at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_variableMap  var_cas_variableMap = GGS_variableMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (819)) ;
  {
    GGS_localConstantList::cEnumerator enumerator_35215 (var_cas_inLocalConstantList, true) ;
    const GGS_localConstantList::cElement * operand_35215 = NULL ;
    while (((operand_35215 = enumerator_35215.nextObject ()))) {
      macroValidPointer (operand_35215) ;
      const GGS_bool cond_35347 = operand_35215->mNoWarningIfUnused ;
      if (cond_35347.isBuiltAndTrue ()) {
        var_cas_variableMap.modifier_insertUsedLocalConstant (inLexique, operand_35215->mName, operand_35215->mType, operand_35215->mCppName, function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (823)) COMMA_SOURCE_FILE_AT_LINE (823)) ;
      }else if (cond_35347.isBuiltAndFalse ()) {
        var_cas_variableMap.modifier_insertLocalConstant (inLexique, operand_35215->mName, operand_35215->mType, operand_35215->mCppName, function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (825)) COMMA_SOURCE_FILE_AT_LINE (825)) ;
      }
    }
  }
  {
    GGS_typedAttributeList::cEnumerator enumerator_35523 (var_cas_inTypedAttributeList, true) ;
    const GGS_typedAttributeList::cElement * operand_35523 = NULL ;
    while (((operand_35523 = enumerator_35523.nextObject ()))) {
      macroValidPointer (operand_35523) ;
      var_cas_variableMap.modifier_insertNonMutableAttribute (inLexique, operand_35523->mAttributeName, operand_35523->mAttributeTypeProxy, ((var_cas_inAttributeVariableNamePrefix).operator_concat (GGS_string ("mAttribute_"))).operator_concat (operand_35523->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (833)).reader_identifierRepresentation ()), function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (834)) COMMA_SOURCE_FILE_AT_LINE (830)) ;
    }
  }
  ::routine_buildLocalVariableMapAndSignature (inLexique,  var_cas_inAnalysisContext.mSemanticContext,  var_cas_inRoutineSignatureAST,  var_cas_variableMap,  var_cas_outRoutineSignature COMMA_SOURCE_FILE_AT_LINE (838)) ;
  var_cas_outSemanticInstructionListForGeneration = GGS_semanticInstructionListForGeneration ::constructor_emptyList () ;
  {
    GGS_semanticInstructionListAST::cEnumerator enumerator_36107 (var_cas_inInstructionList, true) ;
    const GGS_semanticInstructionListAST::cElement * operand_36107 = NULL ;
    while (((operand_36107 = enumerator_36107.nextObject ()))) {
      macroValidPointer (operand_36107) ;
      { typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction method = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (operand_36107->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_36107->mInstruction (HERE), var_cas_inAnalysisContext, var_cas_outSemanticInstructionListForGeneration, var_cas_variableMap COMMA_SOURCE_FILE_AT_LINE (847)) ;
        }
      }
    }
  }
  if (var_cas_variableMap.isBuilt ()) {
    var_cas_variableMap (HERE)->method_checkAutomatonStates (inLexique, var_cas_inEndOfMethodLocation COMMA_SOURCE_FILE_AT_LINE (854)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeRoutineBody\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@externFunctionDeclarationAST.performSemanticAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externFunctionDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_externFunctionDeclarationAST * operand_36504,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_36504 != NULL) {
    GGS_formalInputParameterListForGeneration  var_cas_formalArgumentList = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
    {
      GGS_formalInputParameterListAST::cEnumerator enumerator_36782 (operand_36504->mFormalArgumentList, true) ;
      const GGS_formalInputParameterListAST::cElement * operand_36782 = NULL ;
      while (((operand_36782 = enumerator_36782.nextObject ()))) {
        macroValidPointer (operand_36782) ;
        var_cas_formalArgumentList.addAssign_operation (GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_36782->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (867)), operand_36782->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (868)), operand_36782->mFormalArgumentName, operand_36782->mIsUnused) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_functionPrototypeDeclarationForGeneration ::constructor_new (inLexique, operand_36504->mFunctionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (874)), var_cas_formalArgumentList, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_36504->mResultTypeName COMMA_SOURCE_FILE_AT_LINE (876)) COMMA_SOURCE_FILE_AT_LINE (873)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@externRoutineDeclarationAST.performSemanticAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externRoutineDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_externRoutineDeclarationAST * operand_37412,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_37412 != NULL) {
    GGS_formalParameterListForGeneration  var_cas_formalArgumentList = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    {
      GGS_formalParameterListAST::cEnumerator enumerator_37685 (operand_37412->mFormalArgumentList, true) ;
      const GGS_formalParameterListAST::cElement * operand_37685 = NULL ;
      while (((operand_37685 = enumerator_37685.nextObject ()))) {
        macroValidPointer (operand_37685) ;
        var_cas_formalArgumentList.addAssign_operation (operand_37685->mFormalArgumentPassingMode, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_37685->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (893)), operand_37685->mFormalArgumentName, operand_37685->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (895))) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_routinePrototypeDeclarationForGeneration ::constructor_new (inLexique, operand_37412->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (899)), var_cas_formalArgumentList COMMA_SOURCE_FILE_AT_LINE (898)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@routineDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__routineDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_routineDeclarationAST * operand_38240,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_38240 != NULL) {
    GGS_formalParameterListForGeneration  var_cas_formalArgumentList = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (919)), GGS_string ("")) ;
    ::routine_analyzeRoutineBody (inLexique,  var_cas_analysisContext,  operand_38240->mFormalArgumentList,  GGS_localConstantList ::constructor_emptyList (),  GGS_typedAttributeList ::constructor_emptyList (),  GGS_string (""),  operand_38240->mRoutineInstructionList,  operand_38240->mEndOfRoutineInstructionList,  var_cas_instructionList,  var_cas_formalArgumentList COMMA_SOURCE_FILE_AT_LINE (922)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_routineImplementationForGeneration ::constructor_new (inLexique, operand_38240->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (935)), var_cas_formalArgumentList, var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (934)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@classDeclarationAST.performSemanticAnalysis'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__classDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_classDeclarationAST * operand_39286,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_39286 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_39286->mClassTypeName COMMA_SOURCE_FILE_AT_LINE (951)) ;
    GGS_unifiedTypeMapProxy  var_cas_superClassProxy ;
    GGS_typedAttributeList  var_cas_allAttributeList ;
    GGS_instanceMethodMap  var_cas_inheritedInstanceMethodMap ;
    const GGS_bool cond_40652 = (operand_39286->mSuperClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (958))).operator_isEqual (GGS_string ("")) ;
    if (cond_40652.isBuiltAndTrue ()) {
      var_cas_superClassProxy = GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (959)) ;
      var_cas_allAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
      var_cas_inheritedInstanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (961)) ;
      GGS_bool var_cas_generatedInSeparateFileFeature = GGS_bool (false) ;
      const GGS_bool cond_40640 = (operand_39286->mClassFeatureList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_40640.isBuiltAndTrue ()) {
        {
          GGS_lstringlist::cEnumerator enumerator_40237 (operand_39286->mClassFeatureList, true) ;
          const GGS_lstringlist::cElement * operand_40237 = NULL ;
          while (((operand_40237 = enumerator_40237.nextObject ()))) {
            macroValidPointer (operand_40237) ;
            const GGS_bool cond_40509 = (operand_40237->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (965))).operator_isEqual (GGS_string ("generatedInSeparateFile")) ;
            if (cond_40509.isBuiltAndTrue ()) {
              const GGS_bool cond_40440 = var_cas_generatedInSeparateFileFeature ;
              if (cond_40440.isBuiltAndTrue ()) {
                operand_40237->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'generatedInSeparateFile' is already named") COMMA_SOURCE_FILE_AT_LINE (968)) ;
              }
              var_cas_generatedInSeparateFileFeature = GGS_bool (true) ;
            }else if (cond_40509.isBuiltAndFalse ()) {
              operand_40237->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'generatedInSeparateFile' feature is allowed here") COMMA_SOURCE_FILE_AT_LINE (972)) ;
            }
          }
        }
      }
    }else if (cond_40652.isBuiltAndFalse ()) {
      var_cas_superClassProxy = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_39286->mSuperClassName COMMA_SOURCE_FILE_AT_LINE (976)) ;
      var_cas_allAttributeList = var_cas_superClassProxy.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (977)) ;
      var_cas_inheritedInstanceMethodMap = var_cas_superClassProxy.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (978)) ;
      const GGS_bool cond_41077 = (operand_39286->mClassFeatureList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_41077.isBuiltAndTrue ()) {
        {
          GGS_lstringlist::cEnumerator enumerator_40971 (operand_39286->mClassFeatureList, true) ;
          const GGS_lstringlist::cElement * operand_40971 = NULL ;
          while (((operand_40971 = enumerator_40971.nextObject ()))) {
            macroValidPointer (operand_40971) ;
            operand_40971->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a class that has a super may not have any feature") COMMA_SOURCE_FILE_AT_LINE (982)) ;
          }
        }
      }
    }
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (987)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_41245 (operand_39286->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_41245 = NULL ;
      while (((operand_41245 = enumerator_41245.nextObject ()))) {
        macroValidPointer (operand_41245) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_41245->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (989)) ;
        GGS_bool var_cas_hasSetter = GGS_bool (false) ;
        GGS_bool var_cas_hasGetter = GGS_bool (true) ;
        {
          GGS_lstringlist::cEnumerator enumerator_41424 (operand_41245->mFeatureList, true) ;
          const GGS_lstringlist::cElement * operand_41424 = NULL ;
          while (((operand_41424 = enumerator_41424.nextObject ()))) {
            macroValidPointer (operand_41424) ;
            const GGS_bool cond_41619 = (operand_41424->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (993))).operator_isEqual (GGS_string ("setter")) ;
            if (cond_41619.isBuiltAndTrue ()) {
              const GGS_bool cond_41574 = var_cas_hasSetter ;
              if (cond_41574.isBuiltAndTrue ()) {
                operand_41424->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'setter' feature is already named") COMMA_SOURCE_FILE_AT_LINE (996)) ;
              }
              var_cas_hasSetter = GGS_bool (true) ;
            }else if (cond_41619.isBuiltAndFalse ()) {
              const GGS_bool cond_41810 = (operand_41424->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (998))).operator_isEqual (GGS_string ("nogetter")) ;
              if (cond_41810.isBuiltAndTrue ()) {
                const GGS_bool cond_41765 = (var_cas_hasGetter).operator_not () ;
                if (cond_41765.isBuiltAndTrue ()) {
                  operand_41424->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'nogetter' feature is already named") COMMA_SOURCE_FILE_AT_LINE (1001)) ;
                }
                var_cas_hasGetter = GGS_bool (false) ;
              }else if (cond_41810.isBuiltAndFalse ()) {
                operand_41424->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'setter' or 'nogetter' are allowed here") COMMA_SOURCE_FILE_AT_LINE (1005)) ;
              }
            }
          }
        }
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_41245->mAttributeName, var_cas_hasSetter, var_cas_hasGetter) ;
        var_cas_allAttributeList.addAssign_operation (var_cas_t, operand_41245->mAttributeName, var_cas_hasSetter, var_cas_hasGetter) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_41245->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (1019)) ;
      }
    }
    GGS_declaredMethodMap  var_cas_classMethodMap = GGS_declaredMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1022)) ;
    {
      GGS_abstractMethodDefinitionListAST::cEnumerator enumerator_42310 (operand_39286->mAbstractMethodList, true) ;
      const GGS_abstractMethodDefinitionListAST::cElement * operand_42310 = NULL ;
      while (((operand_42310 = enumerator_42310.nextObject ()))) {
        macroValidPointer (operand_42310) ;
        var_cas_classMethodMap.modifier_insertKey (inLexique, operand_42310->mMethodName COMMA_SOURCE_FILE_AT_LINE (1024)) ;
      }
    }
    {
      GGS_methodDefinitionListAST::cEnumerator enumerator_42398 (operand_39286->mMethodList, true) ;
      const GGS_methodDefinitionListAST::cElement * operand_42398 = NULL ;
      while (((operand_42398 = enumerator_42398.nextObject ()))) {
        macroValidPointer (operand_42398) ;
        var_cas_classMethodMap.modifier_insertKey (inLexique, operand_42398->mMethodName COMMA_SOURCE_FILE_AT_LINE (1027)) ;
      }
    }
    GGS_abstractMethodDefinitionListForGeneration  var_cas_abstractMethodList = GGS_abstractMethodDefinitionListForGeneration ::constructor_emptyList () ;
    {
      GGS_abstractMethodDefinitionListAST::cEnumerator enumerator_42597 (operand_39286->mAbstractMethodList, true) ;
      const GGS_abstractMethodDefinitionListAST::cElement * operand_42597 = NULL ;
      while (((operand_42597 = enumerator_42597.nextObject ()))) {
        macroValidPointer (operand_42597) ;
        const GGS_bool cond_42783 = (operand_39286->mIsAbstract).operator_not () ;
        if (cond_42783.isBuiltAndTrue ()) {
          operand_42597->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a concrete class cannot declare an abstract method") COMMA_SOURCE_FILE_AT_LINE (1035)) ;
        }
        GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
        {
          GGS_formalParameterListAST::cEnumerator enumerator_42928 (operand_42597->mSignature, true) ;
          const GGS_formalParameterListAST::cElement * operand_42928 = NULL ;
          while (((operand_42928 = enumerator_42928.nextObject ()))) {
            macroValidPointer (operand_42928) ;
            var_cas_formalParameterListForGeneration.addAssign_operation (operand_42928->mFormalArgumentPassingMode, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_42928->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (1041)), operand_42928->mFormalArgumentName, operand_42928->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1043))) ;
          }
        }
        const GGS_bool cond_43667 = operand_42597->mIsOverriding ;
        if (cond_43667.isBuiltAndTrue ()) {
          GGS_formalParameterSignature  var_cas_inheritedSignature ;
          GGS_location  var_cas_inheritedDeclarationLocation ;
          GGS_bool automatic_var_43479_0 ;
          GGS_bool automatic_var_43479_1 ;
          GGS_methodQualifier automatic_var_43479_2 ;
          if (var_cas_inheritedInstanceMethodMap.isBuilt ()) {
            var_cas_inheritedInstanceMethodMap (HERE)->method_searchInheritedKey (inLexique, operand_42597->mMethodName, automatic_var_43479_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_43479_1, automatic_var_43479_2 COMMA_SOURCE_FILE_AT_LINE (1050)) ;
          }
          ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_42597->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1053)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (1051)) ;
        }else if (cond_43667.isBuiltAndFalse ()) {
          const GGS_bool cond_43850 = var_cas_inheritedInstanceMethodMap.reader_hasKey (operand_42597->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1057))) ;
          if (cond_43850.isBuiltAndTrue ()) {
            operand_42597->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this method cannot be declared as abstract, it is already declared in super class") COMMA_SOURCE_FILE_AT_LINE (1059)) ;
          }
        }
        var_cas_abstractMethodList.addAssign_operation (operand_42597->mIsOverriding, operand_42597->mMethodName, var_cas_formalParameterListForGeneration) ;
      }
    }
    GGS_methodDefinitionListForGeneration  var_cas_methodList = GGS_methodDefinitionListForGeneration ::constructor_emptyList () ;
    GGS_stringset  var_cas_definedMethodSet = GGS_stringset ::constructor_emptySet () ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("this")) ;
    {
      GGS_methodDefinitionListAST::cEnumerator enumerator_44228 (operand_39286->mMethodList, true) ;
      const GGS_methodDefinitionListAST::cElement * operand_44228 = NULL ;
      while (((operand_44228 = enumerator_44228.nextObject ()))) {
        macroValidPointer (operand_44228) ;
        GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
        GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
        ::routine_analyzeRoutineBody (inLexique,  var_cas_analysisContext,  operand_44228->mSignature,  GGS_localConstantList ::constructor_emptyList (),  var_cas_allAttributeList,  GGS_string (""),  operand_44228->mInstructionList,  operand_44228->mEndOfMethodLocation,  var_cas_semanticInstructionListForGeneration,  var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1075)) ;
        const GGS_bool cond_45367 = operand_44228->mIsOverriding ;
        if (cond_45367.isBuiltAndTrue ()) {
          GGS_formalParameterSignature  var_cas_inheritedSignature ;
          GGS_location  var_cas_inheritedDeclarationLocation ;
          GGS_bool var_cas_inheritedIsCategory ;
          GGS_bool automatic_var_45015_0 ;
          GGS_methodQualifier automatic_var_45015_1 ;
          if (var_cas_inheritedInstanceMethodMap.isBuilt ()) {
            var_cas_inheritedInstanceMethodMap (HERE)->method_searchInheritedKey (inLexique, operand_44228->mMethodName, var_cas_inheritedIsCategory, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_45015_0, automatic_var_45015_1 COMMA_SOURCE_FILE_AT_LINE (1091)) ;
          }
          ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_44228->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1094)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (1092)) ;
          const GGS_bool cond_45352 = var_cas_inheritedIsCategory ;
          if (cond_45352.isBuiltAndTrue ()) {
            operand_44228->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this method is declared in class, but overriden method is declared as multi-method") COMMA_SOURCE_FILE_AT_LINE (1100)) ;
          }
        }else if (cond_45367.isBuiltAndFalse ()) {
          const GGS_bool cond_45556 = var_cas_inheritedInstanceMethodMap.reader_hasKey (operand_44228->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1101))) ;
          if (cond_45556.isBuiltAndTrue ()) {
            operand_44228->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this method should be declared as overridding, as it is already declared in super class") COMMA_SOURCE_FILE_AT_LINE (1103)) ;
          }
        }
        var_cas_definedMethodSet.addAssign_operation (operand_44228->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1105))) ;
        var_cas_methodList.addAssign_operation (operand_44228->mIsOverriding, operand_44228->mMethodName, var_cas_formalParameterListForGeneration, var_cas_semanticInstructionListForGeneration) ;
      }
    }
    const GGS_bool cond_46301 = (operand_39286->mIsAbstract).operator_not () ;
    if (cond_46301.isBuiltAndTrue ()) {
      {
        GGS_instanceMethodMap::cEnumerator enumerator_45899 (var_cas_inheritedInstanceMethodMap, true) ;
        const GGS_instanceMethodMap::cElement * operand_45899 = NULL ;
        while (((operand_45899 = enumerator_45899.nextObject ()))) {
          macroValidPointer (operand_45899) ;
          const GGS_bool cond_46272 = ((operand_45899->mInfo.mQualifier).operator_isEqual (GGS_methodQualifier::constructor_isAbstract (inLexique COMMA_SOURCE_FILE_AT_LINE (1116)))).operator_or ((operand_45899->mInfo.mQualifier).operator_isEqual (GGS_methodQualifier::constructor_isOverridingAbstract (inLexique COMMA_SOURCE_FILE_AT_LINE (1116)))) ;
          if (cond_46272.isBuiltAndTrue ()) {
            const GGS_bool cond_46253 = (var_cas_definedMethodSet.reader_hasKey (operand_45899->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1117)))).operator_not () ;
            if (cond_46253.isBuiltAndTrue ()) {
              operand_45899->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (operand_39286->mClassTypeName)).operator_concat (GGS_string ("' class is declared concrete, but the '"))).operator_concat (operand_45899->mKey)).operator_concat (GGS_string ("' method declared in a super class is not implemented")) COMMA_SOURCE_FILE_AT_LINE (1119)) ;
            }
          }
        }
      }
    }
    GGS_string var_cas_sortString = var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1124)) ;
    GGS_unifiedTypeMapProxy  var_cas_t = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1125)) ;
    GGS_uint _variant_46615 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1126)) ;
    GGS_bool _condition_46615 (_variant_46615.isBuilt (), true) ;
    while (_condition_46615.isBuiltAndTrue ()) {
      _condition_46615 = (var_cas_t.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1127))).operator_not () ;
      if (_condition_46615.isBuiltAndTrue ()) {
        if (_variant_46615.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1130)) ;
          _condition_46615 = GGS_bool (false) ;
        }else{
          _variant_46615.decrement_operation (inLexique COMMA_HERE) ;
          var_cas_sortString = ((var_cas_t.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1128))).operator_concat (GGS_string ("."))).operator_concat (var_cas_sortString) ;
          var_cas_t = var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1129)) ;
        }
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_classTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_39286->mClassTypeName COMMA_SOURCE_FILE_AT_LINE (1133)), operand_39286->mIsAbstract, operand_39286->mClassTypeName, var_cas_superClassProxy, var_cas_allAttributeList, var_cas_typedAttributeList, var_cas_abstractMethodList, var_cas_methodList, var_cas_selfType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1141)), var_cas_selfType.reader_mGenerateHeaderInSeparateFile (inLexique COMMA_SOURCE_FILE_AT_LINE (1142)) COMMA_SOURCE_FILE_AT_LINE (1132)), var_cas_sortString) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "analyzeFunctionBody"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeFunctionBody (C_CompilerEx & inLexique,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                const GGS_formalInputParameterListAST   var_cas_inFunctionSignature,
                                const GGS_typedAttributeList   var_cas_inTypedAttributeList,
                                const GGS_string  var_cas_inAttributeVariableNamePrefix,
                                const GGS_semanticInstructionListAST   var_cas_inInstructionList,
                                const GGS_lstring   var_cas_inReturnVariableName,
                                const GGS_lstring   var_cas_inResultTypeName,
                                const GGS_location   var_cas_inEndOfFunctionLocation,
                                GGS_formalInputParameterListForGeneration  & var_cas_outSignatureForGeneration,
                                GGS_unifiedTypeMapProxy  & var_cas_outReturnedType,
                                GGS_string & var_cas_outResultVariableCppName,
                                GGS_semanticInstructionListForGeneration  & var_cas_outSemanticInstructionListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeFunctionBody at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_variableMap  var_cas_variableMap = GGS_variableMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1164)) ;
  {
    GGS_typedAttributeList::cEnumerator enumerator_47815 (var_cas_inTypedAttributeList, true) ;
    const GGS_typedAttributeList::cElement * operand_47815 = NULL ;
    while (((operand_47815 = enumerator_47815.nextObject ()))) {
      macroValidPointer (operand_47815) ;
      var_cas_variableMap.modifier_insertNonMutableAttribute (inLexique, operand_47815->mAttributeName, operand_47815->mAttributeTypeProxy, ((var_cas_inAttributeVariableNamePrefix).operator_concat (GGS_string ("mAttribute_"))).operator_concat (operand_47815->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1170)).reader_identifierRepresentation ()), function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (1171)) COMMA_SOURCE_FILE_AT_LINE (1167)) ;
    }
  }
  var_cas_outSignatureForGeneration = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
  {
    GGS_formalInputParameterListAST::cEnumerator enumerator_48207 (var_cas_inFunctionSignature, true) ;
    const GGS_formalInputParameterListAST::cElement * operand_48207 = NULL ;
    while (((operand_48207 = enumerator_48207.nextObject ()))) {
      macroValidPointer (operand_48207) ;
      const GGS_unifiedTypeMapProxy  var_cas_parameterType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, operand_48207->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (1177)) ;
      const GGS_bool cond_48909 = operand_48207->mIsConstant ;
      if (cond_48909.isBuiltAndTrue ()) {
        const GGS_string var_cas_cppName = (GGS_string ("constinArgument_")).operator_concat (operand_48207->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1179)).reader_identifierRepresentation ()) ;
        var_cas_outSignatureForGeneration.addAssign_operation (var_cas_parameterType, var_cas_cppName, operand_48207->mFormalArgumentName, operand_48207->mIsUnused) ;
        const GGS_bool cond_48771 = operand_48207->mIsUnused ;
        if (cond_48771.isBuiltAndTrue ()) {
          var_cas_variableMap.modifier_insertConstantInputFormalArgumentDeclaredAsUnused (inLexique, operand_48207->mFormalArgumentName, var_cas_parameterType, var_cas_cppName, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (1187)) ;
        }else if (cond_48771.isBuiltAndFalse ()) {
          var_cas_variableMap.modifier_insertConstantInputFormalArgument (inLexique, operand_48207->mFormalArgumentName, var_cas_parameterType, var_cas_cppName, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (1189)) ;
        }
      }else if (cond_48909.isBuiltAndFalse ()) {
        const GGS_string var_cas_cppName = (GGS_string ("inArgument_")).operator_concat (operand_48207->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1192)).reader_identifierRepresentation ()) ;
        var_cas_outSignatureForGeneration.addAssign_operation (var_cas_parameterType, var_cas_cppName, operand_48207->mFormalArgumentName, operand_48207->mIsUnused) ;
        const GGS_bool cond_49302 = operand_48207->mIsUnused ;
        if (cond_49302.isBuiltAndTrue ()) {
          var_cas_variableMap.modifier_insertInputFormalArgumentDeclaredAsUnused (inLexique, operand_48207->mFormalArgumentName, var_cas_parameterType, var_cas_cppName, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (1200)) ;
        }else if (cond_49302.isBuiltAndFalse ()) {
          var_cas_variableMap.modifier_insertInputFormalArgument (inLexique, operand_48207->mFormalArgumentName, var_cas_parameterType, var_cas_cppName, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (1202)) ;
        }
      }
    }
  }
  var_cas_outReturnedType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, var_cas_inResultTypeName COMMA_SOURCE_FILE_AT_LINE (1207)) ;
  var_cas_outResultVariableCppName = (GGS_string ("result_")).operator_concat (var_cas_inResultTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1208)).reader_identifierRepresentation ()) ;
  var_cas_variableMap.modifier_insertOutputFormalArgument (inLexique, var_cas_inReturnVariableName, var_cas_outReturnedType, var_cas_outResultVariableCppName, var_cas_outResultVariableCppName COMMA_SOURCE_FILE_AT_LINE (1209)) ;
  var_cas_outSemanticInstructionListForGeneration = GGS_semanticInstructionListForGeneration ::constructor_emptyList () ;
  {
    GGS_semanticInstructionListAST::cEnumerator enumerator_49991 (var_cas_inInstructionList, true) ;
    const GGS_semanticInstructionListAST::cElement * operand_49991 = NULL ;
    while (((operand_49991 = enumerator_49991.nextObject ()))) {
      macroValidPointer (operand_49991) ;
      { typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction method = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (operand_49991->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_49991->mInstruction (HERE), var_cas_inAnalysisContext, var_cas_outSemanticInstructionListForGeneration, var_cas_variableMap COMMA_SOURCE_FILE_AT_LINE (1213)) ;
        }
      }
    }
  }
  if (var_cas_variableMap.isBuilt ()) {
    var_cas_variableMap (HERE)->method_checkAutomatonStates (inLexique, var_cas_inEndOfFunctionLocation COMMA_SOURCE_FILE_AT_LINE (1220)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeFunctionBody\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@functionDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__functionDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_functionDeclarationAST * operand_50384,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_50384 != NULL) {
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    GGS_formalInputParameterListForGeneration  var_cas_formalInputParameterList ;
    GGS_unifiedTypeMapProxy  var_cas_returnType ;
    GGS_string var_cas_resultVariableCppName ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (1238)), GGS_string ("")) ;
    ::routine_analyzeFunctionBody (inLexique,  var_cas_analysisContext,  operand_50384->mFormalArgumentList,  GGS_typedAttributeList ::constructor_emptyList (),  GGS_string (""),  operand_50384->mFunctionInstructionList,  operand_50384->mResultVariableName,  operand_50384->mResultTypeName,  operand_50384->mEndOfFunctionInstructionList,  var_cas_formalInputParameterList,  var_cas_returnType,  var_cas_resultVariableCppName,  var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1241)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_functionImplementationForGeneration ::constructor_new (inLexique, operand_50384->mFunctionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1257)), var_cas_formalInputParameterList, var_cas_returnType, var_cas_resultVariableCppName, var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1256)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@onceFunctionDeclarationAST.performSemanticAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__onceFunctionDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_onceFunctionDeclarationAST * operand_51689,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_51689 != NULL) {
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    GGS_unifiedTypeMapProxy  var_cas_returnType ;
    GGS_string var_cas_resultVariableCppName ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (1281)), GGS_string ("")) ;
    GGS_formalInputParameterListForGeneration  automatic_var_52514_0 ;
    ::routine_analyzeFunctionBody (inLexique,  var_cas_analysisContext,  GGS_formalInputParameterListAST ::constructor_emptyList (),  GGS_typedAttributeList ::constructor_emptyList (),  GGS_string (""),  operand_51689->mFunctionInstructionList,  operand_51689->mResultVariableName,  operand_51689->mResultTypeName,  operand_51689->mEndOfFunctionInstructionList,  automatic_var_52514_0,  var_cas_returnType,  var_cas_resultVariableCppName,  var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1284)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_onceFunctionDeclarationForGeneration ::constructor_new (inLexique, operand_51689->mFunctionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1300)), var_cas_returnType, var_cas_resultVariableCppName, var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1299)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@filewrapperDeclarationAST.performSemanticAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__filewrapperDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_filewrapperDeclarationAST * operand_53206,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_53206 != NULL) {
    GGS_wrapperFileMap  var_cas_wrapperFileMap ;
    GGS_wrapperDirectoryMap  var_cas_wrapperDirectoryMap ;
    GGS_lstring  automatic_var_53623_0 ;
    GGS_lstringlist  automatic_var_53623_1 ;
    GGS_filewrapperTemplateMap  automatic_var_53623_2 ;
    if (var_cas_inSemanticContext.mFilewrapperMap.isBuilt ()) {
      var_cas_inSemanticContext.mFilewrapperMap (HERE)->method_searchKey (inLexique, operand_53206->mFilewrapperName, automatic_var_53623_0, automatic_var_53623_1, var_cas_wrapperFileMap, var_cas_wrapperDirectoryMap, automatic_var_53623_2 COMMA_SOURCE_FILE_AT_LINE (1323)) ;
    }
    GGS_string var_cas_absoluteSourcePath ;
    const GGS_bool cond_53807 = (operand_53206->mFilewrapperPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1333)).reader_firstCharacterOrNul ()).operator_isEqual (GGS_char (TO_UNICODE ('/'))) ;
    if (cond_53807.isBuiltAndTrue ()) {
      var_cas_absoluteSourcePath = operand_53206->mFilewrapperPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1334)) ;
    }else if (cond_53807.isBuiltAndFalse ()) {
      var_cas_absoluteSourcePath = ((var_cas_inSemanticContext.reader_mSourceFileAbsolutePath (inLexique COMMA_SOURCE_FILE_AT_LINE (1336)).reader_stringByDeletingLastPathComponent ()).operator_concat (GGS_string ("/"))).operator_concat (operand_53206->mFilewrapperPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1336))) ;
    }
    const GGS_bool cond_54108 = (var_cas_absoluteSourcePath.reader_directoryExists ()).operator_not () ;
    if (cond_54108.isBuiltAndTrue ()) {
      operand_53206->mFilewrapperPath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The '")).operator_concat (var_cas_absoluteSourcePath)).operator_concat (GGS_string ("' directory does not exist")) COMMA_SOURCE_FILE_AT_LINE (1340)) ;
    }else if (cond_54108.isBuiltAndFalse ()) {
      GGS_filewrapperTemplateListForGeneration  var_cas_filewrapperTemplateListForGeneration = GGS_filewrapperTemplateListForGeneration ::constructor_emptyList () ;
      {
        GGS_filewrapperTemplateListAST::cEnumerator enumerator_54276 (operand_53206->mFilewrapperTemplateList, true) ;
        const GGS_filewrapperTemplateListAST::cElement * operand_54276 = NULL ;
        while (((operand_54276 = enumerator_54276.nextObject ()))) {
          macroValidPointer (operand_54276) ;
          const GGS_bool cond_54513 = (operand_54276->mFilewrapperTemplatePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1344)).reader_firstCharacterOrNul ()).operator_isEqual (GGS_char (TO_UNICODE ('/'))) ;
          if (cond_54513.isBuiltAndTrue ()) {
            operand_54276->mFilewrapperTemplatePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the path should not begin with a '/'; it is relative to filewrapper path '")).operator_concat (var_cas_absoluteSourcePath)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1346)) ;
          }
          const GGS_string var_cas_absoluteTemplatePath = ((var_cas_absoluteSourcePath).operator_concat (GGS_string ("/"))).operator_concat (operand_54276->mFilewrapperTemplatePath) ;
          GGS_templateInstructionListAST  var_cas_resultingInstructionList ;
          const GGS_string _depExtension = GGS_string ("") ;
          const GGS_string _depPath = GGS_string ("") ;
          if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
            C_Grammar_templateGrammar::_performSourceFileParsing_ (inLexique,
                                          _depExtension.string (),
                                          _depPath.string (),
                                          NULL,
                                          GGS_lstring ::constructor_new (inLexique, var_cas_absoluteTemplatePath, operand_54276->mFilewrapperTemplatePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1350)) COMMA_SOURCE_FILE_AT_LINE (1350)),
                                          var_cas_resultingInstructionList
                                          COMMA_SOURCE_FILE_AT_LINE (1350)) ;
          }
          GGS_templateVariableMap  var_cas_templateVariableMap = GGS_templateVariableMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1352)) ;
          GGS_formalInputParameterListForGeneration  var_cas_filewrapperTemplateFormalInputParameters = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
          {
            GGS_formalTemplateInputParameterListAST::cEnumerator enumerator_55089 (operand_54276->mFilewrapperTemplateFormalInputParameters, true) ;
            const GGS_formalTemplateInputParameterListAST::cElement * operand_55089 = NULL ;
            while (((operand_55089 = enumerator_55089.nextObject ()))) {
              macroValidPointer (operand_55089) ;
              GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_55089->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (1355)) ;
              const GGS_string var_cas_cppVarName = (GGS_string ("in_")).operator_concat (operand_55089->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1356)).reader_identifierRepresentation ()) ;
              var_cas_templateVariableMap.modifier_insertKey (inLexique, operand_55089->mFormalArgumentName, var_cas_type, var_cas_cppVarName COMMA_SOURCE_FILE_AT_LINE (1357)) ;
              var_cas_filewrapperTemplateFormalInputParameters.addAssign_operation (var_cas_type, var_cas_cppVarName, operand_55089->mFormalArgumentName, GGS_bool (true)) ;
            }
          }
          GGS_templateInstructionListForGeneration  var_cas_templateInstructionListForGeneration = GGS_templateInstructionListForGeneration ::constructor_emptyList () ;
          const GGS_templateAnalysisContext var_cas_templateAnalysisContext = GGS_templateAnalysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_templateVariableMap) ;
          ::routine_templateInstructionListAnalysis (inLexique,  var_cas_templateAnalysisContext,  var_cas_resultingInstructionList,  var_cas_templateInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1367)) ;
          var_cas_filewrapperTemplateListForGeneration.addAssign_operation (operand_54276->mFilewrapperTemplateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1370)), var_cas_filewrapperTemplateFormalInputParameters, var_cas_templateInstructionListForGeneration) ;
        }
      }
      var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_filewrapperDeclarationForGeneration ::constructor_new (inLexique, operand_53206->mFilewrapperName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1377)), operand_53206->mFilewrapperPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1378)), var_cas_wrapperFileMap, var_cas_wrapperDirectoryMap, var_cas_filewrapperTemplateListForGeneration COMMA_SOURCE_FILE_AT_LINE (1376)), GGS_string ("")) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@abstractCategoryMethodAST.performSemanticAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__abstractCategoryMethodAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_abstractCategoryMethodAST * operand_56632,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_56632 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_56632->mTypeName COMMA_SOURCE_FILE_AT_LINE (1396)) ;
    const GGS_bool cond_57169 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1398))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1398))) ;
    if (cond_57169.isBuiltAndTrue ()) {
      operand_56632->mAbstractCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1399)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1400)) ;
    }else if (cond_57169.isBuiltAndFalse ()) {
      const GGS_bool cond_57341 = var_cas_selfType.reader_mIsConcrete (inLexique COMMA_SOURCE_FILE_AT_LINE (1400)) ;
      if (cond_57341.isBuiltAndTrue ()) {
        operand_56632->mAbstractCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare an abstract category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1401)))).operator_concat (GGS_string ("' is not an abstract class")) COMMA_SOURCE_FILE_AT_LINE (1402)) ;
      }
    }
    GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    {
      GGS_formalParameterListAST::cEnumerator enumerator_57512 (operand_56632->mAbstractCategoryMethodFormalParameterList, true) ;
      const GGS_formalParameterListAST::cElement * operand_57512 = NULL ;
      while (((operand_57512 = enumerator_57512.nextObject ()))) {
        macroValidPointer (operand_57512) ;
        var_cas_formalParameterListForGeneration.addAssign_operation (operand_57512->mFormalArgumentPassingMode, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_57512->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (1408)), operand_57512->mFormalArgumentName, operand_57512->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1410))) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_abstractCategoryMethodForGeneration ::constructor_new (inLexique, operand_56632->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1415)), operand_56632->mAbstractCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1416)), var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1414)), GGS_string ("~")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@categoryMethodAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__categoryMethodAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_categoryMethodAST * operand_58186,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_58186 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_58186->mTypeName COMMA_SOURCE_FILE_AT_LINE (1431)) ;
    const GGS_bool cond_58696 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1433))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1433))) ;
    if (cond_58696.isBuiltAndTrue ()) {
      operand_58186->mCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1434)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1435)) ;
    }
    GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("object")) ;
    ::routine_analyzeRoutineBody (inLexique,  var_cas_analysisContext,  operand_58186->mCategoryMethodFormalParameterList,  GGS_localConstantList ::constructor_emptyList (),  var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1449)),  GGS_string ("object->"),  operand_58186->mCategoryMethodInstructionList,  operand_58186->mEndOfMethodLocation,  var_cas_semanticInstructionListForGeneration,  var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1445)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_categoryMethodForGeneration ::constructor_new (inLexique, operand_58186->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1458)), operand_58186->mCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1459)), var_cas_formalParameterListForGeneration, var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1461)), var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1457)), GGS_string ("~")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@overridingCategoryMethodAST.performSemanticAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingCategoryMethodAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_overridingCategoryMethodAST * operand_59831,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_59831 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_59831->mTypeName COMMA_SOURCE_FILE_AT_LINE (1476)) ;
    const GGS_bool cond_60351 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1478))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1478))) ;
    if (cond_60351.isBuiltAndTrue ()) {
      operand_59831->mOverridingCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1479)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1480)) ;
    }
    GGS_string var_cas_baseTypeName = GGS_string ("") ;
    GGS_unifiedTypeMapProxy  var_cas_superType = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1483)) ;
    GGS_formalParameterSignature  var_cas_inheritedSignature = GGS_formalParameterSignature ::constructor_emptyList () ;
    GGS_location  var_cas_inheritedDeclarationLocation = GGS_location (inLexique) ;
    GGS_uint _variant_61145 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1486)) ;
    GGS_bool _condition_61145 (_variant_61145.isBuilt (), true) ;
    while (_condition_61145.isBuiltAndTrue ()) {
      _condition_61145 = ((var_cas_superType.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1487))).operator_not ()).operator_and ((var_cas_baseTypeName).operator_isEqual (GGS_string (""))) ;
      if (_condition_61145.isBuiltAndTrue ()) {
        if (_variant_61145.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1496)) ;
          _condition_61145 = GGS_bool (false) ;
        }else{
          _variant_61145.decrement_operation (inLexique COMMA_HERE) ;
          const GGS_bool cond_61092 = var_cas_superType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1488)).reader_hasKey (operand_59831->mOverridingCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1488))) ;
          if (cond_61092.isBuiltAndTrue ()) {
            GGS_methodQualifier var_cas_qualifier ;
            GGS_bool automatic_var_60966_0 ;
            GGS_bool automatic_var_60966_1 ;
            const GGS_instanceMethodMap  temp_60867 = var_cas_superType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1490)) ;
            if (temp_60867.isBuilt ()) {
              temp_60867 (HERE)->method_searchKey (inLexique, operand_59831->mOverridingCategoryMethodName, automatic_var_60966_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_60966_1, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (1490)) ;
            }
            const GGS_bool cond_61079 = (var_cas_qualifier).operator_infOrEqual (GGS_methodQualifier::constructor_isBasicFinal (inLexique COMMA_SOURCE_FILE_AT_LINE (1491))) ;
            if (cond_61079.isBuiltAndTrue ()) {
              var_cas_baseTypeName = var_cas_superType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1492)) ;
            }
          }
          var_cas_superType = var_cas_superType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1495)) ;
        }
      }
    }
    GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("object")) ;
    ::routine_analyzeRoutineBody (inLexique,  var_cas_analysisContext,  operand_59831->mOverridingCategoryMethodFormalParameterList,  GGS_localConstantList ::constructor_emptyList (),  var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1510)),  GGS_string ("object->"),  operand_59831->mOverridingCategoryMethodInstructionList,  operand_59831->mEndOfMethodLocation,  var_cas_semanticInstructionListForGeneration,  var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1506)) ;
    const GGS_bool cond_62047 = (var_cas_baseTypeName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_62047.isBuiltAndTrue ()) {
      ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_59831->mOverridingCategoryMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1521)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (1519)) ;
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_overridingCategoryMethodForGeneration ::constructor_new (inLexique, operand_59831->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1528)), var_cas_baseTypeName, operand_59831->mOverridingCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1530)), var_cas_formalParameterListForGeneration, var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1532)), var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1527)), GGS_string ("~")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@overridingAbstractCategoryMethodAST.performSemanticAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingAbstractCategoryMethodAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_overridingAbstractCategoryMethodAST * operand_62591,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & /* var_cas_ioSemanticDeclarationListForGeneration */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_62591 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_62591->mTypeName COMMA_SOURCE_FILE_AT_LINE (1547)) ;
    const GGS_bool cond_63132 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1549))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1549))) ;
    if (cond_63132.isBuiltAndTrue ()) {
      operand_62591->mOverridingCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1550)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1551)) ;
    }else if (cond_63132.isBuiltAndFalse ()) {
      const GGS_bool cond_63306 = var_cas_selfType.reader_mIsConcrete (inLexique COMMA_SOURCE_FILE_AT_LINE (1551)) ;
      if (cond_63306.isBuiltAndTrue ()) {
        operand_62591->mOverridingCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare an abstract category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1552)))).operator_concat (GGS_string ("' is not an abstract class")) COMMA_SOURCE_FILE_AT_LINE (1553)) ;
      }
    }
    GGS_string var_cas_baseTypeName = GGS_string ("") ;
    GGS_unifiedTypeMapProxy  var_cas_superType = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1556)) ;
    GGS_formalParameterSignature  var_cas_inheritedSignature = GGS_formalParameterSignature ::constructor_emptyList () ;
    GGS_location  var_cas_inheritedDeclarationLocation = GGS_location (inLexique) ;
    GGS_uint _variant_64100 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1559)) ;
    GGS_bool _condition_64100 (_variant_64100.isBuilt (), true) ;
    while (_condition_64100.isBuiltAndTrue ()) {
      _condition_64100 = ((var_cas_superType.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1560))).operator_not ()).operator_and ((var_cas_baseTypeName).operator_isEqual (GGS_string (""))) ;
      if (_condition_64100.isBuiltAndTrue ()) {
        if (_variant_64100.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1569)) ;
          _condition_64100 = GGS_bool (false) ;
        }else{
          _variant_64100.decrement_operation (inLexique COMMA_HERE) ;
          const GGS_bool cond_64047 = var_cas_superType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1561)).reader_hasKey (operand_62591->mOverridingCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1561))) ;
          if (cond_64047.isBuiltAndTrue ()) {
            GGS_methodQualifier var_cas_qualifier ;
            GGS_bool automatic_var_63921_0 ;
            GGS_bool automatic_var_63921_1 ;
            const GGS_instanceMethodMap  temp_63822 = var_cas_superType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1563)) ;
            if (temp_63822.isBuilt ()) {
              temp_63822 (HERE)->method_searchKey (inLexique, operand_62591->mOverridingCategoryMethodName, automatic_var_63921_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_63921_1, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (1563)) ;
            }
            const GGS_bool cond_64034 = (var_cas_qualifier).operator_infOrEqual (GGS_methodQualifier::constructor_isBasicFinal (inLexique COMMA_SOURCE_FILE_AT_LINE (1564))) ;
            if (cond_64034.isBuiltAndTrue ()) {
              var_cas_baseTypeName = var_cas_superType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1565)) ;
            }
          }
          var_cas_superType = var_cas_superType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1568)) ;
        }
      }
    }
    GGS_variableMap  var_cas_variableMap = GGS_variableMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1571)) ;
    GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration ;
    ::routine_buildLocalVariableMapAndSignature (inLexique,  var_cas_inSemanticContext,  operand_62591->mOverridingCategoryMethodFormalParameterList,  var_cas_variableMap,  var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1573)) ;
    const GGS_bool cond_64659 = (var_cas_baseTypeName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_64659.isBuiltAndTrue ()) {
      ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_62591->mOverridingCategoryMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1583)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (1581)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@abstractCategoryReaderAST.performSemanticAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__abstractCategoryReaderAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_abstractCategoryReaderAST * operand_64824,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_64824 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_64824->mTypeName COMMA_SOURCE_FILE_AT_LINE (1598)) ;
    const GGS_bool cond_65361 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1600))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1600))) ;
    if (cond_65361.isBuiltAndTrue ()) {
      operand_64824->mAbstractCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1601)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1602)) ;
    }else if (cond_65361.isBuiltAndFalse ()) {
      const GGS_bool cond_65533 = var_cas_selfType.reader_mIsConcrete (inLexique COMMA_SOURCE_FILE_AT_LINE (1602)) ;
      if (cond_65533.isBuiltAndTrue ()) {
        operand_64824->mAbstractCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare an abstract category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1603)))).operator_concat (GGS_string ("' is not an abstract class")) COMMA_SOURCE_FILE_AT_LINE (1604)) ;
      }
    }
    GGS_formalInputParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
    {
      GGS_formalInputParameterListAST::cEnumerator enumerator_65714 (operand_64824->mAbstractCategoryReaderFormalInputParameterList, true) ;
      const GGS_formalInputParameterListAST::cElement * operand_65714 = NULL ;
      while (((operand_65714 = enumerator_65714.nextObject ()))) {
        macroValidPointer (operand_65714) ;
        var_cas_formalParameterListForGeneration.addAssign_operation (GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_65714->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (1609)), operand_65714->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1610)), operand_65714->mFormalArgumentName, operand_65714->mIsUnused) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_abstractCategoryReaderForGeneration ::constructor_new (inLexique, operand_64824->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1617)), operand_64824->mAbstractCategoryReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1618)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_64824->mAbstractCategoryReaderReturnedTypeName COMMA_SOURCE_FILE_AT_LINE (1619)), var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1616)), GGS_string ("~")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@categoryReaderAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__categoryReaderAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_categoryReaderAST * operand_66480,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_66480 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_66480->mTypeName COMMA_SOURCE_FILE_AT_LINE (1636)) ;
    const GGS_bool cond_66991 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1638))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1638))) ;
    if (cond_66991.isBuiltAndTrue ()) {
      operand_66480->mCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1639)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1640)) ;
    }
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("object")) ;
    GGS_unifiedTypeMapProxy  var_cas_returnType ;
    GGS_string var_cas_returnVariableCppName ;
    GGS_formalInputParameterListForGeneration  var_cas_formalParameterListForGeneration ;
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    ::routine_analyzeFunctionBody (inLexique,  var_cas_analysisContext,  operand_66480->mCategoryReaderFormalInputParameterList,  var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1655)),  GGS_string ("object->"),  operand_66480->mCategoryReaderInstructionList,  operand_66480->mCategoryReaderReturnedVariableName,  operand_66480->mCategoryReaderReturnedTypeName,  operand_66480->mEndOfReaderLocation,  var_cas_formalParameterListForGeneration,  var_cas_returnType,  var_cas_returnVariableCppName,  var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1652)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_categoryReaderForGeneration ::constructor_new (inLexique, operand_66480->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1668)), operand_66480->mCategoryReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1669)), var_cas_returnType, var_cas_returnVariableCppName, var_cas_formalParameterListForGeneration, var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1673)), var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1667)), GGS_string ("~")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@overridingCategoryReaderAST.performSemanticAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingCategoryReaderAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_overridingCategoryReaderAST * operand_68323,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_68323 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_68323->mTypeName COMMA_SOURCE_FILE_AT_LINE (1688)) ;
    const GGS_bool cond_68843 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1690))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1690))) ;
    if (cond_68843.isBuiltAndTrue ()) {
      operand_68323->mOverridingCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1691)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1692)) ;
    }
    GGS_string var_cas_baseTypeName = GGS_string ("") ;
    GGS_unifiedTypeMapProxy  var_cas_superType = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1695)) ;
    GGS_unifiedTypeMapProxyList  var_cas_inheritedSignature = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
    GGS_unifiedTypeMapProxy  var_cas_inheritedReturnType = GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (1697)) ;
    GGS_location  var_cas_inheritedDeclarationLocation = GGS_location (inLexique) ;
    GGS_uint _variant_69756 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1699)) ;
    GGS_bool _condition_69756 (_variant_69756.isBuilt (), true) ;
    while (_condition_69756.isBuiltAndTrue ()) {
      _condition_69756 = ((var_cas_superType.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1700))).operator_not ()).operator_and ((var_cas_baseTypeName).operator_isEqual (GGS_string (""))) ;
      if (_condition_69756.isBuiltAndTrue ()) {
        if (_variant_69756.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1717)) ;
          _condition_69756 = GGS_bool (false) ;
        }else{
          _variant_69756.decrement_operation (inLexique COMMA_HERE) ;
          const GGS_bool cond_69703 = var_cas_superType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1701)).reader_hasKey (operand_68323->mOverridingCategoryReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1701))) ;
          if (cond_69703.isBuiltAndTrue ()) {
            GGS_methodQualifier var_cas_qualifier ;
            GGS_bool automatic_var_69577_0 ;
            GGS_bool automatic_var_69577_1 ;
            const GGS_readerMap  temp_69394 = var_cas_superType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1703)) ;
            if (temp_69394.isBuilt ()) {
              temp_69394 (HERE)->method_searchKey (inLexique, operand_68323->mOverridingCategoryReaderName, automatic_var_69577_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_69577_1, var_cas_inheritedReturnType, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (1703)) ;
            }
            const GGS_bool cond_69690 = (var_cas_qualifier).operator_infOrEqual (GGS_methodQualifier::constructor_isBasicFinal (inLexique COMMA_SOURCE_FILE_AT_LINE (1712))) ;
            if (cond_69690.isBuiltAndTrue ()) {
              var_cas_baseTypeName = var_cas_superType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1713)) ;
            }
          }
          var_cas_superType = var_cas_superType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1716)) ;
        }
      }
    }
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("object")) ;
    GGS_unifiedTypeMapProxy  var_cas_returnType ;
    GGS_string var_cas_returnVariableCppName ;
    GGS_formalInputParameterListForGeneration  var_cas_formalParameterListForGeneration ;
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    ::routine_analyzeFunctionBody (inLexique,  var_cas_analysisContext,  operand_68323->mOverridingCategoryReaderFormalInputParameterList,  var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1732)),  GGS_string ("object->"),  operand_68323->mOverridingCategoryReaderInstructionList,  operand_68323->mOverridingCategoryReaderReturnedVariableName,  operand_68323->mOverridingCategoryReaderReturnedTypeName,  operand_68323->mEndOfReaderLocation,  var_cas_formalParameterListForGeneration,  var_cas_returnType,  var_cas_returnVariableCppName,  var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1729)) ;
    const GGS_bool cond_70877 = (var_cas_baseTypeName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_70877.isBuiltAndTrue ()) {
      ::routine_checkReaderSignatures (inLexique,  var_cas_formalParameterListForGeneration,  var_cas_returnType,  operand_68323->mOverridingCategoryReaderName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1748)),  var_cas_inheritedSignature,  var_cas_inheritedReturnType,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (1745)) ;
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_overrideCategoryReaderForGeneration ::constructor_new (inLexique, operand_68323->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1756)), var_cas_baseTypeName, operand_68323->mOverridingCategoryReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1758)), var_cas_returnType, var_cas_returnVariableCppName, var_cas_formalParameterListForGeneration, var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1762)), var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1755)), GGS_string ("~")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@overridingAbstractCategoryReaderAST.performSemanticAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingAbstractCategoryReaderAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_overridingAbstractCategoryReaderAST * operand_71462,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & /* var_cas_ioSemanticDeclarationListForGeneration */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_71462 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_71462->mTypeName COMMA_SOURCE_FILE_AT_LINE (1777)) ;
    const GGS_unifiedTypeMapProxy  var_cas_returnType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_71462->mAbstractCategoryReaderReturnedTypeName COMMA_SOURCE_FILE_AT_LINE (1779)) ;
    const GGS_bool cond_72166 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1781))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1781))) ;
    if (cond_72166.isBuiltAndTrue ()) {
      operand_71462->mAbstractCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1782)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1783)) ;
    }else if (cond_72166.isBuiltAndFalse ()) {
      const GGS_bool cond_72338 = var_cas_selfType.reader_mIsConcrete (inLexique COMMA_SOURCE_FILE_AT_LINE (1783)) ;
      if (cond_72338.isBuiltAndTrue ()) {
        operand_71462->mAbstractCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare an abstract category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1784)))).operator_concat (GGS_string ("' is not an abstract class")) COMMA_SOURCE_FILE_AT_LINE (1785)) ;
      }
    }
    GGS_string var_cas_baseTypeName = GGS_string ("") ;
    GGS_unifiedTypeMapProxy  var_cas_superType = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1788)) ;
    GGS_unifiedTypeMapProxyList  var_cas_inheritedSignature = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
    GGS_unifiedTypeMapProxy  var_cas_inheritedReturnType = GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (1790)) ;
    GGS_location  var_cas_inheritedDeclarationLocation = GGS_location (inLexique) ;
    GGS_uint _variant_73240 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1792)) ;
    GGS_bool _condition_73240 (_variant_73240.isBuilt (), true) ;
    while (_condition_73240.isBuiltAndTrue ()) {
      _condition_73240 = ((var_cas_superType.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1793))).operator_not ()).operator_and ((var_cas_baseTypeName).operator_isEqual (GGS_string (""))) ;
      if (_condition_73240.isBuiltAndTrue ()) {
        if (_variant_73240.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1809)) ;
          _condition_73240 = GGS_bool (false) ;
        }else{
          _variant_73240.decrement_operation (inLexique COMMA_HERE) ;
          const GGS_bool cond_73187 = var_cas_superType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1794)).reader_hasKey (operand_71462->mAbstractCategoryReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1794))) ;
          if (cond_73187.isBuiltAndTrue ()) {
            GGS_methodQualifier var_cas_qualifier ;
            GGS_bool automatic_var_73061_0 ;
            GGS_bool automatic_var_73061_1 ;
            const GGS_readerMap  temp_72887 = var_cas_superType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1796)) ;
            if (temp_72887.isBuilt ()) {
              temp_72887 (HERE)->method_searchKey (inLexique, operand_71462->mAbstractCategoryReaderName, automatic_var_73061_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_73061_1, var_cas_inheritedReturnType, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (1796)) ;
            }
            const GGS_bool cond_73174 = (var_cas_qualifier).operator_infOrEqual (GGS_methodQualifier::constructor_isBasicFinal (inLexique COMMA_SOURCE_FILE_AT_LINE (1804))) ;
            if (cond_73174.isBuiltAndTrue ()) {
              var_cas_baseTypeName = var_cas_superType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1805)) ;
            }
          }
          var_cas_superType = var_cas_superType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1808)) ;
        }
      }
    }
    const GGS_bool cond_73931 = (var_cas_baseTypeName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_73931.isBuiltAndTrue ()) {
      GGS_formalInputParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
      {
        GGS_formalInputParameterListAST::cEnumerator enumerator_73447 (operand_71462->mAbstractCategoryReaderFormalInputParameterList, true) ;
        const GGS_formalInputParameterListAST::cElement * operand_73447 = NULL ;
        while (((operand_73447 = enumerator_73447.nextObject ()))) {
          macroValidPointer (operand_73447) ;
          var_cas_formalParameterListForGeneration.addAssign_operation (GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_73447->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (1815)), operand_73447->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1816)), operand_73447->mFormalArgumentName, operand_73447->mIsUnused) ;
        }
      }
      ::routine_checkReaderSignatures (inLexique,  var_cas_formalParameterListForGeneration,  var_cas_returnType,  operand_71462->mAbstractCategoryReaderName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1824)),  var_cas_inheritedSignature,  var_cas_inheritedReturnType,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (1821)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of function "buildPredefinedTypes"              *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_predefinedTypes function_buildPredefinedTypes (C_CompilerEx & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_buildPredefinedTypes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_predefinedTypes var_cas_outPredefinedTypes ;
  var_cas_outPredefinedTypes = GGS_predefinedTypes::constructor_new (GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("location"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1843)) COMMA_SOURCE_FILE_AT_LINE (1843)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("bool"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1844)) COMMA_SOURCE_FILE_AT_LINE (1844)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("char"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1845)) COMMA_SOURCE_FILE_AT_LINE (1845)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1846)) COMMA_SOURCE_FILE_AT_LINE (1846)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1847)) COMMA_SOURCE_FILE_AT_LINE (1847)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1848)) COMMA_SOURCE_FILE_AT_LINE (1848)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1849)) COMMA_SOURCE_FILE_AT_LINE (1849)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1850)) COMMA_SOURCE_FILE_AT_LINE (1850)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("double"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1851)) COMMA_SOURCE_FILE_AT_LINE (1851)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lbool"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1852)) COMMA_SOURCE_FILE_AT_LINE (1852)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lchar"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1853)) COMMA_SOURCE_FILE_AT_LINE (1853)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lstring"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1854)) COMMA_SOURCE_FILE_AT_LINE (1854)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("luint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1855)) COMMA_SOURCE_FILE_AT_LINE (1855)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lsint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1856)) COMMA_SOURCE_FILE_AT_LINE (1856)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("luint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1857)) COMMA_SOURCE_FILE_AT_LINE (1857)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lsint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1858)) COMMA_SOURCE_FILE_AT_LINE (1858)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("ldouble"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1859)) COMMA_SOURCE_FILE_AT_LINE (1859))) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_buildPredefinedTypes\n") ;
  #endif
  return var_cas_outPredefinedTypes ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_buildPredefinedTypes (C_CompilerEx & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_semanticContext arg_0 = GGS_semanticContext::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_predefinedTypes result = function_buildPredefinedTypes (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_buildPredefinedTypes [1] = {& kTypeDescriptor_GGS_semanticContext} ;

const C_galgas_function_descriptorEX
kFunction_descriptor_buildPredefinedTypes ("buildPredefinedTypes",
                              functionForGenericCall_buildPredefinedTypes,
                              & kTypeDescriptor_GGS_predefinedTypes,
                              1,
                              kArgumentTypeList_buildPredefinedTypes) ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "performSemanticAnalysis"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performSemanticAnalysis (C_CompilerEx & inLexique,
                                const GGS_semanticDeclarationListAST   var_cas_inDeclarationList,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_outDecoratedDeclarationListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_performSemanticAnalysis at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_predefinedTypes var_cas_predefinedTypes = function_buildPredefinedTypes (inLexique, var_cas_inSemanticContext COMMA_SOURCE_FILE_AT_LINE (1874)) ;
  var_cas_outDecoratedDeclarationListForGeneration = GGS_semanticDeclarationSortedListForGeneration ::constructor_emptySortedList () ;
  {
    GGS_semanticDeclarationListAST::cEnumerator enumerator_77025 (var_cas_inDeclarationList, true) ;
    const GGS_semanticDeclarationListAST::cElement * operand_77025 = NULL ;
    while (((operand_77025 = enumerator_77025.nextObject ()))) {
      macroValidPointer (operand_77025) ;
      { typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis method = findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (operand_77025->mSemanticDeclaration.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_77025->mSemanticDeclaration (HERE), var_cas_inSemanticContext, var_cas_predefinedTypes, var_cas_outDecoratedDeclarationListForGeneration COMMA_SOURCE_FILE_AT_LINE (1877)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_performSemanticAnalysis\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticAnalysis (void) {
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (category_method__semanticDeclarationAST__performSemanticAnalysis, gClassInfoFor__semanticDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__predefinedTypeAST__performSemanticAnalysis, gClassInfoFor__predefinedTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__listDeclarationAST__performSemanticAnalysis, gClassInfoFor__listDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__sortedListDeclarationAST__performSemanticAnalysis, gClassInfoFor__sortedListDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__structDeclarationAST__performSemanticAnalysis, gClassInfoFor__structDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__enumDeclarationAST__performSemanticAnalysis, gClassInfoFor__enumDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__listmapDeclarationAST__performSemanticAnalysis, gClassInfoFor__listmapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__mapDeclarationAST__performSemanticAnalysis, gClassInfoFor__mapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__mapProxyDeclarationAST__performSemanticAnalysis, gClassInfoFor__mapProxyDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__externFunctionDeclarationAST__performSemanticAnalysis, gClassInfoFor__externFunctionDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__externRoutineDeclarationAST__performSemanticAnalysis, gClassInfoFor__externRoutineDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__routineDeclarationAST__performSemanticAnalysis, gClassInfoFor__routineDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__classDeclarationAST__performSemanticAnalysis, gClassInfoFor__classDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__functionDeclarationAST__performSemanticAnalysis, gClassInfoFor__functionDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__onceFunctionDeclarationAST__performSemanticAnalysis, gClassInfoFor__onceFunctionDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__filewrapperDeclarationAST__performSemanticAnalysis, gClassInfoFor__filewrapperDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__abstractCategoryMethodAST__performSemanticAnalysis, gClassInfoFor__abstractCategoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__categoryMethodAST__performSemanticAnalysis, gClassInfoFor__categoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__overridingCategoryMethodAST__performSemanticAnalysis, gClassInfoFor__overridingCategoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__overridingAbstractCategoryMethodAST__performSemanticAnalysis, gClassInfoFor__overridingAbstractCategoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__abstractCategoryReaderAST__performSemanticAnalysis, gClassInfoFor__abstractCategoryReaderAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__categoryReaderAST__performSemanticAnalysis, gClassInfoFor__categoryReaderAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__overridingCategoryReaderAST__performSemanticAnalysis, gClassInfoFor__overridingCategoryReaderAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__overridingAbstractCategoryReaderAST__performSemanticAnalysis, gClassInfoFor__overridingAbstractCategoryReaderAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticAnalysis (void) {
  gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticAnalysis (prologueRoutineFor_semanticAnalysis, epilogueRoutineFor_semanticAnalysis) ;

//---------------------------------------------------------------------------*

